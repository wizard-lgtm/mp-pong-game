; ModuleID = 'std::core::string'
source_filename = "std::core::string"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%.fault = type { i64, %"char[]", i64 }
%"char[]" = type { ptr, i64 }
%any = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"char[][]" = type { ptr, i64 }
%"ushort[]" = type { ptr, i64 }
%"uint[]" = type { ptr, i64 }
%StringIterator = type { %"char[]", i64 }
%Splitter = type { %"char[]", %"char[]", i64 }

$std.core.String.trim = comdat any

$std.core.String.starts_with = comdat any

$std.core.String.ends_with = comdat any

$std.core.String.strip = comdat any

$std.core.String.strip_end = comdat any

$std.core.String.split = comdat any

$std.core.String.new_split = comdat any

$std.core.String.tsplit = comdat any

$std.core.String.contains = comdat any

$std.core.String.index_of_char = comdat any

$std.core.String.index_of_char_from = comdat any

$std.core.String.rindex_of_char = comdat any

$std.core.String.index_of = comdat any

$std.core.String.rindex_of = comdat any

$std.core.string.ZString.str_view = comdat any

$std.core.string.ZString.char_len = comdat any

$std.core.string.ZString.len = comdat any

$std.core.String.zstr_copy = comdat any

$std.core.String.concat = comdat any

$std.core.String.tconcat = comdat any

$std.core.String.zstr_tcopy = comdat any

$std.core.String.copy = comdat any

$std.core.String.free = comdat any

$std.core.String.tcopy = comdat any

$std.core.string.ZString.copy = comdat any

$std.core.string.ZString.tcopy = comdat any

$std.core.String.to_new_utf16 = comdat any

$std.core.String.to_temp_utf16 = comdat any

$std.core.String.to_wstring = comdat any

$std.core.String.to_temp_wstring = comdat any

$std.core.String.to_new_wstring = comdat any

$std.core.String.to_utf32 = comdat any

$std.core.String.to_new_utf32 = comdat any

$std.core.String.to_temp_utf32 = comdat any

$std.core.String.convert_ascii_to_lower = comdat any

$std.core.String.new_ascii_to_lower = comdat any

$std.core.String.temp_ascii_to_lower = comdat any

$std.core.String.convert_ascii_to_upper = comdat any

$std.core.String.new_ascii_to_upper = comdat any

$std.core.String.iterator = comdat any

$std.core.String.temp_ascii_to_upper = comdat any

$std.core.String.utf8_codepoints = comdat any

$std.core.String.to_int128 = comdat any

$std.core.String.to_long = comdat any

$std.core.String.to_int = comdat any

$std.core.String.to_short = comdat any

$std.core.String.to_ichar = comdat any

$std.core.String.to_uint128 = comdat any

$std.core.String.to_ulong = comdat any

$std.core.String.to_uint = comdat any

$std.core.String.to_ushort = comdat any

$std.core.String.to_uchar = comdat any

$std.core.String.to_double = comdat any

$std.core.String.to_float = comdat any

$std.core.String.splitter = comdat any

$std.core.string.Splitter.reset = comdat any

$std.core.string.Splitter.next = comdat any

$std.core.string.tformat_zstr = comdat any

$std.core.string.format = comdat any

$std.core.string.new_format = comdat any

$std.core.string.tformat = comdat any

$std.core.string.new_format_zstr = comdat any

$std.core.string.join_new = comdat any

$std.core.string.new_from_utf32 = comdat any

$std.core.string.new_from_utf16 = comdat any

$std.core.string.new_from_wstring = comdat any

$std.core.string.temp_from_wstring = comdat any

$std.core.string.temp_from_utf16 = comdat any

$.dyn_search = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.core.string.WString" = comdat any

$"$ct.p$ushort" = comdat any

$"$ct.ushort" = comdat any

$"std.core.string.UnicodeResult$INVALID_UTF8" = comdat any

$"std.core.string.UnicodeResult$INVALID_UTF16" = comdat any

$"std.core.string.UnicodeResult$CONVERSION_FAILED" = comdat any

$"$ct.std.core.string.UnicodeResult" = comdat any

$"std.core.string.NumberConversion$EMPTY_STRING" = comdat any

$"std.core.string.NumberConversion$NEGATIVE_VALUE" = comdat any

$"std.core.string.NumberConversion$MALFORMED_INTEGER" = comdat any

$"std.core.string.NumberConversion$INTEGER_OVERFLOW" = comdat any

$"std.core.string.NumberConversion$MALFORMED_FLOAT" = comdat any

$"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" = comdat any

$"$ct.std.core.string.NumberConversion" = comdat any

$"$ct.std.core.string.Splitter" = comdat any

$"$sel.acquire" = comdat any

$"$ct.anyfault" = comdat any

$"$ct.long" = comdat any

$"$ct.ulong" = comdat any

$"$sel.release" = comdat any

$"$ct.std.core.mem.allocator.TempAllocator" = comdat any

$"std.core.builtin.SearchResult$MISSING" = comdat any

$"$ct.std.core.builtin.SearchResult" = comdat any

$"$sel.resize" = comdat any

$"$ct.uint" = comdat any

$"$ct.int" = comdat any

$"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" = comdat any

$"$ct.std.core.builtin.IteratorResult" = comdat any

$std.core.string.KMAX = comdat any

$std.core.string.MASK = comdat any

$std.core.string.B1B_DIG = comdat any

$std.core.string.B1B_MAX = comdat any

@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.WString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$ushort" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.UnicodeResult$INVALID_UTF8" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault, i64 12 }, i64 1 }, comdat, align 8
@.fault = internal constant [13 x i8] c"INVALID_UTF8\00", align 1
@"std.core.string.UnicodeResult$INVALID_UTF16" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.1, i64 13 }, i64 2 }, comdat, align 8
@.fault.1 = internal constant [14 x i8] c"INVALID_UTF16\00", align 1
@"std.core.string.UnicodeResult$CONVERSION_FAILED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.2, i64 17 }, i64 3 }, comdat, align 8
@.fault.2 = internal constant [18 x i8] c"CONVERSION_FAILED\00", align 1
@"$ct.std.core.string.UnicodeResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.NumberConversion$EMPTY_STRING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.3, i64 12 }, i64 1 }, comdat, align 8
@.fault.3 = internal constant [13 x i8] c"EMPTY_STRING\00", align 1
@"std.core.string.NumberConversion$NEGATIVE_VALUE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.4, i64 14 }, i64 2 }, comdat, align 8
@.fault.4 = internal constant [15 x i8] c"NEGATIVE_VALUE\00", align 1
@"std.core.string.NumberConversion$MALFORMED_INTEGER" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.5, i64 17 }, i64 3 }, comdat, align 8
@.fault.5 = internal constant [18 x i8] c"MALFORMED_INTEGER\00", align 1
@"std.core.string.NumberConversion$INTEGER_OVERFLOW" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.6, i64 16 }, i64 4 }, comdat, align 8
@.fault.6 = internal constant [17 x i8] c"INTEGER_OVERFLOW\00", align 1
@"std.core.string.NumberConversion$MALFORMED_FLOAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.7, i64 15 }, i64 5 }, comdat, align 8
@.fault.7 = internal constant [16 x i8] c"MALFORMED_FLOAT\00", align 1
@"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.8, i64 18 }, i64 6 }, comdat, align 8
@.fault.8 = internal constant [19 x i8] c"FLOAT_OUT_OF_RANGE\00", align 1
@"$ct.std.core.string.NumberConversion" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.Splitter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@std.core.string.SURROGATE_OFFSET = internal unnamed_addr constant i32 65536, align 4, !dbg !0
@std.core.string.SURROGATE_GENERIC_MASK = internal unnamed_addr constant i32 63488, align 4, !dbg !4
@std.core.string.SURROGATE_MASK = internal unnamed_addr constant i32 64512, align 4, !dbg !6
@std.core.string.SURROGATE_CODEPOINT_MASK = internal unnamed_addr constant i32 1023, align 4, !dbg !8
@std.core.string.SURROGATE_BITS = internal unnamed_addr constant i32 10, align 4, !dbg !10
@std.core.string.SURROGATE_LOW_VALUE = internal unnamed_addr constant i32 56320, align 4, !dbg !12
@std.core.string.SURROGATE_HIGH_VALUE = internal unnamed_addr constant i32 55296, align 4, !dbg !14
@std.core.mem.allocator.thread_temp_allocator = extern_weak thread_local global ptr, align 8
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@.file = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func = internal constant [9 x i8] c"join_new\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.15 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.16 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.file.17 = internal constant [10 x i8] c"string.c3\00", align 1
@.panic_msg.18 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.19 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.20 = internal constant [45 x i8] c"Dereference of null pointer, 'str' was null.\00", align 1
@.panic_msg.21 = internal constant [48 x i8] c"Dereference of null pointer, 's[1..]' was null.\00", align 1
@.func.22 = internal constant [15 x i8] c"new_from_utf32\00", align 1
@.func.23 = internal constant [15 x i8] c"new_from_utf16\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.24 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@.func.25 = internal constant [5 x i8] c"trim\00", align 1
@.panic_msg.26 = internal constant [45 x i8] c"Negative size (start %d is less than end %d)\00", align 1
@.func.27 = internal constant [12 x i8] c"starts_with\00", align 1
@.func.28 = internal constant [10 x i8] c"ends_with\00", align 1
@.func.29 = internal constant [6 x i8] c"strip\00", align 1
@.func.30 = internal constant [10 x i8] c"strip_end\00", align 1
@.panic_msg.31 = internal constant [84 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be at least 1 character long'.\00", align 1
@.func.32 = internal constant [6 x i8] c"split\00", align 1
@"std.core.builtin.SearchResult$MISSING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.SearchResult" to i64), %"char[]" { ptr @.fault.33, i64 7 }, i64 1 }, comdat, align 8
@.fault.33 = internal constant [8 x i8] c"MISSING\00", align 1
@"$ct.std.core.builtin.SearchResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.34 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.panic_msg.35 = internal constant [35 x i8] c"@ensure \22return.len > 0\22 violated.\00", align 1
@.func.36 = internal constant [10 x i8] c"new_split\00", align 1
@.func.37 = internal constant [14 x i8] c"index_of_char\00", align 1
@.panic_msg.38 = internal constant [35 x i8] c"@ensure \22return < s.len\22 violated.\00", align 1
@.func.39 = internal constant [19 x i8] c"index_of_char_from\00", align 1
@.func.40 = internal constant [15 x i8] c"rindex_of_char\00", align 1
@.panic_msg.41 = internal constant [72 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be len 1 or more'.\00", align 1
@.func.42 = internal constant [9 x i8] c"index_of\00", align 1
@.panic_msg.43 = internal constant [54 x i8] c"Dereference of null pointer, 's[..^needed]' was null.\00", align 1
@.func.44 = internal constant [10 x i8] c"rindex_of\00", align 1
@.func.45 = internal constant [10 x i8] c"zstr_copy\00", align 1
@.panic_msg.46 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.47 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.48 = internal constant [7 x i8] c"concat\00", align 1
@.func.49 = internal constant [5 x i8] c"copy\00", align 1
@.panic_msg.50 = internal constant [60 x i8] c"Reference parameter 's' was passed a null pointer argument.\00", align 1
@.func.51 = internal constant [5 x i8] c"free\00", align 1
@.panic_msg.52 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.53 = internal constant [13 x i8] c"to_new_utf16\00", align 1
@.func.54 = internal constant [9 x i8] c"to_utf32\00", align 1
@.func.55 = internal constant [23 x i8] c"convert_ascii_to_lower\00", align 1
@.panic_msg.56 = internal constant [43 x i8] c"Dereference of null pointer, 'c' was null.\00", align 1
@.func.57 = internal constant [23 x i8] c"convert_ascii_to_upper\00", align 1
@.func.58 = internal constant [16 x i8] c"utf8_codepoints\00", align 1
@.panic_msg.59 = internal constant [80 x i8] c"@require \22(base <= 10 && base > 1) || base == 16\22 violated: 'Unsupported base'.\00", align 1
@.func.60 = internal constant [10 x i8] c"to_int128\00", align 1
@.func.61 = internal constant [8 x i8] c"to_long\00", align 1
@.func.62 = internal constant [7 x i8] c"to_int\00", align 1
@.func.63 = internal constant [9 x i8] c"to_short\00", align 1
@.func.64 = internal constant [9 x i8] c"to_ichar\00", align 1
@.func.65 = internal constant [11 x i8] c"to_uint128\00", align 1
@.func.66 = internal constant [9 x i8] c"to_ulong\00", align 1
@.func.67 = internal constant [8 x i8] c"to_uint\00", align 1
@.func.68 = internal constant [10 x i8] c"to_ushort\00", align 1
@.func.69 = internal constant [9 x i8] c"to_uchar\00", align 1
@to_double.BITS = internal unnamed_addr constant i32 53, align 4, !dbg !16
@to_double.EMIN = internal unnamed_addr constant i32 -1074, align 4, !dbg !19
@.file.70 = internal constant [18 x i8] c"string_to_real.c3\00", align 1
@.func.71 = internal constant [10 x i8] c"to_double\00", align 1
@.str = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.72 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.73 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.74 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.75 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.panic_msg.76 = internal constant [35 x i8] c"@require \22chars.len > 0\22 violated.\00", align 1
@to_double.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !21
@to_double.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !26
@.panic_msg.77 = internal constant [17 x i8] c"Assert violation\00", align 1
@.panic_msg.78 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.79 = internal constant [18 x i8] c"Division by zero.\00", align 1
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.80 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.81 = internal constant [11 x i8] c"% by zero.\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@to_float.BITS = internal unnamed_addr constant i32 24, align 4, !dbg !31
@to_float.EMIN = internal unnamed_addr constant i32 -149, align 4, !dbg !33
@.func.82 = internal constant [9 x i8] c"to_float\00", align 1
@.str.83 = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.84 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.85 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.86 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@to_float.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !35
@to_float.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !37
@.panic_msg.87 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.func.88 = internal constant [6 x i8] c"reset\00", align 1
@.func.89 = internal constant [5 x i8] c"next\00", align 1
@"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.IteratorResult" to i64), %"char[]" { ptr @.fault.90, i64 15 }, i64 1 }, comdat, align 8
@.fault.90 = internal constant [16 x i8] c"NO_MORE_ELEMENT\00", align 1
@"$ct.std.core.builtin.IteratorResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@std.core.string.KMAX = weak local_unnamed_addr constant i32 128, comdat, align 4, !dbg !39
@std.core.string.MASK = weak local_unnamed_addr constant i32 127, comdat, align 4, !dbg !42
@std.core.string.B1B_DIG = weak local_unnamed_addr constant i32 2, comdat, align 4, !dbg !44
@std.core.string.B1B_MAX = weak local_unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], comdat, align 4, !dbg !46

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.trim(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !56 {
entry:
  %string = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %start = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %.anon8 = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr43 = alloca %"char[]", align 8
  %end = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %c59 = alloca i8, align 1
  %set60 = alloca %"char[]", align 8
  %blockret61 = alloca i8, align 1
  %.anon62 = alloca i64, align 8
  %.anon64 = alloca i64, align 8
  %ch68 = alloca i8, align 1
  %taddr72 = alloca i64, align 8
  %taddr73 = alloca i64, align 8
  %varargslots74 = alloca [2 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca i64, align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %taddr102 = alloca i64, align 8
  %taddr103 = alloca i64, align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr110 = alloca i64, align 8
  %taddr111 = alloca i64, align 8
  %varargslots112 = alloca [2 x %any], align 16
  %indirectarg115 = alloca %"any[]", align 8
  %taddr118 = alloca %"char[]", align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !69, metadata !DIExpression()), !dbg !70
  store ptr %2, ptr %to_trim, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %to_trim, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %to_trim, metadata !71, metadata !DIExpression()), !dbg !72
  call void @llvm.dbg.declare(metadata ptr %start, metadata !73, metadata !DIExpression()), !dbg !74
  store i64 0, ptr %start, align 8, !dbg !75
  call void @llvm.dbg.declare(metadata ptr %len, metadata !76, metadata !DIExpression()), !dbg !77
  %ptradd2 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !78
  %4 = load i64, ptr %ptradd2, align 8, !dbg !78
  store i64 %4, ptr %len, align 8, !dbg !78
  br label %loop.cond, !dbg !79

loop.cond:                                        ; preds = %loop.body22, %entry
  %5 = load i64, ptr %start, align 8, !dbg !80
  %6 = load i64, ptr %len, align 8, !dbg !82
  %lt = icmp ult i64 %5, %6, !dbg !80
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !80

and.rhs:                                          ; preds = %loop.cond
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !83
  %7 = load i64, ptr %ptradd3, align 8, !dbg !83
  %8 = load ptr, ptr %string, align 8, !dbg !83
  %9 = load i64, ptr %start, align 8, !dbg !84
  %ge = icmp uge i64 %9, %7, !dbg !84
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !84
  br i1 %10, label %panic, label %checkok, !dbg !84

checkok:                                          ; preds = %and.rhs
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !84
  %11 = load i8, ptr %ptradd6, align 1
  store i8 %11, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %to_trim, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !85, metadata !DIExpression()), !dbg !88
  %ptradd7 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !88
  %12 = load i64, ptr %ptradd7, align 8, !dbg !88
  store i64 %12, ptr %.anon, align 8, !dbg !88
  call void @llvm.dbg.declare(metadata ptr %.anon8, metadata !85, metadata !DIExpression()), !dbg !88
  store i64 0, ptr %.anon8, align 8, !dbg !88
  br label %loop.cond9, !dbg !88

loop.cond9:                                       ; preds = %if.exit, %checkok
  %13 = load i64, ptr %.anon8, align 8, !dbg !88
  %14 = load i64, ptr %.anon, align 8, !dbg !88
  %lt10 = icmp ult i64 %13, %14, !dbg !88
  br i1 %lt10, label %loop.body, label %loop.exit, !dbg !88

loop.body:                                        ; preds = %loop.cond9
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !90, metadata !DIExpression()), !dbg !92
  %ptradd11 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !93
  %15 = load i64, ptr %ptradd11, align 8, !dbg !93
  %16 = load ptr, ptr %set, align 8, !dbg !93
  %17 = load i64, ptr %.anon8, align 8, !dbg !93
  %ge12 = icmp uge i64 %17, %15, !dbg !93
  %18 = call i1 @llvm.expect.i1(i1 %ge12, i1 false), !dbg !93
  br i1 %18, label %panic13, label %checkok20, !dbg !93

checkok20:                                        ; preds = %loop.body
  %ptradd21 = getelementptr inbounds i8, ptr %16, i64 %17, !dbg !93
  %19 = load i8, ptr %ptradd21, align 1, !dbg !93
  store i8 %19, ptr %ch, align 1, !dbg !93
  %20 = load i8, ptr %ch, align 1, !dbg !94
  %21 = load i8, ptr %c, align 1, !dbg !95
  %eq = icmp eq i8 %20, %21, !dbg !94
  br i1 %eq, label %if.then, label %if.exit, !dbg !94

if.then:                                          ; preds = %checkok20
  store i8 1, ptr %blockret, align 1, !dbg !96
  br label %expr_block.exit, !dbg !96

if.exit:                                          ; preds = %checkok20
  %22 = load i64, ptr %.anon8, align 8, !dbg !88
  %addnuw = add nuw i64 %22, 1, !dbg !88
  store i64 %addnuw, ptr %.anon8, align 8, !dbg !88
  br label %loop.cond9, !dbg !88

loop.exit:                                        ; preds = %loop.cond9
  store i8 0, ptr %blockret, align 1, !dbg !97
  br label %expr_block.exit, !dbg !97

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %23 = load i8, ptr %blockret, align 1, !dbg !97
  %24 = trunc i8 %23 to i1, !dbg !97
  br label %and.phi, !dbg !97

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %24, %expr_block.exit ], !dbg !97
  br i1 %val, label %loop.body22, label %loop.exit23, !dbg !97

loop.body22:                                      ; preds = %and.phi
  %25 = load i64, ptr %start, align 8, !dbg !98
  %add = add i64 %25, 1, !dbg !98
  store i64 %add, ptr %start, align 8, !dbg !98
  br label %loop.cond, !dbg !98

loop.exit23:                                      ; preds = %and.phi
  %26 = load i64, ptr %start, align 8, !dbg !99
  %27 = load i64, ptr %len, align 8, !dbg !100
  %eq24 = icmp eq i64 %26, %27, !dbg !99
  br i1 %eq24, label %if.then25, label %if.exit44, !dbg !99

if.then25:                                        ; preds = %loop.exit23
  %28 = load %"char[]", ptr %string, align 8, !dbg !101
  %29 = extractvalue %"char[]" %28, 0, !dbg !101
  %30 = extractvalue %"char[]" %28, 1, !dbg !101
  %gt = icmp sgt i64 0, %30, !dbg !101
  %31 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !101
  br i1 %31, label %panic26, label %checkok33, !dbg !101

checkok33:                                        ; preds = %if.then25
  %lt34 = icmp slt i64 %30, 0, !dbg !101
  %32 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !101
  br i1 %32, label %panic35, label %checkok42, !dbg !101

checkok42:                                        ; preds = %checkok33
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !101
  %34 = insertvalue %"char[]" %33, i64 0, 1, !dbg !101
  store %"char[]" %34, ptr %taddr43, align 8
  %35 = load { ptr, i64 }, ptr %taddr43, align 8
  ret { ptr, i64 } %35

if.exit44:                                        ; preds = %loop.exit23
  call void @llvm.dbg.declare(metadata ptr %end, metadata !102, metadata !DIExpression()), !dbg !103
  %36 = load i64, ptr %len, align 8, !dbg !104
  %sub = sub i64 %36, 1, !dbg !104
  store i64 %sub, ptr %end, align 8, !dbg !104
  br label %loop.cond45, !dbg !105

loop.cond45:                                      ; preds = %loop.body88, %if.exit44
  %37 = load i64, ptr %end, align 8, !dbg !106
  %38 = load i64, ptr %start, align 8, !dbg !108
  %gt46 = icmp ugt i64 %37, %38, !dbg !106
  br i1 %gt46, label %and.rhs47, label %and.phi86, !dbg !106

and.rhs47:                                        ; preds = %loop.cond45
  %ptradd48 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !109
  %39 = load i64, ptr %ptradd48, align 8, !dbg !109
  %40 = load ptr, ptr %string, align 8, !dbg !109
  %41 = load i64, ptr %end, align 8, !dbg !110
  %ge49 = icmp uge i64 %41, %39, !dbg !110
  %42 = call i1 @llvm.expect.i1(i1 %ge49, i1 false), !dbg !110
  br i1 %42, label %panic50, label %checkok57, !dbg !110

checkok57:                                        ; preds = %and.rhs47
  %ptradd58 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !110
  %43 = load i8, ptr %ptradd58, align 1
  store i8 %43, ptr %c59, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set60, ptr align 8 %to_trim, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %.anon62, metadata !111, metadata !DIExpression()), !dbg !114
  %ptradd63 = getelementptr inbounds i8, ptr %set60, i64 8, !dbg !114
  %44 = load i64, ptr %ptradd63, align 8, !dbg !114
  store i64 %44, ptr %.anon62, align 8, !dbg !114
  call void @llvm.dbg.declare(metadata ptr %.anon64, metadata !111, metadata !DIExpression()), !dbg !114
  store i64 0, ptr %.anon64, align 8, !dbg !114
  br label %loop.cond65, !dbg !114

loop.cond65:                                      ; preds = %if.exit82, %checkok57
  %45 = load i64, ptr %.anon64, align 8, !dbg !114
  %46 = load i64, ptr %.anon62, align 8, !dbg !114
  %lt66 = icmp ult i64 %45, %46, !dbg !114
  br i1 %lt66, label %loop.body67, label %loop.exit84, !dbg !114

loop.body67:                                      ; preds = %loop.cond65
  call void @llvm.dbg.declare(metadata ptr %ch68, metadata !116, metadata !DIExpression()), !dbg !118
  %ptradd69 = getelementptr inbounds i8, ptr %set60, i64 8, !dbg !119
  %47 = load i64, ptr %ptradd69, align 8, !dbg !119
  %48 = load ptr, ptr %set60, align 8, !dbg !119
  %49 = load i64, ptr %.anon64, align 8, !dbg !119
  %ge70 = icmp uge i64 %49, %47, !dbg !119
  %50 = call i1 @llvm.expect.i1(i1 %ge70, i1 false), !dbg !119
  br i1 %50, label %panic71, label %checkok78, !dbg !119

checkok78:                                        ; preds = %loop.body67
  %ptradd79 = getelementptr inbounds i8, ptr %48, i64 %49, !dbg !119
  %51 = load i8, ptr %ptradd79, align 1, !dbg !119
  store i8 %51, ptr %ch68, align 1, !dbg !119
  %52 = load i8, ptr %ch68, align 1, !dbg !120
  %53 = load i8, ptr %c59, align 1, !dbg !121
  %eq80 = icmp eq i8 %52, %53, !dbg !120
  br i1 %eq80, label %if.then81, label %if.exit82, !dbg !120

if.then81:                                        ; preds = %checkok78
  store i8 1, ptr %blockret61, align 1, !dbg !122
  br label %expr_block.exit85, !dbg !122

if.exit82:                                        ; preds = %checkok78
  %54 = load i64, ptr %.anon64, align 8, !dbg !114
  %addnuw83 = add nuw i64 %54, 1, !dbg !114
  store i64 %addnuw83, ptr %.anon64, align 8, !dbg !114
  br label %loop.cond65, !dbg !114

loop.exit84:                                      ; preds = %loop.cond65
  store i8 0, ptr %blockret61, align 1, !dbg !123
  br label %expr_block.exit85, !dbg !123

expr_block.exit85:                                ; preds = %loop.exit84, %if.then81
  %55 = load i8, ptr %blockret61, align 1, !dbg !123
  %56 = trunc i8 %55 to i1, !dbg !123
  br label %and.phi86, !dbg !123

and.phi86:                                        ; preds = %expr_block.exit85, %loop.cond45
  %val87 = phi i1 [ false, %loop.cond45 ], [ %56, %expr_block.exit85 ], !dbg !123
  br i1 %val87, label %loop.body88, label %loop.exit90, !dbg !123

loop.body88:                                      ; preds = %and.phi86
  %57 = load i64, ptr %end, align 8, !dbg !124
  %sub89 = sub i64 %57, 1, !dbg !124
  store i64 %sub89, ptr %end, align 8, !dbg !124
  br label %loop.cond45, !dbg !124

loop.exit90:                                      ; preds = %and.phi86
  %58 = load %"char[]", ptr %string, align 8, !dbg !125
  %59 = extractvalue %"char[]" %58, 0, !dbg !125
  %60 = load i64, ptr %start, align 8, !dbg !126
  %61 = extractvalue %"char[]" %58, 1, !dbg !126
  %gt91 = icmp ugt i64 %60, %61, !dbg !126
  %62 = call i1 @llvm.expect.i1(i1 %gt91, i1 false), !dbg !126
  br i1 %62, label %panic92, label %checkok99, !dbg !126

checkok99:                                        ; preds = %loop.exit90
  %63 = load i64, ptr %end, align 8, !dbg !127
  %gt100 = icmp ugt i64 %60, %63, !dbg !127
  %64 = call i1 @llvm.expect.i1(i1 %gt100, i1 false), !dbg !127
  br i1 %64, label %panic101, label %checkok108, !dbg !127

checkok108:                                       ; preds = %checkok99
  %le = icmp ule i64 %61, %63, !dbg !125
  %65 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !125
  br i1 %65, label %panic109, label %checkok116, !dbg !125

checkok116:                                       ; preds = %checkok108
  %66 = add i64 %63, 1, !dbg !125
  %size = sub i64 %66, %60, !dbg !125
  %ptradd117 = getelementptr inbounds i8, ptr %59, i64 %60, !dbg !125
  %67 = insertvalue %"char[]" undef, ptr %ptradd117, 0, !dbg !125
  %68 = insertvalue %"char[]" %67, i64 %size, 1, !dbg !125
  store %"char[]" %68, ptr %taddr118, align 8
  %69 = load { ptr, i64 }, ptr %taddr118, align 8
  ret { ptr, i64 } %69

panic:                                            ; preds = %and.rhs
  store i64 %7, ptr %taddr, align 8
  %70 = insertvalue %any undef, ptr %taddr, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr4, align 8
  %72 = insertvalue %any undef, ptr %taddr4, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %73, ptr %ptradd5, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.25, i64 4, i32 151, ptr byval(%"any[]") align 8 %indirectarg), !dbg !84
  unreachable, !dbg !84

panic13:                                          ; preds = %loop.body
  store i64 %15, ptr %taddr14, align 8
  %75 = insertvalue %any undef, ptr %taddr14, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr15, align 8
  %77 = insertvalue %any undef, ptr %taddr15, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %78, ptr %ptradd17, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.25, i64 4, i32 110, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !93
  unreachable, !dbg !93

panic26:                                          ; preds = %if.then25
  store i64 %30, ptr %taddr27, align 8
  %80 = insertvalue %any undef, ptr %taddr27, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr28, align 8
  %82 = insertvalue %any undef, ptr %taddr28, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %81, ptr %varargslots29, align 16
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %83, ptr %ptradd30, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp31", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.25, i64 4, i32 152, ptr byval(%"any[]") align 8 %indirectarg32), !dbg !101
  unreachable, !dbg !101

panic35:                                          ; preds = %checkok33
  store i64 -1, ptr %taddr36, align 8
  %85 = insertvalue %any undef, ptr %taddr36, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr37, align 8
  %87 = insertvalue %any undef, ptr %taddr37, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %86, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %88, ptr %ptradd39, align 16
  %89 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %89, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.25, i64 4, i32 152, ptr byval(%"any[]") align 8 %indirectarg41), !dbg !101
  unreachable, !dbg !101

panic50:                                          ; preds = %and.rhs47
  store i64 %39, ptr %taddr51, align 8
  %90 = insertvalue %any undef, ptr %taddr51, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr52, align 8
  %92 = insertvalue %any undef, ptr %taddr52, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %93, ptr %ptradd54, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.25, i64 4, i32 154, ptr byval(%"any[]") align 8 %indirectarg56), !dbg !110
  unreachable, !dbg !110

panic71:                                          ; preds = %loop.body67
  store i64 %47, ptr %taddr72, align 8
  %95 = insertvalue %any undef, ptr %taddr72, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr73, align 8
  %97 = insertvalue %any undef, ptr %taddr73, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots74, align 16
  %ptradd75 = getelementptr inbounds i8, ptr %varargslots74, i64 16
  store %any %98, ptr %ptradd75, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp76" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.25, i64 4, i32 110, ptr byval(%"any[]") align 8 %indirectarg77), !dbg !119
  unreachable, !dbg !119

panic92:                                          ; preds = %loop.exit90
  store i64 %61, ptr %taddr93, align 8
  %100 = insertvalue %any undef, ptr %taddr93, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %60, ptr %taddr94, align 8
  %102 = insertvalue %any undef, ptr %taddr94, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %103, ptr %ptradd96, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.25, i64 4, i32 155, ptr byval(%"any[]") align 8 %indirectarg98), !dbg !125
  unreachable, !dbg !125

panic101:                                         ; preds = %checkok99
  store i64 %60, ptr %taddr102, align 8
  %105 = insertvalue %any undef, ptr %taddr102, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %63, ptr %taddr103, align 8
  %107 = insertvalue %any undef, ptr %taddr103, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %108, ptr %ptradd105, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 44, ptr @.file.17, i64 9, ptr @.func.25, i64 4, i32 155, ptr byval(%"any[]") align 8 %indirectarg107), !dbg !125
  unreachable, !dbg !125

panic109:                                         ; preds = %checkok108
  store i64 %63, ptr %taddr110, align 8
  %110 = insertvalue %any undef, ptr %taddr110, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %61, ptr %taddr111, align 8
  %112 = insertvalue %any undef, ptr %taddr111, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots112, align 16
  %ptradd113 = getelementptr inbounds i8, ptr %varargslots112, i64 16
  store %any %113, ptr %ptradd113, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots112, 0
  %"$$temp114" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp114", ptr %indirectarg115, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.25, i64 4, i32 155, ptr byval(%"any[]") align 8 %indirectarg115), !dbg !125
  unreachable, !dbg !125
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.starts_with(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !128 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !132, metadata !DIExpression()), !dbg !133
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !134, metadata !DIExpression()), !dbg !135
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !136
  %4 = load i64, ptr %ptradd2, align 8, !dbg !136
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !137
  %5 = load i64, ptr %ptradd3, align 8, !dbg !137
  %gt = icmp ugt i64 %4, %5, !dbg !136
  br i1 %gt, label %if.then, label %if.exit, !dbg !136

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !138

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !139
  %6 = load i64, ptr %ptradd4, align 8, !dbg !139
  %not = icmp eq i64 %6, 0, !dbg !139
  br i1 %not, label %if.then5, label %if.exit6, !dbg !139

if.then5:                                         ; preds = %if.exit
  ret i8 1, !dbg !140

if.exit6:                                         ; preds = %if.exit
  %7 = load %"char[]", ptr %string, align 8, !dbg !141
  %8 = extractvalue %"char[]" %7, 0, !dbg !141
  %9 = extractvalue %"char[]" %7, 1, !dbg !142
  %gt7 = icmp ugt i64 0, %9, !dbg !142
  %10 = call i1 @llvm.expect.i1(i1 %gt7, i1 false), !dbg !142
  br i1 %10, label %panic, label %checkok, !dbg !142

checkok:                                          ; preds = %if.exit6
  %ptradd10 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !143
  %11 = load i64, ptr %ptradd10, align 8, !dbg !143
  %add = add i64 0, %11, !dbg !143
  %lt = icmp ult i64 %9, %add, !dbg !143
  %sub = sub i64 %add, 1, !dbg !143
  %12 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !143
  br i1 %12, label %panic11, label %checkok18, !dbg !143

checkok18:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !141
  %13 = insertvalue %"char[]" undef, ptr %8, 0, !dbg !141
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !141
  %15 = load %"char[]", ptr %needle, align 8, !dbg !144
  %16 = extractvalue %"char[]" %14, 1, !dbg !141
  %17 = extractvalue %"char[]" %15, 1, !dbg !141
  %18 = extractvalue %"char[]" %14, 0, !dbg !141
  %19 = extractvalue %"char[]" %15, 0, !dbg !141
  %eq = icmp eq i64 %16, %17, !dbg !141
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !141

slice_cmp_values:                                 ; preds = %checkok18
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %20 = load i64, ptr %cmp.idx, align 8
  %lt19 = icmp slt i64 %20, %16
  br i1 %lt19, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd20 = getelementptr inbounds i8, ptr %18, i64 %20
  %ptradd21 = getelementptr inbounds i8, ptr %19, i64 %20
  %21 = load i8, ptr %ptradd20, align 1
  %22 = load i8, ptr %ptradd21, align 1
  %eq22 = icmp eq i8 %21, %22
  %23 = add i64 %20, 1
  store i64 %23, ptr %cmp.idx, align 8
  br i1 %eq22, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok18
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok18 ], [ false, %slice_loop_comparison ]
  %24 = zext i1 %slice_cmp_phi to i8
  ret i8 %24

panic:                                            ; preds = %if.exit6
  store i64 %9, ptr %taddr, align 8
  %25 = insertvalue %any undef, ptr %taddr, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %27 = insertvalue %any undef, ptr %taddr8, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %26, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %28, ptr %ptradd9, align 16
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.27, i64 11, i32 170, ptr byval(%"any[]") align 8 %indirectarg), !dbg !141
  unreachable, !dbg !141

panic11:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr12, align 8
  %30 = insertvalue %any undef, ptr %taddr12, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr13, align 8
  %32 = insertvalue %any undef, ptr %taddr13, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %31, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %33, ptr %ptradd15, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.27, i64 11, i32 170, ptr byval(%"any[]") align 8 %indirectarg17), !dbg !141
  unreachable, !dbg !141
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.ends_with(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !145 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !146, metadata !DIExpression()), !dbg !147
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !148, metadata !DIExpression()), !dbg !149
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !150
  %4 = load i64, ptr %ptradd2, align 8, !dbg !150
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !151
  %5 = load i64, ptr %ptradd3, align 8, !dbg !151
  %gt = icmp ugt i64 %4, %5, !dbg !150
  br i1 %gt, label %if.then, label %if.exit, !dbg !150

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !152

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !153
  %6 = load i64, ptr %ptradd4, align 8, !dbg !153
  %not = icmp eq i64 %6, 0, !dbg !153
  br i1 %not, label %if.then5, label %if.exit6, !dbg !153

if.then5:                                         ; preds = %if.exit
  ret i8 1, !dbg !154

if.exit6:                                         ; preds = %if.exit
  %7 = load %"char[]", ptr %string, align 8, !dbg !155
  %8 = extractvalue %"char[]" %7, 0, !dbg !155
  %ptradd7 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !156
  %9 = load i64, ptr %ptradd7, align 8, !dbg !156
  %10 = extractvalue %"char[]" %7, 1, !dbg !156
  %sub = sub i64 %10, %9, !dbg !156
  %gt8 = icmp ugt i64 %sub, %10, !dbg !156
  %11 = call i1 @llvm.expect.i1(i1 %gt8, i1 false), !dbg !156
  br i1 %11, label %panic, label %checkok, !dbg !156

checkok:                                          ; preds = %if.exit6
  %size = sub i64 %10, %sub, !dbg !155
  %ptradd11 = getelementptr inbounds i8, ptr %8, i64 %sub, !dbg !155
  %12 = insertvalue %"char[]" undef, ptr %ptradd11, 0, !dbg !155
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !155
  %14 = load %"char[]", ptr %needle, align 8, !dbg !157
  %15 = extractvalue %"char[]" %13, 1, !dbg !155
  %16 = extractvalue %"char[]" %14, 1, !dbg !155
  %17 = extractvalue %"char[]" %13, 0, !dbg !155
  %18 = extractvalue %"char[]" %14, 0, !dbg !155
  %eq = icmp eq i64 %15, %16, !dbg !155
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !155

slice_cmp_values:                                 ; preds = %checkok
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %19 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %19, %15
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd12 = getelementptr inbounds i8, ptr %17, i64 %19
  %ptradd13 = getelementptr inbounds i8, ptr %18, i64 %19
  %20 = load i8, ptr %ptradd12, align 1
  %21 = load i8, ptr %ptradd13, align 1
  %eq14 = icmp eq i8 %20, %21
  %22 = add i64 %19, 1
  store i64 %22, ptr %cmp.idx, align 8
  br i1 %eq14, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok ], [ false, %slice_loop_comparison ]
  %23 = zext i1 %slice_cmp_phi to i8
  ret i8 %23

panic:                                            ; preds = %if.exit6
  store i64 %10, ptr %taddr, align 8
  %24 = insertvalue %any undef, ptr %taddr, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr9, align 8
  %26 = insertvalue %any undef, ptr %taddr9, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %27, ptr %ptradd10, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.28, i64 9, i32 185, ptr byval(%"any[]") align 8 %indirectarg), !dbg !155
  unreachable, !dbg !155
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.strip(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !158 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca %"char[]", align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !159, metadata !DIExpression()), !dbg !160
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !161, metadata !DIExpression()), !dbg !162
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !163
  %4 = load i64, ptr %ptradd2, align 8, !dbg !163
  %not = icmp eq i64 %4, 0, !dbg !163
  br i1 %not, label %or.phi, label %or.rhs, !dbg !163

or.rhs:                                           ; preds = %entry
  %lo = load ptr, ptr %string, align 8, !dbg !164
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !164
  %hi = load i64, ptr %ptradd3, align 8, !dbg !164
  %lo4 = load ptr, ptr %needle, align 8, !dbg !164
  %ptradd5 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !164
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !164
  %5 = call i8 @std.core.String.starts_with(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6), !dbg !165
  %6 = trunc i8 %5 to i1, !dbg !165
  %not7 = xor i1 %6, true, !dbg !165
  br label %or.phi, !dbg !165

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not7, %or.rhs ], !dbg !165
  br i1 %val, label %if.then, label %if.exit, !dbg !165

if.then:                                          ; preds = %or.phi
  %7 = load { ptr, i64 }, ptr %string, align 8, !dbg !166
  ret { ptr, i64 } %7, !dbg !166

if.exit:                                          ; preds = %or.phi
  %8 = load %"char[]", ptr %string, align 8, !dbg !167
  %9 = extractvalue %"char[]" %8, 0, !dbg !167
  %ptradd8 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !168
  %10 = load i64, ptr %ptradd8, align 8, !dbg !168
  %11 = extractvalue %"char[]" %8, 1, !dbg !168
  %gt = icmp ugt i64 %10, %11, !dbg !168
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !168
  br i1 %12, label %panic, label %checkok, !dbg !168

checkok:                                          ; preds = %if.exit
  %size = sub i64 %11, %10, !dbg !167
  %ptradd11 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !167
  %13 = insertvalue %"char[]" undef, ptr %ptradd11, 0, !dbg !167
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !167
  store %"char[]" %14, ptr %taddr12, align 8
  %15 = load { ptr, i64 }, ptr %taddr12, align 8
  ret { ptr, i64 } %15

panic:                                            ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr9, align 8
  %18 = insertvalue %any undef, ptr %taddr9, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd10, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.29, i64 5, i32 199, ptr byval(%"any[]") align 8 %indirectarg), !dbg !167
  unreachable, !dbg !167
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.strip_end(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !169 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca %"char[]", align 8
  store ptr %0, ptr %string, align 8
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !170, metadata !DIExpression()), !dbg !171
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !172, metadata !DIExpression()), !dbg !173
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !174
  %4 = load i64, ptr %ptradd2, align 8, !dbg !174
  %not = icmp eq i64 %4, 0, !dbg !174
  br i1 %not, label %or.phi, label %or.rhs, !dbg !174

or.rhs:                                           ; preds = %entry
  %lo = load ptr, ptr %string, align 8, !dbg !175
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !175
  %hi = load i64, ptr %ptradd3, align 8, !dbg !175
  %lo4 = load ptr, ptr %needle, align 8, !dbg !175
  %ptradd5 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !175
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !175
  %5 = call i8 @std.core.String.ends_with(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6), !dbg !176
  %6 = trunc i8 %5 to i1, !dbg !176
  %not7 = xor i1 %6, true, !dbg !176
  br label %or.phi, !dbg !176

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not7, %or.rhs ], !dbg !176
  br i1 %val, label %if.then, label %if.exit, !dbg !176

if.then:                                          ; preds = %or.phi
  %7 = load { ptr, i64 }, ptr %string, align 8, !dbg !177
  ret { ptr, i64 } %7, !dbg !177

if.exit:                                          ; preds = %or.phi
  %8 = load %"char[]", ptr %string, align 8, !dbg !178
  %9 = extractvalue %"char[]" %8, 0, !dbg !178
  %10 = extractvalue %"char[]" %8, 1, !dbg !179
  %gt = icmp ugt i64 0, %10, !dbg !179
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !179
  br i1 %11, label %panic, label %checkok, !dbg !179

checkok:                                          ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !180
  %12 = load i64, ptr %ptradd10, align 8, !dbg !180
  %ptradd11 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !181
  %13 = load i64, ptr %ptradd11, align 8, !dbg !181
  %sub = sub i64 %12, %13, !dbg !180
  %add = add i64 0, %sub, !dbg !180
  %lt = icmp ult i64 %10, %add, !dbg !180
  %sub12 = sub i64 %add, 1, !dbg !180
  %14 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !180
  br i1 %14, label %panic13, label %checkok20, !dbg !180

checkok20:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !178
  %15 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !178
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !178
  store %"char[]" %16, ptr %taddr21, align 8
  %17 = load { ptr, i64 }, ptr %taddr21, align 8
  ret { ptr, i64 } %17

panic:                                            ; preds = %if.exit
  store i64 %10, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %20 = insertvalue %any undef, ptr %taddr8, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %19, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd9, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.30, i64 9, i32 214, ptr byval(%"any[]") align 8 %indirectarg), !dbg !178
  unreachable, !dbg !178

panic13:                                          ; preds = %checkok
  store i64 %sub12, ptr %taddr14, align 8
  %23 = insertvalue %any undef, ptr %taddr14, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr15, align 8
  %25 = insertvalue %any undef, ptr %taddr15, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %24, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %26, ptr %ptradd17, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.30, i64 9, i32 214, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !178
  unreachable, !dbg !178
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.split(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr byval(%any) align 8 %5) #0 comdat !dbg !182 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %holder = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements4 = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam10 = alloca i64, align 8
  %res = alloca %"char[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %allocator54 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var56 = alloca i64, align 8
  %allocator57 = alloca %any, align 8
  %ptr58 = alloca ptr, align 8
  %new_size59 = alloca i64, align 8
  %blockret60 = alloca ptr, align 8
  %allocator63 = alloca %any, align 8
  %ptr64 = alloca ptr, align 8
  %.inlinecache69 = alloca ptr, align 8
  %.cachedtype70 = alloca ptr, align 8
  %.inlinecache84 = alloca ptr, align 8
  %.cachedtype85 = alloca ptr, align 8
  %retparam94 = alloca ptr, align 8
  %.inlinecache100 = alloca ptr, align 8
  %.cachedtype101 = alloca ptr, align 8
  %retparam110 = alloca ptr, align 8
  %varargslots116 = alloca [1 x %any], align 16
  %indirectarg118 = alloca %"any[]", align 8
  %taddr127 = alloca %"char[][]", align 8
  store ptr null, ptr %.cachedtype101, align 8
  store ptr null, ptr %.cachedtype85, align 8
  store ptr null, ptr %.cachedtype70, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !196, metadata !DIExpression()), !dbg !197
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !198, metadata !DIExpression()), !dbg !199
  store i64 %4, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !200, metadata !DIExpression()), !dbg !201
  call void @llvm.dbg.declare(metadata ptr %5, metadata !202, metadata !DIExpression()), !dbg !203
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !204
  %6 = load i64, ptr %ptradd2, align 8, !dbg !204
  %lt = icmp ult i64 0, %6, !dbg !204
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !204

assert_fail:                                      ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !204
  call void %7(ptr @.panic_msg.31, i64 83, ptr @.file.17, i64 9, ptr @.func.32, i64 5, i32 224), !dbg !204
  unreachable, !dbg !204

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %capacity, metadata !206, metadata !DIExpression()), !dbg !207
  store i64 16, ptr %capacity, align 8, !dbg !208
  call void @llvm.dbg.declare(metadata ptr %i, metadata !209, metadata !DIExpression()), !dbg !210
  store i64 0, ptr %i, align 8, !dbg !211
  call void @llvm.dbg.declare(metadata ptr %holder, metadata !212, metadata !DIExpression()), !dbg !213
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %5, i32 16, i1 false)
  %8 = load i64, ptr %capacity, align 8
  store i64 %8, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %9 = load i64, ptr %elements, align 8
  store i64 %9, ptr %elements4, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator3, i32 16, i1 false)
  %10 = load i64, ptr %elements4, align 8, !dbg !214
  %mul = mul i64 16, %10, !dbg !220
  store i64 %mul, ptr %size, align 8
  %11 = load i64, ptr %size, align 8, !dbg !221
  %not = icmp eq i64 %11, 0, !dbg !221
  br i1 %not, label %if.then, label %if.exit, !dbg !221

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !224
  br label %expr_block.exit, !dbg !224

if.exit:                                          ; preds = %assert_ok
  %ptradd6 = getelementptr inbounds i8, ptr %allocator5, i64 8, !dbg !225
  %12 = load i64, ptr %ptradd6, align 8, !dbg !225
  %13 = inttoptr i64 %12 to ptr, !dbg !225
  %type = load ptr, ptr %.cachedtype, align 8
  %14 = icmp eq ptr %13, %type
  br i1 %14, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 16
  %15 = load ptr, ptr %ptradd7, align 8
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.acquire")
  store ptr %16, ptr %.inlinecache, align 8
  store ptr %13, ptr %.cachedtype, align 8
  br label %17

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %17

17:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %16, %cache_miss ]
  %18 = icmp eq ptr %fn_phi, null
  br i1 %18, label %missing_function, label %match

missing_function:                                 ; preds = %17
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !227
  call void %19(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.32, i64 5, i32 68), !dbg !227
  unreachable, !dbg !227

match:                                            ; preds = %17
  %20 = load ptr, ptr %allocator5, align 8
  %21 = load i64, ptr %size, align 8
  %22 = call i64 %fn_phi(ptr %retparam, ptr %20, i64 %21, i32 0, i64 0), !dbg !227
  %not_err = icmp eq i64 %22, 0, !dbg !227
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !227
  br i1 %23, label %after_check, label %assign_optional, !dbg !227

assign_optional:                                  ; preds = %match
  store i64 %22, ptr %error_var, align 8, !dbg !227
  br label %panic_block, !dbg !227

after_check:                                      ; preds = %match
  %24 = load ptr, ptr %retparam, align 8, !dbg !227
  store ptr %24, ptr %blockret, align 8, !dbg !227
  br label %expr_block.exit, !dbg !227

expr_block.exit:                                  ; preds = %after_check, %if.then
  %25 = load ptr, ptr %blockret, align 8, !dbg !227
  store ptr %25, ptr %taddr, align 8
  %26 = load ptr, ptr %taddr, align 8
  %27 = load i64, ptr %elements4, align 8, !dbg !228
  %add = add i64 0, %27, !dbg !228
  %size8 = sub i64 %add, 0, !dbg !228
  %28 = insertvalue %"char[][]" undef, ptr %26, 0, !dbg !228
  %29 = insertvalue %"char[][]" %28, i64 %size8, 1, !dbg !228
  br label %noerr_block, !dbg !228

panic_block:                                      ; preds = %assign_optional
  %30 = insertvalue %any undef, ptr %error_var, 0, !dbg !228
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !228
  store %any %31, ptr %varargslots, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 36, ptr @.file, i64 16, ptr @.func.32, i64 5, i32 269, ptr byval(%"any[]") align 8 %indirectarg), !dbg !217
  unreachable, !dbg !217

noerr_block:                                      ; preds = %expr_block.exit
  %33 = extractvalue %"char[][]" %29, 0, !dbg !217
  store ptr %33, ptr %holder, align 8, !dbg !217
  call void @llvm.dbg.declare(metadata ptr %no_more, metadata !229, metadata !DIExpression()), !dbg !230
  store i8 0, ptr %no_more, align 1, !dbg !231
  br label %loop.cond, !dbg !232

loop.cond:                                        ; preds = %if.exit120, %noerr_block
  %34 = load i8, ptr %no_more, align 1, !dbg !233
  %35 = trunc i8 %34 to i1, !dbg !233
  %not9 = xor i1 %35, true, !dbg !233
  br i1 %not9, label %loop.body, label %loop.exit, !dbg !233

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %index, metadata !235, metadata !DIExpression()), !dbg !237
  %36 = load i64, ptr %i, align 8, !dbg !238
  %37 = load i64, ptr %max, align 8, !dbg !239
  %sub = sub i64 %37, 1, !dbg !239
  %eq = icmp eq i64 %sub, %36, !dbg !238
  %check = icmp sge i64 %sub, 0, !dbg !238
  %siui-eq = and i1 %check, %eq, !dbg !238
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !238

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %index.f, align 8, !dbg !240
  br label %after_assign, !dbg !240

cond.rhs:                                         ; preds = %loop.body
  %lo = load ptr, ptr %s, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd11, align 8
  %lo12 = load ptr, ptr %needle, align 8
  %ptradd13 = getelementptr inbounds i8, ptr %needle, i64 8
  %hi14 = load i64, ptr %ptradd13, align 8
  %38 = call i64 @std.core.String.index_of(ptr %retparam10, ptr %lo, i64 %hi, ptr %lo12, i64 %hi14), !dbg !241
  %not_err15 = icmp eq i64 %38, 0, !dbg !241
  %39 = call i1 @llvm.expect.i1(i1 %not_err15, i1 true), !dbg !241
  br i1 %39, label %after_check17, label %assign_optional16, !dbg !241

assign_optional16:                                ; preds = %cond.rhs
  store i64 %38, ptr %index.f, align 8, !dbg !241
  br label %after_assign, !dbg !241

after_check17:                                    ; preds = %cond.rhs
  %40 = load i64, ptr %retparam10, align 8, !dbg !241
  br label %cond.phi, !dbg !241

cond.phi:                                         ; preds = %after_check17
  store i64 %40, ptr %index, align 8, !dbg !241
  store i64 0, ptr %index.f, align 8, !dbg !241
  br label %after_assign, !dbg !241

after_assign:                                     ; preds = %cond.phi, %assign_optional16, %cond.lhs
  call void @llvm.dbg.declare(metadata ptr %res, metadata !242, metadata !DIExpression()), !dbg !243
  %load.err = load i64, ptr %index.f, align 8, !dbg !244
  %result = icmp eq i64 %load.err, 0, !dbg !244
  br i1 %result, label %if.then18, label %if.else, !dbg !244

if.then18:                                        ; preds = %after_assign
  %41 = load %"char[]", ptr %s, align 8, !dbg !245
  %42 = extractvalue %"char[]" %41, 0, !dbg !245
  %43 = extractvalue %"char[]" %41, 1, !dbg !247
  %gt = icmp ugt i64 0, %43, !dbg !247
  %44 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !247
  br i1 %44, label %panic, label %checkok, !dbg !247

checkok:                                          ; preds = %if.then18
  %45 = load i64, ptr %index, align 8, !dbg !248
  %add25 = add i64 0, %45, !dbg !248
  %lt26 = icmp ult i64 %43, %add25, !dbg !248
  %sub27 = sub i64 %add25, 1, !dbg !248
  %46 = call i1 @llvm.expect.i1(i1 %lt26, i1 false), !dbg !248
  br i1 %46, label %panic28, label %checkok35, !dbg !248

checkok35:                                        ; preds = %checkok
  %size36 = sub i64 %add25, 0, !dbg !245
  %47 = insertvalue %"char[]" undef, ptr %42, 0, !dbg !245
  %48 = insertvalue %"char[]" %47, i64 %size36, 1, !dbg !245
  store %"char[]" %48, ptr %res, align 8, !dbg !245
  %49 = load %"char[]", ptr %s, align 8, !dbg !249
  %50 = extractvalue %"char[]" %49, 0, !dbg !249
  %51 = load i64, ptr %index, align 8, !dbg !250
  %ptradd37 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !251
  %52 = load i64, ptr %ptradd37, align 8, !dbg !251
  %add38 = add i64 %51, %52, !dbg !250
  %53 = extractvalue %"char[]" %49, 1, !dbg !250
  %gt39 = icmp ugt i64 %add38, %53, !dbg !250
  %54 = call i1 @llvm.expect.i1(i1 %gt39, i1 false), !dbg !250
  br i1 %54, label %panic40, label %checkok47, !dbg !250

checkok47:                                        ; preds = %checkok35
  %size48 = sub i64 %53, %add38, !dbg !249
  %ptradd49 = getelementptr inbounds i8, ptr %50, i64 %add38, !dbg !249
  %55 = insertvalue %"char[]" undef, ptr %ptradd49, 0, !dbg !249
  %56 = insertvalue %"char[]" %55, i64 %size48, 1, !dbg !249
  store %"char[]" %56, ptr %s, align 8, !dbg !249
  br label %if.exit50, !dbg !249

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %s, i32 16, i1 false), !dbg !252
  store i8 1, ptr %no_more, align 1, !dbg !254
  br label %if.exit50, !dbg !254

if.exit50:                                        ; preds = %if.else, %checkok47
  %57 = load i64, ptr %i, align 8, !dbg !255
  %58 = load i64, ptr %capacity, align 8, !dbg !256
  %eq51 = icmp eq i64 %57, %58, !dbg !255
  br i1 %eq51, label %if.then52, label %if.exit120, !dbg !255

if.then52:                                        ; preds = %if.exit50
  %59 = load i64, ptr %capacity, align 8, !dbg !257
  %mul53 = mul i64 %59, 2, !dbg !257
  store i64 %mul53, ptr %capacity, align 8, !dbg !257
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator54, ptr align 8 %5, i32 16, i1 false)
  %60 = load ptr, ptr %holder, align 8, !dbg !259
  store ptr %60, ptr %ptr, align 8
  %61 = load i64, ptr %capacity, align 8, !dbg !260
  %mul55 = mul i64 16, %61, !dbg !261
  store i64 %mul55, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator57, ptr align 8 %allocator54, i32 16, i1 false)
  %62 = load ptr, ptr %ptr, align 8
  store ptr %62, ptr %ptr58, align 8
  %63 = load i64, ptr %new_size, align 8
  store i64 %63, ptr %new_size59, align 8
  %64 = load i64, ptr %new_size59, align 8, !dbg !262
  %not61 = icmp eq i64 %64, 0, !dbg !262
  br i1 %not61, label %if.then62, label %if.exit80, !dbg !262

if.then62:                                        ; preds = %if.then52
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator63, ptr align 8 %allocator57, i32 16, i1 false)
  %65 = load ptr, ptr %ptr58, align 8
  store ptr %65, ptr %ptr64, align 8
  %66 = load ptr, ptr %ptr64, align 8, !dbg !267
  %not65 = icmp eq ptr %66, null, !dbg !267
  br i1 %not65, label %if.then66, label %if.exit67, !dbg !267

if.then66:                                        ; preds = %if.then62
  br label %expr_block.exit79, !dbg !271

if.exit67:                                        ; preds = %if.then62
  %ptradd68 = getelementptr inbounds i8, ptr %allocator63, i64 8, !dbg !272
  %67 = load i64, ptr %ptradd68, align 8, !dbg !272
  %68 = inttoptr i64 %67 to ptr, !dbg !272
  %type71 = load ptr, ptr %.cachedtype70, align 8
  %69 = icmp eq ptr %68, %type71
  br i1 %69, label %cache_hit74, label %cache_miss72

cache_miss72:                                     ; preds = %if.exit67
  %ptradd73 = getelementptr inbounds i8, ptr %68, i64 16
  %70 = load ptr, ptr %ptradd73, align 8
  %71 = call ptr @.dyn_search(ptr %70, ptr @"$sel.release")
  store ptr %71, ptr %.inlinecache69, align 8
  store ptr %68, ptr %.cachedtype70, align 8
  br label %72

cache_hit74:                                      ; preds = %if.exit67
  %cache_hit_fn75 = load ptr, ptr %.inlinecache69, align 8
  br label %72

72:                                               ; preds = %cache_hit74, %cache_miss72
  %fn_phi76 = phi ptr [ %cache_hit_fn75, %cache_hit74 ], [ %71, %cache_miss72 ]
  %73 = icmp eq ptr %fn_phi76, null
  br i1 %73, label %missing_function77, label %match78

missing_function77:                               ; preds = %72
  %74 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !273
  call void %74(ptr @.panic_msg.24, i64 44, ptr @.file, i64 16, ptr @.func.32, i64 5, i32 105), !dbg !273
  unreachable, !dbg !273

match78:                                          ; preds = %72
  %75 = load ptr, ptr %allocator63, align 8, !dbg !273
  %76 = load ptr, ptr %ptr64, align 8, !dbg !273
  call void %fn_phi76(ptr %75, ptr %76, i8 zeroext 0), !dbg !273
  br label %expr_block.exit79, !dbg !273

expr_block.exit79:                                ; preds = %match78, %if.then66
  store ptr null, ptr %blockret60, align 8, !dbg !274
  br label %expr_block.exit114, !dbg !274

if.exit80:                                        ; preds = %if.then52
  %77 = load ptr, ptr %ptr58, align 8, !dbg !275
  %not81 = icmp eq ptr %77, null, !dbg !275
  br i1 %not81, label %if.then82, label %if.exit98, !dbg !275

if.then82:                                        ; preds = %if.exit80
  %ptradd83 = getelementptr inbounds i8, ptr %allocator57, i64 8, !dbg !276
  %78 = load i64, ptr %ptradd83, align 8, !dbg !276
  %79 = inttoptr i64 %78 to ptr, !dbg !276
  %type86 = load ptr, ptr %.cachedtype85, align 8
  %80 = icmp eq ptr %79, %type86
  br i1 %80, label %cache_hit89, label %cache_miss87

cache_miss87:                                     ; preds = %if.then82
  %ptradd88 = getelementptr inbounds i8, ptr %79, i64 16
  %81 = load ptr, ptr %ptradd88, align 8
  %82 = call ptr @.dyn_search(ptr %81, ptr @"$sel.acquire")
  store ptr %82, ptr %.inlinecache84, align 8
  store ptr %79, ptr %.cachedtype85, align 8
  br label %83

cache_hit89:                                      ; preds = %if.then82
  %cache_hit_fn90 = load ptr, ptr %.inlinecache84, align 8
  br label %83

83:                                               ; preds = %cache_hit89, %cache_miss87
  %fn_phi91 = phi ptr [ %cache_hit_fn90, %cache_hit89 ], [ %82, %cache_miss87 ]
  %84 = icmp eq ptr %fn_phi91, null
  br i1 %84, label %missing_function92, label %match93

missing_function92:                               ; preds = %83
  %85 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !278
  call void %85(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.32, i64 5, i32 95), !dbg !278
  unreachable, !dbg !278

match93:                                          ; preds = %83
  %86 = load ptr, ptr %allocator57, align 8
  %87 = load i64, ptr %new_size59, align 8
  %88 = call i64 %fn_phi91(ptr %retparam94, ptr %86, i64 %87, i32 0, i64 0), !dbg !278
  %not_err95 = icmp eq i64 %88, 0, !dbg !278
  %89 = call i1 @llvm.expect.i1(i1 %not_err95, i1 true), !dbg !278
  br i1 %89, label %after_check97, label %assign_optional96, !dbg !278

assign_optional96:                                ; preds = %match93
  store i64 %88, ptr %error_var56, align 8, !dbg !278
  br label %panic_block115, !dbg !278

after_check97:                                    ; preds = %match93
  %90 = load ptr, ptr %retparam94, align 8, !dbg !278
  store ptr %90, ptr %blockret60, align 8, !dbg !278
  br label %expr_block.exit114, !dbg !278

if.exit98:                                        ; preds = %if.exit80
  %ptradd99 = getelementptr inbounds i8, ptr %allocator57, i64 8, !dbg !279
  %91 = load i64, ptr %ptradd99, align 8, !dbg !279
  %92 = inttoptr i64 %91 to ptr, !dbg !279
  %type102 = load ptr, ptr %.cachedtype101, align 8
  %93 = icmp eq ptr %92, %type102
  br i1 %93, label %cache_hit105, label %cache_miss103

cache_miss103:                                    ; preds = %if.exit98
  %ptradd104 = getelementptr inbounds i8, ptr %92, i64 16
  %94 = load ptr, ptr %ptradd104, align 8
  %95 = call ptr @.dyn_search(ptr %94, ptr @"$sel.resize")
  store ptr %95, ptr %.inlinecache100, align 8
  store ptr %92, ptr %.cachedtype101, align 8
  br label %96

cache_hit105:                                     ; preds = %if.exit98
  %cache_hit_fn106 = load ptr, ptr %.inlinecache100, align 8
  br label %96

96:                                               ; preds = %cache_hit105, %cache_miss103
  %fn_phi107 = phi ptr [ %cache_hit_fn106, %cache_hit105 ], [ %95, %cache_miss103 ]
  %97 = icmp eq ptr %fn_phi107, null
  br i1 %97, label %missing_function108, label %match109

missing_function108:                              ; preds = %96
  %98 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !281
  call void %98(ptr @.panic_msg.34, i64 43, ptr @.file, i64 16, ptr @.func.32, i64 5, i32 96), !dbg !281
  unreachable, !dbg !281

match109:                                         ; preds = %96
  %99 = load ptr, ptr %allocator57, align 8
  %100 = load ptr, ptr %ptr58, align 8
  %101 = load i64, ptr %new_size59, align 8
  %102 = call i64 %fn_phi107(ptr %retparam110, ptr %99, ptr %100, i64 %101, i64 0), !dbg !281
  %not_err111 = icmp eq i64 %102, 0, !dbg !281
  %103 = call i1 @llvm.expect.i1(i1 %not_err111, i1 true), !dbg !281
  br i1 %103, label %after_check113, label %assign_optional112, !dbg !281

assign_optional112:                               ; preds = %match109
  store i64 %102, ptr %error_var56, align 8, !dbg !281
  br label %panic_block115, !dbg !281

after_check113:                                   ; preds = %match109
  %104 = load ptr, ptr %retparam110, align 8, !dbg !281
  store ptr %104, ptr %blockret60, align 8, !dbg !281
  br label %expr_block.exit114, !dbg !281

expr_block.exit114:                               ; preds = %after_check113, %after_check97, %expr_block.exit79
  br label %noerr_block119, !dbg !281

panic_block115:                                   ; preds = %assign_optional112, %assign_optional96
  %105 = insertvalue %any undef, ptr %error_var56, 0, !dbg !281
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !281
  store %any %106, ptr %varargslots116, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots116, 0
  %"$$temp117" = insertvalue %"any[]" %107, i64 1, 1
  store %"any[]" %"$$temp117", ptr %indirectarg118, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 36, ptr @.file, i64 16, ptr @.func.32, i64 5, i32 85, ptr byval(%"any[]") align 8 %indirectarg118), !dbg !264
  unreachable, !dbg !264

noerr_block119:                                   ; preds = %expr_block.exit114
  %108 = load ptr, ptr %blockret60, align 8, !dbg !264
  store ptr %108, ptr %holder, align 8, !dbg !264
  br label %if.exit120, !dbg !264

if.exit120:                                       ; preds = %noerr_block119, %if.exit50
  %109 = load ptr, ptr %holder, align 8, !dbg !282
  %110 = load i64, ptr %i, align 8, !dbg !283
  %add121 = add i64 %110, 1, !dbg !283
  store i64 %add121, ptr %i, align 8, !dbg !283
  %ptroffset = getelementptr inbounds [16 x i8], ptr %109, i64 %110, !dbg !283
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !284
  br label %loop.cond, !dbg !284

loop.exit:                                        ; preds = %loop.cond
  %111 = load ptr, ptr %holder, align 8, !dbg !285
  %112 = load i64, ptr %i, align 8, !dbg !286
  %add122 = add i64 0, %112, !dbg !286
  %size123 = sub i64 %add122, 0, !dbg !286
  %113 = insertvalue %"char[][]" undef, ptr %111, 0, !dbg !286
  %114 = insertvalue %"char[][]" %113, i64 %size123, 1, !dbg !286
  %115 = extractvalue %"char[][]" %114, 1, !dbg !287
  %lt124 = icmp ult i64 0, %115, !dbg !287
  br i1 %lt124, label %assert_ok126, label %assert_fail125, !dbg !287

assert_fail125:                                   ; preds = %loop.exit
  %116 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !287
  call void %116(ptr @.panic_msg.35, i64 34, ptr @.file.17, i64 9, ptr @.func.32, i64 5, i32 225), !dbg !287
  unreachable, !dbg !287

assert_ok126:                                     ; preds = %loop.exit
  store %"char[][]" %114, ptr %taddr127, align 8
  %117 = load { ptr, i64 }, ptr %taddr127, align 8
  ret { ptr, i64 } %117

panic:                                            ; preds = %if.then18
  store i64 %43, ptr %taddr19, align 8
  %118 = insertvalue %any undef, ptr %taddr19, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr20, align 8
  %120 = insertvalue %any undef, ptr %taddr20, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %119, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %121, ptr %ptradd22, align 16
  %122 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %122, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.32, i64 5, i32 239, ptr byval(%"any[]") align 8 %indirectarg24), !dbg !245
  unreachable, !dbg !245

panic28:                                          ; preds = %checkok
  store i64 %sub27, ptr %taddr29, align 8
  %123 = insertvalue %any undef, ptr %taddr29, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr30, align 8
  %125 = insertvalue %any undef, ptr %taddr30, 0
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %124, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %126, ptr %ptradd32, align 16
  %127 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %127, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.32, i64 5, i32 239, ptr byval(%"any[]") align 8 %indirectarg34), !dbg !245
  unreachable, !dbg !245

panic40:                                          ; preds = %checkok35
  store i64 %53, ptr %taddr41, align 8
  %128 = insertvalue %any undef, ptr %taddr41, 0
  %129 = insertvalue %any %128, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add38, ptr %taddr42, align 8
  %130 = insertvalue %any undef, ptr %taddr42, 0
  %131 = insertvalue %any %130, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %129, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %131, ptr %ptradd44, align 16
  %132 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %132, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.32, i64 5, i32 240, ptr byval(%"any[]") align 8 %indirectarg46), !dbg !249
  unreachable, !dbg !249
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.new_split(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !288 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %result = alloca %"char[][]", align 8
  %taddr = alloca %"char[][]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !291, metadata !DIExpression()), !dbg !292
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !293, metadata !DIExpression()), !dbg !294
  store i64 %4, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !295, metadata !DIExpression()), !dbg !296
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !297
  %5 = load i64, ptr %ptradd2, align 8, !dbg !297
  %lt = icmp ult i64 0, %5, !dbg !297
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !297

assert_fail:                                      ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !297
  call void %6(ptr @.panic_msg.31, i64 83, ptr @.file.17, i64 9, ptr @.func.36, i64 9, i32 264), !dbg !297
  unreachable, !dbg !297

assert_ok:                                        ; preds = %entry
  %lo = load ptr, ptr %s, align 8, !dbg !299
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !299
  %hi = load i64, ptr %ptradd3, align 8, !dbg !299
  %lo4 = load ptr, ptr %needle, align 8, !dbg !299
  %ptradd5 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !299
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !299
  %7 = load i64, ptr %max, align 8, !dbg !299
  %8 = call { ptr, i64 } @std.core.String.split(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6, i64 %7, ptr byval(%any) align 8 @std.core.mem.allocator.thread_allocator) #5, !dbg !302
  store { ptr, i64 } %8, ptr %result, align 8
  %9 = load %"char[][]", ptr %result, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %result, i64 8, !dbg !303
  %10 = load i64, ptr %ptradd7, align 8, !dbg !303
  %lt8 = icmp ult i64 0, %10, !dbg !303
  br i1 %lt8, label %assert_ok10, label %assert_fail9, !dbg !303

assert_fail9:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !303
  call void %11(ptr @.panic_msg.35, i64 34, ptr @.file.17, i64 9, ptr @.func.36, i64 9, i32 265), !dbg !303
  unreachable, !dbg !303

assert_ok10:                                      ; preds = %assert_ok
  store %"char[][]" %9, ptr %taddr, align 8
  %12 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %12
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.tsplit(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4) #0 comdat !dbg !304 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %indirectarg = alloca %any, align 8
  %result = alloca %"char[][]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !305, metadata !DIExpression()), !dbg !306
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !307, metadata !DIExpression()), !dbg !308
  store i64 %4, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !309, metadata !DIExpression()), !dbg !310
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !311
  %not = icmp eq ptr %5, null, !dbg !311
  br i1 %not, label %if.then, label %if.exit, !dbg !311

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !314
  br label %if.exit, !dbg !314

if.exit:                                          ; preds = %if.then, %entry
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !316
  %7 = insertvalue %any undef, ptr %6, 0, !dbg !316
  %8 = insertvalue %any %7, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !316
  %lo = load ptr, ptr %s, align 8, !dbg !316
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !316
  %hi = load i64, ptr %ptradd2, align 8, !dbg !316
  %lo3 = load ptr, ptr %needle, align 8, !dbg !316
  %ptradd4 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !316
  %hi5 = load i64, ptr %ptradd4, align 8, !dbg !316
  %9 = load i64, ptr %max, align 8, !dbg !316
  store %any %8, ptr %indirectarg, align 8
  %10 = call { ptr, i64 } @std.core.String.split(ptr %lo, i64 %hi, ptr %lo3, i64 %hi5, i64 %9, ptr byval(%any) align 8 %indirectarg) #5, !dbg !317
  store { ptr, i64 } %10, ptr %result, align 8
  %11 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %11
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.core.String.contains(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !318 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %temp_err = alloca i64, align 8
  %retparam = alloca i64, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !319, metadata !DIExpression()), !dbg !320
  store ptr %2, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !321, metadata !DIExpression()), !dbg !322
  br label %testblock

testblock:                                        ; preds = %entry
  %lo = load ptr, ptr %s, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %needle, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %needle, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %4 = call i64 @std.core.String.index_of(ptr %retparam, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !323
  %not_err = icmp eq i64 %4, 0, !dbg !323
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !323
  br i1 %5, label %after_check, label %assign_optional, !dbg !323

assign_optional:                                  ; preds = %testblock
  store i64 %4, ptr %temp_err, align 8, !dbg !323
  br label %end_block, !dbg !323

after_check:                                      ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !323
  br label %end_block, !dbg !323

end_block:                                        ; preds = %after_check, %assign_optional
  %6 = load i64, ptr %temp_err, align 8, !dbg !323
  %neq = icmp ne i64 %6, 0, !dbg !323
  br i1 %neq, label %if.then, label %if.exit, !dbg !323

if.then:                                          ; preds = %end_block
  store i8 0, ptr %blockret, align 1, !dbg !327
  br label %expr_block.exit, !dbg !327

if.exit:                                          ; preds = %end_block
  store i8 1, ptr %blockret, align 1, !dbg !328
  br label %expr_block.exit, !dbg !328

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %7 = load i8, ptr %blockret, align 1, !dbg !328
  ret i8 %7, !dbg !328
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_char(ptr %0, ptr %1, i64 %2, i8 zeroext %3) #0 comdat !dbg !329 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %.anon2 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !335, metadata !DIExpression()), !dbg !336
  store i8 %3, ptr %needle, align 1
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !337, metadata !DIExpression()), !dbg !338
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !339, metadata !DIExpression()), !dbg !341
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !341
  %4 = load i64, ptr %ptradd1, align 8, !dbg !341
  store i64 %4, ptr %.anon, align 8, !dbg !341
  call void @llvm.dbg.declare(metadata ptr %.anon2, metadata !339, metadata !DIExpression()), !dbg !342
  store i64 0, ptr %.anon2, align 8, !dbg !342
  br label %loop.cond, !dbg !342

loop.cond:                                        ; preds = %if.exit, %entry
  %5 = load i64, ptr %.anon2, align 8, !dbg !342
  %6 = load i64, ptr %.anon, align 8, !dbg !341
  %lt = icmp ult i64 %5, %6, !dbg !342
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !342

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !343, metadata !DIExpression()), !dbg !345
  %7 = load i64, ptr %.anon2, align 8, !dbg !345
  store i64 %7, ptr %i, align 8, !dbg !345
  call void @llvm.dbg.declare(metadata ptr %c, metadata !346, metadata !DIExpression()), !dbg !347
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !348
  %8 = load i64, ptr %ptradd3, align 8, !dbg !348
  %9 = load ptr, ptr %s, align 8, !dbg !348
  %10 = load i64, ptr %.anon2, align 8, !dbg !345
  %ge = icmp uge i64 %10, %8, !dbg !345
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !345
  br i1 %11, label %panic, label %checkok, !dbg !345

checkok:                                          ; preds = %loop.body
  %ptradd6 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !345
  %12 = load i8, ptr %ptradd6, align 1, !dbg !345
  store i8 %12, ptr %c, align 1, !dbg !345
  %13 = load i8, ptr %c, align 1, !dbg !349
  %14 = load i8, ptr %needle, align 1, !dbg !351
  %eq = icmp eq i8 %13, %14, !dbg !349
  br i1 %eq, label %if.then, label %if.exit, !dbg !349

if.then:                                          ; preds = %checkok
  %15 = load i64, ptr %i, align 8, !dbg !352
  %16 = load i64, ptr %i, align 8, !dbg !353
  %ptradd7 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !354
  %17 = load i64, ptr %ptradd7, align 8, !dbg !354
  %lt8 = icmp ult i64 %16, %17, !dbg !353
  br i1 %lt8, label %assert_ok, label %assert_fail, !dbg !353

assert_fail:                                      ; preds = %if.then
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !353
  call void %18(ptr @.panic_msg.38, i64 34, ptr @.file.17, i64 9, ptr @.func.37, i64 13, i32 298), !dbg !353
  unreachable, !dbg !353

assert_ok:                                        ; preds = %if.then
  store i64 %15, ptr %0, align 8, !dbg !353
  ret i64 0, !dbg !353

if.exit:                                          ; preds = %checkok
  %19 = load i64, ptr %.anon2, align 8, !dbg !342
  %addnuw = add nuw i64 %19, 1, !dbg !342
  store i64 %addnuw, ptr %.anon2, align 8, !dbg !342
  br label %loop.cond, !dbg !342

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !355

panic:                                            ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr4, align 8
  %22 = insertvalue %any undef, ptr %taddr4, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd5, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.37, i64 13, i32 304, ptr byval(%"any[]") align 8 %indirectarg), !dbg !345
  unreachable, !dbg !345
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of_char_from(ptr %0, ptr %1, i64 %2, i8 zeroext %3, i64 %4) #0 comdat !dbg !356 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca i8, align 1
  %start_index = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !359, metadata !DIExpression()), !dbg !360
  store i8 %3, ptr %needle, align 1
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !361, metadata !DIExpression()), !dbg !362
  store i64 %4, ptr %start_index, align 8
  call void @llvm.dbg.declare(metadata ptr %start_index, metadata !363, metadata !DIExpression()), !dbg !364
  call void @llvm.dbg.declare(metadata ptr %len, metadata !365, metadata !DIExpression()), !dbg !366
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !367
  %5 = load i64, ptr %ptradd1, align 8, !dbg !367
  store i64 %5, ptr %len, align 8, !dbg !367
  %6 = load i64, ptr %len, align 8, !dbg !368
  %7 = load i64, ptr %start_index, align 8, !dbg !369
  %le = icmp ule i64 %6, %7, !dbg !368
  br i1 %le, label %if.then, label %if.exit, !dbg !368

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !370

if.exit:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %i, metadata !371, metadata !DIExpression()), !dbg !373
  %8 = load i64, ptr %start_index, align 8, !dbg !374
  store i64 %8, ptr %i, align 8, !dbg !374
  br label %loop.cond, !dbg !374

loop.cond:                                        ; preds = %if.exit9, %if.exit
  %9 = load i64, ptr %i, align 8, !dbg !375
  %10 = load i64, ptr %len, align 8, !dbg !376
  %lt = icmp ult i64 %9, %10, !dbg !375
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !375

loop.body:                                        ; preds = %loop.cond
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !377
  %11 = load i64, ptr %ptradd2, align 8, !dbg !377
  %12 = load ptr, ptr %s, align 8, !dbg !377
  %13 = load i64, ptr %i, align 8, !dbg !379
  %ge = icmp uge i64 %13, %11, !dbg !379
  %14 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !379
  br i1 %14, label %panic, label %checkok, !dbg !379

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !379
  %15 = load i8, ptr %ptradd5, align 1, !dbg !379
  %16 = load i8, ptr %needle, align 1, !dbg !380
  %eq = icmp eq i8 %15, %16, !dbg !377
  br i1 %eq, label %if.then6, label %if.exit9, !dbg !377

if.then6:                                         ; preds = %checkok
  %17 = load i64, ptr %i, align 8, !dbg !381
  %18 = load i64, ptr %i, align 8, !dbg !382
  %ptradd7 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !383
  %19 = load i64, ptr %ptradd7, align 8, !dbg !383
  %lt8 = icmp ult i64 %18, %19, !dbg !382
  br i1 %lt8, label %assert_ok, label %assert_fail, !dbg !382

assert_fail:                                      ; preds = %if.then6
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !382
  call void %20(ptr @.panic_msg.38, i64 34, ptr @.file.17, i64 9, ptr @.func.39, i64 18, i32 318), !dbg !382
  unreachable, !dbg !382

assert_ok:                                        ; preds = %if.then6
  store i64 %17, ptr %0, align 8, !dbg !382
  ret i64 0, !dbg !382

if.exit9:                                         ; preds = %checkok
  %21 = load i64, ptr %i, align 8, !dbg !384
  %add = add i64 %21, 1, !dbg !384
  store i64 %add, ptr %i, align 8, !dbg !384
  br label %loop.cond, !dbg !384

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !385

panic:                                            ; preds = %loop.body
  store i64 %11, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr3, align 8
  %24 = insertvalue %any undef, ptr %taddr3, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd4, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.39, i64 18, i32 328, ptr byval(%"any[]") align 8 %indirectarg), !dbg !379
  unreachable, !dbg !379
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.rindex_of_char(ptr %0, ptr %1, i64 %2, i8 zeroext %3) #0 comdat !dbg !386 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !387, metadata !DIExpression()), !dbg !388
  store i8 %3, ptr %needle, align 1
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !389, metadata !DIExpression()), !dbg !390
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !391, metadata !DIExpression()), !dbg !393
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !394
  %4 = load i64, ptr %ptradd1, align 8, !dbg !394
  store i64 %4, ptr %.anon, align 8, !dbg !394
  br label %loop.cond, !dbg !394

loop.cond:                                        ; preds = %if.exit, %entry
  %5 = load i64, ptr %.anon, align 8, !dbg !393
  %gt = icmp ugt i64 %5, 0, !dbg !393
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !393

loop.body:                                        ; preds = %loop.cond
  %6 = load i64, ptr %.anon, align 8, !dbg !393
  %subnuw = sub nuw i64 %6, 1, !dbg !393
  store i64 %subnuw, ptr %.anon, align 8, !dbg !393
  call void @llvm.dbg.declare(metadata ptr %i, metadata !395, metadata !DIExpression()), !dbg !397
  %7 = load i64, ptr %.anon, align 8, !dbg !397
  store i64 %7, ptr %i, align 8, !dbg !397
  call void @llvm.dbg.declare(metadata ptr %c, metadata !398, metadata !DIExpression()), !dbg !399
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !400
  %8 = load i64, ptr %ptradd2, align 8, !dbg !400
  %9 = load ptr, ptr %s, align 8, !dbg !400
  %10 = load i64, ptr %.anon, align 8, !dbg !397
  %ge = icmp uge i64 %10, %8, !dbg !397
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !397
  br i1 %11, label %panic, label %checkok, !dbg !397

checkok:                                          ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !397
  %12 = load i8, ptr %ptradd5, align 1, !dbg !397
  store i8 %12, ptr %c, align 1, !dbg !397
  %13 = load i8, ptr %c, align 1, !dbg !401
  %14 = load i8, ptr %needle, align 1, !dbg !403
  %eq = icmp eq i8 %13, %14, !dbg !401
  br i1 %eq, label %if.then, label %if.exit, !dbg !401

if.then:                                          ; preds = %checkok
  %15 = load i64, ptr %i, align 8, !dbg !404
  %16 = load i64, ptr %i, align 8, !dbg !405
  %ptradd6 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !406
  %17 = load i64, ptr %ptradd6, align 8, !dbg !406
  %lt = icmp ult i64 %16, %17, !dbg !405
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !405

assert_fail:                                      ; preds = %if.then
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !405
  call void %18(ptr @.panic_msg.38, i64 34, ptr @.file.17, i64 9, ptr @.func.40, i64 14, i32 339), !dbg !405
  unreachable, !dbg !405

assert_ok:                                        ; preds = %if.then
  store i64 %15, ptr %0, align 8, !dbg !405
  ret i64 0, !dbg !405

if.exit:                                          ; preds = %checkok
  br label %loop.cond, !dbg !405

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !407

panic:                                            ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr3, align 8
  %21 = insertvalue %any undef, ptr %taddr3, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %20, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd4, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.40, i64 14, i32 345, ptr byval(%"any[]") align 8 %indirectarg), !dbg !397
  unreachable, !dbg !397
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.index_of(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !408 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.anon = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %.anon36 = alloca i64, align 8
  %.anon40 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %varargslots61 = alloca [2 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %taddr69 = alloca i64, align 8
  %taddr70 = alloca i64, align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !411, metadata !DIExpression()), !dbg !412
  store ptr %3, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !413, metadata !DIExpression()), !dbg !414
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !415
  %5 = load i64, ptr %ptradd2, align 8, !dbg !415
  %lt = icmp ult i64 0, %5, !dbg !415
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !415

assert_fail:                                      ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !415
  call void %6(ptr @.panic_msg.41, i64 71, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 359), !dbg !415
  unreachable, !dbg !415

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %needed, metadata !417, metadata !DIExpression()), !dbg !418
  %ptradd3 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !419
  %7 = load i64, ptr %ptradd3, align 8, !dbg !419
  store i64 %7, ptr %needed, align 8, !dbg !419
  %8 = load i64, ptr %needed, align 8, !dbg !420
  %lt4 = icmp ult i64 0, %8, !dbg !420
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !420

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !421
  %9 = load i64, ptr %ptradd5, align 8, !dbg !421
  %10 = load i64, ptr %needed, align 8, !dbg !422
  %ge = icmp uge i64 %9, %10, !dbg !421
  br label %and.phi, !dbg !421

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !421
  br i1 %val, label %if.then, label %if.exit90, !dbg !421

if.then:                                          ; preds = %and.phi
  call void @llvm.dbg.declare(metadata ptr %first, metadata !423, metadata !DIExpression()), !dbg !425
  %ptradd6 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !426
  %11 = load i64, ptr %ptradd6, align 8, !dbg !426
  %12 = load ptr, ptr %needle, align 8, !dbg !426
  %ge7 = icmp sge i64 0, %11, !dbg !427
  %13 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !427
  br i1 %13, label %panic, label %checkok, !dbg !427

checkok:                                          ; preds = %if.then
  %14 = load i8, ptr %12, align 1, !dbg !427
  store i8 %14, ptr %first, align 1, !dbg !427
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !428, metadata !DIExpression()), !dbg !430
  %15 = load %"char[]", ptr %s, align 8, !dbg !430
  %16 = extractvalue %"char[]" %15, 0, !dbg !430
  %17 = extractvalue %"char[]" %15, 1, !dbg !431
  %gt = icmp ugt i64 0, %17, !dbg !431
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !431
  br i1 %18, label %panic10, label %checkok17, !dbg !431

checkok17:                                        ; preds = %checkok
  %19 = load i64, ptr %needed, align 8, !dbg !432
  %sub = sub i64 %17, %19, !dbg !432
  %gt18 = icmp ugt i64 0, %sub, !dbg !432
  %20 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !432
  br i1 %20, label %panic19, label %checkok26, !dbg !432

checkok26:                                        ; preds = %checkok17
  %le = icmp ule i64 %17, %sub, !dbg !430
  %21 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !430
  br i1 %21, label %panic27, label %checkok34, !dbg !430

checkok34:                                        ; preds = %checkok26
  %22 = add i64 %sub, 1, !dbg !430
  %size = sub i64 %22, 0, !dbg !430
  %23 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !430
  %24 = insertvalue %"char[]" %23, i64 %size, 1, !dbg !430
  store %"char[]" %24, ptr %taddr35, align 8
  store ptr %taddr35, ptr %.anon, align 8
  call void @llvm.dbg.declare(metadata ptr %.anon36, metadata !433, metadata !DIExpression()), !dbg !430
  %25 = load ptr, ptr %.anon, align 8, !dbg !430
  %checknull = icmp eq ptr %25, null, !dbg !430
  %26 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !430
  br i1 %26, label %panic37, label %checkok38, !dbg !430

checkok38:                                        ; preds = %checkok34
  %ptradd39 = getelementptr inbounds i8, ptr %25, i64 8, !dbg !430
  %27 = load i64, ptr %ptradd39, align 8, !dbg !430
  store i64 %27, ptr %.anon36, align 8, !dbg !430
  call void @llvm.dbg.declare(metadata ptr %.anon40, metadata !433, metadata !DIExpression()), !dbg !434
  store i64 0, ptr %.anon40, align 8, !dbg !434
  br label %loop.cond, !dbg !434

loop.cond:                                        ; preds = %if.exit, %checkok38
  %28 = load i64, ptr %.anon40, align 8, !dbg !434
  %29 = load i64, ptr %.anon36, align 8, !dbg !430
  %lt41 = icmp ult i64 %28, %29, !dbg !434
  br i1 %lt41, label %loop.body, label %loop.exit, !dbg !434

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !435, metadata !DIExpression()), !dbg !437
  %30 = load i64, ptr %.anon40, align 8, !dbg !437
  store i64 %30, ptr %i, align 8, !dbg !437
  call void @llvm.dbg.declare(metadata ptr %c, metadata !438, metadata !DIExpression()), !dbg !439
  %31 = load ptr, ptr %.anon, align 8, !dbg !440
  %checknull42 = icmp eq ptr %31, null, !dbg !440
  %32 = call i1 @llvm.expect.i1(i1 %checknull42, i1 false), !dbg !440
  br i1 %32, label %panic43, label %checkok44, !dbg !440

checkok44:                                        ; preds = %loop.body
  %ptradd45 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !440
  %33 = load i64, ptr %ptradd45, align 8, !dbg !440
  %34 = load ptr, ptr %31, align 8, !dbg !440
  %35 = load i64, ptr %.anon40, align 8, !dbg !437
  %ge46 = icmp uge i64 %35, %33, !dbg !437
  %36 = call i1 @llvm.expect.i1(i1 %ge46, i1 false), !dbg !437
  br i1 %36, label %panic47, label %checkok54, !dbg !437

checkok54:                                        ; preds = %checkok44
  %ptradd55 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !437
  %37 = load i8, ptr %ptradd55, align 1, !dbg !437
  store i8 %37, ptr %c, align 1, !dbg !437
  %38 = load i8, ptr %c, align 1, !dbg !441
  %39 = load i8, ptr %first, align 1, !dbg !443
  %eq = icmp eq i8 %38, %39, !dbg !441
  br i1 %eq, label %and.rhs56, label %and.phi83, !dbg !441

and.rhs56:                                        ; preds = %checkok54
  %40 = load %"char[]", ptr %s, align 8, !dbg !444
  %41 = extractvalue %"char[]" %40, 0, !dbg !444
  %42 = load i64, ptr %i, align 8, !dbg !445
  %43 = extractvalue %"char[]" %40, 1, !dbg !445
  %gt57 = icmp ugt i64 %42, %43, !dbg !445
  %44 = call i1 @llvm.expect.i1(i1 %gt57, i1 false), !dbg !445
  br i1 %44, label %panic58, label %checkok65, !dbg !445

checkok65:                                        ; preds = %and.rhs56
  %45 = load i64, ptr %needed, align 8, !dbg !446
  %add = add i64 %42, %45, !dbg !446
  %lt66 = icmp ult i64 %43, %add, !dbg !446
  %sub67 = sub i64 %add, 1, !dbg !446
  %46 = call i1 @llvm.expect.i1(i1 %lt66, i1 false), !dbg !446
  br i1 %46, label %panic68, label %checkok75, !dbg !446

checkok75:                                        ; preds = %checkok65
  %size76 = sub i64 %add, %42, !dbg !444
  %ptradd77 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !444
  %47 = insertvalue %"char[]" undef, ptr %ptradd77, 0, !dbg !444
  %48 = insertvalue %"char[]" %47, i64 %size76, 1, !dbg !444
  %49 = load %"char[]", ptr %needle, align 8, !dbg !447
  %50 = extractvalue %"char[]" %48, 1, !dbg !444
  %51 = extractvalue %"char[]" %49, 1, !dbg !444
  %52 = extractvalue %"char[]" %48, 0, !dbg !444
  %53 = extractvalue %"char[]" %49, 0, !dbg !444
  %eq78 = icmp eq i64 %50, %51, !dbg !444
  br i1 %eq78, label %slice_cmp_values, label %slice_cmp_exit, !dbg !444

slice_cmp_values:                                 ; preds = %checkok75
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %54 = load i64, ptr %cmp.idx, align 8
  %lt79 = icmp slt i64 %54, %50
  br i1 %lt79, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd80 = getelementptr inbounds i8, ptr %52, i64 %54
  %ptradd81 = getelementptr inbounds i8, ptr %53, i64 %54
  %55 = load i8, ptr %ptradd80, align 1
  %56 = load i8, ptr %ptradd81, align 1
  %eq82 = icmp eq i8 %55, %56
  %57 = add i64 %54, 1
  store i64 %57, ptr %cmp.idx, align 8
  br i1 %eq82, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok75
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok75 ], [ false, %slice_loop_comparison ]
  br label %and.phi83

and.phi83:                                        ; preds = %slice_cmp_exit, %checkok54
  %val84 = phi i1 [ false, %checkok54 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val84, label %if.then85, label %if.exit

if.then85:                                        ; preds = %and.phi83
  %58 = load i64, ptr %i, align 8, !dbg !448
  %59 = load i64, ptr %i, align 8, !dbg !449
  %ptradd86 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !450
  %60 = load i64, ptr %ptradd86, align 8, !dbg !450
  %lt87 = icmp ult i64 %59, %60, !dbg !449
  br i1 %lt87, label %assert_ok89, label %assert_fail88, !dbg !449

assert_fail88:                                    ; preds = %if.then85
  %61 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !449
  call void %61(ptr @.panic_msg.38, i64 34, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 358), !dbg !449
  unreachable, !dbg !449

assert_ok89:                                      ; preds = %if.then85
  store i64 %58, ptr %0, align 8, !dbg !449
  ret i64 0, !dbg !449

if.exit:                                          ; preds = %and.phi83
  %62 = load i64, ptr %.anon40, align 8, !dbg !434
  %addnuw = add nuw i64 %62, 1, !dbg !434
  store i64 %addnuw, ptr %.anon40, align 8, !dbg !434
  br label %loop.cond, !dbg !434

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit90, !dbg !434

if.exit90:                                        ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !451

panic:                                            ; preds = %if.then
  store i64 %11, ptr %taddr, align 8
  %63 = insertvalue %any undef, ptr %taddr, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %65 = insertvalue %any undef, ptr %taddr8, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %64, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %66, ptr %ptradd9, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 368, ptr byval(%"any[]") align 8 %indirectarg), !dbg !427
  unreachable, !dbg !427

panic10:                                          ; preds = %checkok
  store i64 %17, ptr %taddr11, align 8
  %68 = insertvalue %any undef, ptr %taddr11, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %70 = insertvalue %any undef, ptr %taddr12, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %69, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %71, ptr %ptradd14, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 369, ptr byval(%"any[]") align 8 %indirectarg16), !dbg !430
  unreachable, !dbg !430

panic19:                                          ; preds = %checkok17
  store i64 0, ptr %taddr20, align 8
  %73 = insertvalue %any undef, ptr %taddr20, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr21, align 8
  %75 = insertvalue %any undef, ptr %taddr21, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %76, ptr %ptradd23, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 44, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 369, ptr byval(%"any[]") align 8 %indirectarg25), !dbg !430
  unreachable, !dbg !430

panic27:                                          ; preds = %checkok26
  store i64 %sub, ptr %taddr28, align 8
  %78 = insertvalue %any undef, ptr %taddr28, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr29, align 8
  %80 = insertvalue %any undef, ptr %taddr29, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %81, ptr %ptradd31, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 369, ptr byval(%"any[]") align 8 %indirectarg33), !dbg !430
  unreachable, !dbg !430

panic37:                                          ; preds = %checkok34
  %83 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !430
  call void %83(ptr @.panic_msg.43, i64 53, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 369), !dbg !430
  unreachable, !dbg !430

panic43:                                          ; preds = %loop.body
  %84 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !440
  call void %84(ptr @.panic_msg.43, i64 53, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 369), !dbg !440
  unreachable, !dbg !440

panic47:                                          ; preds = %checkok44
  store i64 %33, ptr %taddr48, align 8
  %85 = insertvalue %any undef, ptr %taddr48, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr49, align 8
  %87 = insertvalue %any undef, ptr %taddr49, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %86, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %88, ptr %ptradd51, align 16
  %89 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %89, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 369, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !437
  unreachable, !dbg !437

panic58:                                          ; preds = %and.rhs56
  store i64 %43, ptr %taddr59, align 8
  %90 = insertvalue %any undef, ptr %taddr59, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr60, align 8
  %92 = insertvalue %any undef, ptr %taddr60, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots61, align 16
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %93, ptr %ptradd62, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 371, ptr byval(%"any[]") align 8 %indirectarg64), !dbg !444
  unreachable, !dbg !444

panic68:                                          ; preds = %checkok65
  store i64 %sub67, ptr %taddr69, align 8
  %95 = insertvalue %any undef, ptr %taddr69, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr70, align 8
  %97 = insertvalue %any undef, ptr %taddr70, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %98, ptr %ptradd72, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.42, i64 8, i32 371, ptr byval(%"any[]") align 8 %indirectarg74), !dbg !444
  unreachable, !dbg !444
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.rindex_of(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !452 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.anon = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %varargslots22 = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %.anon36 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %varargslots60 = alloca [2 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
  %taddr68 = alloca i64, align 8
  %taddr69 = alloca i64, align 8
  %varargslots70 = alloca [2 x %any], align 16
  %indirectarg73 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !453, metadata !DIExpression()), !dbg !454
  store ptr %3, ptr %needle, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !455, metadata !DIExpression()), !dbg !456
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !457
  %5 = load i64, ptr %ptradd2, align 8, !dbg !457
  %lt = icmp ult i64 0, %5, !dbg !457
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !457

assert_fail:                                      ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !457
  call void %6(ptr @.panic_msg.41, i64 71, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 384), !dbg !457
  unreachable, !dbg !457

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %needed, metadata !459, metadata !DIExpression()), !dbg !460
  %ptradd3 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !461
  %7 = load i64, ptr %ptradd3, align 8, !dbg !461
  store i64 %7, ptr %needed, align 8, !dbg !461
  %8 = load i64, ptr %needed, align 8, !dbg !462
  %lt4 = icmp ult i64 0, %8, !dbg !462
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !462

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !463
  %9 = load i64, ptr %ptradd5, align 8, !dbg !463
  %10 = load i64, ptr %needed, align 8, !dbg !464
  %ge = icmp uge i64 %9, %10, !dbg !463
  br label %and.phi, !dbg !463

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !463
  br i1 %val, label %if.then, label %if.exit89, !dbg !463

if.then:                                          ; preds = %and.phi
  call void @llvm.dbg.declare(metadata ptr %first, metadata !465, metadata !DIExpression()), !dbg !467
  %ptradd6 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !468
  %11 = load i64, ptr %ptradd6, align 8, !dbg !468
  %12 = load ptr, ptr %needle, align 8, !dbg !468
  %ge7 = icmp sge i64 0, %11, !dbg !469
  %13 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !469
  br i1 %13, label %panic, label %checkok, !dbg !469

checkok:                                          ; preds = %if.then
  %14 = load i8, ptr %12, align 1, !dbg !469
  store i8 %14, ptr %first, align 1, !dbg !469
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !470, metadata !DIExpression()), !dbg !472
  %15 = load %"char[]", ptr %s, align 8, !dbg !472
  %16 = extractvalue %"char[]" %15, 0, !dbg !472
  %17 = extractvalue %"char[]" %15, 1, !dbg !473
  %gt = icmp ugt i64 0, %17, !dbg !473
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !473
  br i1 %18, label %panic10, label %checkok17, !dbg !473

checkok17:                                        ; preds = %checkok
  %19 = load i64, ptr %needed, align 8, !dbg !474
  %sub = sub i64 %17, %19, !dbg !474
  %gt18 = icmp ugt i64 0, %sub, !dbg !474
  %20 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !474
  br i1 %20, label %panic19, label %checkok26, !dbg !474

checkok26:                                        ; preds = %checkok17
  %le = icmp ule i64 %17, %sub, !dbg !472
  %21 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !472
  br i1 %21, label %panic27, label %checkok34, !dbg !472

checkok34:                                        ; preds = %checkok26
  %22 = add i64 %sub, 1, !dbg !472
  %size = sub i64 %22, 0, !dbg !472
  %23 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !472
  %24 = insertvalue %"char[]" %23, i64 %size, 1, !dbg !472
  store %"char[]" %24, ptr %taddr35, align 8
  store ptr %taddr35, ptr %.anon, align 8
  call void @llvm.dbg.declare(metadata ptr %.anon36, metadata !475, metadata !DIExpression()), !dbg !476
  %25 = load ptr, ptr %.anon, align 8, !dbg !472
  %checknull = icmp eq ptr %25, null, !dbg !472
  %26 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !472
  br i1 %26, label %panic37, label %checkok38, !dbg !472

checkok38:                                        ; preds = %checkok34
  %ptradd39 = getelementptr inbounds i8, ptr %25, i64 8, !dbg !472
  %27 = load i64, ptr %ptradd39, align 8, !dbg !472
  store i64 %27, ptr %.anon36, align 8, !dbg !472
  br label %loop.cond, !dbg !472

loop.cond:                                        ; preds = %if.exit, %checkok38
  %28 = load i64, ptr %.anon36, align 8, !dbg !476
  %gt40 = icmp ugt i64 %28, 0, !dbg !476
  br i1 %gt40, label %loop.body, label %loop.exit, !dbg !476

loop.body:                                        ; preds = %loop.cond
  %29 = load i64, ptr %.anon36, align 8, !dbg !476
  %subnuw = sub nuw i64 %29, 1, !dbg !476
  store i64 %subnuw, ptr %.anon36, align 8, !dbg !476
  call void @llvm.dbg.declare(metadata ptr %i, metadata !477, metadata !DIExpression()), !dbg !479
  %30 = load i64, ptr %.anon36, align 8, !dbg !479
  store i64 %30, ptr %i, align 8, !dbg !479
  call void @llvm.dbg.declare(metadata ptr %c, metadata !480, metadata !DIExpression()), !dbg !481
  %31 = load ptr, ptr %.anon, align 8, !dbg !482
  %checknull41 = icmp eq ptr %31, null, !dbg !482
  %32 = call i1 @llvm.expect.i1(i1 %checknull41, i1 false), !dbg !482
  br i1 %32, label %panic42, label %checkok43, !dbg !482

checkok43:                                        ; preds = %loop.body
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !482
  %33 = load i64, ptr %ptradd44, align 8, !dbg !482
  %34 = load ptr, ptr %31, align 8, !dbg !482
  %35 = load i64, ptr %.anon36, align 8, !dbg !479
  %ge45 = icmp uge i64 %35, %33, !dbg !479
  %36 = call i1 @llvm.expect.i1(i1 %ge45, i1 false), !dbg !479
  br i1 %36, label %panic46, label %checkok53, !dbg !479

checkok53:                                        ; preds = %checkok43
  %ptradd54 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !479
  %37 = load i8, ptr %ptradd54, align 1, !dbg !479
  store i8 %37, ptr %c, align 1, !dbg !479
  %38 = load i8, ptr %c, align 1, !dbg !483
  %39 = load i8, ptr %first, align 1, !dbg !485
  %eq = icmp eq i8 %38, %39, !dbg !483
  br i1 %eq, label %and.rhs55, label %and.phi82, !dbg !483

and.rhs55:                                        ; preds = %checkok53
  %40 = load %"char[]", ptr %s, align 8, !dbg !486
  %41 = extractvalue %"char[]" %40, 0, !dbg !486
  %42 = load i64, ptr %i, align 8, !dbg !487
  %43 = extractvalue %"char[]" %40, 1, !dbg !487
  %gt56 = icmp ugt i64 %42, %43, !dbg !487
  %44 = call i1 @llvm.expect.i1(i1 %gt56, i1 false), !dbg !487
  br i1 %44, label %panic57, label %checkok64, !dbg !487

checkok64:                                        ; preds = %and.rhs55
  %45 = load i64, ptr %needed, align 8, !dbg !488
  %add = add i64 %42, %45, !dbg !488
  %lt65 = icmp ult i64 %43, %add, !dbg !488
  %sub66 = sub i64 %add, 1, !dbg !488
  %46 = call i1 @llvm.expect.i1(i1 %lt65, i1 false), !dbg !488
  br i1 %46, label %panic67, label %checkok74, !dbg !488

checkok74:                                        ; preds = %checkok64
  %size75 = sub i64 %add, %42, !dbg !486
  %ptradd76 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !486
  %47 = insertvalue %"char[]" undef, ptr %ptradd76, 0, !dbg !486
  %48 = insertvalue %"char[]" %47, i64 %size75, 1, !dbg !486
  %49 = load %"char[]", ptr %needle, align 8, !dbg !489
  %50 = extractvalue %"char[]" %48, 1, !dbg !486
  %51 = extractvalue %"char[]" %49, 1, !dbg !486
  %52 = extractvalue %"char[]" %48, 0, !dbg !486
  %53 = extractvalue %"char[]" %49, 0, !dbg !486
  %eq77 = icmp eq i64 %50, %51, !dbg !486
  br i1 %eq77, label %slice_cmp_values, label %slice_cmp_exit, !dbg !486

slice_cmp_values:                                 ; preds = %checkok74
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %54 = load i64, ptr %cmp.idx, align 8
  %lt78 = icmp slt i64 %54, %50
  br i1 %lt78, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd79 = getelementptr inbounds i8, ptr %52, i64 %54
  %ptradd80 = getelementptr inbounds i8, ptr %53, i64 %54
  %55 = load i8, ptr %ptradd79, align 1
  %56 = load i8, ptr %ptradd80, align 1
  %eq81 = icmp eq i8 %55, %56
  %57 = add i64 %54, 1
  store i64 %57, ptr %cmp.idx, align 8
  br i1 %eq81, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok74
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok74 ], [ false, %slice_loop_comparison ]
  br label %and.phi82

and.phi82:                                        ; preds = %slice_cmp_exit, %checkok53
  %val83 = phi i1 [ false, %checkok53 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val83, label %if.then84, label %if.exit

if.then84:                                        ; preds = %and.phi82
  %58 = load i64, ptr %i, align 8, !dbg !490
  %59 = load i64, ptr %i, align 8, !dbg !491
  %ptradd85 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !492
  %60 = load i64, ptr %ptradd85, align 8, !dbg !492
  %lt86 = icmp ult i64 %59, %60, !dbg !491
  br i1 %lt86, label %assert_ok88, label %assert_fail87, !dbg !491

assert_fail87:                                    ; preds = %if.then84
  %61 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !491
  call void %61(ptr @.panic_msg.38, i64 34, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 383), !dbg !491
  unreachable, !dbg !491

assert_ok88:                                      ; preds = %if.then84
  store i64 %58, ptr %0, align 8, !dbg !491
  ret i64 0, !dbg !491

if.exit:                                          ; preds = %and.phi82
  br label %loop.cond, !dbg !491

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit89, !dbg !491

if.exit89:                                        ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !493

panic:                                            ; preds = %if.then
  store i64 %11, ptr %taddr, align 8
  %62 = insertvalue %any undef, ptr %taddr, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %64 = insertvalue %any undef, ptr %taddr8, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %65, ptr %ptradd9, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 393, ptr byval(%"any[]") align 8 %indirectarg), !dbg !469
  unreachable, !dbg !469

panic10:                                          ; preds = %checkok
  store i64 %17, ptr %taddr11, align 8
  %67 = insertvalue %any undef, ptr %taddr11, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %69 = insertvalue %any undef, ptr %taddr12, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %68, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %70, ptr %ptradd14, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 394, ptr byval(%"any[]") align 8 %indirectarg16), !dbg !472
  unreachable, !dbg !472

panic19:                                          ; preds = %checkok17
  store i64 0, ptr %taddr20, align 8
  %72 = insertvalue %any undef, ptr %taddr20, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr21, align 8
  %74 = insertvalue %any undef, ptr %taddr21, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots22, align 16
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %75, ptr %ptradd23, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp24", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.26, i64 44, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 394, ptr byval(%"any[]") align 8 %indirectarg25), !dbg !472
  unreachable, !dbg !472

panic27:                                          ; preds = %checkok26
  store i64 %sub, ptr %taddr28, align 8
  %77 = insertvalue %any undef, ptr %taddr28, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr29, align 8
  %79 = insertvalue %any undef, ptr %taddr29, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %80, ptr %ptradd31, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 394, ptr byval(%"any[]") align 8 %indirectarg33), !dbg !472
  unreachable, !dbg !472

panic37:                                          ; preds = %checkok34
  %82 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !472
  call void %82(ptr @.panic_msg.43, i64 53, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 394), !dbg !472
  unreachable, !dbg !472

panic42:                                          ; preds = %loop.body
  %83 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !482
  call void %83(ptr @.panic_msg.43, i64 53, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 394), !dbg !482
  unreachable, !dbg !482

panic46:                                          ; preds = %checkok43
  store i64 %33, ptr %taddr47, align 8
  %84 = insertvalue %any undef, ptr %taddr47, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr48, align 8
  %86 = insertvalue %any undef, ptr %taddr48, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %85, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %87, ptr %ptradd50, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 394, ptr byval(%"any[]") align 8 %indirectarg52), !dbg !479
  unreachable, !dbg !479

panic57:                                          ; preds = %and.rhs55
  store i64 %43, ptr %taddr58, align 8
  %89 = insertvalue %any undef, ptr %taddr58, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %91 = insertvalue %any undef, ptr %taddr59, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots60, align 16
  %ptradd61 = getelementptr inbounds i8, ptr %varargslots60, i64 16
  store %any %92, ptr %ptradd61, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots60, 0
  %"$$temp62" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp62", ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 396, ptr byval(%"any[]") align 8 %indirectarg63), !dbg !486
  unreachable, !dbg !486

panic67:                                          ; preds = %checkok64
  store i64 %sub66, ptr %taddr68, align 8
  %94 = insertvalue %any undef, ptr %taddr68, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr69, align 8
  %96 = insertvalue %any undef, ptr %taddr69, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots70, align 16
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %97, ptr %ptradd71, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp72", ptr %indirectarg73, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.44, i64 9, i32 396, ptr byval(%"any[]") align 8 %indirectarg73), !dbg !486
  unreachable, !dbg !486
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.ZString.str_view(ptr %0) #0 comdat !dbg !494 {
entry:
  %str = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  store ptr %0, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !498, metadata !DIExpression()), !dbg !499
  %1 = load ptr, ptr %str, align 8, !dbg !500
  %2 = load ptr, ptr %str, align 8, !dbg !501
  %3 = call i64 @std.core.string.ZString.len(ptr %2), !dbg !501
  %add = add i64 0, %3, !dbg !501
  %size = sub i64 %add, 0, !dbg !501
  %4 = insertvalue %"char[]" undef, ptr %1, 0, !dbg !501
  %5 = insertvalue %"char[]" %4, i64 %size, 1, !dbg !501
  store %"char[]" %5, ptr %taddr, align 8
  %6 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.ZString.char_len(ptr %0) #0 comdat !dbg !502 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !505, metadata !DIExpression()), !dbg !506
  call void @llvm.dbg.declare(metadata ptr %len, metadata !507, metadata !DIExpression()), !dbg !508
  store i64 0, ptr %len, align 8, !dbg !509
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !510, metadata !DIExpression()), !dbg !511
  %1 = load ptr, ptr %str, align 8, !dbg !512
  store ptr %1, ptr %ptr, align 8, !dbg !512
  br label %loop.cond, !dbg !513

loop.cond:                                        ; preds = %if.exit, %entry
  call void @llvm.dbg.declare(metadata ptr %c, metadata !514, metadata !DIExpression()), !dbg !516
  %2 = load ptr, ptr %ptr, align 8, !dbg !517
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !517
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !517
  %3 = load i8, ptr %2, align 1, !dbg !518
  store i8 %3, ptr %c, align 1, !dbg !518
  %4 = load i8, ptr %c, align 1, !dbg !518
  %intbool = icmp ne i8 %4, 0, !dbg !518
  br i1 %intbool, label %loop.body, label %loop.exit, !dbg !518

loop.body:                                        ; preds = %loop.cond
  %5 = load i8, ptr %c, align 1, !dbg !519
  %zext = zext i8 %5 to i32, !dbg !519
  %and = and i32 %zext, 192, !dbg !519
  %neq = icmp ne i32 %and, 128, !dbg !519
  br i1 %neq, label %if.then, label %if.exit, !dbg !519

if.then:                                          ; preds = %loop.body
  %6 = load i64, ptr %len, align 8, !dbg !521
  %add = add i64 %6, 1, !dbg !521
  store i64 %add, ptr %len, align 8, !dbg !521
  br label %if.exit, !dbg !521

if.exit:                                          ; preds = %if.then, %loop.body
  br label %loop.cond, !dbg !521

loop.exit:                                        ; preds = %loop.cond
  %7 = load i64, ptr %len, align 8, !dbg !522
  ret i64 %7, !dbg !522
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.ZString.len(ptr %0) #0 comdat !dbg !523 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !524, metadata !DIExpression()), !dbg !525
  call void @llvm.dbg.declare(metadata ptr %len, metadata !526, metadata !DIExpression()), !dbg !527
  store i64 0, ptr %len, align 8, !dbg !528
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !529, metadata !DIExpression()), !dbg !530
  %1 = load ptr, ptr %str, align 8, !dbg !531
  store ptr %1, ptr %ptr, align 8, !dbg !531
  br label %loop.cond, !dbg !532

loop.cond:                                        ; preds = %loop.body, %entry
  call void @llvm.dbg.declare(metadata ptr %c, metadata !533, metadata !DIExpression()), !dbg !535
  %2 = load ptr, ptr %ptr, align 8, !dbg !536
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !536
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !536
  %3 = load i8, ptr %2, align 1, !dbg !537
  store i8 %3, ptr %c, align 1, !dbg !537
  %4 = load i8, ptr %c, align 1, !dbg !537
  %intbool = icmp ne i8 %4, 0, !dbg !537
  br i1 %intbool, label %loop.body, label %loop.exit, !dbg !537

loop.body:                                        ; preds = %loop.cond
  %5 = load i64, ptr %len, align 8, !dbg !538
  %add = add i64 %5, 1, !dbg !538
  store i64 %add, ptr %len, align 8, !dbg !538
  br label %loop.cond, !dbg !538

loop.exit:                                        ; preds = %loop.cond
  %6 = load i64, ptr %len, align 8, !dbg !539
  ret i64 %6, !dbg !539
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.String.zstr_copy(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !540 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size5 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len8 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !543, metadata !DIExpression()), !dbg !544
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !545, metadata !DIExpression()), !dbg !546
  call void @llvm.dbg.declare(metadata ptr %len, metadata !547, metadata !DIExpression()), !dbg !548
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !549
  %4 = load i64, ptr %ptradd2, align 8, !dbg !549
  store i64 %4, ptr %len, align 8, !dbg !549
  call void @llvm.dbg.declare(metadata ptr %str, metadata !550, metadata !DIExpression()), !dbg !551
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %len, align 8, !dbg !552
  %add = add i64 %5, 1, !dbg !552
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %6 = load i64, ptr %size, align 8
  store i64 %6, ptr %size5, align 8
  %7 = load i64, ptr %size5, align 8, !dbg !553
  %not = icmp eq i64 %7, 0, !dbg !553
  br i1 %not, label %if.then, label %if.exit, !dbg !553

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !558
  br label %expr_block.exit, !dbg !558

if.exit:                                          ; preds = %entry
  %ptradd6 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !559
  %8 = load i64, ptr %ptradd6, align 8, !dbg !559
  %9 = inttoptr i64 %8 to ptr, !dbg !559
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd7, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !561
  call void %15(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.45, i64 9, i32 68), !dbg !561
  unreachable, !dbg !561

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator4, align 8
  %17 = load i64, ptr %size5, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 0, i64 0), !dbg !561
  %not_err = icmp eq i64 %18, 0, !dbg !561
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !561
  br i1 %19, label %after_check, label %assign_optional, !dbg !561

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !561
  br label %panic_block, !dbg !561

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !561
  store ptr %20, ptr %blockret, align 8, !dbg !561
  br label %expr_block.exit, !dbg !561

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !561

panic_block:                                      ; preds = %assign_optional
  %21 = insertvalue %any undef, ptr %error_var, 0, !dbg !561
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !561
  store %any %22, ptr %varargslots, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 36, ptr @.file, i64 16, ptr @.func.45, i64 9, i32 57, ptr byval(%"any[]") align 8 %indirectarg), !dbg !555
  unreachable, !dbg !555

noerr_block:                                      ; preds = %expr_block.exit
  %24 = load ptr, ptr %blockret, align 8, !dbg !555
  store ptr %24, ptr %str, align 8, !dbg !555
  %25 = load ptr, ptr %str, align 8, !dbg !562
  store ptr %25, ptr %dst, align 8
  %26 = load ptr, ptr %s, align 8, !dbg !563
  store ptr %26, ptr %src, align 8
  %27 = load i64, ptr %len, align 8
  store i64 %27, ptr %len8, align 8
  %28 = load i64, ptr %len8, align 8, !dbg !564
  %eq = icmp eq i64 0, %28, !dbg !564
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !564

or.rhs:                                           ; preds = %noerr_block
  %29 = load ptr, ptr %dst, align 8, !dbg !569
  %30 = load i64, ptr %len8, align 8, !dbg !570
  %ptradd_any = getelementptr i8, ptr %29, i64 %30, !dbg !570
  %31 = load ptr, ptr %src, align 8, !dbg !571
  %le = icmp ule ptr %ptradd_any, %31, !dbg !569
  br label %or.phi, !dbg !569

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !569
  br i1 %val, label %or.phi12, label %or.rhs9, !dbg !569

or.rhs9:                                          ; preds = %or.phi
  %32 = load ptr, ptr %src, align 8, !dbg !572
  %33 = load i64, ptr %len8, align 8, !dbg !573
  %ptradd_any10 = getelementptr i8, ptr %32, i64 %33, !dbg !573
  %34 = load ptr, ptr %dst, align 8, !dbg !574
  %le11 = icmp ule ptr %ptradd_any10, %34, !dbg !572
  br label %or.phi12, !dbg !572

or.phi12:                                         ; preds = %or.rhs9, %or.phi
  %val13 = phi i1 [ true, %or.phi ], [ %le11, %or.rhs9 ], !dbg !572
  br i1 %val13, label %assert_ok, label %assert_fail, !dbg !572

assert_fail:                                      ; preds = %or.phi12
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !564
  call void %35(ptr @.panic_msg.46, i64 95, ptr @.file.47, i64 6, ptr @.func.45, i64 9, i32 309), !dbg !564
  unreachable, !dbg !564

assert_ok:                                        ; preds = %or.phi12
  %36 = load ptr, ptr %dst, align 8, !dbg !575
  %37 = load ptr, ptr %src, align 8, !dbg !576
  %38 = load i64, ptr %len8, align 8, !dbg !577
  call void @llvm.memcpy.p0.p0.i64(ptr %36, ptr %37, i64 %38, i1 false), !dbg !578
  %39 = load ptr, ptr %str, align 8, !dbg !579
  %40 = load i64, ptr %len, align 8, !dbg !580
  %ptradd14 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !580
  store i8 0, ptr %ptradd14, align 1, !dbg !581
  %41 = load ptr, ptr %str, align 8, !dbg !582
  ret ptr %41, !dbg !582
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.concat(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !583 {
entry:
  %s1 = alloca %"char[]", align 8
  %s2 = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %full_len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator5 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %size8 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %s1_len = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %dst18 = alloca ptr, align 8
  %src19 = alloca ptr, align 8
  %len21 = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s1, align 8
  %ptradd = getelementptr inbounds i8, ptr %s1, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !586, metadata !DIExpression()), !dbg !587
  store ptr %2, ptr %s2, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s2, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %s2, metadata !588, metadata !DIExpression()), !dbg !589
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !590, metadata !DIExpression()), !dbg !591
  call void @llvm.dbg.declare(metadata ptr %full_len, metadata !592, metadata !DIExpression()), !dbg !593
  %ptradd3 = getelementptr inbounds i8, ptr %s1, i64 8, !dbg !594
  %6 = load i64, ptr %ptradd3, align 8, !dbg !594
  %ptradd4 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !595
  %7 = load i64, ptr %ptradd4, align 8, !dbg !595
  %add = add i64 %6, %7, !dbg !594
  store i64 %add, ptr %full_len, align 8, !dbg !594
  call void @llvm.dbg.declare(metadata ptr %str, metadata !596, metadata !DIExpression()), !dbg !597
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator, i32 16, i1 false)
  %8 = load i64, ptr %full_len, align 8, !dbg !598
  %add6 = add i64 %8, 1, !dbg !598
  store i64 %add6, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator5, i32 16, i1 false)
  %9 = load i64, ptr %size, align 8
  store i64 %9, ptr %size8, align 8
  %10 = load i64, ptr %size8, align 8, !dbg !599
  %not = icmp eq i64 %10, 0, !dbg !599
  br i1 %not, label %if.then, label %if.exit, !dbg !599

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !604
  br label %expr_block.exit, !dbg !604

if.exit:                                          ; preds = %entry
  %ptradd9 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !605
  %11 = load i64, ptr %ptradd9, align 8, !dbg !605
  %12 = inttoptr i64 %11 to ptr, !dbg !605
  %type = load ptr, ptr %.cachedtype, align 8
  %13 = icmp eq ptr %12, %type
  br i1 %13, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %12, i64 16
  %14 = load ptr, ptr %ptradd10, align 8
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.acquire")
  store ptr %15, ptr %.inlinecache, align 8
  store ptr %12, ptr %.cachedtype, align 8
  br label %16

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %16

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ]
  %17 = icmp eq ptr %fn_phi, null
  br i1 %17, label %missing_function, label %match

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !607
  call void %18(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.48, i64 6, i32 68), !dbg !607
  unreachable, !dbg !607

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator7, align 8
  %20 = load i64, ptr %size8, align 8
  %21 = call i64 %fn_phi(ptr %retparam, ptr %19, i64 %20, i32 0, i64 0), !dbg !607
  %not_err = icmp eq i64 %21, 0, !dbg !607
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !607
  br i1 %22, label %after_check, label %assign_optional, !dbg !607

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %error_var, align 8, !dbg !607
  br label %panic_block, !dbg !607

after_check:                                      ; preds = %match
  %23 = load ptr, ptr %retparam, align 8, !dbg !607
  store ptr %23, ptr %blockret, align 8, !dbg !607
  br label %expr_block.exit, !dbg !607

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !607

panic_block:                                      ; preds = %assign_optional
  %24 = insertvalue %any undef, ptr %error_var, 0, !dbg !607
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !607
  store %any %25, ptr %varargslots, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 36, ptr @.file, i64 16, ptr @.func.48, i64 6, i32 57, ptr byval(%"any[]") align 8 %indirectarg), !dbg !601
  unreachable, !dbg !601

noerr_block:                                      ; preds = %expr_block.exit
  %27 = load ptr, ptr %blockret, align 8, !dbg !601
  store ptr %27, ptr %str, align 8, !dbg !601
  call void @llvm.dbg.declare(metadata ptr %s1_len, metadata !608, metadata !DIExpression()), !dbg !609
  %ptradd11 = getelementptr inbounds i8, ptr %s1, i64 8, !dbg !610
  %28 = load i64, ptr %ptradd11, align 8, !dbg !610
  store i64 %28, ptr %s1_len, align 8, !dbg !610
  %29 = load ptr, ptr %str, align 8, !dbg !611
  store ptr %29, ptr %dst, align 8
  %30 = load ptr, ptr %s1, align 8, !dbg !612
  store ptr %30, ptr %src, align 8
  %31 = load i64, ptr %s1_len, align 8
  store i64 %31, ptr %len, align 8
  %32 = load i64, ptr %len, align 8, !dbg !613
  %eq = icmp eq i64 0, %32, !dbg !613
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !613

or.rhs:                                           ; preds = %noerr_block
  %33 = load ptr, ptr %dst, align 8, !dbg !617
  %34 = load i64, ptr %len, align 8, !dbg !618
  %ptradd_any = getelementptr i8, ptr %33, i64 %34, !dbg !618
  %35 = load ptr, ptr %src, align 8, !dbg !619
  %le = icmp ule ptr %ptradd_any, %35, !dbg !617
  br label %or.phi, !dbg !617

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !617
  br i1 %val, label %or.phi15, label %or.rhs12, !dbg !617

or.rhs12:                                         ; preds = %or.phi
  %36 = load ptr, ptr %src, align 8, !dbg !620
  %37 = load i64, ptr %len, align 8, !dbg !621
  %ptradd_any13 = getelementptr i8, ptr %36, i64 %37, !dbg !621
  %38 = load ptr, ptr %dst, align 8, !dbg !622
  %le14 = icmp ule ptr %ptradd_any13, %38, !dbg !620
  br label %or.phi15, !dbg !620

or.phi15:                                         ; preds = %or.rhs12, %or.phi
  %val16 = phi i1 [ true, %or.phi ], [ %le14, %or.rhs12 ], !dbg !620
  br i1 %val16, label %assert_ok, label %assert_fail, !dbg !620

assert_fail:                                      ; preds = %or.phi15
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !613
  call void %39(ptr @.panic_msg.46, i64 95, ptr @.file.47, i64 6, ptr @.func.48, i64 6, i32 309), !dbg !613
  unreachable, !dbg !613

assert_ok:                                        ; preds = %or.phi15
  %40 = load ptr, ptr %dst, align 8, !dbg !623
  %41 = load ptr, ptr %src, align 8, !dbg !624
  %42 = load i64, ptr %len, align 8, !dbg !625
  call void @llvm.memcpy.p0.p0.i64(ptr %40, ptr %41, i64 %42, i1 false), !dbg !626
  %43 = load ptr, ptr %str, align 8, !dbg !627
  %44 = load i64, ptr %s1_len, align 8, !dbg !628
  %ptradd_any17 = getelementptr i8, ptr %43, i64 %44, !dbg !628
  store ptr %ptradd_any17, ptr %dst18, align 8
  %45 = load ptr, ptr %s2, align 8, !dbg !629
  store ptr %45, ptr %src19, align 8
  %ptradd20 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !630
  %46 = load i64, ptr %ptradd20, align 8
  store i64 %46, ptr %len21, align 8
  %47 = load i64, ptr %len21, align 8, !dbg !631
  %eq22 = icmp eq i64 0, %47, !dbg !631
  br i1 %eq22, label %or.phi26, label %or.rhs23, !dbg !631

or.rhs23:                                         ; preds = %assert_ok
  %48 = load ptr, ptr %dst18, align 8, !dbg !635
  %49 = load i64, ptr %len21, align 8, !dbg !636
  %ptradd_any24 = getelementptr i8, ptr %48, i64 %49, !dbg !636
  %50 = load ptr, ptr %src19, align 8, !dbg !637
  %le25 = icmp ule ptr %ptradd_any24, %50, !dbg !635
  br label %or.phi26, !dbg !635

or.phi26:                                         ; preds = %or.rhs23, %assert_ok
  %val27 = phi i1 [ true, %assert_ok ], [ %le25, %or.rhs23 ], !dbg !635
  br i1 %val27, label %or.phi31, label %or.rhs28, !dbg !635

or.rhs28:                                         ; preds = %or.phi26
  %51 = load ptr, ptr %src19, align 8, !dbg !638
  %52 = load i64, ptr %len21, align 8, !dbg !639
  %ptradd_any29 = getelementptr i8, ptr %51, i64 %52, !dbg !639
  %53 = load ptr, ptr %dst18, align 8, !dbg !640
  %le30 = icmp ule ptr %ptradd_any29, %53, !dbg !638
  br label %or.phi31, !dbg !638

or.phi31:                                         ; preds = %or.rhs28, %or.phi26
  %val32 = phi i1 [ true, %or.phi26 ], [ %le30, %or.rhs28 ], !dbg !638
  br i1 %val32, label %assert_ok34, label %assert_fail33, !dbg !638

assert_fail33:                                    ; preds = %or.phi31
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !631
  call void %54(ptr @.panic_msg.46, i64 95, ptr @.file.47, i64 6, ptr @.func.48, i64 6, i32 309), !dbg !631
  unreachable, !dbg !631

assert_ok34:                                      ; preds = %or.phi31
  %55 = load ptr, ptr %dst18, align 8, !dbg !641
  %56 = load ptr, ptr %src19, align 8, !dbg !642
  %57 = load i64, ptr %len21, align 8, !dbg !643
  call void @llvm.memcpy.p0.p0.i64(ptr %55, ptr %56, i64 %57, i1 false), !dbg !644
  %58 = load ptr, ptr %str, align 8, !dbg !645
  %59 = load i64, ptr %full_len, align 8, !dbg !646
  %ptradd35 = getelementptr inbounds i8, ptr %58, i64 %59, !dbg !646
  store i8 0, ptr %ptradd35, align 1, !dbg !647
  %60 = load ptr, ptr %str, align 8, !dbg !648
  %61 = load i64, ptr %full_len, align 8, !dbg !649
  %add36 = add i64 0, %61, !dbg !649
  %size37 = sub i64 %add36, 0, !dbg !649
  %62 = insertvalue %"char[]" undef, ptr %60, 0, !dbg !649
  %63 = insertvalue %"char[]" %62, i64 %size37, 1, !dbg !649
  store %"char[]" %63, ptr %taddr, align 8
  %64 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %64
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.tconcat(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !650 {
entry:
  %s1 = alloca %"char[]", align 8
  %s2 = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s1, align 8
  %ptradd = getelementptr inbounds i8, ptr %s1, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !651, metadata !DIExpression()), !dbg !652
  store ptr %2, ptr %s2, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s2, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %s2, metadata !653, metadata !DIExpression()), !dbg !654
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !655
  %not = icmp eq ptr %4, null, !dbg !655
  br i1 %not, label %if.then, label %if.exit, !dbg !655

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !658
  br label %if.exit, !dbg !658

if.exit:                                          ; preds = %if.then, %entry
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !660
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !660
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !660
  %lo = load ptr, ptr %s1, align 8, !dbg !660
  %ptradd2 = getelementptr inbounds i8, ptr %s1, i64 8, !dbg !660
  %hi = load i64, ptr %ptradd2, align 8, !dbg !660
  %lo3 = load ptr, ptr %s2, align 8, !dbg !660
  %ptradd4 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !660
  %hi5 = load i64, ptr %ptradd4, align 8, !dbg !660
  store %any %7, ptr %taddr, align 8
  %lo6 = load i64, ptr %taddr, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi8 = load ptr, ptr %ptradd7, align 8
  %8 = call { ptr, i64 } @std.core.String.concat(ptr %lo, i64 %hi, ptr %lo3, i64 %hi5, i64 %lo6, ptr %hi8), !dbg !661
  store { ptr, i64 } %8, ptr %result, align 8
  %9 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %9
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.String.zstr_tcopy(ptr %0, i64 %1) #0 comdat !dbg !662 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !665, metadata !DIExpression()), !dbg !666
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !667
  %not = icmp eq ptr %2, null, !dbg !667
  br i1 %not, label %if.then, label %if.exit, !dbg !667

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !670
  br label %if.exit, !dbg !670

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !672
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !672
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !672
  %lo = load ptr, ptr %s, align 8, !dbg !672
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !672
  %hi = load i64, ptr %ptradd1, align 8, !dbg !672
  store %any %5, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %6 = call ptr @std.core.String.zstr_copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #5, !dbg !673
  ret ptr %6, !dbg !673
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.copy(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !674 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size5 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len8 = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !677, metadata !DIExpression()), !dbg !678
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !679, metadata !DIExpression()), !dbg !680
  call void @llvm.dbg.declare(metadata ptr %len, metadata !681, metadata !DIExpression()), !dbg !682
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !683
  %4 = load i64, ptr %ptradd2, align 8, !dbg !683
  store i64 %4, ptr %len, align 8, !dbg !683
  call void @llvm.dbg.declare(metadata ptr %str, metadata !684, metadata !DIExpression()), !dbg !685
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %len, align 8, !dbg !686
  %add = add i64 %5, 1, !dbg !686
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %6 = load i64, ptr %size, align 8
  store i64 %6, ptr %size5, align 8
  %7 = load i64, ptr %size5, align 8, !dbg !687
  %not = icmp eq i64 %7, 0, !dbg !687
  br i1 %not, label %if.then, label %if.exit, !dbg !687

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !692
  br label %expr_block.exit, !dbg !692

if.exit:                                          ; preds = %entry
  %ptradd6 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !693
  %8 = load i64, ptr %ptradd6, align 8, !dbg !693
  %9 = inttoptr i64 %8 to ptr, !dbg !693
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd7, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !695
  call void %15(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.49, i64 4, i32 68), !dbg !695
  unreachable, !dbg !695

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator4, align 8
  %17 = load i64, ptr %size5, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 0, i64 0), !dbg !695
  %not_err = icmp eq i64 %18, 0, !dbg !695
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !695
  br i1 %19, label %after_check, label %assign_optional, !dbg !695

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !695
  br label %panic_block, !dbg !695

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !695
  store ptr %20, ptr %blockret, align 8, !dbg !695
  br label %expr_block.exit, !dbg !695

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !695

panic_block:                                      ; preds = %assign_optional
  %21 = insertvalue %any undef, ptr %error_var, 0, !dbg !695
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !695
  store %any %22, ptr %varargslots, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 36, ptr @.file, i64 16, ptr @.func.49, i64 4, i32 57, ptr byval(%"any[]") align 8 %indirectarg), !dbg !689
  unreachable, !dbg !689

noerr_block:                                      ; preds = %expr_block.exit
  %24 = load ptr, ptr %blockret, align 8, !dbg !689
  store ptr %24, ptr %str, align 8, !dbg !689
  %25 = load ptr, ptr %str, align 8, !dbg !696
  store ptr %25, ptr %dst, align 8
  %26 = load ptr, ptr %s, align 8, !dbg !697
  store ptr %26, ptr %src, align 8
  %27 = load i64, ptr %len, align 8
  store i64 %27, ptr %len8, align 8
  %28 = load i64, ptr %len8, align 8, !dbg !698
  %eq = icmp eq i64 0, %28, !dbg !698
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !698

or.rhs:                                           ; preds = %noerr_block
  %29 = load ptr, ptr %dst, align 8, !dbg !702
  %30 = load i64, ptr %len8, align 8, !dbg !703
  %ptradd_any = getelementptr i8, ptr %29, i64 %30, !dbg !703
  %31 = load ptr, ptr %src, align 8, !dbg !704
  %le = icmp ule ptr %ptradd_any, %31, !dbg !702
  br label %or.phi, !dbg !702

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !702
  br i1 %val, label %or.phi12, label %or.rhs9, !dbg !702

or.rhs9:                                          ; preds = %or.phi
  %32 = load ptr, ptr %src, align 8, !dbg !705
  %33 = load i64, ptr %len8, align 8, !dbg !706
  %ptradd_any10 = getelementptr i8, ptr %32, i64 %33, !dbg !706
  %34 = load ptr, ptr %dst, align 8, !dbg !707
  %le11 = icmp ule ptr %ptradd_any10, %34, !dbg !705
  br label %or.phi12, !dbg !705

or.phi12:                                         ; preds = %or.rhs9, %or.phi
  %val13 = phi i1 [ true, %or.phi ], [ %le11, %or.rhs9 ], !dbg !705
  br i1 %val13, label %assert_ok, label %assert_fail, !dbg !705

assert_fail:                                      ; preds = %or.phi12
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !698
  call void %35(ptr @.panic_msg.46, i64 95, ptr @.file.47, i64 6, ptr @.func.49, i64 4, i32 309), !dbg !698
  unreachable, !dbg !698

assert_ok:                                        ; preds = %or.phi12
  %36 = load ptr, ptr %dst, align 8, !dbg !708
  %37 = load ptr, ptr %src, align 8, !dbg !709
  %38 = load i64, ptr %len8, align 8, !dbg !710
  call void @llvm.memcpy.p0.p0.i64(ptr %36, ptr %37, i64 %38, i1 false), !dbg !711
  %39 = load ptr, ptr %str, align 8, !dbg !712
  %40 = load i64, ptr %len, align 8, !dbg !713
  %ptradd14 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !713
  store i8 0, ptr %ptradd14, align 1, !dbg !714
  %41 = load ptr, ptr %str, align 8, !dbg !715
  %42 = load i64, ptr %len, align 8, !dbg !716
  %add15 = add i64 0, %42, !dbg !716
  %size16 = sub i64 %add15, 0, !dbg !716
  %43 = insertvalue %"char[]" undef, ptr %41, 0, !dbg !716
  %44 = insertvalue %"char[]" %43, i64 %size16, 1, !dbg !716
  store %"char[]" %44, ptr %taddr, align 8
  %45 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %45
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.free(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !717 {
entry:
  %s = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %allocator4 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !720
  %3 = icmp eq ptr %0, null, !dbg !720
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !720
  br i1 %4, label %panic, label %checkok, !dbg !720

checkok:                                          ; preds = %entry
  store ptr %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !721, metadata !DIExpression()), !dbg !722
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !723, metadata !DIExpression()), !dbg !724
  %5 = load ptr, ptr %s, align 8, !dbg !725
  %checknull = icmp eq ptr %5, null, !dbg !725
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !725
  br i1 %6, label %panic1, label %checkok2, !dbg !725

checkok2:                                         ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !725
  %7 = load i64, ptr %ptradd3, align 8, !dbg !725
  %not = icmp eq i64 %7, 0, !dbg !725
  br i1 %not, label %if.then, label %if.exit, !dbg !725

if.then:                                          ; preds = %checkok2
  ret void, !dbg !726

if.exit:                                          ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator, i32 16, i1 false)
  %8 = load ptr, ptr %s, align 8, !dbg !727
  %checknull5 = icmp eq ptr %8, null, !dbg !727
  %9 = call i1 @llvm.expect.i1(i1 %checknull5, i1 false), !dbg !727
  br i1 %9, label %panic6, label %checkok7, !dbg !727

checkok7:                                         ; preds = %if.exit
  %10 = load ptr, ptr %8, align 8, !dbg !727
  store ptr %10, ptr %ptr, align 8
  %11 = load ptr, ptr %ptr, align 8, !dbg !728
  %not8 = icmp eq ptr %11, null, !dbg !728
  br i1 %not8, label %if.then9, label %if.exit10, !dbg !728

if.then9:                                         ; preds = %checkok7
  br label %expr_block.exit, !dbg !731

if.exit10:                                        ; preds = %checkok7
  %ptradd11 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !732
  %12 = load i64, ptr %ptradd11, align 8, !dbg !732
  %13 = inttoptr i64 %12 to ptr, !dbg !732
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !720
  %14 = icmp eq ptr %13, %type, !dbg !720
  br i1 %14, label %cache_hit, label %cache_miss, !dbg !720

cache_miss:                                       ; preds = %if.exit10
  %ptradd12 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !720
  %15 = load ptr, ptr %ptradd12, align 8, !dbg !720
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.release"), !dbg !720
  store ptr %16, ptr %.inlinecache, align 8, !dbg !720
  store ptr %13, ptr %.cachedtype, align 8, !dbg !720
  br label %17, !dbg !720

cache_hit:                                        ; preds = %if.exit10
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !720
  br label %17, !dbg !720

17:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %16, %cache_miss ], !dbg !720
  %18 = icmp eq ptr %fn_phi, null, !dbg !720
  br i1 %18, label %missing_function, label %match, !dbg !720

missing_function:                                 ; preds = %17
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !733
  call void %19(ptr @.panic_msg.24, i64 44, ptr @.file, i64 16, ptr @.func.51, i64 4, i32 105), !dbg !733
  unreachable, !dbg !733

match:                                            ; preds = %17
  %20 = load ptr, ptr %allocator4, align 8, !dbg !733
  %21 = load ptr, ptr %ptr, align 8, !dbg !733
  call void %fn_phi(ptr %20, ptr %21, i8 zeroext 0), !dbg !733
  br label %expr_block.exit, !dbg !733

expr_block.exit:                                  ; preds = %match, %if.then9
  %22 = load ptr, ptr %s, align 8, !dbg !734
  %checknull13 = icmp eq ptr %22, null, !dbg !734
  %23 = call i1 @llvm.expect.i1(i1 %checknull13, i1 false), !dbg !734
  br i1 %23, label %panic14, label %checkok15, !dbg !734

checkok15:                                        ; preds = %expr_block.exit
  store %"char[]" zeroinitializer, ptr %22, align 8, !dbg !735
  ret void, !dbg !735

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !722
  call void %24(ptr @.panic_msg.50, i64 59, ptr @.file.17, i64 9, ptr @.func.51, i64 4, i32 461), !dbg !722
  unreachable, !dbg !722

panic1:                                           ; preds = %checkok
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !725
  call void %25(ptr @.panic_msg.52, i64 42, ptr @.file.17, i64 9, ptr @.func.51, i64 4, i32 463), !dbg !725
  unreachable, !dbg !725

panic6:                                           ; preds = %if.exit
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !727
  call void %26(ptr @.panic_msg.52, i64 42, ptr @.file.17, i64 9, ptr @.func.51, i64 4, i32 464), !dbg !727
  unreachable, !dbg !727

panic14:                                          ; preds = %expr_block.exit
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !734
  call void %27(ptr @.panic_msg.52, i64 42, ptr @.file.17, i64 9, ptr @.func.51, i64 4, i32 465), !dbg !734
  unreachable, !dbg !734
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.tcopy(ptr %0, i64 %1) #0 comdat !dbg !736 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !739, metadata !DIExpression()), !dbg !740
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !741
  %not = icmp eq ptr %2, null, !dbg !741
  br i1 %not, label %if.then, label %if.exit, !dbg !741

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !744
  br label %if.exit, !dbg !744

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !746
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !746
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !746
  %lo = load ptr, ptr %s, align 8, !dbg !746
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !746
  %hi = load i64, ptr %ptradd1, align 8, !dbg !746
  store %any %5, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %6 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #5, !dbg !747
  store { ptr, i64 } %6, ptr %result, align 8
  %7 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %7
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.ZString.copy(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !748 {
entry:
  %z = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %result = alloca %"char[]", align 8
  %result5 = alloca %"char[]", align 8
  store ptr %0, ptr %z, align 8
  call void @llvm.dbg.declare(metadata ptr %z, metadata !751, metadata !DIExpression()), !dbg !752
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !753, metadata !DIExpression()), !dbg !754
  %3 = load ptr, ptr %z, align 8, !dbg !755
  %4 = call { ptr, i64 } @std.core.string.ZString.str_view(ptr %3), !dbg !755
  store { ptr, i64 } %4, ptr %result, align 8
  %lo = load ptr, ptr %result, align 8, !dbg !756
  %ptradd1 = getelementptr inbounds i8, ptr %result, i64 8, !dbg !756
  %hi = load i64, ptr %ptradd1, align 8, !dbg !756
  %lo2 = load i64, ptr %allocator, align 8, !dbg !756
  %ptradd3 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !756
  %hi4 = load ptr, ptr %ptradd3, align 8, !dbg !756
  %5 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #5, !dbg !755
  store { ptr, i64 } %5, ptr %result5, align 8
  %6 = load { ptr, i64 }, ptr %result5, align 8
  ret { ptr, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.ZString.tcopy(ptr %0) #0 comdat !dbg !757 {
entry:
  %z = alloca ptr, align 8
  %result = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result4 = alloca %"char[]", align 8
  store ptr %0, ptr %z, align 8
  call void @llvm.dbg.declare(metadata ptr %z, metadata !758, metadata !DIExpression()), !dbg !759
  %1 = load ptr, ptr %z, align 8, !dbg !760
  %2 = call { ptr, i64 } @std.core.string.ZString.str_view(ptr %1), !dbg !760
  store { ptr, i64 } %2, ptr %result, align 8
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !761
  %not = icmp eq ptr %3, null, !dbg !761
  br i1 %not, label %if.then, label %if.exit, !dbg !761

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !764
  br label %if.exit, !dbg !764

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !766
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !766
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !766
  %lo = load ptr, ptr %result, align 8, !dbg !766
  %ptradd = getelementptr inbounds i8, ptr %result, i64 8, !dbg !766
  %hi = load i64, ptr %ptradd, align 8, !dbg !766
  store %any %6, ptr %taddr, align 8
  %lo1 = load i64, ptr %taddr, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi3 = load ptr, ptr %ptradd2, align 8
  %7 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo1, ptr %hi3) #5, !dbg !760
  store { ptr, i64 } %7, ptr %result4, align 8
  %8 = load { ptr, i64 }, ptr %result4, align 8
  ret { ptr, i64 } %8
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_new_utf16(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !767 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len16 = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !778, metadata !DIExpression()), !dbg !779
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !780, metadata !DIExpression()), !dbg !781
  call void @llvm.dbg.declare(metadata ptr %len16, metadata !782, metadata !DIExpression()), !dbg !783
  %lo = load ptr, ptr %s, align 8, !dbg !784
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !784
  %hi = load i64, ptr %ptradd2, align 8, !dbg !784
  %5 = call i64 @std.core.string.conv.utf16len_for_utf8(ptr %lo, i64 %hi), !dbg !785
  store i64 %5, ptr %len16, align 8, !dbg !785
  call void @llvm.dbg.declare(metadata ptr %data, metadata !786, metadata !DIExpression()), !dbg !787
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %len16, align 8, !dbg !788
  %add = add i64 %6, 1, !dbg !788
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %7 = load i64, ptr %elements, align 8, !dbg !789
  %mul = mul i64 2, %7, !dbg !792
  store i64 %mul, ptr %size, align 8
  %8 = load i64, ptr %size, align 8, !dbg !793
  %not = icmp eq i64 %8, 0, !dbg !793
  br i1 %not, label %if.then, label %if.exit, !dbg !793

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !796
  br label %expr_block.exit, !dbg !796

if.exit:                                          ; preds = %entry
  %ptradd5 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !797
  %9 = load i64, ptr %ptradd5, align 8, !dbg !797
  %10 = inttoptr i64 %9 to ptr, !dbg !797
  %type = load ptr, ptr %.cachedtype, align 8
  %11 = icmp eq ptr %10, %type
  br i1 %11, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd6, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.acquire")
  store ptr %13, ptr %.inlinecache, align 8
  store ptr %10, ptr %.cachedtype, align 8
  br label %14

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %14

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ]
  %15 = icmp eq ptr %fn_phi, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !799
  call void %16(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.53, i64 12, i32 68), !dbg !799
  unreachable, !dbg !799

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator4, align 8
  %18 = load i64, ptr %size, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %17, i64 %18, i32 0, i64 0), !dbg !799
  %not_err = icmp eq i64 %19, 0, !dbg !799
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !799
  br i1 %20, label %after_check, label %assign_optional, !dbg !799

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %error_var, align 8, !dbg !799
  br label %guard_block, !dbg !799

after_check:                                      ; preds = %match
  %21 = load ptr, ptr %retparam, align 8, !dbg !799
  store ptr %21, ptr %blockret, align 8, !dbg !799
  br label %expr_block.exit, !dbg !799

expr_block.exit:                                  ; preds = %after_check, %if.then
  %22 = load ptr, ptr %blockret, align 8, !dbg !799
  store ptr %22, ptr %taddr, align 8
  %23 = load ptr, ptr %taddr, align 8
  %24 = load i64, ptr %elements, align 8, !dbg !800
  %add7 = add i64 0, %24, !dbg !800
  %size8 = sub i64 %add7, 0, !dbg !800
  %25 = insertvalue %"ushort[]" undef, ptr %23, 0, !dbg !800
  %26 = insertvalue %"ushort[]" %25, i64 %size8, 1, !dbg !800
  br label %noerr_block, !dbg !800

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !800
  ret i64 %27, !dbg !800

noerr_block:                                      ; preds = %expr_block.exit
  %28 = extractvalue %"ushort[]" %26, 0, !dbg !800
  store ptr %28, ptr %data, align 8, !dbg !800
  %lo10 = load ptr, ptr %s, align 8, !dbg !801
  %ptradd11 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !801
  %hi12 = load i64, ptr %ptradd11, align 8, !dbg !801
  %29 = load ptr, ptr %data, align 8, !dbg !801
  %30 = call i64 @std.core.string.conv.utf8to16_unsafe(ptr %lo10, i64 %hi12, ptr %29), !dbg !802
  %not_err13 = icmp eq i64 %30, 0, !dbg !802
  %31 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true), !dbg !802
  br i1 %31, label %after_check15, label %assign_optional14, !dbg !802

assign_optional14:                                ; preds = %noerr_block
  store i64 %30, ptr %error_var9, align 8, !dbg !802
  br label %guard_block16, !dbg !802

after_check15:                                    ; preds = %noerr_block
  br label %noerr_block17, !dbg !802

guard_block16:                                    ; preds = %assign_optional14
  %32 = load i64, ptr %error_var9, align 8, !dbg !802
  ret i64 %32, !dbg !802

noerr_block17:                                    ; preds = %after_check15
  %33 = load ptr, ptr %data, align 8, !dbg !803
  %34 = load i64, ptr %len16, align 8, !dbg !804
  %ptroffset = getelementptr inbounds [2 x i8], ptr %33, i64 %34, !dbg !804
  store i16 0, ptr %ptroffset, align 2, !dbg !805
  %35 = load ptr, ptr %data, align 8, !dbg !806
  %36 = load i64, ptr %len16, align 8, !dbg !807
  %add18 = add i64 0, %36, !dbg !807
  %size19 = sub i64 %add18, 0, !dbg !807
  %37 = insertvalue %"ushort[]" undef, ptr %35, 0, !dbg !807
  %38 = insertvalue %"ushort[]" %37, i64 %size19, 1, !dbg !807
  store %"ushort[]" %38, ptr %0, align 8, !dbg !807
  ret i64 0, !dbg !807
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_utf16(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !808 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !811, metadata !DIExpression()), !dbg !812
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !813
  %not = icmp eq ptr %3, null, !dbg !813
  br i1 %not, label %if.then, label %if.exit, !dbg !813

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !816
  br label %if.exit, !dbg !816

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !818
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !818
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !818
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  store %any %6, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %7 = call i64 @std.core.String.to_new_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi4), !dbg !819
  %not_err = icmp eq i64 %7, 0, !dbg !819
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !819
  br i1 %8, label %after_check, label %assign_optional, !dbg !819

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !819
  br label %err_retblock, !dbg !819

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !819
  ret i64 0, !dbg !819

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !819
  ret i64 %9, !dbg !819
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_wstring(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !820 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !826, metadata !DIExpression()), !dbg !827
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !828, metadata !DIExpression()), !dbg !829
  %lo = load ptr, ptr %s, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load i64, ptr %allocator, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8
  %hi5 = load ptr, ptr %ptradd4, align 8
  %5 = call i64 @std.core.String.to_new_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !830
  %not_err = icmp eq i64 %5, 0, !dbg !830
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !830
  br i1 %6, label %after_check, label %assign_optional, !dbg !830

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8, !dbg !830
  br label %err_retblock, !dbg !830

after_check:                                      ; preds = %entry
  %7 = load ptr, ptr %retparam, align 8, !dbg !830
  store ptr %7, ptr %0, align 8, !dbg !830
  ret i64 0, !dbg !830

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !830
  ret i64 %8, !dbg !830
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_wstring(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !831 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !834, metadata !DIExpression()), !dbg !835
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !836
  %not = icmp eq ptr %3, null, !dbg !836
  br i1 %not, label %if.then, label %if.exit, !dbg !836

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !839
  br label %if.exit, !dbg !839

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !841
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !841
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !841
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  store %any %6, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %7 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi4), !dbg !842
  %not_err = icmp eq i64 %7, 0, !dbg !842
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !842
  br i1 %8, label %after_check, label %assign_optional, !dbg !842

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !842
  br label %err_retblock, !dbg !842

after_check:                                      ; preds = %if.exit
  %9 = load ptr, ptr %retparam, align 8, !dbg !842
  store ptr %9, ptr %0, align 8, !dbg !842
  ret i64 0, !dbg !842

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !842
  ret i64 %10, !dbg !842
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_new_wstring(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !843 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !844, metadata !DIExpression()), !dbg !845
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  %lo2 = load i64, ptr @std.core.mem.allocator.thread_allocator, align 8
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.thread_allocator, i64 8), align 8
  %3 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi3), !dbg !846
  %not_err = icmp eq i64 %3, 0, !dbg !846
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !846
  br i1 %4, label %after_check, label %assign_optional, !dbg !846

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !846
  br label %err_retblock, !dbg !846

after_check:                                      ; preds = %entry
  %5 = load ptr, ptr %retparam, align 8, !dbg !846
  store ptr %5, ptr %0, align 8, !dbg !846
  ret i64 0, !dbg !846

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !846
  ret i64 %6, !dbg !846
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_utf32(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !847 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %codepoints = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !857, metadata !DIExpression()), !dbg !858
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !859, metadata !DIExpression()), !dbg !860
  call void @llvm.dbg.declare(metadata ptr %codepoints, metadata !861, metadata !DIExpression()), !dbg !862
  %lo = load ptr, ptr %s, align 8, !dbg !863
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !863
  %hi = load i64, ptr %ptradd2, align 8, !dbg !863
  %5 = call i64 @std.core.string.conv.utf8_codepoints(ptr %lo, i64 %hi), !dbg !864
  store i64 %5, ptr %codepoints, align 8, !dbg !864
  call void @llvm.dbg.declare(metadata ptr %data, metadata !865, metadata !DIExpression()), !dbg !866
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %codepoints, align 8, !dbg !867
  %add = add i64 %6, 1, !dbg !867
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %7 = load i64, ptr %elements, align 8, !dbg !868
  %mul = mul i64 4, %7, !dbg !871
  store i64 %mul, ptr %size, align 8
  %8 = load i64, ptr %size, align 8, !dbg !872
  %not = icmp eq i64 %8, 0, !dbg !872
  br i1 %not, label %if.then, label %if.exit, !dbg !872

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !875
  br label %expr_block.exit, !dbg !875

if.exit:                                          ; preds = %entry
  %ptradd5 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !876
  %9 = load i64, ptr %ptradd5, align 8, !dbg !876
  %10 = inttoptr i64 %9 to ptr, !dbg !876
  %type = load ptr, ptr %.cachedtype, align 8
  %11 = icmp eq ptr %10, %type
  br i1 %11, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd6, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.acquire")
  store ptr %13, ptr %.inlinecache, align 8
  store ptr %10, ptr %.cachedtype, align 8
  br label %14

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %14

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ]
  %15 = icmp eq ptr %fn_phi, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !878
  call void %16(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.54, i64 8, i32 68), !dbg !878
  unreachable, !dbg !878

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator4, align 8
  %18 = load i64, ptr %size, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %17, i64 %18, i32 0, i64 0), !dbg !878
  %not_err = icmp eq i64 %19, 0, !dbg !878
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !878
  br i1 %20, label %after_check, label %assign_optional, !dbg !878

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %error_var, align 8, !dbg !878
  br label %guard_block, !dbg !878

after_check:                                      ; preds = %match
  %21 = load ptr, ptr %retparam, align 8, !dbg !878
  store ptr %21, ptr %blockret, align 8, !dbg !878
  br label %expr_block.exit, !dbg !878

expr_block.exit:                                  ; preds = %after_check, %if.then
  %22 = load ptr, ptr %blockret, align 8, !dbg !878
  store ptr %22, ptr %taddr, align 8
  %23 = load ptr, ptr %taddr, align 8
  %24 = load i64, ptr %elements, align 8, !dbg !879
  %add7 = add i64 0, %24, !dbg !879
  %size8 = sub i64 %add7, 0, !dbg !879
  %25 = insertvalue %"uint[]" undef, ptr %23, 0, !dbg !879
  %26 = insertvalue %"uint[]" %25, i64 %size8, 1, !dbg !879
  br label %noerr_block, !dbg !879

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !879
  ret i64 %27, !dbg !879

noerr_block:                                      ; preds = %expr_block.exit
  %28 = extractvalue %"uint[]" %26, 0, !dbg !879
  store ptr %28, ptr %data, align 8, !dbg !879
  %lo10 = load ptr, ptr %s, align 8, !dbg !880
  %ptradd11 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !880
  %hi12 = load i64, ptr %ptradd11, align 8, !dbg !880
  %29 = load ptr, ptr %data, align 8, !dbg !880
  %30 = call i64 @std.core.string.conv.utf8to32_unsafe(ptr %lo10, i64 %hi12, ptr %29), !dbg !881
  %not_err13 = icmp eq i64 %30, 0, !dbg !881
  %31 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true), !dbg !881
  br i1 %31, label %after_check15, label %assign_optional14, !dbg !881

assign_optional14:                                ; preds = %noerr_block
  store i64 %30, ptr %error_var9, align 8, !dbg !881
  br label %guard_block16, !dbg !881

after_check15:                                    ; preds = %noerr_block
  br label %noerr_block17, !dbg !881

guard_block16:                                    ; preds = %assign_optional14
  %32 = load i64, ptr %error_var9, align 8, !dbg !881
  ret i64 %32, !dbg !881

noerr_block17:                                    ; preds = %after_check15
  %33 = load ptr, ptr %data, align 8, !dbg !882
  %34 = load i64, ptr %codepoints, align 8, !dbg !883
  %ptroffset = getelementptr inbounds [4 x i8], ptr %33, i64 %34, !dbg !883
  store i32 0, ptr %ptroffset, align 4, !dbg !884
  %35 = load ptr, ptr %data, align 8, !dbg !885
  %36 = load i64, ptr %codepoints, align 8, !dbg !886
  %add18 = add i64 0, %36, !dbg !886
  %size19 = sub i64 %add18, 0, !dbg !886
  %37 = insertvalue %"uint[]" undef, ptr %35, 0, !dbg !886
  %38 = insertvalue %"uint[]" %37, i64 %size19, 1, !dbg !886
  store %"uint[]" %38, ptr %0, align 8, !dbg !886
  ret i64 0, !dbg !886
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_new_utf32(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !887 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !890, metadata !DIExpression()), !dbg !891
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  %lo2 = load i64, ptr @std.core.mem.allocator.thread_allocator, align 8
  %hi3 = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.thread_allocator, i64 8), align 8
  %3 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi3) #5, !dbg !892
  %not_err = icmp eq i64 %3, 0, !dbg !892
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !892
  br i1 %4, label %after_check, label %assign_optional, !dbg !892

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !892
  br label %err_retblock, !dbg !892

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !892
  ret i64 0, !dbg !892

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !892
  ret i64 %5, !dbg !892
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_temp_utf32(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !893 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !894, metadata !DIExpression()), !dbg !895
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !896
  %not = icmp eq ptr %3, null, !dbg !896
  br i1 %not, label %if.then, label %if.exit, !dbg !896

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !899
  br label %if.exit, !dbg !899

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !901
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !901
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !901
  %lo = load ptr, ptr %s, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  store %any %6, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %7 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #5, !dbg !902
  %not_err = icmp eq i64 %7, 0, !dbg !902
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !902
  br i1 %8, label %after_check, label %assign_optional, !dbg !902

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !902
  br label %err_retblock, !dbg !902

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !902
  ret i64 0, !dbg !902

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !902
  ret i64 %9, !dbg !902
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.convert_ascii_to_lower(ptr %0, i64 %1) #0 comdat !dbg !903 {
entry:
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %.anon2 = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !906, metadata !DIExpression()), !dbg !907
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !908, metadata !DIExpression()), !dbg !910
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !910
  %2 = load i64, ptr %ptradd1, align 8, !dbg !910
  store i64 %2, ptr %.anon, align 8, !dbg !910
  call void @llvm.dbg.declare(metadata ptr %.anon2, metadata !908, metadata !DIExpression()), !dbg !910
  store i64 0, ptr %.anon2, align 8, !dbg !910
  br label %loop.cond, !dbg !910

loop.cond:                                        ; preds = %if.exit, %entry
  %3 = load i64, ptr %.anon2, align 8, !dbg !910
  %4 = load i64, ptr %.anon, align 8, !dbg !910
  %lt = icmp ult i64 %3, %4, !dbg !910
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !910

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !911, metadata !DIExpression()), !dbg !913
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !914
  %5 = load i64, ptr %ptradd3, align 8, !dbg !914
  %6 = load ptr, ptr %s, align 8, !dbg !914
  %7 = load i64, ptr %.anon2, align 8, !dbg !914
  %ge = icmp uge i64 %7, %5, !dbg !914
  %8 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !914
  br i1 %8, label %panic, label %checkok, !dbg !914

checkok:                                          ; preds = %loop.body
  %ptradd6 = getelementptr inbounds i8, ptr %6, i64 %7, !dbg !914
  store ptr %ptradd6, ptr %c, align 8, !dbg !914
  %9 = load ptr, ptr %c, align 8, !dbg !915
  %checknull = icmp eq ptr %9, null, !dbg !915
  %10 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !915
  br i1 %10, label %panic7, label %checkok8, !dbg !915

checkok8:                                         ; preds = %checkok
  %11 = load i8, ptr %9, align 1, !dbg !915
  %12 = call i8 @std.ascii.char.is_upper(i8 zeroext %11), !dbg !915
  %13 = trunc i8 %12 to i1, !dbg !915
  br i1 %13, label %if.then, label %if.exit, !dbg !915

if.then:                                          ; preds = %checkok8
  %14 = load ptr, ptr %c, align 8, !dbg !916
  %checknull9 = icmp eq ptr %14, null, !dbg !916
  %15 = call i1 @llvm.expect.i1(i1 %checknull9, i1 false), !dbg !916
  br i1 %15, label %panic10, label %checkok11, !dbg !916

checkok11:                                        ; preds = %if.then
  %16 = load i8, ptr %14, align 1, !dbg !916
  %add = add i8 %16, 32, !dbg !917
  store i8 %add, ptr %14, align 1, !dbg !917
  br label %if.exit, !dbg !917

if.exit:                                          ; preds = %checkok11, %checkok8
  %17 = load i64, ptr %.anon2, align 8, !dbg !910
  %addnuw = add nuw i64 %17, 1, !dbg !910
  store i64 %addnuw, ptr %.anon2, align 8, !dbg !910
  br label %loop.cond, !dbg !910

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !910

panic:                                            ; preds = %loop.body
  store i64 %5, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %20 = insertvalue %any undef, ptr %taddr4, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %19, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd5, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.55, i64 22, i32 534, ptr byval(%"any[]") align 8 %indirectarg), !dbg !914
  unreachable, !dbg !914

panic7:                                           ; preds = %checkok
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !915
  call void %23(ptr @.panic_msg.56, i64 42, ptr @.file.17, i64 9, ptr @.func.55, i64 22, i32 534), !dbg !915
  unreachable, !dbg !915

panic10:                                          ; preds = %if.then
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !916
  call void %24(ptr @.panic_msg.56, i64 42, ptr @.file.17, i64 9, ptr @.func.55, i64 22, i32 534), !dbg !916
  unreachable, !dbg !916
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.new_ascii_to_lower(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !918 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !919, metadata !DIExpression()), !dbg !920
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !921, metadata !DIExpression()), !dbg !922
  call void @llvm.dbg.declare(metadata ptr %copy, metadata !923, metadata !DIExpression()), !dbg !924
  %lo = load ptr, ptr %s, align 8, !dbg !925
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !925
  %hi = load i64, ptr %ptradd2, align 8, !dbg !925
  %lo3 = load i64, ptr %allocator, align 8, !dbg !925
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !925
  %hi5 = load ptr, ptr %ptradd4, align 8, !dbg !925
  %4 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !926
  store { ptr, i64 } %4, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %copy, ptr align 8 %result, i32 16, i1 false)
  %lo6 = load ptr, ptr %copy, align 8, !dbg !927
  %ptradd7 = getelementptr inbounds i8, ptr %copy, i64 8, !dbg !927
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !927
  call void @std.core.String.convert_ascii_to_lower(ptr %lo6, i64 %hi8), !dbg !927
  %5 = load { ptr, i64 }, ptr %copy, align 8, !dbg !928
  ret { ptr, i64 } %5, !dbg !928
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.temp_ascii_to_lower(ptr %0, i64 %1) #0 comdat !dbg !929 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !930, metadata !DIExpression()), !dbg !931
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !932
  %not = icmp eq ptr %2, null, !dbg !932
  br i1 %not, label %if.then, label %if.exit, !dbg !932

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !935
  br label %if.exit, !dbg !935

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !937
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !937
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !937
  %lo = load ptr, ptr %s, align 8, !dbg !937
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !937
  %hi = load i64, ptr %ptradd1, align 8, !dbg !937
  store %any %5, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %6 = call { ptr, i64 } @std.core.String.new_ascii_to_lower(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4), !dbg !938
  store { ptr, i64 } %6, ptr %result, align 8
  %7 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %7
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.convert_ascii_to_upper(ptr %0, i64 %1) #0 comdat !dbg !939 {
entry:
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %.anon2 = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !940, metadata !DIExpression()), !dbg !941
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !942, metadata !DIExpression()), !dbg !944
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !944
  %2 = load i64, ptr %ptradd1, align 8, !dbg !944
  store i64 %2, ptr %.anon, align 8, !dbg !944
  call void @llvm.dbg.declare(metadata ptr %.anon2, metadata !942, metadata !DIExpression()), !dbg !944
  store i64 0, ptr %.anon2, align 8, !dbg !944
  br label %loop.cond, !dbg !944

loop.cond:                                        ; preds = %if.exit, %entry
  %3 = load i64, ptr %.anon2, align 8, !dbg !944
  %4 = load i64, ptr %.anon, align 8, !dbg !944
  %lt = icmp ult i64 %3, %4, !dbg !944
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !944

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !945, metadata !DIExpression()), !dbg !947
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !948
  %5 = load i64, ptr %ptradd3, align 8, !dbg !948
  %6 = load ptr, ptr %s, align 8, !dbg !948
  %7 = load i64, ptr %.anon2, align 8, !dbg !948
  %ge = icmp uge i64 %7, %5, !dbg !948
  %8 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !948
  br i1 %8, label %panic, label %checkok, !dbg !948

checkok:                                          ; preds = %loop.body
  %ptradd6 = getelementptr inbounds i8, ptr %6, i64 %7, !dbg !948
  store ptr %ptradd6, ptr %c, align 8, !dbg !948
  %9 = load ptr, ptr %c, align 8, !dbg !949
  %checknull = icmp eq ptr %9, null, !dbg !949
  %10 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !949
  br i1 %10, label %panic7, label %checkok8, !dbg !949

checkok8:                                         ; preds = %checkok
  %11 = load i8, ptr %9, align 1, !dbg !949
  %12 = call i8 @std.ascii.char.is_lower(i8 zeroext %11), !dbg !949
  %13 = trunc i8 %12 to i1, !dbg !949
  br i1 %13, label %if.then, label %if.exit, !dbg !949

if.then:                                          ; preds = %checkok8
  %14 = load ptr, ptr %c, align 8, !dbg !950
  %checknull9 = icmp eq ptr %14, null, !dbg !950
  %15 = call i1 @llvm.expect.i1(i1 %checknull9, i1 false), !dbg !950
  br i1 %15, label %panic10, label %checkok11, !dbg !950

checkok11:                                        ; preds = %if.then
  %16 = load i8, ptr %14, align 1, !dbg !950
  %sub = sub i8 %16, 32, !dbg !951
  store i8 %sub, ptr %14, align 1, !dbg !951
  br label %if.exit, !dbg !951

if.exit:                                          ; preds = %checkok11, %checkok8
  %17 = load i64, ptr %.anon2, align 8, !dbg !944
  %addnuw = add nuw i64 %17, 1, !dbg !944
  store i64 %addnuw, ptr %.anon2, align 8, !dbg !944
  br label %loop.cond, !dbg !944

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !944

panic:                                            ; preds = %loop.body
  store i64 %5, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %20 = insertvalue %any undef, ptr %taddr4, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %19, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd5, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.57, i64 22, i32 557, ptr byval(%"any[]") align 8 %indirectarg), !dbg !948
  unreachable, !dbg !948

panic7:                                           ; preds = %checkok
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !949
  call void %23(ptr @.panic_msg.56, i64 42, ptr @.file.17, i64 9, ptr @.func.57, i64 22, i32 557), !dbg !949
  unreachable, !dbg !949

panic10:                                          ; preds = %if.then
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !950
  call void %24(ptr @.panic_msg.56, i64 42, ptr @.file.17, i64 9, ptr @.func.57, i64 22, i32 557), !dbg !950
  unreachable, !dbg !950
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.new_ascii_to_upper(ptr %0, i64 %1, i64 %2, ptr %3) #0 comdat !dbg !952 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !953, metadata !DIExpression()), !dbg !954
  store i64 %2, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !955, metadata !DIExpression()), !dbg !956
  call void @llvm.dbg.declare(metadata ptr %copy, metadata !957, metadata !DIExpression()), !dbg !958
  %lo = load ptr, ptr %s, align 8, !dbg !959
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !959
  %hi = load i64, ptr %ptradd2, align 8, !dbg !959
  %lo3 = load i64, ptr %allocator, align 8, !dbg !959
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !959
  %hi5 = load ptr, ptr %ptradd4, align 8, !dbg !959
  %4 = call { ptr, i64 } @std.core.String.copy(ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !960
  store { ptr, i64 } %4, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %copy, ptr align 8 %result, i32 16, i1 false)
  %lo6 = load ptr, ptr %copy, align 8, !dbg !961
  %ptradd7 = getelementptr inbounds i8, ptr %copy, i64 8, !dbg !961
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !961
  call void @std.core.String.convert_ascii_to_upper(ptr %lo6, i64 %hi8), !dbg !961
  %5 = load { ptr, i64 }, ptr %copy, align 8, !dbg !962
  ret { ptr, i64 } %5, !dbg !962
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.iterator(ptr noalias sret(%StringIterator) align 8 %0, ptr %1, i64 %2) #0 comdat !dbg !963 {
entry:
  %s = alloca %"char[]", align 8
  %literal = alloca %StringIterator, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !970, metadata !DIExpression()), !dbg !971
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %s, i32 16, i1 false), !dbg !972
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !972
  store i64 0, ptr %ptradd1, align 8, !dbg !973
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !973
  ret void, !dbg !973
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.String.temp_ascii_to_upper(ptr %0, i64 %1) #0 comdat !dbg !974 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !975, metadata !DIExpression()), !dbg !976
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !977
  %not = icmp eq ptr %2, null, !dbg !977
  br i1 %not, label %if.then, label %if.exit, !dbg !977

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !980
  br label %if.exit, !dbg !980

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !982
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !982
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !982
  %lo = load ptr, ptr %s, align 8, !dbg !982
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !982
  %hi = load i64, ptr %ptradd1, align 8, !dbg !982
  store %any %5, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %6 = call { ptr, i64 } @std.core.String.new_ascii_to_upper(ptr %lo, i64 %hi, i64 %lo2, ptr %hi4), !dbg !983
  store { ptr, i64 } %6, ptr %result, align 8
  %7 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %7
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.utf8_codepoints(ptr %0, i64 %1) #0 comdat !dbg !984 {
entry:
  %s = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %.anon2 = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !987, metadata !DIExpression()), !dbg !988
  call void @llvm.dbg.declare(metadata ptr %len, metadata !989, metadata !DIExpression()), !dbg !990
  store i64 0, ptr %len, align 8, !dbg !991
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !992, metadata !DIExpression()), !dbg !994
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !994
  %2 = load i64, ptr %ptradd1, align 8, !dbg !994
  store i64 %2, ptr %.anon, align 8, !dbg !994
  call void @llvm.dbg.declare(metadata ptr %.anon2, metadata !992, metadata !DIExpression()), !dbg !994
  store i64 0, ptr %.anon2, align 8, !dbg !994
  br label %loop.cond, !dbg !994

loop.cond:                                        ; preds = %if.exit, %entry
  %3 = load i64, ptr %.anon2, align 8, !dbg !994
  %4 = load i64, ptr %.anon, align 8, !dbg !994
  %lt = icmp ult i64 %3, %4, !dbg !994
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !994

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !995, metadata !DIExpression()), !dbg !997
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !998
  %5 = load i64, ptr %ptradd3, align 8, !dbg !998
  %6 = load ptr, ptr %s, align 8, !dbg !998
  %7 = load i64, ptr %.anon2, align 8, !dbg !998
  %ge = icmp uge i64 %7, %5, !dbg !998
  %8 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !998
  br i1 %8, label %panic, label %checkok, !dbg !998

checkok:                                          ; preds = %loop.body
  %ptradd6 = getelementptr inbounds i8, ptr %6, i64 %7, !dbg !998
  %9 = load i8, ptr %ptradd6, align 1, !dbg !998
  store i8 %9, ptr %c, align 1, !dbg !998
  %10 = load i8, ptr %c, align 1, !dbg !999
  %zext = zext i8 %10 to i32, !dbg !999
  %and = and i32 %zext, 192, !dbg !999
  %neq = icmp ne i32 %and, 128, !dbg !999
  br i1 %neq, label %if.then, label %if.exit, !dbg !999

if.then:                                          ; preds = %checkok
  %11 = load i64, ptr %len, align 8, !dbg !1001
  %add = add i64 %11, 1, !dbg !1001
  store i64 %add, ptr %len, align 8, !dbg !1001
  br label %if.exit, !dbg !1001

if.exit:                                          ; preds = %if.then, %checkok
  %12 = load i64, ptr %.anon2, align 8, !dbg !994
  %addnuw = add nuw i64 %12, 1, !dbg !994
  store i64 %addnuw, ptr %.anon2, align 8, !dbg !994
  br label %loop.cond, !dbg !994

loop.exit:                                        ; preds = %loop.cond
  %13 = load i64, ptr %len, align 8, !dbg !1002
  ret i64 %13, !dbg !1002

panic:                                            ; preds = %loop.body
  store i64 %5, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr4, align 8
  %16 = insertvalue %any undef, ptr %taddr4, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %15, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd5, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.58, i64 15, i32 623, ptr byval(%"any[]") align 8 %indirectarg), !dbg !998
  unreachable, !dbg !998
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_int128(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1003 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i128, align 8
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var115 = alloca i64, align 8
  %blockret116 = alloca i128, align 8
  %new_value = alloca i128, align 8
  %new_value124 = alloca i128, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1008, metadata !DIExpression()), !dbg !1009
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1010, metadata !DIExpression()), !dbg !1011
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1012
  %le = icmp sle i32 %5, 10, !dbg !1012
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1012

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1016
  %gt = icmp sgt i32 %6, 1, !dbg !1016
  br label %and.phi, !dbg !1016

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1016
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1016

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1017
  %eq = icmp eq i32 %7, 16, !dbg !1017
  br label %or.phi, !dbg !1017

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1017
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1017

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1012
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.60, i64 9, i32 632), !dbg !1012
  unreachable, !dbg !1012

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1018, metadata !DIExpression()), !dbg !1019
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1020
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1020
  store i64 %9, ptr %len, align 8, !dbg !1020
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1021, metadata !DIExpression()), !dbg !1022
  store i64 0, ptr %index, align 8, !dbg !1023
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1024, metadata !DIExpression()), !dbg !1025
  %10 = load ptr, ptr %string, align 8, !dbg !1026
  store ptr %10, ptr %ptr, align 8, !dbg !1026
  br label %loop.cond, !dbg !1027

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1028
  %12 = load i64, ptr %len, align 8, !dbg !1030
  %lt = icmp ult i64 %11, %12, !dbg !1028
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1028

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1031
  %14 = load i64, ptr %index, align 8, !dbg !1032
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1032
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1033
  %eq6 = icmp eq i8 %16, 32, !dbg !1033
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1033

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1037
  %eq8 = icmp eq i8 %17, 9, !dbg !1037
  br label %or.phi9, !dbg !1037

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1037
  br label %and.phi11, !dbg !1037

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1037
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1037

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1038
  %add = add i64 %18, 1, !dbg !1038
  store i64 %add, ptr %index, align 8, !dbg !1038
  br label %loop.cond, !dbg !1038

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1039
  %20 = load i64, ptr %index, align 8, !dbg !1040
  %eq13 = icmp eq i64 %19, %20, !dbg !1039
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1039

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1041
  br label %err_retblock, !dbg !1041

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1042, metadata !DIExpression()), !dbg !1043
  store i8 0, ptr %is_negative, align 1, !dbg !1043
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1044
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1044
  %22 = load ptr, ptr %string, align 8, !dbg !1044
  %23 = load i64, ptr %index, align 8, !dbg !1046
  %ge = icmp uge i64 %23, %21, !dbg !1046
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1046
  br i1 %24, label %panic, label %checkok, !dbg !1046

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1046
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1047

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1049
  %27 = load i64, ptr %index, align 8, !dbg !1050
  %add19 = add i64 %27, 1, !dbg !1050
  store i64 %add19, ptr %index, align 8, !dbg !1050
  br label %switch.exit, !dbg !1050

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1051
  %add21 = add i64 %28, 1, !dbg !1051
  store i64 %add21, ptr %index, align 8, !dbg !1051
  br label %switch.exit, !dbg !1051

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1053

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1055
  %30 = load i64, ptr %index, align 8, !dbg !1056
  %eq22 = icmp eq i64 %29, %30, !dbg !1055
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1055

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1057
  br label %err_retblock, !dbg !1057

if.exit24:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1058, metadata !DIExpression()), !dbg !1059
  %31 = load i32, ptr %base1, align 4, !dbg !1060
  %sext = sext i32 %31 to i128, !dbg !1060
  store i128 %sext, ptr %base_used, align 8, !dbg !1060
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1061
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1061
  %33 = load ptr, ptr %string, align 8, !dbg !1061
  %34 = load i64, ptr %index, align 8, !dbg !1062
  %ge26 = icmp uge i64 %34, %32, !dbg !1062
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1062
  br i1 %35, label %panic27, label %checkok34, !dbg !1062

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1062
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1062
  %eq36 = icmp eq i8 %36, 48, !dbg !1061
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1061

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1063
  %eq38 = icmp eq i32 %37, 10, !dbg !1063
  br label %and.phi39, !dbg !1063

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1063
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1063

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1064
  %add42 = add i64 %38, 1, !dbg !1064
  store i64 %add42, ptr %index, align 8, !dbg !1064
  %39 = load i64, ptr %index, align 8, !dbg !1066
  %40 = load i64, ptr %len, align 8, !dbg !1067
  %eq43 = icmp eq i64 %39, %40, !dbg !1066
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1066

if.then44:                                        ; preds = %if.then41
  store i128 0, ptr %blockret, align 8, !dbg !1068
  br label %expr_block.exit135, !dbg !1068

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1069
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1069
  %42 = load ptr, ptr %string, align 8, !dbg !1069
  %43 = load i64, ptr %index, align 8, !dbg !1071
  %ge47 = icmp uge i64 %43, %41, !dbg !1071
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1071
  br i1 %44, label %panic48, label %checkok55, !dbg !1071

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1071
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i128 16, ptr %base_used, align 8, !dbg !1072
  %47 = load i64, ptr %index, align 8, !dbg !1074
  %add60 = add i64 %47, 1, !dbg !1074
  store i64 %add60, ptr %index, align 8, !dbg !1074
  br label %switch.exit66, !dbg !1074

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i128 2, ptr %base_used, align 8, !dbg !1075
  %48 = load i64, ptr %index, align 8, !dbg !1077
  %add62 = add i64 %48, 1, !dbg !1077
  store i64 %add62, ptr %index, align 8, !dbg !1077
  br label %switch.exit66, !dbg !1077

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i128 8, ptr %base_used, align 8, !dbg !1078
  %49 = load i64, ptr %index, align 8, !dbg !1080
  %add64 = add i64 %49, 1, !dbg !1080
  store i64 %add64, ptr %index, align 8, !dbg !1080
  br label %switch.exit66, !dbg !1080

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1081

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1083
  %51 = load i64, ptr %index, align 8, !dbg !1084
  %eq67 = icmp eq i64 %50, %51, !dbg !1083
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1083

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1085
  br label %err_retblock, !dbg !1085

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1085

if.exit70:                                        ; preds = %if.exit69, %and.phi39
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1086, metadata !DIExpression()), !dbg !1087
  store i128 0, ptr %value, align 8, !dbg !1088
  br label %loop.cond71, !dbg !1089

loop.cond71:                                      ; preds = %noerr_block133, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1090
  %53 = load i64, ptr %len, align 8, !dbg !1092
  %neq = icmp ne i64 %52, %53, !dbg !1090
  br i1 %neq, label %loop.body72, label %loop.exit134, !dbg !1090

loop.body72:                                      ; preds = %loop.cond71
  call void @llvm.dbg.declare(metadata ptr %c73, metadata !1093, metadata !DIExpression()), !dbg !1095
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1096, metadata !DIExpression()), !dbg !1098
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1099
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1099
  %55 = load ptr, ptr %string, align 8, !dbg !1099
  %56 = load i64, ptr %index, align 8, !dbg !1100
  %add76 = add i64 %56, 1, !dbg !1100
  store i64 %add76, ptr %index, align 8, !dbg !1100
  %ge77 = icmp uge i64 %56, %54, !dbg !1100
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1100
  br i1 %57, label %panic78, label %checkok85, !dbg !1100

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1100
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1100
  store i8 %58, ptr %ch, align 1, !dbg !1100
  %59 = load i128, ptr %base_used, align 8, !dbg !1101
  %neq87 = icmp ne i128 %59, 16, !dbg !1101
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1101

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1102
  %lt89 = icmp ult i8 %60, 65, !dbg !1102
  br label %or.phi90, !dbg !1102

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1102
  br i1 %val91, label %if.then92, label %if.exit93, !dbg !1102

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1103
  %zext = zext i8 %61 to i32, !dbg !1103
  %sub = sub i32 %zext, 48, !dbg !1104
  %trunc = trunc i32 %sub to i8, !dbg !1104
  store i8 %trunc, ptr %blockret74, align 1, !dbg !1104
  br label %expr_block.exit, !dbg !1104

if.exit93:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1105
  %le94 = icmp ule i8 %62, 70, !dbg !1105
  br i1 %le94, label %if.then95, label %if.exit100, !dbg !1105

if.then95:                                        ; preds = %if.exit93
  %63 = load i8, ptr %ch, align 1, !dbg !1106
  %zext96 = zext i8 %63 to i32, !dbg !1106
  %sub97 = sub i32 %zext96, 65, !dbg !1106
  %add98 = add i32 %sub97, 10, !dbg !1107
  %trunc99 = trunc i32 %add98 to i8, !dbg !1107
  store i8 %trunc99, ptr %blockret74, align 1, !dbg !1107
  br label %expr_block.exit, !dbg !1107

if.exit100:                                       ; preds = %if.exit93
  %64 = load i8, ptr %ch, align 1, !dbg !1108
  %lt101 = icmp ult i8 %64, 97, !dbg !1108
  br i1 %lt101, label %if.then102, label %if.exit103, !dbg !1108

if.then102:                                       ; preds = %if.exit100
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1109
  br label %guard_block, !dbg !1109

if.exit103:                                       ; preds = %if.exit100
  %65 = load i8, ptr %ch, align 1, !dbg !1110
  %gt104 = icmp ugt i8 %65, 102, !dbg !1110
  br i1 %gt104, label %if.then105, label %if.exit106, !dbg !1110

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1111
  br label %guard_block, !dbg !1111

if.exit106:                                       ; preds = %if.exit103
  %66 = load i8, ptr %ch, align 1, !dbg !1112
  %zext107 = zext i8 %66 to i32, !dbg !1112
  %sub108 = sub i32 %zext107, 97, !dbg !1112
  %add109 = add i32 %sub108, 10, !dbg !1113
  %trunc110 = trunc i32 %add109 to i8, !dbg !1113
  store i8 %trunc110, ptr %blockret74, align 1, !dbg !1113
  br label %expr_block.exit, !dbg !1113

expr_block.exit:                                  ; preds = %if.exit106, %if.then95, %if.then92
  br label %noerr_block, !dbg !1113

guard_block:                                      ; preds = %if.then105, %if.then102
  %67 = load i64, ptr %error_var, align 8, !dbg !1113
  store i64 %67, ptr %reterr, align 8, !dbg !1113
  br label %err_retblock, !dbg !1113

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1113
  store i8 %68, ptr %c73, align 1, !dbg !1113
  %69 = load i8, ptr %c73, align 1, !dbg !1114
  %zext111 = zext i8 %69 to i128, !dbg !1114
  %70 = load i128, ptr %base_used, align 8, !dbg !1115
  %le112 = icmp sle i128 %70, %zext111, !dbg !1114
  %check = icmp slt i128 %zext111, 0, !dbg !1114
  %siui-le = or i1 %check, %le112, !dbg !1114
  br i1 %siui-le, label %if.then113, label %if.exit114, !dbg !1114

if.then113:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1116
  br label %err_retblock, !dbg !1116

if.exit114:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1117
  %72 = trunc i8 %71 to i1, !dbg !1117
  br i1 %72, label %if.then117, label %if.exit123, !dbg !1117

if.then117:                                       ; preds = %if.exit114
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1119, metadata !DIExpression()), !dbg !1121
  %73 = load i128, ptr %value, align 8, !dbg !1122
  %74 = load i128, ptr %base_used, align 8, !dbg !1123
  %mul = mul i128 %73, %74, !dbg !1122
  %75 = load i8, ptr %c73, align 1, !dbg !1124
  %zext118 = zext i8 %75 to i128, !dbg !1124
  %sub119 = sub i128 %mul, %zext118, !dbg !1122
  store i128 %sub119, ptr %new_value, align 8, !dbg !1122
  %76 = load i128, ptr %new_value, align 8, !dbg !1125
  %77 = load i128, ptr %value, align 8, !dbg !1126
  %gt120 = icmp sgt i128 %76, %77, !dbg !1125
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1125

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1127
  br label %guard_block132, !dbg !1127

if.exit122:                                       ; preds = %if.then117
  %78 = load i128, ptr %new_value, align 8, !dbg !1128
  store i128 %78, ptr %blockret116, align 8, !dbg !1128
  br label %expr_block.exit131, !dbg !1128

if.exit123:                                       ; preds = %if.exit114
  call void @llvm.dbg.declare(metadata ptr %new_value124, metadata !1129, metadata !DIExpression()), !dbg !1130
  %79 = load i128, ptr %value, align 8, !dbg !1131
  %80 = load i128, ptr %base_used, align 8, !dbg !1132
  %mul125 = mul i128 %79, %80, !dbg !1131
  %81 = load i8, ptr %c73, align 1, !dbg !1133
  %zext126 = zext i8 %81 to i128, !dbg !1133
  %add127 = add i128 %mul125, %zext126, !dbg !1131
  store i128 %add127, ptr %new_value124, align 8, !dbg !1131
  %82 = load i128, ptr %new_value124, align 8, !dbg !1134
  %83 = load i128, ptr %value, align 8, !dbg !1135
  %lt128 = icmp slt i128 %82, %83, !dbg !1134
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !1134

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1136
  br label %guard_block132, !dbg !1136

if.exit130:                                       ; preds = %if.exit123
  %84 = load i128, ptr %new_value124, align 8, !dbg !1137
  store i128 %84, ptr %blockret116, align 8, !dbg !1137
  br label %expr_block.exit131, !dbg !1137

expr_block.exit131:                               ; preds = %if.exit130, %if.exit122
  br label %noerr_block133, !dbg !1137

guard_block132:                                   ; preds = %if.then129, %if.then121
  %85 = load i64, ptr %error_var115, align 8, !dbg !1137
  store i64 %85, ptr %reterr, align 8, !dbg !1137
  br label %err_retblock, !dbg !1137

noerr_block133:                                   ; preds = %expr_block.exit131
  %86 = load i128, ptr %blockret116, align 8, !dbg !1137
  store i128 %86, ptr %value, align 8, !dbg !1137
  br label %loop.cond71, !dbg !1137

loop.exit134:                                     ; preds = %loop.cond71
  %87 = load i128, ptr %value, align 8, !dbg !1138
  store i128 %87, ptr %blockret, align 8, !dbg !1138
  br label %expr_block.exit135, !dbg !1138

expr_block.exit135:                               ; preds = %loop.exit134, %if.then44
  %88 = load i128, ptr %blockret, align 8, !dbg !1138
  store i128 %88, ptr %0, align 8, !dbg !1138
  ret i64 0, !dbg !1138

err_retblock:                                     ; preds = %guard_block132, %if.then113, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1138
  ret i64 %89, !dbg !1138

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.60, i64 9, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1046
  unreachable, !dbg !1046

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.60, i64 9, i32 655, ptr byval(%"any[]") align 8 %indirectarg33), !dbg !1062
  unreachable, !dbg !1062

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.60, i64 9, i32 659, ptr byval(%"any[]") align 8 %indirectarg54), !dbg !1071
  unreachable, !dbg !1071

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.60, i64 9, i32 682, ptr byval(%"any[]") align 8 %indirectarg84), !dbg !1100
  unreachable, !dbg !1100
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_long(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1139 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i64, align 8
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var115 = alloca i64, align 8
  %blockret116 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value124 = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1143, metadata !DIExpression()), !dbg !1144
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1145, metadata !DIExpression()), !dbg !1146
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1147
  %le = icmp sle i32 %5, 10, !dbg !1147
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1147

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1151
  %gt = icmp sgt i32 %6, 1, !dbg !1151
  br label %and.phi, !dbg !1151

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1151
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1151

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1152
  %eq = icmp eq i32 %7, 16, !dbg !1152
  br label %or.phi, !dbg !1152

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1152
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1152

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1147
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.61, i64 7, i32 632), !dbg !1147
  unreachable, !dbg !1147

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1153, metadata !DIExpression()), !dbg !1154
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1155
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1155
  store i64 %9, ptr %len, align 8, !dbg !1155
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1156, metadata !DIExpression()), !dbg !1157
  store i64 0, ptr %index, align 8, !dbg !1158
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1159, metadata !DIExpression()), !dbg !1160
  %10 = load ptr, ptr %string, align 8, !dbg !1161
  store ptr %10, ptr %ptr, align 8, !dbg !1161
  br label %loop.cond, !dbg !1162

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1163
  %12 = load i64, ptr %len, align 8, !dbg !1165
  %lt = icmp ult i64 %11, %12, !dbg !1163
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1163

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1166
  %14 = load i64, ptr %index, align 8, !dbg !1167
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1167
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1168
  %eq6 = icmp eq i8 %16, 32, !dbg !1168
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1168

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1171
  %eq8 = icmp eq i8 %17, 9, !dbg !1171
  br label %or.phi9, !dbg !1171

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1171
  br label %and.phi11, !dbg !1171

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1171
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1171

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1172
  %add = add i64 %18, 1, !dbg !1172
  store i64 %add, ptr %index, align 8, !dbg !1172
  br label %loop.cond, !dbg !1172

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1173
  %20 = load i64, ptr %index, align 8, !dbg !1174
  %eq13 = icmp eq i64 %19, %20, !dbg !1173
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1173

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1175
  br label %err_retblock, !dbg !1175

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1176, metadata !DIExpression()), !dbg !1177
  store i8 0, ptr %is_negative, align 1, !dbg !1177
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1178
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1178
  %22 = load ptr, ptr %string, align 8, !dbg !1178
  %23 = load i64, ptr %index, align 8, !dbg !1180
  %ge = icmp uge i64 %23, %21, !dbg !1180
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1180
  br i1 %24, label %panic, label %checkok, !dbg !1180

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1180
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1181

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1183
  %27 = load i64, ptr %index, align 8, !dbg !1184
  %add19 = add i64 %27, 1, !dbg !1184
  store i64 %add19, ptr %index, align 8, !dbg !1184
  br label %switch.exit, !dbg !1184

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1185
  %add21 = add i64 %28, 1, !dbg !1185
  store i64 %add21, ptr %index, align 8, !dbg !1185
  br label %switch.exit, !dbg !1185

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1187

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1189
  %30 = load i64, ptr %index, align 8, !dbg !1190
  %eq22 = icmp eq i64 %29, %30, !dbg !1189
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1189

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1191
  br label %err_retblock, !dbg !1191

if.exit24:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1192, metadata !DIExpression()), !dbg !1193
  %31 = load i32, ptr %base1, align 4, !dbg !1194
  %sext = sext i32 %31 to i64, !dbg !1194
  store i64 %sext, ptr %base_used, align 8, !dbg !1194
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1195
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1195
  %33 = load ptr, ptr %string, align 8, !dbg !1195
  %34 = load i64, ptr %index, align 8, !dbg !1196
  %ge26 = icmp uge i64 %34, %32, !dbg !1196
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1196
  br i1 %35, label %panic27, label %checkok34, !dbg !1196

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1196
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1196
  %eq36 = icmp eq i8 %36, 48, !dbg !1195
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1195

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1197
  %eq38 = icmp eq i32 %37, 10, !dbg !1197
  br label %and.phi39, !dbg !1197

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1197
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1197

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1198
  %add42 = add i64 %38, 1, !dbg !1198
  store i64 %add42, ptr %index, align 8, !dbg !1198
  %39 = load i64, ptr %index, align 8, !dbg !1200
  %40 = load i64, ptr %len, align 8, !dbg !1201
  %eq43 = icmp eq i64 %39, %40, !dbg !1200
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1200

if.then44:                                        ; preds = %if.then41
  store i64 0, ptr %blockret, align 8, !dbg !1202
  br label %expr_block.exit135, !dbg !1202

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1203
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1203
  %42 = load ptr, ptr %string, align 8, !dbg !1203
  %43 = load i64, ptr %index, align 8, !dbg !1205
  %ge47 = icmp uge i64 %43, %41, !dbg !1205
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1205
  br i1 %44, label %panic48, label %checkok55, !dbg !1205

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1205
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i64 16, ptr %base_used, align 8, !dbg !1206
  %47 = load i64, ptr %index, align 8, !dbg !1208
  %add60 = add i64 %47, 1, !dbg !1208
  store i64 %add60, ptr %index, align 8, !dbg !1208
  br label %switch.exit66, !dbg !1208

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i64 2, ptr %base_used, align 8, !dbg !1209
  %48 = load i64, ptr %index, align 8, !dbg !1211
  %add62 = add i64 %48, 1, !dbg !1211
  store i64 %add62, ptr %index, align 8, !dbg !1211
  br label %switch.exit66, !dbg !1211

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i64 8, ptr %base_used, align 8, !dbg !1212
  %49 = load i64, ptr %index, align 8, !dbg !1214
  %add64 = add i64 %49, 1, !dbg !1214
  store i64 %add64, ptr %index, align 8, !dbg !1214
  br label %switch.exit66, !dbg !1214

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1215

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1217
  %51 = load i64, ptr %index, align 8, !dbg !1218
  %eq67 = icmp eq i64 %50, %51, !dbg !1217
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1217

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1219
  br label %err_retblock, !dbg !1219

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1219

if.exit70:                                        ; preds = %if.exit69, %and.phi39
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1220, metadata !DIExpression()), !dbg !1221
  store i64 0, ptr %value, align 8, !dbg !1222
  br label %loop.cond71, !dbg !1223

loop.cond71:                                      ; preds = %noerr_block133, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1224
  %53 = load i64, ptr %len, align 8, !dbg !1226
  %neq = icmp ne i64 %52, %53, !dbg !1224
  br i1 %neq, label %loop.body72, label %loop.exit134, !dbg !1224

loop.body72:                                      ; preds = %loop.cond71
  call void @llvm.dbg.declare(metadata ptr %c73, metadata !1227, metadata !DIExpression()), !dbg !1229
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1230, metadata !DIExpression()), !dbg !1232
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1233
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1233
  %55 = load ptr, ptr %string, align 8, !dbg !1233
  %56 = load i64, ptr %index, align 8, !dbg !1234
  %add76 = add i64 %56, 1, !dbg !1234
  store i64 %add76, ptr %index, align 8, !dbg !1234
  %ge77 = icmp uge i64 %56, %54, !dbg !1234
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1234
  br i1 %57, label %panic78, label %checkok85, !dbg !1234

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1234
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1234
  store i8 %58, ptr %ch, align 1, !dbg !1234
  %59 = load i64, ptr %base_used, align 8, !dbg !1235
  %neq87 = icmp ne i64 %59, 16, !dbg !1235
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1235

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1236
  %lt89 = icmp ult i8 %60, 65, !dbg !1236
  br label %or.phi90, !dbg !1236

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1236
  br i1 %val91, label %if.then92, label %if.exit93, !dbg !1236

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1237
  %zext = zext i8 %61 to i32, !dbg !1237
  %sub = sub i32 %zext, 48, !dbg !1238
  %trunc = trunc i32 %sub to i8, !dbg !1238
  store i8 %trunc, ptr %blockret74, align 1, !dbg !1238
  br label %expr_block.exit, !dbg !1238

if.exit93:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1239
  %le94 = icmp ule i8 %62, 70, !dbg !1239
  br i1 %le94, label %if.then95, label %if.exit100, !dbg !1239

if.then95:                                        ; preds = %if.exit93
  %63 = load i8, ptr %ch, align 1, !dbg !1240
  %zext96 = zext i8 %63 to i32, !dbg !1240
  %sub97 = sub i32 %zext96, 65, !dbg !1240
  %add98 = add i32 %sub97, 10, !dbg !1241
  %trunc99 = trunc i32 %add98 to i8, !dbg !1241
  store i8 %trunc99, ptr %blockret74, align 1, !dbg !1241
  br label %expr_block.exit, !dbg !1241

if.exit100:                                       ; preds = %if.exit93
  %64 = load i8, ptr %ch, align 1, !dbg !1242
  %lt101 = icmp ult i8 %64, 97, !dbg !1242
  br i1 %lt101, label %if.then102, label %if.exit103, !dbg !1242

if.then102:                                       ; preds = %if.exit100
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1243
  br label %guard_block, !dbg !1243

if.exit103:                                       ; preds = %if.exit100
  %65 = load i8, ptr %ch, align 1, !dbg !1244
  %gt104 = icmp ugt i8 %65, 102, !dbg !1244
  br i1 %gt104, label %if.then105, label %if.exit106, !dbg !1244

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1245
  br label %guard_block, !dbg !1245

if.exit106:                                       ; preds = %if.exit103
  %66 = load i8, ptr %ch, align 1, !dbg !1246
  %zext107 = zext i8 %66 to i32, !dbg !1246
  %sub108 = sub i32 %zext107, 97, !dbg !1246
  %add109 = add i32 %sub108, 10, !dbg !1247
  %trunc110 = trunc i32 %add109 to i8, !dbg !1247
  store i8 %trunc110, ptr %blockret74, align 1, !dbg !1247
  br label %expr_block.exit, !dbg !1247

expr_block.exit:                                  ; preds = %if.exit106, %if.then95, %if.then92
  br label %noerr_block, !dbg !1247

guard_block:                                      ; preds = %if.then105, %if.then102
  %67 = load i64, ptr %error_var, align 8, !dbg !1247
  store i64 %67, ptr %reterr, align 8, !dbg !1247
  br label %err_retblock, !dbg !1247

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1247
  store i8 %68, ptr %c73, align 1, !dbg !1247
  %69 = load i8, ptr %c73, align 1, !dbg !1248
  %zext111 = zext i8 %69 to i64, !dbg !1248
  %70 = load i64, ptr %base_used, align 8, !dbg !1249
  %le112 = icmp sle i64 %70, %zext111, !dbg !1248
  %check = icmp slt i64 %zext111, 0, !dbg !1248
  %siui-le = or i1 %check, %le112, !dbg !1248
  br i1 %siui-le, label %if.then113, label %if.exit114, !dbg !1248

if.then113:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1250
  br label %err_retblock, !dbg !1250

if.exit114:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1251
  %72 = trunc i8 %71 to i1, !dbg !1251
  br i1 %72, label %if.then117, label %if.exit123, !dbg !1251

if.then117:                                       ; preds = %if.exit114
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1253, metadata !DIExpression()), !dbg !1255
  %73 = load i64, ptr %value, align 8, !dbg !1256
  %74 = load i64, ptr %base_used, align 8, !dbg !1257
  %mul = mul i64 %73, %74, !dbg !1256
  %75 = load i8, ptr %c73, align 1, !dbg !1258
  %zext118 = zext i8 %75 to i64, !dbg !1258
  %sub119 = sub i64 %mul, %zext118, !dbg !1256
  store i64 %sub119, ptr %new_value, align 8, !dbg !1256
  %76 = load i64, ptr %new_value, align 8, !dbg !1259
  %77 = load i64, ptr %value, align 8, !dbg !1260
  %gt120 = icmp sgt i64 %76, %77, !dbg !1259
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1259

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1261
  br label %guard_block132, !dbg !1261

if.exit122:                                       ; preds = %if.then117
  %78 = load i64, ptr %new_value, align 8, !dbg !1262
  store i64 %78, ptr %blockret116, align 8, !dbg !1262
  br label %expr_block.exit131, !dbg !1262

if.exit123:                                       ; preds = %if.exit114
  call void @llvm.dbg.declare(metadata ptr %new_value124, metadata !1263, metadata !DIExpression()), !dbg !1264
  %79 = load i64, ptr %value, align 8, !dbg !1265
  %80 = load i64, ptr %base_used, align 8, !dbg !1266
  %mul125 = mul i64 %79, %80, !dbg !1265
  %81 = load i8, ptr %c73, align 1, !dbg !1267
  %zext126 = zext i8 %81 to i64, !dbg !1267
  %add127 = add i64 %mul125, %zext126, !dbg !1265
  store i64 %add127, ptr %new_value124, align 8, !dbg !1265
  %82 = load i64, ptr %new_value124, align 8, !dbg !1268
  %83 = load i64, ptr %value, align 8, !dbg !1269
  %lt128 = icmp slt i64 %82, %83, !dbg !1268
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !1268

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1270
  br label %guard_block132, !dbg !1270

if.exit130:                                       ; preds = %if.exit123
  %84 = load i64, ptr %new_value124, align 8, !dbg !1271
  store i64 %84, ptr %blockret116, align 8, !dbg !1271
  br label %expr_block.exit131, !dbg !1271

expr_block.exit131:                               ; preds = %if.exit130, %if.exit122
  br label %noerr_block133, !dbg !1271

guard_block132:                                   ; preds = %if.then129, %if.then121
  %85 = load i64, ptr %error_var115, align 8, !dbg !1271
  store i64 %85, ptr %reterr, align 8, !dbg !1271
  br label %err_retblock, !dbg !1271

noerr_block133:                                   ; preds = %expr_block.exit131
  %86 = load i64, ptr %blockret116, align 8, !dbg !1271
  store i64 %86, ptr %value, align 8, !dbg !1271
  br label %loop.cond71, !dbg !1271

loop.exit134:                                     ; preds = %loop.cond71
  %87 = load i64, ptr %value, align 8, !dbg !1272
  store i64 %87, ptr %blockret, align 8, !dbg !1272
  br label %expr_block.exit135, !dbg !1272

expr_block.exit135:                               ; preds = %loop.exit134, %if.then44
  %88 = load i64, ptr %blockret, align 8, !dbg !1272
  store i64 %88, ptr %0, align 8, !dbg !1272
  ret i64 0, !dbg !1272

err_retblock:                                     ; preds = %guard_block132, %if.then113, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1272
  ret i64 %89, !dbg !1272

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.61, i64 7, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1180
  unreachable, !dbg !1180

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.61, i64 7, i32 655, ptr byval(%"any[]") align 8 %indirectarg33), !dbg !1196
  unreachable, !dbg !1196

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.61, i64 7, i32 659, ptr byval(%"any[]") align 8 %indirectarg54), !dbg !1205
  unreachable, !dbg !1205

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.61, i64 7, i32 682, ptr byval(%"any[]") align 8 %indirectarg84), !dbg !1234
  unreachable, !dbg !1234
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_int(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1273 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i32, align 4
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var115 = alloca i64, align 8
  %blockret116 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value124 = alloca i32, align 4
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1277, metadata !DIExpression()), !dbg !1278
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1279, metadata !DIExpression()), !dbg !1280
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1281
  %le = icmp sle i32 %5, 10, !dbg !1281
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1281

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1285
  %gt = icmp sgt i32 %6, 1, !dbg !1285
  br label %and.phi, !dbg !1285

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1285
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1285

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1286
  %eq = icmp eq i32 %7, 16, !dbg !1286
  br label %or.phi, !dbg !1286

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1286
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1286

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1281
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.62, i64 6, i32 632), !dbg !1281
  unreachable, !dbg !1281

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1287, metadata !DIExpression()), !dbg !1288
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1289
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1289
  store i64 %9, ptr %len, align 8, !dbg !1289
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1290, metadata !DIExpression()), !dbg !1291
  store i64 0, ptr %index, align 8, !dbg !1292
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1293, metadata !DIExpression()), !dbg !1294
  %10 = load ptr, ptr %string, align 8, !dbg !1295
  store ptr %10, ptr %ptr, align 8, !dbg !1295
  br label %loop.cond, !dbg !1296

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1297
  %12 = load i64, ptr %len, align 8, !dbg !1299
  %lt = icmp ult i64 %11, %12, !dbg !1297
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1297

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1300
  %14 = load i64, ptr %index, align 8, !dbg !1301
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1301
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1302
  %eq6 = icmp eq i8 %16, 32, !dbg !1302
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1302

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1305
  %eq8 = icmp eq i8 %17, 9, !dbg !1305
  br label %or.phi9, !dbg !1305

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1305
  br label %and.phi11, !dbg !1305

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1305
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1305

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1306
  %add = add i64 %18, 1, !dbg !1306
  store i64 %add, ptr %index, align 8, !dbg !1306
  br label %loop.cond, !dbg !1306

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1307
  %20 = load i64, ptr %index, align 8, !dbg !1308
  %eq13 = icmp eq i64 %19, %20, !dbg !1307
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1307

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1309
  br label %err_retblock, !dbg !1309

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1310, metadata !DIExpression()), !dbg !1311
  store i8 0, ptr %is_negative, align 1, !dbg !1311
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1312
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1312
  %22 = load ptr, ptr %string, align 8, !dbg !1312
  %23 = load i64, ptr %index, align 8, !dbg !1314
  %ge = icmp uge i64 %23, %21, !dbg !1314
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1314
  br i1 %24, label %panic, label %checkok, !dbg !1314

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1314
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1315

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1317
  %27 = load i64, ptr %index, align 8, !dbg !1318
  %add19 = add i64 %27, 1, !dbg !1318
  store i64 %add19, ptr %index, align 8, !dbg !1318
  br label %switch.exit, !dbg !1318

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1319
  %add21 = add i64 %28, 1, !dbg !1319
  store i64 %add21, ptr %index, align 8, !dbg !1319
  br label %switch.exit, !dbg !1319

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1321

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1323
  %30 = load i64, ptr %index, align 8, !dbg !1324
  %eq22 = icmp eq i64 %29, %30, !dbg !1323
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1323

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1325
  br label %err_retblock, !dbg !1325

if.exit24:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1326, metadata !DIExpression()), !dbg !1327
  %31 = load i32, ptr %base1, align 4, !dbg !1328
  store i32 %31, ptr %base_used, align 4, !dbg !1328
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1329
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1329
  %33 = load ptr, ptr %string, align 8, !dbg !1329
  %34 = load i64, ptr %index, align 8, !dbg !1330
  %ge26 = icmp uge i64 %34, %32, !dbg !1330
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1330
  br i1 %35, label %panic27, label %checkok34, !dbg !1330

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1330
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1330
  %eq36 = icmp eq i8 %36, 48, !dbg !1329
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1329

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1331
  %eq38 = icmp eq i32 %37, 10, !dbg !1331
  br label %and.phi39, !dbg !1331

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1331
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1331

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1332
  %add42 = add i64 %38, 1, !dbg !1332
  store i64 %add42, ptr %index, align 8, !dbg !1332
  %39 = load i64, ptr %index, align 8, !dbg !1334
  %40 = load i64, ptr %len, align 8, !dbg !1335
  %eq43 = icmp eq i64 %39, %40, !dbg !1334
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1334

if.then44:                                        ; preds = %if.then41
  store i32 0, ptr %blockret, align 4, !dbg !1336
  br label %expr_block.exit135, !dbg !1336

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1337
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1337
  %42 = load ptr, ptr %string, align 8, !dbg !1337
  %43 = load i64, ptr %index, align 8, !dbg !1339
  %ge47 = icmp uge i64 %43, %41, !dbg !1339
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1339
  br i1 %44, label %panic48, label %checkok55, !dbg !1339

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1339
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i32 16, ptr %base_used, align 4, !dbg !1340
  %47 = load i64, ptr %index, align 8, !dbg !1342
  %add60 = add i64 %47, 1, !dbg !1342
  store i64 %add60, ptr %index, align 8, !dbg !1342
  br label %switch.exit66, !dbg !1342

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i32 2, ptr %base_used, align 4, !dbg !1343
  %48 = load i64, ptr %index, align 8, !dbg !1345
  %add62 = add i64 %48, 1, !dbg !1345
  store i64 %add62, ptr %index, align 8, !dbg !1345
  br label %switch.exit66, !dbg !1345

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i32 8, ptr %base_used, align 4, !dbg !1346
  %49 = load i64, ptr %index, align 8, !dbg !1348
  %add64 = add i64 %49, 1, !dbg !1348
  store i64 %add64, ptr %index, align 8, !dbg !1348
  br label %switch.exit66, !dbg !1348

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1349

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1351
  %51 = load i64, ptr %index, align 8, !dbg !1352
  %eq67 = icmp eq i64 %50, %51, !dbg !1351
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1351

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1353
  br label %err_retblock, !dbg !1353

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1353

if.exit70:                                        ; preds = %if.exit69, %and.phi39
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1354, metadata !DIExpression()), !dbg !1355
  store i32 0, ptr %value, align 4, !dbg !1356
  br label %loop.cond71, !dbg !1357

loop.cond71:                                      ; preds = %noerr_block133, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1358
  %53 = load i64, ptr %len, align 8, !dbg !1360
  %neq = icmp ne i64 %52, %53, !dbg !1358
  br i1 %neq, label %loop.body72, label %loop.exit134, !dbg !1358

loop.body72:                                      ; preds = %loop.cond71
  call void @llvm.dbg.declare(metadata ptr %c73, metadata !1361, metadata !DIExpression()), !dbg !1363
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1364, metadata !DIExpression()), !dbg !1366
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1367
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1367
  %55 = load ptr, ptr %string, align 8, !dbg !1367
  %56 = load i64, ptr %index, align 8, !dbg !1368
  %add76 = add i64 %56, 1, !dbg !1368
  store i64 %add76, ptr %index, align 8, !dbg !1368
  %ge77 = icmp uge i64 %56, %54, !dbg !1368
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1368
  br i1 %57, label %panic78, label %checkok85, !dbg !1368

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1368
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1368
  store i8 %58, ptr %ch, align 1, !dbg !1368
  %59 = load i32, ptr %base_used, align 4, !dbg !1369
  %neq87 = icmp ne i32 %59, 16, !dbg !1369
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1369

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1370
  %lt89 = icmp ult i8 %60, 65, !dbg !1370
  br label %or.phi90, !dbg !1370

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1370
  br i1 %val91, label %if.then92, label %if.exit93, !dbg !1370

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1371
  %zext = zext i8 %61 to i32, !dbg !1371
  %sub = sub i32 %zext, 48, !dbg !1372
  %trunc = trunc i32 %sub to i8, !dbg !1372
  store i8 %trunc, ptr %blockret74, align 1, !dbg !1372
  br label %expr_block.exit, !dbg !1372

if.exit93:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1373
  %le94 = icmp ule i8 %62, 70, !dbg !1373
  br i1 %le94, label %if.then95, label %if.exit100, !dbg !1373

if.then95:                                        ; preds = %if.exit93
  %63 = load i8, ptr %ch, align 1, !dbg !1374
  %zext96 = zext i8 %63 to i32, !dbg !1374
  %sub97 = sub i32 %zext96, 65, !dbg !1374
  %add98 = add i32 %sub97, 10, !dbg !1375
  %trunc99 = trunc i32 %add98 to i8, !dbg !1375
  store i8 %trunc99, ptr %blockret74, align 1, !dbg !1375
  br label %expr_block.exit, !dbg !1375

if.exit100:                                       ; preds = %if.exit93
  %64 = load i8, ptr %ch, align 1, !dbg !1376
  %lt101 = icmp ult i8 %64, 97, !dbg !1376
  br i1 %lt101, label %if.then102, label %if.exit103, !dbg !1376

if.then102:                                       ; preds = %if.exit100
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1377
  br label %guard_block, !dbg !1377

if.exit103:                                       ; preds = %if.exit100
  %65 = load i8, ptr %ch, align 1, !dbg !1378
  %gt104 = icmp ugt i8 %65, 102, !dbg !1378
  br i1 %gt104, label %if.then105, label %if.exit106, !dbg !1378

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1379
  br label %guard_block, !dbg !1379

if.exit106:                                       ; preds = %if.exit103
  %66 = load i8, ptr %ch, align 1, !dbg !1380
  %zext107 = zext i8 %66 to i32, !dbg !1380
  %sub108 = sub i32 %zext107, 97, !dbg !1380
  %add109 = add i32 %sub108, 10, !dbg !1381
  %trunc110 = trunc i32 %add109 to i8, !dbg !1381
  store i8 %trunc110, ptr %blockret74, align 1, !dbg !1381
  br label %expr_block.exit, !dbg !1381

expr_block.exit:                                  ; preds = %if.exit106, %if.then95, %if.then92
  br label %noerr_block, !dbg !1381

guard_block:                                      ; preds = %if.then105, %if.then102
  %67 = load i64, ptr %error_var, align 8, !dbg !1381
  store i64 %67, ptr %reterr, align 8, !dbg !1381
  br label %err_retblock, !dbg !1381

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1381
  store i8 %68, ptr %c73, align 1, !dbg !1381
  %69 = load i8, ptr %c73, align 1, !dbg !1382
  %zext111 = zext i8 %69 to i32, !dbg !1382
  %70 = load i32, ptr %base_used, align 4, !dbg !1383
  %le112 = icmp sle i32 %70, %zext111, !dbg !1382
  %check = icmp slt i32 %zext111, 0, !dbg !1382
  %siui-le = or i1 %check, %le112, !dbg !1382
  br i1 %siui-le, label %if.then113, label %if.exit114, !dbg !1382

if.then113:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1384
  br label %err_retblock, !dbg !1384

if.exit114:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1385
  %72 = trunc i8 %71 to i1, !dbg !1385
  br i1 %72, label %if.then117, label %if.exit123, !dbg !1385

if.then117:                                       ; preds = %if.exit114
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1387, metadata !DIExpression()), !dbg !1389
  %73 = load i32, ptr %value, align 4, !dbg !1390
  %74 = load i32, ptr %base_used, align 4, !dbg !1391
  %mul = mul i32 %73, %74, !dbg !1390
  %75 = load i8, ptr %c73, align 1, !dbg !1392
  %zext118 = zext i8 %75 to i32, !dbg !1392
  %sub119 = sub i32 %mul, %zext118, !dbg !1390
  store i32 %sub119, ptr %new_value, align 4, !dbg !1390
  %76 = load i32, ptr %new_value, align 4, !dbg !1393
  %77 = load i32, ptr %value, align 4, !dbg !1394
  %gt120 = icmp sgt i32 %76, %77, !dbg !1393
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1393

if.then121:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1395
  br label %guard_block132, !dbg !1395

if.exit122:                                       ; preds = %if.then117
  %78 = load i32, ptr %new_value, align 4, !dbg !1396
  store i32 %78, ptr %blockret116, align 4, !dbg !1396
  br label %expr_block.exit131, !dbg !1396

if.exit123:                                       ; preds = %if.exit114
  call void @llvm.dbg.declare(metadata ptr %new_value124, metadata !1397, metadata !DIExpression()), !dbg !1398
  %79 = load i32, ptr %value, align 4, !dbg !1399
  %80 = load i32, ptr %base_used, align 4, !dbg !1400
  %mul125 = mul i32 %79, %80, !dbg !1399
  %81 = load i8, ptr %c73, align 1, !dbg !1401
  %zext126 = zext i8 %81 to i32, !dbg !1401
  %add127 = add i32 %mul125, %zext126, !dbg !1399
  store i32 %add127, ptr %new_value124, align 4, !dbg !1399
  %82 = load i32, ptr %new_value124, align 4, !dbg !1402
  %83 = load i32, ptr %value, align 4, !dbg !1403
  %lt128 = icmp slt i32 %82, %83, !dbg !1402
  br i1 %lt128, label %if.then129, label %if.exit130, !dbg !1402

if.then129:                                       ; preds = %if.exit123
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1404
  br label %guard_block132, !dbg !1404

if.exit130:                                       ; preds = %if.exit123
  %84 = load i32, ptr %new_value124, align 4, !dbg !1405
  store i32 %84, ptr %blockret116, align 4, !dbg !1405
  br label %expr_block.exit131, !dbg !1405

expr_block.exit131:                               ; preds = %if.exit130, %if.exit122
  br label %noerr_block133, !dbg !1405

guard_block132:                                   ; preds = %if.then129, %if.then121
  %85 = load i64, ptr %error_var115, align 8, !dbg !1405
  store i64 %85, ptr %reterr, align 8, !dbg !1405
  br label %err_retblock, !dbg !1405

noerr_block133:                                   ; preds = %expr_block.exit131
  %86 = load i32, ptr %blockret116, align 4, !dbg !1405
  store i32 %86, ptr %value, align 4, !dbg !1405
  br label %loop.cond71, !dbg !1405

loop.exit134:                                     ; preds = %loop.cond71
  %87 = load i32, ptr %value, align 4, !dbg !1406
  store i32 %87, ptr %blockret, align 4, !dbg !1406
  br label %expr_block.exit135, !dbg !1406

expr_block.exit135:                               ; preds = %loop.exit134, %if.then44
  %88 = load i32, ptr %blockret, align 4, !dbg !1406
  store i32 %88, ptr %0, align 4, !dbg !1406
  ret i64 0, !dbg !1406

err_retblock:                                     ; preds = %guard_block132, %if.then113, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1406
  ret i64 %89, !dbg !1406

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.62, i64 6, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1314
  unreachable, !dbg !1314

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.62, i64 6, i32 655, ptr byval(%"any[]") align 8 %indirectarg33), !dbg !1330
  unreachable, !dbg !1330

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.62, i64 6, i32 659, ptr byval(%"any[]") align 8 %indirectarg54), !dbg !1339
  unreachable, !dbg !1339

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.62, i64 6, i32 682, ptr byval(%"any[]") align 8 %indirectarg84), !dbg !1368
  unreachable, !dbg !1368
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_short(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1407 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i16, align 2
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var116 = alloca i64, align 8
  %blockret117 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value128 = alloca i16, align 2
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1412, metadata !DIExpression()), !dbg !1413
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1414, metadata !DIExpression()), !dbg !1415
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1416
  %le = icmp sle i32 %5, 10, !dbg !1416
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1416

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1420
  %gt = icmp sgt i32 %6, 1, !dbg !1420
  br label %and.phi, !dbg !1420

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1420
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1420

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1421
  %eq = icmp eq i32 %7, 16, !dbg !1421
  br label %or.phi, !dbg !1421

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1421
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1421

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1416
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.63, i64 8, i32 632), !dbg !1416
  unreachable, !dbg !1416

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1422, metadata !DIExpression()), !dbg !1423
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1424
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1424
  store i64 %9, ptr %len, align 8, !dbg !1424
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1425, metadata !DIExpression()), !dbg !1426
  store i64 0, ptr %index, align 8, !dbg !1427
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1428, metadata !DIExpression()), !dbg !1429
  %10 = load ptr, ptr %string, align 8, !dbg !1430
  store ptr %10, ptr %ptr, align 8, !dbg !1430
  br label %loop.cond, !dbg !1431

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1432
  %12 = load i64, ptr %len, align 8, !dbg !1434
  %lt = icmp ult i64 %11, %12, !dbg !1432
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1432

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1435
  %14 = load i64, ptr %index, align 8, !dbg !1436
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1436
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1437
  %eq6 = icmp eq i8 %16, 32, !dbg !1437
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1437

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1440
  %eq8 = icmp eq i8 %17, 9, !dbg !1440
  br label %or.phi9, !dbg !1440

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1440
  br label %and.phi11, !dbg !1440

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1440
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1440

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1441
  %add = add i64 %18, 1, !dbg !1441
  store i64 %add, ptr %index, align 8, !dbg !1441
  br label %loop.cond, !dbg !1441

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1442
  %20 = load i64, ptr %index, align 8, !dbg !1443
  %eq13 = icmp eq i64 %19, %20, !dbg !1442
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1442

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1444
  br label %err_retblock, !dbg !1444

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1445, metadata !DIExpression()), !dbg !1446
  store i8 0, ptr %is_negative, align 1, !dbg !1446
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1447
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1447
  %22 = load ptr, ptr %string, align 8, !dbg !1447
  %23 = load i64, ptr %index, align 8, !dbg !1449
  %ge = icmp uge i64 %23, %21, !dbg !1449
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1449
  br i1 %24, label %panic, label %checkok, !dbg !1449

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1449
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1450

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1452
  %27 = load i64, ptr %index, align 8, !dbg !1453
  %add19 = add i64 %27, 1, !dbg !1453
  store i64 %add19, ptr %index, align 8, !dbg !1453
  br label %switch.exit, !dbg !1453

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1454
  %add21 = add i64 %28, 1, !dbg !1454
  store i64 %add21, ptr %index, align 8, !dbg !1454
  br label %switch.exit, !dbg !1454

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1456

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1458
  %30 = load i64, ptr %index, align 8, !dbg !1459
  %eq22 = icmp eq i64 %29, %30, !dbg !1458
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1458

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1460
  br label %err_retblock, !dbg !1460

if.exit24:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1461, metadata !DIExpression()), !dbg !1462
  %31 = load i32, ptr %base1, align 4, !dbg !1463
  %trunc = trunc i32 %31 to i16, !dbg !1463
  store i16 %trunc, ptr %base_used, align 2, !dbg !1463
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1464
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1464
  %33 = load ptr, ptr %string, align 8, !dbg !1464
  %34 = load i64, ptr %index, align 8, !dbg !1465
  %ge26 = icmp uge i64 %34, %32, !dbg !1465
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1465
  br i1 %35, label %panic27, label %checkok34, !dbg !1465

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1465
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1465
  %eq36 = icmp eq i8 %36, 48, !dbg !1464
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1464

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1466
  %eq38 = icmp eq i32 %37, 10, !dbg !1466
  br label %and.phi39, !dbg !1466

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1466
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1466

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1467
  %add42 = add i64 %38, 1, !dbg !1467
  store i64 %add42, ptr %index, align 8, !dbg !1467
  %39 = load i64, ptr %index, align 8, !dbg !1469
  %40 = load i64, ptr %len, align 8, !dbg !1470
  %eq43 = icmp eq i64 %39, %40, !dbg !1469
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1469

if.then44:                                        ; preds = %if.then41
  store i16 0, ptr %blockret, align 2, !dbg !1471
  br label %expr_block.exit142, !dbg !1471

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1472
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1472
  %42 = load ptr, ptr %string, align 8, !dbg !1472
  %43 = load i64, ptr %index, align 8, !dbg !1474
  %ge47 = icmp uge i64 %43, %41, !dbg !1474
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1474
  br i1 %44, label %panic48, label %checkok55, !dbg !1474

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1474
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i16 16, ptr %base_used, align 2, !dbg !1475
  %47 = load i64, ptr %index, align 8, !dbg !1477
  %add60 = add i64 %47, 1, !dbg !1477
  store i64 %add60, ptr %index, align 8, !dbg !1477
  br label %switch.exit66, !dbg !1477

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i16 2, ptr %base_used, align 2, !dbg !1478
  %48 = load i64, ptr %index, align 8, !dbg !1480
  %add62 = add i64 %48, 1, !dbg !1480
  store i64 %add62, ptr %index, align 8, !dbg !1480
  br label %switch.exit66, !dbg !1480

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i16 8, ptr %base_used, align 2, !dbg !1481
  %49 = load i64, ptr %index, align 8, !dbg !1483
  %add64 = add i64 %49, 1, !dbg !1483
  store i64 %add64, ptr %index, align 8, !dbg !1483
  br label %switch.exit66, !dbg !1483

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1484

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1486
  %51 = load i64, ptr %index, align 8, !dbg !1487
  %eq67 = icmp eq i64 %50, %51, !dbg !1486
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1486

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1488
  br label %err_retblock, !dbg !1488

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1488

if.exit70:                                        ; preds = %if.exit69, %and.phi39
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1489, metadata !DIExpression()), !dbg !1490
  store i16 0, ptr %value, align 2, !dbg !1491
  br label %loop.cond71, !dbg !1492

loop.cond71:                                      ; preds = %noerr_block140, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1493
  %53 = load i64, ptr %len, align 8, !dbg !1495
  %neq = icmp ne i64 %52, %53, !dbg !1493
  br i1 %neq, label %loop.body72, label %loop.exit141, !dbg !1493

loop.body72:                                      ; preds = %loop.cond71
  call void @llvm.dbg.declare(metadata ptr %c73, metadata !1496, metadata !DIExpression()), !dbg !1498
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1499, metadata !DIExpression()), !dbg !1501
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1502
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1502
  %55 = load ptr, ptr %string, align 8, !dbg !1502
  %56 = load i64, ptr %index, align 8, !dbg !1503
  %add76 = add i64 %56, 1, !dbg !1503
  store i64 %add76, ptr %index, align 8, !dbg !1503
  %ge77 = icmp uge i64 %56, %54, !dbg !1503
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1503
  br i1 %57, label %panic78, label %checkok85, !dbg !1503

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1503
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1503
  store i8 %58, ptr %ch, align 1, !dbg !1503
  %59 = load i16, ptr %base_used, align 2, !dbg !1504
  %sext = sext i16 %59 to i32, !dbg !1504
  %neq87 = icmp ne i32 %sext, 16, !dbg !1504
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1504

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1505
  %lt89 = icmp ult i8 %60, 65, !dbg !1505
  br label %or.phi90, !dbg !1505

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1505
  br i1 %val91, label %if.then92, label %if.exit94, !dbg !1505

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1506
  %zext = zext i8 %61 to i32, !dbg !1506
  %sub = sub i32 %zext, 48, !dbg !1507
  %trunc93 = trunc i32 %sub to i8, !dbg !1507
  store i8 %trunc93, ptr %blockret74, align 1, !dbg !1507
  br label %expr_block.exit, !dbg !1507

if.exit94:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1508
  %le95 = icmp ule i8 %62, 70, !dbg !1508
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !1508

if.then96:                                        ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !1509
  %zext97 = zext i8 %63 to i32, !dbg !1509
  %sub98 = sub i32 %zext97, 65, !dbg !1509
  %add99 = add i32 %sub98, 10, !dbg !1510
  %trunc100 = trunc i32 %add99 to i8, !dbg !1510
  store i8 %trunc100, ptr %blockret74, align 1, !dbg !1510
  br label %expr_block.exit, !dbg !1510

if.exit101:                                       ; preds = %if.exit94
  %64 = load i8, ptr %ch, align 1, !dbg !1511
  %lt102 = icmp ult i8 %64, 97, !dbg !1511
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !1511

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1512
  br label %guard_block, !dbg !1512

if.exit104:                                       ; preds = %if.exit101
  %65 = load i8, ptr %ch, align 1, !dbg !1513
  %gt105 = icmp ugt i8 %65, 102, !dbg !1513
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !1513

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1514
  br label %guard_block, !dbg !1514

if.exit107:                                       ; preds = %if.exit104
  %66 = load i8, ptr %ch, align 1, !dbg !1515
  %zext108 = zext i8 %66 to i32, !dbg !1515
  %sub109 = sub i32 %zext108, 97, !dbg !1515
  %add110 = add i32 %sub109, 10, !dbg !1516
  %trunc111 = trunc i32 %add110 to i8, !dbg !1516
  store i8 %trunc111, ptr %blockret74, align 1, !dbg !1516
  br label %expr_block.exit, !dbg !1516

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then92
  br label %noerr_block, !dbg !1516

guard_block:                                      ; preds = %if.then106, %if.then103
  %67 = load i64, ptr %error_var, align 8, !dbg !1516
  store i64 %67, ptr %reterr, align 8, !dbg !1516
  br label %err_retblock, !dbg !1516

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1516
  store i8 %68, ptr %c73, align 1, !dbg !1516
  %69 = load i8, ptr %c73, align 1, !dbg !1517
  %zext112 = zext i8 %69 to i16, !dbg !1517
  %70 = load i16, ptr %base_used, align 2, !dbg !1518
  %le113 = icmp sle i16 %70, %zext112, !dbg !1517
  %check = icmp slt i16 %zext112, 0, !dbg !1517
  %siui-le = or i1 %check, %le113, !dbg !1517
  br i1 %siui-le, label %if.then114, label %if.exit115, !dbg !1517

if.then114:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1519
  br label %err_retblock, !dbg !1519

if.exit115:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1520
  %72 = trunc i8 %71 to i1, !dbg !1520
  br i1 %72, label %if.then118, label %if.exit127, !dbg !1520

if.then118:                                       ; preds = %if.exit115
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1522, metadata !DIExpression()), !dbg !1524
  %73 = load i16, ptr %value, align 2, !dbg !1525
  %sext119 = sext i16 %73 to i32, !dbg !1525
  %74 = load i16, ptr %base_used, align 2, !dbg !1526
  %sext120 = sext i16 %74 to i32, !dbg !1526
  %mul = mul i32 %sext119, %sext120, !dbg !1525
  %75 = load i8, ptr %c73, align 1, !dbg !1527
  %zext121 = zext i8 %75 to i32, !dbg !1527
  %sub122 = sub i32 %mul, %zext121, !dbg !1525
  %trunc123 = trunc i32 %sub122 to i16, !dbg !1525
  store i16 %trunc123, ptr %new_value, align 2, !dbg !1525
  %76 = load i16, ptr %new_value, align 2, !dbg !1528
  %77 = load i16, ptr %value, align 2, !dbg !1529
  %gt124 = icmp sgt i16 %76, %77, !dbg !1528
  br i1 %gt124, label %if.then125, label %if.exit126, !dbg !1528

if.then125:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1530
  br label %guard_block139, !dbg !1530

if.exit126:                                       ; preds = %if.then118
  %78 = load i16, ptr %new_value, align 2, !dbg !1531
  store i16 %78, ptr %blockret117, align 2, !dbg !1531
  br label %expr_block.exit138, !dbg !1531

if.exit127:                                       ; preds = %if.exit115
  call void @llvm.dbg.declare(metadata ptr %new_value128, metadata !1532, metadata !DIExpression()), !dbg !1533
  %79 = load i16, ptr %value, align 2, !dbg !1534
  %sext129 = sext i16 %79 to i32, !dbg !1534
  %80 = load i16, ptr %base_used, align 2, !dbg !1535
  %sext130 = sext i16 %80 to i32, !dbg !1535
  %mul131 = mul i32 %sext129, %sext130, !dbg !1534
  %81 = load i8, ptr %c73, align 1, !dbg !1536
  %zext132 = zext i8 %81 to i32, !dbg !1536
  %add133 = add i32 %mul131, %zext132, !dbg !1534
  %trunc134 = trunc i32 %add133 to i16, !dbg !1534
  store i16 %trunc134, ptr %new_value128, align 2, !dbg !1534
  %82 = load i16, ptr %new_value128, align 2, !dbg !1537
  %83 = load i16, ptr %value, align 2, !dbg !1538
  %lt135 = icmp slt i16 %82, %83, !dbg !1537
  br i1 %lt135, label %if.then136, label %if.exit137, !dbg !1537

if.then136:                                       ; preds = %if.exit127
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1539
  br label %guard_block139, !dbg !1539

if.exit137:                                       ; preds = %if.exit127
  %84 = load i16, ptr %new_value128, align 2, !dbg !1540
  store i16 %84, ptr %blockret117, align 2, !dbg !1540
  br label %expr_block.exit138, !dbg !1540

expr_block.exit138:                               ; preds = %if.exit137, %if.exit126
  br label %noerr_block140, !dbg !1540

guard_block139:                                   ; preds = %if.then136, %if.then125
  %85 = load i64, ptr %error_var116, align 8, !dbg !1540
  store i64 %85, ptr %reterr, align 8, !dbg !1540
  br label %err_retblock, !dbg !1540

noerr_block140:                                   ; preds = %expr_block.exit138
  %86 = load i16, ptr %blockret117, align 2, !dbg !1540
  store i16 %86, ptr %value, align 2, !dbg !1540
  br label %loop.cond71, !dbg !1540

loop.exit141:                                     ; preds = %loop.cond71
  %87 = load i16, ptr %value, align 2, !dbg !1541
  store i16 %87, ptr %blockret, align 2, !dbg !1541
  br label %expr_block.exit142, !dbg !1541

expr_block.exit142:                               ; preds = %loop.exit141, %if.then44
  %88 = load i16, ptr %blockret, align 2, !dbg !1541
  store i16 %88, ptr %0, align 2, !dbg !1541
  ret i64 0, !dbg !1541

err_retblock:                                     ; preds = %guard_block139, %if.then114, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1541
  ret i64 %89, !dbg !1541

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.63, i64 8, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1449
  unreachable, !dbg !1449

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.63, i64 8, i32 655, ptr byval(%"any[]") align 8 %indirectarg33), !dbg !1465
  unreachable, !dbg !1465

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.63, i64 8, i32 659, ptr byval(%"any[]") align 8 %indirectarg54), !dbg !1474
  unreachable, !dbg !1474

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.63, i64 8, i32 682, ptr byval(%"any[]") align 8 %indirectarg84), !dbg !1503
  unreachable, !dbg !1503
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ichar(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1542 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %switch57 = alloca i8, align 1
  %value = alloca i8, align 1
  %c73 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret74 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %error_var115 = alloca i64, align 8
  %blockret116 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value127 = alloca i8, align 1
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1547, metadata !DIExpression()), !dbg !1548
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1549, metadata !DIExpression()), !dbg !1550
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1551
  %le = icmp sle i32 %5, 10, !dbg !1551
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1551

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1555
  %gt = icmp sgt i32 %6, 1, !dbg !1555
  br label %and.phi, !dbg !1555

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1555
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1555

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1556
  %eq = icmp eq i32 %7, 16, !dbg !1556
  br label %or.phi, !dbg !1556

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1556
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1556

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1551
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.64, i64 8, i32 632), !dbg !1551
  unreachable, !dbg !1551

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1557, metadata !DIExpression()), !dbg !1558
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1559
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1559
  store i64 %9, ptr %len, align 8, !dbg !1559
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1560, metadata !DIExpression()), !dbg !1561
  store i64 0, ptr %index, align 8, !dbg !1562
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1563, metadata !DIExpression()), !dbg !1564
  %10 = load ptr, ptr %string, align 8, !dbg !1565
  store ptr %10, ptr %ptr, align 8, !dbg !1565
  br label %loop.cond, !dbg !1566

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1567
  %12 = load i64, ptr %len, align 8, !dbg !1569
  %lt = icmp ult i64 %11, %12, !dbg !1567
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1567

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1570
  %14 = load i64, ptr %index, align 8, !dbg !1571
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1571
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1572
  %eq6 = icmp eq i8 %16, 32, !dbg !1572
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1572

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1575
  %eq8 = icmp eq i8 %17, 9, !dbg !1575
  br label %or.phi9, !dbg !1575

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1575
  br label %and.phi11, !dbg !1575

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1575
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1575

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1576
  %add = add i64 %18, 1, !dbg !1576
  store i64 %add, ptr %index, align 8, !dbg !1576
  br label %loop.cond, !dbg !1576

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1577
  %20 = load i64, ptr %index, align 8, !dbg !1578
  %eq13 = icmp eq i64 %19, %20, !dbg !1577
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1577

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1579
  br label %err_retblock, !dbg !1579

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1580, metadata !DIExpression()), !dbg !1581
  store i8 0, ptr %is_negative, align 1, !dbg !1581
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1582
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1582
  %22 = load ptr, ptr %string, align 8, !dbg !1582
  %23 = load i64, ptr %index, align 8, !dbg !1584
  %ge = icmp uge i64 %23, %21, !dbg !1584
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1584
  br i1 %24, label %panic, label %checkok, !dbg !1584

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1584
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case20
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit18, !dbg !1585

if.exit18:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1587
  %27 = load i64, ptr %index, align 8, !dbg !1588
  %add19 = add i64 %27, 1, !dbg !1588
  store i64 %add19, ptr %index, align 8, !dbg !1588
  br label %switch.exit, !dbg !1588

switch.case20:                                    ; preds = %switch.entry
  %28 = load i64, ptr %index, align 8, !dbg !1589
  %add21 = add i64 %28, 1, !dbg !1589
  store i64 %add21, ptr %index, align 8, !dbg !1589
  br label %switch.exit, !dbg !1589

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1591

switch.exit:                                      ; preds = %switch.default, %switch.case20, %if.exit18
  %29 = load i64, ptr %len, align 8, !dbg !1593
  %30 = load i64, ptr %index, align 8, !dbg !1594
  %eq22 = icmp eq i64 %29, %30, !dbg !1593
  br i1 %eq22, label %if.then23, label %if.exit24, !dbg !1593

if.then23:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1595
  br label %err_retblock, !dbg !1595

if.exit24:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1596, metadata !DIExpression()), !dbg !1597
  %31 = load i32, ptr %base1, align 4, !dbg !1598
  %trunc = trunc i32 %31 to i8, !dbg !1598
  store i8 %trunc, ptr %base_used, align 1, !dbg !1598
  %ptradd25 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1599
  %32 = load i64, ptr %ptradd25, align 8, !dbg !1599
  %33 = load ptr, ptr %string, align 8, !dbg !1599
  %34 = load i64, ptr %index, align 8, !dbg !1600
  %ge26 = icmp uge i64 %34, %32, !dbg !1600
  %35 = call i1 @llvm.expect.i1(i1 %ge26, i1 false), !dbg !1600
  br i1 %35, label %panic27, label %checkok34, !dbg !1600

checkok34:                                        ; preds = %if.exit24
  %ptradd35 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !1600
  %36 = load i8, ptr %ptradd35, align 1, !dbg !1600
  %eq36 = icmp eq i8 %36, 48, !dbg !1599
  br i1 %eq36, label %and.rhs37, label %and.phi39, !dbg !1599

and.rhs37:                                        ; preds = %checkok34
  %37 = load i32, ptr %base1, align 4, !dbg !1601
  %eq38 = icmp eq i32 %37, 10, !dbg !1601
  br label %and.phi39, !dbg !1601

and.phi39:                                        ; preds = %and.rhs37, %checkok34
  %val40 = phi i1 [ false, %checkok34 ], [ %eq38, %and.rhs37 ], !dbg !1601
  br i1 %val40, label %if.then41, label %if.exit70, !dbg !1601

if.then41:                                        ; preds = %and.phi39
  %38 = load i64, ptr %index, align 8, !dbg !1602
  %add42 = add i64 %38, 1, !dbg !1602
  store i64 %add42, ptr %index, align 8, !dbg !1602
  %39 = load i64, ptr %index, align 8, !dbg !1604
  %40 = load i64, ptr %len, align 8, !dbg !1605
  %eq43 = icmp eq i64 %39, %40, !dbg !1604
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !1604

if.then44:                                        ; preds = %if.then41
  store i8 0, ptr %blockret, align 1, !dbg !1606
  br label %expr_block.exit141, !dbg !1606

if.exit45:                                        ; preds = %if.then41
  %ptradd46 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1607
  %41 = load i64, ptr %ptradd46, align 8, !dbg !1607
  %42 = load ptr, ptr %string, align 8, !dbg !1607
  %43 = load i64, ptr %index, align 8, !dbg !1609
  %ge47 = icmp uge i64 %43, %41, !dbg !1609
  %44 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !1609
  br i1 %44, label %panic48, label %checkok55, !dbg !1609

checkok55:                                        ; preds = %if.exit45
  %ptradd56 = getelementptr inbounds i8, ptr %42, i64 %43, !dbg !1609
  %45 = load i8, ptr %ptradd56, align 1
  store i8 %45, ptr %switch57, align 1
  br label %switch.entry58

switch.entry58:                                   ; preds = %checkok55
  %46 = load i8, ptr %switch57, align 1
  switch i8 %46, label %switch.default65 [
    i8 120, label %switch.case59
    i8 88, label %switch.case59
    i8 98, label %switch.case61
    i8 66, label %switch.case61
    i8 111, label %switch.case63
    i8 79, label %switch.case63
  ]

switch.case59:                                    ; preds = %switch.entry58, %switch.entry58
  store i8 16, ptr %base_used, align 1, !dbg !1610
  %47 = load i64, ptr %index, align 8, !dbg !1612
  %add60 = add i64 %47, 1, !dbg !1612
  store i64 %add60, ptr %index, align 8, !dbg !1612
  br label %switch.exit66, !dbg !1612

switch.case61:                                    ; preds = %switch.entry58, %switch.entry58
  store i8 2, ptr %base_used, align 1, !dbg !1613
  %48 = load i64, ptr %index, align 8, !dbg !1615
  %add62 = add i64 %48, 1, !dbg !1615
  store i64 %add62, ptr %index, align 8, !dbg !1615
  br label %switch.exit66, !dbg !1615

switch.case63:                                    ; preds = %switch.entry58, %switch.entry58
  store i8 8, ptr %base_used, align 1, !dbg !1616
  %49 = load i64, ptr %index, align 8, !dbg !1618
  %add64 = add i64 %49, 1, !dbg !1618
  store i64 %add64, ptr %index, align 8, !dbg !1618
  br label %switch.exit66, !dbg !1618

switch.default65:                                 ; preds = %switch.entry58
  br label %switch.exit66, !dbg !1619

switch.exit66:                                    ; preds = %switch.default65, %switch.case63, %switch.case61, %switch.case59
  %50 = load i64, ptr %len, align 8, !dbg !1621
  %51 = load i64, ptr %index, align 8, !dbg !1622
  %eq67 = icmp eq i64 %50, %51, !dbg !1621
  br i1 %eq67, label %if.then68, label %if.exit69, !dbg !1621

if.then68:                                        ; preds = %switch.exit66
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1623
  br label %err_retblock, !dbg !1623

if.exit69:                                        ; preds = %switch.exit66
  br label %if.exit70, !dbg !1623

if.exit70:                                        ; preds = %if.exit69, %and.phi39
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1624, metadata !DIExpression()), !dbg !1625
  store i8 0, ptr %value, align 1, !dbg !1626
  br label %loop.cond71, !dbg !1627

loop.cond71:                                      ; preds = %noerr_block139, %if.exit70
  %52 = load i64, ptr %index, align 8, !dbg !1628
  %53 = load i64, ptr %len, align 8, !dbg !1630
  %neq = icmp ne i64 %52, %53, !dbg !1628
  br i1 %neq, label %loop.body72, label %loop.exit140, !dbg !1628

loop.body72:                                      ; preds = %loop.cond71
  call void @llvm.dbg.declare(metadata ptr %c73, metadata !1631, metadata !DIExpression()), !dbg !1633
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1634, metadata !DIExpression()), !dbg !1636
  %ptradd75 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1637
  %54 = load i64, ptr %ptradd75, align 8, !dbg !1637
  %55 = load ptr, ptr %string, align 8, !dbg !1637
  %56 = load i64, ptr %index, align 8, !dbg !1638
  %add76 = add i64 %56, 1, !dbg !1638
  store i64 %add76, ptr %index, align 8, !dbg !1638
  %ge77 = icmp uge i64 %56, %54, !dbg !1638
  %57 = call i1 @llvm.expect.i1(i1 %ge77, i1 false), !dbg !1638
  br i1 %57, label %panic78, label %checkok85, !dbg !1638

checkok85:                                        ; preds = %loop.body72
  %ptradd86 = getelementptr inbounds i8, ptr %55, i64 %56, !dbg !1638
  %58 = load i8, ptr %ptradd86, align 1, !dbg !1638
  store i8 %58, ptr %ch, align 1, !dbg !1638
  %59 = load i8, ptr %base_used, align 1, !dbg !1639
  %sext = sext i8 %59 to i32, !dbg !1639
  %neq87 = icmp ne i32 %sext, 16, !dbg !1639
  br i1 %neq87, label %or.phi90, label %or.rhs88, !dbg !1639

or.rhs88:                                         ; preds = %checkok85
  %60 = load i8, ptr %ch, align 1, !dbg !1640
  %lt89 = icmp ult i8 %60, 65, !dbg !1640
  br label %or.phi90, !dbg !1640

or.phi90:                                         ; preds = %or.rhs88, %checkok85
  %val91 = phi i1 [ true, %checkok85 ], [ %lt89, %or.rhs88 ], !dbg !1640
  br i1 %val91, label %if.then92, label %if.exit94, !dbg !1640

if.then92:                                        ; preds = %or.phi90
  %61 = load i8, ptr %ch, align 1, !dbg !1641
  %zext = zext i8 %61 to i32, !dbg !1641
  %sub = sub i32 %zext, 48, !dbg !1642
  %trunc93 = trunc i32 %sub to i8, !dbg !1642
  store i8 %trunc93, ptr %blockret74, align 1, !dbg !1642
  br label %expr_block.exit, !dbg !1642

if.exit94:                                        ; preds = %or.phi90
  %62 = load i8, ptr %ch, align 1, !dbg !1643
  %le95 = icmp ule i8 %62, 70, !dbg !1643
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !1643

if.then96:                                        ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !1644
  %zext97 = zext i8 %63 to i32, !dbg !1644
  %sub98 = sub i32 %zext97, 65, !dbg !1644
  %add99 = add i32 %sub98, 10, !dbg !1645
  %trunc100 = trunc i32 %add99 to i8, !dbg !1645
  store i8 %trunc100, ptr %blockret74, align 1, !dbg !1645
  br label %expr_block.exit, !dbg !1645

if.exit101:                                       ; preds = %if.exit94
  %64 = load i8, ptr %ch, align 1, !dbg !1646
  %lt102 = icmp ult i8 %64, 97, !dbg !1646
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !1646

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1647
  br label %guard_block, !dbg !1647

if.exit104:                                       ; preds = %if.exit101
  %65 = load i8, ptr %ch, align 1, !dbg !1648
  %gt105 = icmp ugt i8 %65, 102, !dbg !1648
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !1648

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1649
  br label %guard_block, !dbg !1649

if.exit107:                                       ; preds = %if.exit104
  %66 = load i8, ptr %ch, align 1, !dbg !1650
  %zext108 = zext i8 %66 to i32, !dbg !1650
  %sub109 = sub i32 %zext108, 97, !dbg !1650
  %add110 = add i32 %sub109, 10, !dbg !1651
  %trunc111 = trunc i32 %add110 to i8, !dbg !1651
  store i8 %trunc111, ptr %blockret74, align 1, !dbg !1651
  br label %expr_block.exit, !dbg !1651

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then92
  br label %noerr_block, !dbg !1651

guard_block:                                      ; preds = %if.then106, %if.then103
  %67 = load i64, ptr %error_var, align 8, !dbg !1651
  store i64 %67, ptr %reterr, align 8, !dbg !1651
  br label %err_retblock, !dbg !1651

noerr_block:                                      ; preds = %expr_block.exit
  %68 = load i8, ptr %blockret74, align 1, !dbg !1651
  store i8 %68, ptr %c73, align 1, !dbg !1651
  %69 = load i8, ptr %c73, align 1, !dbg !1652
  %70 = load i8, ptr %base_used, align 1, !dbg !1653
  %le112 = icmp sle i8 %70, %69, !dbg !1652
  %check = icmp slt i8 %69, 0, !dbg !1652
  %siui-le = or i1 %check, %le112, !dbg !1652
  br i1 %siui-le, label %if.then113, label %if.exit114, !dbg !1652

if.then113:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1654
  br label %err_retblock, !dbg !1654

if.exit114:                                       ; preds = %noerr_block
  %71 = load i8, ptr %is_negative, align 1, !dbg !1655
  %72 = trunc i8 %71 to i1, !dbg !1655
  br i1 %72, label %if.then117, label %if.exit126, !dbg !1655

if.then117:                                       ; preds = %if.exit114
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1657, metadata !DIExpression()), !dbg !1659
  %73 = load i8, ptr %value, align 1, !dbg !1660
  %sext118 = sext i8 %73 to i32, !dbg !1660
  %74 = load i8, ptr %base_used, align 1, !dbg !1661
  %sext119 = sext i8 %74 to i32, !dbg !1661
  %mul = mul i32 %sext118, %sext119, !dbg !1660
  %75 = load i8, ptr %c73, align 1, !dbg !1662
  %zext120 = zext i8 %75 to i32, !dbg !1662
  %sub121 = sub i32 %mul, %zext120, !dbg !1660
  %trunc122 = trunc i32 %sub121 to i8, !dbg !1660
  store i8 %trunc122, ptr %new_value, align 1, !dbg !1660
  %76 = load i8, ptr %new_value, align 1, !dbg !1663
  %77 = load i8, ptr %value, align 1, !dbg !1664
  %gt123 = icmp sgt i8 %76, %77, !dbg !1663
  br i1 %gt123, label %if.then124, label %if.exit125, !dbg !1663

if.then124:                                       ; preds = %if.then117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1665
  br label %guard_block138, !dbg !1665

if.exit125:                                       ; preds = %if.then117
  %78 = load i8, ptr %new_value, align 1, !dbg !1666
  store i8 %78, ptr %blockret116, align 1, !dbg !1666
  br label %expr_block.exit137, !dbg !1666

if.exit126:                                       ; preds = %if.exit114
  call void @llvm.dbg.declare(metadata ptr %new_value127, metadata !1667, metadata !DIExpression()), !dbg !1668
  %79 = load i8, ptr %value, align 1, !dbg !1669
  %sext128 = sext i8 %79 to i32, !dbg !1669
  %80 = load i8, ptr %base_used, align 1, !dbg !1670
  %sext129 = sext i8 %80 to i32, !dbg !1670
  %mul130 = mul i32 %sext128, %sext129, !dbg !1669
  %81 = load i8, ptr %c73, align 1, !dbg !1671
  %zext131 = zext i8 %81 to i32, !dbg !1671
  %add132 = add i32 %mul130, %zext131, !dbg !1669
  %trunc133 = trunc i32 %add132 to i8, !dbg !1669
  store i8 %trunc133, ptr %new_value127, align 1, !dbg !1669
  %82 = load i8, ptr %new_value127, align 1, !dbg !1672
  %83 = load i8, ptr %value, align 1, !dbg !1673
  %lt134 = icmp slt i8 %82, %83, !dbg !1672
  br i1 %lt134, label %if.then135, label %if.exit136, !dbg !1672

if.then135:                                       ; preds = %if.exit126
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var115, align 8, !dbg !1674
  br label %guard_block138, !dbg !1674

if.exit136:                                       ; preds = %if.exit126
  %84 = load i8, ptr %new_value127, align 1, !dbg !1675
  store i8 %84, ptr %blockret116, align 1, !dbg !1675
  br label %expr_block.exit137, !dbg !1675

expr_block.exit137:                               ; preds = %if.exit136, %if.exit125
  br label %noerr_block139, !dbg !1675

guard_block138:                                   ; preds = %if.then135, %if.then124
  %85 = load i64, ptr %error_var115, align 8, !dbg !1675
  store i64 %85, ptr %reterr, align 8, !dbg !1675
  br label %err_retblock, !dbg !1675

noerr_block139:                                   ; preds = %expr_block.exit137
  %86 = load i8, ptr %blockret116, align 1, !dbg !1675
  store i8 %86, ptr %value, align 1, !dbg !1675
  br label %loop.cond71, !dbg !1675

loop.exit140:                                     ; preds = %loop.cond71
  %87 = load i8, ptr %value, align 1, !dbg !1676
  store i8 %87, ptr %blockret, align 1, !dbg !1676
  br label %expr_block.exit141, !dbg !1676

expr_block.exit141:                               ; preds = %loop.exit140, %if.then44
  %88 = load i8, ptr %blockret, align 1, !dbg !1676
  store i8 %88, ptr %0, align 1, !dbg !1676
  ret i64 0, !dbg !1676

err_retblock:                                     ; preds = %guard_block138, %if.then113, %guard_block, %if.then68, %if.then23, %if.then
  %89 = load i64, ptr %reterr, align 8, !dbg !1676
  ret i64 %89, !dbg !1676

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %90 = insertvalue %any undef, ptr %taddr, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %92 = insertvalue %any undef, ptr %taddr15, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.64, i64 8, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1584
  unreachable, !dbg !1584

panic27:                                          ; preds = %if.exit24
  store i64 %32, ptr %taddr28, align 8
  %95 = insertvalue %any undef, ptr %taddr28, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr29, align 8
  %97 = insertvalue %any undef, ptr %taddr29, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %98, ptr %ptradd31, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.64, i64 8, i32 655, ptr byval(%"any[]") align 8 %indirectarg33), !dbg !1600
  unreachable, !dbg !1600

panic48:                                          ; preds = %if.exit45
  store i64 %41, ptr %taddr49, align 8
  %100 = insertvalue %any undef, ptr %taddr49, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr50, align 8
  %102 = insertvalue %any undef, ptr %taddr50, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %103, ptr %ptradd52, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.64, i64 8, i32 659, ptr byval(%"any[]") align 8 %indirectarg54), !dbg !1609
  unreachable, !dbg !1609

panic78:                                          ; preds = %loop.body72
  store i64 %54, ptr %taddr79, align 8
  %105 = insertvalue %any undef, ptr %taddr79, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr80, align 8
  %107 = insertvalue %any undef, ptr %taddr80, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %108, ptr %ptradd82, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.64, i64 8, i32 682, ptr byval(%"any[]") align 8 %indirectarg84), !dbg !1638
  unreachable, !dbg !1638
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uint128(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1677 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i128, align 8
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var116 = alloca i64, align 8
  %blockret117 = alloca i128, align 8
  %new_value = alloca i128, align 8
  %new_value125 = alloca i128, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1682, metadata !DIExpression()), !dbg !1683
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1684, metadata !DIExpression()), !dbg !1685
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1686
  %le = icmp sle i32 %5, 10, !dbg !1686
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1686

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1690
  %gt = icmp sgt i32 %6, 1, !dbg !1690
  br label %and.phi, !dbg !1690

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1690
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1690

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1691
  %eq = icmp eq i32 %7, 16, !dbg !1691
  br label %or.phi, !dbg !1691

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1691
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1691

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1686
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.65, i64 10, i32 632), !dbg !1686
  unreachable, !dbg !1686

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1692, metadata !DIExpression()), !dbg !1693
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1694
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1694
  store i64 %9, ptr %len, align 8, !dbg !1694
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1695, metadata !DIExpression()), !dbg !1696
  store i64 0, ptr %index, align 8, !dbg !1697
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1698, metadata !DIExpression()), !dbg !1699
  %10 = load ptr, ptr %string, align 8, !dbg !1700
  store ptr %10, ptr %ptr, align 8, !dbg !1700
  br label %loop.cond, !dbg !1701

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1702
  %12 = load i64, ptr %len, align 8, !dbg !1704
  %lt = icmp ult i64 %11, %12, !dbg !1702
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1702

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1705
  %14 = load i64, ptr %index, align 8, !dbg !1706
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1706
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1707
  %eq6 = icmp eq i8 %16, 32, !dbg !1707
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1707

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1710
  %eq8 = icmp eq i8 %17, 9, !dbg !1710
  br label %or.phi9, !dbg !1710

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1710
  br label %and.phi11, !dbg !1710

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1710
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1710

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1711
  %add = add i64 %18, 1, !dbg !1711
  store i64 %add, ptr %index, align 8, !dbg !1711
  br label %loop.cond, !dbg !1711

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1712
  %20 = load i64, ptr %index, align 8, !dbg !1713
  %eq13 = icmp eq i64 %19, %20, !dbg !1712
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1712

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1714
  br label %err_retblock, !dbg !1714

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1715, metadata !DIExpression()), !dbg !1716
  store i8 0, ptr %is_negative, align 1, !dbg !1716
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1717
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1717
  %22 = load ptr, ptr %string, align 8, !dbg !1717
  %23 = load i64, ptr %index, align 8, !dbg !1719
  %ge = icmp uge i64 %23, %21, !dbg !1719
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1719
  br i1 %24, label %panic, label %checkok, !dbg !1719

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1719
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !1720

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1722
  br label %err_retblock, !dbg !1722

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1723
  %add22 = add i64 %27, 1, !dbg !1723
  store i64 %add22, ptr %index, align 8, !dbg !1723
  br label %switch.exit, !dbg !1723

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1725

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !1727
  %29 = load i64, ptr %index, align 8, !dbg !1728
  %eq23 = icmp eq i64 %28, %29, !dbg !1727
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !1727

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1729
  br label %err_retblock, !dbg !1729

if.exit25:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1730, metadata !DIExpression()), !dbg !1731
  %30 = load i32, ptr %base1, align 4, !dbg !1732
  %sext = sext i32 %30 to i128, !dbg !1732
  store i128 %sext, ptr %base_used, align 8, !dbg !1732
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1733
  %31 = load i64, ptr %ptradd26, align 8, !dbg !1733
  %32 = load ptr, ptr %string, align 8, !dbg !1733
  %33 = load i64, ptr %index, align 8, !dbg !1734
  %ge27 = icmp uge i64 %33, %31, !dbg !1734
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !1734
  br i1 %34, label %panic28, label %checkok35, !dbg !1734

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1734
  %35 = load i8, ptr %ptradd36, align 1, !dbg !1734
  %eq37 = icmp eq i8 %35, 48, !dbg !1733
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !1733

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !1735
  %eq39 = icmp eq i32 %36, 10, !dbg !1735
  br label %and.phi40, !dbg !1735

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !1735
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !1735

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !1736
  %add43 = add i64 %37, 1, !dbg !1736
  store i64 %add43, ptr %index, align 8, !dbg !1736
  %38 = load i64, ptr %index, align 8, !dbg !1738
  %39 = load i64, ptr %len, align 8, !dbg !1739
  %eq44 = icmp eq i64 %38, %39, !dbg !1738
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !1738

if.then45:                                        ; preds = %if.then42
  store i128 0, ptr %blockret, align 8, !dbg !1740
  br label %expr_block.exit136, !dbg !1740

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1741
  %40 = load i64, ptr %ptradd47, align 8, !dbg !1741
  %41 = load ptr, ptr %string, align 8, !dbg !1741
  %42 = load i64, ptr %index, align 8, !dbg !1743
  %ge48 = icmp uge i64 %42, %40, !dbg !1743
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !1743
  br i1 %43, label %panic49, label %checkok56, !dbg !1743

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1743
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i128 16, ptr %base_used, align 8, !dbg !1744
  %46 = load i64, ptr %index, align 8, !dbg !1746
  %add61 = add i64 %46, 1, !dbg !1746
  store i64 %add61, ptr %index, align 8, !dbg !1746
  br label %switch.exit67, !dbg !1746

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i128 2, ptr %base_used, align 8, !dbg !1747
  %47 = load i64, ptr %index, align 8, !dbg !1749
  %add63 = add i64 %47, 1, !dbg !1749
  store i64 %add63, ptr %index, align 8, !dbg !1749
  br label %switch.exit67, !dbg !1749

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i128 8, ptr %base_used, align 8, !dbg !1750
  %48 = load i64, ptr %index, align 8, !dbg !1752
  %add65 = add i64 %48, 1, !dbg !1752
  store i64 %add65, ptr %index, align 8, !dbg !1752
  br label %switch.exit67, !dbg !1752

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !1753

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !1755
  %50 = load i64, ptr %index, align 8, !dbg !1756
  %eq68 = icmp eq i64 %49, %50, !dbg !1755
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !1755

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1757
  br label %err_retblock, !dbg !1757

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !1757

if.exit71:                                        ; preds = %if.exit70, %and.phi40
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1758, metadata !DIExpression()), !dbg !1759
  store i128 0, ptr %value, align 8, !dbg !1760
  br label %loop.cond72, !dbg !1761

loop.cond72:                                      ; preds = %noerr_block134, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !1762
  %52 = load i64, ptr %len, align 8, !dbg !1764
  %neq = icmp ne i64 %51, %52, !dbg !1762
  br i1 %neq, label %loop.body73, label %loop.exit135, !dbg !1762

loop.body73:                                      ; preds = %loop.cond72
  call void @llvm.dbg.declare(metadata ptr %c74, metadata !1765, metadata !DIExpression()), !dbg !1767
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1768, metadata !DIExpression()), !dbg !1770
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1771
  %53 = load i64, ptr %ptradd76, align 8, !dbg !1771
  %54 = load ptr, ptr %string, align 8, !dbg !1771
  %55 = load i64, ptr %index, align 8, !dbg !1772
  %add77 = add i64 %55, 1, !dbg !1772
  store i64 %add77, ptr %index, align 8, !dbg !1772
  %ge78 = icmp uge i64 %55, %53, !dbg !1772
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !1772
  br i1 %56, label %panic79, label %checkok86, !dbg !1772

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1772
  %57 = load i8, ptr %ptradd87, align 1, !dbg !1772
  store i8 %57, ptr %ch, align 1, !dbg !1772
  %58 = load i128, ptr %base_used, align 8, !dbg !1773
  %neq88 = icmp ne i128 16, %58, !dbg !1773
  %siui-ne = or i1 false, %neq88, !dbg !1773
  br i1 %siui-ne, label %or.phi91, label %or.rhs89, !dbg !1773

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !1774
  %lt90 = icmp ult i8 %59, 65, !dbg !1774
  br label %or.phi91, !dbg !1774

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !1774
  br i1 %val92, label %if.then93, label %if.exit94, !dbg !1774

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !1775
  %zext = zext i8 %60 to i32, !dbg !1775
  %sub = sub i32 %zext, 48, !dbg !1776
  %trunc = trunc i32 %sub to i8, !dbg !1776
  store i8 %trunc, ptr %blockret75, align 1, !dbg !1776
  br label %expr_block.exit, !dbg !1776

if.exit94:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !1777
  %le95 = icmp ule i8 %61, 70, !dbg !1777
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !1777

if.then96:                                        ; preds = %if.exit94
  %62 = load i8, ptr %ch, align 1, !dbg !1778
  %zext97 = zext i8 %62 to i32, !dbg !1778
  %sub98 = sub i32 %zext97, 65, !dbg !1778
  %add99 = add i32 %sub98, 10, !dbg !1779
  %trunc100 = trunc i32 %add99 to i8, !dbg !1779
  store i8 %trunc100, ptr %blockret75, align 1, !dbg !1779
  br label %expr_block.exit, !dbg !1779

if.exit101:                                       ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !1780
  %lt102 = icmp ult i8 %63, 97, !dbg !1780
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !1780

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1781
  br label %guard_block, !dbg !1781

if.exit104:                                       ; preds = %if.exit101
  %64 = load i8, ptr %ch, align 1, !dbg !1782
  %gt105 = icmp ugt i8 %64, 102, !dbg !1782
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !1782

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1783
  br label %guard_block, !dbg !1783

if.exit107:                                       ; preds = %if.exit104
  %65 = load i8, ptr %ch, align 1, !dbg !1784
  %zext108 = zext i8 %65 to i32, !dbg !1784
  %sub109 = sub i32 %zext108, 97, !dbg !1784
  %add110 = add i32 %sub109, 10, !dbg !1785
  %trunc111 = trunc i32 %add110 to i8, !dbg !1785
  store i8 %trunc111, ptr %blockret75, align 1, !dbg !1785
  br label %expr_block.exit, !dbg !1785

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then93
  br label %noerr_block, !dbg !1785

guard_block:                                      ; preds = %if.then106, %if.then103
  %66 = load i64, ptr %error_var, align 8, !dbg !1785
  store i64 %66, ptr %reterr, align 8, !dbg !1785
  br label %err_retblock, !dbg !1785

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !1785
  store i8 %67, ptr %c74, align 1, !dbg !1785
  %68 = load i8, ptr %c74, align 1, !dbg !1786
  %zext112 = zext i8 %68 to i128, !dbg !1786
  %69 = load i128, ptr %base_used, align 8, !dbg !1787
  %ge113 = icmp uge i128 %zext112, %69, !dbg !1786
  br i1 %ge113, label %if.then114, label %if.exit115, !dbg !1786

if.then114:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1788
  br label %err_retblock, !dbg !1788

if.exit115:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1789
  %71 = trunc i8 %70 to i1, !dbg !1789
  br i1 %71, label %if.then118, label %if.exit124, !dbg !1789

if.then118:                                       ; preds = %if.exit115
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1791, metadata !DIExpression()), !dbg !1793
  %72 = load i128, ptr %value, align 8, !dbg !1794
  %73 = load i128, ptr %base_used, align 8, !dbg !1795
  %mul = mul i128 %72, %73, !dbg !1794
  %74 = load i8, ptr %c74, align 1, !dbg !1796
  %zext119 = zext i8 %74 to i128, !dbg !1796
  %sub120 = sub i128 %mul, %zext119, !dbg !1794
  store i128 %sub120, ptr %new_value, align 8, !dbg !1794
  %75 = load i128, ptr %new_value, align 8, !dbg !1797
  %76 = load i128, ptr %value, align 8, !dbg !1798
  %gt121 = icmp ugt i128 %75, %76, !dbg !1797
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !1797

if.then122:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1799
  br label %guard_block133, !dbg !1799

if.exit123:                                       ; preds = %if.then118
  %77 = load i128, ptr %new_value, align 8, !dbg !1800
  store i128 %77, ptr %blockret117, align 8, !dbg !1800
  br label %expr_block.exit132, !dbg !1800

if.exit124:                                       ; preds = %if.exit115
  call void @llvm.dbg.declare(metadata ptr %new_value125, metadata !1801, metadata !DIExpression()), !dbg !1802
  %78 = load i128, ptr %value, align 8, !dbg !1803
  %79 = load i128, ptr %base_used, align 8, !dbg !1804
  %mul126 = mul i128 %78, %79, !dbg !1803
  %80 = load i8, ptr %c74, align 1, !dbg !1805
  %zext127 = zext i8 %80 to i128, !dbg !1805
  %add128 = add i128 %mul126, %zext127, !dbg !1803
  store i128 %add128, ptr %new_value125, align 8, !dbg !1803
  %81 = load i128, ptr %new_value125, align 8, !dbg !1806
  %82 = load i128, ptr %value, align 8, !dbg !1807
  %lt129 = icmp ult i128 %81, %82, !dbg !1806
  br i1 %lt129, label %if.then130, label %if.exit131, !dbg !1806

if.then130:                                       ; preds = %if.exit124
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1808
  br label %guard_block133, !dbg !1808

if.exit131:                                       ; preds = %if.exit124
  %83 = load i128, ptr %new_value125, align 8, !dbg !1809
  store i128 %83, ptr %blockret117, align 8, !dbg !1809
  br label %expr_block.exit132, !dbg !1809

expr_block.exit132:                               ; preds = %if.exit131, %if.exit123
  br label %noerr_block134, !dbg !1809

guard_block133:                                   ; preds = %if.then130, %if.then122
  %84 = load i64, ptr %error_var116, align 8, !dbg !1809
  store i64 %84, ptr %reterr, align 8, !dbg !1809
  br label %err_retblock, !dbg !1809

noerr_block134:                                   ; preds = %expr_block.exit132
  %85 = load i128, ptr %blockret117, align 8, !dbg !1809
  store i128 %85, ptr %value, align 8, !dbg !1809
  br label %loop.cond72, !dbg !1809

loop.exit135:                                     ; preds = %loop.cond72
  %86 = load i128, ptr %value, align 8, !dbg !1810
  store i128 %86, ptr %blockret, align 8, !dbg !1810
  br label %expr_block.exit136, !dbg !1810

expr_block.exit136:                               ; preds = %loop.exit135, %if.then45
  %87 = load i128, ptr %blockret, align 8, !dbg !1810
  store i128 %87, ptr %0, align 8, !dbg !1810
  ret i64 0, !dbg !1810

err_retblock:                                     ; preds = %guard_block133, %if.then114, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1810
  ret i64 %88, !dbg !1810

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.65, i64 10, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1719
  unreachable, !dbg !1719

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.65, i64 10, i32 655, ptr byval(%"any[]") align 8 %indirectarg34), !dbg !1734
  unreachable, !dbg !1734

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.65, i64 10, i32 659, ptr byval(%"any[]") align 8 %indirectarg55), !dbg !1743
  unreachable, !dbg !1743

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.65, i64 10, i32 682, ptr byval(%"any[]") align 8 %indirectarg85), !dbg !1772
  unreachable, !dbg !1772
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ulong(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1811 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i64, align 8
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var116 = alloca i64, align 8
  %blockret117 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value125 = alloca i64, align 8
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1815, metadata !DIExpression()), !dbg !1816
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1817, metadata !DIExpression()), !dbg !1818
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1819
  %le = icmp sle i32 %5, 10, !dbg !1819
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1819

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1823
  %gt = icmp sgt i32 %6, 1, !dbg !1823
  br label %and.phi, !dbg !1823

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1823
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1823

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1824
  %eq = icmp eq i32 %7, 16, !dbg !1824
  br label %or.phi, !dbg !1824

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1824
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1824

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1819
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.66, i64 8, i32 632), !dbg !1819
  unreachable, !dbg !1819

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1825, metadata !DIExpression()), !dbg !1826
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1827
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1827
  store i64 %9, ptr %len, align 8, !dbg !1827
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1828, metadata !DIExpression()), !dbg !1829
  store i64 0, ptr %index, align 8, !dbg !1830
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1831, metadata !DIExpression()), !dbg !1832
  %10 = load ptr, ptr %string, align 8, !dbg !1833
  store ptr %10, ptr %ptr, align 8, !dbg !1833
  br label %loop.cond, !dbg !1834

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1835
  %12 = load i64, ptr %len, align 8, !dbg !1837
  %lt = icmp ult i64 %11, %12, !dbg !1835
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1835

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1838
  %14 = load i64, ptr %index, align 8, !dbg !1839
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1839
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1840
  %eq6 = icmp eq i8 %16, 32, !dbg !1840
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1840

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1843
  %eq8 = icmp eq i8 %17, 9, !dbg !1843
  br label %or.phi9, !dbg !1843

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1843
  br label %and.phi11, !dbg !1843

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1843
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1843

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1844
  %add = add i64 %18, 1, !dbg !1844
  store i64 %add, ptr %index, align 8, !dbg !1844
  br label %loop.cond, !dbg !1844

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1845
  %20 = load i64, ptr %index, align 8, !dbg !1846
  %eq13 = icmp eq i64 %19, %20, !dbg !1845
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1845

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1847
  br label %err_retblock, !dbg !1847

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1848, metadata !DIExpression()), !dbg !1849
  store i8 0, ptr %is_negative, align 1, !dbg !1849
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1850
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1850
  %22 = load ptr, ptr %string, align 8, !dbg !1850
  %23 = load i64, ptr %index, align 8, !dbg !1852
  %ge = icmp uge i64 %23, %21, !dbg !1852
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1852
  br i1 %24, label %panic, label %checkok, !dbg !1852

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1852
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !1853

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1855
  br label %err_retblock, !dbg !1855

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1856
  %add22 = add i64 %27, 1, !dbg !1856
  store i64 %add22, ptr %index, align 8, !dbg !1856
  br label %switch.exit, !dbg !1856

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1858

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !1860
  %29 = load i64, ptr %index, align 8, !dbg !1861
  %eq23 = icmp eq i64 %28, %29, !dbg !1860
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !1860

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1862
  br label %err_retblock, !dbg !1862

if.exit25:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1863, metadata !DIExpression()), !dbg !1864
  %30 = load i32, ptr %base1, align 4, !dbg !1865
  %sext = sext i32 %30 to i64, !dbg !1865
  store i64 %sext, ptr %base_used, align 8, !dbg !1865
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1866
  %31 = load i64, ptr %ptradd26, align 8, !dbg !1866
  %32 = load ptr, ptr %string, align 8, !dbg !1866
  %33 = load i64, ptr %index, align 8, !dbg !1867
  %ge27 = icmp uge i64 %33, %31, !dbg !1867
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !1867
  br i1 %34, label %panic28, label %checkok35, !dbg !1867

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1867
  %35 = load i8, ptr %ptradd36, align 1, !dbg !1867
  %eq37 = icmp eq i8 %35, 48, !dbg !1866
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !1866

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !1868
  %eq39 = icmp eq i32 %36, 10, !dbg !1868
  br label %and.phi40, !dbg !1868

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !1868
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !1868

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !1869
  %add43 = add i64 %37, 1, !dbg !1869
  store i64 %add43, ptr %index, align 8, !dbg !1869
  %38 = load i64, ptr %index, align 8, !dbg !1871
  %39 = load i64, ptr %len, align 8, !dbg !1872
  %eq44 = icmp eq i64 %38, %39, !dbg !1871
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !1871

if.then45:                                        ; preds = %if.then42
  store i64 0, ptr %blockret, align 8, !dbg !1873
  br label %expr_block.exit136, !dbg !1873

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1874
  %40 = load i64, ptr %ptradd47, align 8, !dbg !1874
  %41 = load ptr, ptr %string, align 8, !dbg !1874
  %42 = load i64, ptr %index, align 8, !dbg !1876
  %ge48 = icmp uge i64 %42, %40, !dbg !1876
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !1876
  br i1 %43, label %panic49, label %checkok56, !dbg !1876

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1876
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i64 16, ptr %base_used, align 8, !dbg !1877
  %46 = load i64, ptr %index, align 8, !dbg !1879
  %add61 = add i64 %46, 1, !dbg !1879
  store i64 %add61, ptr %index, align 8, !dbg !1879
  br label %switch.exit67, !dbg !1879

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i64 2, ptr %base_used, align 8, !dbg !1880
  %47 = load i64, ptr %index, align 8, !dbg !1882
  %add63 = add i64 %47, 1, !dbg !1882
  store i64 %add63, ptr %index, align 8, !dbg !1882
  br label %switch.exit67, !dbg !1882

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i64 8, ptr %base_used, align 8, !dbg !1883
  %48 = load i64, ptr %index, align 8, !dbg !1885
  %add65 = add i64 %48, 1, !dbg !1885
  store i64 %add65, ptr %index, align 8, !dbg !1885
  br label %switch.exit67, !dbg !1885

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !1886

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !1888
  %50 = load i64, ptr %index, align 8, !dbg !1889
  %eq68 = icmp eq i64 %49, %50, !dbg !1888
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !1888

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1890
  br label %err_retblock, !dbg !1890

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !1890

if.exit71:                                        ; preds = %if.exit70, %and.phi40
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1891, metadata !DIExpression()), !dbg !1892
  store i64 0, ptr %value, align 8, !dbg !1893
  br label %loop.cond72, !dbg !1894

loop.cond72:                                      ; preds = %noerr_block134, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !1895
  %52 = load i64, ptr %len, align 8, !dbg !1897
  %neq = icmp ne i64 %51, %52, !dbg !1895
  br i1 %neq, label %loop.body73, label %loop.exit135, !dbg !1895

loop.body73:                                      ; preds = %loop.cond72
  call void @llvm.dbg.declare(metadata ptr %c74, metadata !1898, metadata !DIExpression()), !dbg !1900
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1901, metadata !DIExpression()), !dbg !1903
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1904
  %53 = load i64, ptr %ptradd76, align 8, !dbg !1904
  %54 = load ptr, ptr %string, align 8, !dbg !1904
  %55 = load i64, ptr %index, align 8, !dbg !1905
  %add77 = add i64 %55, 1, !dbg !1905
  store i64 %add77, ptr %index, align 8, !dbg !1905
  %ge78 = icmp uge i64 %55, %53, !dbg !1905
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !1905
  br i1 %56, label %panic79, label %checkok86, !dbg !1905

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1905
  %57 = load i8, ptr %ptradd87, align 1, !dbg !1905
  store i8 %57, ptr %ch, align 1, !dbg !1905
  %58 = load i64, ptr %base_used, align 8, !dbg !1906
  %neq88 = icmp ne i64 16, %58, !dbg !1906
  br i1 %neq88, label %or.phi91, label %or.rhs89, !dbg !1906

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !1907
  %lt90 = icmp ult i8 %59, 65, !dbg !1907
  br label %or.phi91, !dbg !1907

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !1907
  br i1 %val92, label %if.then93, label %if.exit94, !dbg !1907

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !1908
  %zext = zext i8 %60 to i32, !dbg !1908
  %sub = sub i32 %zext, 48, !dbg !1909
  %trunc = trunc i32 %sub to i8, !dbg !1909
  store i8 %trunc, ptr %blockret75, align 1, !dbg !1909
  br label %expr_block.exit, !dbg !1909

if.exit94:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !1910
  %le95 = icmp ule i8 %61, 70, !dbg !1910
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !1910

if.then96:                                        ; preds = %if.exit94
  %62 = load i8, ptr %ch, align 1, !dbg !1911
  %zext97 = zext i8 %62 to i32, !dbg !1911
  %sub98 = sub i32 %zext97, 65, !dbg !1911
  %add99 = add i32 %sub98, 10, !dbg !1912
  %trunc100 = trunc i32 %add99 to i8, !dbg !1912
  store i8 %trunc100, ptr %blockret75, align 1, !dbg !1912
  br label %expr_block.exit, !dbg !1912

if.exit101:                                       ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !1913
  %lt102 = icmp ult i8 %63, 97, !dbg !1913
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !1913

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1914
  br label %guard_block, !dbg !1914

if.exit104:                                       ; preds = %if.exit101
  %64 = load i8, ptr %ch, align 1, !dbg !1915
  %gt105 = icmp ugt i8 %64, 102, !dbg !1915
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !1915

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1916
  br label %guard_block, !dbg !1916

if.exit107:                                       ; preds = %if.exit104
  %65 = load i8, ptr %ch, align 1, !dbg !1917
  %zext108 = zext i8 %65 to i32, !dbg !1917
  %sub109 = sub i32 %zext108, 97, !dbg !1917
  %add110 = add i32 %sub109, 10, !dbg !1918
  %trunc111 = trunc i32 %add110 to i8, !dbg !1918
  store i8 %trunc111, ptr %blockret75, align 1, !dbg !1918
  br label %expr_block.exit, !dbg !1918

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then93
  br label %noerr_block, !dbg !1918

guard_block:                                      ; preds = %if.then106, %if.then103
  %66 = load i64, ptr %error_var, align 8, !dbg !1918
  store i64 %66, ptr %reterr, align 8, !dbg !1918
  br label %err_retblock, !dbg !1918

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !1918
  store i8 %67, ptr %c74, align 1, !dbg !1918
  %68 = load i8, ptr %c74, align 1, !dbg !1919
  %zext112 = zext i8 %68 to i64, !dbg !1919
  %69 = load i64, ptr %base_used, align 8, !dbg !1920
  %ge113 = icmp uge i64 %zext112, %69, !dbg !1919
  br i1 %ge113, label %if.then114, label %if.exit115, !dbg !1919

if.then114:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1921
  br label %err_retblock, !dbg !1921

if.exit115:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1922
  %71 = trunc i8 %70 to i1, !dbg !1922
  br i1 %71, label %if.then118, label %if.exit124, !dbg !1922

if.then118:                                       ; preds = %if.exit115
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1924, metadata !DIExpression()), !dbg !1926
  %72 = load i64, ptr %value, align 8, !dbg !1927
  %73 = load i64, ptr %base_used, align 8, !dbg !1928
  %mul = mul i64 %72, %73, !dbg !1927
  %74 = load i8, ptr %c74, align 1, !dbg !1929
  %zext119 = zext i8 %74 to i64, !dbg !1929
  %sub120 = sub i64 %mul, %zext119, !dbg !1927
  store i64 %sub120, ptr %new_value, align 8, !dbg !1927
  %75 = load i64, ptr %new_value, align 8, !dbg !1930
  %76 = load i64, ptr %value, align 8, !dbg !1931
  %gt121 = icmp ugt i64 %75, %76, !dbg !1930
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !1930

if.then122:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1932
  br label %guard_block133, !dbg !1932

if.exit123:                                       ; preds = %if.then118
  %77 = load i64, ptr %new_value, align 8, !dbg !1933
  store i64 %77, ptr %blockret117, align 8, !dbg !1933
  br label %expr_block.exit132, !dbg !1933

if.exit124:                                       ; preds = %if.exit115
  call void @llvm.dbg.declare(metadata ptr %new_value125, metadata !1934, metadata !DIExpression()), !dbg !1935
  %78 = load i64, ptr %value, align 8, !dbg !1936
  %79 = load i64, ptr %base_used, align 8, !dbg !1937
  %mul126 = mul i64 %78, %79, !dbg !1936
  %80 = load i8, ptr %c74, align 1, !dbg !1938
  %zext127 = zext i8 %80 to i64, !dbg !1938
  %add128 = add i64 %mul126, %zext127, !dbg !1936
  store i64 %add128, ptr %new_value125, align 8, !dbg !1936
  %81 = load i64, ptr %new_value125, align 8, !dbg !1939
  %82 = load i64, ptr %value, align 8, !dbg !1940
  %lt129 = icmp ult i64 %81, %82, !dbg !1939
  br i1 %lt129, label %if.then130, label %if.exit131, !dbg !1939

if.then130:                                       ; preds = %if.exit124
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !1941
  br label %guard_block133, !dbg !1941

if.exit131:                                       ; preds = %if.exit124
  %83 = load i64, ptr %new_value125, align 8, !dbg !1942
  store i64 %83, ptr %blockret117, align 8, !dbg !1942
  br label %expr_block.exit132, !dbg !1942

expr_block.exit132:                               ; preds = %if.exit131, %if.exit123
  br label %noerr_block134, !dbg !1942

guard_block133:                                   ; preds = %if.then130, %if.then122
  %84 = load i64, ptr %error_var116, align 8, !dbg !1942
  store i64 %84, ptr %reterr, align 8, !dbg !1942
  br label %err_retblock, !dbg !1942

noerr_block134:                                   ; preds = %expr_block.exit132
  %85 = load i64, ptr %blockret117, align 8, !dbg !1942
  store i64 %85, ptr %value, align 8, !dbg !1942
  br label %loop.cond72, !dbg !1942

loop.exit135:                                     ; preds = %loop.cond72
  %86 = load i64, ptr %value, align 8, !dbg !1943
  store i64 %86, ptr %blockret, align 8, !dbg !1943
  br label %expr_block.exit136, !dbg !1943

expr_block.exit136:                               ; preds = %loop.exit135, %if.then45
  %87 = load i64, ptr %blockret, align 8, !dbg !1943
  store i64 %87, ptr %0, align 8, !dbg !1943
  ret i64 0, !dbg !1943

err_retblock:                                     ; preds = %guard_block133, %if.then114, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1943
  ret i64 %88, !dbg !1943

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.66, i64 8, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1852
  unreachable, !dbg !1852

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.66, i64 8, i32 655, ptr byval(%"any[]") align 8 %indirectarg34), !dbg !1867
  unreachable, !dbg !1867

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.66, i64 8, i32 659, ptr byval(%"any[]") align 8 %indirectarg55), !dbg !1876
  unreachable, !dbg !1876

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.66, i64 8, i32 682, ptr byval(%"any[]") align 8 %indirectarg85), !dbg !1905
  unreachable, !dbg !1905
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uint(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !1944 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i32, align 4
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var116 = alloca i64, align 8
  %blockret117 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value125 = alloca i32, align 4
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1948, metadata !DIExpression()), !dbg !1949
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1950, metadata !DIExpression()), !dbg !1951
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !1952
  %le = icmp sle i32 %5, 10, !dbg !1952
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1952

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !1956
  %gt = icmp sgt i32 %6, 1, !dbg !1956
  br label %and.phi, !dbg !1956

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1956
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1956

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !1957
  %eq = icmp eq i32 %7, 16, !dbg !1957
  br label %or.phi, !dbg !1957

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1957
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1957

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1952
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.67, i64 7, i32 632), !dbg !1952
  unreachable, !dbg !1952

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1958, metadata !DIExpression()), !dbg !1959
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1960
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1960
  store i64 %9, ptr %len, align 8, !dbg !1960
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1961, metadata !DIExpression()), !dbg !1962
  store i64 0, ptr %index, align 8, !dbg !1963
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1964, metadata !DIExpression()), !dbg !1965
  %10 = load ptr, ptr %string, align 8, !dbg !1966
  store ptr %10, ptr %ptr, align 8, !dbg !1966
  br label %loop.cond, !dbg !1967

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !1968
  %12 = load i64, ptr %len, align 8, !dbg !1970
  %lt = icmp ult i64 %11, %12, !dbg !1968
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !1968

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !1971
  %14 = load i64, ptr %index, align 8, !dbg !1972
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !1972
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !1973
  %eq6 = icmp eq i8 %16, 32, !dbg !1973
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !1973

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !1976
  %eq8 = icmp eq i8 %17, 9, !dbg !1976
  br label %or.phi9, !dbg !1976

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !1976
  br label %and.phi11, !dbg !1976

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !1976
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !1976

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !1977
  %add = add i64 %18, 1, !dbg !1977
  store i64 %add, ptr %index, align 8, !dbg !1977
  br label %loop.cond, !dbg !1977

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !1978
  %20 = load i64, ptr %index, align 8, !dbg !1979
  %eq13 = icmp eq i64 %19, %20, !dbg !1978
  br i1 %eq13, label %if.then, label %if.exit, !dbg !1978

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1980
  br label %err_retblock, !dbg !1980

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1981, metadata !DIExpression()), !dbg !1982
  store i8 0, ptr %is_negative, align 1, !dbg !1982
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1983
  %21 = load i64, ptr %ptradd14, align 8, !dbg !1983
  %22 = load ptr, ptr %string, align 8, !dbg !1983
  %23 = load i64, ptr %index, align 8, !dbg !1985
  %ge = icmp uge i64 %23, %21, !dbg !1985
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1985
  br i1 %24, label %panic, label %checkok, !dbg !1985

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !1985
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !1986

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1988
  br label %err_retblock, !dbg !1988

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1989
  %add22 = add i64 %27, 1, !dbg !1989
  store i64 %add22, ptr %index, align 8, !dbg !1989
  br label %switch.exit, !dbg !1989

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1991

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !1993
  %29 = load i64, ptr %index, align 8, !dbg !1994
  %eq23 = icmp eq i64 %28, %29, !dbg !1993
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !1993

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1995
  br label %err_retblock, !dbg !1995

if.exit25:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1996, metadata !DIExpression()), !dbg !1997
  %30 = load i32, ptr %base1, align 4, !dbg !1998
  store i32 %30, ptr %base_used, align 4, !dbg !1998
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1999
  %31 = load i64, ptr %ptradd26, align 8, !dbg !1999
  %32 = load ptr, ptr %string, align 8, !dbg !1999
  %33 = load i64, ptr %index, align 8, !dbg !2000
  %ge27 = icmp uge i64 %33, %31, !dbg !2000
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !2000
  br i1 %34, label %panic28, label %checkok35, !dbg !2000

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !2000
  %35 = load i8, ptr %ptradd36, align 1, !dbg !2000
  %eq37 = icmp eq i8 %35, 48, !dbg !1999
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !1999

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !2001
  %eq39 = icmp eq i32 %36, 10, !dbg !2001
  br label %and.phi40, !dbg !2001

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !2001
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !2001

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !2002
  %add43 = add i64 %37, 1, !dbg !2002
  store i64 %add43, ptr %index, align 8, !dbg !2002
  %38 = load i64, ptr %index, align 8, !dbg !2004
  %39 = load i64, ptr %len, align 8, !dbg !2005
  %eq44 = icmp eq i64 %38, %39, !dbg !2004
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !2004

if.then45:                                        ; preds = %if.then42
  store i32 0, ptr %blockret, align 4, !dbg !2006
  br label %expr_block.exit136, !dbg !2006

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2007
  %40 = load i64, ptr %ptradd47, align 8, !dbg !2007
  %41 = load ptr, ptr %string, align 8, !dbg !2007
  %42 = load i64, ptr %index, align 8, !dbg !2009
  %ge48 = icmp uge i64 %42, %40, !dbg !2009
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !2009
  br i1 %43, label %panic49, label %checkok56, !dbg !2009

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !2009
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i32 16, ptr %base_used, align 4, !dbg !2010
  %46 = load i64, ptr %index, align 8, !dbg !2012
  %add61 = add i64 %46, 1, !dbg !2012
  store i64 %add61, ptr %index, align 8, !dbg !2012
  br label %switch.exit67, !dbg !2012

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i32 2, ptr %base_used, align 4, !dbg !2013
  %47 = load i64, ptr %index, align 8, !dbg !2015
  %add63 = add i64 %47, 1, !dbg !2015
  store i64 %add63, ptr %index, align 8, !dbg !2015
  br label %switch.exit67, !dbg !2015

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i32 8, ptr %base_used, align 4, !dbg !2016
  %48 = load i64, ptr %index, align 8, !dbg !2018
  %add65 = add i64 %48, 1, !dbg !2018
  store i64 %add65, ptr %index, align 8, !dbg !2018
  br label %switch.exit67, !dbg !2018

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !2019

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !2021
  %50 = load i64, ptr %index, align 8, !dbg !2022
  %eq68 = icmp eq i64 %49, %50, !dbg !2021
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !2021

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2023
  br label %err_retblock, !dbg !2023

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !2023

if.exit71:                                        ; preds = %if.exit70, %and.phi40
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2024, metadata !DIExpression()), !dbg !2025
  store i32 0, ptr %value, align 4, !dbg !2026
  br label %loop.cond72, !dbg !2027

loop.cond72:                                      ; preds = %noerr_block134, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !2028
  %52 = load i64, ptr %len, align 8, !dbg !2030
  %neq = icmp ne i64 %51, %52, !dbg !2028
  br i1 %neq, label %loop.body73, label %loop.exit135, !dbg !2028

loop.body73:                                      ; preds = %loop.cond72
  call void @llvm.dbg.declare(metadata ptr %c74, metadata !2031, metadata !DIExpression()), !dbg !2033
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2034, metadata !DIExpression()), !dbg !2036
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2037
  %53 = load i64, ptr %ptradd76, align 8, !dbg !2037
  %54 = load ptr, ptr %string, align 8, !dbg !2037
  %55 = load i64, ptr %index, align 8, !dbg !2038
  %add77 = add i64 %55, 1, !dbg !2038
  store i64 %add77, ptr %index, align 8, !dbg !2038
  %ge78 = icmp uge i64 %55, %53, !dbg !2038
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !2038
  br i1 %56, label %panic79, label %checkok86, !dbg !2038

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !2038
  %57 = load i8, ptr %ptradd87, align 1, !dbg !2038
  store i8 %57, ptr %ch, align 1, !dbg !2038
  %58 = load i32, ptr %base_used, align 4, !dbg !2039
  %neq88 = icmp ne i32 16, %58, !dbg !2039
  br i1 %neq88, label %or.phi91, label %or.rhs89, !dbg !2039

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !2040
  %lt90 = icmp ult i8 %59, 65, !dbg !2040
  br label %or.phi91, !dbg !2040

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !2040
  br i1 %val92, label %if.then93, label %if.exit94, !dbg !2040

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !2041
  %zext = zext i8 %60 to i32, !dbg !2041
  %sub = sub i32 %zext, 48, !dbg !2042
  %trunc = trunc i32 %sub to i8, !dbg !2042
  store i8 %trunc, ptr %blockret75, align 1, !dbg !2042
  br label %expr_block.exit, !dbg !2042

if.exit94:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !2043
  %le95 = icmp ule i8 %61, 70, !dbg !2043
  br i1 %le95, label %if.then96, label %if.exit101, !dbg !2043

if.then96:                                        ; preds = %if.exit94
  %62 = load i8, ptr %ch, align 1, !dbg !2044
  %zext97 = zext i8 %62 to i32, !dbg !2044
  %sub98 = sub i32 %zext97, 65, !dbg !2044
  %add99 = add i32 %sub98, 10, !dbg !2045
  %trunc100 = trunc i32 %add99 to i8, !dbg !2045
  store i8 %trunc100, ptr %blockret75, align 1, !dbg !2045
  br label %expr_block.exit, !dbg !2045

if.exit101:                                       ; preds = %if.exit94
  %63 = load i8, ptr %ch, align 1, !dbg !2046
  %lt102 = icmp ult i8 %63, 97, !dbg !2046
  br i1 %lt102, label %if.then103, label %if.exit104, !dbg !2046

if.then103:                                       ; preds = %if.exit101
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2047
  br label %guard_block, !dbg !2047

if.exit104:                                       ; preds = %if.exit101
  %64 = load i8, ptr %ch, align 1, !dbg !2048
  %gt105 = icmp ugt i8 %64, 102, !dbg !2048
  br i1 %gt105, label %if.then106, label %if.exit107, !dbg !2048

if.then106:                                       ; preds = %if.exit104
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2049
  br label %guard_block, !dbg !2049

if.exit107:                                       ; preds = %if.exit104
  %65 = load i8, ptr %ch, align 1, !dbg !2050
  %zext108 = zext i8 %65 to i32, !dbg !2050
  %sub109 = sub i32 %zext108, 97, !dbg !2050
  %add110 = add i32 %sub109, 10, !dbg !2051
  %trunc111 = trunc i32 %add110 to i8, !dbg !2051
  store i8 %trunc111, ptr %blockret75, align 1, !dbg !2051
  br label %expr_block.exit, !dbg !2051

expr_block.exit:                                  ; preds = %if.exit107, %if.then96, %if.then93
  br label %noerr_block, !dbg !2051

guard_block:                                      ; preds = %if.then106, %if.then103
  %66 = load i64, ptr %error_var, align 8, !dbg !2051
  store i64 %66, ptr %reterr, align 8, !dbg !2051
  br label %err_retblock, !dbg !2051

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !2051
  store i8 %67, ptr %c74, align 1, !dbg !2051
  %68 = load i8, ptr %c74, align 1, !dbg !2052
  %zext112 = zext i8 %68 to i32, !dbg !2052
  %69 = load i32, ptr %base_used, align 4, !dbg !2053
  %ge113 = icmp uge i32 %zext112, %69, !dbg !2052
  br i1 %ge113, label %if.then114, label %if.exit115, !dbg !2052

if.then114:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2054
  br label %err_retblock, !dbg !2054

if.exit115:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !2055
  %71 = trunc i8 %70 to i1, !dbg !2055
  br i1 %71, label %if.then118, label %if.exit124, !dbg !2055

if.then118:                                       ; preds = %if.exit115
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2057, metadata !DIExpression()), !dbg !2059
  %72 = load i32, ptr %value, align 4, !dbg !2060
  %73 = load i32, ptr %base_used, align 4, !dbg !2061
  %mul = mul i32 %72, %73, !dbg !2060
  %74 = load i8, ptr %c74, align 1, !dbg !2062
  %zext119 = zext i8 %74 to i32, !dbg !2062
  %sub120 = sub i32 %mul, %zext119, !dbg !2060
  store i32 %sub120, ptr %new_value, align 4, !dbg !2060
  %75 = load i32, ptr %new_value, align 4, !dbg !2063
  %76 = load i32, ptr %value, align 4, !dbg !2064
  %gt121 = icmp ugt i32 %75, %76, !dbg !2063
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !2063

if.then122:                                       ; preds = %if.then118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !2065
  br label %guard_block133, !dbg !2065

if.exit123:                                       ; preds = %if.then118
  %77 = load i32, ptr %new_value, align 4, !dbg !2066
  store i32 %77, ptr %blockret117, align 4, !dbg !2066
  br label %expr_block.exit132, !dbg !2066

if.exit124:                                       ; preds = %if.exit115
  call void @llvm.dbg.declare(metadata ptr %new_value125, metadata !2067, metadata !DIExpression()), !dbg !2068
  %78 = load i32, ptr %value, align 4, !dbg !2069
  %79 = load i32, ptr %base_used, align 4, !dbg !2070
  %mul126 = mul i32 %78, %79, !dbg !2069
  %80 = load i8, ptr %c74, align 1, !dbg !2071
  %zext127 = zext i8 %80 to i32, !dbg !2071
  %add128 = add i32 %mul126, %zext127, !dbg !2069
  store i32 %add128, ptr %new_value125, align 4, !dbg !2069
  %81 = load i32, ptr %new_value125, align 4, !dbg !2072
  %82 = load i32, ptr %value, align 4, !dbg !2073
  %lt129 = icmp ult i32 %81, %82, !dbg !2072
  br i1 %lt129, label %if.then130, label %if.exit131, !dbg !2072

if.then130:                                       ; preds = %if.exit124
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var116, align 8, !dbg !2074
  br label %guard_block133, !dbg !2074

if.exit131:                                       ; preds = %if.exit124
  %83 = load i32, ptr %new_value125, align 4, !dbg !2075
  store i32 %83, ptr %blockret117, align 4, !dbg !2075
  br label %expr_block.exit132, !dbg !2075

expr_block.exit132:                               ; preds = %if.exit131, %if.exit123
  br label %noerr_block134, !dbg !2075

guard_block133:                                   ; preds = %if.then130, %if.then122
  %84 = load i64, ptr %error_var116, align 8, !dbg !2075
  store i64 %84, ptr %reterr, align 8, !dbg !2075
  br label %err_retblock, !dbg !2075

noerr_block134:                                   ; preds = %expr_block.exit132
  %85 = load i32, ptr %blockret117, align 4, !dbg !2075
  store i32 %85, ptr %value, align 4, !dbg !2075
  br label %loop.cond72, !dbg !2075

loop.exit135:                                     ; preds = %loop.cond72
  %86 = load i32, ptr %value, align 4, !dbg !2076
  store i32 %86, ptr %blockret, align 4, !dbg !2076
  br label %expr_block.exit136, !dbg !2076

expr_block.exit136:                               ; preds = %loop.exit135, %if.then45
  %87 = load i32, ptr %blockret, align 4, !dbg !2076
  store i32 %87, ptr %0, align 4, !dbg !2076
  ret i64 0, !dbg !2076

err_retblock:                                     ; preds = %guard_block133, %if.then114, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !2076
  ret i64 %88, !dbg !2076

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.67, i64 7, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1985
  unreachable, !dbg !1985

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.67, i64 7, i32 655, ptr byval(%"any[]") align 8 %indirectarg34), !dbg !2000
  unreachable, !dbg !2000

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.67, i64 7, i32 659, ptr byval(%"any[]") align 8 %indirectarg55), !dbg !2009
  unreachable, !dbg !2009

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.67, i64 7, i32 682, ptr byval(%"any[]") align 8 %indirectarg85), !dbg !2038
  unreachable, !dbg !2038
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_ushort(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2077 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i16, align 2
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var118 = alloca i64, align 8
  %blockret119 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value130 = alloca i16, align 2
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2080, metadata !DIExpression()), !dbg !2081
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2082, metadata !DIExpression()), !dbg !2083
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !2084
  %le = icmp sle i32 %5, 10, !dbg !2084
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2084

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !2088
  %gt = icmp sgt i32 %6, 1, !dbg !2088
  br label %and.phi, !dbg !2088

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2088
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2088

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !2089
  %eq = icmp eq i32 %7, 16, !dbg !2089
  br label %or.phi, !dbg !2089

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2089
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2089

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2084
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.68, i64 9, i32 632), !dbg !2084
  unreachable, !dbg !2084

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2090, metadata !DIExpression()), !dbg !2091
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2092
  %9 = load i64, ptr %ptradd3, align 8, !dbg !2092
  store i64 %9, ptr %len, align 8, !dbg !2092
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2093, metadata !DIExpression()), !dbg !2094
  store i64 0, ptr %index, align 8, !dbg !2095
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !2096, metadata !DIExpression()), !dbg !2097
  %10 = load ptr, ptr %string, align 8, !dbg !2098
  store ptr %10, ptr %ptr, align 8, !dbg !2098
  br label %loop.cond, !dbg !2099

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !2100
  %12 = load i64, ptr %len, align 8, !dbg !2102
  %lt = icmp ult i64 %11, %12, !dbg !2100
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !2100

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !2103
  %14 = load i64, ptr %index, align 8, !dbg !2104
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !2104
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !2105
  %eq6 = icmp eq i8 %16, 32, !dbg !2105
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !2105

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !2108
  %eq8 = icmp eq i8 %17, 9, !dbg !2108
  br label %or.phi9, !dbg !2108

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !2108
  br label %and.phi11, !dbg !2108

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !2108
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !2108

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !2109
  %add = add i64 %18, 1, !dbg !2109
  store i64 %add, ptr %index, align 8, !dbg !2109
  br label %loop.cond, !dbg !2109

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !2110
  %20 = load i64, ptr %index, align 8, !dbg !2111
  %eq13 = icmp eq i64 %19, %20, !dbg !2110
  br i1 %eq13, label %if.then, label %if.exit, !dbg !2110

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2112
  br label %err_retblock, !dbg !2112

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !2113, metadata !DIExpression()), !dbg !2114
  store i8 0, ptr %is_negative, align 1, !dbg !2114
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2115
  %21 = load i64, ptr %ptradd14, align 8, !dbg !2115
  %22 = load ptr, ptr %string, align 8, !dbg !2115
  %23 = load i64, ptr %index, align 8, !dbg !2117
  %ge = icmp uge i64 %23, %21, !dbg !2117
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2117
  br i1 %24, label %panic, label %checkok, !dbg !2117

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !2117
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !2118

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2120
  br label %err_retblock, !dbg !2120

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !2121
  %add22 = add i64 %27, 1, !dbg !2121
  store i64 %add22, ptr %index, align 8, !dbg !2121
  br label %switch.exit, !dbg !2121

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2123

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !2125
  %29 = load i64, ptr %index, align 8, !dbg !2126
  %eq23 = icmp eq i64 %28, %29, !dbg !2125
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !2125

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2127
  br label %err_retblock, !dbg !2127

if.exit25:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !2128, metadata !DIExpression()), !dbg !2129
  %30 = load i32, ptr %base1, align 4, !dbg !2130
  %trunc = trunc i32 %30 to i16, !dbg !2130
  store i16 %trunc, ptr %base_used, align 2, !dbg !2130
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2131
  %31 = load i64, ptr %ptradd26, align 8, !dbg !2131
  %32 = load ptr, ptr %string, align 8, !dbg !2131
  %33 = load i64, ptr %index, align 8, !dbg !2132
  %ge27 = icmp uge i64 %33, %31, !dbg !2132
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !2132
  br i1 %34, label %panic28, label %checkok35, !dbg !2132

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !2132
  %35 = load i8, ptr %ptradd36, align 1, !dbg !2132
  %eq37 = icmp eq i8 %35, 48, !dbg !2131
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !2131

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !2133
  %eq39 = icmp eq i32 %36, 10, !dbg !2133
  br label %and.phi40, !dbg !2133

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !2133
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !2133

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !2134
  %add43 = add i64 %37, 1, !dbg !2134
  store i64 %add43, ptr %index, align 8, !dbg !2134
  %38 = load i64, ptr %index, align 8, !dbg !2136
  %39 = load i64, ptr %len, align 8, !dbg !2137
  %eq44 = icmp eq i64 %38, %39, !dbg !2136
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !2136

if.then45:                                        ; preds = %if.then42
  store i16 0, ptr %blockret, align 2, !dbg !2138
  br label %expr_block.exit144, !dbg !2138

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2139
  %40 = load i64, ptr %ptradd47, align 8, !dbg !2139
  %41 = load ptr, ptr %string, align 8, !dbg !2139
  %42 = load i64, ptr %index, align 8, !dbg !2141
  %ge48 = icmp uge i64 %42, %40, !dbg !2141
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !2141
  br i1 %43, label %panic49, label %checkok56, !dbg !2141

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !2141
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i16 16, ptr %base_used, align 2, !dbg !2142
  %46 = load i64, ptr %index, align 8, !dbg !2144
  %add61 = add i64 %46, 1, !dbg !2144
  store i64 %add61, ptr %index, align 8, !dbg !2144
  br label %switch.exit67, !dbg !2144

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i16 2, ptr %base_used, align 2, !dbg !2145
  %47 = load i64, ptr %index, align 8, !dbg !2147
  %add63 = add i64 %47, 1, !dbg !2147
  store i64 %add63, ptr %index, align 8, !dbg !2147
  br label %switch.exit67, !dbg !2147

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i16 8, ptr %base_used, align 2, !dbg !2148
  %48 = load i64, ptr %index, align 8, !dbg !2150
  %add65 = add i64 %48, 1, !dbg !2150
  store i64 %add65, ptr %index, align 8, !dbg !2150
  br label %switch.exit67, !dbg !2150

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !2151

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !2153
  %50 = load i64, ptr %index, align 8, !dbg !2154
  %eq68 = icmp eq i64 %49, %50, !dbg !2153
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !2153

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2155
  br label %err_retblock, !dbg !2155

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !2155

if.exit71:                                        ; preds = %if.exit70, %and.phi40
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2156, metadata !DIExpression()), !dbg !2157
  store i16 0, ptr %value, align 2, !dbg !2158
  br label %loop.cond72, !dbg !2159

loop.cond72:                                      ; preds = %noerr_block142, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !2160
  %52 = load i64, ptr %len, align 8, !dbg !2162
  %neq = icmp ne i64 %51, %52, !dbg !2160
  br i1 %neq, label %loop.body73, label %loop.exit143, !dbg !2160

loop.body73:                                      ; preds = %loop.cond72
  call void @llvm.dbg.declare(metadata ptr %c74, metadata !2163, metadata !DIExpression()), !dbg !2165
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2166, metadata !DIExpression()), !dbg !2168
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2169
  %53 = load i64, ptr %ptradd76, align 8, !dbg !2169
  %54 = load ptr, ptr %string, align 8, !dbg !2169
  %55 = load i64, ptr %index, align 8, !dbg !2170
  %add77 = add i64 %55, 1, !dbg !2170
  store i64 %add77, ptr %index, align 8, !dbg !2170
  %ge78 = icmp uge i64 %55, %53, !dbg !2170
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !2170
  br i1 %56, label %panic79, label %checkok86, !dbg !2170

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !2170
  %57 = load i8, ptr %ptradd87, align 1, !dbg !2170
  store i8 %57, ptr %ch, align 1, !dbg !2170
  %58 = load i16, ptr %base_used, align 2, !dbg !2171
  %zext = zext i16 %58 to i32, !dbg !2171
  %neq88 = icmp ne i32 16, %zext, !dbg !2171
  br i1 %neq88, label %or.phi91, label %or.rhs89, !dbg !2171

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !2172
  %lt90 = icmp ult i8 %59, 65, !dbg !2172
  br label %or.phi91, !dbg !2172

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !2172
  br i1 %val92, label %if.then93, label %if.exit96, !dbg !2172

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !2173
  %zext94 = zext i8 %60 to i32, !dbg !2173
  %sub = sub i32 %zext94, 48, !dbg !2174
  %trunc95 = trunc i32 %sub to i8, !dbg !2174
  store i8 %trunc95, ptr %blockret75, align 1, !dbg !2174
  br label %expr_block.exit, !dbg !2174

if.exit96:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !2175
  %le97 = icmp ule i8 %61, 70, !dbg !2175
  br i1 %le97, label %if.then98, label %if.exit103, !dbg !2175

if.then98:                                        ; preds = %if.exit96
  %62 = load i8, ptr %ch, align 1, !dbg !2176
  %zext99 = zext i8 %62 to i32, !dbg !2176
  %sub100 = sub i32 %zext99, 65, !dbg !2176
  %add101 = add i32 %sub100, 10, !dbg !2177
  %trunc102 = trunc i32 %add101 to i8, !dbg !2177
  store i8 %trunc102, ptr %blockret75, align 1, !dbg !2177
  br label %expr_block.exit, !dbg !2177

if.exit103:                                       ; preds = %if.exit96
  %63 = load i8, ptr %ch, align 1, !dbg !2178
  %lt104 = icmp ult i8 %63, 97, !dbg !2178
  br i1 %lt104, label %if.then105, label %if.exit106, !dbg !2178

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2179
  br label %guard_block, !dbg !2179

if.exit106:                                       ; preds = %if.exit103
  %64 = load i8, ptr %ch, align 1, !dbg !2180
  %gt107 = icmp ugt i8 %64, 102, !dbg !2180
  br i1 %gt107, label %if.then108, label %if.exit109, !dbg !2180

if.then108:                                       ; preds = %if.exit106
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2181
  br label %guard_block, !dbg !2181

if.exit109:                                       ; preds = %if.exit106
  %65 = load i8, ptr %ch, align 1, !dbg !2182
  %zext110 = zext i8 %65 to i32, !dbg !2182
  %sub111 = sub i32 %zext110, 97, !dbg !2182
  %add112 = add i32 %sub111, 10, !dbg !2183
  %trunc113 = trunc i32 %add112 to i8, !dbg !2183
  store i8 %trunc113, ptr %blockret75, align 1, !dbg !2183
  br label %expr_block.exit, !dbg !2183

expr_block.exit:                                  ; preds = %if.exit109, %if.then98, %if.then93
  br label %noerr_block, !dbg !2183

guard_block:                                      ; preds = %if.then108, %if.then105
  %66 = load i64, ptr %error_var, align 8, !dbg !2183
  store i64 %66, ptr %reterr, align 8, !dbg !2183
  br label %err_retblock, !dbg !2183

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !2183
  store i8 %67, ptr %c74, align 1, !dbg !2183
  %68 = load i8, ptr %c74, align 1, !dbg !2184
  %zext114 = zext i8 %68 to i16, !dbg !2184
  %69 = load i16, ptr %base_used, align 2, !dbg !2185
  %ge115 = icmp uge i16 %zext114, %69, !dbg !2184
  br i1 %ge115, label %if.then116, label %if.exit117, !dbg !2184

if.then116:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2186
  br label %err_retblock, !dbg !2186

if.exit117:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !2187
  %71 = trunc i8 %70 to i1, !dbg !2187
  br i1 %71, label %if.then120, label %if.exit129, !dbg !2187

if.then120:                                       ; preds = %if.exit117
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2189, metadata !DIExpression()), !dbg !2191
  %72 = load i16, ptr %value, align 2, !dbg !2192
  %zext121 = zext i16 %72 to i32, !dbg !2192
  %73 = load i16, ptr %base_used, align 2, !dbg !2193
  %zext122 = zext i16 %73 to i32, !dbg !2193
  %mul = mul i32 %zext121, %zext122, !dbg !2192
  %74 = load i8, ptr %c74, align 1, !dbg !2194
  %zext123 = zext i8 %74 to i32, !dbg !2194
  %sub124 = sub i32 %mul, %zext123, !dbg !2192
  %trunc125 = trunc i32 %sub124 to i16, !dbg !2192
  store i16 %trunc125, ptr %new_value, align 2, !dbg !2192
  %75 = load i16, ptr %new_value, align 2, !dbg !2195
  %76 = load i16, ptr %value, align 2, !dbg !2196
  %gt126 = icmp ugt i16 %75, %76, !dbg !2195
  br i1 %gt126, label %if.then127, label %if.exit128, !dbg !2195

if.then127:                                       ; preds = %if.then120
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var118, align 8, !dbg !2197
  br label %guard_block141, !dbg !2197

if.exit128:                                       ; preds = %if.then120
  %77 = load i16, ptr %new_value, align 2, !dbg !2198
  store i16 %77, ptr %blockret119, align 2, !dbg !2198
  br label %expr_block.exit140, !dbg !2198

if.exit129:                                       ; preds = %if.exit117
  call void @llvm.dbg.declare(metadata ptr %new_value130, metadata !2199, metadata !DIExpression()), !dbg !2200
  %78 = load i16, ptr %value, align 2, !dbg !2201
  %zext131 = zext i16 %78 to i32, !dbg !2201
  %79 = load i16, ptr %base_used, align 2, !dbg !2202
  %zext132 = zext i16 %79 to i32, !dbg !2202
  %mul133 = mul i32 %zext131, %zext132, !dbg !2201
  %80 = load i8, ptr %c74, align 1, !dbg !2203
  %zext134 = zext i8 %80 to i32, !dbg !2203
  %add135 = add i32 %mul133, %zext134, !dbg !2201
  %trunc136 = trunc i32 %add135 to i16, !dbg !2201
  store i16 %trunc136, ptr %new_value130, align 2, !dbg !2201
  %81 = load i16, ptr %new_value130, align 2, !dbg !2204
  %82 = load i16, ptr %value, align 2, !dbg !2205
  %lt137 = icmp ult i16 %81, %82, !dbg !2204
  br i1 %lt137, label %if.then138, label %if.exit139, !dbg !2204

if.then138:                                       ; preds = %if.exit129
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var118, align 8, !dbg !2206
  br label %guard_block141, !dbg !2206

if.exit139:                                       ; preds = %if.exit129
  %83 = load i16, ptr %new_value130, align 2, !dbg !2207
  store i16 %83, ptr %blockret119, align 2, !dbg !2207
  br label %expr_block.exit140, !dbg !2207

expr_block.exit140:                               ; preds = %if.exit139, %if.exit128
  br label %noerr_block142, !dbg !2207

guard_block141:                                   ; preds = %if.then138, %if.then127
  %84 = load i64, ptr %error_var118, align 8, !dbg !2207
  store i64 %84, ptr %reterr, align 8, !dbg !2207
  br label %err_retblock, !dbg !2207

noerr_block142:                                   ; preds = %expr_block.exit140
  %85 = load i16, ptr %blockret119, align 2, !dbg !2207
  store i16 %85, ptr %value, align 2, !dbg !2207
  br label %loop.cond72, !dbg !2207

loop.exit143:                                     ; preds = %loop.cond72
  %86 = load i16, ptr %value, align 2, !dbg !2208
  store i16 %86, ptr %blockret, align 2, !dbg !2208
  br label %expr_block.exit144, !dbg !2208

expr_block.exit144:                               ; preds = %loop.exit143, %if.then45
  %87 = load i16, ptr %blockret, align 2, !dbg !2208
  store i16 %87, ptr %0, align 2, !dbg !2208
  ret i64 0, !dbg !2208

err_retblock:                                     ; preds = %guard_block141, %if.then116, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !2208
  ret i64 %88, !dbg !2208

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.68, i64 9, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2117
  unreachable, !dbg !2117

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.68, i64 9, i32 655, ptr byval(%"any[]") align 8 %indirectarg34), !dbg !2132
  unreachable, !dbg !2132

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.68, i64 9, i32 659, ptr byval(%"any[]") align 8 %indirectarg55), !dbg !2141
  unreachable, !dbg !2141

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.68, i64 9, i32 682, ptr byval(%"any[]") align 8 %indirectarg85), !dbg !2170
  unreachable, !dbg !2170
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_uchar(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2209 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %switch58 = alloca i8, align 1
  %value = alloca i8, align 1
  %c74 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret75 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %varargslots82 = alloca [2 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %error_var117 = alloca i64, align 8
  %blockret118 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value129 = alloca i8, align 1
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2212, metadata !DIExpression()), !dbg !2213
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2214, metadata !DIExpression()), !dbg !2215
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %4 = load i32, ptr %base, align 4
  store i32 %4, ptr %base1, align 4
  %5 = load i32, ptr %base1, align 4, !dbg !2216
  %le = icmp sle i32 %5, 10, !dbg !2216
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2216

and.rhs:                                          ; preds = %entry
  %6 = load i32, ptr %base1, align 4, !dbg !2220
  %gt = icmp sgt i32 %6, 1, !dbg !2220
  br label %and.phi, !dbg !2220

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2220
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2220

or.rhs:                                           ; preds = %and.phi
  %7 = load i32, ptr %base1, align 4, !dbg !2221
  %eq = icmp eq i32 %7, 16, !dbg !2221
  br label %or.phi, !dbg !2221

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2221
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2221

assert_fail:                                      ; preds = %or.phi
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2216
  call void %8(ptr @.panic_msg.59, i64 79, ptr @.file.17, i64 9, ptr @.func.69, i64 8, i32 632), !dbg !2216
  unreachable, !dbg !2216

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2222, metadata !DIExpression()), !dbg !2223
  %ptradd3 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2224
  %9 = load i64, ptr %ptradd3, align 8, !dbg !2224
  store i64 %9, ptr %len, align 8, !dbg !2224
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2225, metadata !DIExpression()), !dbg !2226
  store i64 0, ptr %index, align 8, !dbg !2227
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !2228, metadata !DIExpression()), !dbg !2229
  %10 = load ptr, ptr %string, align 8, !dbg !2230
  store ptr %10, ptr %ptr, align 8, !dbg !2230
  br label %loop.cond, !dbg !2231

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %11 = load i64, ptr %index, align 8, !dbg !2232
  %12 = load i64, ptr %len, align 8, !dbg !2234
  %lt = icmp ult i64 %11, %12, !dbg !2232
  br i1 %lt, label %and.rhs4, label %and.phi11, !dbg !2232

and.rhs4:                                         ; preds = %loop.cond
  %13 = load ptr, ptr %ptr, align 8, !dbg !2235
  %14 = load i64, ptr %index, align 8, !dbg !2236
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !2236
  %15 = load i8, ptr %ptradd5, align 1
  store i8 %15, ptr %c, align 1
  %16 = load i8, ptr %c, align 1, !dbg !2237
  %eq6 = icmp eq i8 %16, 32, !dbg !2237
  br i1 %eq6, label %or.phi9, label %or.rhs7, !dbg !2237

or.rhs7:                                          ; preds = %and.rhs4
  %17 = load i8, ptr %c, align 1, !dbg !2240
  %eq8 = icmp eq i8 %17, 9, !dbg !2240
  br label %or.phi9, !dbg !2240

or.phi9:                                          ; preds = %or.rhs7, %and.rhs4
  %val10 = phi i1 [ true, %and.rhs4 ], [ %eq8, %or.rhs7 ], !dbg !2240
  br label %and.phi11, !dbg !2240

and.phi11:                                        ; preds = %or.phi9, %loop.cond
  %val12 = phi i1 [ false, %loop.cond ], [ %val10, %or.phi9 ], !dbg !2240
  br i1 %val12, label %loop.body, label %loop.exit, !dbg !2240

loop.body:                                        ; preds = %and.phi11
  %18 = load i64, ptr %index, align 8, !dbg !2241
  %add = add i64 %18, 1, !dbg !2241
  store i64 %add, ptr %index, align 8, !dbg !2241
  br label %loop.cond, !dbg !2241

loop.exit:                                        ; preds = %and.phi11
  %19 = load i64, ptr %len, align 8, !dbg !2242
  %20 = load i64, ptr %index, align 8, !dbg !2243
  %eq13 = icmp eq i64 %19, %20, !dbg !2242
  br i1 %eq13, label %if.then, label %if.exit, !dbg !2242

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2244
  br label %err_retblock, !dbg !2244

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !2245, metadata !DIExpression()), !dbg !2246
  store i8 0, ptr %is_negative, align 1, !dbg !2246
  %ptradd14 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2247
  %21 = load i64, ptr %ptradd14, align 8, !dbg !2247
  %22 = load ptr, ptr %string, align 8, !dbg !2247
  %23 = load i64, ptr %index, align 8, !dbg !2249
  %ge = icmp uge i64 %23, %21, !dbg !2249
  %24 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2249
  br i1 %24, label %panic, label %checkok, !dbg !2249

checkok:                                          ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !2249
  %25 = load i8, ptr %ptradd17, align 1
  store i8 %25, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %26 = load i8, ptr %switch, align 1
  switch i8 %26, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case21
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then18, !dbg !2250

if.then18:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2252
  br label %err_retblock, !dbg !2252

switch.case21:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !2253
  %add22 = add i64 %27, 1, !dbg !2253
  store i64 %add22, ptr %index, align 8, !dbg !2253
  br label %switch.exit, !dbg !2253

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2255

switch.exit:                                      ; preds = %switch.default, %switch.case21
  %28 = load i64, ptr %len, align 8, !dbg !2257
  %29 = load i64, ptr %index, align 8, !dbg !2258
  %eq23 = icmp eq i64 %28, %29, !dbg !2257
  br i1 %eq23, label %if.then24, label %if.exit25, !dbg !2257

if.then24:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2259
  br label %err_retblock, !dbg !2259

if.exit25:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !2260, metadata !DIExpression()), !dbg !2261
  %30 = load i32, ptr %base1, align 4, !dbg !2262
  %trunc = trunc i32 %30 to i8, !dbg !2262
  store i8 %trunc, ptr %base_used, align 1, !dbg !2262
  %ptradd26 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2263
  %31 = load i64, ptr %ptradd26, align 8, !dbg !2263
  %32 = load ptr, ptr %string, align 8, !dbg !2263
  %33 = load i64, ptr %index, align 8, !dbg !2264
  %ge27 = icmp uge i64 %33, %31, !dbg !2264
  %34 = call i1 @llvm.expect.i1(i1 %ge27, i1 false), !dbg !2264
  br i1 %34, label %panic28, label %checkok35, !dbg !2264

checkok35:                                        ; preds = %if.exit25
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !2264
  %35 = load i8, ptr %ptradd36, align 1, !dbg !2264
  %eq37 = icmp eq i8 %35, 48, !dbg !2263
  br i1 %eq37, label %and.rhs38, label %and.phi40, !dbg !2263

and.rhs38:                                        ; preds = %checkok35
  %36 = load i32, ptr %base1, align 4, !dbg !2265
  %eq39 = icmp eq i32 %36, 10, !dbg !2265
  br label %and.phi40, !dbg !2265

and.phi40:                                        ; preds = %and.rhs38, %checkok35
  %val41 = phi i1 [ false, %checkok35 ], [ %eq39, %and.rhs38 ], !dbg !2265
  br i1 %val41, label %if.then42, label %if.exit71, !dbg !2265

if.then42:                                        ; preds = %and.phi40
  %37 = load i64, ptr %index, align 8, !dbg !2266
  %add43 = add i64 %37, 1, !dbg !2266
  store i64 %add43, ptr %index, align 8, !dbg !2266
  %38 = load i64, ptr %index, align 8, !dbg !2268
  %39 = load i64, ptr %len, align 8, !dbg !2269
  %eq44 = icmp eq i64 %38, %39, !dbg !2268
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !2268

if.then45:                                        ; preds = %if.then42
  store i8 0, ptr %blockret, align 1, !dbg !2270
  br label %expr_block.exit143, !dbg !2270

if.exit46:                                        ; preds = %if.then42
  %ptradd47 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2271
  %40 = load i64, ptr %ptradd47, align 8, !dbg !2271
  %41 = load ptr, ptr %string, align 8, !dbg !2271
  %42 = load i64, ptr %index, align 8, !dbg !2273
  %ge48 = icmp uge i64 %42, %40, !dbg !2273
  %43 = call i1 @llvm.expect.i1(i1 %ge48, i1 false), !dbg !2273
  br i1 %43, label %panic49, label %checkok56, !dbg !2273

checkok56:                                        ; preds = %if.exit46
  %ptradd57 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !2273
  %44 = load i8, ptr %ptradd57, align 1
  store i8 %44, ptr %switch58, align 1
  br label %switch.entry59

switch.entry59:                                   ; preds = %checkok56
  %45 = load i8, ptr %switch58, align 1
  switch i8 %45, label %switch.default66 [
    i8 120, label %switch.case60
    i8 88, label %switch.case60
    i8 98, label %switch.case62
    i8 66, label %switch.case62
    i8 111, label %switch.case64
    i8 79, label %switch.case64
  ]

switch.case60:                                    ; preds = %switch.entry59, %switch.entry59
  store i8 16, ptr %base_used, align 1, !dbg !2274
  %46 = load i64, ptr %index, align 8, !dbg !2276
  %add61 = add i64 %46, 1, !dbg !2276
  store i64 %add61, ptr %index, align 8, !dbg !2276
  br label %switch.exit67, !dbg !2276

switch.case62:                                    ; preds = %switch.entry59, %switch.entry59
  store i8 2, ptr %base_used, align 1, !dbg !2277
  %47 = load i64, ptr %index, align 8, !dbg !2279
  %add63 = add i64 %47, 1, !dbg !2279
  store i64 %add63, ptr %index, align 8, !dbg !2279
  br label %switch.exit67, !dbg !2279

switch.case64:                                    ; preds = %switch.entry59, %switch.entry59
  store i8 8, ptr %base_used, align 1, !dbg !2280
  %48 = load i64, ptr %index, align 8, !dbg !2282
  %add65 = add i64 %48, 1, !dbg !2282
  store i64 %add65, ptr %index, align 8, !dbg !2282
  br label %switch.exit67, !dbg !2282

switch.default66:                                 ; preds = %switch.entry59
  br label %switch.exit67, !dbg !2283

switch.exit67:                                    ; preds = %switch.default66, %switch.case64, %switch.case62, %switch.case60
  %49 = load i64, ptr %len, align 8, !dbg !2285
  %50 = load i64, ptr %index, align 8, !dbg !2286
  %eq68 = icmp eq i64 %49, %50, !dbg !2285
  br i1 %eq68, label %if.then69, label %if.exit70, !dbg !2285

if.then69:                                        ; preds = %switch.exit67
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2287
  br label %err_retblock, !dbg !2287

if.exit70:                                        ; preds = %switch.exit67
  br label %if.exit71, !dbg !2287

if.exit71:                                        ; preds = %if.exit70, %and.phi40
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2288, metadata !DIExpression()), !dbg !2289
  store i8 0, ptr %value, align 1, !dbg !2290
  br label %loop.cond72, !dbg !2291

loop.cond72:                                      ; preds = %noerr_block141, %if.exit71
  %51 = load i64, ptr %index, align 8, !dbg !2292
  %52 = load i64, ptr %len, align 8, !dbg !2294
  %neq = icmp ne i64 %51, %52, !dbg !2292
  br i1 %neq, label %loop.body73, label %loop.exit142, !dbg !2292

loop.body73:                                      ; preds = %loop.cond72
  call void @llvm.dbg.declare(metadata ptr %c74, metadata !2295, metadata !DIExpression()), !dbg !2297
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2298, metadata !DIExpression()), !dbg !2300
  %ptradd76 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2301
  %53 = load i64, ptr %ptradd76, align 8, !dbg !2301
  %54 = load ptr, ptr %string, align 8, !dbg !2301
  %55 = load i64, ptr %index, align 8, !dbg !2302
  %add77 = add i64 %55, 1, !dbg !2302
  store i64 %add77, ptr %index, align 8, !dbg !2302
  %ge78 = icmp uge i64 %55, %53, !dbg !2302
  %56 = call i1 @llvm.expect.i1(i1 %ge78, i1 false), !dbg !2302
  br i1 %56, label %panic79, label %checkok86, !dbg !2302

checkok86:                                        ; preds = %loop.body73
  %ptradd87 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !2302
  %57 = load i8, ptr %ptradd87, align 1, !dbg !2302
  store i8 %57, ptr %ch, align 1, !dbg !2302
  %58 = load i8, ptr %base_used, align 1, !dbg !2303
  %zext = zext i8 %58 to i32, !dbg !2303
  %neq88 = icmp ne i32 16, %zext, !dbg !2303
  br i1 %neq88, label %or.phi91, label %or.rhs89, !dbg !2303

or.rhs89:                                         ; preds = %checkok86
  %59 = load i8, ptr %ch, align 1, !dbg !2304
  %lt90 = icmp ult i8 %59, 65, !dbg !2304
  br label %or.phi91, !dbg !2304

or.phi91:                                         ; preds = %or.rhs89, %checkok86
  %val92 = phi i1 [ true, %checkok86 ], [ %lt90, %or.rhs89 ], !dbg !2304
  br i1 %val92, label %if.then93, label %if.exit96, !dbg !2304

if.then93:                                        ; preds = %or.phi91
  %60 = load i8, ptr %ch, align 1, !dbg !2305
  %zext94 = zext i8 %60 to i32, !dbg !2305
  %sub = sub i32 %zext94, 48, !dbg !2306
  %trunc95 = trunc i32 %sub to i8, !dbg !2306
  store i8 %trunc95, ptr %blockret75, align 1, !dbg !2306
  br label %expr_block.exit, !dbg !2306

if.exit96:                                        ; preds = %or.phi91
  %61 = load i8, ptr %ch, align 1, !dbg !2307
  %le97 = icmp ule i8 %61, 70, !dbg !2307
  br i1 %le97, label %if.then98, label %if.exit103, !dbg !2307

if.then98:                                        ; preds = %if.exit96
  %62 = load i8, ptr %ch, align 1, !dbg !2308
  %zext99 = zext i8 %62 to i32, !dbg !2308
  %sub100 = sub i32 %zext99, 65, !dbg !2308
  %add101 = add i32 %sub100, 10, !dbg !2309
  %trunc102 = trunc i32 %add101 to i8, !dbg !2309
  store i8 %trunc102, ptr %blockret75, align 1, !dbg !2309
  br label %expr_block.exit, !dbg !2309

if.exit103:                                       ; preds = %if.exit96
  %63 = load i8, ptr %ch, align 1, !dbg !2310
  %lt104 = icmp ult i8 %63, 97, !dbg !2310
  br i1 %lt104, label %if.then105, label %if.exit106, !dbg !2310

if.then105:                                       ; preds = %if.exit103
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2311
  br label %guard_block, !dbg !2311

if.exit106:                                       ; preds = %if.exit103
  %64 = load i8, ptr %ch, align 1, !dbg !2312
  %gt107 = icmp ugt i8 %64, 102, !dbg !2312
  br i1 %gt107, label %if.then108, label %if.exit109, !dbg !2312

if.then108:                                       ; preds = %if.exit106
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2313
  br label %guard_block, !dbg !2313

if.exit109:                                       ; preds = %if.exit106
  %65 = load i8, ptr %ch, align 1, !dbg !2314
  %zext110 = zext i8 %65 to i32, !dbg !2314
  %sub111 = sub i32 %zext110, 97, !dbg !2314
  %add112 = add i32 %sub111, 10, !dbg !2315
  %trunc113 = trunc i32 %add112 to i8, !dbg !2315
  store i8 %trunc113, ptr %blockret75, align 1, !dbg !2315
  br label %expr_block.exit, !dbg !2315

expr_block.exit:                                  ; preds = %if.exit109, %if.then98, %if.then93
  br label %noerr_block, !dbg !2315

guard_block:                                      ; preds = %if.then108, %if.then105
  %66 = load i64, ptr %error_var, align 8, !dbg !2315
  store i64 %66, ptr %reterr, align 8, !dbg !2315
  br label %err_retblock, !dbg !2315

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret75, align 1, !dbg !2315
  store i8 %67, ptr %c74, align 1, !dbg !2315
  %68 = load i8, ptr %c74, align 1, !dbg !2316
  %69 = load i8, ptr %base_used, align 1, !dbg !2317
  %ge114 = icmp uge i8 %68, %69, !dbg !2316
  br i1 %ge114, label %if.then115, label %if.exit116, !dbg !2316

if.then115:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2318
  br label %err_retblock, !dbg !2318

if.exit116:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !2319
  %71 = trunc i8 %70 to i1, !dbg !2319
  br i1 %71, label %if.then119, label %if.exit128, !dbg !2319

if.then119:                                       ; preds = %if.exit116
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2321, metadata !DIExpression()), !dbg !2323
  %72 = load i8, ptr %value, align 1, !dbg !2324
  %zext120 = zext i8 %72 to i32, !dbg !2324
  %73 = load i8, ptr %base_used, align 1, !dbg !2325
  %zext121 = zext i8 %73 to i32, !dbg !2325
  %mul = mul i32 %zext120, %zext121, !dbg !2324
  %74 = load i8, ptr %c74, align 1, !dbg !2326
  %zext122 = zext i8 %74 to i32, !dbg !2326
  %sub123 = sub i32 %mul, %zext122, !dbg !2324
  %trunc124 = trunc i32 %sub123 to i8, !dbg !2324
  store i8 %trunc124, ptr %new_value, align 1, !dbg !2324
  %75 = load i8, ptr %new_value, align 1, !dbg !2327
  %76 = load i8, ptr %value, align 1, !dbg !2328
  %gt125 = icmp ugt i8 %75, %76, !dbg !2327
  br i1 %gt125, label %if.then126, label %if.exit127, !dbg !2327

if.then126:                                       ; preds = %if.then119
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var117, align 8, !dbg !2329
  br label %guard_block140, !dbg !2329

if.exit127:                                       ; preds = %if.then119
  %77 = load i8, ptr %new_value, align 1, !dbg !2330
  store i8 %77, ptr %blockret118, align 1, !dbg !2330
  br label %expr_block.exit139, !dbg !2330

if.exit128:                                       ; preds = %if.exit116
  call void @llvm.dbg.declare(metadata ptr %new_value129, metadata !2331, metadata !DIExpression()), !dbg !2332
  %78 = load i8, ptr %value, align 1, !dbg !2333
  %zext130 = zext i8 %78 to i32, !dbg !2333
  %79 = load i8, ptr %base_used, align 1, !dbg !2334
  %zext131 = zext i8 %79 to i32, !dbg !2334
  %mul132 = mul i32 %zext130, %zext131, !dbg !2333
  %80 = load i8, ptr %c74, align 1, !dbg !2335
  %zext133 = zext i8 %80 to i32, !dbg !2335
  %add134 = add i32 %mul132, %zext133, !dbg !2333
  %trunc135 = trunc i32 %add134 to i8, !dbg !2333
  store i8 %trunc135, ptr %new_value129, align 1, !dbg !2333
  %81 = load i8, ptr %new_value129, align 1, !dbg !2336
  %82 = load i8, ptr %value, align 1, !dbg !2337
  %lt136 = icmp ult i8 %81, %82, !dbg !2336
  br i1 %lt136, label %if.then137, label %if.exit138, !dbg !2336

if.then137:                                       ; preds = %if.exit128
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var117, align 8, !dbg !2338
  br label %guard_block140, !dbg !2338

if.exit138:                                       ; preds = %if.exit128
  %83 = load i8, ptr %new_value129, align 1, !dbg !2339
  store i8 %83, ptr %blockret118, align 1, !dbg !2339
  br label %expr_block.exit139, !dbg !2339

expr_block.exit139:                               ; preds = %if.exit138, %if.exit127
  br label %noerr_block141, !dbg !2339

guard_block140:                                   ; preds = %if.then137, %if.then126
  %84 = load i64, ptr %error_var117, align 8, !dbg !2339
  store i64 %84, ptr %reterr, align 8, !dbg !2339
  br label %err_retblock, !dbg !2339

noerr_block141:                                   ; preds = %expr_block.exit139
  %85 = load i8, ptr %blockret118, align 1, !dbg !2339
  store i8 %85, ptr %value, align 1, !dbg !2339
  br label %loop.cond72, !dbg !2339

loop.exit142:                                     ; preds = %loop.cond72
  %86 = load i8, ptr %value, align 1, !dbg !2340
  store i8 %86, ptr %blockret, align 1, !dbg !2340
  br label %expr_block.exit143, !dbg !2340

expr_block.exit143:                               ; preds = %loop.exit142, %if.then45
  %87 = load i8, ptr %blockret, align 1, !dbg !2340
  store i8 %87, ptr %0, align 1, !dbg !2340
  ret i64 0, !dbg !2340

err_retblock:                                     ; preds = %guard_block140, %if.then115, %guard_block, %if.then69, %if.then24, %if.then18, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !2340
  ret i64 %88, !dbg !2340

panic:                                            ; preds = %if.exit
  store i64 %21, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd16, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.69, i64 8, i32 642, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2249
  unreachable, !dbg !2249

panic28:                                          ; preds = %if.exit25
  store i64 %31, ptr %taddr29, align 8
  %94 = insertvalue %any undef, ptr %taddr29, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr30, align 8
  %96 = insertvalue %any undef, ptr %taddr30, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %97, ptr %ptradd32, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.69, i64 8, i32 655, ptr byval(%"any[]") align 8 %indirectarg34), !dbg !2264
  unreachable, !dbg !2264

panic49:                                          ; preds = %if.exit46
  store i64 %40, ptr %taddr50, align 8
  %99 = insertvalue %any undef, ptr %taddr50, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %101 = insertvalue %any undef, ptr %taddr51, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %100, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %102, ptr %ptradd53, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.69, i64 8, i32 659, ptr byval(%"any[]") align 8 %indirectarg55), !dbg !2273
  unreachable, !dbg !2273

panic79:                                          ; preds = %loop.body73
  store i64 %53, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %105, ptr %varargslots82, align 16
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %107, ptr %ptradd83, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func.69, i64 8, i32 682, ptr byval(%"any[]") align 8 %indirectarg85), !dbg !2302
  unreachable, !dbg !2302
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_double(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2341 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca double, align 8
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx43 = alloca i64, align 8
  %cmp.idx57 = alloca i64, align 8
  %cmp.idx69 = alloca i64, align 8
  %taddr88 = alloca i64, align 8
  %taddr89 = alloca i64, align 8
  %varargslots90 = alloca [2 x %any], align 16
  %indirectarg93 = alloca %"any[]", align 8
  %taddr102 = alloca i64, align 8
  %taddr103 = alloca i64, align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %varargslots118 = alloca [2 x %any], align 16
  %indirectarg121 = alloca %"any[]", align 8
  %chars125 = alloca %"char[]", align 8
  %sign126 = alloca i32, align 4
  %blockret127 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %varargslots135 = alloca [2 x %any], align 16
  %indirectarg138 = alloca %"any[]", align 8
  %taddr162 = alloca i64, align 8
  %taddr163 = alloca i64, align 8
  %varargslots164 = alloca [2 x %any], align 16
  %indirectarg167 = alloca %"any[]", align 8
  %taddr182 = alloca i64, align 8
  %taddr183 = alloca i64, align 8
  %varargslots184 = alloca [2 x %any], align 16
  %indirectarg187 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret218 = alloca i32, align 4
  %switch228 = alloca i8, align 1
  %taddr260 = alloca i64, align 8
  %taddr261 = alloca i64, align 8
  %varargslots262 = alloca [2 x %any], align 16
  %indirectarg265 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr290 = alloca i64, align 8
  %taddr291 = alloca i64, align 8
  %varargslots292 = alloca [2 x %any], align 16
  %indirectarg295 = alloca %"any[]", align 8
  %taddr298 = alloca i64, align 8
  %varargslots299 = alloca [1 x %any], align 16
  %indirectarg301 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x346 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x350 = alloca double, align 8
  %y351 = alloca double, align 8
  %x374 = alloca double, align 8
  %n376 = alloca i32, align 4
  %chars380 = alloca %"char[]", align 8
  %sign381 = alloca i32, align 4
  %blockret382 = alloca double, align 8
  %x385 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index386 = alloca i64, align 8
  %got_digit387 = alloca i8, align 1
  %taddr391 = alloca i64, align 8
  %taddr392 = alloca i64, align 8
  %varargslots393 = alloca [2 x %any], align 16
  %indirectarg396 = alloca %"any[]", align 8
  %got_rad399 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc400 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len401 = alloca i64, align 8
  %last_char403 = alloca i64, align 8
  %c408 = alloca i8, align 1
  %taddr413 = alloca i64, align 8
  %taddr414 = alloca i64, align 8
  %varargslots415 = alloca [2 x %any], align 16
  %indirectarg418 = alloca %"any[]", align 8
  %taddr446 = alloca i64, align 8
  %taddr447 = alloca i64, align 8
  %varargslots448 = alloca [2 x %any], align 16
  %indirectarg451 = alloca %"any[]", align 8
  %taddr466 = alloca i64, align 8
  %taddr467 = alloca i64, align 8
  %varargslots468 = alloca [2 x %any], align 16
  %indirectarg471 = alloca %"any[]", align 8
  %switch491 = alloca i8, align 1
  %taddr511 = alloca i64, align 8
  %varargslots512 = alloca [1 x %any], align 16
  %indirectarg514 = alloca %"any[]", align 8
  %taddr518 = alloca i64, align 8
  %taddr519 = alloca i64, align 8
  %varargslots520 = alloca [2 x %any], align 16
  %indirectarg523 = alloca %"any[]", align 8
  %taddr528 = alloca i64, align 8
  %varargslots529 = alloca [1 x %any], align 16
  %indirectarg531 = alloca %"any[]", align 8
  %taddr535 = alloca i64, align 8
  %taddr536 = alloca i64, align 8
  %varargslots537 = alloca [2 x %any], align 16
  %indirectarg540 = alloca %"any[]", align 8
  %taddr551 = alloca i64, align 8
  %varargslots552 = alloca [1 x %any], align 16
  %indirectarg554 = alloca %"any[]", align 8
  %taddr558 = alloca i64, align 8
  %taddr559 = alloca i64, align 8
  %varargslots560 = alloca [2 x %any], align 16
  %indirectarg563 = alloca %"any[]", align 8
  %taddr592 = alloca i64, align 8
  %taddr593 = alloca i64, align 8
  %varargslots594 = alloca [2 x %any], align 16
  %indirectarg597 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr619 = alloca i64, align 8
  %taddr620 = alloca i64, align 8
  %varargslots621 = alloca [2 x %any], align 16
  %indirectarg624 = alloca %"any[]", align 8
  %taddr628 = alloca i64, align 8
  %varargslots629 = alloca [1 x %any], align 16
  %indirectarg631 = alloca %"any[]", align 8
  %retparam635 = alloca i64, align 8
  %error_var639 = alloca i64, align 8
  %taddr685 = alloca i64, align 8
  %varargslots686 = alloca [1 x %any], align 16
  %indirectarg688 = alloca %"any[]", align 8
  %taddr692 = alloca i64, align 8
  %taddr693 = alloca i64, align 8
  %varargslots694 = alloca [2 x %any], align 16
  %indirectarg697 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2705 = alloca i32, align 4
  %rp706 = alloca i64, align 8
  %taddr731 = alloca i64, align 8
  %varargslots732 = alloca [1 x %any], align 16
  %indirectarg734 = alloca %"any[]", align 8
  %taddr738 = alloca i64, align 8
  %taddr739 = alloca i64, align 8
  %varargslots740 = alloca [2 x %any], align 16
  %indirectarg743 = alloca %"any[]", align 8
  %bitlim = alloca i32, align 4
  %taddr758 = alloca i32, align 4
  %varargslots759 = alloca [1 x %any], align 16
  %indirectarg761 = alloca %"any[]", align 8
  %taddr774 = alloca i64, align 8
  %varargslots775 = alloca [1 x %any], align 16
  %indirectarg777 = alloca %"any[]", align 8
  %taddr781 = alloca i64, align 8
  %taddr782 = alloca i64, align 8
  %varargslots783 = alloca [2 x %any], align 16
  %indirectarg786 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr803 = alloca i64, align 8
  %varargslots804 = alloca [1 x %any], align 16
  %indirectarg806 = alloca %"any[]", align 8
  %taddr810 = alloca i64, align 8
  %taddr811 = alloca i64, align 8
  %varargslots812 = alloca [2 x %any], align 16
  %indirectarg815 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr824 = alloca i64, align 8
  %varargslots825 = alloca [1 x %any], align 16
  %indirectarg827 = alloca %"any[]", align 8
  %taddr831 = alloca i64, align 8
  %taddr832 = alloca i64, align 8
  %varargslots833 = alloca [2 x %any], align 16
  %indirectarg836 = alloca %"any[]", align 8
  %taddr846 = alloca i64, align 8
  %varargslots847 = alloca [1 x %any], align 16
  %indirectarg849 = alloca %"any[]", align 8
  %taddr853 = alloca i64, align 8
  %taddr854 = alloca i64, align 8
  %varargslots855 = alloca [2 x %any], align 16
  %indirectarg858 = alloca %"any[]", align 8
  %taddr864 = alloca i64, align 8
  %varargslots865 = alloca [1 x %any], align 16
  %indirectarg867 = alloca %"any[]", align 8
  %taddr871 = alloca i64, align 8
  %taddr872 = alloca i64, align 8
  %varargslots873 = alloca [2 x %any], align 16
  %indirectarg876 = alloca %"any[]", align 8
  %taddr893 = alloca i64, align 8
  %varargslots894 = alloca [1 x %any], align 16
  %indirectarg896 = alloca %"any[]", align 8
  %taddr900 = alloca i64, align 8
  %taddr901 = alloca i64, align 8
  %varargslots902 = alloca [2 x %any], align 16
  %indirectarg905 = alloca %"any[]", align 8
  %taddr924 = alloca i64, align 8
  %varargslots925 = alloca [1 x %any], align 16
  %indirectarg927 = alloca %"any[]", align 8
  %taddr931 = alloca i64, align 8
  %taddr932 = alloca i64, align 8
  %varargslots933 = alloca [2 x %any], align 16
  %indirectarg936 = alloca %"any[]", align 8
  %taddr951 = alloca i64, align 8
  %varargslots952 = alloca [1 x %any], align 16
  %indirectarg954 = alloca %"any[]", align 8
  %taddr958 = alloca i64, align 8
  %taddr959 = alloca i64, align 8
  %varargslots960 = alloca [2 x %any], align 16
  %indirectarg963 = alloca %"any[]", align 8
  %carry972 = alloca i32, align 4
  %tmp977 = alloca i64, align 8
  %taddr981 = alloca i64, align 8
  %varargslots982 = alloca [1 x %any], align 16
  %indirectarg984 = alloca %"any[]", align 8
  %taddr988 = alloca i64, align 8
  %taddr989 = alloca i64, align 8
  %varargslots990 = alloca [2 x %any], align 16
  %indirectarg993 = alloca %"any[]", align 8
  %taddr1006 = alloca i64, align 8
  %varargslots1007 = alloca [1 x %any], align 16
  %indirectarg1009 = alloca %"any[]", align 8
  %taddr1013 = alloca i64, align 8
  %taddr1014 = alloca i64, align 8
  %varargslots1015 = alloca [2 x %any], align 16
  %indirectarg1018 = alloca %"any[]", align 8
  %taddr1027 = alloca i64, align 8
  %varargslots1028 = alloca [1 x %any], align 16
  %indirectarg1030 = alloca %"any[]", align 8
  %taddr1034 = alloca i64, align 8
  %taddr1035 = alloca i64, align 8
  %varargslots1036 = alloca [2 x %any], align 16
  %indirectarg1039 = alloca %"any[]", align 8
  %taddr1055 = alloca i64, align 8
  %varargslots1056 = alloca [1 x %any], align 16
  %indirectarg1058 = alloca %"any[]", align 8
  %taddr1062 = alloca i64, align 8
  %taddr1063 = alloca i64, align 8
  %varargslots1064 = alloca [2 x %any], align 16
  %indirectarg1067 = alloca %"any[]", align 8
  %taddr1095 = alloca i64, align 8
  %varargslots1096 = alloca [1 x %any], align 16
  %indirectarg1098 = alloca %"any[]", align 8
  %taddr1102 = alloca i64, align 8
  %taddr1103 = alloca i64, align 8
  %varargslots1104 = alloca [2 x %any], align 16
  %indirectarg1107 = alloca %"any[]", align 8
  %taddr1113 = alloca i64, align 8
  %varargslots1114 = alloca [1 x %any], align 16
  %indirectarg1116 = alloca %"any[]", align 8
  %taddr1120 = alloca i64, align 8
  %taddr1121 = alloca i64, align 8
  %varargslots1122 = alloca [2 x %any], align 16
  %indirectarg1125 = alloca %"any[]", align 8
  %taddr1133 = alloca i64, align 8
  %varargslots1134 = alloca [1 x %any], align 16
  %indirectarg1136 = alloca %"any[]", align 8
  %taddr1140 = alloca i64, align 8
  %taddr1141 = alloca i64, align 8
  %varargslots1142 = alloca [2 x %any], align 16
  %indirectarg1145 = alloca %"any[]", align 8
  %carry1151 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1162 = alloca i64, align 8
  %varargslots1163 = alloca [1 x %any], align 16
  %indirectarg1165 = alloca %"any[]", align 8
  %taddr1169 = alloca i64, align 8
  %taddr1170 = alloca i64, align 8
  %varargslots1171 = alloca [2 x %any], align 16
  %indirectarg1174 = alloca %"any[]", align 8
  %taddr1180 = alloca i64, align 8
  %varargslots1181 = alloca [1 x %any], align 16
  %indirectarg1183 = alloca %"any[]", align 8
  %taddr1187 = alloca i64, align 8
  %taddr1188 = alloca i64, align 8
  %varargslots1189 = alloca [2 x %any], align 16
  %indirectarg1192 = alloca %"any[]", align 8
  %taddr1205 = alloca i64, align 8
  %varargslots1206 = alloca [1 x %any], align 16
  %indirectarg1208 = alloca %"any[]", align 8
  %taddr1212 = alloca i64, align 8
  %taddr1213 = alloca i64, align 8
  %varargslots1214 = alloca [2 x %any], align 16
  %indirectarg1217 = alloca %"any[]", align 8
  %taddr1223 = alloca i64, align 8
  %varargslots1224 = alloca [1 x %any], align 16
  %indirectarg1226 = alloca %"any[]", align 8
  %taddr1230 = alloca i64, align 8
  %taddr1231 = alloca i64, align 8
  %varargslots1232 = alloca [2 x %any], align 16
  %indirectarg1235 = alloca %"any[]", align 8
  %tmp1257 = alloca i32, align 4
  %taddr1261 = alloca i64, align 8
  %varargslots1262 = alloca [1 x %any], align 16
  %indirectarg1264 = alloca %"any[]", align 8
  %taddr1268 = alloca i64, align 8
  %taddr1269 = alloca i64, align 8
  %varargslots1270 = alloca [2 x %any], align 16
  %indirectarg1273 = alloca %"any[]", align 8
  %taddr1277 = alloca i32, align 4
  %varargslots1278 = alloca [1 x %any], align 16
  %indirectarg1280 = alloca %"any[]", align 8
  %taddr1284 = alloca i32, align 4
  %varargslots1285 = alloca [1 x %any], align 16
  %indirectarg1287 = alloca %"any[]", align 8
  %taddr1295 = alloca i64, align 8
  %varargslots1296 = alloca [1 x %any], align 16
  %indirectarg1298 = alloca %"any[]", align 8
  %taddr1302 = alloca i64, align 8
  %taddr1303 = alloca i64, align 8
  %varargslots1304 = alloca [2 x %any], align 16
  %indirectarg1307 = alloca %"any[]", align 8
  %taddr1313 = alloca i64, align 8
  %varargslots1314 = alloca [1 x %any], align 16
  %indirectarg1316 = alloca %"any[]", align 8
  %taddr1320 = alloca i64, align 8
  %taddr1321 = alloca i64, align 8
  %varargslots1322 = alloca [2 x %any], align 16
  %indirectarg1325 = alloca %"any[]", align 8
  %taddr1330 = alloca i32, align 4
  %varargslots1331 = alloca [1 x %any], align 16
  %indirectarg1333 = alloca %"any[]", align 8
  %taddr1339 = alloca i32, align 4
  %varargslots1340 = alloca [1 x %any], align 16
  %indirectarg1342 = alloca %"any[]", align 8
  %taddr1346 = alloca i32, align 4
  %varargslots1347 = alloca [1 x %any], align 16
  %indirectarg1349 = alloca %"any[]", align 8
  %taddr1357 = alloca i64, align 8
  %varargslots1358 = alloca [1 x %any], align 16
  %indirectarg1360 = alloca %"any[]", align 8
  %taddr1364 = alloca i64, align 8
  %taddr1365 = alloca i64, align 8
  %varargslots1366 = alloca [2 x %any], align 16
  %indirectarg1369 = alloca %"any[]", align 8
  %taddr1393 = alloca i64, align 8
  %varargslots1394 = alloca [1 x %any], align 16
  %indirectarg1396 = alloca %"any[]", align 8
  %taddr1400 = alloca i64, align 8
  %taddr1401 = alloca i64, align 8
  %varargslots1402 = alloca [2 x %any], align 16
  %indirectarg1405 = alloca %"any[]", align 8
  %taddr1416 = alloca i64, align 8
  %varargslots1417 = alloca [1 x %any], align 16
  %indirectarg1419 = alloca %"any[]", align 8
  %taddr1423 = alloca i64, align 8
  %taddr1424 = alloca i64, align 8
  %varargslots1425 = alloca [2 x %any], align 16
  %indirectarg1428 = alloca %"any[]", align 8
  %y1435 = alloca double, align 8
  %i1436 = alloca i32, align 4
  %taddr1450 = alloca i64, align 8
  %varargslots1451 = alloca [1 x %any], align 16
  %indirectarg1453 = alloca %"any[]", align 8
  %taddr1457 = alloca i64, align 8
  %taddr1458 = alloca i64, align 8
  %varargslots1459 = alloca [2 x %any], align 16
  %indirectarg1462 = alloca %"any[]", align 8
  %taddr1472 = alloca i64, align 8
  %varargslots1473 = alloca [1 x %any], align 16
  %indirectarg1475 = alloca %"any[]", align 8
  %taddr1479 = alloca i64, align 8
  %taddr1480 = alloca i64, align 8
  %varargslots1481 = alloca [2 x %any], align 16
  %indirectarg1484 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1493 = alloca i32, align 4
  %bias1506 = alloca double, align 8
  %frac = alloca double, align 8
  %x1509 = alloca double, align 8
  %n1512 = alloca i32, align 4
  %mag1513 = alloca double, align 8
  %sgn1514 = alloca double, align 8
  %x1515 = alloca double, align 8
  %y1516 = alloca double, align 8
  %x1517 = alloca double, align 8
  %n1519 = alloca i32, align 4
  %t = alloca i32, align 4
  %taddr1535 = alloca i64, align 8
  %varargslots1536 = alloca [1 x %any], align 16
  %indirectarg1538 = alloca %"any[]", align 8
  %taddr1542 = alloca i64, align 8
  %taddr1543 = alloca i64, align 8
  %varargslots1544 = alloca [2 x %any], align 16
  %indirectarg1547 = alloca %"any[]", align 8
  %switch1550 = alloca i8, align 1
  %x1612 = alloca double, align 8
  %x1640 = alloca double, align 8
  %n1641 = alloca i32, align 4
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2346, metadata !DIExpression()), !dbg !2347
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %s, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %sign, metadata !2348, metadata !DIExpression()), !dbg !2350
  store i32 1, ptr %sign, align 4, !dbg !2352
  br label %loop.cond, !dbg !2353

loop.cond:                                        ; preds = %checkok12, %entry
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2354
  %3 = load i64, ptr %ptradd1, align 8, !dbg !2354
  %intbool = icmp ne i64 %3, 0, !dbg !2354
  br i1 %intbool, label %and.rhs, label %and.phi, !dbg !2354

and.rhs:                                          ; preds = %loop.cond
  %ptradd2 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2356
  %4 = load i64, ptr %ptradd2, align 8, !dbg !2356
  %5 = load ptr, ptr %chars, align 8, !dbg !2356
  %ge = icmp sge i64 0, %4, !dbg !2357
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2357
  br i1 %6, label %panic, label %checkok, !dbg !2357

checkok:                                          ; preds = %and.rhs
  %7 = load i8, ptr %5, align 1, !dbg !2357
  %eq = icmp eq i8 %7, 32, !dbg !2356
  br label %and.phi, !dbg !2356

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !2356
  br i1 %val, label %loop.body, label %loop.exit, !dbg !2356

loop.body:                                        ; preds = %and.phi
  %8 = load %"char[]", ptr %chars, align 8, !dbg !2358
  %9 = extractvalue %"char[]" %8, 0, !dbg !2358
  %10 = extractvalue %"char[]" %8, 1, !dbg !2359
  %gt = icmp sgt i64 1, %10, !dbg !2359
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2359
  br i1 %11, label %panic5, label %checkok12, !dbg !2359

checkok12:                                        ; preds = %loop.body
  %size = sub i64 %10, 1, !dbg !2358
  %ptradd13 = getelementptr inbounds i8, ptr %9, i64 1, !dbg !2358
  %12 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !2358
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !2358
  store %"char[]" %13, ptr %chars, align 8, !dbg !2358
  br label %loop.cond, !dbg !2358

loop.exit:                                        ; preds = %and.phi
  %ptradd14 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2360
  %14 = load i64, ptr %ptradd14, align 8, !dbg !2360
  %not = icmp eq i64 %14, 0, !dbg !2360
  br i1 %not, label %if.then, label %if.exit, !dbg !2360

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2361
  br label %err_retblock, !dbg !2361

if.exit:                                          ; preds = %loop.exit
  %ptradd15 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2362
  %15 = load i64, ptr %ptradd15, align 8, !dbg !2362
  %16 = load ptr, ptr %chars, align 8, !dbg !2362
  %ge16 = icmp sge i64 0, %15, !dbg !2364
  %17 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !2364
  br i1 %17, label %panic17, label %checkok24, !dbg !2364

checkok24:                                        ; preds = %if.exit
  %18 = load i8, ptr %16, align 1
  store i8 %18, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok24
  %19 = load i8, ptr %switch, align 1
  switch i8 %19, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !2365
  br label %switch.case25, !dbg !2367

switch.case25:                                    ; preds = %switch.entry, %switch.case
  %20 = load %"char[]", ptr %chars, align 8, !dbg !2368
  %21 = extractvalue %"char[]" %20, 0, !dbg !2368
  %22 = extractvalue %"char[]" %20, 1, !dbg !2370
  %gt26 = icmp sgt i64 1, %22, !dbg !2370
  %23 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !2370
  br i1 %23, label %panic27, label %checkok34, !dbg !2370

checkok34:                                        ; preds = %switch.case25
  %size35 = sub i64 %22, 1, !dbg !2368
  %ptradd36 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !2368
  %24 = insertvalue %"char[]" undef, ptr %ptradd36, 0, !dbg !2368
  %25 = insertvalue %"char[]" %24, i64 %size35, 1, !dbg !2368
  store %"char[]" %25, ptr %chars, align 8, !dbg !2368
  br label %switch.exit, !dbg !2368

switch.exit:                                      ; preds = %checkok34, %switch.entry
  %26 = load %"char[]", ptr %chars, align 8, !dbg !2371
  %27 = extractvalue %"char[]" %26, 1, !dbg !2371
  %28 = extractvalue %"char[]" %26, 0, !dbg !2371
  %eq37 = icmp eq i64 %27, 8, !dbg !2371
  br i1 %eq37, label %slice_cmp_values, label %slice_cmp_exit, !dbg !2371

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %29 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %29, %27
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd38 = getelementptr inbounds i8, ptr %28, i64 %29
  %ptradd39 = getelementptr inbounds i8, ptr @.str, i64 %29
  %30 = load i8, ptr %ptradd38, align 1
  %31 = load i8, ptr %ptradd39, align 1
  %eq40 = icmp eq i8 %30, %31
  %32 = add i64 %29, 1
  store i64 %32, ptr %cmp.idx, align 8
  br i1 %eq40, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %33 = load %"char[]", ptr %chars, align 8, !dbg !2372
  %34 = extractvalue %"char[]" %33, 1, !dbg !2372
  %35 = extractvalue %"char[]" %33, 0, !dbg !2372
  %eq41 = icmp eq i64 %34, 8, !dbg !2372
  br i1 %eq41, label %slice_cmp_values42, label %slice_cmp_exit50, !dbg !2372

slice_cmp_values42:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx43, align 8
  br label %slice_loop_start44

slice_loop_start44:                               ; preds = %slice_loop_comparison46, %slice_cmp_values42
  %36 = load i64, ptr %cmp.idx43, align 8
  %lt45 = icmp slt i64 %36, %34
  br i1 %lt45, label %slice_loop_comparison46, label %slice_cmp_exit50

slice_loop_comparison46:                          ; preds = %slice_loop_start44
  %ptradd47 = getelementptr inbounds i8, ptr %35, i64 %36
  %ptradd48 = getelementptr inbounds i8, ptr @.str.72, i64 %36
  %37 = load i8, ptr %ptradd47, align 1
  %38 = load i8, ptr %ptradd48, align 1
  %eq49 = icmp eq i8 %37, %38
  %39 = add i64 %36, 1
  store i64 %39, ptr %cmp.idx43, align 8
  br i1 %eq49, label %slice_loop_start44, label %slice_cmp_exit50

slice_cmp_exit50:                                 ; preds = %slice_loop_comparison46, %slice_loop_start44, %or.rhs
  %slice_cmp_phi51 = phi i1 [ true, %slice_loop_start44 ], [ false, %or.rhs ], [ false, %slice_loop_comparison46 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit50, %slice_cmp_exit
  %val52 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi51, %slice_cmp_exit50 ]
  br i1 %val52, label %if.then53, label %if.exit54

if.then53:                                        ; preds = %or.phi
  %40 = load i32, ptr %sign, align 4, !dbg !2373
  %sifp = sitofp i32 %40 to double, !dbg !2373
  %fmul = fmul double %sifp, 0x7FF0000000000000, !dbg !2373
  store double %fmul, ptr %blockret, align 8, !dbg !2373
  br label %expr_block.exit1644, !dbg !2373

if.exit54:                                        ; preds = %or.phi
  %41 = load %"char[]", ptr %chars, align 8, !dbg !2374
  %42 = extractvalue %"char[]" %41, 1, !dbg !2374
  %43 = extractvalue %"char[]" %41, 0, !dbg !2374
  %eq55 = icmp eq i64 %42, 3, !dbg !2374
  br i1 %eq55, label %slice_cmp_values56, label %slice_cmp_exit64, !dbg !2374

slice_cmp_values56:                               ; preds = %if.exit54
  store i64 0, ptr %cmp.idx57, align 8
  br label %slice_loop_start58

slice_loop_start58:                               ; preds = %slice_loop_comparison60, %slice_cmp_values56
  %44 = load i64, ptr %cmp.idx57, align 8
  %lt59 = icmp slt i64 %44, %42
  br i1 %lt59, label %slice_loop_comparison60, label %slice_cmp_exit64

slice_loop_comparison60:                          ; preds = %slice_loop_start58
  %ptradd61 = getelementptr inbounds i8, ptr %43, i64 %44
  %ptradd62 = getelementptr inbounds i8, ptr @.str.73, i64 %44
  %45 = load i8, ptr %ptradd61, align 1
  %46 = load i8, ptr %ptradd62, align 1
  %eq63 = icmp eq i8 %45, %46
  %47 = add i64 %44, 1
  store i64 %47, ptr %cmp.idx57, align 8
  br i1 %eq63, label %slice_loop_start58, label %slice_cmp_exit64

slice_cmp_exit64:                                 ; preds = %slice_loop_comparison60, %slice_loop_start58, %if.exit54
  %slice_cmp_phi65 = phi i1 [ true, %slice_loop_start58 ], [ false, %if.exit54 ], [ false, %slice_loop_comparison60 ]
  br i1 %slice_cmp_phi65, label %or.phi78, label %or.rhs66

or.rhs66:                                         ; preds = %slice_cmp_exit64
  %48 = load %"char[]", ptr %chars, align 8, !dbg !2375
  %49 = extractvalue %"char[]" %48, 1, !dbg !2375
  %50 = extractvalue %"char[]" %48, 0, !dbg !2375
  %eq67 = icmp eq i64 %49, 3, !dbg !2375
  br i1 %eq67, label %slice_cmp_values68, label %slice_cmp_exit76, !dbg !2375

slice_cmp_values68:                               ; preds = %or.rhs66
  store i64 0, ptr %cmp.idx69, align 8
  br label %slice_loop_start70

slice_loop_start70:                               ; preds = %slice_loop_comparison72, %slice_cmp_values68
  %51 = load i64, ptr %cmp.idx69, align 8
  %lt71 = icmp slt i64 %51, %49
  br i1 %lt71, label %slice_loop_comparison72, label %slice_cmp_exit76

slice_loop_comparison72:                          ; preds = %slice_loop_start70
  %ptradd73 = getelementptr inbounds i8, ptr %50, i64 %51
  %ptradd74 = getelementptr inbounds i8, ptr @.str.74, i64 %51
  %52 = load i8, ptr %ptradd73, align 1
  %53 = load i8, ptr %ptradd74, align 1
  %eq75 = icmp eq i8 %52, %53
  %54 = add i64 %51, 1
  store i64 %54, ptr %cmp.idx69, align 8
  br i1 %eq75, label %slice_loop_start70, label %slice_cmp_exit76

slice_cmp_exit76:                                 ; preds = %slice_loop_comparison72, %slice_loop_start70, %or.rhs66
  %slice_cmp_phi77 = phi i1 [ true, %slice_loop_start70 ], [ false, %or.rhs66 ], [ false, %slice_loop_comparison72 ]
  br label %or.phi78

or.phi78:                                         ; preds = %slice_cmp_exit76, %slice_cmp_exit64
  %val79 = phi i1 [ true, %slice_cmp_exit64 ], [ %slice_cmp_phi77, %slice_cmp_exit76 ]
  br i1 %val79, label %if.then80, label %if.exit81

if.then80:                                        ; preds = %or.phi78
  store double 0x7FF8000000000000, ptr %blockret, align 8, !dbg !2376
  br label %expr_block.exit1644, !dbg !2376

if.exit81:                                        ; preds = %or.phi78
  %ptradd82 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2377
  %55 = load i64, ptr %ptradd82, align 8, !dbg !2377
  %lt83 = icmp ult i64 2, %55, !dbg !2377
  br i1 %lt83, label %and.rhs84, label %and.phi96, !dbg !2377

and.rhs84:                                        ; preds = %if.exit81
  %ptradd85 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2378
  %56 = load i64, ptr %ptradd85, align 8, !dbg !2378
  %57 = load ptr, ptr %chars, align 8, !dbg !2378
  %ge86 = icmp sge i64 0, %56, !dbg !2379
  %58 = call i1 @llvm.expect.i1(i1 %ge86, i1 false), !dbg !2379
  br i1 %58, label %panic87, label %checkok94, !dbg !2379

checkok94:                                        ; preds = %and.rhs84
  %59 = load i8, ptr %57, align 1, !dbg !2379
  %eq95 = icmp eq i8 %59, 48, !dbg !2378
  br label %and.phi96, !dbg !2378

and.phi96:                                        ; preds = %checkok94, %if.exit81
  %val97 = phi i1 [ false, %if.exit81 ], [ %eq95, %checkok94 ], !dbg !2378
  br i1 %val97, label %and.rhs98, label %and.phi111, !dbg !2378

and.rhs98:                                        ; preds = %and.phi96
  %ptradd99 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2380
  %60 = load i64, ptr %ptradd99, align 8, !dbg !2380
  %61 = load ptr, ptr %chars, align 8, !dbg !2380
  %ge100 = icmp sge i64 1, %60, !dbg !2381
  %62 = call i1 @llvm.expect.i1(i1 %ge100, i1 false), !dbg !2381
  br i1 %62, label %panic101, label %checkok108, !dbg !2381

checkok108:                                       ; preds = %and.rhs98
  %ptradd109 = getelementptr inbounds i8, ptr %61, i64 1, !dbg !2381
  %63 = load i8, ptr %ptradd109, align 1, !dbg !2381
  %zext = zext i8 %63 to i32, !dbg !2381
  %or = or i32 %zext, 32, !dbg !2380
  %eq110 = icmp eq i32 %or, 120, !dbg !2380
  %check = icmp sge i32 %or, 0, !dbg !2380
  %siui-eq = and i1 %check, %eq110, !dbg !2380
  br label %and.phi111, !dbg !2380

and.phi111:                                       ; preds = %checkok108, %and.phi96
  %val112 = phi i1 [ false, %and.phi96 ], [ %siui-eq, %checkok108 ], !dbg !2380
  br i1 %val112, label %if.then113, label %if.exit379, !dbg !2380

if.then113:                                       ; preds = %and.phi111
  %64 = load %"char[]", ptr %chars, align 8, !dbg !2382
  %65 = extractvalue %"char[]" %64, 0, !dbg !2382
  %66 = extractvalue %"char[]" %64, 1, !dbg !2384
  %gt114 = icmp sgt i64 2, %66, !dbg !2384
  %67 = call i1 @llvm.expect.i1(i1 %gt114, i1 false), !dbg !2384
  br i1 %67, label %panic115, label %checkok122, !dbg !2384

checkok122:                                       ; preds = %if.then113
  %size123 = sub i64 %66, 2, !dbg !2385
  %ptradd124 = getelementptr inbounds i8, ptr %65, i64 2, !dbg !2385
  %68 = insertvalue %"char[]" undef, ptr %ptradd124, 0, !dbg !2385
  %69 = insertvalue %"char[]" %68, i64 %size123, 1, !dbg !2385
  store %"char[]" %69, ptr %chars125, align 8
  %70 = load i32, ptr %sign, align 4
  store i32 %70, ptr %sign126, align 4
  call void @llvm.dbg.declare(metadata ptr %scale, metadata !2386, metadata !DIExpression()), !dbg !2388
  store double 1.000000e+00, ptr %scale, align 8, !dbg !2390
  call void @llvm.dbg.declare(metadata ptr %x, metadata !2391, metadata !DIExpression()), !dbg !2392
  store i32 0, ptr %x, align 4, !dbg !2392
  call void @llvm.dbg.declare(metadata ptr %rp, metadata !2393, metadata !DIExpression()), !dbg !2394
  store i64 0, ptr %rp, align 8, !dbg !2394
  call void @llvm.dbg.declare(metadata ptr %dc, metadata !2395, metadata !DIExpression()), !dbg !2396
  store i64 0, ptr %dc, align 8, !dbg !2396
  call void @llvm.dbg.declare(metadata ptr %c, metadata !2397, metadata !DIExpression()), !dbg !2398
  call void @llvm.dbg.declare(metadata ptr %got_rad, metadata !2399, metadata !DIExpression()), !dbg !2400
  store i8 0, ptr %got_rad, align 1, !dbg !2400
  call void @llvm.dbg.declare(metadata ptr %got_digit, metadata !2401, metadata !DIExpression()), !dbg !2402
  store i8 0, ptr %got_digit, align 1, !dbg !2402
  call void @llvm.dbg.declare(metadata ptr %got_tail, metadata !2403, metadata !DIExpression()), !dbg !2404
  store i8 0, ptr %got_tail, align 1, !dbg !2404
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2405, metadata !DIExpression()), !dbg !2406
  %ptradd128 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2407
  %71 = load i64, ptr %ptradd128, align 8, !dbg !2407
  store i64 %71, ptr %len, align 8, !dbg !2407
  call void @llvm.dbg.declare(metadata ptr %last_char, metadata !2408, metadata !DIExpression()), !dbg !2409
  %72 = load i64, ptr %len, align 8, !dbg !2410
  %sub = sub i64 %72, 1, !dbg !2410
  store i64 %sub, ptr %last_char, align 8, !dbg !2410
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2411, metadata !DIExpression()), !dbg !2412
  store i64 0, ptr %index, align 8, !dbg !2412
  call void @llvm.dbg.declare(metadata ptr %y, metadata !2413, metadata !DIExpression()), !dbg !2414
  store double 0.000000e+00, ptr %y, align 8, !dbg !2414
  br label %loop.cond129, !dbg !2415

loop.cond129:                                     ; preds = %if.exit145, %checkok122
  %ptradd130 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2416
  %73 = load i64, ptr %ptradd130, align 8, !dbg !2416
  %74 = load ptr, ptr %chars125, align 8, !dbg !2416
  %75 = load i64, ptr %index, align 8, !dbg !2418
  %ge131 = icmp uge i64 %75, %73, !dbg !2418
  %76 = call i1 @llvm.expect.i1(i1 %ge131, i1 false), !dbg !2418
  br i1 %76, label %panic132, label %checkok139, !dbg !2418

checkok139:                                       ; preds = %loop.cond129
  %ptradd140 = getelementptr inbounds i8, ptr %74, i64 %75, !dbg !2418
  %77 = load i8, ptr %ptradd140, align 1, !dbg !2418
  store i8 %77, ptr %c, align 1, !dbg !2418
  %eq141 = icmp eq i8 %77, 48, !dbg !2419
  br i1 %eq141, label %loop.body142, label %loop.exit146, !dbg !2419

loop.body142:                                     ; preds = %checkok139
  %78 = load i64, ptr %index, align 8, !dbg !2420
  %79 = load i64, ptr %last_char, align 8, !dbg !2422
  %eq143 = icmp eq i64 %78, %79, !dbg !2420
  br i1 %eq143, label %if.then144, label %if.exit145, !dbg !2420

if.then144:                                       ; preds = %loop.body142
  store double 0.000000e+00, ptr %blockret127, align 8, !dbg !2423
  br label %expr_block.exit378, !dbg !2423

if.exit145:                                       ; preds = %loop.body142
  %80 = load i64, ptr %index, align 8, !dbg !2424
  %add = add i64 %80, 1, !dbg !2424
  store i64 %add, ptr %index, align 8, !dbg !2424
  br label %loop.cond129, !dbg !2424

loop.exit146:                                     ; preds = %checkok139
  %81 = load i8, ptr %c, align 1, !dbg !2425
  %eq147 = icmp eq i8 %81, 46, !dbg !2425
  br i1 %eq147, label %if.then148, label %if.exit197, !dbg !2425

if.then148:                                       ; preds = %loop.exit146
  store i8 1, ptr %got_rad, align 1, !dbg !2426
  %82 = load i64, ptr %index, align 8, !dbg !2428
  %83 = load i64, ptr %last_char, align 8, !dbg !2429
  %eq149 = icmp eq i64 %82, %83, !dbg !2428
  br i1 %eq149, label %if.then150, label %if.exit156, !dbg !2428

if.then150:                                       ; preds = %if.then148
  %84 = load i8, ptr %got_digit, align 1, !dbg !2430
  %85 = trunc i8 %84 to i1, !dbg !2430
  %not151 = xor i1 %85, true, !dbg !2430
  br i1 %not151, label %if.then152, label %if.exit153, !dbg !2430

if.then152:                                       ; preds = %if.then150
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2432
  br label %err_retblock, !dbg !2432

if.exit153:                                       ; preds = %if.then150
  %86 = load i32, ptr %sign126, align 4, !dbg !2433
  %sifp154 = sitofp i32 %86 to double, !dbg !2433
  %fmul155 = fmul double %sifp154, 0.000000e+00, !dbg !2433
  store double %fmul155, ptr %blockret127, align 8, !dbg !2433
  br label %expr_block.exit378, !dbg !2433

if.exit156:                                       ; preds = %if.then148
  %87 = load i64, ptr %index, align 8, !dbg !2434
  %88 = load i64, ptr %last_char, align 8, !dbg !2435
  %neq = icmp ne i64 %87, %88, !dbg !2434
  br i1 %neq, label %and.rhs157, label %and.phi171, !dbg !2434

and.rhs157:                                       ; preds = %if.exit156
  %ptradd158 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2436
  %89 = load i64, ptr %ptradd158, align 8, !dbg !2436
  %90 = load ptr, ptr %chars125, align 8, !dbg !2436
  %91 = load i64, ptr %index, align 8, !dbg !2437
  %add159 = add i64 %91, 1, !dbg !2437
  store i64 %add159, ptr %index, align 8, !dbg !2437
  %ge160 = icmp uge i64 %add159, %89, !dbg !2437
  %92 = call i1 @llvm.expect.i1(i1 %ge160, i1 false), !dbg !2437
  br i1 %92, label %panic161, label %checkok168, !dbg !2437

checkok168:                                       ; preds = %and.rhs157
  %ptradd169 = getelementptr inbounds i8, ptr %90, i64 %add159, !dbg !2438
  %93 = load i8, ptr %ptradd169, align 1, !dbg !2438
  store i8 %93, ptr %c, align 1, !dbg !2438
  %eq170 = icmp eq i8 %93, 48, !dbg !2439
  br label %and.phi171, !dbg !2439

and.phi171:                                       ; preds = %checkok168, %if.exit156
  %val172 = phi i1 [ false, %if.exit156 ], [ %eq170, %checkok168 ], !dbg !2439
  br i1 %val172, label %if.then173, label %if.exit196, !dbg !2439

if.then173:                                       ; preds = %and.phi171
  %94 = load i64, ptr %rp, align 8, !dbg !2440
  %sub174 = sub i64 %94, 1, !dbg !2440
  store i64 %sub174, ptr %rp, align 8, !dbg !2440
  store i8 1, ptr %got_digit, align 1, !dbg !2442
  br label %loop.cond175, !dbg !2443

loop.cond175:                                     ; preds = %loop.body193, %if.then173
  %95 = load i64, ptr %last_char, align 8, !dbg !2444
  %96 = load i64, ptr %index, align 8, !dbg !2446
  %neq176 = icmp ne i64 %95, %96, !dbg !2444
  br i1 %neq176, label %and.rhs177, label %and.phi191, !dbg !2444

and.rhs177:                                       ; preds = %loop.cond175
  %ptradd178 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2447
  %97 = load i64, ptr %ptradd178, align 8, !dbg !2447
  %98 = load ptr, ptr %chars125, align 8, !dbg !2447
  %99 = load i64, ptr %index, align 8, !dbg !2448
  %add179 = add i64 %99, 1, !dbg !2448
  store i64 %add179, ptr %index, align 8, !dbg !2448
  %ge180 = icmp uge i64 %add179, %97, !dbg !2448
  %100 = call i1 @llvm.expect.i1(i1 %ge180, i1 false), !dbg !2448
  br i1 %100, label %panic181, label %checkok188, !dbg !2448

checkok188:                                       ; preds = %and.rhs177
  %ptradd189 = getelementptr inbounds i8, ptr %98, i64 %add179, !dbg !2449
  %101 = load i8, ptr %ptradd189, align 1, !dbg !2449
  store i8 %101, ptr %c, align 1, !dbg !2449
  %eq190 = icmp eq i8 %101, 48, !dbg !2450
  br label %and.phi191, !dbg !2450

and.phi191:                                       ; preds = %checkok188, %loop.cond175
  %val192 = phi i1 [ false, %loop.cond175 ], [ %eq190, %checkok188 ], !dbg !2450
  br i1 %val192, label %loop.body193, label %loop.exit195, !dbg !2450

loop.body193:                                     ; preds = %and.phi191
  %102 = load i64, ptr %rp, align 8, !dbg !2451
  %sub194 = sub i64 %102, 1, !dbg !2451
  store i64 %sub194, ptr %rp, align 8, !dbg !2451
  br label %loop.cond175, !dbg !2451

loop.exit195:                                     ; preds = %and.phi191
  br label %if.exit196, !dbg !2451

if.exit196:                                       ; preds = %loop.exit195, %and.phi171
  br label %if.exit197, !dbg !2451

if.exit197:                                       ; preds = %if.exit196, %loop.exit146
  br label %loop.cond198, !dbg !2453

loop.cond198:                                     ; preds = %checkok266, %if.exit197
  %103 = load i8, ptr %c, align 1, !dbg !2454
  %zext199 = zext i8 %103 to i32, !dbg !2454
  %sub200 = sub i32 %zext199, 48, !dbg !2454
  %lt201 = icmp ult i32 %sub200, 10, !dbg !2454
  br i1 %lt201, label %or.phi207, label %or.rhs202, !dbg !2454

or.rhs202:                                        ; preds = %loop.cond198
  %104 = load i8, ptr %c, align 1, !dbg !2456
  %zext203 = zext i8 %104 to i32, !dbg !2456
  %or204 = or i32 %zext203, 32, !dbg !2456
  %sub205 = sub i32 %or204, 97, !dbg !2456
  %lt206 = icmp slt i32 %sub205, 6, !dbg !2456
  %siui-lt = or i1 false, %lt206, !dbg !2456
  br label %or.phi207, !dbg !2456

or.phi207:                                        ; preds = %or.rhs202, %loop.cond198
  %val208 = phi i1 [ true, %loop.cond198 ], [ %siui-lt, %or.rhs202 ], !dbg !2456
  br i1 %val208, label %or.phi211, label %or.rhs209, !dbg !2456

or.rhs209:                                        ; preds = %or.phi207
  %105 = load i8, ptr %c, align 1, !dbg !2457
  %eq210 = icmp eq i8 %105, 46, !dbg !2457
  br label %or.phi211, !dbg !2457

or.phi211:                                        ; preds = %or.rhs209, %or.phi207
  %val212 = phi i1 [ true, %or.phi207 ], [ %eq210, %or.rhs209 ], !dbg !2457
  br i1 %val212, label %loop.body213, label %loop.exit268, !dbg !2457

loop.body213:                                     ; preds = %or.phi211
  %106 = load i8, ptr %c, align 1, !dbg !2458
  %eq214 = icmp eq i8 %106, 46, !dbg !2458
  br i1 %eq214, label %if.then215, label %if.else, !dbg !2458

if.then215:                                       ; preds = %loop.body213
  %107 = load i8, ptr %got_rad, align 1, !dbg !2460
  %108 = trunc i8 %107 to i1, !dbg !2460
  br i1 %108, label %if.then216, label %if.exit217, !dbg !2460

if.then216:                                       ; preds = %if.then215
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2462
  br label %err_retblock, !dbg !2462

if.exit217:                                       ; preds = %if.then215
  store i8 1, ptr %got_rad, align 1, !dbg !2463
  %109 = load i64, ptr %dc, align 8, !dbg !2464
  store i64 %109, ptr %rp, align 8, !dbg !2464
  br label %if.exit252, !dbg !2464

if.else:                                          ; preds = %loop.body213
  store i8 1, ptr %got_digit, align 1, !dbg !2465
  call void @llvm.dbg.declare(metadata ptr %d, metadata !2467, metadata !DIExpression()), !dbg !2468
  %110 = load i8, ptr %c, align 1, !dbg !2469
  %gt219 = icmp ugt i8 %110, 57, !dbg !2469
  br i1 %gt219, label %if.then220, label %if.exit225, !dbg !2469

if.then220:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !2471
  %zext221 = zext i8 %111 to i32, !dbg !2471
  %or222 = or i32 %zext221, 32, !dbg !2471
  %add223 = add i32 %or222, 10, !dbg !2471
  %sub224 = sub i32 %add223, 97, !dbg !2471
  store i32 %sub224, ptr %blockret218, align 4, !dbg !2471
  br label %expr_block.exit, !dbg !2471

if.exit225:                                       ; preds = %if.else
  %112 = load i8, ptr %c, align 1, !dbg !2472
  %zext226 = zext i8 %112 to i32, !dbg !2472
  %sub227 = sub i32 %zext226, 48, !dbg !2472
  store i32 %sub227, ptr %blockret218, align 4, !dbg !2472
  br label %expr_block.exit, !dbg !2472

expr_block.exit:                                  ; preds = %if.exit225, %if.then220
  %113 = load i32, ptr %blockret218, align 4, !dbg !2472
  store i32 %113, ptr %d, align 4, !dbg !2472
  store i8 1, ptr %switch228, align 1
  br label %switch.entry229

switch.entry229:                                  ; preds = %expr_block.exit
  %114 = load i8, ptr %switch228, align 1
  %115 = trunc i8 %114 to i1
  %116 = load i64, ptr %dc, align 8, !dbg !2473
  %lt230 = icmp slt i64 %116, 8, !dbg !2473
  %eq231 = icmp eq i1 %lt230, %115, !dbg !2473
  br i1 %eq231, label %switch.case232, label %next_if, !dbg !2473

switch.case232:                                   ; preds = %switch.entry229
  %117 = load i32, ptr %x, align 4, !dbg !2475
  %mul = mul i32 %117, 16, !dbg !2475
  %118 = load i32, ptr %d, align 4, !dbg !2477
  %add233 = add i32 %mul, %118, !dbg !2475
  store i32 %add233, ptr %x, align 4, !dbg !2475
  br label %switch.exit250, !dbg !2475

next_if:                                          ; preds = %switch.entry229
  %119 = load i64, ptr %dc, align 8, !dbg !2478
  %lt234 = icmp slt i64 %119, 14, !dbg !2478
  %eq235 = icmp eq i1 %lt234, %115, !dbg !2478
  br i1 %eq235, label %switch.case236, label %next_if239, !dbg !2478

switch.case236:                                   ; preds = %next_if
  %120 = load double, ptr %y, align 8, !dbg !2479
  %121 = load i32, ptr %d, align 4, !dbg !2481
  %sifp237 = sitofp i32 %121 to double, !dbg !2481
  %122 = load double, ptr %scale, align 8, !dbg !2482
  %fdiv = fdiv double %122, 1.600000e+01, !dbg !2482
  store double %fdiv, ptr %scale, align 8, !dbg !2482
  %fmul238 = fmul double %sifp237, %fdiv, !dbg !2481
  %fadd = fadd double %120, %fmul238, !dbg !2479
  store double %fadd, ptr %y, align 8, !dbg !2479
  store i8 1, ptr %got_tail, align 1, !dbg !2483
  br label %switch.exit250, !dbg !2483

next_if239:                                       ; preds = %next_if
  %123 = load i32, ptr %d, align 4, !dbg !2484
  %intbool240 = icmp ne i32 %123, 0, !dbg !2484
  br i1 %intbool240, label %and.rhs241, label %and.phi243, !dbg !2484

and.rhs241:                                       ; preds = %next_if239
  %124 = load i8, ptr %got_tail, align 1, !dbg !2485
  %125 = trunc i8 %124 to i1, !dbg !2485
  %not242 = xor i1 %125, true, !dbg !2485
  br label %and.phi243, !dbg !2485

and.phi243:                                       ; preds = %and.rhs241, %next_if239
  %val244 = phi i1 [ false, %next_if239 ], [ %not242, %and.rhs241 ], !dbg !2485
  %eq245 = icmp eq i1 %val244, %115, !dbg !2485
  br i1 %eq245, label %switch.case246, label %next_if249, !dbg !2485

switch.case246:                                   ; preds = %and.phi243
  %126 = load double, ptr %y, align 8, !dbg !2486
  %127 = load double, ptr %scale, align 8, !dbg !2488
  %fmul247 = fmul double 5.000000e-01, %127, !dbg !2489
  %fadd248 = fadd double %126, %fmul247, !dbg !2486
  store double %fadd248, ptr %y, align 8, !dbg !2486
  store i8 1, ptr %got_tail, align 1, !dbg !2490
  br label %switch.exit250, !dbg !2490

next_if249:                                       ; preds = %and.phi243
  br label %switch.exit250, !dbg !2490

switch.exit250:                                   ; preds = %next_if249, %switch.case246, %switch.case236, %switch.case232
  %128 = load i64, ptr %dc, align 8, !dbg !2491
  %add251 = add i64 %128, 1, !dbg !2491
  store i64 %add251, ptr %dc, align 8, !dbg !2491
  br label %if.exit252, !dbg !2491

if.exit252:                                       ; preds = %switch.exit250, %if.exit217
  %129 = load i64, ptr %index, align 8, !dbg !2492
  %130 = load i64, ptr %last_char, align 8, !dbg !2493
  %eq253 = icmp eq i64 %129, %130, !dbg !2492
  br i1 %eq253, label %if.then254, label %if.exit255, !dbg !2492

if.then254:                                       ; preds = %if.exit252
  br label %loop.exit268, !dbg !2494

if.exit255:                                       ; preds = %if.exit252
  %ptradd256 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !2495
  %131 = load i64, ptr %ptradd256, align 8, !dbg !2495
  %132 = load ptr, ptr %chars125, align 8, !dbg !2495
  %133 = load i64, ptr %index, align 8, !dbg !2496
  %add257 = add i64 %133, 1, !dbg !2496
  store i64 %add257, ptr %index, align 8, !dbg !2496
  %ge258 = icmp uge i64 %add257, %131, !dbg !2496
  %134 = call i1 @llvm.expect.i1(i1 %ge258, i1 false), !dbg !2496
  br i1 %134, label %panic259, label %checkok266, !dbg !2496

checkok266:                                       ; preds = %if.exit255
  %ptradd267 = getelementptr inbounds i8, ptr %132, i64 %add257, !dbg !2497
  %135 = load i8, ptr %ptradd267, align 1, !dbg !2497
  store i8 %135, ptr %c, align 1, !dbg !2497
  br label %loop.cond198, !dbg !2497

loop.exit268:                                     ; preds = %if.then254, %or.phi211
  %136 = load i8, ptr %got_digit, align 1, !dbg !2498
  %137 = trunc i8 %136 to i1, !dbg !2498
  %not269 = xor i1 %137, true, !dbg !2498
  br i1 %not269, label %if.then270, label %if.exit271, !dbg !2498

if.then270:                                       ; preds = %loop.exit268
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2499
  br label %err_retblock, !dbg !2499

if.exit271:                                       ; preds = %loop.exit268
  %138 = load i8, ptr %got_rad, align 1, !dbg !2500
  %139 = trunc i8 %138 to i1, !dbg !2500
  %not272 = xor i1 %139, true, !dbg !2500
  br i1 %not272, label %if.then273, label %if.exit274, !dbg !2500

if.then273:                                       ; preds = %if.exit271
  %140 = load i64, ptr %dc, align 8, !dbg !2501
  store i64 %140, ptr %rp, align 8, !dbg !2501
  br label %if.exit274, !dbg !2501

if.exit274:                                       ; preds = %if.then273, %if.exit271
  br label %loop.cond275, !dbg !2502

loop.cond275:                                     ; preds = %loop.body277, %if.exit274
  %141 = load i64, ptr %dc, align 8, !dbg !2503
  %lt276 = icmp slt i64 %141, 8, !dbg !2503
  br i1 %lt276, label %loop.body277, label %loop.exit280, !dbg !2503

loop.body277:                                     ; preds = %loop.cond275
  %142 = load i32, ptr %x, align 4, !dbg !2505
  %mul278 = mul i32 %142, 16, !dbg !2505
  store i32 %mul278, ptr %x, align 4, !dbg !2505
  %143 = load i64, ptr %dc, align 8, !dbg !2506
  %add279 = add i64 %143, 1, !dbg !2506
  store i64 %add279, ptr %dc, align 8, !dbg !2506
  br label %loop.cond275, !dbg !2506

loop.exit280:                                     ; preds = %loop.cond275
  call void @llvm.dbg.declare(metadata ptr %e2, metadata !2507, metadata !DIExpression()), !dbg !2508
  store i64 0, ptr %e2, align 8, !dbg !2508
  %144 = load i8, ptr %c, align 1, !dbg !2509
  %zext281 = zext i8 %144 to i32, !dbg !2509
  %or282 = or i32 %zext281, 32, !dbg !2509
  %eq283 = icmp eq i32 %or282, 112, !dbg !2509
  %check284 = icmp sge i32 %or282, 0, !dbg !2509
  %siui-eq285 = and i1 %check284, %eq283, !dbg !2509
  br i1 %siui-eq285, label %if.then286, label %if.exit305, !dbg !2509

if.then286:                                       ; preds = %loop.exit280
  call void @llvm.dbg.declare(metadata ptr %e2val, metadata !2510, metadata !DIExpression()), !dbg !2512
  %145 = load %"char[]", ptr %chars125, align 8, !dbg !2513
  %146 = extractvalue %"char[]" %145, 0, !dbg !2513
  %147 = load i64, ptr %index, align 8, !dbg !2514
  %add287 = add i64 %147, 1, !dbg !2514
  %148 = extractvalue %"char[]" %145, 1, !dbg !2514
  %gt288 = icmp sgt i64 %add287, %148, !dbg !2514
  %149 = call i1 @llvm.expect.i1(i1 %gt288, i1 false), !dbg !2514
  br i1 %149, label %panic289, label %checkok296, !dbg !2514

checkok296:                                       ; preds = %if.then286
  %underflow = icmp slt i64 %add287, 0, !dbg !2515
  %150 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2515
  br i1 %150, label %panic297, label %checkok302, !dbg !2515

checkok302:                                       ; preds = %checkok296
  %size303 = sub i64 %148, %add287, !dbg !2514
  %ptradd304 = getelementptr inbounds i8, ptr %146, i64 %add287, !dbg !2514
  %151 = insertvalue %"char[]" undef, ptr %ptradd304, 0, !dbg !2514
  %152 = insertvalue %"char[]" %151, i64 %size303, 1, !dbg !2514
  %153 = call i64 @std.core.String.to_long(ptr %retparam, ptr %ptradd304, i64 %size303, i32 10), !dbg !2516
  %not_err = icmp eq i64 %153, 0, !dbg !2516
  %154 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2516
  br i1 %154, label %after_check, label %else_block, !dbg !2516

after_check:                                      ; preds = %checkok302
  %155 = load i64, ptr %retparam, align 8, !dbg !2516
  br label %phi_block, !dbg !2516

else_block:                                       ; preds = %checkok302
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !2517
  br label %guard_block, !dbg !2517

guard_block:                                      ; preds = %else_block
  %156 = load i64, ptr %error_var, align 8, !dbg !2517
  store i64 %156, ptr %reterr, align 8, !dbg !2517
  br label %err_retblock, !dbg !2517

phi_block:                                        ; preds = %after_check
  store i64 %155, ptr %e2val, align 8, !dbg !2517
  %157 = load i64, ptr %e2val, align 8, !dbg !2518
  store i64 %157, ptr %e2, align 8, !dbg !2518
  br label %if.exit305, !dbg !2518

if.exit305:                                       ; preds = %phi_block, %loop.exit280
  %158 = load i64, ptr %e2, align 8, !dbg !2519
  %159 = load i64, ptr %rp, align 8, !dbg !2520
  %mul306 = mul i64 4, %159, !dbg !2521
  %sub307 = sub i64 %mul306, 32, !dbg !2521
  %add308 = add i64 %158, %sub307, !dbg !2519
  store i64 %add308, ptr %e2, align 8, !dbg !2519
  %160 = load i32, ptr %x, align 4, !dbg !2522
  %not309 = icmp eq i32 %160, 0, !dbg !2522
  br i1 %not309, label %if.then310, label %if.exit313, !dbg !2522

if.then310:                                       ; preds = %if.exit305
  %161 = load i32, ptr %sign126, align 4, !dbg !2523
  %sifp311 = sitofp i32 %161 to double, !dbg !2523
  %fmul312 = fmul double %sifp311, 0.000000e+00, !dbg !2523
  store double %fmul312, ptr %blockret127, align 8, !dbg !2523
  br label %expr_block.exit378, !dbg !2523

if.exit313:                                       ; preds = %if.exit305
  %162 = load i64, ptr %e2, align 8, !dbg !2524
  %gt314 = icmp sgt i64 %162, 1074, !dbg !2524
  br i1 %gt314, label %if.then315, label %if.exit316, !dbg !2524

if.then315:                                       ; preds = %if.exit313
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2525
  br label %err_retblock, !dbg !2525

if.exit316:                                       ; preds = %if.exit313
  %163 = load i64, ptr %e2, align 8, !dbg !2526
  %lt317 = icmp slt i64 %163, -1180, !dbg !2526
  br i1 %lt317, label %if.then318, label %if.exit319, !dbg !2526

if.then318:                                       ; preds = %if.exit316
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2527
  br label %err_retblock, !dbg !2527

if.exit319:                                       ; preds = %if.exit316
  br label %loop.cond320, !dbg !2528

loop.cond320:                                     ; preds = %if.exit331, %if.exit319
  %164 = load i32, ptr %x, align 4, !dbg !2529
  %lt321 = icmp ult i32 %164, -2147483648, !dbg !2529
  br i1 %lt321, label %loop.body322, label %loop.exit333, !dbg !2529

loop.body322:                                     ; preds = %loop.cond320
  %165 = load double, ptr %y, align 8, !dbg !2531
  %ge323 = fcmp oge double %165, 5.000000e-01, !dbg !2531
  br i1 %ge323, label %if.then324, label %if.else328, !dbg !2531

if.then324:                                       ; preds = %loop.body322
  %166 = load i32, ptr %x, align 4, !dbg !2533
  %167 = load i32, ptr %x, align 4, !dbg !2535
  %add325 = add i32 %167, 1, !dbg !2535
  %add326 = add i32 %166, %add325, !dbg !2533
  store i32 %add326, ptr %x, align 4, !dbg !2533
  %168 = load double, ptr %y, align 8, !dbg !2536
  %169 = load double, ptr %y, align 8, !dbg !2537
  %fsub = fsub double %169, 1.000000e+00, !dbg !2537
  %fadd327 = fadd double %168, %fsub, !dbg !2536
  store double %fadd327, ptr %y, align 8, !dbg !2536
  br label %if.exit331, !dbg !2536

if.else328:                                       ; preds = %loop.body322
  %170 = load i32, ptr %x, align 4, !dbg !2538
  %171 = load i32, ptr %x, align 4, !dbg !2540
  %add329 = add i32 %170, %171, !dbg !2538
  store i32 %add329, ptr %x, align 4, !dbg !2538
  %172 = load double, ptr %y, align 8, !dbg !2541
  %173 = load double, ptr %y, align 8, !dbg !2542
  %fadd330 = fadd double %172, %173, !dbg !2541
  store double %fadd330, ptr %y, align 8, !dbg !2541
  br label %if.exit331, !dbg !2541

if.exit331:                                       ; preds = %if.else328, %if.then324
  %174 = load i64, ptr %e2, align 8, !dbg !2543
  %sub332 = sub i64 %174, 1, !dbg !2543
  store i64 %sub332, ptr %e2, align 8, !dbg !2543
  br label %loop.cond320, !dbg !2543

loop.exit333:                                     ; preds = %loop.cond320
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !2544, metadata !DIExpression()), !dbg !2545
  store i32 53, ptr %bits, align 4, !dbg !2546
  %175 = load i64, ptr %e2, align 8, !dbg !2547
  %add334 = add i64 32, %175, !dbg !2548
  %sub335 = sub i64 %add334, -1074, !dbg !2548
  %gt336 = icmp sgt i64 53, %sub335, !dbg !2549
  br i1 %gt336, label %if.then337, label %if.exit343, !dbg !2549

if.then337:                                       ; preds = %loop.exit333
  %176 = load i64, ptr %e2, align 8, !dbg !2550
  %add338 = add i64 32, %176, !dbg !2552
  %sub339 = sub i64 %add338, -1074, !dbg !2553
  %trunc = trunc i64 %sub339 to i32, !dbg !2553
  store i32 %trunc, ptr %bits, align 4, !dbg !2553
  %177 = load i32, ptr %bits, align 4, !dbg !2554
  %lt340 = icmp slt i32 %177, 0, !dbg !2554
  br i1 %lt340, label %if.then341, label %if.exit342, !dbg !2554

if.then341:                                       ; preds = %if.then337
  store i32 0, ptr %bits, align 4, !dbg !2555
  br label %if.exit342, !dbg !2555

if.exit342:                                       ; preds = %if.then341, %if.then337
  br label %if.exit343, !dbg !2555

if.exit343:                                       ; preds = %if.exit342, %loop.exit333
  call void @llvm.dbg.declare(metadata ptr %bias, metadata !2556, metadata !DIExpression()), !dbg !2557
  store double 0.000000e+00, ptr %bias, align 8, !dbg !2557
  %178 = load i32, ptr %bits, align 4, !dbg !2558
  %lt344 = icmp slt i32 %178, 53, !dbg !2558
  br i1 %lt344, label %if.then345, label %if.exit352, !dbg !2558

if.then345:                                       ; preds = %if.exit343
  store double 1.000000e+00, ptr %x346, align 8
  %179 = load i32, ptr %bits, align 4, !dbg !2559
  %sub347 = sub i32 85, %179, !dbg !2561
  %sub348 = sub i32 %sub347, 1, !dbg !2561
  store i32 %sub348, ptr %n, align 4
  %180 = load double, ptr %x346, align 8, !dbg !2562
  %181 = load i32, ptr %n, align 4, !dbg !2562
  %182 = call double @scalbn(double %180, i32 %181), !dbg !2566
  store double %182, ptr %mag, align 8
  %183 = load i32, ptr %sign126, align 4, !dbg !2567
  %sifp349 = sitofp i32 %183 to double, !dbg !2567
  store double %sifp349, ptr %sgn, align 8
  %184 = load double, ptr %mag, align 8
  store double %184, ptr %x350, align 8
  %185 = load double, ptr %sgn, align 8
  store double %185, ptr %y351, align 8
  %186 = load double, ptr %x350, align 8, !dbg !2568
  %187 = load double, ptr %sgn, align 8, !dbg !2574
  %188 = call double @llvm.copysign.f64(double %186, double %187), !dbg !2574
  store double %188, ptr %bias, align 8, !dbg !2574
  br label %if.exit352, !dbg !2574

if.exit352:                                       ; preds = %if.then345, %if.exit343
  %189 = load i32, ptr %bits, align 4, !dbg !2575
  %lt353 = icmp slt i32 %189, 32, !dbg !2575
  br i1 %lt353, label %and.rhs354, label %and.phi355, !dbg !2575

and.rhs354:                                       ; preds = %if.exit352
  %190 = load double, ptr %y, align 8, !dbg !2576
  %fpbool = fcmp une double %190, 0.000000e+00, !dbg !2576
  br label %and.phi355, !dbg !2576

and.phi355:                                       ; preds = %and.rhs354, %if.exit352
  %val356 = phi i1 [ false, %if.exit352 ], [ %fpbool, %and.rhs354 ], !dbg !2576
  br i1 %val356, label %and.rhs357, label %and.phi359, !dbg !2576

and.rhs357:                                       ; preds = %and.phi355
  %191 = load i32, ptr %x, align 4, !dbg !2577
  %and = and i32 %191, 1, !dbg !2577
  %not358 = icmp eq i32 %and, 0, !dbg !2577
  br label %and.phi359, !dbg !2577

and.phi359:                                       ; preds = %and.rhs357, %and.phi355
  %val360 = phi i1 [ false, %and.phi355 ], [ %not358, %and.rhs357 ], !dbg !2577
  br i1 %val360, label %if.then361, label %if.exit363, !dbg !2577

if.then361:                                       ; preds = %and.phi359
  %192 = load i32, ptr %x, align 4, !dbg !2578
  %add362 = add i32 %192, 1, !dbg !2578
  store i32 %add362, ptr %x, align 4, !dbg !2578
  store double 0.000000e+00, ptr %y, align 8, !dbg !2580
  br label %if.exit363, !dbg !2580

if.exit363:                                       ; preds = %if.then361, %and.phi359
  %193 = load double, ptr %bias, align 8, !dbg !2581
  %194 = load i32, ptr %sign126, align 4, !dbg !2582
  %sifp364 = sitofp i32 %194 to double, !dbg !2582
  %195 = load i32, ptr %x, align 4, !dbg !2583
  %uifp = uitofp i32 %195 to double, !dbg !2583
  %fmul365 = fmul double %sifp364, %uifp, !dbg !2582
  %fadd366 = fadd double %193, %fmul365, !dbg !2581
  %196 = load i32, ptr %sign126, align 4, !dbg !2584
  %sifp367 = sitofp i32 %196 to double, !dbg !2584
  %197 = load double, ptr %y, align 8, !dbg !2585
  %fmul368 = fmul double %sifp367, %197, !dbg !2584
  %fadd369 = fadd double %fadd366, %fmul368, !dbg !2581
  store double %fadd369, ptr %y, align 8, !dbg !2581
  %198 = load double, ptr %y, align 8, !dbg !2586
  %199 = load double, ptr %bias, align 8, !dbg !2587
  %fsub370 = fsub double %198, %199, !dbg !2586
  store double %fsub370, ptr %y, align 8, !dbg !2586
  %200 = load double, ptr %y, align 8, !dbg !2588
  %not371 = fcmp ueq double %200, 0.000000e+00, !dbg !2588
  br i1 %not371, label %if.then372, label %if.exit373, !dbg !2588

if.then372:                                       ; preds = %if.exit363
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2589
  br label %err_retblock, !dbg !2589

if.exit373:                                       ; preds = %if.exit363
  %201 = load double, ptr %y, align 8
  store double %201, ptr %x374, align 8
  %202 = load i64, ptr %e2, align 8, !dbg !2590
  %trunc375 = trunc i64 %202 to i32, !dbg !2590
  store i32 %trunc375, ptr %n376, align 4
  %203 = load double, ptr %x374, align 8, !dbg !2591
  %204 = load i32, ptr %n376, align 4, !dbg !2591
  %205 = call double @scalbn(double %203, i32 %204), !dbg !2594
  store double %205, ptr %blockret127, align 8, !dbg !2594
  br label %expr_block.exit378, !dbg !2594

expr_block.exit378:                               ; preds = %if.exit373, %if.then310, %if.exit153, %if.then144
  %206 = load double, ptr %blockret127, align 8, !dbg !2594
  store double %206, ptr %blockret, align 8, !dbg !2594
  br label %expr_block.exit1644, !dbg !2594

if.exit379:                                       ; preds = %and.phi111
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars380, ptr align 8 %chars, i32 16, i1 false)
  %207 = load i32, ptr %sign, align 4
  store i32 %207, ptr %sign381, align 4
  %ptradd383 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !2595
  %208 = load i64, ptr %ptradd383, align 8, !dbg !2595
  %lt384 = icmp ult i64 0, %208, !dbg !2595
  br i1 %lt384, label %assert_ok, label %assert_fail, !dbg !2595

assert_fail:                                      ; preds = %if.exit379
  %209 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2595
  call void %209(ptr @.panic_msg.76, i64 34, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 35), !dbg !2595
  unreachable, !dbg !2595

assert_ok:                                        ; preds = %if.exit379
  call void @llvm.dbg.declare(metadata ptr %x385, metadata !2599, metadata !DIExpression()), !dbg !2603
  call void @llvm.memset.p0.i64(ptr align 16 %x385, i8 0, i64 512, i1 false), !dbg !2603
  call void @llvm.dbg.declare(metadata ptr %emax, metadata !2604, metadata !DIExpression()), !dbg !2605
  store i32 1024, ptr %emax, align 4, !dbg !2606
  call void @llvm.dbg.declare(metadata ptr %index386, metadata !2607, metadata !DIExpression()), !dbg !2608
  store i64 0, ptr %index386, align 8, !dbg !2608
  call void @llvm.dbg.declare(metadata ptr %got_digit387, metadata !2609, metadata !DIExpression()), !dbg !2610
  %ptradd388 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !2611
  %210 = load i64, ptr %ptradd388, align 8, !dbg !2611
  %211 = load ptr, ptr %chars380, align 8, !dbg !2611
  %ge389 = icmp sge i64 0, %210, !dbg !2612
  %212 = call i1 @llvm.expect.i1(i1 %ge389, i1 false), !dbg !2612
  br i1 %212, label %panic390, label %checkok397, !dbg !2612

checkok397:                                       ; preds = %assert_ok
  %213 = load i8, ptr %211, align 1, !dbg !2612
  %eq398 = icmp eq i8 %213, 48, !dbg !2611
  %214 = zext i1 %eq398 to i8, !dbg !2611
  store i8 %214, ptr %got_digit387, align 1, !dbg !2611
  call void @llvm.dbg.declare(metadata ptr %got_rad399, metadata !2613, metadata !DIExpression()), !dbg !2614
  store i8 0, ptr %got_rad399, align 1, !dbg !2614
  call void @llvm.dbg.declare(metadata ptr %lrp, metadata !2615, metadata !DIExpression()), !dbg !2616
  store i64 0, ptr %lrp, align 8, !dbg !2616
  call void @llvm.dbg.declare(metadata ptr %dc400, metadata !2617, metadata !DIExpression()), !dbg !2618
  store i64 0, ptr %dc400, align 8, !dbg !2618
  call void @llvm.dbg.declare(metadata ptr %k, metadata !2619, metadata !DIExpression()), !dbg !2620
  store i32 0, ptr %k, align 4, !dbg !2620
  call void @llvm.dbg.declare(metadata ptr %j, metadata !2621, metadata !DIExpression()), !dbg !2622
  store i32 0, ptr %j, align 4, !dbg !2622
  call void @llvm.dbg.declare(metadata ptr %lnz, metadata !2623, metadata !DIExpression()), !dbg !2624
  store i32 0, ptr %lnz, align 4, !dbg !2624
  call void @llvm.dbg.declare(metadata ptr %len401, metadata !2625, metadata !DIExpression()), !dbg !2626
  %ptradd402 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !2627
  %215 = load i64, ptr %ptradd402, align 8, !dbg !2627
  store i64 %215, ptr %len401, align 8, !dbg !2627
  call void @llvm.dbg.declare(metadata ptr %last_char403, metadata !2628, metadata !DIExpression()), !dbg !2629
  %216 = load i64, ptr %len401, align 8, !dbg !2630
  %sub404 = sub i64 %216, 1, !dbg !2630
  store i64 %sub404, ptr %last_char403, align 8, !dbg !2630
  %217 = load i64, ptr %len401, align 8, !dbg !2631
  %intbool405 = icmp ne i64 %217, 0, !dbg !2631
  br i1 %intbool405, label %assert_ok407, label %assert_fail406, !dbg !2631

assert_fail406:                                   ; preds = %checkok397
  %218 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2631
  call void %218(ptr @.panic_msg.77, i64 16, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 52), !dbg !2631
  unreachable, !dbg !2631

assert_ok407:                                     ; preds = %checkok397
  call void @llvm.dbg.declare(metadata ptr %c408, metadata !2632, metadata !DIExpression()), !dbg !2633
  br label %loop.cond409, !dbg !2634

loop.cond409:                                     ; preds = %if.exit427, %assert_ok407
  %ptradd410 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !2635
  %219 = load i64, ptr %ptradd410, align 8, !dbg !2635
  %220 = load ptr, ptr %chars380, align 8, !dbg !2635
  %221 = load i64, ptr %index386, align 8, !dbg !2637
  %ge411 = icmp uge i64 %221, %219, !dbg !2637
  %222 = call i1 @llvm.expect.i1(i1 %ge411, i1 false), !dbg !2637
  br i1 %222, label %panic412, label %checkok419, !dbg !2637

checkok419:                                       ; preds = %loop.cond409
  %ptradd420 = getelementptr inbounds i8, ptr %220, i64 %221, !dbg !2637
  %223 = load i8, ptr %ptradd420, align 1, !dbg !2637
  store i8 %223, ptr %c408, align 1, !dbg !2637
  %eq421 = icmp eq i8 %223, 48, !dbg !2638
  br i1 %eq421, label %loop.body422, label %loop.exit429, !dbg !2638

loop.body422:                                     ; preds = %checkok419
  %224 = load i64, ptr %index386, align 8, !dbg !2639
  %225 = load i64, ptr %last_char403, align 8, !dbg !2641
  %eq423 = icmp eq i64 %224, %225, !dbg !2639
  br i1 %eq423, label %if.then424, label %if.exit427, !dbg !2639

if.then424:                                       ; preds = %loop.body422
  %226 = load i32, ptr %sign381, align 4, !dbg !2642
  %sifp425 = sitofp i32 %226 to double, !dbg !2642
  %fmul426 = fmul double %sifp425, 0.000000e+00, !dbg !2642
  store double %fmul426, ptr %blockret382, align 8, !dbg !2642
  br label %expr_block.exit1643, !dbg !2642

if.exit427:                                       ; preds = %loop.body422
  %227 = load i64, ptr %index386, align 8, !dbg !2643
  %add428 = add i64 %227, 1, !dbg !2643
  store i64 %add428, ptr %index386, align 8, !dbg !2643
  br label %loop.cond409, !dbg !2643

loop.exit429:                                     ; preds = %checkok419
  %228 = load i8, ptr %c408, align 1, !dbg !2644
  %eq430 = icmp eq i8 %228, 46, !dbg !2644
  br i1 %eq430, label %if.then431, label %if.exit481, !dbg !2644

if.then431:                                       ; preds = %loop.exit429
  store i8 1, ptr %got_rad399, align 1, !dbg !2645
  %229 = load i64, ptr %index386, align 8, !dbg !2647
  %230 = load i64, ptr %last_char403, align 8, !dbg !2648
  %eq432 = icmp eq i64 %229, %230, !dbg !2647
  br i1 %eq432, label %if.then433, label %if.exit439, !dbg !2647

if.then433:                                       ; preds = %if.then431
  %231 = load i8, ptr %got_digit387, align 1, !dbg !2649
  %232 = trunc i8 %231 to i1, !dbg !2649
  %not434 = xor i1 %232, true, !dbg !2649
  br i1 %not434, label %if.then435, label %if.exit436, !dbg !2649

if.then435:                                       ; preds = %if.then433
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2651
  br label %err_retblock, !dbg !2651

if.exit436:                                       ; preds = %if.then433
  %233 = load i32, ptr %sign381, align 4, !dbg !2652
  %sifp437 = sitofp i32 %233 to double, !dbg !2652
  %fmul438 = fmul double %sifp437, 0.000000e+00, !dbg !2652
  store double %fmul438, ptr %blockret382, align 8, !dbg !2652
  br label %expr_block.exit1643, !dbg !2652

if.exit439:                                       ; preds = %if.then431
  %234 = load i64, ptr %index386, align 8, !dbg !2653
  %235 = load i64, ptr %last_char403, align 8, !dbg !2654
  %neq440 = icmp ne i64 %234, %235, !dbg !2653
  br i1 %neq440, label %and.rhs441, label %and.phi455, !dbg !2653

and.rhs441:                                       ; preds = %if.exit439
  %ptradd442 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !2655
  %236 = load i64, ptr %ptradd442, align 8, !dbg !2655
  %237 = load ptr, ptr %chars380, align 8, !dbg !2655
  %238 = load i64, ptr %index386, align 8, !dbg !2656
  %add443 = add i64 %238, 1, !dbg !2656
  store i64 %add443, ptr %index386, align 8, !dbg !2656
  %ge444 = icmp uge i64 %add443, %236, !dbg !2656
  %239 = call i1 @llvm.expect.i1(i1 %ge444, i1 false), !dbg !2656
  br i1 %239, label %panic445, label %checkok452, !dbg !2656

checkok452:                                       ; preds = %and.rhs441
  %ptradd453 = getelementptr inbounds i8, ptr %237, i64 %add443, !dbg !2657
  %240 = load i8, ptr %ptradd453, align 1, !dbg !2657
  store i8 %240, ptr %c408, align 1, !dbg !2657
  %eq454 = icmp eq i8 %240, 48, !dbg !2658
  br label %and.phi455, !dbg !2658

and.phi455:                                       ; preds = %checkok452, %if.exit439
  %val456 = phi i1 [ false, %if.exit439 ], [ %eq454, %checkok452 ], !dbg !2658
  br i1 %val456, label %if.then457, label %if.exit480, !dbg !2658

if.then457:                                       ; preds = %and.phi455
  %241 = load i64, ptr %lrp, align 8, !dbg !2659
  %sub458 = sub i64 %241, 1, !dbg !2659
  store i64 %sub458, ptr %lrp, align 8, !dbg !2659
  store i8 1, ptr %got_digit387, align 1, !dbg !2661
  br label %loop.cond459, !dbg !2662

loop.cond459:                                     ; preds = %loop.body477, %if.then457
  %242 = load i64, ptr %last_char403, align 8, !dbg !2663
  %243 = load i64, ptr %index386, align 8, !dbg !2665
  %neq460 = icmp ne i64 %242, %243, !dbg !2663
  br i1 %neq460, label %and.rhs461, label %and.phi475, !dbg !2663

and.rhs461:                                       ; preds = %loop.cond459
  %ptradd462 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !2666
  %244 = load i64, ptr %ptradd462, align 8, !dbg !2666
  %245 = load ptr, ptr %chars380, align 8, !dbg !2666
  %246 = load i64, ptr %index386, align 8, !dbg !2667
  %add463 = add i64 %246, 1, !dbg !2667
  store i64 %add463, ptr %index386, align 8, !dbg !2667
  %ge464 = icmp uge i64 %add463, %244, !dbg !2667
  %247 = call i1 @llvm.expect.i1(i1 %ge464, i1 false), !dbg !2667
  br i1 %247, label %panic465, label %checkok472, !dbg !2667

checkok472:                                       ; preds = %and.rhs461
  %ptradd473 = getelementptr inbounds i8, ptr %245, i64 %add463, !dbg !2668
  %248 = load i8, ptr %ptradd473, align 1, !dbg !2668
  store i8 %248, ptr %c408, align 1, !dbg !2668
  %eq474 = icmp eq i8 %248, 48, !dbg !2669
  br label %and.phi475, !dbg !2669

and.phi475:                                       ; preds = %checkok472, %loop.cond459
  %val476 = phi i1 [ false, %loop.cond459 ], [ %eq474, %checkok472 ], !dbg !2669
  br i1 %val476, label %loop.body477, label %loop.exit479, !dbg !2669

loop.body477:                                     ; preds = %and.phi475
  %249 = load i64, ptr %lrp, align 8, !dbg !2670
  %sub478 = sub i64 %249, 1, !dbg !2670
  store i64 %sub478, ptr %lrp, align 8, !dbg !2670
  br label %loop.cond459, !dbg !2670

loop.exit479:                                     ; preds = %and.phi475
  br label %if.exit480, !dbg !2670

if.exit480:                                       ; preds = %loop.exit479, %and.phi455
  br label %if.exit481, !dbg !2670

if.exit481:                                       ; preds = %if.exit480, %loop.exit429
  br label %loop.cond482, !dbg !2672

loop.cond482:                                     ; preds = %checkok598, %if.exit481
  %250 = load i8, ptr %c408, align 1, !dbg !2673
  %zext483 = zext i8 %250 to i32, !dbg !2673
  %sub484 = sub i32 %zext483, 48, !dbg !2673
  %lt485 = icmp ult i32 %sub484, 10, !dbg !2673
  br i1 %lt485, label %or.phi488, label %or.rhs486, !dbg !2673

or.rhs486:                                        ; preds = %loop.cond482
  %251 = load i8, ptr %c408, align 1, !dbg !2675
  %eq487 = icmp eq i8 %251, 46, !dbg !2675
  br label %or.phi488, !dbg !2675

or.phi488:                                        ; preds = %or.rhs486, %loop.cond482
  %val489 = phi i1 [ true, %loop.cond482 ], [ %eq487, %or.rhs486 ], !dbg !2675
  br i1 %val489, label %loop.body490, label %loop.exit600, !dbg !2675

loop.body490:                                     ; preds = %or.phi488
  store i8 1, ptr %switch491, align 1
  br label %switch.entry492

switch.entry492:                                  ; preds = %loop.body490
  %252 = load i8, ptr %switch491, align 1
  %253 = trunc i8 %252 to i1
  %254 = load i8, ptr %c408, align 1, !dbg !2676
  %eq493 = icmp eq i8 %254, 46, !dbg !2676
  %eq494 = icmp eq i1 %eq493, %253, !dbg !2676
  br i1 %eq494, label %switch.case495, label %next_if498, !dbg !2676

switch.case495:                                   ; preds = %switch.entry492
  %255 = load i8, ptr %got_rad399, align 1, !dbg !2679
  %256 = trunc i8 %255 to i1, !dbg !2679
  br i1 %256, label %if.then496, label %if.exit497, !dbg !2679

if.then496:                                       ; preds = %switch.case495
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2681
  br label %err_retblock, !dbg !2681

if.exit497:                                       ; preds = %switch.case495
  store i8 1, ptr %got_rad399, align 1, !dbg !2682
  %257 = load i64, ptr %dc400, align 8, !dbg !2683
  store i64 %257, ptr %lrp, align 8, !dbg !2683
  br label %switch.exit581, !dbg !2683

next_if498:                                       ; preds = %switch.entry492
  %258 = load i32, ptr %k, align 4, !dbg !2684
  %lt499 = icmp slt i32 %258, 125, !dbg !2684
  %eq500 = icmp eq i1 %lt499, %253, !dbg !2684
  br i1 %eq500, label %switch.case501, label %next_if574, !dbg !2684

switch.case501:                                   ; preds = %next_if498
  %259 = load i64, ptr %dc400, align 8, !dbg !2685
  %add502 = add i64 %259, 1, !dbg !2685
  store i64 %add502, ptr %dc400, align 8, !dbg !2685
  %260 = load i8, ptr %c408, align 1, !dbg !2687
  %neq503 = icmp ne i8 %260, 48, !dbg !2687
  br i1 %neq503, label %if.then504, label %if.exit506, !dbg !2687

if.then504:                                       ; preds = %switch.case501
  %261 = load i64, ptr %dc400, align 8, !dbg !2688
  %trunc505 = trunc i64 %261 to i32, !dbg !2688
  store i32 %trunc505, ptr %lnz, align 4, !dbg !2688
  br label %if.exit506, !dbg !2688

if.exit506:                                       ; preds = %if.then504, %switch.case501
  %262 = load i32, ptr %j, align 4, !dbg !2689
  %intbool507 = icmp ne i32 %262, 0, !dbg !2689
  br i1 %intbool507, label %if.then508, label %if.else547, !dbg !2689

if.then508:                                       ; preds = %if.exit506
  %263 = load i32, ptr %k, align 4, !dbg !2690
  %sext = sext i32 %263 to i64, !dbg !2690
  %lt509 = icmp slt i64 %sext, 0, !dbg !2690
  %264 = call i1 @llvm.expect.i1(i1 %lt509, i1 false), !dbg !2690
  br i1 %264, label %panic510, label %checkok515, !dbg !2690

checkok515:                                       ; preds = %if.then508
  %ge516 = icmp sge i64 %sext, 128, !dbg !2690
  %265 = call i1 @llvm.expect.i1(i1 %ge516, i1 false), !dbg !2690
  br i1 %265, label %panic517, label %checkok524, !dbg !2690

checkok524:                                       ; preds = %checkok515
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext, !dbg !2690
  %266 = load i32, ptr %k, align 4, !dbg !2692
  %sext525 = sext i32 %266 to i64, !dbg !2692
  %lt526 = icmp slt i64 %sext525, 0, !dbg !2692
  %267 = call i1 @llvm.expect.i1(i1 %lt526, i1 false), !dbg !2692
  br i1 %267, label %panic527, label %checkok532, !dbg !2692

checkok532:                                       ; preds = %checkok524
  %ge533 = icmp sge i64 %sext525, 128, !dbg !2692
  %268 = call i1 @llvm.expect.i1(i1 %ge533, i1 false), !dbg !2692
  br i1 %268, label %panic534, label %checkok541, !dbg !2692

checkok541:                                       ; preds = %checkok532
  %ptroffset542 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext525, !dbg !2692
  %269 = load i32, ptr %ptroffset542, align 4, !dbg !2692
  %mul543 = mul i32 %269, 10, !dbg !2693
  %270 = load i8, ptr %c408, align 1, !dbg !2694
  %zext544 = zext i8 %270 to i32, !dbg !2694
  %add545 = add i32 %mul543, %zext544, !dbg !2693
  %sub546 = sub i32 %add545, 48, !dbg !2693
  store i32 %sub546, ptr %ptroffset, align 4, !dbg !2693
  br label %if.exit568, !dbg !2693

if.else547:                                       ; preds = %if.exit506
  %271 = load i32, ptr %k, align 4, !dbg !2695
  %sext548 = sext i32 %271 to i64, !dbg !2695
  %lt549 = icmp slt i64 %sext548, 0, !dbg !2695
  %272 = call i1 @llvm.expect.i1(i1 %lt549, i1 false), !dbg !2695
  br i1 %272, label %panic550, label %checkok555, !dbg !2695

checkok555:                                       ; preds = %if.else547
  %ge556 = icmp sge i64 %sext548, 128, !dbg !2695
  %273 = call i1 @llvm.expect.i1(i1 %ge556, i1 false), !dbg !2695
  br i1 %273, label %panic557, label %checkok564, !dbg !2695

checkok564:                                       ; preds = %checkok555
  %ptroffset565 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext548, !dbg !2695
  %274 = load i8, ptr %c408, align 1, !dbg !2697
  %zext566 = zext i8 %274 to i32, !dbg !2697
  %sub567 = sub i32 %zext566, 48, !dbg !2697
  store i32 %sub567, ptr %ptroffset565, align 4, !dbg !2697
  br label %if.exit568, !dbg !2697

if.exit568:                                       ; preds = %checkok564, %checkok541
  %275 = load i32, ptr %j, align 4, !dbg !2698
  %add569 = add i32 %275, 1, !dbg !2698
  store i32 %add569, ptr %j, align 4, !dbg !2698
  %eq570 = icmp eq i32 %add569, 9, !dbg !2699
  br i1 %eq570, label %if.then571, label %if.exit573, !dbg !2699

if.then571:                                       ; preds = %if.exit568
  %276 = load i32, ptr %k, align 4, !dbg !2700
  %add572 = add i32 %276, 1, !dbg !2700
  store i32 %add572, ptr %k, align 4, !dbg !2700
  store i32 0, ptr %j, align 4, !dbg !2702
  br label %if.exit573, !dbg !2702

if.exit573:                                       ; preds = %if.then571, %if.exit568
  store i8 1, ptr %got_digit387, align 1, !dbg !2703
  br label %switch.exit581, !dbg !2703

next_if574:                                       ; preds = %next_if498
  br label %switch.default, !dbg !2703

switch.default:                                   ; preds = %next_if574
  %277 = load i64, ptr %dc400, align 8, !dbg !2704
  %add575 = add i64 %277, 1, !dbg !2704
  store i64 %add575, ptr %dc400, align 8, !dbg !2704
  %278 = load i8, ptr %c408, align 1, !dbg !2706
  %neq576 = icmp ne i8 %278, 48, !dbg !2706
  br i1 %neq576, label %if.then577, label %if.exit580, !dbg !2706

if.then577:                                       ; preds = %switch.default
  %ptradd578 = getelementptr inbounds i8, ptr %x385, i64 496, !dbg !2707
  %279 = load i32, ptr %ptradd578, align 4, !dbg !2707
  %or579 = or i32 %279, 1, !dbg !2708
  store i32 %or579, ptr %ptradd578, align 4, !dbg !2708
  br label %if.exit580, !dbg !2708

if.exit580:                                       ; preds = %if.then577, %switch.default
  br label %switch.exit581, !dbg !2708

switch.exit581:                                   ; preds = %if.exit580, %if.exit573, %if.exit497
  %280 = load i64, ptr %index386, align 8, !dbg !2709
  %281 = load i64, ptr %last_char403, align 8, !dbg !2710
  %eq582 = icmp eq i64 %280, %281, !dbg !2709
  br i1 %eq582, label %if.then583, label %if.exit584, !dbg !2709

if.then583:                                       ; preds = %switch.exit581
  br label %loop.exit600, !dbg !2711

if.exit584:                                       ; preds = %switch.exit581
  %282 = load i64, ptr %index386, align 8, !dbg !2712
  %283 = load i64, ptr %last_char403, align 8, !dbg !2713
  %lt585 = icmp ult i64 %282, %283, !dbg !2712
  br i1 %lt585, label %assert_ok587, label %assert_fail586, !dbg !2712

assert_fail586:                                   ; preds = %if.exit584
  %284 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2712
  call void %284(ptr @.panic_msg.77, i64 16, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 112), !dbg !2712
  unreachable, !dbg !2712

assert_ok587:                                     ; preds = %if.exit584
  %ptradd588 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !2714
  %285 = load i64, ptr %ptradd588, align 8, !dbg !2714
  %286 = load ptr, ptr %chars380, align 8, !dbg !2714
  %287 = load i64, ptr %index386, align 8, !dbg !2715
  %add589 = add i64 %287, 1, !dbg !2715
  store i64 %add589, ptr %index386, align 8, !dbg !2715
  %ge590 = icmp uge i64 %add589, %285, !dbg !2715
  %288 = call i1 @llvm.expect.i1(i1 %ge590, i1 false), !dbg !2715
  br i1 %288, label %panic591, label %checkok598, !dbg !2715

checkok598:                                       ; preds = %assert_ok587
  %ptradd599 = getelementptr inbounds i8, ptr %286, i64 %add589, !dbg !2716
  %289 = load i8, ptr %ptradd599, align 1, !dbg !2716
  store i8 %289, ptr %c408, align 1, !dbg !2716
  br label %loop.cond482, !dbg !2716

loop.exit600:                                     ; preds = %if.then583, %or.phi488
  %290 = load i8, ptr %got_rad399, align 1, !dbg !2717
  %291 = trunc i8 %290 to i1, !dbg !2717
  %not601 = xor i1 %291, true, !dbg !2717
  br i1 %not601, label %if.then602, label %if.exit603, !dbg !2717

if.then602:                                       ; preds = %loop.exit600
  %292 = load i64, ptr %dc400, align 8, !dbg !2718
  store i64 %292, ptr %lrp, align 8, !dbg !2718
  br label %if.exit603, !dbg !2718

if.exit603:                                       ; preds = %if.then602, %loop.exit600
  %293 = load i8, ptr %got_digit387, align 1, !dbg !2719
  %294 = trunc i8 %293 to i1, !dbg !2719
  %not604 = xor i1 %294, true, !dbg !2719
  br i1 %not604, label %if.then605, label %if.exit606, !dbg !2719

if.then605:                                       ; preds = %if.exit603
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2720
  br label %err_retblock, !dbg !2720

if.exit606:                                       ; preds = %if.exit603
  %295 = load i8, ptr %c408, align 1, !dbg !2721
  %zext607 = zext i8 %295 to i32, !dbg !2721
  %or608 = or i32 %zext607, 32, !dbg !2721
  %eq609 = icmp eq i32 %or608, 101, !dbg !2721
  %check610 = icmp sge i32 %or608, 0, !dbg !2721
  %siui-eq611 = and i1 %check610, %eq609, !dbg !2721
  br i1 %siui-eq611, label %if.then612, label %if.else643, !dbg !2721

if.then612:                                       ; preds = %if.exit606
  %296 = load i64, ptr %last_char403, align 8, !dbg !2722
  %297 = load i64, ptr %index386, align 8, !dbg !2724
  %eq613 = icmp eq i64 %296, %297, !dbg !2722
  br i1 %eq613, label %if.then614, label %if.exit615, !dbg !2722

if.then614:                                       ; preds = %if.then612
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2725
  br label %err_retblock, !dbg !2725

if.exit615:                                       ; preds = %if.then612
  call void @llvm.dbg.declare(metadata ptr %e10, metadata !2726, metadata !DIExpression()), !dbg !2727
  %298 = load %"char[]", ptr %chars380, align 8, !dbg !2728
  %299 = extractvalue %"char[]" %298, 0, !dbg !2728
  %300 = load i64, ptr %index386, align 8, !dbg !2729
  %add616 = add i64 %300, 1, !dbg !2729
  %301 = extractvalue %"char[]" %298, 1, !dbg !2729
  %gt617 = icmp sgt i64 %add616, %301, !dbg !2729
  %302 = call i1 @llvm.expect.i1(i1 %gt617, i1 false), !dbg !2729
  br i1 %302, label %panic618, label %checkok625, !dbg !2729

checkok625:                                       ; preds = %if.exit615
  %underflow626 = icmp slt i64 %add616, 0, !dbg !2730
  %303 = call i1 @llvm.expect.i1(i1 %underflow626, i1 false), !dbg !2730
  br i1 %303, label %panic627, label %checkok632, !dbg !2730

checkok632:                                       ; preds = %checkok625
  %size633 = sub i64 %301, %add616, !dbg !2729
  %ptradd634 = getelementptr inbounds i8, ptr %299, i64 %add616, !dbg !2729
  %304 = insertvalue %"char[]" undef, ptr %ptradd634, 0, !dbg !2729
  %305 = insertvalue %"char[]" %304, i64 %size633, 1, !dbg !2729
  %306 = call i64 @std.core.String.to_long(ptr %retparam635, ptr %ptradd634, i64 %size633, i32 10), !dbg !2731
  %not_err636 = icmp eq i64 %306, 0, !dbg !2731
  %307 = call i1 @llvm.expect.i1(i1 %not_err636, i1 true), !dbg !2731
  br i1 %307, label %after_check637, label %else_block638, !dbg !2731

after_check637:                                   ; preds = %checkok632
  %308 = load i64, ptr %retparam635, align 8, !dbg !2731
  br label %phi_block641, !dbg !2731

else_block638:                                    ; preds = %checkok632
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var639, align 8, !dbg !2732
  br label %guard_block640, !dbg !2732

guard_block640:                                   ; preds = %else_block638
  %309 = load i64, ptr %error_var639, align 8, !dbg !2732
  store i64 %309, ptr %reterr, align 8, !dbg !2732
  br label %err_retblock, !dbg !2732

phi_block641:                                     ; preds = %after_check637
  store i64 %308, ptr %e10, align 8, !dbg !2732
  %310 = load i64, ptr %lrp, align 8, !dbg !2733
  %311 = load i64, ptr %e10, align 8, !dbg !2734
  %add642 = add i64 %310, %311, !dbg !2733
  store i64 %add642, ptr %lrp, align 8, !dbg !2733
  br label %if.exit647, !dbg !2733

if.else643:                                       ; preds = %if.exit606
  %312 = load i64, ptr %index386, align 8, !dbg !2735
  %313 = load i64, ptr %last_char403, align 8, !dbg !2736
  %neq644 = icmp ne i64 %312, %313, !dbg !2735
  br i1 %neq644, label %if.then645, label %if.exit646, !dbg !2735

if.then645:                                       ; preds = %if.else643
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2737
  br label %err_retblock, !dbg !2737

if.exit646:                                       ; preds = %if.else643
  br label %if.exit647, !dbg !2737

if.exit647:                                       ; preds = %if.exit646, %phi_block641
  %314 = load i32, ptr %x385, align 4, !dbg !2739
  %not648 = icmp eq i32 %314, 0, !dbg !2739
  br i1 %not648, label %if.then649, label %if.exit652, !dbg !2739

if.then649:                                       ; preds = %if.exit647
  %315 = load i32, ptr %sign381, align 4, !dbg !2740
  %sifp650 = sitofp i32 %315 to double, !dbg !2740
  %fmul651 = fmul double %sifp650, 0.000000e+00, !dbg !2740
  store double %fmul651, ptr %blockret382, align 8, !dbg !2740
  br label %expr_block.exit1643, !dbg !2740

if.exit652:                                       ; preds = %if.exit647
  %316 = load i64, ptr %lrp, align 8, !dbg !2741
  %317 = load i64, ptr %dc400, align 8, !dbg !2742
  %eq653 = icmp eq i64 %316, %317, !dbg !2741
  br i1 %eq653, label %and.rhs654, label %and.phi656, !dbg !2741

and.rhs654:                                       ; preds = %if.exit652
  %318 = load i64, ptr %dc400, align 8, !dbg !2743
  %lt655 = icmp slt i64 %318, 10, !dbg !2743
  br label %and.phi656, !dbg !2743

and.phi656:                                       ; preds = %and.rhs654, %if.exit652
  %val657 = phi i1 [ false, %if.exit652 ], [ %lt655, %and.rhs654 ], !dbg !2743
  br i1 %val657, label %and.rhs658, label %and.phi664, !dbg !2743

and.rhs658:                                       ; preds = %and.phi656
  br i1 true, label %or.phi662, label %or.rhs659, !dbg !2744

or.rhs659:                                        ; preds = %and.rhs658
  %319 = load i32, ptr %x385, align 4, !dbg !2745
  %zext660 = zext i32 %319 to i64, !dbg !2745
  %lshr = lshr i64 %zext660, 53, !dbg !2746
  %320 = freeze i64 %lshr, !dbg !2746
  %eq661 = icmp eq i64 0, %320, !dbg !2746
  br label %or.phi662, !dbg !2746

or.phi662:                                        ; preds = %or.rhs659, %and.rhs658
  %val663 = phi i1 [ true, %and.rhs658 ], [ %eq661, %or.rhs659 ], !dbg !2746
  br label %and.phi664, !dbg !2746

and.phi664:                                       ; preds = %or.phi662, %and.phi656
  %val665 = phi i1 [ false, %and.phi656 ], [ %val663, %or.phi662 ], !dbg !2746
  br i1 %val665, label %if.then666, label %if.exit670, !dbg !2746

if.then666:                                       ; preds = %and.phi664
  %321 = load i32, ptr %sign381, align 4, !dbg !2747
  %sifp667 = sitofp i32 %321 to double, !dbg !2747
  %322 = load i32, ptr %x385, align 4, !dbg !2748
  %uifp668 = uitofp i32 %322 to double, !dbg !2748
  %fmul669 = fmul double %sifp667, %uifp668, !dbg !2747
  store double %fmul669, ptr %blockret382, align 8, !dbg !2747
  br label %expr_block.exit1643, !dbg !2747

if.exit670:                                       ; preds = %and.phi664
  %323 = load i64, ptr %lrp, align 8, !dbg !2749
  %gt671 = icmp sgt i64 %323, 537, !dbg !2749
  br i1 %gt671, label %if.then672, label %if.exit673, !dbg !2749

if.then672:                                       ; preds = %if.exit670
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2750
  br label %err_retblock, !dbg !2750

if.exit673:                                       ; preds = %if.exit670
  %324 = load i64, ptr %lrp, align 8, !dbg !2751
  %lt674 = icmp slt i64 %324, -1180, !dbg !2751
  br i1 %lt674, label %if.then675, label %if.exit676, !dbg !2751

if.then675:                                       ; preds = %if.exit673
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2752
  br label %err_retblock, !dbg !2752

if.exit676:                                       ; preds = %if.exit673
  %325 = load i32, ptr %j, align 4, !dbg !2753
  %intbool677 = icmp ne i32 %325, 0, !dbg !2753
  br i1 %intbool677, label %if.then678, label %if.exit704, !dbg !2753

if.then678:                                       ; preds = %if.exit676
  br label %loop.cond679, !dbg !2754

loop.cond679:                                     ; preds = %checkok698, %if.then678
  %326 = load i32, ptr %j, align 4, !dbg !2756
  %lt680 = icmp slt i32 %326, 9, !dbg !2756
  br i1 %lt680, label %loop.body681, label %loop.exit702, !dbg !2756

loop.body681:                                     ; preds = %loop.cond679
  %327 = load i32, ptr %k, align 4, !dbg !2758
  %sext682 = sext i32 %327 to i64, !dbg !2758
  %lt683 = icmp slt i64 %sext682, 0, !dbg !2758
  %328 = call i1 @llvm.expect.i1(i1 %lt683, i1 false), !dbg !2758
  br i1 %328, label %panic684, label %checkok689, !dbg !2758

checkok689:                                       ; preds = %loop.body681
  %ge690 = icmp sge i64 %sext682, 128, !dbg !2758
  %329 = call i1 @llvm.expect.i1(i1 %ge690, i1 false), !dbg !2758
  br i1 %329, label %panic691, label %checkok698, !dbg !2758

checkok698:                                       ; preds = %checkok689
  %ptroffset699 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext682, !dbg !2758
  %330 = load i32, ptr %ptroffset699, align 4, !dbg !2758
  %mul700 = mul i32 %330, 10, !dbg !2759
  store i32 %mul700, ptr %ptroffset699, align 4, !dbg !2759
  %331 = load i32, ptr %j, align 4, !dbg !2760
  %add701 = add i32 %331, 1, !dbg !2760
  store i32 %add701, ptr %j, align 4, !dbg !2760
  br label %loop.cond679, !dbg !2760

loop.exit702:                                     ; preds = %loop.cond679
  %332 = load i32, ptr %k, align 4, !dbg !2761
  %add703 = add i32 %332, 1, !dbg !2761
  store i32 %add703, ptr %k, align 4, !dbg !2761
  store i32 0, ptr %j, align 4, !dbg !2762
  br label %if.exit704, !dbg !2762

if.exit704:                                       ; preds = %loop.exit702, %if.exit676
  call void @llvm.dbg.declare(metadata ptr %a, metadata !2763, metadata !DIExpression()), !dbg !2764
  store i32 0, ptr %a, align 4, !dbg !2764
  call void @llvm.dbg.declare(metadata ptr %z, metadata !2765, metadata !DIExpression()), !dbg !2766
  %333 = load i32, ptr %k, align 4, !dbg !2767
  store i32 %333, ptr %z, align 4, !dbg !2767
  call void @llvm.dbg.declare(metadata ptr %e2705, metadata !2768, metadata !DIExpression()), !dbg !2769
  store i32 0, ptr %e2705, align 4, !dbg !2769
  call void @llvm.dbg.declare(metadata ptr %rp706, metadata !2770, metadata !DIExpression()), !dbg !2771
  %334 = load i64, ptr %lrp, align 8, !dbg !2772
  store i64 %334, ptr %rp706, align 8, !dbg !2772
  %335 = load i32, ptr %lnz, align 4, !dbg !2773
  %lt707 = icmp slt i32 %335, 9, !dbg !2773
  br i1 %lt707, label %and.rhs708, label %and.phi710, !dbg !2773

and.rhs708:                                       ; preds = %if.exit704
  %336 = load i32, ptr %lnz, align 4, !dbg !2774
  %sext709 = sext i32 %336 to i64, !dbg !2774
  %337 = load i64, ptr %rp706, align 8, !dbg !2775
  %le = icmp sle i64 %sext709, %337, !dbg !2774
  br label %and.phi710, !dbg !2774

and.phi710:                                       ; preds = %and.rhs708, %if.exit704
  %val711 = phi i1 [ false, %if.exit704 ], [ %le, %and.rhs708 ], !dbg !2774
  br i1 %val711, label %and.rhs712, label %and.phi714, !dbg !2774

and.rhs712:                                       ; preds = %and.phi710
  %338 = load i64, ptr %rp706, align 8, !dbg !2776
  %lt713 = icmp slt i64 %338, 18, !dbg !2776
  br label %and.phi714, !dbg !2776

and.phi714:                                       ; preds = %and.rhs712, %and.phi710
  %val715 = phi i1 [ false, %and.phi710 ], [ %lt713, %and.rhs712 ], !dbg !2776
  br i1 %val715, label %if.then716, label %if.exit792, !dbg !2776

if.then716:                                       ; preds = %and.phi714
  %339 = load i64, ptr %rp706, align 8, !dbg !2777
  %eq717 = icmp eq i64 %339, 9, !dbg !2777
  br i1 %eq717, label %if.then718, label %if.exit722, !dbg !2777

if.then718:                                       ; preds = %if.then716
  %340 = load i32, ptr %sign381, align 4, !dbg !2779
  %sifp719 = sitofp i32 %340 to double, !dbg !2779
  %341 = load i32, ptr %x385, align 4, !dbg !2780
  %uifp720 = uitofp i32 %341 to double, !dbg !2780
  %fmul721 = fmul double %sifp719, %uifp720, !dbg !2779
  store double %fmul721, ptr %blockret382, align 8, !dbg !2779
  br label %expr_block.exit1643, !dbg !2779

if.exit722:                                       ; preds = %if.then716
  %342 = load i64, ptr %rp706, align 8, !dbg !2781
  %lt723 = icmp slt i64 %342, 9, !dbg !2781
  br i1 %lt723, label %if.then724, label %if.exit750, !dbg !2781

if.then724:                                       ; preds = %if.exit722
  %343 = load i32, ptr %sign381, align 4, !dbg !2782
  %sifp725 = sitofp i32 %343 to double, !dbg !2782
  %344 = load i32, ptr %x385, align 4, !dbg !2783
  %uifp726 = uitofp i32 %344 to double, !dbg !2783
  %fmul727 = fmul double %sifp725, %uifp726, !dbg !2782
  %345 = load i64, ptr %rp706, align 8, !dbg !2784
  %sub728 = sub i64 8, %345, !dbg !2785
  %lt729 = icmp slt i64 %sub728, 0, !dbg !2785
  %346 = call i1 @llvm.expect.i1(i1 %lt729, i1 false), !dbg !2785
  br i1 %346, label %panic730, label %checkok735, !dbg !2785

checkok735:                                       ; preds = %if.then724
  %ge736 = icmp sge i64 %sub728, 8, !dbg !2785
  %347 = call i1 @llvm.expect.i1(i1 %ge736, i1 false), !dbg !2785
  br i1 %347, label %panic737, label %checkok744, !dbg !2785

checkok744:                                       ; preds = %checkok735
  %ptroffset745 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub728, !dbg !2785
  %348 = load i32, ptr %ptroffset745, align 4, !dbg !2785
  %sifp746 = sitofp i32 %348 to double, !dbg !2785
  %zero = fcmp ueq double %sifp746, 0.000000e+00, !dbg !2782
  %349 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2782
  br i1 %349, label %panic747, label %checkok748, !dbg !2782

checkok748:                                       ; preds = %checkok744
  %fdiv749 = fdiv double %fmul727, %sifp746, !dbg !2782
  store double %fdiv749, ptr %blockret382, align 8, !dbg !2782
  br label %expr_block.exit1643, !dbg !2782

if.exit750:                                       ; preds = %if.exit722
  call void @llvm.dbg.declare(metadata ptr %bitlim, metadata !2786, metadata !DIExpression()), !dbg !2787
  %350 = load i64, ptr %rp706, align 8, !dbg !2788
  %sub751 = sub i64 %350, 9, !dbg !2789
  %trunc752 = trunc i64 %sub751 to i32, !dbg !2789
  %mul753 = mul i32 3, %trunc752, !dbg !2790
  %sub754 = sub i32 53, %mul753, !dbg !2791
  store i32 %sub754, ptr %bitlim, align 4, !dbg !2791
  %351 = load i32, ptr %bitlim, align 4, !dbg !2792
  %gt755 = icmp sgt i32 %351, 30, !dbg !2792
  br i1 %gt755, label %or.phi765, label %or.rhs756, !dbg !2792

or.rhs756:                                        ; preds = %if.exit750
  %352 = load i32, ptr %x385, align 4, !dbg !2793
  %353 = load i32, ptr %bitlim, align 4, !dbg !2794
  %shift_exceeds = icmp uge i32 %353, 32, !dbg !2795
  %354 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2795
  br i1 %354, label %panic757, label %checkok762, !dbg !2795

checkok762:                                       ; preds = %or.rhs756
  %lshr763 = lshr i32 %352, %353, !dbg !2795
  %355 = freeze i32 %lshr763, !dbg !2795
  %eq764 = icmp eq i32 0, %355, !dbg !2795
  br label %or.phi765, !dbg !2795

or.phi765:                                        ; preds = %checkok762, %if.exit750
  %val766 = phi i1 [ true, %if.exit750 ], [ %eq764, %checkok762 ], !dbg !2795
  br i1 %val766, label %if.then767, label %if.exit791, !dbg !2795

if.then767:                                       ; preds = %or.phi765
  %356 = load i32, ptr %sign381, align 4, !dbg !2796
  %sifp768 = sitofp i32 %356 to double, !dbg !2796
  %357 = load i32, ptr %x385, align 4, !dbg !2797
  %uifp769 = uitofp i32 %357 to double, !dbg !2797
  %fmul770 = fmul double %sifp768, %uifp769, !dbg !2796
  %358 = load i64, ptr %rp706, align 8, !dbg !2798
  %sub771 = sub i64 %358, 10, !dbg !2798
  %lt772 = icmp slt i64 %sub771, 0, !dbg !2798
  %359 = call i1 @llvm.expect.i1(i1 %lt772, i1 false), !dbg !2798
  br i1 %359, label %panic773, label %checkok778, !dbg !2798

checkok778:                                       ; preds = %if.then767
  %ge779 = icmp sge i64 %sub771, 8, !dbg !2798
  %360 = call i1 @llvm.expect.i1(i1 %ge779, i1 false), !dbg !2798
  br i1 %360, label %panic780, label %checkok787, !dbg !2798

checkok787:                                       ; preds = %checkok778
  %ptroffset788 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub771, !dbg !2798
  %361 = load i32, ptr %ptroffset788, align 4, !dbg !2798
  %sifp789 = sitofp i32 %361 to double, !dbg !2798
  %fmul790 = fmul double %fmul770, %sifp789, !dbg !2796
  store double %fmul790, ptr %blockret382, align 8, !dbg !2796
  br label %expr_block.exit1643, !dbg !2796

if.exit791:                                       ; preds = %or.phi765
  br label %if.exit792, !dbg !2796

if.exit792:                                       ; preds = %if.exit791, %and.phi714
  %362 = load i64, ptr %rp706, align 8, !dbg !2799
  %smod = srem i64 %362, 9, !dbg !2799
  %intbool793 = icmp ne i64 %smod, 0, !dbg !2799
  br i1 %intbool793, label %if.then794, label %if.exit942, !dbg !2799

if.then794:                                       ; preds = %if.exit792
  call void @llvm.dbg.declare(metadata ptr %rpm9, metadata !2800, metadata !DIExpression()), !dbg !2802
  %363 = load i64, ptr %rp706, align 8, !dbg !2803
  %ge795 = icmp sge i64 %363, 0, !dbg !2803
  br i1 %ge795, label %cond.lhs, label %cond.rhs, !dbg !2803

cond.lhs:                                         ; preds = %if.then794
  %364 = load i64, ptr %rp706, align 8, !dbg !2804
  %smod796 = srem i64 %364, 9, !dbg !2804
  br label %cond.phi, !dbg !2804

cond.rhs:                                         ; preds = %if.then794
  %365 = load i64, ptr %rp706, align 8, !dbg !2805
  %smod797 = srem i64 %365, 9, !dbg !2805
  %add798 = add i64 %smod797, 9, !dbg !2805
  br label %cond.phi, !dbg !2805

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val799 = phi i64 [ %smod796, %cond.lhs ], [ %add798, %cond.rhs ], !dbg !2805
  store i64 %val799, ptr %rpm9, align 8, !dbg !2805
  call void @llvm.dbg.declare(metadata ptr %p10, metadata !2806, metadata !DIExpression()), !dbg !2807
  %366 = load i64, ptr %rpm9, align 8, !dbg !2808
  %sub800 = sub i64 8, %366, !dbg !2809
  %lt801 = icmp slt i64 %sub800, 0, !dbg !2809
  %367 = call i1 @llvm.expect.i1(i1 %lt801, i1 false), !dbg !2809
  br i1 %367, label %panic802, label %checkok807, !dbg !2809

checkok807:                                       ; preds = %cond.phi
  %ge808 = icmp sge i64 %sub800, 8, !dbg !2809
  %368 = call i1 @llvm.expect.i1(i1 %ge808, i1 false), !dbg !2809
  br i1 %368, label %panic809, label %checkok816, !dbg !2809

checkok816:                                       ; preds = %checkok807
  %ptroffset817 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub800, !dbg !2809
  %369 = load i32, ptr %ptroffset817, align 4, !dbg !2809
  store i32 %369, ptr %p10, align 4, !dbg !2809
  call void @llvm.dbg.declare(metadata ptr %carry, metadata !2810, metadata !DIExpression()), !dbg !2811
  store i32 0, ptr %carry, align 4, !dbg !2812
  %370 = load i32, ptr %a, align 4, !dbg !2813
  store i32 %370, ptr %k, align 4, !dbg !2813
  br label %loop.cond818, !dbg !2813

loop.cond818:                                     ; preds = %if.exit915, %checkok816
  %371 = load i32, ptr %k, align 4, !dbg !2815
  %372 = load i32, ptr %z, align 4, !dbg !2816
  %neq819 = icmp ne i32 %371, %372, !dbg !2815
  br i1 %neq819, label %loop.body820, label %loop.exit917, !dbg !2815

loop.body820:                                     ; preds = %loop.cond818
  call void @llvm.dbg.declare(metadata ptr %tmp, metadata !2817, metadata !DIExpression()), !dbg !2819
  %373 = load i32, ptr %k, align 4, !dbg !2820
  %sext821 = sext i32 %373 to i64, !dbg !2820
  %lt822 = icmp slt i64 %sext821, 0, !dbg !2820
  %374 = call i1 @llvm.expect.i1(i1 %lt822, i1 false), !dbg !2820
  br i1 %374, label %panic823, label %checkok828, !dbg !2820

checkok828:                                       ; preds = %loop.body820
  %ge829 = icmp sge i64 %sext821, 128, !dbg !2820
  %375 = call i1 @llvm.expect.i1(i1 %ge829, i1 false), !dbg !2820
  br i1 %375, label %panic830, label %checkok837, !dbg !2820

checkok837:                                       ; preds = %checkok828
  %ptroffset838 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext821, !dbg !2820
  %376 = load i32, ptr %ptroffset838, align 4, !dbg !2820
  %377 = load i32, ptr %p10, align 4, !dbg !2821
  %zero839 = icmp eq i32 %377, 0, !dbg !2822
  %378 = call i1 @llvm.expect.i1(i1 %zero839, i1 false), !dbg !2822
  br i1 %378, label %panic840, label %checkok841, !dbg !2822

checkok841:                                       ; preds = %checkok837
  %smod842 = srem i32 %376, %377, !dbg !2822
  store i32 %smod842, ptr %tmp, align 4, !dbg !2822
  %379 = load i32, ptr %k, align 4, !dbg !2823
  %sext843 = sext i32 %379 to i64, !dbg !2823
  %lt844 = icmp slt i64 %sext843, 0, !dbg !2823
  %380 = call i1 @llvm.expect.i1(i1 %lt844, i1 false), !dbg !2823
  br i1 %380, label %panic845, label %checkok850, !dbg !2823

checkok850:                                       ; preds = %checkok841
  %ge851 = icmp sge i64 %sext843, 128, !dbg !2823
  %381 = call i1 @llvm.expect.i1(i1 %ge851, i1 false), !dbg !2823
  br i1 %381, label %panic852, label %checkok859, !dbg !2823

checkok859:                                       ; preds = %checkok850
  %ptroffset860 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext843, !dbg !2823
  %382 = load i32, ptr %k, align 4, !dbg !2824
  %sext861 = sext i32 %382 to i64, !dbg !2824
  %lt862 = icmp slt i64 %sext861, 0, !dbg !2824
  %383 = call i1 @llvm.expect.i1(i1 %lt862, i1 false), !dbg !2824
  br i1 %383, label %panic863, label %checkok868, !dbg !2824

checkok868:                                       ; preds = %checkok859
  %ge869 = icmp sge i64 %sext861, 128, !dbg !2824
  %384 = call i1 @llvm.expect.i1(i1 %ge869, i1 false), !dbg !2824
  br i1 %384, label %panic870, label %checkok877, !dbg !2824

checkok877:                                       ; preds = %checkok868
  %ptroffset878 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext861, !dbg !2824
  %385 = load i32, ptr %ptroffset878, align 4, !dbg !2824
  %386 = load i32, ptr %p10, align 4, !dbg !2825
  %zero879 = icmp eq i32 %386, 0, !dbg !2826
  %387 = call i1 @llvm.expect.i1(i1 %zero879, i1 false), !dbg !2826
  br i1 %387, label %panic880, label %checkok881, !dbg !2826

checkok881:                                       ; preds = %checkok877
  %sdiv = sdiv i32 %385, %386, !dbg !2826
  %388 = load i32, ptr %carry, align 4, !dbg !2827
  %add882 = add i32 %sdiv, %388, !dbg !2826
  store i32 %add882, ptr %ptroffset860, align 4, !dbg !2826
  %389 = load i32, ptr %p10, align 4, !dbg !2828
  %zero883 = icmp eq i32 %389, 0, !dbg !2829
  %390 = call i1 @llvm.expect.i1(i1 %zero883, i1 false), !dbg !2829
  br i1 %390, label %panic884, label %checkok885, !dbg !2829

checkok885:                                       ; preds = %checkok881
  %sdiv886 = sdiv i32 1000000000, %389, !dbg !2829
  %391 = load i32, ptr %tmp, align 4, !dbg !2830
  %mul887 = mul i32 %sdiv886, %391, !dbg !2829
  store i32 %mul887, ptr %carry, align 4, !dbg !2829
  %392 = load i32, ptr %k, align 4, !dbg !2831
  %393 = load i32, ptr %a, align 4, !dbg !2832
  %eq888 = icmp eq i32 %392, %393, !dbg !2831
  br i1 %eq888, label %and.rhs889, label %and.phi909, !dbg !2831

and.rhs889:                                       ; preds = %checkok885
  %394 = load i32, ptr %k, align 4, !dbg !2833
  %sext890 = sext i32 %394 to i64, !dbg !2833
  %lt891 = icmp slt i64 %sext890, 0, !dbg !2833
  %395 = call i1 @llvm.expect.i1(i1 %lt891, i1 false), !dbg !2833
  br i1 %395, label %panic892, label %checkok897, !dbg !2833

checkok897:                                       ; preds = %and.rhs889
  %ge898 = icmp sge i64 %sext890, 128, !dbg !2833
  %396 = call i1 @llvm.expect.i1(i1 %ge898, i1 false), !dbg !2833
  br i1 %396, label %panic899, label %checkok906, !dbg !2833

checkok906:                                       ; preds = %checkok897
  %ptroffset907 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext890, !dbg !2833
  %397 = load i32, ptr %ptroffset907, align 4, !dbg !2833
  %not908 = icmp eq i32 %397, 0, !dbg !2833
  br label %and.phi909, !dbg !2833

and.phi909:                                       ; preds = %checkok906, %checkok885
  %val910 = phi i1 [ false, %checkok885 ], [ %not908, %checkok906 ], !dbg !2833
  br i1 %val910, label %if.then911, label %if.exit915, !dbg !2833

if.then911:                                       ; preds = %and.phi909
  %398 = load i32, ptr %a, align 4, !dbg !2834
  %add912 = add i32 %398, 1, !dbg !2834
  %and913 = and i32 %add912, 127, !dbg !2834
  store i32 %and913, ptr %a, align 4, !dbg !2834
  %399 = load i64, ptr %rp706, align 8, !dbg !2836
  %sub914 = sub i64 %399, 9, !dbg !2836
  store i64 %sub914, ptr %rp706, align 8, !dbg !2836
  br label %if.exit915, !dbg !2836

if.exit915:                                       ; preds = %if.then911, %and.phi909
  %400 = load i32, ptr %k, align 4, !dbg !2837
  %add916 = add i32 %400, 1, !dbg !2837
  store i32 %add916, ptr %k, align 4, !dbg !2837
  br label %loop.cond818, !dbg !2837

loop.exit917:                                     ; preds = %loop.cond818
  %401 = load i32, ptr %carry, align 4, !dbg !2838
  %intbool918 = icmp ne i32 %401, 0, !dbg !2838
  br i1 %intbool918, label %if.then919, label %if.exit939, !dbg !2838

if.then919:                                       ; preds = %loop.exit917
  %402 = load i32, ptr %z, align 4, !dbg !2839
  %add920 = add i32 %402, 1, !dbg !2839
  store i32 %add920, ptr %z, align 4, !dbg !2839
  %sext921 = sext i32 %402 to i64, !dbg !2839
  %lt922 = icmp slt i64 %sext921, 0, !dbg !2839
  %403 = call i1 @llvm.expect.i1(i1 %lt922, i1 false), !dbg !2839
  br i1 %403, label %panic923, label %checkok928, !dbg !2839

checkok928:                                       ; preds = %if.then919
  %ge929 = icmp sge i64 %sext921, 128, !dbg !2839
  %404 = call i1 @llvm.expect.i1(i1 %ge929, i1 false), !dbg !2839
  br i1 %404, label %panic930, label %checkok937, !dbg !2839

checkok937:                                       ; preds = %checkok928
  %ptroffset938 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext921, !dbg !2839
  %405 = load i32, ptr %carry, align 4, !dbg !2840
  store i32 %405, ptr %ptroffset938, align 4, !dbg !2840
  br label %if.exit939, !dbg !2840

if.exit939:                                       ; preds = %checkok937, %loop.exit917
  %406 = load i64, ptr %rp706, align 8, !dbg !2841
  %407 = load i64, ptr %rpm9, align 8, !dbg !2842
  %sub940 = sub i64 9, %407, !dbg !2843
  %add941 = add i64 %406, %sub940, !dbg !2841
  store i64 %add941, ptr %rp706, align 8, !dbg !2841
  br label %if.exit942, !dbg !2841

if.exit942:                                       ; preds = %if.exit939, %if.exit792
  br label %loop.cond943, !dbg !2844

loop.cond943:                                     ; preds = %if.exit1148, %if.exit942
  %408 = load i64, ptr %rp706, align 8, !dbg !2845
  %lt944 = icmp slt i64 %408, 18, !dbg !2845
  br i1 %lt944, label %or.phi969, label %or.rhs945, !dbg !2845

or.rhs945:                                        ; preds = %loop.cond943
  %409 = load i64, ptr %rp706, align 8, !dbg !2847
  %eq946 = icmp eq i64 %409, 18, !dbg !2847
  br i1 %eq946, label %and.rhs947, label %and.phi967, !dbg !2847

and.rhs947:                                       ; preds = %or.rhs945
  %410 = load i32, ptr %a, align 4, !dbg !2848
  %sext948 = sext i32 %410 to i64, !dbg !2848
  %lt949 = icmp slt i64 %sext948, 0, !dbg !2848
  %411 = call i1 @llvm.expect.i1(i1 %lt949, i1 false), !dbg !2848
  br i1 %411, label %panic950, label %checkok955, !dbg !2848

checkok955:                                       ; preds = %and.rhs947
  %ge956 = icmp sge i64 %sext948, 128, !dbg !2848
  %412 = call i1 @llvm.expect.i1(i1 %ge956, i1 false), !dbg !2848
  br i1 %412, label %panic957, label %checkok964, !dbg !2848

checkok964:                                       ; preds = %checkok955
  %ptroffset965 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext948, !dbg !2848
  %413 = load i32, ptr %ptroffset965, align 4, !dbg !2848
  %lt966 = icmp ult i32 %413, 9007199, !dbg !2849
  br label %and.phi967, !dbg !2849

and.phi967:                                       ; preds = %checkok964, %or.rhs945
  %val968 = phi i1 [ false, %or.rhs945 ], [ %lt966, %checkok964 ], !dbg !2849
  br label %or.phi969, !dbg !2849

or.phi969:                                        ; preds = %and.phi967, %loop.cond943
  %val970 = phi i1 [ true, %loop.cond943 ], [ %val968, %and.phi967 ], !dbg !2849
  br i1 %val970, label %loop.body971, label %loop.exit1149, !dbg !2849

loop.body971:                                     ; preds = %or.phi969
  call void @llvm.dbg.declare(metadata ptr %carry972, metadata !2850, metadata !DIExpression()), !dbg !2852
  store i32 0, ptr %carry972, align 4, !dbg !2853
  %414 = load i32, ptr %e2705, align 4, !dbg !2854
  %sub973 = sub i32 %414, 29, !dbg !2854
  store i32 %sub973, ptr %e2705, align 4, !dbg !2854
  %415 = load i32, ptr %z, align 4, !dbg !2855
  %sub974 = sub i32 %415, 1, !dbg !2855
  %and975 = and i32 %sub974, 127, !dbg !2855
  store i32 %and975, ptr %k, align 4, !dbg !2855
  br label %loop.body976, !dbg !2855

loop.body976:                                     ; preds = %if.exit1077, %loop.body971
  call void @llvm.dbg.declare(metadata ptr %tmp977, metadata !2857, metadata !DIExpression()), !dbg !2859
  %416 = load i32, ptr %k, align 4, !dbg !2860
  %sext978 = sext i32 %416 to i64, !dbg !2860
  %lt979 = icmp slt i64 %sext978, 0, !dbg !2860
  %417 = call i1 @llvm.expect.i1(i1 %lt979, i1 false), !dbg !2860
  br i1 %417, label %panic980, label %checkok985, !dbg !2860

checkok985:                                       ; preds = %loop.body976
  %ge986 = icmp sge i64 %sext978, 128, !dbg !2860
  %418 = call i1 @llvm.expect.i1(i1 %ge986, i1 false), !dbg !2860
  br i1 %418, label %panic987, label %checkok994, !dbg !2860

checkok994:                                       ; preds = %checkok985
  %ptroffset995 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext978, !dbg !2860
  %419 = load i32, ptr %ptroffset995, align 4, !dbg !2860
  %zext996 = zext i32 %419 to i64, !dbg !2860
  %shl = shl i64 %zext996, 29, !dbg !2861
  %420 = freeze i64 %shl, !dbg !2861
  %421 = load i32, ptr %carry972, align 4, !dbg !2862
  %zext997 = zext i32 %421 to i64, !dbg !2862
  %add998 = add i64 %420, %zext997, !dbg !2861
  store i64 %add998, ptr %tmp977, align 8, !dbg !2861
  %422 = load i64, ptr %tmp977, align 8, !dbg !2863
  %lt999 = icmp ult i64 1000000000, %422, !dbg !2863
  br i1 %lt999, label %if.then1000, label %if.else1023, !dbg !2863

if.then1000:                                      ; preds = %checkok994
  %423 = load i64, ptr %tmp977, align 8, !dbg !2864
  %sdiv1001 = sdiv i64 %423, 1000000000, !dbg !2866
  %trunc1002 = trunc i64 %sdiv1001 to i32, !dbg !2866
  store i32 %trunc1002, ptr %carry972, align 4, !dbg !2866
  %424 = load i32, ptr %k, align 4, !dbg !2867
  %sext1003 = sext i32 %424 to i64, !dbg !2867
  %lt1004 = icmp slt i64 %sext1003, 0, !dbg !2867
  %425 = call i1 @llvm.expect.i1(i1 %lt1004, i1 false), !dbg !2867
  br i1 %425, label %panic1005, label %checkok1010, !dbg !2867

checkok1010:                                      ; preds = %if.then1000
  %ge1011 = icmp sge i64 %sext1003, 128, !dbg !2867
  %426 = call i1 @llvm.expect.i1(i1 %ge1011, i1 false), !dbg !2867
  br i1 %426, label %panic1012, label %checkok1019, !dbg !2867

checkok1019:                                      ; preds = %checkok1010
  %ptroffset1020 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1003, !dbg !2867
  %427 = load i64, ptr %tmp977, align 8, !dbg !2868
  %smod1021 = srem i64 %427, 1000000000, !dbg !2869
  %trunc1022 = trunc i64 %smod1021 to i32, !dbg !2869
  store i32 %trunc1022, ptr %ptroffset1020, align 4, !dbg !2869
  br label %if.exit1043, !dbg !2869

if.else1023:                                      ; preds = %checkok994
  store i32 0, ptr %carry972, align 4, !dbg !2870
  %428 = load i32, ptr %k, align 4, !dbg !2872
  %sext1024 = sext i32 %428 to i64, !dbg !2872
  %lt1025 = icmp slt i64 %sext1024, 0, !dbg !2872
  %429 = call i1 @llvm.expect.i1(i1 %lt1025, i1 false), !dbg !2872
  br i1 %429, label %panic1026, label %checkok1031, !dbg !2872

checkok1031:                                      ; preds = %if.else1023
  %ge1032 = icmp sge i64 %sext1024, 128, !dbg !2872
  %430 = call i1 @llvm.expect.i1(i1 %ge1032, i1 false), !dbg !2872
  br i1 %430, label %panic1033, label %checkok1040, !dbg !2872

checkok1040:                                      ; preds = %checkok1031
  %ptroffset1041 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1024, !dbg !2872
  %431 = load i64, ptr %tmp977, align 8, !dbg !2873
  %trunc1042 = trunc i64 %431 to i32, !dbg !2873
  store i32 %trunc1042, ptr %ptroffset1041, align 4, !dbg !2873
  br label %if.exit1043, !dbg !2873

if.exit1043:                                      ; preds = %checkok1040, %checkok1019
  %432 = load i32, ptr %k, align 4, !dbg !2874
  %433 = load i32, ptr %z, align 4, !dbg !2875
  %sub1044 = sub i32 %433, 1, !dbg !2875
  %and1045 = and i32 %sub1044, 127, !dbg !2875
  %eq1046 = icmp eq i32 %432, %and1045, !dbg !2874
  br i1 %eq1046, label %and.rhs1047, label %and.phi1049, !dbg !2874

and.rhs1047:                                      ; preds = %if.exit1043
  %434 = load i32, ptr %k, align 4, !dbg !2876
  %435 = load i32, ptr %a, align 4, !dbg !2877
  %neq1048 = icmp ne i32 %434, %435, !dbg !2876
  br label %and.phi1049, !dbg !2876

and.phi1049:                                      ; preds = %and.rhs1047, %if.exit1043
  %val1050 = phi i1 [ false, %if.exit1043 ], [ %neq1048, %and.rhs1047 ], !dbg !2876
  br i1 %val1050, label %and.rhs1051, label %and.phi1071, !dbg !2876

and.rhs1051:                                      ; preds = %and.phi1049
  %436 = load i32, ptr %k, align 4, !dbg !2878
  %sext1052 = sext i32 %436 to i64, !dbg !2878
  %lt1053 = icmp slt i64 %sext1052, 0, !dbg !2878
  %437 = call i1 @llvm.expect.i1(i1 %lt1053, i1 false), !dbg !2878
  br i1 %437, label %panic1054, label %checkok1059, !dbg !2878

checkok1059:                                      ; preds = %and.rhs1051
  %ge1060 = icmp sge i64 %sext1052, 128, !dbg !2878
  %438 = call i1 @llvm.expect.i1(i1 %ge1060, i1 false), !dbg !2878
  br i1 %438, label %panic1061, label %checkok1068, !dbg !2878

checkok1068:                                      ; preds = %checkok1059
  %ptroffset1069 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1052, !dbg !2878
  %439 = load i32, ptr %ptroffset1069, align 4, !dbg !2878
  %not1070 = icmp eq i32 %439, 0, !dbg !2878
  br label %and.phi1071, !dbg !2878

and.phi1071:                                      ; preds = %checkok1068, %and.phi1049
  %val1072 = phi i1 [ false, %and.phi1049 ], [ %not1070, %checkok1068 ], !dbg !2878
  br i1 %val1072, label %if.then1073, label %if.exit1074, !dbg !2878

if.then1073:                                      ; preds = %and.phi1071
  %440 = load i32, ptr %k, align 4, !dbg !2879
  store i32 %440, ptr %z, align 4, !dbg !2879
  br label %if.exit1074, !dbg !2879

if.exit1074:                                      ; preds = %if.then1073, %and.phi1071
  %441 = load i32, ptr %k, align 4, !dbg !2880
  %442 = load i32, ptr %a, align 4, !dbg !2881
  %eq1075 = icmp eq i32 %441, %442, !dbg !2880
  br i1 %eq1075, label %if.then1076, label %if.exit1077, !dbg !2880

if.then1076:                                      ; preds = %if.exit1074
  br label %loop.exit1080, !dbg !2882

if.exit1077:                                      ; preds = %if.exit1074
  %443 = load i32, ptr %k, align 4, !dbg !2883
  %sub1078 = sub i32 %443, 1, !dbg !2883
  %and1079 = and i32 %sub1078, 127, !dbg !2883
  store i32 %and1079, ptr %k, align 4, !dbg !2883
  br label %loop.body976, !dbg !2883

loop.exit1080:                                    ; preds = %if.then1076
  %444 = load i32, ptr %carry972, align 4, !dbg !2884
  %intbool1081 = icmp ne i32 %444, 0, !dbg !2884
  br i1 %intbool1081, label %if.then1082, label %if.exit1148, !dbg !2884

if.then1082:                                      ; preds = %loop.exit1080
  %445 = load i64, ptr %rp706, align 8, !dbg !2885
  %add1083 = add i64 %445, 9, !dbg !2885
  store i64 %add1083, ptr %rp706, align 8, !dbg !2885
  %446 = load i32, ptr %a, align 4, !dbg !2887
  %sub1084 = sub i32 %446, 1, !dbg !2887
  %and1085 = and i32 %sub1084, 127, !dbg !2887
  store i32 %and1085, ptr %a, align 4, !dbg !2887
  %447 = load i32, ptr %a, align 4, !dbg !2888
  %448 = load i32, ptr %z, align 4, !dbg !2889
  %eq1086 = icmp eq i32 %447, %448, !dbg !2888
  br i1 %eq1086, label %if.then1087, label %if.exit1129, !dbg !2888

if.then1087:                                      ; preds = %if.then1082
  %449 = load i32, ptr %z, align 4, !dbg !2890
  %sub1088 = sub i32 %449, 1, !dbg !2890
  %and1089 = and i32 %sub1088, 127, !dbg !2890
  store i32 %and1089, ptr %z, align 4, !dbg !2890
  %450 = load i32, ptr %z, align 4, !dbg !2892
  %sub1090 = sub i32 %450, 1, !dbg !2892
  %and1091 = and i32 %sub1090, 127, !dbg !2892
  %sext1092 = sext i32 %and1091 to i64, !dbg !2892
  %lt1093 = icmp slt i64 %sext1092, 0, !dbg !2892
  %451 = call i1 @llvm.expect.i1(i1 %lt1093, i1 false), !dbg !2892
  br i1 %451, label %panic1094, label %checkok1099, !dbg !2892

checkok1099:                                      ; preds = %if.then1087
  %ge1100 = icmp sge i64 %sext1092, 128, !dbg !2892
  %452 = call i1 @llvm.expect.i1(i1 %ge1100, i1 false), !dbg !2892
  br i1 %452, label %panic1101, label %checkok1108, !dbg !2892

checkok1108:                                      ; preds = %checkok1099
  %ptroffset1109 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1092, !dbg !2892
  %453 = load i32, ptr %ptroffset1109, align 4, !dbg !2892
  %454 = load i32, ptr %z, align 4, !dbg !2893
  %sext1110 = sext i32 %454 to i64, !dbg !2893
  %lt1111 = icmp slt i64 %sext1110, 0, !dbg !2893
  %455 = call i1 @llvm.expect.i1(i1 %lt1111, i1 false), !dbg !2893
  br i1 %455, label %panic1112, label %checkok1117, !dbg !2893

checkok1117:                                      ; preds = %checkok1108
  %ge1118 = icmp sge i64 %sext1110, 128, !dbg !2893
  %456 = call i1 @llvm.expect.i1(i1 %ge1118, i1 false), !dbg !2893
  br i1 %456, label %panic1119, label %checkok1126, !dbg !2893

checkok1126:                                      ; preds = %checkok1117
  %ptroffset1127 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1110, !dbg !2893
  %457 = load i32, ptr %ptroffset1127, align 4, !dbg !2893
  %or1128 = or i32 %453, %457, !dbg !2894
  store i32 %or1128, ptr %ptroffset1109, align 4, !dbg !2894
  br label %if.exit1129, !dbg !2894

if.exit1129:                                      ; preds = %checkok1126, %if.then1082
  %458 = load i32, ptr %a, align 4, !dbg !2895
  %sext1130 = sext i32 %458 to i64, !dbg !2895
  %lt1131 = icmp slt i64 %sext1130, 0, !dbg !2895
  %459 = call i1 @llvm.expect.i1(i1 %lt1131, i1 false), !dbg !2895
  br i1 %459, label %panic1132, label %checkok1137, !dbg !2895

checkok1137:                                      ; preds = %if.exit1129
  %ge1138 = icmp sge i64 %sext1130, 128, !dbg !2895
  %460 = call i1 @llvm.expect.i1(i1 %ge1138, i1 false), !dbg !2895
  br i1 %460, label %panic1139, label %checkok1146, !dbg !2895

checkok1146:                                      ; preds = %checkok1137
  %ptroffset1147 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1130, !dbg !2895
  %461 = load i32, ptr %carry972, align 4, !dbg !2896
  store i32 %461, ptr %ptroffset1147, align 4, !dbg !2896
  br label %if.exit1148, !dbg !2896

if.exit1148:                                      ; preds = %checkok1146, %loop.exit1080
  br label %loop.cond943, !dbg !2896

loop.exit1149:                                    ; preds = %or.phi969
  br label %loop.body1150, !dbg !2897

loop.body1150:                                    ; preds = %if.exit1433, %loop.exit1149
  call void @llvm.dbg.declare(metadata ptr %carry1151, metadata !2898, metadata !DIExpression()), !dbg !2901
  store i32 0, ptr %carry1151, align 4, !dbg !2902
  call void @llvm.dbg.declare(metadata ptr %sh, metadata !2903, metadata !DIExpression()), !dbg !2904
  store i32 1, ptr %sh, align 4, !dbg !2905
  call void @llvm.dbg.declare(metadata ptr %i, metadata !2906, metadata !DIExpression()), !dbg !2907
  store i32 0, ptr %i, align 4, !dbg !2907
  store i32 0, ptr %i, align 4, !dbg !2908
  br label %loop.cond1152, !dbg !2908

loop.cond1152:                                    ; preds = %if.exit1240, %loop.body1150
  %462 = load i32, ptr %i, align 4, !dbg !2910
  %lt1153 = icmp slt i32 %462, 2, !dbg !2910
  br i1 %lt1153, label %loop.body1154, label %loop.exit1242, !dbg !2910

loop.body1154:                                    ; preds = %loop.cond1152
  %463 = load i32, ptr %a, align 4, !dbg !2911
  %464 = load i32, ptr %i, align 4, !dbg !2913
  %add1155 = add i32 %463, %464, !dbg !2911
  %and1156 = and i32 %add1155, 127, !dbg !2911
  store i32 %and1156, ptr %k, align 4, !dbg !2911
  %465 = load i32, ptr %k, align 4, !dbg !2914
  %466 = load i32, ptr %z, align 4, !dbg !2915
  %eq1157 = icmp eq i32 %465, %466, !dbg !2914
  br i1 %eq1157, label %or.phi1196, label %or.rhs1158, !dbg !2914

or.rhs1158:                                       ; preds = %loop.body1154
  %467 = load i32, ptr %k, align 4, !dbg !2916
  %sext1159 = sext i32 %467 to i64, !dbg !2916
  %lt1160 = icmp slt i64 %sext1159, 0, !dbg !2916
  %468 = call i1 @llvm.expect.i1(i1 %lt1160, i1 false), !dbg !2916
  br i1 %468, label %panic1161, label %checkok1166, !dbg !2916

checkok1166:                                      ; preds = %or.rhs1158
  %ge1167 = icmp sge i64 %sext1159, 128, !dbg !2916
  %469 = call i1 @llvm.expect.i1(i1 %ge1167, i1 false), !dbg !2916
  br i1 %469, label %panic1168, label %checkok1175, !dbg !2916

checkok1175:                                      ; preds = %checkok1166
  %ptroffset1176 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1159, !dbg !2916
  %470 = load i32, ptr %ptroffset1176, align 4, !dbg !2916
  %471 = load i32, ptr %i, align 4, !dbg !2917
  %sext1177 = sext i32 %471 to i64, !dbg !2917
  %lt1178 = icmp slt i64 %sext1177, 0, !dbg !2917
  %472 = call i1 @llvm.expect.i1(i1 %lt1178, i1 false), !dbg !2917
  br i1 %472, label %panic1179, label %checkok1184, !dbg !2917

checkok1184:                                      ; preds = %checkok1175
  %ge1185 = icmp sge i64 %sext1177, 2, !dbg !2917
  %473 = call i1 @llvm.expect.i1(i1 %ge1185, i1 false), !dbg !2917
  br i1 %473, label %panic1186, label %checkok1193, !dbg !2917

checkok1193:                                      ; preds = %checkok1184
  %ptroffset1194 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1177, !dbg !2917
  %474 = load i32, ptr %ptroffset1194, align 4, !dbg !2917
  %lt1195 = icmp ult i32 %470, %474, !dbg !2918
  br label %or.phi1196, !dbg !2918

or.phi1196:                                       ; preds = %checkok1193, %loop.body1154
  %val1197 = phi i1 [ true, %loop.body1154 ], [ %lt1195, %checkok1193 ], !dbg !2918
  br i1 %val1197, label %if.then1198, label %if.exit1199, !dbg !2918

if.then1198:                                      ; preds = %or.phi1196
  store i32 2, ptr %i, align 4, !dbg !2919
  br label %loop.exit1242, !dbg !2921

if.exit1199:                                      ; preds = %or.phi1196
  %475 = load i32, ptr %a, align 4, !dbg !2922
  %476 = load i32, ptr %i, align 4, !dbg !2923
  %add1200 = add i32 %475, %476, !dbg !2922
  %and1201 = and i32 %add1200, 127, !dbg !2922
  %sext1202 = sext i32 %and1201 to i64, !dbg !2922
  %lt1203 = icmp slt i64 %sext1202, 0, !dbg !2922
  %477 = call i1 @llvm.expect.i1(i1 %lt1203, i1 false), !dbg !2922
  br i1 %477, label %panic1204, label %checkok1209, !dbg !2922

checkok1209:                                      ; preds = %if.exit1199
  %ge1210 = icmp sge i64 %sext1202, 128, !dbg !2922
  %478 = call i1 @llvm.expect.i1(i1 %ge1210, i1 false), !dbg !2922
  br i1 %478, label %panic1211, label %checkok1218, !dbg !2922

checkok1218:                                      ; preds = %checkok1209
  %ptroffset1219 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1202, !dbg !2922
  %479 = load i32, ptr %ptroffset1219, align 4, !dbg !2922
  %480 = load i32, ptr %i, align 4, !dbg !2924
  %sext1220 = sext i32 %480 to i64, !dbg !2924
  %lt1221 = icmp slt i64 %sext1220, 0, !dbg !2924
  %481 = call i1 @llvm.expect.i1(i1 %lt1221, i1 false), !dbg !2924
  br i1 %481, label %panic1222, label %checkok1227, !dbg !2924

checkok1227:                                      ; preds = %checkok1218
  %ge1228 = icmp sge i64 %sext1220, 2, !dbg !2924
  %482 = call i1 @llvm.expect.i1(i1 %ge1228, i1 false), !dbg !2924
  br i1 %482, label %panic1229, label %checkok1236, !dbg !2924

checkok1236:                                      ; preds = %checkok1227
  %ptroffset1237 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1220, !dbg !2924
  %483 = load i32, ptr %ptroffset1237, align 4, !dbg !2924
  %gt1238 = icmp ugt i32 %479, %483, !dbg !2925
  br i1 %gt1238, label %if.then1239, label %if.exit1240, !dbg !2925

if.then1239:                                      ; preds = %checkok1236
  br label %loop.exit1242, !dbg !2926

if.exit1240:                                      ; preds = %checkok1236
  %484 = load i32, ptr %i, align 4, !dbg !2927
  %add1241 = add i32 %484, 1, !dbg !2927
  store i32 %add1241, ptr %i, align 4, !dbg !2927
  br label %loop.cond1152, !dbg !2927

loop.exit1242:                                    ; preds = %if.then1239, %if.then1198, %loop.cond1152
  %485 = load i32, ptr %i, align 4, !dbg !2928
  %eq1243 = icmp eq i32 %485, 2, !dbg !2928
  br i1 %eq1243, label %and.rhs1244, label %and.phi1246, !dbg !2928

and.rhs1244:                                      ; preds = %loop.exit1242
  %486 = load i64, ptr %rp706, align 8, !dbg !2929
  %eq1245 = icmp eq i64 %486, 18, !dbg !2929
  br label %and.phi1246, !dbg !2929

and.phi1246:                                      ; preds = %and.rhs1244, %loop.exit1242
  %val1247 = phi i1 [ false, %loop.exit1242 ], [ %eq1245, %and.rhs1244 ], !dbg !2929
  br i1 %val1247, label %if.then1248, label %if.exit1249, !dbg !2929

if.then1248:                                      ; preds = %and.phi1246
  br label %loop.exit1434, !dbg !2930

if.exit1249:                                      ; preds = %and.phi1246
  %487 = load i64, ptr %rp706, align 8, !dbg !2931
  %gt1250 = icmp sgt i64 %487, 27, !dbg !2931
  br i1 %gt1250, label %if.then1251, label %if.exit1252, !dbg !2931

if.then1251:                                      ; preds = %if.exit1249
  store i32 9, ptr %sh, align 4, !dbg !2932
  br label %if.exit1252, !dbg !2932

if.exit1252:                                      ; preds = %if.then1251, %if.exit1249
  %488 = load i32, ptr %e2705, align 4, !dbg !2933
  %489 = load i32, ptr %sh, align 4, !dbg !2934
  %add1253 = add i32 %488, %489, !dbg !2933
  store i32 %add1253, ptr %e2705, align 4, !dbg !2933
  %490 = load i32, ptr %a, align 4, !dbg !2935
  store i32 %490, ptr %k, align 4, !dbg !2935
  br label %loop.cond1254, !dbg !2935

loop.cond1254:                                    ; preds = %if.exit1380, %if.exit1252
  %491 = load i32, ptr %k, align 4, !dbg !2937
  %492 = load i32, ptr %z, align 4, !dbg !2938
  %neq1255 = icmp ne i32 %491, %492, !dbg !2937
  br i1 %neq1255, label %loop.body1256, label %loop.exit1383, !dbg !2937

loop.body1256:                                    ; preds = %loop.cond1254
  call void @llvm.dbg.declare(metadata ptr %tmp1257, metadata !2939, metadata !DIExpression()), !dbg !2941
  %493 = load i32, ptr %k, align 4, !dbg !2942
  %sext1258 = sext i32 %493 to i64, !dbg !2942
  %lt1259 = icmp slt i64 %sext1258, 0, !dbg !2942
  %494 = call i1 @llvm.expect.i1(i1 %lt1259, i1 false), !dbg !2942
  br i1 %494, label %panic1260, label %checkok1265, !dbg !2942

checkok1265:                                      ; preds = %loop.body1256
  %ge1266 = icmp sge i64 %sext1258, 128, !dbg !2942
  %495 = call i1 @llvm.expect.i1(i1 %ge1266, i1 false), !dbg !2942
  br i1 %495, label %panic1267, label %checkok1274, !dbg !2942

checkok1274:                                      ; preds = %checkok1265
  %ptroffset1275 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1258, !dbg !2942
  %496 = load i32, ptr %ptroffset1275, align 4, !dbg !2942
  %497 = load i32, ptr %sh, align 4, !dbg !2943
  %shift_underflow = icmp slt i32 %497, 0, !dbg !2944
  %498 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2944
  br i1 %498, label %panic1276, label %checkok1281, !dbg !2944

checkok1281:                                      ; preds = %checkok1274
  %shift_exceeds1282 = icmp sge i32 %497, 32, !dbg !2944
  %499 = call i1 @llvm.expect.i1(i1 %shift_exceeds1282, i1 false), !dbg !2944
  br i1 %499, label %panic1283, label %checkok1288, !dbg !2944

checkok1288:                                      ; preds = %checkok1281
  %shl1289 = shl i32 1, %497, !dbg !2944
  %500 = freeze i32 %shl1289, !dbg !2944
  %sub1290 = sub i32 %500, 1, !dbg !2944
  %and1291 = and i32 %496, %sub1290, !dbg !2945
  store i32 %and1291, ptr %tmp1257, align 4, !dbg !2945
  %501 = load i32, ptr %k, align 4, !dbg !2946
  %sext1292 = sext i32 %501 to i64, !dbg !2946
  %lt1293 = icmp slt i64 %sext1292, 0, !dbg !2946
  %502 = call i1 @llvm.expect.i1(i1 %lt1293, i1 false), !dbg !2946
  br i1 %502, label %panic1294, label %checkok1299, !dbg !2946

checkok1299:                                      ; preds = %checkok1288
  %ge1300 = icmp sge i64 %sext1292, 128, !dbg !2946
  %503 = call i1 @llvm.expect.i1(i1 %ge1300, i1 false), !dbg !2946
  br i1 %503, label %panic1301, label %checkok1308, !dbg !2946

checkok1308:                                      ; preds = %checkok1299
  %ptroffset1309 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1292, !dbg !2946
  %504 = load i32, ptr %k, align 4, !dbg !2947
  %sext1310 = sext i32 %504 to i64, !dbg !2947
  %lt1311 = icmp slt i64 %sext1310, 0, !dbg !2947
  %505 = call i1 @llvm.expect.i1(i1 %lt1311, i1 false), !dbg !2947
  br i1 %505, label %panic1312, label %checkok1317, !dbg !2947

checkok1317:                                      ; preds = %checkok1308
  %ge1318 = icmp sge i64 %sext1310, 128, !dbg !2947
  %506 = call i1 @llvm.expect.i1(i1 %ge1318, i1 false), !dbg !2947
  br i1 %506, label %panic1319, label %checkok1326, !dbg !2947

checkok1326:                                      ; preds = %checkok1317
  %ptroffset1327 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1310, !dbg !2947
  %507 = load i32, ptr %ptroffset1327, align 4, !dbg !2947
  %508 = load i32, ptr %sh, align 4, !dbg !2948
  %shift_exceeds1328 = icmp uge i32 %508, 32, !dbg !2949
  %509 = call i1 @llvm.expect.i1(i1 %shift_exceeds1328, i1 false), !dbg !2949
  br i1 %509, label %panic1329, label %checkok1334, !dbg !2949

checkok1334:                                      ; preds = %checkok1326
  %lshr1335 = lshr i32 %507, %508, !dbg !2949
  %510 = freeze i32 %lshr1335, !dbg !2949
  %511 = load i32, ptr %carry1151, align 4, !dbg !2950
  %add1336 = add i32 %510, %511, !dbg !2949
  store i32 %add1336, ptr %ptroffset1309, align 4, !dbg !2949
  %512 = load i32, ptr %sh, align 4, !dbg !2951
  %shift_underflow1337 = icmp slt i32 %512, 0, !dbg !2952
  %513 = call i1 @llvm.expect.i1(i1 %shift_underflow1337, i1 false), !dbg !2952
  br i1 %513, label %panic1338, label %checkok1343, !dbg !2952

checkok1343:                                      ; preds = %checkok1334
  %shift_exceeds1344 = icmp sge i32 %512, 32, !dbg !2952
  %514 = call i1 @llvm.expect.i1(i1 %shift_exceeds1344, i1 false), !dbg !2952
  br i1 %514, label %panic1345, label %checkok1350, !dbg !2952

checkok1350:                                      ; preds = %checkok1343
  %ashr = ashr i32 1000000000, %512, !dbg !2952
  %515 = freeze i32 %ashr, !dbg !2952
  %516 = load i32, ptr %tmp1257, align 4, !dbg !2953
  %mul1351 = mul i32 %515, %516, !dbg !2952
  store i32 %mul1351, ptr %carry1151, align 4, !dbg !2952
  %517 = load i32, ptr %k, align 4, !dbg !2954
  %518 = load i32, ptr %a, align 4, !dbg !2955
  %eq1352 = icmp eq i32 %517, %518, !dbg !2954
  br i1 %eq1352, label %and.rhs1353, label %and.phi1373, !dbg !2954

and.rhs1353:                                      ; preds = %checkok1350
  %519 = load i32, ptr %k, align 4, !dbg !2956
  %sext1354 = sext i32 %519 to i64, !dbg !2956
  %lt1355 = icmp slt i64 %sext1354, 0, !dbg !2956
  %520 = call i1 @llvm.expect.i1(i1 %lt1355, i1 false), !dbg !2956
  br i1 %520, label %panic1356, label %checkok1361, !dbg !2956

checkok1361:                                      ; preds = %and.rhs1353
  %ge1362 = icmp sge i64 %sext1354, 128, !dbg !2956
  %521 = call i1 @llvm.expect.i1(i1 %ge1362, i1 false), !dbg !2956
  br i1 %521, label %panic1363, label %checkok1370, !dbg !2956

checkok1370:                                      ; preds = %checkok1361
  %ptroffset1371 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1354, !dbg !2956
  %522 = load i32, ptr %ptroffset1371, align 4, !dbg !2956
  %not1372 = icmp eq i32 %522, 0, !dbg !2956
  br label %and.phi1373, !dbg !2956

and.phi1373:                                      ; preds = %checkok1370, %checkok1350
  %val1374 = phi i1 [ false, %checkok1350 ], [ %not1372, %checkok1370 ], !dbg !2956
  br i1 %val1374, label %if.then1375, label %if.exit1380, !dbg !2956

if.then1375:                                      ; preds = %and.phi1373
  %523 = load i32, ptr %a, align 4, !dbg !2957
  %add1376 = add i32 %523, 1, !dbg !2957
  %and1377 = and i32 %add1376, 127, !dbg !2957
  store i32 %and1377, ptr %a, align 4, !dbg !2957
  %524 = load i32, ptr %i, align 4, !dbg !2959
  %sub1378 = sub i32 %524, 1, !dbg !2959
  store i32 %sub1378, ptr %i, align 4, !dbg !2959
  %525 = load i64, ptr %rp706, align 8, !dbg !2960
  %sub1379 = sub i64 %525, 9, !dbg !2960
  store i64 %sub1379, ptr %rp706, align 8, !dbg !2960
  br label %if.exit1380, !dbg !2960

if.exit1380:                                      ; preds = %if.then1375, %and.phi1373
  %526 = load i32, ptr %k, align 4, !dbg !2961
  %add1381 = add i32 %526, 1, !dbg !2961
  %and1382 = and i32 %add1381, 127, !dbg !2961
  store i32 %and1382, ptr %k, align 4, !dbg !2961
  br label %loop.cond1254, !dbg !2961

loop.exit1383:                                    ; preds = %loop.cond1254
  %527 = load i32, ptr %carry1151, align 4, !dbg !2962
  %intbool1384 = icmp ne i32 %527, 0, !dbg !2962
  br i1 %intbool1384, label %if.then1385, label %if.exit1433, !dbg !2962

if.then1385:                                      ; preds = %loop.exit1383
  %528 = load i32, ptr %z, align 4, !dbg !2963
  %add1386 = add i32 %528, 1, !dbg !2963
  %and1387 = and i32 %add1386, 127, !dbg !2963
  %529 = load i32, ptr %a, align 4, !dbg !2965
  %neq1388 = icmp ne i32 %and1387, %529, !dbg !2963
  br i1 %neq1388, label %if.then1389, label %if.else1410, !dbg !2963

if.then1389:                                      ; preds = %if.then1385
  %530 = load i32, ptr %z, align 4, !dbg !2966
  %sext1390 = sext i32 %530 to i64, !dbg !2966
  %lt1391 = icmp slt i64 %sext1390, 0, !dbg !2966
  %531 = call i1 @llvm.expect.i1(i1 %lt1391, i1 false), !dbg !2966
  br i1 %531, label %panic1392, label %checkok1397, !dbg !2966

checkok1397:                                      ; preds = %if.then1389
  %ge1398 = icmp sge i64 %sext1390, 128, !dbg !2966
  %532 = call i1 @llvm.expect.i1(i1 %ge1398, i1 false), !dbg !2966
  br i1 %532, label %panic1399, label %checkok1406, !dbg !2966

checkok1406:                                      ; preds = %checkok1397
  %ptroffset1407 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1390, !dbg !2966
  %533 = load i32, ptr %carry1151, align 4, !dbg !2968
  store i32 %533, ptr %ptroffset1407, align 4, !dbg !2968
  %534 = load i32, ptr %z, align 4, !dbg !2969
  %add1408 = add i32 %534, 1, !dbg !2969
  %and1409 = and i32 %add1408, 127, !dbg !2969
  store i32 %and1409, ptr %z, align 4, !dbg !2969
  br label %if.exit1432, !dbg !2969

if.else1410:                                      ; preds = %if.then1385
  %535 = load i32, ptr %z, align 4, !dbg !2970
  %sub1411 = sub i32 %535, 1, !dbg !2970
  %and1412 = and i32 %sub1411, 127, !dbg !2970
  %sext1413 = sext i32 %and1412 to i64, !dbg !2970
  %lt1414 = icmp slt i64 %sext1413, 0, !dbg !2970
  %536 = call i1 @llvm.expect.i1(i1 %lt1414, i1 false), !dbg !2970
  br i1 %536, label %panic1415, label %checkok1420, !dbg !2970

checkok1420:                                      ; preds = %if.else1410
  %ge1421 = icmp sge i64 %sext1413, 128, !dbg !2970
  %537 = call i1 @llvm.expect.i1(i1 %ge1421, i1 false), !dbg !2970
  br i1 %537, label %panic1422, label %checkok1429, !dbg !2970

checkok1429:                                      ; preds = %checkok1420
  %ptroffset1430 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1413, !dbg !2970
  %538 = load i32, ptr %ptroffset1430, align 4, !dbg !2970
  %or1431 = or i32 %538, 1, !dbg !2972
  store i32 %or1431, ptr %ptroffset1430, align 4, !dbg !2972
  br label %if.exit1432, !dbg !2972

if.exit1432:                                      ; preds = %checkok1429, %checkok1406
  br label %if.exit1433, !dbg !2972

if.exit1433:                                      ; preds = %if.exit1432, %loop.exit1383
  br label %loop.body1150, !dbg !2972

loop.exit1434:                                    ; preds = %if.then1248
  call void @llvm.dbg.declare(metadata ptr %y1435, metadata !2973, metadata !DIExpression()), !dbg !2974
  store double 0.000000e+00, ptr %y1435, align 8, !dbg !2974
  call void @llvm.dbg.declare(metadata ptr %i1436, metadata !2975, metadata !DIExpression()), !dbg !2976
  store i32 0, ptr %i1436, align 4, !dbg !2976
  store i32 0, ptr %i1436, align 4, !dbg !2977
  br label %loop.cond1437, !dbg !2977

loop.cond1437:                                    ; preds = %checkok1485, %loop.exit1434
  %539 = load i32, ptr %i1436, align 4, !dbg !2979
  %lt1438 = icmp slt i32 %539, 2, !dbg !2979
  br i1 %lt1438, label %loop.body1439, label %loop.exit1490, !dbg !2979

loop.body1439:                                    ; preds = %loop.cond1437
  %540 = load i32, ptr %a, align 4, !dbg !2980
  %541 = load i32, ptr %i1436, align 4, !dbg !2982
  %add1440 = add i32 %540, %541, !dbg !2980
  %and1441 = and i32 %add1440, 127, !dbg !2980
  %542 = load i32, ptr %z, align 4, !dbg !2983
  %eq1442 = icmp eq i32 %and1441, %542, !dbg !2980
  br i1 %eq1442, label %if.then1443, label %if.exit1465, !dbg !2980

if.then1443:                                      ; preds = %loop.body1439
  %543 = load i32, ptr %z, align 4, !dbg !2984
  %add1444 = add i32 %543, 1, !dbg !2984
  %and1445 = and i32 %add1444, 127, !dbg !2984
  store i32 %and1445, ptr %z, align 4, !dbg !2984
  %sub1446 = sub i32 %and1445, 1, !dbg !2985
  %sext1447 = sext i32 %sub1446 to i64, !dbg !2985
  %lt1448 = icmp slt i64 %sext1447, 0, !dbg !2985
  %544 = call i1 @llvm.expect.i1(i1 %lt1448, i1 false), !dbg !2985
  br i1 %544, label %panic1449, label %checkok1454, !dbg !2985

checkok1454:                                      ; preds = %if.then1443
  %ge1455 = icmp sge i64 %sext1447, 128, !dbg !2985
  %545 = call i1 @llvm.expect.i1(i1 %ge1455, i1 false), !dbg !2985
  br i1 %545, label %panic1456, label %checkok1463, !dbg !2985

checkok1463:                                      ; preds = %checkok1454
  %ptroffset1464 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1447, !dbg !2985
  store i32 0, ptr %ptroffset1464, align 4, !dbg !2986
  br label %if.exit1465, !dbg !2986

if.exit1465:                                      ; preds = %checkok1463, %loop.body1439
  %546 = load double, ptr %y1435, align 8, !dbg !2987
  %fmul1466 = fmul double 1.000000e+09, %546, !dbg !2988
  %547 = load i32, ptr %a, align 4, !dbg !2989
  %548 = load i32, ptr %i1436, align 4, !dbg !2990
  %add1467 = add i32 %547, %548, !dbg !2989
  %and1468 = and i32 %add1467, 127, !dbg !2989
  %sext1469 = sext i32 %and1468 to i64, !dbg !2989
  %lt1470 = icmp slt i64 %sext1469, 0, !dbg !2989
  %549 = call i1 @llvm.expect.i1(i1 %lt1470, i1 false), !dbg !2989
  br i1 %549, label %panic1471, label %checkok1476, !dbg !2989

checkok1476:                                      ; preds = %if.exit1465
  %ge1477 = icmp sge i64 %sext1469, 128, !dbg !2989
  %550 = call i1 @llvm.expect.i1(i1 %ge1477, i1 false), !dbg !2989
  br i1 %550, label %panic1478, label %checkok1485, !dbg !2989

checkok1485:                                      ; preds = %checkok1476
  %ptroffset1486 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1469, !dbg !2989
  %551 = load i32, ptr %ptroffset1486, align 4, !dbg !2989
  %uifp1487 = uitofp i32 %551 to double, !dbg !2989
  %fadd1488 = fadd double %fmul1466, %uifp1487, !dbg !2988
  store double %fadd1488, ptr %y1435, align 8, !dbg !2988
  %552 = load i32, ptr %i1436, align 4, !dbg !2991
  %add1489 = add i32 %552, 1, !dbg !2991
  store i32 %add1489, ptr %i1436, align 4, !dbg !2991
  br label %loop.cond1437, !dbg !2991

loop.exit1490:                                    ; preds = %loop.cond1437
  %553 = load double, ptr %y1435, align 8, !dbg !2992
  %554 = load i32, ptr %sign381, align 4, !dbg !2993
  %sifp1491 = sitofp i32 %554 to double, !dbg !2993
  %fmul1492 = fmul double %553, %sifp1491, !dbg !2992
  store double %fmul1492, ptr %y1435, align 8, !dbg !2992
  call void @llvm.dbg.declare(metadata ptr %denormal, metadata !2994, metadata !DIExpression()), !dbg !2995
  store i8 0, ptr %denormal, align 1, !dbg !2995
  call void @llvm.dbg.declare(metadata ptr %bits1493, metadata !2996, metadata !DIExpression()), !dbg !2997
  store i32 53, ptr %bits1493, align 4, !dbg !2998
  %555 = load i32, ptr %bits1493, align 4, !dbg !2999
  %556 = load i32, ptr %e2705, align 4, !dbg !3000
  %add1494 = add i32 53, %556, !dbg !3001
  %sub1495 = sub i32 %add1494, -1074, !dbg !3001
  %lt1496 = icmp slt i32 %sub1495, %555, !dbg !2999
  %check1497 = icmp slt i32 %555, 0, !dbg !2999
  %siui-lt1498 = or i1 %check1497, %lt1496, !dbg !2999
  br i1 %siui-lt1498, label %if.then1499, label %if.exit1505, !dbg !2999

if.then1499:                                      ; preds = %loop.exit1490
  %557 = load i32, ptr %e2705, align 4, !dbg !3002
  %add1500 = add i32 53, %557, !dbg !3004
  %sub1501 = sub i32 %add1500, -1074, !dbg !3004
  store i32 %sub1501, ptr %bits1493, align 4, !dbg !3004
  %558 = load i32, ptr %bits1493, align 4, !dbg !3005
  %gt1502 = icmp ugt i32 0, %558, !dbg !3005
  br i1 %gt1502, label %if.then1503, label %if.exit1504, !dbg !3005

if.then1503:                                      ; preds = %if.then1499
  store i32 0, ptr %bits1493, align 4, !dbg !3006
  br label %if.exit1504, !dbg !3006

if.exit1504:                                      ; preds = %if.then1503, %if.then1499
  store i8 1, ptr %denormal, align 1, !dbg !3007
  br label %if.exit1505, !dbg !3007

if.exit1505:                                      ; preds = %if.exit1504, %loop.exit1490
  call void @llvm.dbg.declare(metadata ptr %bias1506, metadata !3008, metadata !DIExpression()), !dbg !3009
  store double 0.000000e+00, ptr %bias1506, align 8, !dbg !3009
  call void @llvm.dbg.declare(metadata ptr %frac, metadata !3010, metadata !DIExpression()), !dbg !3011
  store double 0.000000e+00, ptr %frac, align 8, !dbg !3011
  %559 = load i32, ptr %bits1493, align 4, !dbg !3012
  %gt1507 = icmp ugt i32 53, %559, !dbg !3012
  br i1 %gt1507, label %if.then1508, label %if.exit1525, !dbg !3012

if.then1508:                                      ; preds = %if.exit1505
  store double 1.000000e+00, ptr %x1509, align 8
  %560 = load i32, ptr %bits1493, align 4, !dbg !3013
  %sub1510 = sub i32 106, %560, !dbg !3015
  %sub1511 = sub i32 %sub1510, 1, !dbg !3015
  store i32 %sub1511, ptr %n1512, align 4
  %561 = load double, ptr %x1509, align 8, !dbg !3016
  %562 = load i32, ptr %n1512, align 4, !dbg !3016
  %563 = call double @scalbn(double %561, i32 %562), !dbg !3019
  store double %563, ptr %mag1513, align 8
  %564 = load double, ptr %y1435, align 8
  store double %564, ptr %sgn1514, align 8
  %565 = load double, ptr %mag1513, align 8
  store double %565, ptr %x1515, align 8
  %566 = load double, ptr %sgn1514, align 8
  store double %566, ptr %y1516, align 8
  %567 = load double, ptr %x1515, align 8, !dbg !3020
  %568 = load double, ptr %sgn1514, align 8, !dbg !3025
  %569 = call double @llvm.copysign.f64(double %567, double %568), !dbg !3025
  store double %569, ptr %bias1506, align 8, !dbg !3025
  %570 = load double, ptr %y1435, align 8, !dbg !3026
  store double 1.000000e+00, ptr %x1517, align 8
  %571 = load i32, ptr %bits1493, align 4, !dbg !3027
  %sub1518 = sub i32 53, %571, !dbg !3028
  store i32 %sub1518, ptr %n1519, align 4
  %572 = load double, ptr %x1517, align 8, !dbg !3029
  %573 = load i32, ptr %n1519, align 4, !dbg !3029
  %574 = call double @scalbn(double %572, i32 %573), !dbg !3032
  %zero1520 = fcmp ueq double %574, 0.000000e+00, !dbg !3026
  %575 = call i1 @llvm.expect.i1(i1 %zero1520, i1 false), !dbg !3026
  br i1 %575, label %panic1521, label %checkok1522, !dbg !3026

checkok1522:                                      ; preds = %if.then1508
  %fmod = frem double %570, %574, !dbg !3026
  store double %fmod, ptr %frac, align 8, !dbg !3026
  %576 = load double, ptr %y1435, align 8, !dbg !3033
  %577 = load double, ptr %frac, align 8, !dbg !3034
  %fsub1523 = fsub double %576, %577, !dbg !3033
  store double %fsub1523, ptr %y1435, align 8, !dbg !3033
  %578 = load double, ptr %y1435, align 8, !dbg !3035
  %579 = load double, ptr %bias1506, align 8, !dbg !3036
  %fadd1524 = fadd double %578, %579, !dbg !3035
  store double %fadd1524, ptr %y1435, align 8, !dbg !3035
  br label %if.exit1525, !dbg !3035

if.exit1525:                                      ; preds = %checkok1522, %if.exit1505
  %580 = load i32, ptr %a, align 4, !dbg !3037
  %581 = load i32, ptr %i1436, align 4, !dbg !3038
  %add1526 = add i32 %580, %581, !dbg !3037
  %and1527 = and i32 %add1526, 127, !dbg !3037
  %582 = load i32, ptr %z, align 4, !dbg !3039
  %neq1528 = icmp ne i32 %and1527, %582, !dbg !3037
  br i1 %neq1528, label %if.then1529, label %if.exit1604, !dbg !3037

if.then1529:                                      ; preds = %if.exit1525
  call void @llvm.dbg.declare(metadata ptr %t, metadata !3040, metadata !DIExpression()), !dbg !3042
  %583 = load i32, ptr %a, align 4, !dbg !3043
  %584 = load i32, ptr %i1436, align 4, !dbg !3044
  %add1530 = add i32 %583, %584, !dbg !3043
  %and1531 = and i32 %add1530, 127, !dbg !3043
  %sext1532 = sext i32 %and1531 to i64, !dbg !3043
  %lt1533 = icmp slt i64 %sext1532, 0, !dbg !3043
  %585 = call i1 @llvm.expect.i1(i1 %lt1533, i1 false), !dbg !3043
  br i1 %585, label %panic1534, label %checkok1539, !dbg !3043

checkok1539:                                      ; preds = %if.then1529
  %ge1540 = icmp sge i64 %sext1532, 128, !dbg !3043
  %586 = call i1 @llvm.expect.i1(i1 %ge1540, i1 false), !dbg !3043
  br i1 %586, label %panic1541, label %checkok1548, !dbg !3043

checkok1548:                                      ; preds = %checkok1539
  %ptroffset1549 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1532, !dbg !3043
  %587 = load i32, ptr %ptroffset1549, align 4, !dbg !3043
  store i32 %587, ptr %t, align 4, !dbg !3043
  store i8 1, ptr %switch1550, align 1
  br label %switch.entry1551

switch.entry1551:                                 ; preds = %checkok1548
  %588 = load i8, ptr %switch1550, align 1
  %589 = trunc i8 %588 to i1
  %590 = load i32, ptr %t, align 4, !dbg !3045
  %gt1552 = icmp ugt i32 500000000, %590, !dbg !3045
  br i1 %gt1552, label %and.rhs1553, label %and.phi1562, !dbg !3045

and.rhs1553:                                      ; preds = %switch.entry1551
  %591 = load i32, ptr %t, align 4, !dbg !3047
  %intbool1554 = icmp ne i32 %591, 0, !dbg !3047
  br i1 %intbool1554, label %or.phi1560, label %or.rhs1555, !dbg !3047

or.rhs1555:                                       ; preds = %and.rhs1553
  %592 = load i32, ptr %a, align 4, !dbg !3048
  %593 = load i32, ptr %i1436, align 4, !dbg !3049
  %add1556 = add i32 %592, %593, !dbg !3048
  %add1557 = add i32 %add1556, 1, !dbg !3048
  %and1558 = and i32 %add1557, 127, !dbg !3048
  %594 = load i32, ptr %z, align 4, !dbg !3050
  %neq1559 = icmp ne i32 %and1558, %594, !dbg !3048
  br label %or.phi1560, !dbg !3048

or.phi1560:                                       ; preds = %or.rhs1555, %and.rhs1553
  %val1561 = phi i1 [ true, %and.rhs1553 ], [ %neq1559, %or.rhs1555 ], !dbg !3048
  br label %and.phi1562, !dbg !3048

and.phi1562:                                      ; preds = %or.phi1560, %switch.entry1551
  %val1563 = phi i1 [ false, %switch.entry1551 ], [ %val1561, %or.phi1560 ], !dbg !3048
  %eq1564 = icmp eq i1 %val1563, %589, !dbg !3048
  br i1 %eq1564, label %switch.case1565, label %next_if1569, !dbg !3048

switch.case1565:                                  ; preds = %and.phi1562
  %595 = load double, ptr %frac, align 8, !dbg !3051
  %596 = load i32, ptr %sign381, align 4, !dbg !3053
  %sifp1566 = sitofp i32 %596 to double, !dbg !3053
  %fmul1567 = fmul double 2.500000e-01, %sifp1566, !dbg !3054
  %fadd1568 = fadd double %595, %fmul1567, !dbg !3051
  store double %fadd1568, ptr %frac, align 8, !dbg !3051
  br label %switch.exit1594, !dbg !3051

next_if1569:                                      ; preds = %and.phi1562
  %597 = load i32, ptr %t, align 4, !dbg !3055
  %lt1570 = icmp ult i32 500000000, %597, !dbg !3055
  %eq1571 = icmp eq i1 %lt1570, %589, !dbg !3055
  br i1 %eq1571, label %switch.case1572, label %next_if1576, !dbg !3055

switch.case1572:                                  ; preds = %next_if1569
  %598 = load double, ptr %frac, align 8, !dbg !3056
  %599 = load i32, ptr %sign381, align 4, !dbg !3058
  %sifp1573 = sitofp i32 %599 to double, !dbg !3058
  %fmul1574 = fmul double 7.500000e-01, %sifp1573, !dbg !3059
  %fadd1575 = fadd double %598, %fmul1574, !dbg !3056
  store double %fadd1575, ptr %frac, align 8, !dbg !3056
  br label %switch.exit1594, !dbg !3056

next_if1576:                                      ; preds = %next_if1569
  %600 = load i32, ptr %t, align 4, !dbg !3060
  %eq1577 = icmp eq i32 500000000, %600, !dbg !3060
  %eq1578 = icmp eq i1 %eq1577, %589, !dbg !3060
  br i1 %eq1578, label %switch.case1579, label %next_if1593, !dbg !3060

switch.case1579:                                  ; preds = %next_if1576
  %601 = load i32, ptr %a, align 4, !dbg !3061
  %602 = load i32, ptr %i1436, align 4, !dbg !3063
  %add1580 = add i32 %601, %602, !dbg !3061
  %add1581 = add i32 %add1580, 1, !dbg !3061
  %and1582 = and i32 %add1581, 127, !dbg !3061
  %603 = load i32, ptr %z, align 4, !dbg !3064
  %eq1583 = icmp eq i32 %and1582, %603, !dbg !3061
  br i1 %eq1583, label %if.then1584, label %if.else1588, !dbg !3061

if.then1584:                                      ; preds = %switch.case1579
  %604 = load double, ptr %frac, align 8, !dbg !3065
  %605 = load i32, ptr %sign381, align 4, !dbg !3067
  %sifp1585 = sitofp i32 %605 to double, !dbg !3067
  %fmul1586 = fmul double 5.000000e-01, %sifp1585, !dbg !3068
  %fadd1587 = fadd double %604, %fmul1586, !dbg !3065
  store double %fadd1587, ptr %frac, align 8, !dbg !3065
  br label %if.exit1592, !dbg !3065

if.else1588:                                      ; preds = %switch.case1579
  %606 = load double, ptr %frac, align 8, !dbg !3069
  %607 = load i32, ptr %sign381, align 4, !dbg !3071
  %sifp1589 = sitofp i32 %607 to double, !dbg !3071
  %fmul1590 = fmul double 7.500000e-01, %sifp1589, !dbg !3072
  %fadd1591 = fadd double %606, %fmul1590, !dbg !3069
  store double %fadd1591, ptr %frac, align 8, !dbg !3069
  br label %if.exit1592, !dbg !3069

if.exit1592:                                      ; preds = %if.else1588, %if.then1584
  br label %switch.exit1594, !dbg !3069

next_if1593:                                      ; preds = %next_if1576
  br label %switch.exit1594, !dbg !3069

switch.exit1594:                                  ; preds = %next_if1593, %if.exit1592, %switch.case1572, %switch.case1565
  %608 = load i32, ptr %bits1493, align 4, !dbg !3073
  %sub1595 = sub i32 53, %608, !dbg !3074
  %ge1596 = icmp sge i32 %sub1595, 2, !dbg !3074
  br i1 %ge1596, label %and.rhs1597, label %and.phi1600, !dbg !3074

and.rhs1597:                                      ; preds = %switch.exit1594
  %609 = load double, ptr %frac, align 8, !dbg !3075
  %fmod1598 = frem double %609, 1.000000e+00, !dbg !3075
  %not1599 = fcmp ueq double %fmod1598, 0.000000e+00, !dbg !3075
  br label %and.phi1600, !dbg !3075

and.phi1600:                                      ; preds = %and.rhs1597, %switch.exit1594
  %val1601 = phi i1 [ false, %switch.exit1594 ], [ %not1599, %and.rhs1597 ], !dbg !3075
  br i1 %val1601, label %if.then1602, label %if.exit1603, !dbg !3075

if.then1602:                                      ; preds = %and.phi1600
  %610 = load double, ptr %frac, align 8, !dbg !3076
  %fincdec = fadd double %610, 1.000000e+00, !dbg !3076
  store double %fincdec, ptr %frac, align 8, !dbg !3076
  br label %if.exit1603, !dbg !3076

if.exit1603:                                      ; preds = %if.then1602, %and.phi1600
  br label %if.exit1604, !dbg !3076

if.exit1604:                                      ; preds = %if.exit1603, %if.exit1525
  %611 = load double, ptr %y1435, align 8, !dbg !3077
  %612 = load double, ptr %frac, align 8, !dbg !3078
  %fadd1605 = fadd double %611, %612, !dbg !3077
  store double %fadd1605, ptr %y1435, align 8, !dbg !3077
  %613 = load double, ptr %y1435, align 8, !dbg !3079
  %614 = load double, ptr %bias1506, align 8, !dbg !3080
  %fsub1606 = fsub double %613, %614, !dbg !3079
  store double %fsub1606, ptr %y1435, align 8, !dbg !3079
  %615 = load i32, ptr %e2705, align 4, !dbg !3081
  %add1607 = add i32 %615, 53, !dbg !3081
  %and1608 = and i32 %add1607, 2147483647, !dbg !3081
  %616 = load i32, ptr %emax, align 4, !dbg !3082
  %sub1609 = sub i32 %616, 5, !dbg !3082
  %gt1610 = icmp sgt i32 %and1608, %sub1609, !dbg !3081
  br i1 %gt1610, label %if.then1611, label %if.exit1639, !dbg !3081

if.then1611:                                      ; preds = %if.exit1604
  %617 = load double, ptr %y1435, align 8
  store double %617, ptr %x1612, align 8
  %618 = load double, ptr %x1612, align 8, !dbg !3083
  %619 = call double @llvm.fabs.f64(double %618), !dbg !3083
  %ge1613 = fcmp oge double %619, 0x4340000000000000, !dbg !3085
  br i1 %ge1613, label %if.then1614, label %if.exit1627, !dbg !3085

if.then1614:                                      ; preds = %if.then1611
  %620 = load i8, ptr %denormal, align 1, !dbg !3087
  %621 = trunc i8 %620 to i1, !dbg !3087
  br i1 %621, label %and.rhs1615, label %and.phi1621, !dbg !3087

and.rhs1615:                                      ; preds = %if.then1614
  %622 = load i32, ptr %bits1493, align 4, !dbg !3089
  %623 = load i32, ptr %e2705, align 4, !dbg !3090
  %add1616 = add i32 53, %623, !dbg !3091
  %sub1617 = sub i32 %add1616, -1074, !dbg !3091
  %eq1618 = icmp eq i32 %sub1617, %622, !dbg !3089
  %check1619 = icmp sge i32 %sub1617, 0, !dbg !3089
  %siui-eq1620 = and i1 %check1619, %eq1618, !dbg !3089
  br label %and.phi1621, !dbg !3089

and.phi1621:                                      ; preds = %and.rhs1615, %if.then1614
  %val1622 = phi i1 [ false, %if.then1614 ], [ %siui-eq1620, %and.rhs1615 ], !dbg !3089
  br i1 %val1622, label %if.then1623, label %if.exit1624, !dbg !3089

if.then1623:                                      ; preds = %and.phi1621
  store i8 0, ptr %denormal, align 1, !dbg !3092
  br label %if.exit1624, !dbg !3092

if.exit1624:                                      ; preds = %if.then1623, %and.phi1621
  %624 = load double, ptr %y1435, align 8, !dbg !3093
  %fmul1625 = fmul double %624, 5.000000e-01, !dbg !3093
  store double %fmul1625, ptr %y1435, align 8, !dbg !3093
  %625 = load i32, ptr %e2705, align 4, !dbg !3094
  %add1626 = add i32 %625, 1, !dbg !3094
  store i32 %add1626, ptr %e2705, align 4, !dbg !3094
  br label %if.exit1627, !dbg !3094

if.exit1627:                                      ; preds = %if.exit1624, %if.then1611
  %626 = load i32, ptr %e2705, align 4, !dbg !3095
  %add1628 = add i32 %626, 53, !dbg !3095
  %627 = load i32, ptr %emax, align 4, !dbg !3096
  %gt1629 = icmp sgt i32 %add1628, %627, !dbg !3095
  br i1 %gt1629, label %or.phi1635, label %or.rhs1630, !dbg !3095

or.rhs1630:                                       ; preds = %if.exit1627
  %628 = load i8, ptr %denormal, align 1, !dbg !3097
  %629 = trunc i8 %628 to i1, !dbg !3097
  br i1 %629, label %and.rhs1631, label %and.phi1633, !dbg !3097

and.rhs1631:                                      ; preds = %or.rhs1630
  %630 = load double, ptr %frac, align 8, !dbg !3098
  %fpbool1632 = fcmp une double %630, 0.000000e+00, !dbg !3098
  br label %and.phi1633, !dbg !3098

and.phi1633:                                      ; preds = %and.rhs1631, %or.rhs1630
  %val1634 = phi i1 [ false, %or.rhs1630 ], [ %fpbool1632, %and.rhs1631 ], !dbg !3098
  br label %or.phi1635, !dbg !3098

or.phi1635:                                       ; preds = %and.phi1633, %if.exit1627
  %val1636 = phi i1 [ true, %if.exit1627 ], [ %val1634, %and.phi1633 ], !dbg !3098
  br i1 %val1636, label %if.then1637, label %if.exit1638, !dbg !3098

if.then1637:                                      ; preds = %or.phi1635
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3099
  br label %err_retblock, !dbg !3099

if.exit1638:                                      ; preds = %or.phi1635
  br label %if.exit1639, !dbg !3099

if.exit1639:                                      ; preds = %if.exit1638, %if.exit1604
  %631 = load double, ptr %y1435, align 8
  store double %631, ptr %x1640, align 8
  %632 = load i32, ptr %e2705, align 4
  store i32 %632, ptr %n1641, align 4
  %633 = load double, ptr %x1640, align 8, !dbg !3100
  %634 = load i32, ptr %n1641, align 4, !dbg !3100
  %635 = call double @scalbn(double %633, i32 %634), !dbg !3103
  store double %635, ptr %blockret382, align 8, !dbg !3103
  br label %expr_block.exit1643, !dbg !3103

expr_block.exit1643:                              ; preds = %if.exit1639, %checkok787, %checkok748, %if.then718, %if.then666, %if.then649, %if.exit436, %if.then424
  %636 = load double, ptr %blockret382, align 8, !dbg !3103
  store double %636, ptr %blockret, align 8, !dbg !3103
  br label %expr_block.exit1644, !dbg !3103

expr_block.exit1644:                              ; preds = %expr_block.exit1643, %expr_block.exit378, %if.then80, %if.then53
  %637 = load double, ptr %blockret, align 8, !dbg !3103
  store double %637, ptr %0, align 8, !dbg !3103
  ret i64 0, !dbg !3103

err_retblock:                                     ; preds = %if.then1637, %if.then675, %if.then672, %if.then645, %guard_block640, %if.then614, %if.then605, %if.then496, %if.then435, %if.then372, %if.then318, %if.then315, %guard_block, %if.then270, %if.then216, %if.then152, %if.then
  %638 = load i64, ptr %reterr, align 8, !dbg !3103
  ret i64 %638, !dbg !3103

panic:                                            ; preds = %and.rhs
  store i64 %4, ptr %taddr, align 8
  %639 = insertvalue %any undef, ptr %taddr, 0
  %640 = insertvalue %any %639, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %641 = insertvalue %any undef, ptr %taddr3, 0
  %642 = insertvalue %any %641, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %640, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %642, ptr %ptradd4, align 16
  %643 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %643, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 468, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2357
  unreachable, !dbg !2357

panic5:                                           ; preds = %loop.body
  store i64 %10, ptr %taddr6, align 8
  %644 = insertvalue %any undef, ptr %taddr6, 0
  %645 = insertvalue %any %644, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr7, align 8
  %646 = insertvalue %any undef, ptr %taddr7, 0
  %647 = insertvalue %any %646, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %645, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %647, ptr %ptradd9, align 16
  %648 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %648, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 468, ptr byval(%"any[]") align 8 %indirectarg11), !dbg !2358
  unreachable, !dbg !2358

panic17:                                          ; preds = %if.exit
  store i64 %15, ptr %taddr18, align 8
  %649 = insertvalue %any undef, ptr %taddr18, 0
  %650 = insertvalue %any %649, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr19, align 8
  %651 = insertvalue %any undef, ptr %taddr19, 0
  %652 = insertvalue %any %651, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %650, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %652, ptr %ptradd21, align 16
  %653 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %653, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 470, ptr byval(%"any[]") align 8 %indirectarg23), !dbg !2364
  unreachable, !dbg !2364

panic27:                                          ; preds = %switch.case25
  store i64 %22, ptr %taddr28, align 8
  %654 = insertvalue %any undef, ptr %taddr28, 0
  %655 = insertvalue %any %654, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr29, align 8
  %656 = insertvalue %any undef, ptr %taddr29, 0
  %657 = insertvalue %any %656, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %655, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %657, ptr %ptradd31, align 16
  %658 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %658, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 476, ptr byval(%"any[]") align 8 %indirectarg33), !dbg !2368
  unreachable, !dbg !2368

panic87:                                          ; preds = %and.rhs84
  store i64 %56, ptr %taddr88, align 8
  %659 = insertvalue %any undef, ptr %taddr88, 0
  %660 = insertvalue %any %659, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr89, align 8
  %661 = insertvalue %any undef, ptr %taddr89, 0
  %662 = insertvalue %any %661, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %660, ptr %varargslots90, align 16
  %ptradd91 = getelementptr inbounds i8, ptr %varargslots90, i64 16
  store %any %662, ptr %ptradd91, align 16
  %663 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp92" = insertvalue %"any[]" %663, i64 2, 1
  store %"any[]" %"$$temp92", ptr %indirectarg93, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 481, ptr byval(%"any[]") align 8 %indirectarg93), !dbg !2379
  unreachable, !dbg !2379

panic101:                                         ; preds = %and.rhs98
  store i64 %60, ptr %taddr102, align 8
  %664 = insertvalue %any undef, ptr %taddr102, 0
  %665 = insertvalue %any %664, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr103, align 8
  %666 = insertvalue %any undef, ptr %taddr103, 0
  %667 = insertvalue %any %666, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %665, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %667, ptr %ptradd105, align 16
  %668 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %668, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 481, ptr byval(%"any[]") align 8 %indirectarg107), !dbg !2381
  unreachable, !dbg !2381

panic115:                                         ; preds = %if.then113
  store i64 %66, ptr %taddr116, align 8
  %669 = insertvalue %any undef, ptr %taddr116, 0
  %670 = insertvalue %any %669, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr117, align 8
  %671 = insertvalue %any undef, ptr %taddr117, 0
  %672 = insertvalue %any %671, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %670, ptr %varargslots118, align 16
  %ptradd119 = getelementptr inbounds i8, ptr %varargslots118, i64 16
  store %any %672, ptr %ptradd119, align 16
  %673 = insertvalue %"any[]" undef, ptr %varargslots118, 0
  %"$$temp120" = insertvalue %"any[]" %673, i64 2, 1
  store %"any[]" %"$$temp120", ptr %indirectarg121, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 483, ptr byval(%"any[]") align 8 %indirectarg121), !dbg !2385
  unreachable, !dbg !2385

panic132:                                         ; preds = %loop.cond129
  store i64 %73, ptr %taddr133, align 8
  %674 = insertvalue %any undef, ptr %taddr133, 0
  %675 = insertvalue %any %674, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %75, ptr %taddr134, align 8
  %676 = insertvalue %any undef, ptr %taddr134, 0
  %677 = insertvalue %any %676, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %675, ptr %varargslots135, align 16
  %ptradd136 = getelementptr inbounds i8, ptr %varargslots135, i64 16
  store %any %677, ptr %ptradd136, align 16
  %678 = insertvalue %"any[]" undef, ptr %varargslots135, 0
  %"$$temp137" = insertvalue %"any[]" %678, i64 2, 1
  store %"any[]" %"$$temp137", ptr %indirectarg138, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 344, ptr byval(%"any[]") align 8 %indirectarg138), !dbg !2418
  unreachable, !dbg !2418

panic161:                                         ; preds = %and.rhs157
  store i64 %89, ptr %taddr162, align 8
  %679 = insertvalue %any undef, ptr %taddr162, 0
  %680 = insertvalue %any %679, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add159, ptr %taddr163, align 8
  %681 = insertvalue %any undef, ptr %taddr163, 0
  %682 = insertvalue %any %681, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %680, ptr %varargslots164, align 16
  %ptradd165 = getelementptr inbounds i8, ptr %varargslots164, i64 16
  store %any %682, ptr %ptradd165, align 16
  %683 = insertvalue %"any[]" undef, ptr %varargslots164, 0
  %"$$temp166" = insertvalue %"any[]" %683, i64 2, 1
  store %"any[]" %"$$temp166", ptr %indirectarg167, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 357, ptr byval(%"any[]") align 8 %indirectarg167), !dbg !2438
  unreachable, !dbg !2438

panic181:                                         ; preds = %and.rhs177
  store i64 %97, ptr %taddr182, align 8
  %684 = insertvalue %any undef, ptr %taddr182, 0
  %685 = insertvalue %any %684, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add179, ptr %taddr183, align 8
  %686 = insertvalue %any undef, ptr %taddr183, 0
  %687 = insertvalue %any %686, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %685, ptr %varargslots184, align 16
  %ptradd185 = getelementptr inbounds i8, ptr %varargslots184, i64 16
  store %any %687, ptr %ptradd185, align 16
  %688 = insertvalue %"any[]" undef, ptr %varargslots184, 0
  %"$$temp186" = insertvalue %"any[]" %688, i64 2, 1
  store %"any[]" %"$$temp186", ptr %indirectarg187, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 361, ptr byval(%"any[]") align 8 %indirectarg187), !dbg !2449
  unreachable, !dbg !2449

panic259:                                         ; preds = %if.exit255
  store i64 %131, ptr %taddr260, align 8
  %689 = insertvalue %any undef, ptr %taddr260, 0
  %690 = insertvalue %any %689, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add257, ptr %taddr261, align 8
  %691 = insertvalue %any undef, ptr %taddr261, 0
  %692 = insertvalue %any %691, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %690, ptr %varargslots262, align 16
  %ptradd263 = getelementptr inbounds i8, ptr %varargslots262, i64 16
  store %any %692, ptr %ptradd263, align 16
  %693 = insertvalue %"any[]" undef, ptr %varargslots262, 0
  %"$$temp264" = insertvalue %"any[]" %693, i64 2, 1
  store %"any[]" %"$$temp264", ptr %indirectarg265, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 397, ptr byval(%"any[]") align 8 %indirectarg265), !dbg !2497
  unreachable, !dbg !2497

panic289:                                         ; preds = %if.then286
  store i64 %148, ptr %taddr290, align 8
  %694 = insertvalue %any undef, ptr %taddr290, 0
  %695 = insertvalue %any %694, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add287, ptr %taddr291, align 8
  %696 = insertvalue %any undef, ptr %taddr291, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %695, ptr %varargslots292, align 16
  %ptradd293 = getelementptr inbounds i8, ptr %varargslots292, i64 16
  store %any %697, ptr %ptradd293, align 16
  %698 = insertvalue %"any[]" undef, ptr %varargslots292, 0
  %"$$temp294" = insertvalue %"any[]" %698, i64 2, 1
  store %"any[]" %"$$temp294", ptr %indirectarg295, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 406, ptr byval(%"any[]") align 8 %indirectarg295), !dbg !2515
  unreachable, !dbg !2515

panic297:                                         ; preds = %checkok296
  store i64 %add287, ptr %taddr298, align 8
  %699 = insertvalue %any undef, ptr %taddr298, 0
  %700 = insertvalue %any %699, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %700, ptr %varargslots299, align 16
  %701 = insertvalue %"any[]" undef, ptr %varargslots299, 0
  %"$$temp300" = insertvalue %"any[]" %701, i64 1, 1
  store %"any[]" %"$$temp300", ptr %indirectarg301, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.75, i64 22, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 406, ptr byval(%"any[]") align 8 %indirectarg301), !dbg !2514
  unreachable, !dbg !2514

panic390:                                         ; preds = %assert_ok
  store i64 %210, ptr %taddr391, align 8
  %702 = insertvalue %any undef, ptr %taddr391, 0
  %703 = insertvalue %any %702, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr392, align 8
  %704 = insertvalue %any undef, ptr %taddr392, 0
  %705 = insertvalue %any %704, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %703, ptr %varargslots393, align 16
  %ptradd394 = getelementptr inbounds i8, ptr %varargslots393, i64 16
  store %any %705, ptr %ptradd394, align 16
  %706 = insertvalue %"any[]" undef, ptr %varargslots393, 0
  %"$$temp395" = insertvalue %"any[]" %706, i64 2, 1
  store %"any[]" %"$$temp395", ptr %indirectarg396, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 45, ptr byval(%"any[]") align 8 %indirectarg396), !dbg !2612
  unreachable, !dbg !2612

panic412:                                         ; preds = %loop.cond409
  store i64 %219, ptr %taddr413, align 8
  %707 = insertvalue %any undef, ptr %taddr413, 0
  %708 = insertvalue %any %707, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %221, ptr %taddr414, align 8
  %709 = insertvalue %any undef, ptr %taddr414, 0
  %710 = insertvalue %any %709, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %708, ptr %varargslots415, align 16
  %ptradd416 = getelementptr inbounds i8, ptr %varargslots415, i64 16
  store %any %710, ptr %ptradd416, align 16
  %711 = insertvalue %"any[]" undef, ptr %varargslots415, 0
  %"$$temp417" = insertvalue %"any[]" %711, i64 2, 1
  store %"any[]" %"$$temp417", ptr %indirectarg418, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 56, ptr byval(%"any[]") align 8 %indirectarg418), !dbg !2637
  unreachable, !dbg !2637

panic445:                                         ; preds = %and.rhs441
  store i64 %236, ptr %taddr446, align 8
  %712 = insertvalue %any undef, ptr %taddr446, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add443, ptr %taddr447, align 8
  %714 = insertvalue %any undef, ptr %taddr447, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %713, ptr %varargslots448, align 16
  %ptradd449 = getelementptr inbounds i8, ptr %varargslots448, i64 16
  store %any %715, ptr %ptradd449, align 16
  %716 = insertvalue %"any[]" undef, ptr %varargslots448, 0
  %"$$temp450" = insertvalue %"any[]" %716, i64 2, 1
  store %"any[]" %"$$temp450", ptr %indirectarg451, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 70, ptr byval(%"any[]") align 8 %indirectarg451), !dbg !2657
  unreachable, !dbg !2657

panic465:                                         ; preds = %and.rhs461
  store i64 %244, ptr %taddr466, align 8
  %717 = insertvalue %any undef, ptr %taddr466, 0
  %718 = insertvalue %any %717, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add463, ptr %taddr467, align 8
  %719 = insertvalue %any undef, ptr %taddr467, 0
  %720 = insertvalue %any %719, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %718, ptr %varargslots468, align 16
  %ptradd469 = getelementptr inbounds i8, ptr %varargslots468, i64 16
  store %any %720, ptr %ptradd469, align 16
  %721 = insertvalue %"any[]" undef, ptr %varargslots468, 0
  %"$$temp470" = insertvalue %"any[]" %721, i64 2, 1
  store %"any[]" %"$$temp470", ptr %indirectarg471, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 74, ptr byval(%"any[]") align 8 %indirectarg471), !dbg !2668
  unreachable, !dbg !2668

panic510:                                         ; preds = %if.then508
  store i64 %sext, ptr %taddr511, align 8
  %722 = insertvalue %any undef, ptr %taddr511, 0
  %723 = insertvalue %any %722, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %723, ptr %varargslots512, align 16
  %724 = insertvalue %"any[]" undef, ptr %varargslots512, 0
  %"$$temp513" = insertvalue %"any[]" %724, i64 1, 1
  store %"any[]" %"$$temp513", ptr %indirectarg514, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg514), !dbg !2690
  unreachable, !dbg !2690

panic517:                                         ; preds = %checkok515
  store i64 128, ptr %taddr518, align 8
  %725 = insertvalue %any undef, ptr %taddr518, 0
  %726 = insertvalue %any %725, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr519, align 8
  %727 = insertvalue %any undef, ptr %taddr519, 0
  %728 = insertvalue %any %727, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %726, ptr %varargslots520, align 16
  %ptradd521 = getelementptr inbounds i8, ptr %varargslots520, i64 16
  store %any %728, ptr %ptradd521, align 16
  %729 = insertvalue %"any[]" undef, ptr %varargslots520, 0
  %"$$temp522" = insertvalue %"any[]" %729, i64 2, 1
  store %"any[]" %"$$temp522", ptr %indirectarg523, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg523), !dbg !2690
  unreachable, !dbg !2690

panic527:                                         ; preds = %checkok524
  store i64 %sext525, ptr %taddr528, align 8
  %730 = insertvalue %any undef, ptr %taddr528, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %731, ptr %varargslots529, align 16
  %732 = insertvalue %"any[]" undef, ptr %varargslots529, 0
  %"$$temp530" = insertvalue %"any[]" %732, i64 1, 1
  store %"any[]" %"$$temp530", ptr %indirectarg531, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg531), !dbg !2692
  unreachable, !dbg !2692

panic534:                                         ; preds = %checkok532
  store i64 128, ptr %taddr535, align 8
  %733 = insertvalue %any undef, ptr %taddr535, 0
  %734 = insertvalue %any %733, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext525, ptr %taddr536, align 8
  %735 = insertvalue %any undef, ptr %taddr536, 0
  %736 = insertvalue %any %735, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %734, ptr %varargslots537, align 16
  %ptradd538 = getelementptr inbounds i8, ptr %varargslots537, i64 16
  store %any %736, ptr %ptradd538, align 16
  %737 = insertvalue %"any[]" undef, ptr %varargslots537, 0
  %"$$temp539" = insertvalue %"any[]" %737, i64 2, 1
  store %"any[]" %"$$temp539", ptr %indirectarg540, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 94, ptr byval(%"any[]") align 8 %indirectarg540), !dbg !2692
  unreachable, !dbg !2692

panic550:                                         ; preds = %if.else547
  store i64 %sext548, ptr %taddr551, align 8
  %738 = insertvalue %any undef, ptr %taddr551, 0
  %739 = insertvalue %any %738, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %739, ptr %varargslots552, align 16
  %740 = insertvalue %"any[]" undef, ptr %varargslots552, 0
  %"$$temp553" = insertvalue %"any[]" %740, i64 1, 1
  store %"any[]" %"$$temp553", ptr %indirectarg554, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 98, ptr byval(%"any[]") align 8 %indirectarg554), !dbg !2695
  unreachable, !dbg !2695

panic557:                                         ; preds = %checkok555
  store i64 128, ptr %taddr558, align 8
  %741 = insertvalue %any undef, ptr %taddr558, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext548, ptr %taddr559, align 8
  %743 = insertvalue %any undef, ptr %taddr559, 0
  %744 = insertvalue %any %743, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %742, ptr %varargslots560, align 16
  %ptradd561 = getelementptr inbounds i8, ptr %varargslots560, i64 16
  store %any %744, ptr %ptradd561, align 16
  %745 = insertvalue %"any[]" undef, ptr %varargslots560, 0
  %"$$temp562" = insertvalue %"any[]" %745, i64 2, 1
  store %"any[]" %"$$temp562", ptr %indirectarg563, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 98, ptr byval(%"any[]") align 8 %indirectarg563), !dbg !2695
  unreachable, !dbg !2695

panic591:                                         ; preds = %assert_ok587
  store i64 %285, ptr %taddr592, align 8
  %746 = insertvalue %any undef, ptr %taddr592, 0
  %747 = insertvalue %any %746, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add589, ptr %taddr593, align 8
  %748 = insertvalue %any undef, ptr %taddr593, 0
  %749 = insertvalue %any %748, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %747, ptr %varargslots594, align 16
  %ptradd595 = getelementptr inbounds i8, ptr %varargslots594, i64 16
  store %any %749, ptr %ptradd595, align 16
  %750 = insertvalue %"any[]" undef, ptr %varargslots594, 0
  %"$$temp596" = insertvalue %"any[]" %750, i64 2, 1
  store %"any[]" %"$$temp596", ptr %indirectarg597, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 113, ptr byval(%"any[]") align 8 %indirectarg597), !dbg !2716
  unreachable, !dbg !2716

panic618:                                         ; preds = %if.exit615
  store i64 %301, ptr %taddr619, align 8
  %751 = insertvalue %any undef, ptr %taddr619, 0
  %752 = insertvalue %any %751, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add616, ptr %taddr620, align 8
  %753 = insertvalue %any undef, ptr %taddr620, 0
  %754 = insertvalue %any %753, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %752, ptr %varargslots621, align 16
  %ptradd622 = getelementptr inbounds i8, ptr %varargslots621, i64 16
  store %any %754, ptr %ptradd622, align 16
  %755 = insertvalue %"any[]" undef, ptr %varargslots621, 0
  %"$$temp623" = insertvalue %"any[]" %755, i64 2, 1
  store %"any[]" %"$$temp623", ptr %indirectarg624, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 120, ptr byval(%"any[]") align 8 %indirectarg624), !dbg !2730
  unreachable, !dbg !2730

panic627:                                         ; preds = %checkok625
  store i64 %add616, ptr %taddr628, align 8
  %756 = insertvalue %any undef, ptr %taddr628, 0
  %757 = insertvalue %any %756, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %757, ptr %varargslots629, align 16
  %758 = insertvalue %"any[]" undef, ptr %varargslots629, 0
  %"$$temp630" = insertvalue %"any[]" %758, i64 1, 1
  store %"any[]" %"$$temp630", ptr %indirectarg631, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.75, i64 22, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 120, ptr byval(%"any[]") align 8 %indirectarg631), !dbg !2729
  unreachable, !dbg !2729

panic684:                                         ; preds = %loop.body681
  store i64 %sext682, ptr %taddr685, align 8
  %759 = insertvalue %any undef, ptr %taddr685, 0
  %760 = insertvalue %any %759, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %760, ptr %varargslots686, align 16
  %761 = insertvalue %"any[]" undef, ptr %varargslots686, 0
  %"$$temp687" = insertvalue %"any[]" %761, i64 1, 1
  store %"any[]" %"$$temp687", ptr %indirectarg688, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 138, ptr byval(%"any[]") align 8 %indirectarg688), !dbg !2758
  unreachable, !dbg !2758

panic691:                                         ; preds = %checkok689
  store i64 128, ptr %taddr692, align 8
  %762 = insertvalue %any undef, ptr %taddr692, 0
  %763 = insertvalue %any %762, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext682, ptr %taddr693, align 8
  %764 = insertvalue %any undef, ptr %taddr693, 0
  %765 = insertvalue %any %764, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %763, ptr %varargslots694, align 16
  %ptradd695 = getelementptr inbounds i8, ptr %varargslots694, i64 16
  store %any %765, ptr %ptradd695, align 16
  %766 = insertvalue %"any[]" undef, ptr %varargslots694, 0
  %"$$temp696" = insertvalue %"any[]" %766, i64 2, 1
  store %"any[]" %"$$temp696", ptr %indirectarg697, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 138, ptr byval(%"any[]") align 8 %indirectarg697), !dbg !2758
  unreachable, !dbg !2758

panic730:                                         ; preds = %if.then724
  store i64 %sub728, ptr %taddr731, align 8
  %767 = insertvalue %any undef, ptr %taddr731, 0
  %768 = insertvalue %any %767, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %768, ptr %varargslots732, align 16
  %769 = insertvalue %"any[]" undef, ptr %varargslots732, 0
  %"$$temp733" = insertvalue %"any[]" %769, i64 1, 1
  store %"any[]" %"$$temp733", ptr %indirectarg734, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 152, ptr byval(%"any[]") align 8 %indirectarg734), !dbg !2785
  unreachable, !dbg !2785

panic737:                                         ; preds = %checkok735
  store i64 8, ptr %taddr738, align 8
  %770 = insertvalue %any undef, ptr %taddr738, 0
  %771 = insertvalue %any %770, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub728, ptr %taddr739, align 8
  %772 = insertvalue %any undef, ptr %taddr739, 0
  %773 = insertvalue %any %772, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %771, ptr %varargslots740, align 16
  %ptradd741 = getelementptr inbounds i8, ptr %varargslots740, i64 16
  store %any %773, ptr %ptradd741, align 16
  %774 = insertvalue %"any[]" undef, ptr %varargslots740, 0
  %"$$temp742" = insertvalue %"any[]" %774, i64 2, 1
  store %"any[]" %"$$temp742", ptr %indirectarg743, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 152, ptr byval(%"any[]") align 8 %indirectarg743), !dbg !2785
  unreachable, !dbg !2785

panic747:                                         ; preds = %checkok744
  %775 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2782
  call void %775(ptr @.panic_msg.79, i64 17, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 152), !dbg !2782
  unreachable, !dbg !2782

panic757:                                         ; preds = %or.rhs756
  store i32 %353, ptr %taddr758, align 4
  %776 = insertvalue %any undef, ptr %taddr758, 0
  %777 = insertvalue %any %776, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %777, ptr %varargslots759, align 16
  %778 = insertvalue %"any[]" undef, ptr %varargslots759, 0
  %"$$temp760" = insertvalue %"any[]" %778, i64 1, 1
  store %"any[]" %"$$temp760", ptr %indirectarg761, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 154, ptr byval(%"any[]") align 8 %indirectarg761), !dbg !2795
  unreachable, !dbg !2795

panic773:                                         ; preds = %if.then767
  store i64 %sub771, ptr %taddr774, align 8
  %779 = insertvalue %any undef, ptr %taddr774, 0
  %780 = insertvalue %any %779, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %780, ptr %varargslots775, align 16
  %781 = insertvalue %"any[]" undef, ptr %varargslots775, 0
  %"$$temp776" = insertvalue %"any[]" %781, i64 1, 1
  store %"any[]" %"$$temp776", ptr %indirectarg777, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 154, ptr byval(%"any[]") align 8 %indirectarg777), !dbg !2798
  unreachable, !dbg !2798

panic780:                                         ; preds = %checkok778
  store i64 8, ptr %taddr781, align 8
  %782 = insertvalue %any undef, ptr %taddr781, 0
  %783 = insertvalue %any %782, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub771, ptr %taddr782, align 8
  %784 = insertvalue %any undef, ptr %taddr782, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %783, ptr %varargslots783, align 16
  %ptradd784 = getelementptr inbounds i8, ptr %varargslots783, i64 16
  store %any %785, ptr %ptradd784, align 16
  %786 = insertvalue %"any[]" undef, ptr %varargslots783, 0
  %"$$temp785" = insertvalue %"any[]" %786, i64 2, 1
  store %"any[]" %"$$temp785", ptr %indirectarg786, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 154, ptr byval(%"any[]") align 8 %indirectarg786), !dbg !2798
  unreachable, !dbg !2798

panic802:                                         ; preds = %cond.phi
  store i64 %sub800, ptr %taddr803, align 8
  %787 = insertvalue %any undef, ptr %taddr803, 0
  %788 = insertvalue %any %787, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %788, ptr %varargslots804, align 16
  %789 = insertvalue %"any[]" undef, ptr %varargslots804, 0
  %"$$temp805" = insertvalue %"any[]" %789, i64 1, 1
  store %"any[]" %"$$temp805", ptr %indirectarg806, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 161, ptr byval(%"any[]") align 8 %indirectarg806), !dbg !2809
  unreachable, !dbg !2809

panic809:                                         ; preds = %checkok807
  store i64 8, ptr %taddr810, align 8
  %790 = insertvalue %any undef, ptr %taddr810, 0
  %791 = insertvalue %any %790, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub800, ptr %taddr811, align 8
  %792 = insertvalue %any undef, ptr %taddr811, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %791, ptr %varargslots812, align 16
  %ptradd813 = getelementptr inbounds i8, ptr %varargslots812, i64 16
  store %any %793, ptr %ptradd813, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots812, 0
  %"$$temp814" = insertvalue %"any[]" %794, i64 2, 1
  store %"any[]" %"$$temp814", ptr %indirectarg815, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 161, ptr byval(%"any[]") align 8 %indirectarg815), !dbg !2809
  unreachable, !dbg !2809

panic823:                                         ; preds = %loop.body820
  store i64 %sext821, ptr %taddr824, align 8
  %795 = insertvalue %any undef, ptr %taddr824, 0
  %796 = insertvalue %any %795, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %796, ptr %varargslots825, align 16
  %797 = insertvalue %"any[]" undef, ptr %varargslots825, 0
  %"$$temp826" = insertvalue %"any[]" %797, i64 1, 1
  store %"any[]" %"$$temp826", ptr %indirectarg827, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 165, ptr byval(%"any[]") align 8 %indirectarg827), !dbg !2820
  unreachable, !dbg !2820

panic830:                                         ; preds = %checkok828
  store i64 128, ptr %taddr831, align 8
  %798 = insertvalue %any undef, ptr %taddr831, 0
  %799 = insertvalue %any %798, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext821, ptr %taddr832, align 8
  %800 = insertvalue %any undef, ptr %taddr832, 0
  %801 = insertvalue %any %800, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %799, ptr %varargslots833, align 16
  %ptradd834 = getelementptr inbounds i8, ptr %varargslots833, i64 16
  store %any %801, ptr %ptradd834, align 16
  %802 = insertvalue %"any[]" undef, ptr %varargslots833, 0
  %"$$temp835" = insertvalue %"any[]" %802, i64 2, 1
  store %"any[]" %"$$temp835", ptr %indirectarg836, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 165, ptr byval(%"any[]") align 8 %indirectarg836), !dbg !2820
  unreachable, !dbg !2820

panic840:                                         ; preds = %checkok837
  %803 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2822
  call void %803(ptr @.panic_msg.81, i64 10, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 165), !dbg !2822
  unreachable, !dbg !2822

panic845:                                         ; preds = %checkok841
  store i64 %sext843, ptr %taddr846, align 8
  %804 = insertvalue %any undef, ptr %taddr846, 0
  %805 = insertvalue %any %804, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %805, ptr %varargslots847, align 16
  %806 = insertvalue %"any[]" undef, ptr %varargslots847, 0
  %"$$temp848" = insertvalue %"any[]" %806, i64 1, 1
  store %"any[]" %"$$temp848", ptr %indirectarg849, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg849), !dbg !2823
  unreachable, !dbg !2823

panic852:                                         ; preds = %checkok850
  store i64 128, ptr %taddr853, align 8
  %807 = insertvalue %any undef, ptr %taddr853, 0
  %808 = insertvalue %any %807, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext843, ptr %taddr854, align 8
  %809 = insertvalue %any undef, ptr %taddr854, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %808, ptr %varargslots855, align 16
  %ptradd856 = getelementptr inbounds i8, ptr %varargslots855, i64 16
  store %any %810, ptr %ptradd856, align 16
  %811 = insertvalue %"any[]" undef, ptr %varargslots855, 0
  %"$$temp857" = insertvalue %"any[]" %811, i64 2, 1
  store %"any[]" %"$$temp857", ptr %indirectarg858, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg858), !dbg !2823
  unreachable, !dbg !2823

panic863:                                         ; preds = %checkok859
  store i64 %sext861, ptr %taddr864, align 8
  %812 = insertvalue %any undef, ptr %taddr864, 0
  %813 = insertvalue %any %812, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %813, ptr %varargslots865, align 16
  %814 = insertvalue %"any[]" undef, ptr %varargslots865, 0
  %"$$temp866" = insertvalue %"any[]" %814, i64 1, 1
  store %"any[]" %"$$temp866", ptr %indirectarg867, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg867), !dbg !2824
  unreachable, !dbg !2824

panic870:                                         ; preds = %checkok868
  store i64 128, ptr %taddr871, align 8
  %815 = insertvalue %any undef, ptr %taddr871, 0
  %816 = insertvalue %any %815, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext861, ptr %taddr872, align 8
  %817 = insertvalue %any undef, ptr %taddr872, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %816, ptr %varargslots873, align 16
  %ptradd874 = getelementptr inbounds i8, ptr %varargslots873, i64 16
  store %any %818, ptr %ptradd874, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots873, 0
  %"$$temp875" = insertvalue %"any[]" %819, i64 2, 1
  store %"any[]" %"$$temp875", ptr %indirectarg876, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 166, ptr byval(%"any[]") align 8 %indirectarg876), !dbg !2824
  unreachable, !dbg !2824

panic880:                                         ; preds = %checkok877
  %820 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2826
  call void %820(ptr @.panic_msg.79, i64 17, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 166), !dbg !2826
  unreachable, !dbg !2826

panic884:                                         ; preds = %checkok881
  %821 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2829
  call void %821(ptr @.panic_msg.79, i64 17, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 167), !dbg !2829
  unreachable, !dbg !2829

panic892:                                         ; preds = %and.rhs889
  store i64 %sext890, ptr %taddr893, align 8
  %822 = insertvalue %any undef, ptr %taddr893, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %823, ptr %varargslots894, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots894, 0
  %"$$temp895" = insertvalue %"any[]" %824, i64 1, 1
  store %"any[]" %"$$temp895", ptr %indirectarg896, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 168, ptr byval(%"any[]") align 8 %indirectarg896), !dbg !2833
  unreachable, !dbg !2833

panic899:                                         ; preds = %checkok897
  store i64 128, ptr %taddr900, align 8
  %825 = insertvalue %any undef, ptr %taddr900, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext890, ptr %taddr901, align 8
  %827 = insertvalue %any undef, ptr %taddr901, 0
  %828 = insertvalue %any %827, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %826, ptr %varargslots902, align 16
  %ptradd903 = getelementptr inbounds i8, ptr %varargslots902, i64 16
  store %any %828, ptr %ptradd903, align 16
  %829 = insertvalue %"any[]" undef, ptr %varargslots902, 0
  %"$$temp904" = insertvalue %"any[]" %829, i64 2, 1
  store %"any[]" %"$$temp904", ptr %indirectarg905, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 168, ptr byval(%"any[]") align 8 %indirectarg905), !dbg !2833
  unreachable, !dbg !2833

panic923:                                         ; preds = %if.then919
  store i64 %sext921, ptr %taddr924, align 8
  %830 = insertvalue %any undef, ptr %taddr924, 0
  %831 = insertvalue %any %830, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %831, ptr %varargslots925, align 16
  %832 = insertvalue %"any[]" undef, ptr %varargslots925, 0
  %"$$temp926" = insertvalue %"any[]" %832, i64 1, 1
  store %"any[]" %"$$temp926", ptr %indirectarg927, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 174, ptr byval(%"any[]") align 8 %indirectarg927), !dbg !2839
  unreachable, !dbg !2839

panic930:                                         ; preds = %checkok928
  store i64 128, ptr %taddr931, align 8
  %833 = insertvalue %any undef, ptr %taddr931, 0
  %834 = insertvalue %any %833, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext921, ptr %taddr932, align 8
  %835 = insertvalue %any undef, ptr %taddr932, 0
  %836 = insertvalue %any %835, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %834, ptr %varargslots933, align 16
  %ptradd934 = getelementptr inbounds i8, ptr %varargslots933, i64 16
  store %any %836, ptr %ptradd934, align 16
  %837 = insertvalue %"any[]" undef, ptr %varargslots933, 0
  %"$$temp935" = insertvalue %"any[]" %837, i64 2, 1
  store %"any[]" %"$$temp935", ptr %indirectarg936, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 174, ptr byval(%"any[]") align 8 %indirectarg936), !dbg !2839
  unreachable, !dbg !2839

panic950:                                         ; preds = %and.rhs947
  store i64 %sext948, ptr %taddr951, align 8
  %838 = insertvalue %any undef, ptr %taddr951, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %839, ptr %varargslots952, align 16
  %840 = insertvalue %"any[]" undef, ptr %varargslots952, 0
  %"$$temp953" = insertvalue %"any[]" %840, i64 1, 1
  store %"any[]" %"$$temp953", ptr %indirectarg954, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 179, ptr byval(%"any[]") align 8 %indirectarg954), !dbg !2848
  unreachable, !dbg !2848

panic957:                                         ; preds = %checkok955
  store i64 128, ptr %taddr958, align 8
  %841 = insertvalue %any undef, ptr %taddr958, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext948, ptr %taddr959, align 8
  %843 = insertvalue %any undef, ptr %taddr959, 0
  %844 = insertvalue %any %843, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %842, ptr %varargslots960, align 16
  %ptradd961 = getelementptr inbounds i8, ptr %varargslots960, i64 16
  store %any %844, ptr %ptradd961, align 16
  %845 = insertvalue %"any[]" undef, ptr %varargslots960, 0
  %"$$temp962" = insertvalue %"any[]" %845, i64 2, 1
  store %"any[]" %"$$temp962", ptr %indirectarg963, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 179, ptr byval(%"any[]") align 8 %indirectarg963), !dbg !2848
  unreachable, !dbg !2848

panic980:                                         ; preds = %loop.body976
  store i64 %sext978, ptr %taddr981, align 8
  %846 = insertvalue %any undef, ptr %taddr981, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %847, ptr %varargslots982, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots982, 0
  %"$$temp983" = insertvalue %"any[]" %848, i64 1, 1
  store %"any[]" %"$$temp983", ptr %indirectarg984, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 185, ptr byval(%"any[]") align 8 %indirectarg984), !dbg !2860
  unreachable, !dbg !2860

panic987:                                         ; preds = %checkok985
  store i64 128, ptr %taddr988, align 8
  %849 = insertvalue %any undef, ptr %taddr988, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext978, ptr %taddr989, align 8
  %851 = insertvalue %any undef, ptr %taddr989, 0
  %852 = insertvalue %any %851, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %850, ptr %varargslots990, align 16
  %ptradd991 = getelementptr inbounds i8, ptr %varargslots990, i64 16
  store %any %852, ptr %ptradd991, align 16
  %853 = insertvalue %"any[]" undef, ptr %varargslots990, 0
  %"$$temp992" = insertvalue %"any[]" %853, i64 2, 1
  store %"any[]" %"$$temp992", ptr %indirectarg993, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 185, ptr byval(%"any[]") align 8 %indirectarg993), !dbg !2860
  unreachable, !dbg !2860

panic1005:                                        ; preds = %if.then1000
  store i64 %sext1003, ptr %taddr1006, align 8
  %854 = insertvalue %any undef, ptr %taddr1006, 0
  %855 = insertvalue %any %854, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %855, ptr %varargslots1007, align 16
  %856 = insertvalue %"any[]" undef, ptr %varargslots1007, 0
  %"$$temp1008" = insertvalue %"any[]" %856, i64 1, 1
  store %"any[]" %"$$temp1008", ptr %indirectarg1009, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 189, ptr byval(%"any[]") align 8 %indirectarg1009), !dbg !2867
  unreachable, !dbg !2867

panic1012:                                        ; preds = %checkok1010
  store i64 128, ptr %taddr1013, align 8
  %857 = insertvalue %any undef, ptr %taddr1013, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1003, ptr %taddr1014, align 8
  %859 = insertvalue %any undef, ptr %taddr1014, 0
  %860 = insertvalue %any %859, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %858, ptr %varargslots1015, align 16
  %ptradd1016 = getelementptr inbounds i8, ptr %varargslots1015, i64 16
  store %any %860, ptr %ptradd1016, align 16
  %861 = insertvalue %"any[]" undef, ptr %varargslots1015, 0
  %"$$temp1017" = insertvalue %"any[]" %861, i64 2, 1
  store %"any[]" %"$$temp1017", ptr %indirectarg1018, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 189, ptr byval(%"any[]") align 8 %indirectarg1018), !dbg !2867
  unreachable, !dbg !2867

panic1026:                                        ; preds = %if.else1023
  store i64 %sext1024, ptr %taddr1027, align 8
  %862 = insertvalue %any undef, ptr %taddr1027, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %863, ptr %varargslots1028, align 16
  %864 = insertvalue %"any[]" undef, ptr %varargslots1028, 0
  %"$$temp1029" = insertvalue %"any[]" %864, i64 1, 1
  store %"any[]" %"$$temp1029", ptr %indirectarg1030, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 194, ptr byval(%"any[]") align 8 %indirectarg1030), !dbg !2872
  unreachable, !dbg !2872

panic1033:                                        ; preds = %checkok1031
  store i64 128, ptr %taddr1034, align 8
  %865 = insertvalue %any undef, ptr %taddr1034, 0
  %866 = insertvalue %any %865, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1024, ptr %taddr1035, align 8
  %867 = insertvalue %any undef, ptr %taddr1035, 0
  %868 = insertvalue %any %867, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %866, ptr %varargslots1036, align 16
  %ptradd1037 = getelementptr inbounds i8, ptr %varargslots1036, i64 16
  store %any %868, ptr %ptradd1037, align 16
  %869 = insertvalue %"any[]" undef, ptr %varargslots1036, 0
  %"$$temp1038" = insertvalue %"any[]" %869, i64 2, 1
  store %"any[]" %"$$temp1038", ptr %indirectarg1039, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 194, ptr byval(%"any[]") align 8 %indirectarg1039), !dbg !2872
  unreachable, !dbg !2872

panic1054:                                        ; preds = %and.rhs1051
  store i64 %sext1052, ptr %taddr1055, align 8
  %870 = insertvalue %any undef, ptr %taddr1055, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %871, ptr %varargslots1056, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots1056, 0
  %"$$temp1057" = insertvalue %"any[]" %872, i64 1, 1
  store %"any[]" %"$$temp1057", ptr %indirectarg1058, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 196, ptr byval(%"any[]") align 8 %indirectarg1058), !dbg !2878
  unreachable, !dbg !2878

panic1061:                                        ; preds = %checkok1059
  store i64 128, ptr %taddr1062, align 8
  %873 = insertvalue %any undef, ptr %taddr1062, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1052, ptr %taddr1063, align 8
  %875 = insertvalue %any undef, ptr %taddr1063, 0
  %876 = insertvalue %any %875, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %874, ptr %varargslots1064, align 16
  %ptradd1065 = getelementptr inbounds i8, ptr %varargslots1064, i64 16
  store %any %876, ptr %ptradd1065, align 16
  %877 = insertvalue %"any[]" undef, ptr %varargslots1064, 0
  %"$$temp1066" = insertvalue %"any[]" %877, i64 2, 1
  store %"any[]" %"$$temp1066", ptr %indirectarg1067, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 196, ptr byval(%"any[]") align 8 %indirectarg1067), !dbg !2878
  unreachable, !dbg !2878

panic1094:                                        ; preds = %if.then1087
  store i64 %sext1092, ptr %taddr1095, align 8
  %878 = insertvalue %any undef, ptr %taddr1095, 0
  %879 = insertvalue %any %878, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %879, ptr %varargslots1096, align 16
  %880 = insertvalue %"any[]" undef, ptr %varargslots1096, 0
  %"$$temp1097" = insertvalue %"any[]" %880, i64 1, 1
  store %"any[]" %"$$temp1097", ptr %indirectarg1098, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1098), !dbg !2892
  unreachable, !dbg !2892

panic1101:                                        ; preds = %checkok1099
  store i64 128, ptr %taddr1102, align 8
  %881 = insertvalue %any undef, ptr %taddr1102, 0
  %882 = insertvalue %any %881, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1092, ptr %taddr1103, align 8
  %883 = insertvalue %any undef, ptr %taddr1103, 0
  %884 = insertvalue %any %883, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %882, ptr %varargslots1104, align 16
  %ptradd1105 = getelementptr inbounds i8, ptr %varargslots1104, i64 16
  store %any %884, ptr %ptradd1105, align 16
  %885 = insertvalue %"any[]" undef, ptr %varargslots1104, 0
  %"$$temp1106" = insertvalue %"any[]" %885, i64 2, 1
  store %"any[]" %"$$temp1106", ptr %indirectarg1107, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1107), !dbg !2892
  unreachable, !dbg !2892

panic1112:                                        ; preds = %checkok1108
  store i64 %sext1110, ptr %taddr1113, align 8
  %886 = insertvalue %any undef, ptr %taddr1113, 0
  %887 = insertvalue %any %886, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %887, ptr %varargslots1114, align 16
  %888 = insertvalue %"any[]" undef, ptr %varargslots1114, 0
  %"$$temp1115" = insertvalue %"any[]" %888, i64 1, 1
  store %"any[]" %"$$temp1115", ptr %indirectarg1116, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1116), !dbg !2893
  unreachable, !dbg !2893

panic1119:                                        ; preds = %checkok1117
  store i64 128, ptr %taddr1120, align 8
  %889 = insertvalue %any undef, ptr %taddr1120, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1110, ptr %taddr1121, align 8
  %891 = insertvalue %any undef, ptr %taddr1121, 0
  %892 = insertvalue %any %891, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %890, ptr %varargslots1122, align 16
  %ptradd1123 = getelementptr inbounds i8, ptr %varargslots1122, i64 16
  store %any %892, ptr %ptradd1123, align 16
  %893 = insertvalue %"any[]" undef, ptr %varargslots1122, 0
  %"$$temp1124" = insertvalue %"any[]" %893, i64 2, 1
  store %"any[]" %"$$temp1124", ptr %indirectarg1125, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 206, ptr byval(%"any[]") align 8 %indirectarg1125), !dbg !2893
  unreachable, !dbg !2893

panic1132:                                        ; preds = %if.exit1129
  store i64 %sext1130, ptr %taddr1133, align 8
  %894 = insertvalue %any undef, ptr %taddr1133, 0
  %895 = insertvalue %any %894, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %895, ptr %varargslots1134, align 16
  %896 = insertvalue %"any[]" undef, ptr %varargslots1134, 0
  %"$$temp1135" = insertvalue %"any[]" %896, i64 1, 1
  store %"any[]" %"$$temp1135", ptr %indirectarg1136, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 208, ptr byval(%"any[]") align 8 %indirectarg1136), !dbg !2895
  unreachable, !dbg !2895

panic1139:                                        ; preds = %checkok1137
  store i64 128, ptr %taddr1140, align 8
  %897 = insertvalue %any undef, ptr %taddr1140, 0
  %898 = insertvalue %any %897, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1130, ptr %taddr1141, align 8
  %899 = insertvalue %any undef, ptr %taddr1141, 0
  %900 = insertvalue %any %899, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %898, ptr %varargslots1142, align 16
  %ptradd1143 = getelementptr inbounds i8, ptr %varargslots1142, i64 16
  store %any %900, ptr %ptradd1143, align 16
  %901 = insertvalue %"any[]" undef, ptr %varargslots1142, 0
  %"$$temp1144" = insertvalue %"any[]" %901, i64 2, 1
  store %"any[]" %"$$temp1144", ptr %indirectarg1145, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 208, ptr byval(%"any[]") align 8 %indirectarg1145), !dbg !2895
  unreachable, !dbg !2895

panic1161:                                        ; preds = %or.rhs1158
  store i64 %sext1159, ptr %taddr1162, align 8
  %902 = insertvalue %any undef, ptr %taddr1162, 0
  %903 = insertvalue %any %902, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %903, ptr %varargslots1163, align 16
  %904 = insertvalue %"any[]" undef, ptr %varargslots1163, 0
  %"$$temp1164" = insertvalue %"any[]" %904, i64 1, 1
  store %"any[]" %"$$temp1164", ptr %indirectarg1165, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1165), !dbg !2916
  unreachable, !dbg !2916

panic1168:                                        ; preds = %checkok1166
  store i64 128, ptr %taddr1169, align 8
  %905 = insertvalue %any undef, ptr %taddr1169, 0
  %906 = insertvalue %any %905, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1159, ptr %taddr1170, align 8
  %907 = insertvalue %any undef, ptr %taddr1170, 0
  %908 = insertvalue %any %907, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %906, ptr %varargslots1171, align 16
  %ptradd1172 = getelementptr inbounds i8, ptr %varargslots1171, i64 16
  store %any %908, ptr %ptradd1172, align 16
  %909 = insertvalue %"any[]" undef, ptr %varargslots1171, 0
  %"$$temp1173" = insertvalue %"any[]" %909, i64 2, 1
  store %"any[]" %"$$temp1173", ptr %indirectarg1174, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1174), !dbg !2916
  unreachable, !dbg !2916

panic1179:                                        ; preds = %checkok1175
  store i64 %sext1177, ptr %taddr1180, align 8
  %910 = insertvalue %any undef, ptr %taddr1180, 0
  %911 = insertvalue %any %910, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %911, ptr %varargslots1181, align 16
  %912 = insertvalue %"any[]" undef, ptr %varargslots1181, 0
  %"$$temp1182" = insertvalue %"any[]" %912, i64 1, 1
  store %"any[]" %"$$temp1182", ptr %indirectarg1183, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1183), !dbg !2917
  unreachable, !dbg !2917

panic1186:                                        ; preds = %checkok1184
  store i64 2, ptr %taddr1187, align 8
  %913 = insertvalue %any undef, ptr %taddr1187, 0
  %914 = insertvalue %any %913, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1177, ptr %taddr1188, align 8
  %915 = insertvalue %any undef, ptr %taddr1188, 0
  %916 = insertvalue %any %915, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %914, ptr %varargslots1189, align 16
  %ptradd1190 = getelementptr inbounds i8, ptr %varargslots1189, i64 16
  store %any %916, ptr %ptradd1190, align 16
  %917 = insertvalue %"any[]" undef, ptr %varargslots1189, 0
  %"$$temp1191" = insertvalue %"any[]" %917, i64 2, 1
  store %"any[]" %"$$temp1191", ptr %indirectarg1192, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 221, ptr byval(%"any[]") align 8 %indirectarg1192), !dbg !2917
  unreachable, !dbg !2917

panic1204:                                        ; preds = %if.exit1199
  store i64 %sext1202, ptr %taddr1205, align 8
  %918 = insertvalue %any undef, ptr %taddr1205, 0
  %919 = insertvalue %any %918, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %919, ptr %varargslots1206, align 16
  %920 = insertvalue %"any[]" undef, ptr %varargslots1206, 0
  %"$$temp1207" = insertvalue %"any[]" %920, i64 1, 1
  store %"any[]" %"$$temp1207", ptr %indirectarg1208, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1208), !dbg !2922
  unreachable, !dbg !2922

panic1211:                                        ; preds = %checkok1209
  store i64 128, ptr %taddr1212, align 8
  %921 = insertvalue %any undef, ptr %taddr1212, 0
  %922 = insertvalue %any %921, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1202, ptr %taddr1213, align 8
  %923 = insertvalue %any undef, ptr %taddr1213, 0
  %924 = insertvalue %any %923, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %922, ptr %varargslots1214, align 16
  %ptradd1215 = getelementptr inbounds i8, ptr %varargslots1214, i64 16
  store %any %924, ptr %ptradd1215, align 16
  %925 = insertvalue %"any[]" undef, ptr %varargslots1214, 0
  %"$$temp1216" = insertvalue %"any[]" %925, i64 2, 1
  store %"any[]" %"$$temp1216", ptr %indirectarg1217, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1217), !dbg !2922
  unreachable, !dbg !2922

panic1222:                                        ; preds = %checkok1218
  store i64 %sext1220, ptr %taddr1223, align 8
  %926 = insertvalue %any undef, ptr %taddr1223, 0
  %927 = insertvalue %any %926, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %927, ptr %varargslots1224, align 16
  %928 = insertvalue %"any[]" undef, ptr %varargslots1224, 0
  %"$$temp1225" = insertvalue %"any[]" %928, i64 1, 1
  store %"any[]" %"$$temp1225", ptr %indirectarg1226, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1226), !dbg !2924
  unreachable, !dbg !2924

panic1229:                                        ; preds = %checkok1227
  store i64 2, ptr %taddr1230, align 8
  %929 = insertvalue %any undef, ptr %taddr1230, 0
  %930 = insertvalue %any %929, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1220, ptr %taddr1231, align 8
  %931 = insertvalue %any undef, ptr %taddr1231, 0
  %932 = insertvalue %any %931, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %930, ptr %varargslots1232, align 16
  %ptradd1233 = getelementptr inbounds i8, ptr %varargslots1232, i64 16
  store %any %932, ptr %ptradd1233, align 16
  %933 = insertvalue %"any[]" undef, ptr %varargslots1232, 0
  %"$$temp1234" = insertvalue %"any[]" %933, i64 2, 1
  store %"any[]" %"$$temp1234", ptr %indirectarg1235, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 226, ptr byval(%"any[]") align 8 %indirectarg1235), !dbg !2924
  unreachable, !dbg !2924

panic1260:                                        ; preds = %loop.body1256
  store i64 %sext1258, ptr %taddr1261, align 8
  %934 = insertvalue %any undef, ptr %taddr1261, 0
  %935 = insertvalue %any %934, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %935, ptr %varargslots1262, align 16
  %936 = insertvalue %"any[]" undef, ptr %varargslots1262, 0
  %"$$temp1263" = insertvalue %"any[]" %936, i64 1, 1
  store %"any[]" %"$$temp1263", ptr %indirectarg1264, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1264), !dbg !2942
  unreachable, !dbg !2942

panic1267:                                        ; preds = %checkok1265
  store i64 128, ptr %taddr1268, align 8
  %937 = insertvalue %any undef, ptr %taddr1268, 0
  %938 = insertvalue %any %937, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1258, ptr %taddr1269, align 8
  %939 = insertvalue %any undef, ptr %taddr1269, 0
  %940 = insertvalue %any %939, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %938, ptr %varargslots1270, align 16
  %ptradd1271 = getelementptr inbounds i8, ptr %varargslots1270, i64 16
  store %any %940, ptr %ptradd1271, align 16
  %941 = insertvalue %"any[]" undef, ptr %varargslots1270, 0
  %"$$temp1272" = insertvalue %"any[]" %941, i64 2, 1
  store %"any[]" %"$$temp1272", ptr %indirectarg1273, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1273), !dbg !2942
  unreachable, !dbg !2942

panic1276:                                        ; preds = %checkok1274
  store i32 %497, ptr %taddr1277, align 4
  %942 = insertvalue %any undef, ptr %taddr1277, 0
  %943 = insertvalue %any %942, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %943, ptr %varargslots1278, align 16
  %944 = insertvalue %"any[]" undef, ptr %varargslots1278, 0
  %"$$temp1279" = insertvalue %"any[]" %944, i64 1, 1
  store %"any[]" %"$$temp1279", ptr %indirectarg1280, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1280), !dbg !2944
  unreachable, !dbg !2944

panic1283:                                        ; preds = %checkok1281
  store i32 %497, ptr %taddr1284, align 4
  %945 = insertvalue %any undef, ptr %taddr1284, 0
  %946 = insertvalue %any %945, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %946, ptr %varargslots1285, align 16
  %947 = insertvalue %"any[]" undef, ptr %varargslots1285, 0
  %"$$temp1286" = insertvalue %"any[]" %947, i64 1, 1
  store %"any[]" %"$$temp1286", ptr %indirectarg1287, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 233, ptr byval(%"any[]") align 8 %indirectarg1287), !dbg !2944
  unreachable, !dbg !2944

panic1294:                                        ; preds = %checkok1288
  store i64 %sext1292, ptr %taddr1295, align 8
  %948 = insertvalue %any undef, ptr %taddr1295, 0
  %949 = insertvalue %any %948, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %949, ptr %varargslots1296, align 16
  %950 = insertvalue %"any[]" undef, ptr %varargslots1296, 0
  %"$$temp1297" = insertvalue %"any[]" %950, i64 1, 1
  store %"any[]" %"$$temp1297", ptr %indirectarg1298, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1298), !dbg !2946
  unreachable, !dbg !2946

panic1301:                                        ; preds = %checkok1299
  store i64 128, ptr %taddr1302, align 8
  %951 = insertvalue %any undef, ptr %taddr1302, 0
  %952 = insertvalue %any %951, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1292, ptr %taddr1303, align 8
  %953 = insertvalue %any undef, ptr %taddr1303, 0
  %954 = insertvalue %any %953, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %952, ptr %varargslots1304, align 16
  %ptradd1305 = getelementptr inbounds i8, ptr %varargslots1304, i64 16
  store %any %954, ptr %ptradd1305, align 16
  %955 = insertvalue %"any[]" undef, ptr %varargslots1304, 0
  %"$$temp1306" = insertvalue %"any[]" %955, i64 2, 1
  store %"any[]" %"$$temp1306", ptr %indirectarg1307, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1307), !dbg !2946
  unreachable, !dbg !2946

panic1312:                                        ; preds = %checkok1308
  store i64 %sext1310, ptr %taddr1313, align 8
  %956 = insertvalue %any undef, ptr %taddr1313, 0
  %957 = insertvalue %any %956, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %957, ptr %varargslots1314, align 16
  %958 = insertvalue %"any[]" undef, ptr %varargslots1314, 0
  %"$$temp1315" = insertvalue %"any[]" %958, i64 1, 1
  store %"any[]" %"$$temp1315", ptr %indirectarg1316, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1316), !dbg !2947
  unreachable, !dbg !2947

panic1319:                                        ; preds = %checkok1317
  store i64 128, ptr %taddr1320, align 8
  %959 = insertvalue %any undef, ptr %taddr1320, 0
  %960 = insertvalue %any %959, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1310, ptr %taddr1321, align 8
  %961 = insertvalue %any undef, ptr %taddr1321, 0
  %962 = insertvalue %any %961, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %960, ptr %varargslots1322, align 16
  %ptradd1323 = getelementptr inbounds i8, ptr %varargslots1322, i64 16
  store %any %962, ptr %ptradd1323, align 16
  %963 = insertvalue %"any[]" undef, ptr %varargslots1322, 0
  %"$$temp1324" = insertvalue %"any[]" %963, i64 2, 1
  store %"any[]" %"$$temp1324", ptr %indirectarg1325, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1325), !dbg !2947
  unreachable, !dbg !2947

panic1329:                                        ; preds = %checkok1326
  store i32 %508, ptr %taddr1330, align 4
  %964 = insertvalue %any undef, ptr %taddr1330, 0
  %965 = insertvalue %any %964, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %965, ptr %varargslots1331, align 16
  %966 = insertvalue %"any[]" undef, ptr %varargslots1331, 0
  %"$$temp1332" = insertvalue %"any[]" %966, i64 1, 1
  store %"any[]" %"$$temp1332", ptr %indirectarg1333, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 234, ptr byval(%"any[]") align 8 %indirectarg1333), !dbg !2949
  unreachable, !dbg !2949

panic1338:                                        ; preds = %checkok1334
  store i32 %512, ptr %taddr1339, align 4
  %967 = insertvalue %any undef, ptr %taddr1339, 0
  %968 = insertvalue %any %967, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %968, ptr %varargslots1340, align 16
  %969 = insertvalue %"any[]" undef, ptr %varargslots1340, 0
  %"$$temp1341" = insertvalue %"any[]" %969, i64 1, 1
  store %"any[]" %"$$temp1341", ptr %indirectarg1342, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 235, ptr byval(%"any[]") align 8 %indirectarg1342), !dbg !2952
  unreachable, !dbg !2952

panic1345:                                        ; preds = %checkok1343
  store i32 %512, ptr %taddr1346, align 4
  %970 = insertvalue %any undef, ptr %taddr1346, 0
  %971 = insertvalue %any %970, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %971, ptr %varargslots1347, align 16
  %972 = insertvalue %"any[]" undef, ptr %varargslots1347, 0
  %"$$temp1348" = insertvalue %"any[]" %972, i64 1, 1
  store %"any[]" %"$$temp1348", ptr %indirectarg1349, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 235, ptr byval(%"any[]") align 8 %indirectarg1349), !dbg !2952
  unreachable, !dbg !2952

panic1356:                                        ; preds = %and.rhs1353
  store i64 %sext1354, ptr %taddr1357, align 8
  %973 = insertvalue %any undef, ptr %taddr1357, 0
  %974 = insertvalue %any %973, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %974, ptr %varargslots1358, align 16
  %975 = insertvalue %"any[]" undef, ptr %varargslots1358, 0
  %"$$temp1359" = insertvalue %"any[]" %975, i64 1, 1
  store %"any[]" %"$$temp1359", ptr %indirectarg1360, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 236, ptr byval(%"any[]") align 8 %indirectarg1360), !dbg !2956
  unreachable, !dbg !2956

panic1363:                                        ; preds = %checkok1361
  store i64 128, ptr %taddr1364, align 8
  %976 = insertvalue %any undef, ptr %taddr1364, 0
  %977 = insertvalue %any %976, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1354, ptr %taddr1365, align 8
  %978 = insertvalue %any undef, ptr %taddr1365, 0
  %979 = insertvalue %any %978, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %977, ptr %varargslots1366, align 16
  %ptradd1367 = getelementptr inbounds i8, ptr %varargslots1366, i64 16
  store %any %979, ptr %ptradd1367, align 16
  %980 = insertvalue %"any[]" undef, ptr %varargslots1366, 0
  %"$$temp1368" = insertvalue %"any[]" %980, i64 2, 1
  store %"any[]" %"$$temp1368", ptr %indirectarg1369, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 236, ptr byval(%"any[]") align 8 %indirectarg1369), !dbg !2956
  unreachable, !dbg !2956

panic1392:                                        ; preds = %if.then1389
  store i64 %sext1390, ptr %taddr1393, align 8
  %981 = insertvalue %any undef, ptr %taddr1393, 0
  %982 = insertvalue %any %981, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %982, ptr %varargslots1394, align 16
  %983 = insertvalue %"any[]" undef, ptr %varargslots1394, 0
  %"$$temp1395" = insertvalue %"any[]" %983, i64 1, 1
  store %"any[]" %"$$temp1395", ptr %indirectarg1396, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 247, ptr byval(%"any[]") align 8 %indirectarg1396), !dbg !2966
  unreachable, !dbg !2966

panic1399:                                        ; preds = %checkok1397
  store i64 128, ptr %taddr1400, align 8
  %984 = insertvalue %any undef, ptr %taddr1400, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1390, ptr %taddr1401, align 8
  %986 = insertvalue %any undef, ptr %taddr1401, 0
  %987 = insertvalue %any %986, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %985, ptr %varargslots1402, align 16
  %ptradd1403 = getelementptr inbounds i8, ptr %varargslots1402, i64 16
  store %any %987, ptr %ptradd1403, align 16
  %988 = insertvalue %"any[]" undef, ptr %varargslots1402, 0
  %"$$temp1404" = insertvalue %"any[]" %988, i64 2, 1
  store %"any[]" %"$$temp1404", ptr %indirectarg1405, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 247, ptr byval(%"any[]") align 8 %indirectarg1405), !dbg !2966
  unreachable, !dbg !2966

panic1415:                                        ; preds = %if.else1410
  store i64 %sext1413, ptr %taddr1416, align 8
  %989 = insertvalue %any undef, ptr %taddr1416, 0
  %990 = insertvalue %any %989, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %990, ptr %varargslots1417, align 16
  %991 = insertvalue %"any[]" undef, ptr %varargslots1417, 0
  %"$$temp1418" = insertvalue %"any[]" %991, i64 1, 1
  store %"any[]" %"$$temp1418", ptr %indirectarg1419, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 252, ptr byval(%"any[]") align 8 %indirectarg1419), !dbg !2970
  unreachable, !dbg !2970

panic1422:                                        ; preds = %checkok1420
  store i64 128, ptr %taddr1423, align 8
  %992 = insertvalue %any undef, ptr %taddr1423, 0
  %993 = insertvalue %any %992, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1413, ptr %taddr1424, align 8
  %994 = insertvalue %any undef, ptr %taddr1424, 0
  %995 = insertvalue %any %994, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %993, ptr %varargslots1425, align 16
  %ptradd1426 = getelementptr inbounds i8, ptr %varargslots1425, i64 16
  store %any %995, ptr %ptradd1426, align 16
  %996 = insertvalue %"any[]" undef, ptr %varargslots1425, 0
  %"$$temp1427" = insertvalue %"any[]" %996, i64 2, 1
  store %"any[]" %"$$temp1427", ptr %indirectarg1428, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 252, ptr byval(%"any[]") align 8 %indirectarg1428), !dbg !2970
  unreachable, !dbg !2970

panic1449:                                        ; preds = %if.then1443
  store i64 %sext1447, ptr %taddr1450, align 8
  %997 = insertvalue %any undef, ptr %taddr1450, 0
  %998 = insertvalue %any %997, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %998, ptr %varargslots1451, align 16
  %999 = insertvalue %"any[]" undef, ptr %varargslots1451, 0
  %"$$temp1452" = insertvalue %"any[]" %999, i64 1, 1
  store %"any[]" %"$$temp1452", ptr %indirectarg1453, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 262, ptr byval(%"any[]") align 8 %indirectarg1453), !dbg !2985
  unreachable, !dbg !2985

panic1456:                                        ; preds = %checkok1454
  store i64 128, ptr %taddr1457, align 8
  %1000 = insertvalue %any undef, ptr %taddr1457, 0
  %1001 = insertvalue %any %1000, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1447, ptr %taddr1458, align 8
  %1002 = insertvalue %any undef, ptr %taddr1458, 0
  %1003 = insertvalue %any %1002, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1001, ptr %varargslots1459, align 16
  %ptradd1460 = getelementptr inbounds i8, ptr %varargslots1459, i64 16
  store %any %1003, ptr %ptradd1460, align 16
  %1004 = insertvalue %"any[]" undef, ptr %varargslots1459, 0
  %"$$temp1461" = insertvalue %"any[]" %1004, i64 2, 1
  store %"any[]" %"$$temp1461", ptr %indirectarg1462, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 262, ptr byval(%"any[]") align 8 %indirectarg1462), !dbg !2985
  unreachable, !dbg !2985

panic1471:                                        ; preds = %if.exit1465
  store i64 %sext1469, ptr %taddr1472, align 8
  %1005 = insertvalue %any undef, ptr %taddr1472, 0
  %1006 = insertvalue %any %1005, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1006, ptr %varargslots1473, align 16
  %1007 = insertvalue %"any[]" undef, ptr %varargslots1473, 0
  %"$$temp1474" = insertvalue %"any[]" %1007, i64 1, 1
  store %"any[]" %"$$temp1474", ptr %indirectarg1475, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 263, ptr byval(%"any[]") align 8 %indirectarg1475), !dbg !2989
  unreachable, !dbg !2989

panic1478:                                        ; preds = %checkok1476
  store i64 128, ptr %taddr1479, align 8
  %1008 = insertvalue %any undef, ptr %taddr1479, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1469, ptr %taddr1480, align 8
  %1010 = insertvalue %any undef, ptr %taddr1480, 0
  %1011 = insertvalue %any %1010, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1009, ptr %varargslots1481, align 16
  %ptradd1482 = getelementptr inbounds i8, ptr %varargslots1481, i64 16
  store %any %1011, ptr %ptradd1482, align 16
  %1012 = insertvalue %"any[]" undef, ptr %varargslots1481, 0
  %"$$temp1483" = insertvalue %"any[]" %1012, i64 2, 1
  store %"any[]" %"$$temp1483", ptr %indirectarg1484, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 263, ptr byval(%"any[]") align 8 %indirectarg1484), !dbg !2989
  unreachable, !dbg !2989

panic1521:                                        ; preds = %if.then1508
  %1013 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3026
  call void %1013(ptr @.panic_msg.81, i64 10, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 284), !dbg !3026
  unreachable, !dbg !3026

panic1534:                                        ; preds = %if.then1529
  store i64 %sext1532, ptr %taddr1535, align 8
  %1014 = insertvalue %any undef, ptr %taddr1535, 0
  %1015 = insertvalue %any %1014, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1015, ptr %varargslots1536, align 16
  %1016 = insertvalue %"any[]" undef, ptr %varargslots1536, 0
  %"$$temp1537" = insertvalue %"any[]" %1016, i64 1, 1
  store %"any[]" %"$$temp1537", ptr %indirectarg1538, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 292, ptr byval(%"any[]") align 8 %indirectarg1538), !dbg !3043
  unreachable, !dbg !3043

panic1541:                                        ; preds = %checkok1539
  store i64 128, ptr %taddr1542, align 8
  %1017 = insertvalue %any undef, ptr %taddr1542, 0
  %1018 = insertvalue %any %1017, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1532, ptr %taddr1543, align 8
  %1019 = insertvalue %any undef, ptr %taddr1543, 0
  %1020 = insertvalue %any %1019, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1018, ptr %varargslots1544, align 16
  %ptradd1545 = getelementptr inbounds i8, ptr %varargslots1544, i64 16
  store %any %1020, ptr %ptradd1545, align 16
  %1021 = insertvalue %"any[]" undef, ptr %varargslots1544, 0
  %"$$temp1546" = insertvalue %"any[]" %1021, i64 2, 1
  store %"any[]" %"$$temp1546", ptr %indirectarg1547, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.71, i64 9, i32 292, ptr byval(%"any[]") align 8 %indirectarg1547), !dbg !3043
  unreachable, !dbg !3043
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.String.to_float(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3104 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca float, align 4
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx43 = alloca i64, align 8
  %cmp.idx57 = alloca i64, align 8
  %cmp.idx69 = alloca i64, align 8
  %taddr88 = alloca i64, align 8
  %taddr89 = alloca i64, align 8
  %varargslots90 = alloca [2 x %any], align 16
  %indirectarg93 = alloca %"any[]", align 8
  %taddr102 = alloca i64, align 8
  %taddr103 = alloca i64, align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %varargslots118 = alloca [2 x %any], align 16
  %indirectarg121 = alloca %"any[]", align 8
  %chars125 = alloca %"char[]", align 8
  %sign126 = alloca i32, align 4
  %blockret127 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %varargslots135 = alloca [2 x %any], align 16
  %indirectarg138 = alloca %"any[]", align 8
  %taddr162 = alloca i64, align 8
  %taddr163 = alloca i64, align 8
  %varargslots164 = alloca [2 x %any], align 16
  %indirectarg167 = alloca %"any[]", align 8
  %taddr182 = alloca i64, align 8
  %taddr183 = alloca i64, align 8
  %varargslots184 = alloca [2 x %any], align 16
  %indirectarg187 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret218 = alloca i32, align 4
  %switch228 = alloca i8, align 1
  %taddr260 = alloca i64, align 8
  %taddr261 = alloca i64, align 8
  %varargslots262 = alloca [2 x %any], align 16
  %indirectarg265 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr290 = alloca i64, align 8
  %taddr291 = alloca i64, align 8
  %varargslots292 = alloca [2 x %any], align 16
  %indirectarg295 = alloca %"any[]", align 8
  %taddr298 = alloca i64, align 8
  %varargslots299 = alloca [1 x %any], align 16
  %indirectarg301 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x346 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x350 = alloca double, align 8
  %y351 = alloca double, align 8
  %x374 = alloca double, align 8
  %n376 = alloca i32, align 4
  %chars380 = alloca %"char[]", align 8
  %sign381 = alloca i32, align 4
  %blockret382 = alloca double, align 8
  %x385 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index386 = alloca i64, align 8
  %got_digit387 = alloca i8, align 1
  %taddr391 = alloca i64, align 8
  %taddr392 = alloca i64, align 8
  %varargslots393 = alloca [2 x %any], align 16
  %indirectarg396 = alloca %"any[]", align 8
  %got_rad399 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc400 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len401 = alloca i64, align 8
  %last_char403 = alloca i64, align 8
  %c408 = alloca i8, align 1
  %taddr413 = alloca i64, align 8
  %taddr414 = alloca i64, align 8
  %varargslots415 = alloca [2 x %any], align 16
  %indirectarg418 = alloca %"any[]", align 8
  %taddr446 = alloca i64, align 8
  %taddr447 = alloca i64, align 8
  %varargslots448 = alloca [2 x %any], align 16
  %indirectarg451 = alloca %"any[]", align 8
  %taddr466 = alloca i64, align 8
  %taddr467 = alloca i64, align 8
  %varargslots468 = alloca [2 x %any], align 16
  %indirectarg471 = alloca %"any[]", align 8
  %switch491 = alloca i8, align 1
  %taddr511 = alloca i64, align 8
  %varargslots512 = alloca [1 x %any], align 16
  %indirectarg514 = alloca %"any[]", align 8
  %taddr518 = alloca i64, align 8
  %taddr519 = alloca i64, align 8
  %varargslots520 = alloca [2 x %any], align 16
  %indirectarg523 = alloca %"any[]", align 8
  %taddr528 = alloca i64, align 8
  %varargslots529 = alloca [1 x %any], align 16
  %indirectarg531 = alloca %"any[]", align 8
  %taddr535 = alloca i64, align 8
  %taddr536 = alloca i64, align 8
  %varargslots537 = alloca [2 x %any], align 16
  %indirectarg540 = alloca %"any[]", align 8
  %taddr551 = alloca i64, align 8
  %varargslots552 = alloca [1 x %any], align 16
  %indirectarg554 = alloca %"any[]", align 8
  %taddr558 = alloca i64, align 8
  %taddr559 = alloca i64, align 8
  %varargslots560 = alloca [2 x %any], align 16
  %indirectarg563 = alloca %"any[]", align 8
  %taddr592 = alloca i64, align 8
  %taddr593 = alloca i64, align 8
  %varargslots594 = alloca [2 x %any], align 16
  %indirectarg597 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr619 = alloca i64, align 8
  %taddr620 = alloca i64, align 8
  %varargslots621 = alloca [2 x %any], align 16
  %indirectarg624 = alloca %"any[]", align 8
  %taddr628 = alloca i64, align 8
  %varargslots629 = alloca [1 x %any], align 16
  %indirectarg631 = alloca %"any[]", align 8
  %retparam635 = alloca i64, align 8
  %error_var639 = alloca i64, align 8
  %taddr685 = alloca i64, align 8
  %varargslots686 = alloca [1 x %any], align 16
  %indirectarg688 = alloca %"any[]", align 8
  %taddr692 = alloca i64, align 8
  %taddr693 = alloca i64, align 8
  %varargslots694 = alloca [2 x %any], align 16
  %indirectarg697 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2705 = alloca i32, align 4
  %rp706 = alloca i64, align 8
  %taddr731 = alloca i64, align 8
  %varargslots732 = alloca [1 x %any], align 16
  %indirectarg734 = alloca %"any[]", align 8
  %taddr738 = alloca i64, align 8
  %taddr739 = alloca i64, align 8
  %varargslots740 = alloca [2 x %any], align 16
  %indirectarg743 = alloca %"any[]", align 8
  %bitlim = alloca i32, align 4
  %taddr758 = alloca i32, align 4
  %varargslots759 = alloca [1 x %any], align 16
  %indirectarg761 = alloca %"any[]", align 8
  %taddr774 = alloca i64, align 8
  %varargslots775 = alloca [1 x %any], align 16
  %indirectarg777 = alloca %"any[]", align 8
  %taddr781 = alloca i64, align 8
  %taddr782 = alloca i64, align 8
  %varargslots783 = alloca [2 x %any], align 16
  %indirectarg786 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr803 = alloca i64, align 8
  %varargslots804 = alloca [1 x %any], align 16
  %indirectarg806 = alloca %"any[]", align 8
  %taddr810 = alloca i64, align 8
  %taddr811 = alloca i64, align 8
  %varargslots812 = alloca [2 x %any], align 16
  %indirectarg815 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr824 = alloca i64, align 8
  %varargslots825 = alloca [1 x %any], align 16
  %indirectarg827 = alloca %"any[]", align 8
  %taddr831 = alloca i64, align 8
  %taddr832 = alloca i64, align 8
  %varargslots833 = alloca [2 x %any], align 16
  %indirectarg836 = alloca %"any[]", align 8
  %taddr846 = alloca i64, align 8
  %varargslots847 = alloca [1 x %any], align 16
  %indirectarg849 = alloca %"any[]", align 8
  %taddr853 = alloca i64, align 8
  %taddr854 = alloca i64, align 8
  %varargslots855 = alloca [2 x %any], align 16
  %indirectarg858 = alloca %"any[]", align 8
  %taddr864 = alloca i64, align 8
  %varargslots865 = alloca [1 x %any], align 16
  %indirectarg867 = alloca %"any[]", align 8
  %taddr871 = alloca i64, align 8
  %taddr872 = alloca i64, align 8
  %varargslots873 = alloca [2 x %any], align 16
  %indirectarg876 = alloca %"any[]", align 8
  %taddr893 = alloca i64, align 8
  %varargslots894 = alloca [1 x %any], align 16
  %indirectarg896 = alloca %"any[]", align 8
  %taddr900 = alloca i64, align 8
  %taddr901 = alloca i64, align 8
  %varargslots902 = alloca [2 x %any], align 16
  %indirectarg905 = alloca %"any[]", align 8
  %taddr924 = alloca i64, align 8
  %varargslots925 = alloca [1 x %any], align 16
  %indirectarg927 = alloca %"any[]", align 8
  %taddr931 = alloca i64, align 8
  %taddr932 = alloca i64, align 8
  %varargslots933 = alloca [2 x %any], align 16
  %indirectarg936 = alloca %"any[]", align 8
  %taddr951 = alloca i64, align 8
  %varargslots952 = alloca [1 x %any], align 16
  %indirectarg954 = alloca %"any[]", align 8
  %taddr958 = alloca i64, align 8
  %taddr959 = alloca i64, align 8
  %varargslots960 = alloca [2 x %any], align 16
  %indirectarg963 = alloca %"any[]", align 8
  %carry972 = alloca i32, align 4
  %tmp977 = alloca i64, align 8
  %taddr981 = alloca i64, align 8
  %varargslots982 = alloca [1 x %any], align 16
  %indirectarg984 = alloca %"any[]", align 8
  %taddr988 = alloca i64, align 8
  %taddr989 = alloca i64, align 8
  %varargslots990 = alloca [2 x %any], align 16
  %indirectarg993 = alloca %"any[]", align 8
  %taddr1006 = alloca i64, align 8
  %varargslots1007 = alloca [1 x %any], align 16
  %indirectarg1009 = alloca %"any[]", align 8
  %taddr1013 = alloca i64, align 8
  %taddr1014 = alloca i64, align 8
  %varargslots1015 = alloca [2 x %any], align 16
  %indirectarg1018 = alloca %"any[]", align 8
  %taddr1027 = alloca i64, align 8
  %varargslots1028 = alloca [1 x %any], align 16
  %indirectarg1030 = alloca %"any[]", align 8
  %taddr1034 = alloca i64, align 8
  %taddr1035 = alloca i64, align 8
  %varargslots1036 = alloca [2 x %any], align 16
  %indirectarg1039 = alloca %"any[]", align 8
  %taddr1055 = alloca i64, align 8
  %varargslots1056 = alloca [1 x %any], align 16
  %indirectarg1058 = alloca %"any[]", align 8
  %taddr1062 = alloca i64, align 8
  %taddr1063 = alloca i64, align 8
  %varargslots1064 = alloca [2 x %any], align 16
  %indirectarg1067 = alloca %"any[]", align 8
  %taddr1095 = alloca i64, align 8
  %varargslots1096 = alloca [1 x %any], align 16
  %indirectarg1098 = alloca %"any[]", align 8
  %taddr1102 = alloca i64, align 8
  %taddr1103 = alloca i64, align 8
  %varargslots1104 = alloca [2 x %any], align 16
  %indirectarg1107 = alloca %"any[]", align 8
  %taddr1113 = alloca i64, align 8
  %varargslots1114 = alloca [1 x %any], align 16
  %indirectarg1116 = alloca %"any[]", align 8
  %taddr1120 = alloca i64, align 8
  %taddr1121 = alloca i64, align 8
  %varargslots1122 = alloca [2 x %any], align 16
  %indirectarg1125 = alloca %"any[]", align 8
  %taddr1133 = alloca i64, align 8
  %varargslots1134 = alloca [1 x %any], align 16
  %indirectarg1136 = alloca %"any[]", align 8
  %taddr1140 = alloca i64, align 8
  %taddr1141 = alloca i64, align 8
  %varargslots1142 = alloca [2 x %any], align 16
  %indirectarg1145 = alloca %"any[]", align 8
  %carry1151 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1162 = alloca i64, align 8
  %varargslots1163 = alloca [1 x %any], align 16
  %indirectarg1165 = alloca %"any[]", align 8
  %taddr1169 = alloca i64, align 8
  %taddr1170 = alloca i64, align 8
  %varargslots1171 = alloca [2 x %any], align 16
  %indirectarg1174 = alloca %"any[]", align 8
  %taddr1180 = alloca i64, align 8
  %varargslots1181 = alloca [1 x %any], align 16
  %indirectarg1183 = alloca %"any[]", align 8
  %taddr1187 = alloca i64, align 8
  %taddr1188 = alloca i64, align 8
  %varargslots1189 = alloca [2 x %any], align 16
  %indirectarg1192 = alloca %"any[]", align 8
  %taddr1205 = alloca i64, align 8
  %varargslots1206 = alloca [1 x %any], align 16
  %indirectarg1208 = alloca %"any[]", align 8
  %taddr1212 = alloca i64, align 8
  %taddr1213 = alloca i64, align 8
  %varargslots1214 = alloca [2 x %any], align 16
  %indirectarg1217 = alloca %"any[]", align 8
  %taddr1223 = alloca i64, align 8
  %varargslots1224 = alloca [1 x %any], align 16
  %indirectarg1226 = alloca %"any[]", align 8
  %taddr1230 = alloca i64, align 8
  %taddr1231 = alloca i64, align 8
  %varargslots1232 = alloca [2 x %any], align 16
  %indirectarg1235 = alloca %"any[]", align 8
  %tmp1257 = alloca i32, align 4
  %taddr1261 = alloca i64, align 8
  %varargslots1262 = alloca [1 x %any], align 16
  %indirectarg1264 = alloca %"any[]", align 8
  %taddr1268 = alloca i64, align 8
  %taddr1269 = alloca i64, align 8
  %varargslots1270 = alloca [2 x %any], align 16
  %indirectarg1273 = alloca %"any[]", align 8
  %taddr1277 = alloca i32, align 4
  %varargslots1278 = alloca [1 x %any], align 16
  %indirectarg1280 = alloca %"any[]", align 8
  %taddr1284 = alloca i32, align 4
  %varargslots1285 = alloca [1 x %any], align 16
  %indirectarg1287 = alloca %"any[]", align 8
  %taddr1295 = alloca i64, align 8
  %varargslots1296 = alloca [1 x %any], align 16
  %indirectarg1298 = alloca %"any[]", align 8
  %taddr1302 = alloca i64, align 8
  %taddr1303 = alloca i64, align 8
  %varargslots1304 = alloca [2 x %any], align 16
  %indirectarg1307 = alloca %"any[]", align 8
  %taddr1313 = alloca i64, align 8
  %varargslots1314 = alloca [1 x %any], align 16
  %indirectarg1316 = alloca %"any[]", align 8
  %taddr1320 = alloca i64, align 8
  %taddr1321 = alloca i64, align 8
  %varargslots1322 = alloca [2 x %any], align 16
  %indirectarg1325 = alloca %"any[]", align 8
  %taddr1330 = alloca i32, align 4
  %varargslots1331 = alloca [1 x %any], align 16
  %indirectarg1333 = alloca %"any[]", align 8
  %taddr1339 = alloca i32, align 4
  %varargslots1340 = alloca [1 x %any], align 16
  %indirectarg1342 = alloca %"any[]", align 8
  %taddr1346 = alloca i32, align 4
  %varargslots1347 = alloca [1 x %any], align 16
  %indirectarg1349 = alloca %"any[]", align 8
  %taddr1357 = alloca i64, align 8
  %varargslots1358 = alloca [1 x %any], align 16
  %indirectarg1360 = alloca %"any[]", align 8
  %taddr1364 = alloca i64, align 8
  %taddr1365 = alloca i64, align 8
  %varargslots1366 = alloca [2 x %any], align 16
  %indirectarg1369 = alloca %"any[]", align 8
  %taddr1393 = alloca i64, align 8
  %varargslots1394 = alloca [1 x %any], align 16
  %indirectarg1396 = alloca %"any[]", align 8
  %taddr1400 = alloca i64, align 8
  %taddr1401 = alloca i64, align 8
  %varargslots1402 = alloca [2 x %any], align 16
  %indirectarg1405 = alloca %"any[]", align 8
  %taddr1416 = alloca i64, align 8
  %varargslots1417 = alloca [1 x %any], align 16
  %indirectarg1419 = alloca %"any[]", align 8
  %taddr1423 = alloca i64, align 8
  %taddr1424 = alloca i64, align 8
  %varargslots1425 = alloca [2 x %any], align 16
  %indirectarg1428 = alloca %"any[]", align 8
  %y1435 = alloca double, align 8
  %i1436 = alloca i32, align 4
  %taddr1450 = alloca i64, align 8
  %varargslots1451 = alloca [1 x %any], align 16
  %indirectarg1453 = alloca %"any[]", align 8
  %taddr1457 = alloca i64, align 8
  %taddr1458 = alloca i64, align 8
  %varargslots1459 = alloca [2 x %any], align 16
  %indirectarg1462 = alloca %"any[]", align 8
  %taddr1472 = alloca i64, align 8
  %varargslots1473 = alloca [1 x %any], align 16
  %indirectarg1475 = alloca %"any[]", align 8
  %taddr1479 = alloca i64, align 8
  %taddr1480 = alloca i64, align 8
  %varargslots1481 = alloca [2 x %any], align 16
  %indirectarg1484 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1493 = alloca i32, align 4
  %bias1506 = alloca double, align 8
  %frac = alloca double, align 8
  %x1509 = alloca double, align 8
  %n1512 = alloca i32, align 4
  %mag1513 = alloca double, align 8
  %sgn1514 = alloca double, align 8
  %x1515 = alloca double, align 8
  %y1516 = alloca double, align 8
  %x1517 = alloca double, align 8
  %n1519 = alloca i32, align 4
  %t = alloca i32, align 4
  %taddr1535 = alloca i64, align 8
  %varargslots1536 = alloca [1 x %any], align 16
  %indirectarg1538 = alloca %"any[]", align 8
  %taddr1542 = alloca i64, align 8
  %taddr1543 = alloca i64, align 8
  %varargslots1544 = alloca [2 x %any], align 16
  %indirectarg1547 = alloca %"any[]", align 8
  %switch1550 = alloca i8, align 1
  %x1612 = alloca double, align 8
  %x1640 = alloca double, align 8
  %n1641 = alloca i32, align 4
  store ptr %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3109, metadata !DIExpression()), !dbg !3110
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %s, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %sign, metadata !3111, metadata !DIExpression()), !dbg !3113
  store i32 1, ptr %sign, align 4, !dbg !3115
  br label %loop.cond, !dbg !3116

loop.cond:                                        ; preds = %checkok12, %entry
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3117
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3117
  %intbool = icmp ne i64 %3, 0, !dbg !3117
  br i1 %intbool, label %and.rhs, label %and.phi, !dbg !3117

and.rhs:                                          ; preds = %loop.cond
  %ptradd2 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3119
  %4 = load i64, ptr %ptradd2, align 8, !dbg !3119
  %5 = load ptr, ptr %chars, align 8, !dbg !3119
  %ge = icmp sge i64 0, %4, !dbg !3120
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3120
  br i1 %6, label %panic, label %checkok, !dbg !3120

checkok:                                          ; preds = %and.rhs
  %7 = load i8, ptr %5, align 1, !dbg !3120
  %eq = icmp eq i8 %7, 32, !dbg !3119
  br label %and.phi, !dbg !3119

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !3119
  br i1 %val, label %loop.body, label %loop.exit, !dbg !3119

loop.body:                                        ; preds = %and.phi
  %8 = load %"char[]", ptr %chars, align 8, !dbg !3121
  %9 = extractvalue %"char[]" %8, 0, !dbg !3121
  %10 = extractvalue %"char[]" %8, 1, !dbg !3122
  %gt = icmp sgt i64 1, %10, !dbg !3122
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3122
  br i1 %11, label %panic5, label %checkok12, !dbg !3122

checkok12:                                        ; preds = %loop.body
  %size = sub i64 %10, 1, !dbg !3121
  %ptradd13 = getelementptr inbounds i8, ptr %9, i64 1, !dbg !3121
  %12 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !3121
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !3121
  store %"char[]" %13, ptr %chars, align 8, !dbg !3121
  br label %loop.cond, !dbg !3121

loop.exit:                                        ; preds = %and.phi
  %ptradd14 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3123
  %14 = load i64, ptr %ptradd14, align 8, !dbg !3123
  %not = icmp eq i64 %14, 0, !dbg !3123
  br i1 %not, label %if.then, label %if.exit, !dbg !3123

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3124
  br label %err_retblock, !dbg !3124

if.exit:                                          ; preds = %loop.exit
  %ptradd15 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3125
  %15 = load i64, ptr %ptradd15, align 8, !dbg !3125
  %16 = load ptr, ptr %chars, align 8, !dbg !3125
  %ge16 = icmp sge i64 0, %15, !dbg !3127
  %17 = call i1 @llvm.expect.i1(i1 %ge16, i1 false), !dbg !3127
  br i1 %17, label %panic17, label %checkok24, !dbg !3127

checkok24:                                        ; preds = %if.exit
  %18 = load i8, ptr %16, align 1
  store i8 %18, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok24
  %19 = load i8, ptr %switch, align 1
  switch i8 %19, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !3128
  br label %switch.case25, !dbg !3130

switch.case25:                                    ; preds = %switch.entry, %switch.case
  %20 = load %"char[]", ptr %chars, align 8, !dbg !3131
  %21 = extractvalue %"char[]" %20, 0, !dbg !3131
  %22 = extractvalue %"char[]" %20, 1, !dbg !3133
  %gt26 = icmp sgt i64 1, %22, !dbg !3133
  %23 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !3133
  br i1 %23, label %panic27, label %checkok34, !dbg !3133

checkok34:                                        ; preds = %switch.case25
  %size35 = sub i64 %22, 1, !dbg !3131
  %ptradd36 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !3131
  %24 = insertvalue %"char[]" undef, ptr %ptradd36, 0, !dbg !3131
  %25 = insertvalue %"char[]" %24, i64 %size35, 1, !dbg !3131
  store %"char[]" %25, ptr %chars, align 8, !dbg !3131
  br label %switch.exit, !dbg !3131

switch.exit:                                      ; preds = %checkok34, %switch.entry
  %26 = load %"char[]", ptr %chars, align 8, !dbg !3134
  %27 = extractvalue %"char[]" %26, 1, !dbg !3134
  %28 = extractvalue %"char[]" %26, 0, !dbg !3134
  %eq37 = icmp eq i64 %27, 8, !dbg !3134
  br i1 %eq37, label %slice_cmp_values, label %slice_cmp_exit, !dbg !3134

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %29 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %29, %27
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd38 = getelementptr inbounds i8, ptr %28, i64 %29
  %ptradd39 = getelementptr inbounds i8, ptr @.str.83, i64 %29
  %30 = load i8, ptr %ptradd38, align 1
  %31 = load i8, ptr %ptradd39, align 1
  %eq40 = icmp eq i8 %30, %31
  %32 = add i64 %29, 1
  store i64 %32, ptr %cmp.idx, align 8
  br i1 %eq40, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %33 = load %"char[]", ptr %chars, align 8, !dbg !3135
  %34 = extractvalue %"char[]" %33, 1, !dbg !3135
  %35 = extractvalue %"char[]" %33, 0, !dbg !3135
  %eq41 = icmp eq i64 %34, 8, !dbg !3135
  br i1 %eq41, label %slice_cmp_values42, label %slice_cmp_exit50, !dbg !3135

slice_cmp_values42:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx43, align 8
  br label %slice_loop_start44

slice_loop_start44:                               ; preds = %slice_loop_comparison46, %slice_cmp_values42
  %36 = load i64, ptr %cmp.idx43, align 8
  %lt45 = icmp slt i64 %36, %34
  br i1 %lt45, label %slice_loop_comparison46, label %slice_cmp_exit50

slice_loop_comparison46:                          ; preds = %slice_loop_start44
  %ptradd47 = getelementptr inbounds i8, ptr %35, i64 %36
  %ptradd48 = getelementptr inbounds i8, ptr @.str.84, i64 %36
  %37 = load i8, ptr %ptradd47, align 1
  %38 = load i8, ptr %ptradd48, align 1
  %eq49 = icmp eq i8 %37, %38
  %39 = add i64 %36, 1
  store i64 %39, ptr %cmp.idx43, align 8
  br i1 %eq49, label %slice_loop_start44, label %slice_cmp_exit50

slice_cmp_exit50:                                 ; preds = %slice_loop_comparison46, %slice_loop_start44, %or.rhs
  %slice_cmp_phi51 = phi i1 [ true, %slice_loop_start44 ], [ false, %or.rhs ], [ false, %slice_loop_comparison46 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit50, %slice_cmp_exit
  %val52 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi51, %slice_cmp_exit50 ]
  br i1 %val52, label %if.then53, label %if.exit54

if.then53:                                        ; preds = %or.phi
  %40 = load i32, ptr %sign, align 4, !dbg !3136
  %sifp = sitofp i32 %40 to float, !dbg !3136
  %fmul = fmul float %sifp, 0x7FF0000000000000, !dbg !3136
  store float %fmul, ptr %blockret, align 4, !dbg !3136
  br label %expr_block.exit1645, !dbg !3136

if.exit54:                                        ; preds = %or.phi
  %41 = load %"char[]", ptr %chars, align 8, !dbg !3137
  %42 = extractvalue %"char[]" %41, 1, !dbg !3137
  %43 = extractvalue %"char[]" %41, 0, !dbg !3137
  %eq55 = icmp eq i64 %42, 3, !dbg !3137
  br i1 %eq55, label %slice_cmp_values56, label %slice_cmp_exit64, !dbg !3137

slice_cmp_values56:                               ; preds = %if.exit54
  store i64 0, ptr %cmp.idx57, align 8
  br label %slice_loop_start58

slice_loop_start58:                               ; preds = %slice_loop_comparison60, %slice_cmp_values56
  %44 = load i64, ptr %cmp.idx57, align 8
  %lt59 = icmp slt i64 %44, %42
  br i1 %lt59, label %slice_loop_comparison60, label %slice_cmp_exit64

slice_loop_comparison60:                          ; preds = %slice_loop_start58
  %ptradd61 = getelementptr inbounds i8, ptr %43, i64 %44
  %ptradd62 = getelementptr inbounds i8, ptr @.str.85, i64 %44
  %45 = load i8, ptr %ptradd61, align 1
  %46 = load i8, ptr %ptradd62, align 1
  %eq63 = icmp eq i8 %45, %46
  %47 = add i64 %44, 1
  store i64 %47, ptr %cmp.idx57, align 8
  br i1 %eq63, label %slice_loop_start58, label %slice_cmp_exit64

slice_cmp_exit64:                                 ; preds = %slice_loop_comparison60, %slice_loop_start58, %if.exit54
  %slice_cmp_phi65 = phi i1 [ true, %slice_loop_start58 ], [ false, %if.exit54 ], [ false, %slice_loop_comparison60 ]
  br i1 %slice_cmp_phi65, label %or.phi78, label %or.rhs66

or.rhs66:                                         ; preds = %slice_cmp_exit64
  %48 = load %"char[]", ptr %chars, align 8, !dbg !3138
  %49 = extractvalue %"char[]" %48, 1, !dbg !3138
  %50 = extractvalue %"char[]" %48, 0, !dbg !3138
  %eq67 = icmp eq i64 %49, 3, !dbg !3138
  br i1 %eq67, label %slice_cmp_values68, label %slice_cmp_exit76, !dbg !3138

slice_cmp_values68:                               ; preds = %or.rhs66
  store i64 0, ptr %cmp.idx69, align 8
  br label %slice_loop_start70

slice_loop_start70:                               ; preds = %slice_loop_comparison72, %slice_cmp_values68
  %51 = load i64, ptr %cmp.idx69, align 8
  %lt71 = icmp slt i64 %51, %49
  br i1 %lt71, label %slice_loop_comparison72, label %slice_cmp_exit76

slice_loop_comparison72:                          ; preds = %slice_loop_start70
  %ptradd73 = getelementptr inbounds i8, ptr %50, i64 %51
  %ptradd74 = getelementptr inbounds i8, ptr @.str.86, i64 %51
  %52 = load i8, ptr %ptradd73, align 1
  %53 = load i8, ptr %ptradd74, align 1
  %eq75 = icmp eq i8 %52, %53
  %54 = add i64 %51, 1
  store i64 %54, ptr %cmp.idx69, align 8
  br i1 %eq75, label %slice_loop_start70, label %slice_cmp_exit76

slice_cmp_exit76:                                 ; preds = %slice_loop_comparison72, %slice_loop_start70, %or.rhs66
  %slice_cmp_phi77 = phi i1 [ true, %slice_loop_start70 ], [ false, %or.rhs66 ], [ false, %slice_loop_comparison72 ]
  br label %or.phi78

or.phi78:                                         ; preds = %slice_cmp_exit76, %slice_cmp_exit64
  %val79 = phi i1 [ true, %slice_cmp_exit64 ], [ %slice_cmp_phi77, %slice_cmp_exit76 ]
  br i1 %val79, label %if.then80, label %if.exit81

if.then80:                                        ; preds = %or.phi78
  store float 0x7FF8000000000000, ptr %blockret, align 4, !dbg !3139
  br label %expr_block.exit1645, !dbg !3139

if.exit81:                                        ; preds = %or.phi78
  %ptradd82 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3140
  %55 = load i64, ptr %ptradd82, align 8, !dbg !3140
  %lt83 = icmp ult i64 2, %55, !dbg !3140
  br i1 %lt83, label %and.rhs84, label %and.phi96, !dbg !3140

and.rhs84:                                        ; preds = %if.exit81
  %ptradd85 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3141
  %56 = load i64, ptr %ptradd85, align 8, !dbg !3141
  %57 = load ptr, ptr %chars, align 8, !dbg !3141
  %ge86 = icmp sge i64 0, %56, !dbg !3142
  %58 = call i1 @llvm.expect.i1(i1 %ge86, i1 false), !dbg !3142
  br i1 %58, label %panic87, label %checkok94, !dbg !3142

checkok94:                                        ; preds = %and.rhs84
  %59 = load i8, ptr %57, align 1, !dbg !3142
  %eq95 = icmp eq i8 %59, 48, !dbg !3141
  br label %and.phi96, !dbg !3141

and.phi96:                                        ; preds = %checkok94, %if.exit81
  %val97 = phi i1 [ false, %if.exit81 ], [ %eq95, %checkok94 ], !dbg !3141
  br i1 %val97, label %and.rhs98, label %and.phi111, !dbg !3141

and.rhs98:                                        ; preds = %and.phi96
  %ptradd99 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3143
  %60 = load i64, ptr %ptradd99, align 8, !dbg !3143
  %61 = load ptr, ptr %chars, align 8, !dbg !3143
  %ge100 = icmp sge i64 1, %60, !dbg !3144
  %62 = call i1 @llvm.expect.i1(i1 %ge100, i1 false), !dbg !3144
  br i1 %62, label %panic101, label %checkok108, !dbg !3144

checkok108:                                       ; preds = %and.rhs98
  %ptradd109 = getelementptr inbounds i8, ptr %61, i64 1, !dbg !3144
  %63 = load i8, ptr %ptradd109, align 1, !dbg !3144
  %zext = zext i8 %63 to i32, !dbg !3144
  %or = or i32 %zext, 32, !dbg !3143
  %eq110 = icmp eq i32 %or, 120, !dbg !3143
  %check = icmp sge i32 %or, 0, !dbg !3143
  %siui-eq = and i1 %check, %eq110, !dbg !3143
  br label %and.phi111, !dbg !3143

and.phi111:                                       ; preds = %checkok108, %and.phi96
  %val112 = phi i1 [ false, %and.phi96 ], [ %siui-eq, %checkok108 ], !dbg !3143
  br i1 %val112, label %if.then113, label %if.exit379, !dbg !3143

if.then113:                                       ; preds = %and.phi111
  %64 = load %"char[]", ptr %chars, align 8, !dbg !3145
  %65 = extractvalue %"char[]" %64, 0, !dbg !3145
  %66 = extractvalue %"char[]" %64, 1, !dbg !3147
  %gt114 = icmp sgt i64 2, %66, !dbg !3147
  %67 = call i1 @llvm.expect.i1(i1 %gt114, i1 false), !dbg !3147
  br i1 %67, label %panic115, label %checkok122, !dbg !3147

checkok122:                                       ; preds = %if.then113
  %size123 = sub i64 %66, 2, !dbg !3148
  %ptradd124 = getelementptr inbounds i8, ptr %65, i64 2, !dbg !3148
  %68 = insertvalue %"char[]" undef, ptr %ptradd124, 0, !dbg !3148
  %69 = insertvalue %"char[]" %68, i64 %size123, 1, !dbg !3148
  store %"char[]" %69, ptr %chars125, align 8
  %70 = load i32, ptr %sign, align 4
  store i32 %70, ptr %sign126, align 4
  call void @llvm.dbg.declare(metadata ptr %scale, metadata !3149, metadata !DIExpression()), !dbg !3151
  store double 1.000000e+00, ptr %scale, align 8, !dbg !3153
  call void @llvm.dbg.declare(metadata ptr %x, metadata !3154, metadata !DIExpression()), !dbg !3155
  store i32 0, ptr %x, align 4, !dbg !3155
  call void @llvm.dbg.declare(metadata ptr %rp, metadata !3156, metadata !DIExpression()), !dbg !3157
  store i64 0, ptr %rp, align 8, !dbg !3157
  call void @llvm.dbg.declare(metadata ptr %dc, metadata !3158, metadata !DIExpression()), !dbg !3159
  store i64 0, ptr %dc, align 8, !dbg !3159
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3160, metadata !DIExpression()), !dbg !3161
  call void @llvm.dbg.declare(metadata ptr %got_rad, metadata !3162, metadata !DIExpression()), !dbg !3163
  store i8 0, ptr %got_rad, align 1, !dbg !3163
  call void @llvm.dbg.declare(metadata ptr %got_digit, metadata !3164, metadata !DIExpression()), !dbg !3165
  store i8 0, ptr %got_digit, align 1, !dbg !3165
  call void @llvm.dbg.declare(metadata ptr %got_tail, metadata !3166, metadata !DIExpression()), !dbg !3167
  store i8 0, ptr %got_tail, align 1, !dbg !3167
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3168, metadata !DIExpression()), !dbg !3169
  %ptradd128 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3170
  %71 = load i64, ptr %ptradd128, align 8, !dbg !3170
  store i64 %71, ptr %len, align 8, !dbg !3170
  call void @llvm.dbg.declare(metadata ptr %last_char, metadata !3171, metadata !DIExpression()), !dbg !3172
  %72 = load i64, ptr %len, align 8, !dbg !3173
  %sub = sub i64 %72, 1, !dbg !3173
  store i64 %sub, ptr %last_char, align 8, !dbg !3173
  call void @llvm.dbg.declare(metadata ptr %index, metadata !3174, metadata !DIExpression()), !dbg !3175
  store i64 0, ptr %index, align 8, !dbg !3175
  call void @llvm.dbg.declare(metadata ptr %y, metadata !3176, metadata !DIExpression()), !dbg !3177
  store double 0.000000e+00, ptr %y, align 8, !dbg !3177
  br label %loop.cond129, !dbg !3178

loop.cond129:                                     ; preds = %if.exit145, %checkok122
  %ptradd130 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3179
  %73 = load i64, ptr %ptradd130, align 8, !dbg !3179
  %74 = load ptr, ptr %chars125, align 8, !dbg !3179
  %75 = load i64, ptr %index, align 8, !dbg !3181
  %ge131 = icmp uge i64 %75, %73, !dbg !3181
  %76 = call i1 @llvm.expect.i1(i1 %ge131, i1 false), !dbg !3181
  br i1 %76, label %panic132, label %checkok139, !dbg !3181

checkok139:                                       ; preds = %loop.cond129
  %ptradd140 = getelementptr inbounds i8, ptr %74, i64 %75, !dbg !3181
  %77 = load i8, ptr %ptradd140, align 1, !dbg !3181
  store i8 %77, ptr %c, align 1, !dbg !3181
  %eq141 = icmp eq i8 %77, 48, !dbg !3182
  br i1 %eq141, label %loop.body142, label %loop.exit146, !dbg !3182

loop.body142:                                     ; preds = %checkok139
  %78 = load i64, ptr %index, align 8, !dbg !3183
  %79 = load i64, ptr %last_char, align 8, !dbg !3185
  %eq143 = icmp eq i64 %78, %79, !dbg !3183
  br i1 %eq143, label %if.then144, label %if.exit145, !dbg !3183

if.then144:                                       ; preds = %loop.body142
  store double 0.000000e+00, ptr %blockret127, align 8, !dbg !3186
  br label %expr_block.exit378, !dbg !3186

if.exit145:                                       ; preds = %loop.body142
  %80 = load i64, ptr %index, align 8, !dbg !3187
  %add = add i64 %80, 1, !dbg !3187
  store i64 %add, ptr %index, align 8, !dbg !3187
  br label %loop.cond129, !dbg !3187

loop.exit146:                                     ; preds = %checkok139
  %81 = load i8, ptr %c, align 1, !dbg !3188
  %eq147 = icmp eq i8 %81, 46, !dbg !3188
  br i1 %eq147, label %if.then148, label %if.exit197, !dbg !3188

if.then148:                                       ; preds = %loop.exit146
  store i8 1, ptr %got_rad, align 1, !dbg !3189
  %82 = load i64, ptr %index, align 8, !dbg !3191
  %83 = load i64, ptr %last_char, align 8, !dbg !3192
  %eq149 = icmp eq i64 %82, %83, !dbg !3191
  br i1 %eq149, label %if.then150, label %if.exit156, !dbg !3191

if.then150:                                       ; preds = %if.then148
  %84 = load i8, ptr %got_digit, align 1, !dbg !3193
  %85 = trunc i8 %84 to i1, !dbg !3193
  %not151 = xor i1 %85, true, !dbg !3193
  br i1 %not151, label %if.then152, label %if.exit153, !dbg !3193

if.then152:                                       ; preds = %if.then150
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3195
  br label %err_retblock, !dbg !3195

if.exit153:                                       ; preds = %if.then150
  %86 = load i32, ptr %sign126, align 4, !dbg !3196
  %sifp154 = sitofp i32 %86 to double, !dbg !3196
  %fmul155 = fmul double %sifp154, 0.000000e+00, !dbg !3196
  store double %fmul155, ptr %blockret127, align 8, !dbg !3196
  br label %expr_block.exit378, !dbg !3196

if.exit156:                                       ; preds = %if.then148
  %87 = load i64, ptr %index, align 8, !dbg !3197
  %88 = load i64, ptr %last_char, align 8, !dbg !3198
  %neq = icmp ne i64 %87, %88, !dbg !3197
  br i1 %neq, label %and.rhs157, label %and.phi171, !dbg !3197

and.rhs157:                                       ; preds = %if.exit156
  %ptradd158 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3199
  %89 = load i64, ptr %ptradd158, align 8, !dbg !3199
  %90 = load ptr, ptr %chars125, align 8, !dbg !3199
  %91 = load i64, ptr %index, align 8, !dbg !3200
  %add159 = add i64 %91, 1, !dbg !3200
  store i64 %add159, ptr %index, align 8, !dbg !3200
  %ge160 = icmp uge i64 %add159, %89, !dbg !3200
  %92 = call i1 @llvm.expect.i1(i1 %ge160, i1 false), !dbg !3200
  br i1 %92, label %panic161, label %checkok168, !dbg !3200

checkok168:                                       ; preds = %and.rhs157
  %ptradd169 = getelementptr inbounds i8, ptr %90, i64 %add159, !dbg !3201
  %93 = load i8, ptr %ptradd169, align 1, !dbg !3201
  store i8 %93, ptr %c, align 1, !dbg !3201
  %eq170 = icmp eq i8 %93, 48, !dbg !3202
  br label %and.phi171, !dbg !3202

and.phi171:                                       ; preds = %checkok168, %if.exit156
  %val172 = phi i1 [ false, %if.exit156 ], [ %eq170, %checkok168 ], !dbg !3202
  br i1 %val172, label %if.then173, label %if.exit196, !dbg !3202

if.then173:                                       ; preds = %and.phi171
  %94 = load i64, ptr %rp, align 8, !dbg !3203
  %sub174 = sub i64 %94, 1, !dbg !3203
  store i64 %sub174, ptr %rp, align 8, !dbg !3203
  store i8 1, ptr %got_digit, align 1, !dbg !3205
  br label %loop.cond175, !dbg !3206

loop.cond175:                                     ; preds = %loop.body193, %if.then173
  %95 = load i64, ptr %last_char, align 8, !dbg !3207
  %96 = load i64, ptr %index, align 8, !dbg !3209
  %neq176 = icmp ne i64 %95, %96, !dbg !3207
  br i1 %neq176, label %and.rhs177, label %and.phi191, !dbg !3207

and.rhs177:                                       ; preds = %loop.cond175
  %ptradd178 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3210
  %97 = load i64, ptr %ptradd178, align 8, !dbg !3210
  %98 = load ptr, ptr %chars125, align 8, !dbg !3210
  %99 = load i64, ptr %index, align 8, !dbg !3211
  %add179 = add i64 %99, 1, !dbg !3211
  store i64 %add179, ptr %index, align 8, !dbg !3211
  %ge180 = icmp uge i64 %add179, %97, !dbg !3211
  %100 = call i1 @llvm.expect.i1(i1 %ge180, i1 false), !dbg !3211
  br i1 %100, label %panic181, label %checkok188, !dbg !3211

checkok188:                                       ; preds = %and.rhs177
  %ptradd189 = getelementptr inbounds i8, ptr %98, i64 %add179, !dbg !3212
  %101 = load i8, ptr %ptradd189, align 1, !dbg !3212
  store i8 %101, ptr %c, align 1, !dbg !3212
  %eq190 = icmp eq i8 %101, 48, !dbg !3213
  br label %and.phi191, !dbg !3213

and.phi191:                                       ; preds = %checkok188, %loop.cond175
  %val192 = phi i1 [ false, %loop.cond175 ], [ %eq190, %checkok188 ], !dbg !3213
  br i1 %val192, label %loop.body193, label %loop.exit195, !dbg !3213

loop.body193:                                     ; preds = %and.phi191
  %102 = load i64, ptr %rp, align 8, !dbg !3214
  %sub194 = sub i64 %102, 1, !dbg !3214
  store i64 %sub194, ptr %rp, align 8, !dbg !3214
  br label %loop.cond175, !dbg !3214

loop.exit195:                                     ; preds = %and.phi191
  br label %if.exit196, !dbg !3214

if.exit196:                                       ; preds = %loop.exit195, %and.phi171
  br label %if.exit197, !dbg !3214

if.exit197:                                       ; preds = %if.exit196, %loop.exit146
  br label %loop.cond198, !dbg !3216

loop.cond198:                                     ; preds = %checkok266, %if.exit197
  %103 = load i8, ptr %c, align 1, !dbg !3217
  %zext199 = zext i8 %103 to i32, !dbg !3217
  %sub200 = sub i32 %zext199, 48, !dbg !3217
  %lt201 = icmp ult i32 %sub200, 10, !dbg !3217
  br i1 %lt201, label %or.phi207, label %or.rhs202, !dbg !3217

or.rhs202:                                        ; preds = %loop.cond198
  %104 = load i8, ptr %c, align 1, !dbg !3219
  %zext203 = zext i8 %104 to i32, !dbg !3219
  %or204 = or i32 %zext203, 32, !dbg !3219
  %sub205 = sub i32 %or204, 97, !dbg !3219
  %lt206 = icmp slt i32 %sub205, 6, !dbg !3219
  %siui-lt = or i1 false, %lt206, !dbg !3219
  br label %or.phi207, !dbg !3219

or.phi207:                                        ; preds = %or.rhs202, %loop.cond198
  %val208 = phi i1 [ true, %loop.cond198 ], [ %siui-lt, %or.rhs202 ], !dbg !3219
  br i1 %val208, label %or.phi211, label %or.rhs209, !dbg !3219

or.rhs209:                                        ; preds = %or.phi207
  %105 = load i8, ptr %c, align 1, !dbg !3220
  %eq210 = icmp eq i8 %105, 46, !dbg !3220
  br label %or.phi211, !dbg !3220

or.phi211:                                        ; preds = %or.rhs209, %or.phi207
  %val212 = phi i1 [ true, %or.phi207 ], [ %eq210, %or.rhs209 ], !dbg !3220
  br i1 %val212, label %loop.body213, label %loop.exit268, !dbg !3220

loop.body213:                                     ; preds = %or.phi211
  %106 = load i8, ptr %c, align 1, !dbg !3221
  %eq214 = icmp eq i8 %106, 46, !dbg !3221
  br i1 %eq214, label %if.then215, label %if.else, !dbg !3221

if.then215:                                       ; preds = %loop.body213
  %107 = load i8, ptr %got_rad, align 1, !dbg !3223
  %108 = trunc i8 %107 to i1, !dbg !3223
  br i1 %108, label %if.then216, label %if.exit217, !dbg !3223

if.then216:                                       ; preds = %if.then215
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3225
  br label %err_retblock, !dbg !3225

if.exit217:                                       ; preds = %if.then215
  store i8 1, ptr %got_rad, align 1, !dbg !3226
  %109 = load i64, ptr %dc, align 8, !dbg !3227
  store i64 %109, ptr %rp, align 8, !dbg !3227
  br label %if.exit252, !dbg !3227

if.else:                                          ; preds = %loop.body213
  store i8 1, ptr %got_digit, align 1, !dbg !3228
  call void @llvm.dbg.declare(metadata ptr %d, metadata !3230, metadata !DIExpression()), !dbg !3231
  %110 = load i8, ptr %c, align 1, !dbg !3232
  %gt219 = icmp ugt i8 %110, 57, !dbg !3232
  br i1 %gt219, label %if.then220, label %if.exit225, !dbg !3232

if.then220:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !3234
  %zext221 = zext i8 %111 to i32, !dbg !3234
  %or222 = or i32 %zext221, 32, !dbg !3234
  %add223 = add i32 %or222, 10, !dbg !3234
  %sub224 = sub i32 %add223, 97, !dbg !3234
  store i32 %sub224, ptr %blockret218, align 4, !dbg !3234
  br label %expr_block.exit, !dbg !3234

if.exit225:                                       ; preds = %if.else
  %112 = load i8, ptr %c, align 1, !dbg !3235
  %zext226 = zext i8 %112 to i32, !dbg !3235
  %sub227 = sub i32 %zext226, 48, !dbg !3235
  store i32 %sub227, ptr %blockret218, align 4, !dbg !3235
  br label %expr_block.exit, !dbg !3235

expr_block.exit:                                  ; preds = %if.exit225, %if.then220
  %113 = load i32, ptr %blockret218, align 4, !dbg !3235
  store i32 %113, ptr %d, align 4, !dbg !3235
  store i8 1, ptr %switch228, align 1
  br label %switch.entry229

switch.entry229:                                  ; preds = %expr_block.exit
  %114 = load i8, ptr %switch228, align 1
  %115 = trunc i8 %114 to i1
  %116 = load i64, ptr %dc, align 8, !dbg !3236
  %lt230 = icmp slt i64 %116, 8, !dbg !3236
  %eq231 = icmp eq i1 %lt230, %115, !dbg !3236
  br i1 %eq231, label %switch.case232, label %next_if, !dbg !3236

switch.case232:                                   ; preds = %switch.entry229
  %117 = load i32, ptr %x, align 4, !dbg !3238
  %mul = mul i32 %117, 16, !dbg !3238
  %118 = load i32, ptr %d, align 4, !dbg !3240
  %add233 = add i32 %mul, %118, !dbg !3238
  store i32 %add233, ptr %x, align 4, !dbg !3238
  br label %switch.exit250, !dbg !3238

next_if:                                          ; preds = %switch.entry229
  %119 = load i64, ptr %dc, align 8, !dbg !3241
  %lt234 = icmp slt i64 %119, 14, !dbg !3241
  %eq235 = icmp eq i1 %lt234, %115, !dbg !3241
  br i1 %eq235, label %switch.case236, label %next_if239, !dbg !3241

switch.case236:                                   ; preds = %next_if
  %120 = load double, ptr %y, align 8, !dbg !3242
  %121 = load i32, ptr %d, align 4, !dbg !3244
  %sifp237 = sitofp i32 %121 to double, !dbg !3244
  %122 = load double, ptr %scale, align 8, !dbg !3245
  %fdiv = fdiv double %122, 1.600000e+01, !dbg !3245
  store double %fdiv, ptr %scale, align 8, !dbg !3245
  %fmul238 = fmul double %sifp237, %fdiv, !dbg !3244
  %fadd = fadd double %120, %fmul238, !dbg !3242
  store double %fadd, ptr %y, align 8, !dbg !3242
  store i8 1, ptr %got_tail, align 1, !dbg !3246
  br label %switch.exit250, !dbg !3246

next_if239:                                       ; preds = %next_if
  %123 = load i32, ptr %d, align 4, !dbg !3247
  %intbool240 = icmp ne i32 %123, 0, !dbg !3247
  br i1 %intbool240, label %and.rhs241, label %and.phi243, !dbg !3247

and.rhs241:                                       ; preds = %next_if239
  %124 = load i8, ptr %got_tail, align 1, !dbg !3248
  %125 = trunc i8 %124 to i1, !dbg !3248
  %not242 = xor i1 %125, true, !dbg !3248
  br label %and.phi243, !dbg !3248

and.phi243:                                       ; preds = %and.rhs241, %next_if239
  %val244 = phi i1 [ false, %next_if239 ], [ %not242, %and.rhs241 ], !dbg !3248
  %eq245 = icmp eq i1 %val244, %115, !dbg !3248
  br i1 %eq245, label %switch.case246, label %next_if249, !dbg !3248

switch.case246:                                   ; preds = %and.phi243
  %126 = load double, ptr %y, align 8, !dbg !3249
  %127 = load double, ptr %scale, align 8, !dbg !3251
  %fmul247 = fmul double 5.000000e-01, %127, !dbg !3252
  %fadd248 = fadd double %126, %fmul247, !dbg !3249
  store double %fadd248, ptr %y, align 8, !dbg !3249
  store i8 1, ptr %got_tail, align 1, !dbg !3253
  br label %switch.exit250, !dbg !3253

next_if249:                                       ; preds = %and.phi243
  br label %switch.exit250, !dbg !3253

switch.exit250:                                   ; preds = %next_if249, %switch.case246, %switch.case236, %switch.case232
  %128 = load i64, ptr %dc, align 8, !dbg !3254
  %add251 = add i64 %128, 1, !dbg !3254
  store i64 %add251, ptr %dc, align 8, !dbg !3254
  br label %if.exit252, !dbg !3254

if.exit252:                                       ; preds = %switch.exit250, %if.exit217
  %129 = load i64, ptr %index, align 8, !dbg !3255
  %130 = load i64, ptr %last_char, align 8, !dbg !3256
  %eq253 = icmp eq i64 %129, %130, !dbg !3255
  br i1 %eq253, label %if.then254, label %if.exit255, !dbg !3255

if.then254:                                       ; preds = %if.exit252
  br label %loop.exit268, !dbg !3257

if.exit255:                                       ; preds = %if.exit252
  %ptradd256 = getelementptr inbounds i8, ptr %chars125, i64 8, !dbg !3258
  %131 = load i64, ptr %ptradd256, align 8, !dbg !3258
  %132 = load ptr, ptr %chars125, align 8, !dbg !3258
  %133 = load i64, ptr %index, align 8, !dbg !3259
  %add257 = add i64 %133, 1, !dbg !3259
  store i64 %add257, ptr %index, align 8, !dbg !3259
  %ge258 = icmp uge i64 %add257, %131, !dbg !3259
  %134 = call i1 @llvm.expect.i1(i1 %ge258, i1 false), !dbg !3259
  br i1 %134, label %panic259, label %checkok266, !dbg !3259

checkok266:                                       ; preds = %if.exit255
  %ptradd267 = getelementptr inbounds i8, ptr %132, i64 %add257, !dbg !3260
  %135 = load i8, ptr %ptradd267, align 1, !dbg !3260
  store i8 %135, ptr %c, align 1, !dbg !3260
  br label %loop.cond198, !dbg !3260

loop.exit268:                                     ; preds = %if.then254, %or.phi211
  %136 = load i8, ptr %got_digit, align 1, !dbg !3261
  %137 = trunc i8 %136 to i1, !dbg !3261
  %not269 = xor i1 %137, true, !dbg !3261
  br i1 %not269, label %if.then270, label %if.exit271, !dbg !3261

if.then270:                                       ; preds = %loop.exit268
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3262
  br label %err_retblock, !dbg !3262

if.exit271:                                       ; preds = %loop.exit268
  %138 = load i8, ptr %got_rad, align 1, !dbg !3263
  %139 = trunc i8 %138 to i1, !dbg !3263
  %not272 = xor i1 %139, true, !dbg !3263
  br i1 %not272, label %if.then273, label %if.exit274, !dbg !3263

if.then273:                                       ; preds = %if.exit271
  %140 = load i64, ptr %dc, align 8, !dbg !3264
  store i64 %140, ptr %rp, align 8, !dbg !3264
  br label %if.exit274, !dbg !3264

if.exit274:                                       ; preds = %if.then273, %if.exit271
  br label %loop.cond275, !dbg !3265

loop.cond275:                                     ; preds = %loop.body277, %if.exit274
  %141 = load i64, ptr %dc, align 8, !dbg !3266
  %lt276 = icmp slt i64 %141, 8, !dbg !3266
  br i1 %lt276, label %loop.body277, label %loop.exit280, !dbg !3266

loop.body277:                                     ; preds = %loop.cond275
  %142 = load i32, ptr %x, align 4, !dbg !3268
  %mul278 = mul i32 %142, 16, !dbg !3268
  store i32 %mul278, ptr %x, align 4, !dbg !3268
  %143 = load i64, ptr %dc, align 8, !dbg !3269
  %add279 = add i64 %143, 1, !dbg !3269
  store i64 %add279, ptr %dc, align 8, !dbg !3269
  br label %loop.cond275, !dbg !3269

loop.exit280:                                     ; preds = %loop.cond275
  call void @llvm.dbg.declare(metadata ptr %e2, metadata !3270, metadata !DIExpression()), !dbg !3271
  store i64 0, ptr %e2, align 8, !dbg !3271
  %144 = load i8, ptr %c, align 1, !dbg !3272
  %zext281 = zext i8 %144 to i32, !dbg !3272
  %or282 = or i32 %zext281, 32, !dbg !3272
  %eq283 = icmp eq i32 %or282, 112, !dbg !3272
  %check284 = icmp sge i32 %or282, 0, !dbg !3272
  %siui-eq285 = and i1 %check284, %eq283, !dbg !3272
  br i1 %siui-eq285, label %if.then286, label %if.exit305, !dbg !3272

if.then286:                                       ; preds = %loop.exit280
  call void @llvm.dbg.declare(metadata ptr %e2val, metadata !3273, metadata !DIExpression()), !dbg !3275
  %145 = load %"char[]", ptr %chars125, align 8, !dbg !3276
  %146 = extractvalue %"char[]" %145, 0, !dbg !3276
  %147 = load i64, ptr %index, align 8, !dbg !3277
  %add287 = add i64 %147, 1, !dbg !3277
  %148 = extractvalue %"char[]" %145, 1, !dbg !3277
  %gt288 = icmp sgt i64 %add287, %148, !dbg !3277
  %149 = call i1 @llvm.expect.i1(i1 %gt288, i1 false), !dbg !3277
  br i1 %149, label %panic289, label %checkok296, !dbg !3277

checkok296:                                       ; preds = %if.then286
  %underflow = icmp slt i64 %add287, 0, !dbg !3278
  %150 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !3278
  br i1 %150, label %panic297, label %checkok302, !dbg !3278

checkok302:                                       ; preds = %checkok296
  %size303 = sub i64 %148, %add287, !dbg !3277
  %ptradd304 = getelementptr inbounds i8, ptr %146, i64 %add287, !dbg !3277
  %151 = insertvalue %"char[]" undef, ptr %ptradd304, 0, !dbg !3277
  %152 = insertvalue %"char[]" %151, i64 %size303, 1, !dbg !3277
  %153 = call i64 @std.core.String.to_long(ptr %retparam, ptr %ptradd304, i64 %size303, i32 10), !dbg !3279
  %not_err = icmp eq i64 %153, 0, !dbg !3279
  %154 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3279
  br i1 %154, label %after_check, label %else_block, !dbg !3279

after_check:                                      ; preds = %checkok302
  %155 = load i64, ptr %retparam, align 8, !dbg !3279
  br label %phi_block, !dbg !3279

else_block:                                       ; preds = %checkok302
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !3280
  br label %guard_block, !dbg !3280

guard_block:                                      ; preds = %else_block
  %156 = load i64, ptr %error_var, align 8, !dbg !3280
  store i64 %156, ptr %reterr, align 8, !dbg !3280
  br label %err_retblock, !dbg !3280

phi_block:                                        ; preds = %after_check
  store i64 %155, ptr %e2val, align 8, !dbg !3280
  %157 = load i64, ptr %e2val, align 8, !dbg !3281
  store i64 %157, ptr %e2, align 8, !dbg !3281
  br label %if.exit305, !dbg !3281

if.exit305:                                       ; preds = %phi_block, %loop.exit280
  %158 = load i64, ptr %e2, align 8, !dbg !3282
  %159 = load i64, ptr %rp, align 8, !dbg !3283
  %mul306 = mul i64 4, %159, !dbg !3284
  %sub307 = sub i64 %mul306, 32, !dbg !3284
  %add308 = add i64 %158, %sub307, !dbg !3282
  store i64 %add308, ptr %e2, align 8, !dbg !3282
  %160 = load i32, ptr %x, align 4, !dbg !3285
  %not309 = icmp eq i32 %160, 0, !dbg !3285
  br i1 %not309, label %if.then310, label %if.exit313, !dbg !3285

if.then310:                                       ; preds = %if.exit305
  %161 = load i32, ptr %sign126, align 4, !dbg !3286
  %sifp311 = sitofp i32 %161 to double, !dbg !3286
  %fmul312 = fmul double %sifp311, 0.000000e+00, !dbg !3286
  store double %fmul312, ptr %blockret127, align 8, !dbg !3286
  br label %expr_block.exit378, !dbg !3286

if.exit313:                                       ; preds = %if.exit305
  %162 = load i64, ptr %e2, align 8, !dbg !3287
  %gt314 = icmp sgt i64 %162, 149, !dbg !3287
  br i1 %gt314, label %if.then315, label %if.exit316, !dbg !3287

if.then315:                                       ; preds = %if.exit313
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3288
  br label %err_retblock, !dbg !3288

if.exit316:                                       ; preds = %if.exit313
  %163 = load i64, ptr %e2, align 8, !dbg !3289
  %lt317 = icmp slt i64 %163, -255, !dbg !3289
  br i1 %lt317, label %if.then318, label %if.exit319, !dbg !3289

if.then318:                                       ; preds = %if.exit316
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3290
  br label %err_retblock, !dbg !3290

if.exit319:                                       ; preds = %if.exit316
  br label %loop.cond320, !dbg !3291

loop.cond320:                                     ; preds = %if.exit331, %if.exit319
  %164 = load i32, ptr %x, align 4, !dbg !3292
  %lt321 = icmp ult i32 %164, -2147483648, !dbg !3292
  br i1 %lt321, label %loop.body322, label %loop.exit333, !dbg !3292

loop.body322:                                     ; preds = %loop.cond320
  %165 = load double, ptr %y, align 8, !dbg !3294
  %ge323 = fcmp oge double %165, 5.000000e-01, !dbg !3294
  br i1 %ge323, label %if.then324, label %if.else328, !dbg !3294

if.then324:                                       ; preds = %loop.body322
  %166 = load i32, ptr %x, align 4, !dbg !3296
  %167 = load i32, ptr %x, align 4, !dbg !3298
  %add325 = add i32 %167, 1, !dbg !3298
  %add326 = add i32 %166, %add325, !dbg !3296
  store i32 %add326, ptr %x, align 4, !dbg !3296
  %168 = load double, ptr %y, align 8, !dbg !3299
  %169 = load double, ptr %y, align 8, !dbg !3300
  %fsub = fsub double %169, 1.000000e+00, !dbg !3300
  %fadd327 = fadd double %168, %fsub, !dbg !3299
  store double %fadd327, ptr %y, align 8, !dbg !3299
  br label %if.exit331, !dbg !3299

if.else328:                                       ; preds = %loop.body322
  %170 = load i32, ptr %x, align 4, !dbg !3301
  %171 = load i32, ptr %x, align 4, !dbg !3303
  %add329 = add i32 %170, %171, !dbg !3301
  store i32 %add329, ptr %x, align 4, !dbg !3301
  %172 = load double, ptr %y, align 8, !dbg !3304
  %173 = load double, ptr %y, align 8, !dbg !3305
  %fadd330 = fadd double %172, %173, !dbg !3304
  store double %fadd330, ptr %y, align 8, !dbg !3304
  br label %if.exit331, !dbg !3304

if.exit331:                                       ; preds = %if.else328, %if.then324
  %174 = load i64, ptr %e2, align 8, !dbg !3306
  %sub332 = sub i64 %174, 1, !dbg !3306
  store i64 %sub332, ptr %e2, align 8, !dbg !3306
  br label %loop.cond320, !dbg !3306

loop.exit333:                                     ; preds = %loop.cond320
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !3307, metadata !DIExpression()), !dbg !3308
  store i32 24, ptr %bits, align 4, !dbg !3309
  %175 = load i64, ptr %e2, align 8, !dbg !3310
  %add334 = add i64 32, %175, !dbg !3311
  %sub335 = sub i64 %add334, -149, !dbg !3311
  %gt336 = icmp sgt i64 24, %sub335, !dbg !3312
  br i1 %gt336, label %if.then337, label %if.exit343, !dbg !3312

if.then337:                                       ; preds = %loop.exit333
  %176 = load i64, ptr %e2, align 8, !dbg !3313
  %add338 = add i64 32, %176, !dbg !3315
  %sub339 = sub i64 %add338, -149, !dbg !3316
  %trunc = trunc i64 %sub339 to i32, !dbg !3316
  store i32 %trunc, ptr %bits, align 4, !dbg !3316
  %177 = load i32, ptr %bits, align 4, !dbg !3317
  %lt340 = icmp slt i32 %177, 0, !dbg !3317
  br i1 %lt340, label %if.then341, label %if.exit342, !dbg !3317

if.then341:                                       ; preds = %if.then337
  store i32 0, ptr %bits, align 4, !dbg !3318
  br label %if.exit342, !dbg !3318

if.exit342:                                       ; preds = %if.then341, %if.then337
  br label %if.exit343, !dbg !3318

if.exit343:                                       ; preds = %if.exit342, %loop.exit333
  call void @llvm.dbg.declare(metadata ptr %bias, metadata !3319, metadata !DIExpression()), !dbg !3320
  store double 0.000000e+00, ptr %bias, align 8, !dbg !3320
  %178 = load i32, ptr %bits, align 4, !dbg !3321
  %lt344 = icmp slt i32 %178, 53, !dbg !3321
  br i1 %lt344, label %if.then345, label %if.exit352, !dbg !3321

if.then345:                                       ; preds = %if.exit343
  store double 1.000000e+00, ptr %x346, align 8
  %179 = load i32, ptr %bits, align 4, !dbg !3322
  %sub347 = sub i32 85, %179, !dbg !3324
  %sub348 = sub i32 %sub347, 1, !dbg !3324
  store i32 %sub348, ptr %n, align 4
  %180 = load double, ptr %x346, align 8, !dbg !3325
  %181 = load i32, ptr %n, align 4, !dbg !3325
  %182 = call double @scalbn(double %180, i32 %181), !dbg !3328
  store double %182, ptr %mag, align 8
  %183 = load i32, ptr %sign126, align 4, !dbg !3329
  %sifp349 = sitofp i32 %183 to double, !dbg !3329
  store double %sifp349, ptr %sgn, align 8
  %184 = load double, ptr %mag, align 8
  store double %184, ptr %x350, align 8
  %185 = load double, ptr %sgn, align 8
  store double %185, ptr %y351, align 8
  %186 = load double, ptr %x350, align 8, !dbg !3330
  %187 = load double, ptr %sgn, align 8, !dbg !3335
  %188 = call double @llvm.copysign.f64(double %186, double %187), !dbg !3335
  store double %188, ptr %bias, align 8, !dbg !3335
  br label %if.exit352, !dbg !3335

if.exit352:                                       ; preds = %if.then345, %if.exit343
  %189 = load i32, ptr %bits, align 4, !dbg !3336
  %lt353 = icmp slt i32 %189, 32, !dbg !3336
  br i1 %lt353, label %and.rhs354, label %and.phi355, !dbg !3336

and.rhs354:                                       ; preds = %if.exit352
  %190 = load double, ptr %y, align 8, !dbg !3337
  %fpbool = fcmp une double %190, 0.000000e+00, !dbg !3337
  br label %and.phi355, !dbg !3337

and.phi355:                                       ; preds = %and.rhs354, %if.exit352
  %val356 = phi i1 [ false, %if.exit352 ], [ %fpbool, %and.rhs354 ], !dbg !3337
  br i1 %val356, label %and.rhs357, label %and.phi359, !dbg !3337

and.rhs357:                                       ; preds = %and.phi355
  %191 = load i32, ptr %x, align 4, !dbg !3338
  %and = and i32 %191, 1, !dbg !3338
  %not358 = icmp eq i32 %and, 0, !dbg !3338
  br label %and.phi359, !dbg !3338

and.phi359:                                       ; preds = %and.rhs357, %and.phi355
  %val360 = phi i1 [ false, %and.phi355 ], [ %not358, %and.rhs357 ], !dbg !3338
  br i1 %val360, label %if.then361, label %if.exit363, !dbg !3338

if.then361:                                       ; preds = %and.phi359
  %192 = load i32, ptr %x, align 4, !dbg !3339
  %add362 = add i32 %192, 1, !dbg !3339
  store i32 %add362, ptr %x, align 4, !dbg !3339
  store double 0.000000e+00, ptr %y, align 8, !dbg !3341
  br label %if.exit363, !dbg !3341

if.exit363:                                       ; preds = %if.then361, %and.phi359
  %193 = load double, ptr %bias, align 8, !dbg !3342
  %194 = load i32, ptr %sign126, align 4, !dbg !3343
  %sifp364 = sitofp i32 %194 to double, !dbg !3343
  %195 = load i32, ptr %x, align 4, !dbg !3344
  %uifp = uitofp i32 %195 to double, !dbg !3344
  %fmul365 = fmul double %sifp364, %uifp, !dbg !3343
  %fadd366 = fadd double %193, %fmul365, !dbg !3342
  %196 = load i32, ptr %sign126, align 4, !dbg !3345
  %sifp367 = sitofp i32 %196 to double, !dbg !3345
  %197 = load double, ptr %y, align 8, !dbg !3346
  %fmul368 = fmul double %sifp367, %197, !dbg !3345
  %fadd369 = fadd double %fadd366, %fmul368, !dbg !3342
  store double %fadd369, ptr %y, align 8, !dbg !3342
  %198 = load double, ptr %y, align 8, !dbg !3347
  %199 = load double, ptr %bias, align 8, !dbg !3348
  %fsub370 = fsub double %198, %199, !dbg !3347
  store double %fsub370, ptr %y, align 8, !dbg !3347
  %200 = load double, ptr %y, align 8, !dbg !3349
  %not371 = fcmp ueq double %200, 0.000000e+00, !dbg !3349
  br i1 %not371, label %if.then372, label %if.exit373, !dbg !3349

if.then372:                                       ; preds = %if.exit363
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3350
  br label %err_retblock, !dbg !3350

if.exit373:                                       ; preds = %if.exit363
  %201 = load double, ptr %y, align 8
  store double %201, ptr %x374, align 8
  %202 = load i64, ptr %e2, align 8, !dbg !3351
  %trunc375 = trunc i64 %202 to i32, !dbg !3351
  store i32 %trunc375, ptr %n376, align 4
  %203 = load double, ptr %x374, align 8, !dbg !3352
  %204 = load i32, ptr %n376, align 4, !dbg !3352
  %205 = call double @scalbn(double %203, i32 %204), !dbg !3355
  store double %205, ptr %blockret127, align 8, !dbg !3355
  br label %expr_block.exit378, !dbg !3355

expr_block.exit378:                               ; preds = %if.exit373, %if.then310, %if.exit153, %if.then144
  %206 = load double, ptr %blockret127, align 8, !dbg !3355
  %fpfptrunc = fptrunc double %206 to float, !dbg !3355
  store float %fpfptrunc, ptr %blockret, align 4, !dbg !3355
  br label %expr_block.exit1645, !dbg !3355

if.exit379:                                       ; preds = %and.phi111
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars380, ptr align 8 %chars, i32 16, i1 false)
  %207 = load i32, ptr %sign, align 4
  store i32 %207, ptr %sign381, align 4
  %ptradd383 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !3356
  %208 = load i64, ptr %ptradd383, align 8, !dbg !3356
  %lt384 = icmp ult i64 0, %208, !dbg !3356
  br i1 %lt384, label %assert_ok, label %assert_fail, !dbg !3356

assert_fail:                                      ; preds = %if.exit379
  %209 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3356
  call void %209(ptr @.panic_msg.76, i64 34, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 35), !dbg !3356
  unreachable, !dbg !3356

assert_ok:                                        ; preds = %if.exit379
  call void @llvm.dbg.declare(metadata ptr %x385, metadata !3360, metadata !DIExpression()), !dbg !3361
  call void @llvm.memset.p0.i64(ptr align 16 %x385, i8 0, i64 512, i1 false), !dbg !3361
  call void @llvm.dbg.declare(metadata ptr %emax, metadata !3362, metadata !DIExpression()), !dbg !3363
  store i32 128, ptr %emax, align 4, !dbg !3364
  call void @llvm.dbg.declare(metadata ptr %index386, metadata !3365, metadata !DIExpression()), !dbg !3366
  store i64 0, ptr %index386, align 8, !dbg !3366
  call void @llvm.dbg.declare(metadata ptr %got_digit387, metadata !3367, metadata !DIExpression()), !dbg !3368
  %ptradd388 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !3369
  %210 = load i64, ptr %ptradd388, align 8, !dbg !3369
  %211 = load ptr, ptr %chars380, align 8, !dbg !3369
  %ge389 = icmp sge i64 0, %210, !dbg !3370
  %212 = call i1 @llvm.expect.i1(i1 %ge389, i1 false), !dbg !3370
  br i1 %212, label %panic390, label %checkok397, !dbg !3370

checkok397:                                       ; preds = %assert_ok
  %213 = load i8, ptr %211, align 1, !dbg !3370
  %eq398 = icmp eq i8 %213, 48, !dbg !3369
  %214 = zext i1 %eq398 to i8, !dbg !3369
  store i8 %214, ptr %got_digit387, align 1, !dbg !3369
  call void @llvm.dbg.declare(metadata ptr %got_rad399, metadata !3371, metadata !DIExpression()), !dbg !3372
  store i8 0, ptr %got_rad399, align 1, !dbg !3372
  call void @llvm.dbg.declare(metadata ptr %lrp, metadata !3373, metadata !DIExpression()), !dbg !3374
  store i64 0, ptr %lrp, align 8, !dbg !3374
  call void @llvm.dbg.declare(metadata ptr %dc400, metadata !3375, metadata !DIExpression()), !dbg !3376
  store i64 0, ptr %dc400, align 8, !dbg !3376
  call void @llvm.dbg.declare(metadata ptr %k, metadata !3377, metadata !DIExpression()), !dbg !3378
  store i32 0, ptr %k, align 4, !dbg !3378
  call void @llvm.dbg.declare(metadata ptr %j, metadata !3379, metadata !DIExpression()), !dbg !3380
  store i32 0, ptr %j, align 4, !dbg !3380
  call void @llvm.dbg.declare(metadata ptr %lnz, metadata !3381, metadata !DIExpression()), !dbg !3382
  store i32 0, ptr %lnz, align 4, !dbg !3382
  call void @llvm.dbg.declare(metadata ptr %len401, metadata !3383, metadata !DIExpression()), !dbg !3384
  %ptradd402 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !3385
  %215 = load i64, ptr %ptradd402, align 8, !dbg !3385
  store i64 %215, ptr %len401, align 8, !dbg !3385
  call void @llvm.dbg.declare(metadata ptr %last_char403, metadata !3386, metadata !DIExpression()), !dbg !3387
  %216 = load i64, ptr %len401, align 8, !dbg !3388
  %sub404 = sub i64 %216, 1, !dbg !3388
  store i64 %sub404, ptr %last_char403, align 8, !dbg !3388
  %217 = load i64, ptr %len401, align 8, !dbg !3389
  %intbool405 = icmp ne i64 %217, 0, !dbg !3389
  br i1 %intbool405, label %assert_ok407, label %assert_fail406, !dbg !3389

assert_fail406:                                   ; preds = %checkok397
  %218 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3389
  call void %218(ptr @.panic_msg.77, i64 16, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 52), !dbg !3389
  unreachable, !dbg !3389

assert_ok407:                                     ; preds = %checkok397
  call void @llvm.dbg.declare(metadata ptr %c408, metadata !3390, metadata !DIExpression()), !dbg !3391
  br label %loop.cond409, !dbg !3392

loop.cond409:                                     ; preds = %if.exit427, %assert_ok407
  %ptradd410 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !3393
  %219 = load i64, ptr %ptradd410, align 8, !dbg !3393
  %220 = load ptr, ptr %chars380, align 8, !dbg !3393
  %221 = load i64, ptr %index386, align 8, !dbg !3395
  %ge411 = icmp uge i64 %221, %219, !dbg !3395
  %222 = call i1 @llvm.expect.i1(i1 %ge411, i1 false), !dbg !3395
  br i1 %222, label %panic412, label %checkok419, !dbg !3395

checkok419:                                       ; preds = %loop.cond409
  %ptradd420 = getelementptr inbounds i8, ptr %220, i64 %221, !dbg !3395
  %223 = load i8, ptr %ptradd420, align 1, !dbg !3395
  store i8 %223, ptr %c408, align 1, !dbg !3395
  %eq421 = icmp eq i8 %223, 48, !dbg !3396
  br i1 %eq421, label %loop.body422, label %loop.exit429, !dbg !3396

loop.body422:                                     ; preds = %checkok419
  %224 = load i64, ptr %index386, align 8, !dbg !3397
  %225 = load i64, ptr %last_char403, align 8, !dbg !3399
  %eq423 = icmp eq i64 %224, %225, !dbg !3397
  br i1 %eq423, label %if.then424, label %if.exit427, !dbg !3397

if.then424:                                       ; preds = %loop.body422
  %226 = load i32, ptr %sign381, align 4, !dbg !3400
  %sifp425 = sitofp i32 %226 to double, !dbg !3400
  %fmul426 = fmul double %sifp425, 0.000000e+00, !dbg !3400
  store double %fmul426, ptr %blockret382, align 8, !dbg !3400
  br label %expr_block.exit1643, !dbg !3400

if.exit427:                                       ; preds = %loop.body422
  %227 = load i64, ptr %index386, align 8, !dbg !3401
  %add428 = add i64 %227, 1, !dbg !3401
  store i64 %add428, ptr %index386, align 8, !dbg !3401
  br label %loop.cond409, !dbg !3401

loop.exit429:                                     ; preds = %checkok419
  %228 = load i8, ptr %c408, align 1, !dbg !3402
  %eq430 = icmp eq i8 %228, 46, !dbg !3402
  br i1 %eq430, label %if.then431, label %if.exit481, !dbg !3402

if.then431:                                       ; preds = %loop.exit429
  store i8 1, ptr %got_rad399, align 1, !dbg !3403
  %229 = load i64, ptr %index386, align 8, !dbg !3405
  %230 = load i64, ptr %last_char403, align 8, !dbg !3406
  %eq432 = icmp eq i64 %229, %230, !dbg !3405
  br i1 %eq432, label %if.then433, label %if.exit439, !dbg !3405

if.then433:                                       ; preds = %if.then431
  %231 = load i8, ptr %got_digit387, align 1, !dbg !3407
  %232 = trunc i8 %231 to i1, !dbg !3407
  %not434 = xor i1 %232, true, !dbg !3407
  br i1 %not434, label %if.then435, label %if.exit436, !dbg !3407

if.then435:                                       ; preds = %if.then433
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3409
  br label %err_retblock, !dbg !3409

if.exit436:                                       ; preds = %if.then433
  %233 = load i32, ptr %sign381, align 4, !dbg !3410
  %sifp437 = sitofp i32 %233 to double, !dbg !3410
  %fmul438 = fmul double %sifp437, 0.000000e+00, !dbg !3410
  store double %fmul438, ptr %blockret382, align 8, !dbg !3410
  br label %expr_block.exit1643, !dbg !3410

if.exit439:                                       ; preds = %if.then431
  %234 = load i64, ptr %index386, align 8, !dbg !3411
  %235 = load i64, ptr %last_char403, align 8, !dbg !3412
  %neq440 = icmp ne i64 %234, %235, !dbg !3411
  br i1 %neq440, label %and.rhs441, label %and.phi455, !dbg !3411

and.rhs441:                                       ; preds = %if.exit439
  %ptradd442 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !3413
  %236 = load i64, ptr %ptradd442, align 8, !dbg !3413
  %237 = load ptr, ptr %chars380, align 8, !dbg !3413
  %238 = load i64, ptr %index386, align 8, !dbg !3414
  %add443 = add i64 %238, 1, !dbg !3414
  store i64 %add443, ptr %index386, align 8, !dbg !3414
  %ge444 = icmp uge i64 %add443, %236, !dbg !3414
  %239 = call i1 @llvm.expect.i1(i1 %ge444, i1 false), !dbg !3414
  br i1 %239, label %panic445, label %checkok452, !dbg !3414

checkok452:                                       ; preds = %and.rhs441
  %ptradd453 = getelementptr inbounds i8, ptr %237, i64 %add443, !dbg !3415
  %240 = load i8, ptr %ptradd453, align 1, !dbg !3415
  store i8 %240, ptr %c408, align 1, !dbg !3415
  %eq454 = icmp eq i8 %240, 48, !dbg !3416
  br label %and.phi455, !dbg !3416

and.phi455:                                       ; preds = %checkok452, %if.exit439
  %val456 = phi i1 [ false, %if.exit439 ], [ %eq454, %checkok452 ], !dbg !3416
  br i1 %val456, label %if.then457, label %if.exit480, !dbg !3416

if.then457:                                       ; preds = %and.phi455
  %241 = load i64, ptr %lrp, align 8, !dbg !3417
  %sub458 = sub i64 %241, 1, !dbg !3417
  store i64 %sub458, ptr %lrp, align 8, !dbg !3417
  store i8 1, ptr %got_digit387, align 1, !dbg !3419
  br label %loop.cond459, !dbg !3420

loop.cond459:                                     ; preds = %loop.body477, %if.then457
  %242 = load i64, ptr %last_char403, align 8, !dbg !3421
  %243 = load i64, ptr %index386, align 8, !dbg !3423
  %neq460 = icmp ne i64 %242, %243, !dbg !3421
  br i1 %neq460, label %and.rhs461, label %and.phi475, !dbg !3421

and.rhs461:                                       ; preds = %loop.cond459
  %ptradd462 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !3424
  %244 = load i64, ptr %ptradd462, align 8, !dbg !3424
  %245 = load ptr, ptr %chars380, align 8, !dbg !3424
  %246 = load i64, ptr %index386, align 8, !dbg !3425
  %add463 = add i64 %246, 1, !dbg !3425
  store i64 %add463, ptr %index386, align 8, !dbg !3425
  %ge464 = icmp uge i64 %add463, %244, !dbg !3425
  %247 = call i1 @llvm.expect.i1(i1 %ge464, i1 false), !dbg !3425
  br i1 %247, label %panic465, label %checkok472, !dbg !3425

checkok472:                                       ; preds = %and.rhs461
  %ptradd473 = getelementptr inbounds i8, ptr %245, i64 %add463, !dbg !3426
  %248 = load i8, ptr %ptradd473, align 1, !dbg !3426
  store i8 %248, ptr %c408, align 1, !dbg !3426
  %eq474 = icmp eq i8 %248, 48, !dbg !3427
  br label %and.phi475, !dbg !3427

and.phi475:                                       ; preds = %checkok472, %loop.cond459
  %val476 = phi i1 [ false, %loop.cond459 ], [ %eq474, %checkok472 ], !dbg !3427
  br i1 %val476, label %loop.body477, label %loop.exit479, !dbg !3427

loop.body477:                                     ; preds = %and.phi475
  %249 = load i64, ptr %lrp, align 8, !dbg !3428
  %sub478 = sub i64 %249, 1, !dbg !3428
  store i64 %sub478, ptr %lrp, align 8, !dbg !3428
  br label %loop.cond459, !dbg !3428

loop.exit479:                                     ; preds = %and.phi475
  br label %if.exit480, !dbg !3428

if.exit480:                                       ; preds = %loop.exit479, %and.phi455
  br label %if.exit481, !dbg !3428

if.exit481:                                       ; preds = %if.exit480, %loop.exit429
  br label %loop.cond482, !dbg !3430

loop.cond482:                                     ; preds = %checkok598, %if.exit481
  %250 = load i8, ptr %c408, align 1, !dbg !3431
  %zext483 = zext i8 %250 to i32, !dbg !3431
  %sub484 = sub i32 %zext483, 48, !dbg !3431
  %lt485 = icmp ult i32 %sub484, 10, !dbg !3431
  br i1 %lt485, label %or.phi488, label %or.rhs486, !dbg !3431

or.rhs486:                                        ; preds = %loop.cond482
  %251 = load i8, ptr %c408, align 1, !dbg !3433
  %eq487 = icmp eq i8 %251, 46, !dbg !3433
  br label %or.phi488, !dbg !3433

or.phi488:                                        ; preds = %or.rhs486, %loop.cond482
  %val489 = phi i1 [ true, %loop.cond482 ], [ %eq487, %or.rhs486 ], !dbg !3433
  br i1 %val489, label %loop.body490, label %loop.exit600, !dbg !3433

loop.body490:                                     ; preds = %or.phi488
  store i8 1, ptr %switch491, align 1
  br label %switch.entry492

switch.entry492:                                  ; preds = %loop.body490
  %252 = load i8, ptr %switch491, align 1
  %253 = trunc i8 %252 to i1
  %254 = load i8, ptr %c408, align 1, !dbg !3434
  %eq493 = icmp eq i8 %254, 46, !dbg !3434
  %eq494 = icmp eq i1 %eq493, %253, !dbg !3434
  br i1 %eq494, label %switch.case495, label %next_if498, !dbg !3434

switch.case495:                                   ; preds = %switch.entry492
  %255 = load i8, ptr %got_rad399, align 1, !dbg !3437
  %256 = trunc i8 %255 to i1, !dbg !3437
  br i1 %256, label %if.then496, label %if.exit497, !dbg !3437

if.then496:                                       ; preds = %switch.case495
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3439
  br label %err_retblock, !dbg !3439

if.exit497:                                       ; preds = %switch.case495
  store i8 1, ptr %got_rad399, align 1, !dbg !3440
  %257 = load i64, ptr %dc400, align 8, !dbg !3441
  store i64 %257, ptr %lrp, align 8, !dbg !3441
  br label %switch.exit581, !dbg !3441

next_if498:                                       ; preds = %switch.entry492
  %258 = load i32, ptr %k, align 4, !dbg !3442
  %lt499 = icmp slt i32 %258, 125, !dbg !3442
  %eq500 = icmp eq i1 %lt499, %253, !dbg !3442
  br i1 %eq500, label %switch.case501, label %next_if574, !dbg !3442

switch.case501:                                   ; preds = %next_if498
  %259 = load i64, ptr %dc400, align 8, !dbg !3443
  %add502 = add i64 %259, 1, !dbg !3443
  store i64 %add502, ptr %dc400, align 8, !dbg !3443
  %260 = load i8, ptr %c408, align 1, !dbg !3445
  %neq503 = icmp ne i8 %260, 48, !dbg !3445
  br i1 %neq503, label %if.then504, label %if.exit506, !dbg !3445

if.then504:                                       ; preds = %switch.case501
  %261 = load i64, ptr %dc400, align 8, !dbg !3446
  %trunc505 = trunc i64 %261 to i32, !dbg !3446
  store i32 %trunc505, ptr %lnz, align 4, !dbg !3446
  br label %if.exit506, !dbg !3446

if.exit506:                                       ; preds = %if.then504, %switch.case501
  %262 = load i32, ptr %j, align 4, !dbg !3447
  %intbool507 = icmp ne i32 %262, 0, !dbg !3447
  br i1 %intbool507, label %if.then508, label %if.else547, !dbg !3447

if.then508:                                       ; preds = %if.exit506
  %263 = load i32, ptr %k, align 4, !dbg !3448
  %sext = sext i32 %263 to i64, !dbg !3448
  %lt509 = icmp slt i64 %sext, 0, !dbg !3448
  %264 = call i1 @llvm.expect.i1(i1 %lt509, i1 false), !dbg !3448
  br i1 %264, label %panic510, label %checkok515, !dbg !3448

checkok515:                                       ; preds = %if.then508
  %ge516 = icmp sge i64 %sext, 128, !dbg !3448
  %265 = call i1 @llvm.expect.i1(i1 %ge516, i1 false), !dbg !3448
  br i1 %265, label %panic517, label %checkok524, !dbg !3448

checkok524:                                       ; preds = %checkok515
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext, !dbg !3448
  %266 = load i32, ptr %k, align 4, !dbg !3450
  %sext525 = sext i32 %266 to i64, !dbg !3450
  %lt526 = icmp slt i64 %sext525, 0, !dbg !3450
  %267 = call i1 @llvm.expect.i1(i1 %lt526, i1 false), !dbg !3450
  br i1 %267, label %panic527, label %checkok532, !dbg !3450

checkok532:                                       ; preds = %checkok524
  %ge533 = icmp sge i64 %sext525, 128, !dbg !3450
  %268 = call i1 @llvm.expect.i1(i1 %ge533, i1 false), !dbg !3450
  br i1 %268, label %panic534, label %checkok541, !dbg !3450

checkok541:                                       ; preds = %checkok532
  %ptroffset542 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext525, !dbg !3450
  %269 = load i32, ptr %ptroffset542, align 4, !dbg !3450
  %mul543 = mul i32 %269, 10, !dbg !3451
  %270 = load i8, ptr %c408, align 1, !dbg !3452
  %zext544 = zext i8 %270 to i32, !dbg !3452
  %add545 = add i32 %mul543, %zext544, !dbg !3451
  %sub546 = sub i32 %add545, 48, !dbg !3451
  store i32 %sub546, ptr %ptroffset, align 4, !dbg !3451
  br label %if.exit568, !dbg !3451

if.else547:                                       ; preds = %if.exit506
  %271 = load i32, ptr %k, align 4, !dbg !3453
  %sext548 = sext i32 %271 to i64, !dbg !3453
  %lt549 = icmp slt i64 %sext548, 0, !dbg !3453
  %272 = call i1 @llvm.expect.i1(i1 %lt549, i1 false), !dbg !3453
  br i1 %272, label %panic550, label %checkok555, !dbg !3453

checkok555:                                       ; preds = %if.else547
  %ge556 = icmp sge i64 %sext548, 128, !dbg !3453
  %273 = call i1 @llvm.expect.i1(i1 %ge556, i1 false), !dbg !3453
  br i1 %273, label %panic557, label %checkok564, !dbg !3453

checkok564:                                       ; preds = %checkok555
  %ptroffset565 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext548, !dbg !3453
  %274 = load i8, ptr %c408, align 1, !dbg !3455
  %zext566 = zext i8 %274 to i32, !dbg !3455
  %sub567 = sub i32 %zext566, 48, !dbg !3455
  store i32 %sub567, ptr %ptroffset565, align 4, !dbg !3455
  br label %if.exit568, !dbg !3455

if.exit568:                                       ; preds = %checkok564, %checkok541
  %275 = load i32, ptr %j, align 4, !dbg !3456
  %add569 = add i32 %275, 1, !dbg !3456
  store i32 %add569, ptr %j, align 4, !dbg !3456
  %eq570 = icmp eq i32 %add569, 9, !dbg !3457
  br i1 %eq570, label %if.then571, label %if.exit573, !dbg !3457

if.then571:                                       ; preds = %if.exit568
  %276 = load i32, ptr %k, align 4, !dbg !3458
  %add572 = add i32 %276, 1, !dbg !3458
  store i32 %add572, ptr %k, align 4, !dbg !3458
  store i32 0, ptr %j, align 4, !dbg !3460
  br label %if.exit573, !dbg !3460

if.exit573:                                       ; preds = %if.then571, %if.exit568
  store i8 1, ptr %got_digit387, align 1, !dbg !3461
  br label %switch.exit581, !dbg !3461

next_if574:                                       ; preds = %next_if498
  br label %switch.default, !dbg !3461

switch.default:                                   ; preds = %next_if574
  %277 = load i64, ptr %dc400, align 8, !dbg !3462
  %add575 = add i64 %277, 1, !dbg !3462
  store i64 %add575, ptr %dc400, align 8, !dbg !3462
  %278 = load i8, ptr %c408, align 1, !dbg !3464
  %neq576 = icmp ne i8 %278, 48, !dbg !3464
  br i1 %neq576, label %if.then577, label %if.exit580, !dbg !3464

if.then577:                                       ; preds = %switch.default
  %ptradd578 = getelementptr inbounds i8, ptr %x385, i64 496, !dbg !3465
  %279 = load i32, ptr %ptradd578, align 4, !dbg !3465
  %or579 = or i32 %279, 1, !dbg !3466
  store i32 %or579, ptr %ptradd578, align 4, !dbg !3466
  br label %if.exit580, !dbg !3466

if.exit580:                                       ; preds = %if.then577, %switch.default
  br label %switch.exit581, !dbg !3466

switch.exit581:                                   ; preds = %if.exit580, %if.exit573, %if.exit497
  %280 = load i64, ptr %index386, align 8, !dbg !3467
  %281 = load i64, ptr %last_char403, align 8, !dbg !3468
  %eq582 = icmp eq i64 %280, %281, !dbg !3467
  br i1 %eq582, label %if.then583, label %if.exit584, !dbg !3467

if.then583:                                       ; preds = %switch.exit581
  br label %loop.exit600, !dbg !3469

if.exit584:                                       ; preds = %switch.exit581
  %282 = load i64, ptr %index386, align 8, !dbg !3470
  %283 = load i64, ptr %last_char403, align 8, !dbg !3471
  %lt585 = icmp ult i64 %282, %283, !dbg !3470
  br i1 %lt585, label %assert_ok587, label %assert_fail586, !dbg !3470

assert_fail586:                                   ; preds = %if.exit584
  %284 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3470
  call void %284(ptr @.panic_msg.77, i64 16, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 112), !dbg !3470
  unreachable, !dbg !3470

assert_ok587:                                     ; preds = %if.exit584
  %ptradd588 = getelementptr inbounds i8, ptr %chars380, i64 8, !dbg !3472
  %285 = load i64, ptr %ptradd588, align 8, !dbg !3472
  %286 = load ptr, ptr %chars380, align 8, !dbg !3472
  %287 = load i64, ptr %index386, align 8, !dbg !3473
  %add589 = add i64 %287, 1, !dbg !3473
  store i64 %add589, ptr %index386, align 8, !dbg !3473
  %ge590 = icmp uge i64 %add589, %285, !dbg !3473
  %288 = call i1 @llvm.expect.i1(i1 %ge590, i1 false), !dbg !3473
  br i1 %288, label %panic591, label %checkok598, !dbg !3473

checkok598:                                       ; preds = %assert_ok587
  %ptradd599 = getelementptr inbounds i8, ptr %286, i64 %add589, !dbg !3474
  %289 = load i8, ptr %ptradd599, align 1, !dbg !3474
  store i8 %289, ptr %c408, align 1, !dbg !3474
  br label %loop.cond482, !dbg !3474

loop.exit600:                                     ; preds = %if.then583, %or.phi488
  %290 = load i8, ptr %got_rad399, align 1, !dbg !3475
  %291 = trunc i8 %290 to i1, !dbg !3475
  %not601 = xor i1 %291, true, !dbg !3475
  br i1 %not601, label %if.then602, label %if.exit603, !dbg !3475

if.then602:                                       ; preds = %loop.exit600
  %292 = load i64, ptr %dc400, align 8, !dbg !3476
  store i64 %292, ptr %lrp, align 8, !dbg !3476
  br label %if.exit603, !dbg !3476

if.exit603:                                       ; preds = %if.then602, %loop.exit600
  %293 = load i8, ptr %got_digit387, align 1, !dbg !3477
  %294 = trunc i8 %293 to i1, !dbg !3477
  %not604 = xor i1 %294, true, !dbg !3477
  br i1 %not604, label %if.then605, label %if.exit606, !dbg !3477

if.then605:                                       ; preds = %if.exit603
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3478
  br label %err_retblock, !dbg !3478

if.exit606:                                       ; preds = %if.exit603
  %295 = load i8, ptr %c408, align 1, !dbg !3479
  %zext607 = zext i8 %295 to i32, !dbg !3479
  %or608 = or i32 %zext607, 32, !dbg !3479
  %eq609 = icmp eq i32 %or608, 101, !dbg !3479
  %check610 = icmp sge i32 %or608, 0, !dbg !3479
  %siui-eq611 = and i1 %check610, %eq609, !dbg !3479
  br i1 %siui-eq611, label %if.then612, label %if.else643, !dbg !3479

if.then612:                                       ; preds = %if.exit606
  %296 = load i64, ptr %last_char403, align 8, !dbg !3480
  %297 = load i64, ptr %index386, align 8, !dbg !3482
  %eq613 = icmp eq i64 %296, %297, !dbg !3480
  br i1 %eq613, label %if.then614, label %if.exit615, !dbg !3480

if.then614:                                       ; preds = %if.then612
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3483
  br label %err_retblock, !dbg !3483

if.exit615:                                       ; preds = %if.then612
  call void @llvm.dbg.declare(metadata ptr %e10, metadata !3484, metadata !DIExpression()), !dbg !3485
  %298 = load %"char[]", ptr %chars380, align 8, !dbg !3486
  %299 = extractvalue %"char[]" %298, 0, !dbg !3486
  %300 = load i64, ptr %index386, align 8, !dbg !3487
  %add616 = add i64 %300, 1, !dbg !3487
  %301 = extractvalue %"char[]" %298, 1, !dbg !3487
  %gt617 = icmp sgt i64 %add616, %301, !dbg !3487
  %302 = call i1 @llvm.expect.i1(i1 %gt617, i1 false), !dbg !3487
  br i1 %302, label %panic618, label %checkok625, !dbg !3487

checkok625:                                       ; preds = %if.exit615
  %underflow626 = icmp slt i64 %add616, 0, !dbg !3488
  %303 = call i1 @llvm.expect.i1(i1 %underflow626, i1 false), !dbg !3488
  br i1 %303, label %panic627, label %checkok632, !dbg !3488

checkok632:                                       ; preds = %checkok625
  %size633 = sub i64 %301, %add616, !dbg !3487
  %ptradd634 = getelementptr inbounds i8, ptr %299, i64 %add616, !dbg !3487
  %304 = insertvalue %"char[]" undef, ptr %ptradd634, 0, !dbg !3487
  %305 = insertvalue %"char[]" %304, i64 %size633, 1, !dbg !3487
  %306 = call i64 @std.core.String.to_long(ptr %retparam635, ptr %ptradd634, i64 %size633, i32 10), !dbg !3489
  %not_err636 = icmp eq i64 %306, 0, !dbg !3489
  %307 = call i1 @llvm.expect.i1(i1 %not_err636, i1 true), !dbg !3489
  br i1 %307, label %after_check637, label %else_block638, !dbg !3489

after_check637:                                   ; preds = %checkok632
  %308 = load i64, ptr %retparam635, align 8, !dbg !3489
  br label %phi_block641, !dbg !3489

else_block638:                                    ; preds = %checkok632
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var639, align 8, !dbg !3490
  br label %guard_block640, !dbg !3490

guard_block640:                                   ; preds = %else_block638
  %309 = load i64, ptr %error_var639, align 8, !dbg !3490
  store i64 %309, ptr %reterr, align 8, !dbg !3490
  br label %err_retblock, !dbg !3490

phi_block641:                                     ; preds = %after_check637
  store i64 %308, ptr %e10, align 8, !dbg !3490
  %310 = load i64, ptr %lrp, align 8, !dbg !3491
  %311 = load i64, ptr %e10, align 8, !dbg !3492
  %add642 = add i64 %310, %311, !dbg !3491
  store i64 %add642, ptr %lrp, align 8, !dbg !3491
  br label %if.exit647, !dbg !3491

if.else643:                                       ; preds = %if.exit606
  %312 = load i64, ptr %index386, align 8, !dbg !3493
  %313 = load i64, ptr %last_char403, align 8, !dbg !3494
  %neq644 = icmp ne i64 %312, %313, !dbg !3493
  br i1 %neq644, label %if.then645, label %if.exit646, !dbg !3493

if.then645:                                       ; preds = %if.else643
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3495
  br label %err_retblock, !dbg !3495

if.exit646:                                       ; preds = %if.else643
  br label %if.exit647, !dbg !3495

if.exit647:                                       ; preds = %if.exit646, %phi_block641
  %314 = load i32, ptr %x385, align 4, !dbg !3497
  %not648 = icmp eq i32 %314, 0, !dbg !3497
  br i1 %not648, label %if.then649, label %if.exit652, !dbg !3497

if.then649:                                       ; preds = %if.exit647
  %315 = load i32, ptr %sign381, align 4, !dbg !3498
  %sifp650 = sitofp i32 %315 to double, !dbg !3498
  %fmul651 = fmul double %sifp650, 0.000000e+00, !dbg !3498
  store double %fmul651, ptr %blockret382, align 8, !dbg !3498
  br label %expr_block.exit1643, !dbg !3498

if.exit652:                                       ; preds = %if.exit647
  %316 = load i64, ptr %lrp, align 8, !dbg !3499
  %317 = load i64, ptr %dc400, align 8, !dbg !3500
  %eq653 = icmp eq i64 %316, %317, !dbg !3499
  br i1 %eq653, label %and.rhs654, label %and.phi656, !dbg !3499

and.rhs654:                                       ; preds = %if.exit652
  %318 = load i64, ptr %dc400, align 8, !dbg !3501
  %lt655 = icmp slt i64 %318, 10, !dbg !3501
  br label %and.phi656, !dbg !3501

and.phi656:                                       ; preds = %and.rhs654, %if.exit652
  %val657 = phi i1 [ false, %if.exit652 ], [ %lt655, %and.rhs654 ], !dbg !3501
  br i1 %val657, label %and.rhs658, label %and.phi664, !dbg !3501

and.rhs658:                                       ; preds = %and.phi656
  br i1 false, label %or.phi662, label %or.rhs659, !dbg !3502

or.rhs659:                                        ; preds = %and.rhs658
  %319 = load i32, ptr %x385, align 4, !dbg !3503
  %zext660 = zext i32 %319 to i64, !dbg !3503
  %lshr = lshr i64 %zext660, 24, !dbg !3504
  %320 = freeze i64 %lshr, !dbg !3504
  %eq661 = icmp eq i64 0, %320, !dbg !3504
  br label %or.phi662, !dbg !3504

or.phi662:                                        ; preds = %or.rhs659, %and.rhs658
  %val663 = phi i1 [ true, %and.rhs658 ], [ %eq661, %or.rhs659 ], !dbg !3504
  br label %and.phi664, !dbg !3504

and.phi664:                                       ; preds = %or.phi662, %and.phi656
  %val665 = phi i1 [ false, %and.phi656 ], [ %val663, %or.phi662 ], !dbg !3504
  br i1 %val665, label %if.then666, label %if.exit670, !dbg !3504

if.then666:                                       ; preds = %and.phi664
  %321 = load i32, ptr %sign381, align 4, !dbg !3505
  %sifp667 = sitofp i32 %321 to double, !dbg !3505
  %322 = load i32, ptr %x385, align 4, !dbg !3506
  %uifp668 = uitofp i32 %322 to double, !dbg !3506
  %fmul669 = fmul double %sifp667, %uifp668, !dbg !3505
  store double %fmul669, ptr %blockret382, align 8, !dbg !3505
  br label %expr_block.exit1643, !dbg !3505

if.exit670:                                       ; preds = %and.phi664
  %323 = load i64, ptr %lrp, align 8, !dbg !3507
  %gt671 = icmp sgt i64 %323, 74, !dbg !3507
  br i1 %gt671, label %if.then672, label %if.exit673, !dbg !3507

if.then672:                                       ; preds = %if.exit670
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3508
  br label %err_retblock, !dbg !3508

if.exit673:                                       ; preds = %if.exit670
  %324 = load i64, ptr %lrp, align 8, !dbg !3509
  %lt674 = icmp slt i64 %324, -255, !dbg !3509
  br i1 %lt674, label %if.then675, label %if.exit676, !dbg !3509

if.then675:                                       ; preds = %if.exit673
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3510
  br label %err_retblock, !dbg !3510

if.exit676:                                       ; preds = %if.exit673
  %325 = load i32, ptr %j, align 4, !dbg !3511
  %intbool677 = icmp ne i32 %325, 0, !dbg !3511
  br i1 %intbool677, label %if.then678, label %if.exit704, !dbg !3511

if.then678:                                       ; preds = %if.exit676
  br label %loop.cond679, !dbg !3512

loop.cond679:                                     ; preds = %checkok698, %if.then678
  %326 = load i32, ptr %j, align 4, !dbg !3514
  %lt680 = icmp slt i32 %326, 9, !dbg !3514
  br i1 %lt680, label %loop.body681, label %loop.exit702, !dbg !3514

loop.body681:                                     ; preds = %loop.cond679
  %327 = load i32, ptr %k, align 4, !dbg !3516
  %sext682 = sext i32 %327 to i64, !dbg !3516
  %lt683 = icmp slt i64 %sext682, 0, !dbg !3516
  %328 = call i1 @llvm.expect.i1(i1 %lt683, i1 false), !dbg !3516
  br i1 %328, label %panic684, label %checkok689, !dbg !3516

checkok689:                                       ; preds = %loop.body681
  %ge690 = icmp sge i64 %sext682, 128, !dbg !3516
  %329 = call i1 @llvm.expect.i1(i1 %ge690, i1 false), !dbg !3516
  br i1 %329, label %panic691, label %checkok698, !dbg !3516

checkok698:                                       ; preds = %checkok689
  %ptroffset699 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext682, !dbg !3516
  %330 = load i32, ptr %ptroffset699, align 4, !dbg !3516
  %mul700 = mul i32 %330, 10, !dbg !3517
  store i32 %mul700, ptr %ptroffset699, align 4, !dbg !3517
  %331 = load i32, ptr %j, align 4, !dbg !3518
  %add701 = add i32 %331, 1, !dbg !3518
  store i32 %add701, ptr %j, align 4, !dbg !3518
  br label %loop.cond679, !dbg !3518

loop.exit702:                                     ; preds = %loop.cond679
  %332 = load i32, ptr %k, align 4, !dbg !3519
  %add703 = add i32 %332, 1, !dbg !3519
  store i32 %add703, ptr %k, align 4, !dbg !3519
  store i32 0, ptr %j, align 4, !dbg !3520
  br label %if.exit704, !dbg !3520

if.exit704:                                       ; preds = %loop.exit702, %if.exit676
  call void @llvm.dbg.declare(metadata ptr %a, metadata !3521, metadata !DIExpression()), !dbg !3522
  store i32 0, ptr %a, align 4, !dbg !3522
  call void @llvm.dbg.declare(metadata ptr %z, metadata !3523, metadata !DIExpression()), !dbg !3524
  %333 = load i32, ptr %k, align 4, !dbg !3525
  store i32 %333, ptr %z, align 4, !dbg !3525
  call void @llvm.dbg.declare(metadata ptr %e2705, metadata !3526, metadata !DIExpression()), !dbg !3527
  store i32 0, ptr %e2705, align 4, !dbg !3527
  call void @llvm.dbg.declare(metadata ptr %rp706, metadata !3528, metadata !DIExpression()), !dbg !3529
  %334 = load i64, ptr %lrp, align 8, !dbg !3530
  store i64 %334, ptr %rp706, align 8, !dbg !3530
  %335 = load i32, ptr %lnz, align 4, !dbg !3531
  %lt707 = icmp slt i32 %335, 9, !dbg !3531
  br i1 %lt707, label %and.rhs708, label %and.phi710, !dbg !3531

and.rhs708:                                       ; preds = %if.exit704
  %336 = load i32, ptr %lnz, align 4, !dbg !3532
  %sext709 = sext i32 %336 to i64, !dbg !3532
  %337 = load i64, ptr %rp706, align 8, !dbg !3533
  %le = icmp sle i64 %sext709, %337, !dbg !3532
  br label %and.phi710, !dbg !3532

and.phi710:                                       ; preds = %and.rhs708, %if.exit704
  %val711 = phi i1 [ false, %if.exit704 ], [ %le, %and.rhs708 ], !dbg !3532
  br i1 %val711, label %and.rhs712, label %and.phi714, !dbg !3532

and.rhs712:                                       ; preds = %and.phi710
  %338 = load i64, ptr %rp706, align 8, !dbg !3534
  %lt713 = icmp slt i64 %338, 18, !dbg !3534
  br label %and.phi714, !dbg !3534

and.phi714:                                       ; preds = %and.rhs712, %and.phi710
  %val715 = phi i1 [ false, %and.phi710 ], [ %lt713, %and.rhs712 ], !dbg !3534
  br i1 %val715, label %if.then716, label %if.exit792, !dbg !3534

if.then716:                                       ; preds = %and.phi714
  %339 = load i64, ptr %rp706, align 8, !dbg !3535
  %eq717 = icmp eq i64 %339, 9, !dbg !3535
  br i1 %eq717, label %if.then718, label %if.exit722, !dbg !3535

if.then718:                                       ; preds = %if.then716
  %340 = load i32, ptr %sign381, align 4, !dbg !3537
  %sifp719 = sitofp i32 %340 to double, !dbg !3537
  %341 = load i32, ptr %x385, align 4, !dbg !3538
  %uifp720 = uitofp i32 %341 to double, !dbg !3538
  %fmul721 = fmul double %sifp719, %uifp720, !dbg !3537
  store double %fmul721, ptr %blockret382, align 8, !dbg !3537
  br label %expr_block.exit1643, !dbg !3537

if.exit722:                                       ; preds = %if.then716
  %342 = load i64, ptr %rp706, align 8, !dbg !3539
  %lt723 = icmp slt i64 %342, 9, !dbg !3539
  br i1 %lt723, label %if.then724, label %if.exit750, !dbg !3539

if.then724:                                       ; preds = %if.exit722
  %343 = load i32, ptr %sign381, align 4, !dbg !3540
  %sifp725 = sitofp i32 %343 to double, !dbg !3540
  %344 = load i32, ptr %x385, align 4, !dbg !3541
  %uifp726 = uitofp i32 %344 to double, !dbg !3541
  %fmul727 = fmul double %sifp725, %uifp726, !dbg !3540
  %345 = load i64, ptr %rp706, align 8, !dbg !3542
  %sub728 = sub i64 8, %345, !dbg !3543
  %lt729 = icmp slt i64 %sub728, 0, !dbg !3543
  %346 = call i1 @llvm.expect.i1(i1 %lt729, i1 false), !dbg !3543
  br i1 %346, label %panic730, label %checkok735, !dbg !3543

checkok735:                                       ; preds = %if.then724
  %ge736 = icmp sge i64 %sub728, 8, !dbg !3543
  %347 = call i1 @llvm.expect.i1(i1 %ge736, i1 false), !dbg !3543
  br i1 %347, label %panic737, label %checkok744, !dbg !3543

checkok744:                                       ; preds = %checkok735
  %ptroffset745 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub728, !dbg !3543
  %348 = load i32, ptr %ptroffset745, align 4, !dbg !3543
  %sifp746 = sitofp i32 %348 to double, !dbg !3543
  %zero = fcmp ueq double %sifp746, 0.000000e+00, !dbg !3540
  %349 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !3540
  br i1 %349, label %panic747, label %checkok748, !dbg !3540

checkok748:                                       ; preds = %checkok744
  %fdiv749 = fdiv double %fmul727, %sifp746, !dbg !3540
  store double %fdiv749, ptr %blockret382, align 8, !dbg !3540
  br label %expr_block.exit1643, !dbg !3540

if.exit750:                                       ; preds = %if.exit722
  call void @llvm.dbg.declare(metadata ptr %bitlim, metadata !3544, metadata !DIExpression()), !dbg !3545
  %350 = load i64, ptr %rp706, align 8, !dbg !3546
  %sub751 = sub i64 %350, 9, !dbg !3547
  %trunc752 = trunc i64 %sub751 to i32, !dbg !3547
  %mul753 = mul i32 3, %trunc752, !dbg !3548
  %sub754 = sub i32 24, %mul753, !dbg !3549
  store i32 %sub754, ptr %bitlim, align 4, !dbg !3549
  %351 = load i32, ptr %bitlim, align 4, !dbg !3550
  %gt755 = icmp sgt i32 %351, 30, !dbg !3550
  br i1 %gt755, label %or.phi765, label %or.rhs756, !dbg !3550

or.rhs756:                                        ; preds = %if.exit750
  %352 = load i32, ptr %x385, align 4, !dbg !3551
  %353 = load i32, ptr %bitlim, align 4, !dbg !3552
  %shift_exceeds = icmp uge i32 %353, 32, !dbg !3553
  %354 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !3553
  br i1 %354, label %panic757, label %checkok762, !dbg !3553

checkok762:                                       ; preds = %or.rhs756
  %lshr763 = lshr i32 %352, %353, !dbg !3553
  %355 = freeze i32 %lshr763, !dbg !3553
  %eq764 = icmp eq i32 0, %355, !dbg !3553
  br label %or.phi765, !dbg !3553

or.phi765:                                        ; preds = %checkok762, %if.exit750
  %val766 = phi i1 [ true, %if.exit750 ], [ %eq764, %checkok762 ], !dbg !3553
  br i1 %val766, label %if.then767, label %if.exit791, !dbg !3553

if.then767:                                       ; preds = %or.phi765
  %356 = load i32, ptr %sign381, align 4, !dbg !3554
  %sifp768 = sitofp i32 %356 to double, !dbg !3554
  %357 = load i32, ptr %x385, align 4, !dbg !3555
  %uifp769 = uitofp i32 %357 to double, !dbg !3555
  %fmul770 = fmul double %sifp768, %uifp769, !dbg !3554
  %358 = load i64, ptr %rp706, align 8, !dbg !3556
  %sub771 = sub i64 %358, 10, !dbg !3556
  %lt772 = icmp slt i64 %sub771, 0, !dbg !3556
  %359 = call i1 @llvm.expect.i1(i1 %lt772, i1 false), !dbg !3556
  br i1 %359, label %panic773, label %checkok778, !dbg !3556

checkok778:                                       ; preds = %if.then767
  %ge779 = icmp sge i64 %sub771, 8, !dbg !3556
  %360 = call i1 @llvm.expect.i1(i1 %ge779, i1 false), !dbg !3556
  br i1 %360, label %panic780, label %checkok787, !dbg !3556

checkok787:                                       ; preds = %checkok778
  %ptroffset788 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub771, !dbg !3556
  %361 = load i32, ptr %ptroffset788, align 4, !dbg !3556
  %sifp789 = sitofp i32 %361 to double, !dbg !3556
  %fmul790 = fmul double %fmul770, %sifp789, !dbg !3554
  store double %fmul790, ptr %blockret382, align 8, !dbg !3554
  br label %expr_block.exit1643, !dbg !3554

if.exit791:                                       ; preds = %or.phi765
  br label %if.exit792, !dbg !3554

if.exit792:                                       ; preds = %if.exit791, %and.phi714
  %362 = load i64, ptr %rp706, align 8, !dbg !3557
  %smod = srem i64 %362, 9, !dbg !3557
  %intbool793 = icmp ne i64 %smod, 0, !dbg !3557
  br i1 %intbool793, label %if.then794, label %if.exit942, !dbg !3557

if.then794:                                       ; preds = %if.exit792
  call void @llvm.dbg.declare(metadata ptr %rpm9, metadata !3558, metadata !DIExpression()), !dbg !3560
  %363 = load i64, ptr %rp706, align 8, !dbg !3561
  %ge795 = icmp sge i64 %363, 0, !dbg !3561
  br i1 %ge795, label %cond.lhs, label %cond.rhs, !dbg !3561

cond.lhs:                                         ; preds = %if.then794
  %364 = load i64, ptr %rp706, align 8, !dbg !3562
  %smod796 = srem i64 %364, 9, !dbg !3562
  br label %cond.phi, !dbg !3562

cond.rhs:                                         ; preds = %if.then794
  %365 = load i64, ptr %rp706, align 8, !dbg !3563
  %smod797 = srem i64 %365, 9, !dbg !3563
  %add798 = add i64 %smod797, 9, !dbg !3563
  br label %cond.phi, !dbg !3563

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val799 = phi i64 [ %smod796, %cond.lhs ], [ %add798, %cond.rhs ], !dbg !3563
  store i64 %val799, ptr %rpm9, align 8, !dbg !3563
  call void @llvm.dbg.declare(metadata ptr %p10, metadata !3564, metadata !DIExpression()), !dbg !3565
  %366 = load i64, ptr %rpm9, align 8, !dbg !3566
  %sub800 = sub i64 8, %366, !dbg !3567
  %lt801 = icmp slt i64 %sub800, 0, !dbg !3567
  %367 = call i1 @llvm.expect.i1(i1 %lt801, i1 false), !dbg !3567
  br i1 %367, label %panic802, label %checkok807, !dbg !3567

checkok807:                                       ; preds = %cond.phi
  %ge808 = icmp sge i64 %sub800, 8, !dbg !3567
  %368 = call i1 @llvm.expect.i1(i1 %ge808, i1 false), !dbg !3567
  br i1 %368, label %panic809, label %checkok816, !dbg !3567

checkok816:                                       ; preds = %checkok807
  %ptroffset817 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub800, !dbg !3567
  %369 = load i32, ptr %ptroffset817, align 4, !dbg !3567
  store i32 %369, ptr %p10, align 4, !dbg !3567
  call void @llvm.dbg.declare(metadata ptr %carry, metadata !3568, metadata !DIExpression()), !dbg !3569
  store i32 0, ptr %carry, align 4, !dbg !3570
  %370 = load i32, ptr %a, align 4, !dbg !3571
  store i32 %370, ptr %k, align 4, !dbg !3571
  br label %loop.cond818, !dbg !3571

loop.cond818:                                     ; preds = %if.exit915, %checkok816
  %371 = load i32, ptr %k, align 4, !dbg !3573
  %372 = load i32, ptr %z, align 4, !dbg !3574
  %neq819 = icmp ne i32 %371, %372, !dbg !3573
  br i1 %neq819, label %loop.body820, label %loop.exit917, !dbg !3573

loop.body820:                                     ; preds = %loop.cond818
  call void @llvm.dbg.declare(metadata ptr %tmp, metadata !3575, metadata !DIExpression()), !dbg !3577
  %373 = load i32, ptr %k, align 4, !dbg !3578
  %sext821 = sext i32 %373 to i64, !dbg !3578
  %lt822 = icmp slt i64 %sext821, 0, !dbg !3578
  %374 = call i1 @llvm.expect.i1(i1 %lt822, i1 false), !dbg !3578
  br i1 %374, label %panic823, label %checkok828, !dbg !3578

checkok828:                                       ; preds = %loop.body820
  %ge829 = icmp sge i64 %sext821, 128, !dbg !3578
  %375 = call i1 @llvm.expect.i1(i1 %ge829, i1 false), !dbg !3578
  br i1 %375, label %panic830, label %checkok837, !dbg !3578

checkok837:                                       ; preds = %checkok828
  %ptroffset838 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext821, !dbg !3578
  %376 = load i32, ptr %ptroffset838, align 4, !dbg !3578
  %377 = load i32, ptr %p10, align 4, !dbg !3579
  %zero839 = icmp eq i32 %377, 0, !dbg !3580
  %378 = call i1 @llvm.expect.i1(i1 %zero839, i1 false), !dbg !3580
  br i1 %378, label %panic840, label %checkok841, !dbg !3580

checkok841:                                       ; preds = %checkok837
  %smod842 = srem i32 %376, %377, !dbg !3580
  store i32 %smod842, ptr %tmp, align 4, !dbg !3580
  %379 = load i32, ptr %k, align 4, !dbg !3581
  %sext843 = sext i32 %379 to i64, !dbg !3581
  %lt844 = icmp slt i64 %sext843, 0, !dbg !3581
  %380 = call i1 @llvm.expect.i1(i1 %lt844, i1 false), !dbg !3581
  br i1 %380, label %panic845, label %checkok850, !dbg !3581

checkok850:                                       ; preds = %checkok841
  %ge851 = icmp sge i64 %sext843, 128, !dbg !3581
  %381 = call i1 @llvm.expect.i1(i1 %ge851, i1 false), !dbg !3581
  br i1 %381, label %panic852, label %checkok859, !dbg !3581

checkok859:                                       ; preds = %checkok850
  %ptroffset860 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext843, !dbg !3581
  %382 = load i32, ptr %k, align 4, !dbg !3582
  %sext861 = sext i32 %382 to i64, !dbg !3582
  %lt862 = icmp slt i64 %sext861, 0, !dbg !3582
  %383 = call i1 @llvm.expect.i1(i1 %lt862, i1 false), !dbg !3582
  br i1 %383, label %panic863, label %checkok868, !dbg !3582

checkok868:                                       ; preds = %checkok859
  %ge869 = icmp sge i64 %sext861, 128, !dbg !3582
  %384 = call i1 @llvm.expect.i1(i1 %ge869, i1 false), !dbg !3582
  br i1 %384, label %panic870, label %checkok877, !dbg !3582

checkok877:                                       ; preds = %checkok868
  %ptroffset878 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext861, !dbg !3582
  %385 = load i32, ptr %ptroffset878, align 4, !dbg !3582
  %386 = load i32, ptr %p10, align 4, !dbg !3583
  %zero879 = icmp eq i32 %386, 0, !dbg !3584
  %387 = call i1 @llvm.expect.i1(i1 %zero879, i1 false), !dbg !3584
  br i1 %387, label %panic880, label %checkok881, !dbg !3584

checkok881:                                       ; preds = %checkok877
  %sdiv = sdiv i32 %385, %386, !dbg !3584
  %388 = load i32, ptr %carry, align 4, !dbg !3585
  %add882 = add i32 %sdiv, %388, !dbg !3584
  store i32 %add882, ptr %ptroffset860, align 4, !dbg !3584
  %389 = load i32, ptr %p10, align 4, !dbg !3586
  %zero883 = icmp eq i32 %389, 0, !dbg !3587
  %390 = call i1 @llvm.expect.i1(i1 %zero883, i1 false), !dbg !3587
  br i1 %390, label %panic884, label %checkok885, !dbg !3587

checkok885:                                       ; preds = %checkok881
  %sdiv886 = sdiv i32 1000000000, %389, !dbg !3587
  %391 = load i32, ptr %tmp, align 4, !dbg !3588
  %mul887 = mul i32 %sdiv886, %391, !dbg !3587
  store i32 %mul887, ptr %carry, align 4, !dbg !3587
  %392 = load i32, ptr %k, align 4, !dbg !3589
  %393 = load i32, ptr %a, align 4, !dbg !3590
  %eq888 = icmp eq i32 %392, %393, !dbg !3589
  br i1 %eq888, label %and.rhs889, label %and.phi909, !dbg !3589

and.rhs889:                                       ; preds = %checkok885
  %394 = load i32, ptr %k, align 4, !dbg !3591
  %sext890 = sext i32 %394 to i64, !dbg !3591
  %lt891 = icmp slt i64 %sext890, 0, !dbg !3591
  %395 = call i1 @llvm.expect.i1(i1 %lt891, i1 false), !dbg !3591
  br i1 %395, label %panic892, label %checkok897, !dbg !3591

checkok897:                                       ; preds = %and.rhs889
  %ge898 = icmp sge i64 %sext890, 128, !dbg !3591
  %396 = call i1 @llvm.expect.i1(i1 %ge898, i1 false), !dbg !3591
  br i1 %396, label %panic899, label %checkok906, !dbg !3591

checkok906:                                       ; preds = %checkok897
  %ptroffset907 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext890, !dbg !3591
  %397 = load i32, ptr %ptroffset907, align 4, !dbg !3591
  %not908 = icmp eq i32 %397, 0, !dbg !3591
  br label %and.phi909, !dbg !3591

and.phi909:                                       ; preds = %checkok906, %checkok885
  %val910 = phi i1 [ false, %checkok885 ], [ %not908, %checkok906 ], !dbg !3591
  br i1 %val910, label %if.then911, label %if.exit915, !dbg !3591

if.then911:                                       ; preds = %and.phi909
  %398 = load i32, ptr %a, align 4, !dbg !3592
  %add912 = add i32 %398, 1, !dbg !3592
  %and913 = and i32 %add912, 127, !dbg !3592
  store i32 %and913, ptr %a, align 4, !dbg !3592
  %399 = load i64, ptr %rp706, align 8, !dbg !3594
  %sub914 = sub i64 %399, 9, !dbg !3594
  store i64 %sub914, ptr %rp706, align 8, !dbg !3594
  br label %if.exit915, !dbg !3594

if.exit915:                                       ; preds = %if.then911, %and.phi909
  %400 = load i32, ptr %k, align 4, !dbg !3595
  %add916 = add i32 %400, 1, !dbg !3595
  store i32 %add916, ptr %k, align 4, !dbg !3595
  br label %loop.cond818, !dbg !3595

loop.exit917:                                     ; preds = %loop.cond818
  %401 = load i32, ptr %carry, align 4, !dbg !3596
  %intbool918 = icmp ne i32 %401, 0, !dbg !3596
  br i1 %intbool918, label %if.then919, label %if.exit939, !dbg !3596

if.then919:                                       ; preds = %loop.exit917
  %402 = load i32, ptr %z, align 4, !dbg !3597
  %add920 = add i32 %402, 1, !dbg !3597
  store i32 %add920, ptr %z, align 4, !dbg !3597
  %sext921 = sext i32 %402 to i64, !dbg !3597
  %lt922 = icmp slt i64 %sext921, 0, !dbg !3597
  %403 = call i1 @llvm.expect.i1(i1 %lt922, i1 false), !dbg !3597
  br i1 %403, label %panic923, label %checkok928, !dbg !3597

checkok928:                                       ; preds = %if.then919
  %ge929 = icmp sge i64 %sext921, 128, !dbg !3597
  %404 = call i1 @llvm.expect.i1(i1 %ge929, i1 false), !dbg !3597
  br i1 %404, label %panic930, label %checkok937, !dbg !3597

checkok937:                                       ; preds = %checkok928
  %ptroffset938 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext921, !dbg !3597
  %405 = load i32, ptr %carry, align 4, !dbg !3598
  store i32 %405, ptr %ptroffset938, align 4, !dbg !3598
  br label %if.exit939, !dbg !3598

if.exit939:                                       ; preds = %checkok937, %loop.exit917
  %406 = load i64, ptr %rp706, align 8, !dbg !3599
  %407 = load i64, ptr %rpm9, align 8, !dbg !3600
  %sub940 = sub i64 9, %407, !dbg !3601
  %add941 = add i64 %406, %sub940, !dbg !3599
  store i64 %add941, ptr %rp706, align 8, !dbg !3599
  br label %if.exit942, !dbg !3599

if.exit942:                                       ; preds = %if.exit939, %if.exit792
  br label %loop.cond943, !dbg !3602

loop.cond943:                                     ; preds = %if.exit1148, %if.exit942
  %408 = load i64, ptr %rp706, align 8, !dbg !3603
  %lt944 = icmp slt i64 %408, 18, !dbg !3603
  br i1 %lt944, label %or.phi969, label %or.rhs945, !dbg !3603

or.rhs945:                                        ; preds = %loop.cond943
  %409 = load i64, ptr %rp706, align 8, !dbg !3605
  %eq946 = icmp eq i64 %409, 18, !dbg !3605
  br i1 %eq946, label %and.rhs947, label %and.phi967, !dbg !3605

and.rhs947:                                       ; preds = %or.rhs945
  %410 = load i32, ptr %a, align 4, !dbg !3606
  %sext948 = sext i32 %410 to i64, !dbg !3606
  %lt949 = icmp slt i64 %sext948, 0, !dbg !3606
  %411 = call i1 @llvm.expect.i1(i1 %lt949, i1 false), !dbg !3606
  br i1 %411, label %panic950, label %checkok955, !dbg !3606

checkok955:                                       ; preds = %and.rhs947
  %ge956 = icmp sge i64 %sext948, 128, !dbg !3606
  %412 = call i1 @llvm.expect.i1(i1 %ge956, i1 false), !dbg !3606
  br i1 %412, label %panic957, label %checkok964, !dbg !3606

checkok964:                                       ; preds = %checkok955
  %ptroffset965 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext948, !dbg !3606
  %413 = load i32, ptr %ptroffset965, align 4, !dbg !3606
  %lt966 = icmp ult i32 %413, 9007199, !dbg !3607
  br label %and.phi967, !dbg !3607

and.phi967:                                       ; preds = %checkok964, %or.rhs945
  %val968 = phi i1 [ false, %or.rhs945 ], [ %lt966, %checkok964 ], !dbg !3607
  br label %or.phi969, !dbg !3607

or.phi969:                                        ; preds = %and.phi967, %loop.cond943
  %val970 = phi i1 [ true, %loop.cond943 ], [ %val968, %and.phi967 ], !dbg !3607
  br i1 %val970, label %loop.body971, label %loop.exit1149, !dbg !3607

loop.body971:                                     ; preds = %or.phi969
  call void @llvm.dbg.declare(metadata ptr %carry972, metadata !3608, metadata !DIExpression()), !dbg !3610
  store i32 0, ptr %carry972, align 4, !dbg !3611
  %414 = load i32, ptr %e2705, align 4, !dbg !3612
  %sub973 = sub i32 %414, 29, !dbg !3612
  store i32 %sub973, ptr %e2705, align 4, !dbg !3612
  %415 = load i32, ptr %z, align 4, !dbg !3613
  %sub974 = sub i32 %415, 1, !dbg !3613
  %and975 = and i32 %sub974, 127, !dbg !3613
  store i32 %and975, ptr %k, align 4, !dbg !3613
  br label %loop.body976, !dbg !3613

loop.body976:                                     ; preds = %if.exit1077, %loop.body971
  call void @llvm.dbg.declare(metadata ptr %tmp977, metadata !3615, metadata !DIExpression()), !dbg !3617
  %416 = load i32, ptr %k, align 4, !dbg !3618
  %sext978 = sext i32 %416 to i64, !dbg !3618
  %lt979 = icmp slt i64 %sext978, 0, !dbg !3618
  %417 = call i1 @llvm.expect.i1(i1 %lt979, i1 false), !dbg !3618
  br i1 %417, label %panic980, label %checkok985, !dbg !3618

checkok985:                                       ; preds = %loop.body976
  %ge986 = icmp sge i64 %sext978, 128, !dbg !3618
  %418 = call i1 @llvm.expect.i1(i1 %ge986, i1 false), !dbg !3618
  br i1 %418, label %panic987, label %checkok994, !dbg !3618

checkok994:                                       ; preds = %checkok985
  %ptroffset995 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext978, !dbg !3618
  %419 = load i32, ptr %ptroffset995, align 4, !dbg !3618
  %zext996 = zext i32 %419 to i64, !dbg !3618
  %shl = shl i64 %zext996, 29, !dbg !3619
  %420 = freeze i64 %shl, !dbg !3619
  %421 = load i32, ptr %carry972, align 4, !dbg !3620
  %zext997 = zext i32 %421 to i64, !dbg !3620
  %add998 = add i64 %420, %zext997, !dbg !3619
  store i64 %add998, ptr %tmp977, align 8, !dbg !3619
  %422 = load i64, ptr %tmp977, align 8, !dbg !3621
  %lt999 = icmp ult i64 1000000000, %422, !dbg !3621
  br i1 %lt999, label %if.then1000, label %if.else1023, !dbg !3621

if.then1000:                                      ; preds = %checkok994
  %423 = load i64, ptr %tmp977, align 8, !dbg !3622
  %sdiv1001 = sdiv i64 %423, 1000000000, !dbg !3624
  %trunc1002 = trunc i64 %sdiv1001 to i32, !dbg !3624
  store i32 %trunc1002, ptr %carry972, align 4, !dbg !3624
  %424 = load i32, ptr %k, align 4, !dbg !3625
  %sext1003 = sext i32 %424 to i64, !dbg !3625
  %lt1004 = icmp slt i64 %sext1003, 0, !dbg !3625
  %425 = call i1 @llvm.expect.i1(i1 %lt1004, i1 false), !dbg !3625
  br i1 %425, label %panic1005, label %checkok1010, !dbg !3625

checkok1010:                                      ; preds = %if.then1000
  %ge1011 = icmp sge i64 %sext1003, 128, !dbg !3625
  %426 = call i1 @llvm.expect.i1(i1 %ge1011, i1 false), !dbg !3625
  br i1 %426, label %panic1012, label %checkok1019, !dbg !3625

checkok1019:                                      ; preds = %checkok1010
  %ptroffset1020 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1003, !dbg !3625
  %427 = load i64, ptr %tmp977, align 8, !dbg !3626
  %smod1021 = srem i64 %427, 1000000000, !dbg !3627
  %trunc1022 = trunc i64 %smod1021 to i32, !dbg !3627
  store i32 %trunc1022, ptr %ptroffset1020, align 4, !dbg !3627
  br label %if.exit1043, !dbg !3627

if.else1023:                                      ; preds = %checkok994
  store i32 0, ptr %carry972, align 4, !dbg !3628
  %428 = load i32, ptr %k, align 4, !dbg !3630
  %sext1024 = sext i32 %428 to i64, !dbg !3630
  %lt1025 = icmp slt i64 %sext1024, 0, !dbg !3630
  %429 = call i1 @llvm.expect.i1(i1 %lt1025, i1 false), !dbg !3630
  br i1 %429, label %panic1026, label %checkok1031, !dbg !3630

checkok1031:                                      ; preds = %if.else1023
  %ge1032 = icmp sge i64 %sext1024, 128, !dbg !3630
  %430 = call i1 @llvm.expect.i1(i1 %ge1032, i1 false), !dbg !3630
  br i1 %430, label %panic1033, label %checkok1040, !dbg !3630

checkok1040:                                      ; preds = %checkok1031
  %ptroffset1041 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1024, !dbg !3630
  %431 = load i64, ptr %tmp977, align 8, !dbg !3631
  %trunc1042 = trunc i64 %431 to i32, !dbg !3631
  store i32 %trunc1042, ptr %ptroffset1041, align 4, !dbg !3631
  br label %if.exit1043, !dbg !3631

if.exit1043:                                      ; preds = %checkok1040, %checkok1019
  %432 = load i32, ptr %k, align 4, !dbg !3632
  %433 = load i32, ptr %z, align 4, !dbg !3633
  %sub1044 = sub i32 %433, 1, !dbg !3633
  %and1045 = and i32 %sub1044, 127, !dbg !3633
  %eq1046 = icmp eq i32 %432, %and1045, !dbg !3632
  br i1 %eq1046, label %and.rhs1047, label %and.phi1049, !dbg !3632

and.rhs1047:                                      ; preds = %if.exit1043
  %434 = load i32, ptr %k, align 4, !dbg !3634
  %435 = load i32, ptr %a, align 4, !dbg !3635
  %neq1048 = icmp ne i32 %434, %435, !dbg !3634
  br label %and.phi1049, !dbg !3634

and.phi1049:                                      ; preds = %and.rhs1047, %if.exit1043
  %val1050 = phi i1 [ false, %if.exit1043 ], [ %neq1048, %and.rhs1047 ], !dbg !3634
  br i1 %val1050, label %and.rhs1051, label %and.phi1071, !dbg !3634

and.rhs1051:                                      ; preds = %and.phi1049
  %436 = load i32, ptr %k, align 4, !dbg !3636
  %sext1052 = sext i32 %436 to i64, !dbg !3636
  %lt1053 = icmp slt i64 %sext1052, 0, !dbg !3636
  %437 = call i1 @llvm.expect.i1(i1 %lt1053, i1 false), !dbg !3636
  br i1 %437, label %panic1054, label %checkok1059, !dbg !3636

checkok1059:                                      ; preds = %and.rhs1051
  %ge1060 = icmp sge i64 %sext1052, 128, !dbg !3636
  %438 = call i1 @llvm.expect.i1(i1 %ge1060, i1 false), !dbg !3636
  br i1 %438, label %panic1061, label %checkok1068, !dbg !3636

checkok1068:                                      ; preds = %checkok1059
  %ptroffset1069 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1052, !dbg !3636
  %439 = load i32, ptr %ptroffset1069, align 4, !dbg !3636
  %not1070 = icmp eq i32 %439, 0, !dbg !3636
  br label %and.phi1071, !dbg !3636

and.phi1071:                                      ; preds = %checkok1068, %and.phi1049
  %val1072 = phi i1 [ false, %and.phi1049 ], [ %not1070, %checkok1068 ], !dbg !3636
  br i1 %val1072, label %if.then1073, label %if.exit1074, !dbg !3636

if.then1073:                                      ; preds = %and.phi1071
  %440 = load i32, ptr %k, align 4, !dbg !3637
  store i32 %440, ptr %z, align 4, !dbg !3637
  br label %if.exit1074, !dbg !3637

if.exit1074:                                      ; preds = %if.then1073, %and.phi1071
  %441 = load i32, ptr %k, align 4, !dbg !3638
  %442 = load i32, ptr %a, align 4, !dbg !3639
  %eq1075 = icmp eq i32 %441, %442, !dbg !3638
  br i1 %eq1075, label %if.then1076, label %if.exit1077, !dbg !3638

if.then1076:                                      ; preds = %if.exit1074
  br label %loop.exit1080, !dbg !3640

if.exit1077:                                      ; preds = %if.exit1074
  %443 = load i32, ptr %k, align 4, !dbg !3641
  %sub1078 = sub i32 %443, 1, !dbg !3641
  %and1079 = and i32 %sub1078, 127, !dbg !3641
  store i32 %and1079, ptr %k, align 4, !dbg !3641
  br label %loop.body976, !dbg !3641

loop.exit1080:                                    ; preds = %if.then1076
  %444 = load i32, ptr %carry972, align 4, !dbg !3642
  %intbool1081 = icmp ne i32 %444, 0, !dbg !3642
  br i1 %intbool1081, label %if.then1082, label %if.exit1148, !dbg !3642

if.then1082:                                      ; preds = %loop.exit1080
  %445 = load i64, ptr %rp706, align 8, !dbg !3643
  %add1083 = add i64 %445, 9, !dbg !3643
  store i64 %add1083, ptr %rp706, align 8, !dbg !3643
  %446 = load i32, ptr %a, align 4, !dbg !3645
  %sub1084 = sub i32 %446, 1, !dbg !3645
  %and1085 = and i32 %sub1084, 127, !dbg !3645
  store i32 %and1085, ptr %a, align 4, !dbg !3645
  %447 = load i32, ptr %a, align 4, !dbg !3646
  %448 = load i32, ptr %z, align 4, !dbg !3647
  %eq1086 = icmp eq i32 %447, %448, !dbg !3646
  br i1 %eq1086, label %if.then1087, label %if.exit1129, !dbg !3646

if.then1087:                                      ; preds = %if.then1082
  %449 = load i32, ptr %z, align 4, !dbg !3648
  %sub1088 = sub i32 %449, 1, !dbg !3648
  %and1089 = and i32 %sub1088, 127, !dbg !3648
  store i32 %and1089, ptr %z, align 4, !dbg !3648
  %450 = load i32, ptr %z, align 4, !dbg !3650
  %sub1090 = sub i32 %450, 1, !dbg !3650
  %and1091 = and i32 %sub1090, 127, !dbg !3650
  %sext1092 = sext i32 %and1091 to i64, !dbg !3650
  %lt1093 = icmp slt i64 %sext1092, 0, !dbg !3650
  %451 = call i1 @llvm.expect.i1(i1 %lt1093, i1 false), !dbg !3650
  br i1 %451, label %panic1094, label %checkok1099, !dbg !3650

checkok1099:                                      ; preds = %if.then1087
  %ge1100 = icmp sge i64 %sext1092, 128, !dbg !3650
  %452 = call i1 @llvm.expect.i1(i1 %ge1100, i1 false), !dbg !3650
  br i1 %452, label %panic1101, label %checkok1108, !dbg !3650

checkok1108:                                      ; preds = %checkok1099
  %ptroffset1109 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1092, !dbg !3650
  %453 = load i32, ptr %ptroffset1109, align 4, !dbg !3650
  %454 = load i32, ptr %z, align 4, !dbg !3651
  %sext1110 = sext i32 %454 to i64, !dbg !3651
  %lt1111 = icmp slt i64 %sext1110, 0, !dbg !3651
  %455 = call i1 @llvm.expect.i1(i1 %lt1111, i1 false), !dbg !3651
  br i1 %455, label %panic1112, label %checkok1117, !dbg !3651

checkok1117:                                      ; preds = %checkok1108
  %ge1118 = icmp sge i64 %sext1110, 128, !dbg !3651
  %456 = call i1 @llvm.expect.i1(i1 %ge1118, i1 false), !dbg !3651
  br i1 %456, label %panic1119, label %checkok1126, !dbg !3651

checkok1126:                                      ; preds = %checkok1117
  %ptroffset1127 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1110, !dbg !3651
  %457 = load i32, ptr %ptroffset1127, align 4, !dbg !3651
  %or1128 = or i32 %453, %457, !dbg !3652
  store i32 %or1128, ptr %ptroffset1109, align 4, !dbg !3652
  br label %if.exit1129, !dbg !3652

if.exit1129:                                      ; preds = %checkok1126, %if.then1082
  %458 = load i32, ptr %a, align 4, !dbg !3653
  %sext1130 = sext i32 %458 to i64, !dbg !3653
  %lt1131 = icmp slt i64 %sext1130, 0, !dbg !3653
  %459 = call i1 @llvm.expect.i1(i1 %lt1131, i1 false), !dbg !3653
  br i1 %459, label %panic1132, label %checkok1137, !dbg !3653

checkok1137:                                      ; preds = %if.exit1129
  %ge1138 = icmp sge i64 %sext1130, 128, !dbg !3653
  %460 = call i1 @llvm.expect.i1(i1 %ge1138, i1 false), !dbg !3653
  br i1 %460, label %panic1139, label %checkok1146, !dbg !3653

checkok1146:                                      ; preds = %checkok1137
  %ptroffset1147 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1130, !dbg !3653
  %461 = load i32, ptr %carry972, align 4, !dbg !3654
  store i32 %461, ptr %ptroffset1147, align 4, !dbg !3654
  br label %if.exit1148, !dbg !3654

if.exit1148:                                      ; preds = %checkok1146, %loop.exit1080
  br label %loop.cond943, !dbg !3654

loop.exit1149:                                    ; preds = %or.phi969
  br label %loop.body1150, !dbg !3655

loop.body1150:                                    ; preds = %if.exit1433, %loop.exit1149
  call void @llvm.dbg.declare(metadata ptr %carry1151, metadata !3656, metadata !DIExpression()), !dbg !3659
  store i32 0, ptr %carry1151, align 4, !dbg !3660
  call void @llvm.dbg.declare(metadata ptr %sh, metadata !3661, metadata !DIExpression()), !dbg !3662
  store i32 1, ptr %sh, align 4, !dbg !3663
  call void @llvm.dbg.declare(metadata ptr %i, metadata !3664, metadata !DIExpression()), !dbg !3665
  store i32 0, ptr %i, align 4, !dbg !3665
  store i32 0, ptr %i, align 4, !dbg !3666
  br label %loop.cond1152, !dbg !3666

loop.cond1152:                                    ; preds = %if.exit1240, %loop.body1150
  %462 = load i32, ptr %i, align 4, !dbg !3668
  %lt1153 = icmp slt i32 %462, 2, !dbg !3668
  br i1 %lt1153, label %loop.body1154, label %loop.exit1242, !dbg !3668

loop.body1154:                                    ; preds = %loop.cond1152
  %463 = load i32, ptr %a, align 4, !dbg !3669
  %464 = load i32, ptr %i, align 4, !dbg !3671
  %add1155 = add i32 %463, %464, !dbg !3669
  %and1156 = and i32 %add1155, 127, !dbg !3669
  store i32 %and1156, ptr %k, align 4, !dbg !3669
  %465 = load i32, ptr %k, align 4, !dbg !3672
  %466 = load i32, ptr %z, align 4, !dbg !3673
  %eq1157 = icmp eq i32 %465, %466, !dbg !3672
  br i1 %eq1157, label %or.phi1196, label %or.rhs1158, !dbg !3672

or.rhs1158:                                       ; preds = %loop.body1154
  %467 = load i32, ptr %k, align 4, !dbg !3674
  %sext1159 = sext i32 %467 to i64, !dbg !3674
  %lt1160 = icmp slt i64 %sext1159, 0, !dbg !3674
  %468 = call i1 @llvm.expect.i1(i1 %lt1160, i1 false), !dbg !3674
  br i1 %468, label %panic1161, label %checkok1166, !dbg !3674

checkok1166:                                      ; preds = %or.rhs1158
  %ge1167 = icmp sge i64 %sext1159, 128, !dbg !3674
  %469 = call i1 @llvm.expect.i1(i1 %ge1167, i1 false), !dbg !3674
  br i1 %469, label %panic1168, label %checkok1175, !dbg !3674

checkok1175:                                      ; preds = %checkok1166
  %ptroffset1176 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1159, !dbg !3674
  %470 = load i32, ptr %ptroffset1176, align 4, !dbg !3674
  %471 = load i32, ptr %i, align 4, !dbg !3675
  %sext1177 = sext i32 %471 to i64, !dbg !3675
  %lt1178 = icmp slt i64 %sext1177, 0, !dbg !3675
  %472 = call i1 @llvm.expect.i1(i1 %lt1178, i1 false), !dbg !3675
  br i1 %472, label %panic1179, label %checkok1184, !dbg !3675

checkok1184:                                      ; preds = %checkok1175
  %ge1185 = icmp sge i64 %sext1177, 2, !dbg !3675
  %473 = call i1 @llvm.expect.i1(i1 %ge1185, i1 false), !dbg !3675
  br i1 %473, label %panic1186, label %checkok1193, !dbg !3675

checkok1193:                                      ; preds = %checkok1184
  %ptroffset1194 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1177, !dbg !3675
  %474 = load i32, ptr %ptroffset1194, align 4, !dbg !3675
  %lt1195 = icmp ult i32 %470, %474, !dbg !3676
  br label %or.phi1196, !dbg !3676

or.phi1196:                                       ; preds = %checkok1193, %loop.body1154
  %val1197 = phi i1 [ true, %loop.body1154 ], [ %lt1195, %checkok1193 ], !dbg !3676
  br i1 %val1197, label %if.then1198, label %if.exit1199, !dbg !3676

if.then1198:                                      ; preds = %or.phi1196
  store i32 2, ptr %i, align 4, !dbg !3677
  br label %loop.exit1242, !dbg !3679

if.exit1199:                                      ; preds = %or.phi1196
  %475 = load i32, ptr %a, align 4, !dbg !3680
  %476 = load i32, ptr %i, align 4, !dbg !3681
  %add1200 = add i32 %475, %476, !dbg !3680
  %and1201 = and i32 %add1200, 127, !dbg !3680
  %sext1202 = sext i32 %and1201 to i64, !dbg !3680
  %lt1203 = icmp slt i64 %sext1202, 0, !dbg !3680
  %477 = call i1 @llvm.expect.i1(i1 %lt1203, i1 false), !dbg !3680
  br i1 %477, label %panic1204, label %checkok1209, !dbg !3680

checkok1209:                                      ; preds = %if.exit1199
  %ge1210 = icmp sge i64 %sext1202, 128, !dbg !3680
  %478 = call i1 @llvm.expect.i1(i1 %ge1210, i1 false), !dbg !3680
  br i1 %478, label %panic1211, label %checkok1218, !dbg !3680

checkok1218:                                      ; preds = %checkok1209
  %ptroffset1219 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1202, !dbg !3680
  %479 = load i32, ptr %ptroffset1219, align 4, !dbg !3680
  %480 = load i32, ptr %i, align 4, !dbg !3682
  %sext1220 = sext i32 %480 to i64, !dbg !3682
  %lt1221 = icmp slt i64 %sext1220, 0, !dbg !3682
  %481 = call i1 @llvm.expect.i1(i1 %lt1221, i1 false), !dbg !3682
  br i1 %481, label %panic1222, label %checkok1227, !dbg !3682

checkok1227:                                      ; preds = %checkok1218
  %ge1228 = icmp sge i64 %sext1220, 2, !dbg !3682
  %482 = call i1 @llvm.expect.i1(i1 %ge1228, i1 false), !dbg !3682
  br i1 %482, label %panic1229, label %checkok1236, !dbg !3682

checkok1236:                                      ; preds = %checkok1227
  %ptroffset1237 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1220, !dbg !3682
  %483 = load i32, ptr %ptroffset1237, align 4, !dbg !3682
  %gt1238 = icmp ugt i32 %479, %483, !dbg !3683
  br i1 %gt1238, label %if.then1239, label %if.exit1240, !dbg !3683

if.then1239:                                      ; preds = %checkok1236
  br label %loop.exit1242, !dbg !3684

if.exit1240:                                      ; preds = %checkok1236
  %484 = load i32, ptr %i, align 4, !dbg !3685
  %add1241 = add i32 %484, 1, !dbg !3685
  store i32 %add1241, ptr %i, align 4, !dbg !3685
  br label %loop.cond1152, !dbg !3685

loop.exit1242:                                    ; preds = %if.then1239, %if.then1198, %loop.cond1152
  %485 = load i32, ptr %i, align 4, !dbg !3686
  %eq1243 = icmp eq i32 %485, 2, !dbg !3686
  br i1 %eq1243, label %and.rhs1244, label %and.phi1246, !dbg !3686

and.rhs1244:                                      ; preds = %loop.exit1242
  %486 = load i64, ptr %rp706, align 8, !dbg !3687
  %eq1245 = icmp eq i64 %486, 18, !dbg !3687
  br label %and.phi1246, !dbg !3687

and.phi1246:                                      ; preds = %and.rhs1244, %loop.exit1242
  %val1247 = phi i1 [ false, %loop.exit1242 ], [ %eq1245, %and.rhs1244 ], !dbg !3687
  br i1 %val1247, label %if.then1248, label %if.exit1249, !dbg !3687

if.then1248:                                      ; preds = %and.phi1246
  br label %loop.exit1434, !dbg !3688

if.exit1249:                                      ; preds = %and.phi1246
  %487 = load i64, ptr %rp706, align 8, !dbg !3689
  %gt1250 = icmp sgt i64 %487, 27, !dbg !3689
  br i1 %gt1250, label %if.then1251, label %if.exit1252, !dbg !3689

if.then1251:                                      ; preds = %if.exit1249
  store i32 9, ptr %sh, align 4, !dbg !3690
  br label %if.exit1252, !dbg !3690

if.exit1252:                                      ; preds = %if.then1251, %if.exit1249
  %488 = load i32, ptr %e2705, align 4, !dbg !3691
  %489 = load i32, ptr %sh, align 4, !dbg !3692
  %add1253 = add i32 %488, %489, !dbg !3691
  store i32 %add1253, ptr %e2705, align 4, !dbg !3691
  %490 = load i32, ptr %a, align 4, !dbg !3693
  store i32 %490, ptr %k, align 4, !dbg !3693
  br label %loop.cond1254, !dbg !3693

loop.cond1254:                                    ; preds = %if.exit1380, %if.exit1252
  %491 = load i32, ptr %k, align 4, !dbg !3695
  %492 = load i32, ptr %z, align 4, !dbg !3696
  %neq1255 = icmp ne i32 %491, %492, !dbg !3695
  br i1 %neq1255, label %loop.body1256, label %loop.exit1383, !dbg !3695

loop.body1256:                                    ; preds = %loop.cond1254
  call void @llvm.dbg.declare(metadata ptr %tmp1257, metadata !3697, metadata !DIExpression()), !dbg !3699
  %493 = load i32, ptr %k, align 4, !dbg !3700
  %sext1258 = sext i32 %493 to i64, !dbg !3700
  %lt1259 = icmp slt i64 %sext1258, 0, !dbg !3700
  %494 = call i1 @llvm.expect.i1(i1 %lt1259, i1 false), !dbg !3700
  br i1 %494, label %panic1260, label %checkok1265, !dbg !3700

checkok1265:                                      ; preds = %loop.body1256
  %ge1266 = icmp sge i64 %sext1258, 128, !dbg !3700
  %495 = call i1 @llvm.expect.i1(i1 %ge1266, i1 false), !dbg !3700
  br i1 %495, label %panic1267, label %checkok1274, !dbg !3700

checkok1274:                                      ; preds = %checkok1265
  %ptroffset1275 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1258, !dbg !3700
  %496 = load i32, ptr %ptroffset1275, align 4, !dbg !3700
  %497 = load i32, ptr %sh, align 4, !dbg !3701
  %shift_underflow = icmp slt i32 %497, 0, !dbg !3702
  %498 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !3702
  br i1 %498, label %panic1276, label %checkok1281, !dbg !3702

checkok1281:                                      ; preds = %checkok1274
  %shift_exceeds1282 = icmp sge i32 %497, 32, !dbg !3702
  %499 = call i1 @llvm.expect.i1(i1 %shift_exceeds1282, i1 false), !dbg !3702
  br i1 %499, label %panic1283, label %checkok1288, !dbg !3702

checkok1288:                                      ; preds = %checkok1281
  %shl1289 = shl i32 1, %497, !dbg !3702
  %500 = freeze i32 %shl1289, !dbg !3702
  %sub1290 = sub i32 %500, 1, !dbg !3702
  %and1291 = and i32 %496, %sub1290, !dbg !3703
  store i32 %and1291, ptr %tmp1257, align 4, !dbg !3703
  %501 = load i32, ptr %k, align 4, !dbg !3704
  %sext1292 = sext i32 %501 to i64, !dbg !3704
  %lt1293 = icmp slt i64 %sext1292, 0, !dbg !3704
  %502 = call i1 @llvm.expect.i1(i1 %lt1293, i1 false), !dbg !3704
  br i1 %502, label %panic1294, label %checkok1299, !dbg !3704

checkok1299:                                      ; preds = %checkok1288
  %ge1300 = icmp sge i64 %sext1292, 128, !dbg !3704
  %503 = call i1 @llvm.expect.i1(i1 %ge1300, i1 false), !dbg !3704
  br i1 %503, label %panic1301, label %checkok1308, !dbg !3704

checkok1308:                                      ; preds = %checkok1299
  %ptroffset1309 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1292, !dbg !3704
  %504 = load i32, ptr %k, align 4, !dbg !3705
  %sext1310 = sext i32 %504 to i64, !dbg !3705
  %lt1311 = icmp slt i64 %sext1310, 0, !dbg !3705
  %505 = call i1 @llvm.expect.i1(i1 %lt1311, i1 false), !dbg !3705
  br i1 %505, label %panic1312, label %checkok1317, !dbg !3705

checkok1317:                                      ; preds = %checkok1308
  %ge1318 = icmp sge i64 %sext1310, 128, !dbg !3705
  %506 = call i1 @llvm.expect.i1(i1 %ge1318, i1 false), !dbg !3705
  br i1 %506, label %panic1319, label %checkok1326, !dbg !3705

checkok1326:                                      ; preds = %checkok1317
  %ptroffset1327 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1310, !dbg !3705
  %507 = load i32, ptr %ptroffset1327, align 4, !dbg !3705
  %508 = load i32, ptr %sh, align 4, !dbg !3706
  %shift_exceeds1328 = icmp uge i32 %508, 32, !dbg !3707
  %509 = call i1 @llvm.expect.i1(i1 %shift_exceeds1328, i1 false), !dbg !3707
  br i1 %509, label %panic1329, label %checkok1334, !dbg !3707

checkok1334:                                      ; preds = %checkok1326
  %lshr1335 = lshr i32 %507, %508, !dbg !3707
  %510 = freeze i32 %lshr1335, !dbg !3707
  %511 = load i32, ptr %carry1151, align 4, !dbg !3708
  %add1336 = add i32 %510, %511, !dbg !3707
  store i32 %add1336, ptr %ptroffset1309, align 4, !dbg !3707
  %512 = load i32, ptr %sh, align 4, !dbg !3709
  %shift_underflow1337 = icmp slt i32 %512, 0, !dbg !3710
  %513 = call i1 @llvm.expect.i1(i1 %shift_underflow1337, i1 false), !dbg !3710
  br i1 %513, label %panic1338, label %checkok1343, !dbg !3710

checkok1343:                                      ; preds = %checkok1334
  %shift_exceeds1344 = icmp sge i32 %512, 32, !dbg !3710
  %514 = call i1 @llvm.expect.i1(i1 %shift_exceeds1344, i1 false), !dbg !3710
  br i1 %514, label %panic1345, label %checkok1350, !dbg !3710

checkok1350:                                      ; preds = %checkok1343
  %ashr = ashr i32 1000000000, %512, !dbg !3710
  %515 = freeze i32 %ashr, !dbg !3710
  %516 = load i32, ptr %tmp1257, align 4, !dbg !3711
  %mul1351 = mul i32 %515, %516, !dbg !3710
  store i32 %mul1351, ptr %carry1151, align 4, !dbg !3710
  %517 = load i32, ptr %k, align 4, !dbg !3712
  %518 = load i32, ptr %a, align 4, !dbg !3713
  %eq1352 = icmp eq i32 %517, %518, !dbg !3712
  br i1 %eq1352, label %and.rhs1353, label %and.phi1373, !dbg !3712

and.rhs1353:                                      ; preds = %checkok1350
  %519 = load i32, ptr %k, align 4, !dbg !3714
  %sext1354 = sext i32 %519 to i64, !dbg !3714
  %lt1355 = icmp slt i64 %sext1354, 0, !dbg !3714
  %520 = call i1 @llvm.expect.i1(i1 %lt1355, i1 false), !dbg !3714
  br i1 %520, label %panic1356, label %checkok1361, !dbg !3714

checkok1361:                                      ; preds = %and.rhs1353
  %ge1362 = icmp sge i64 %sext1354, 128, !dbg !3714
  %521 = call i1 @llvm.expect.i1(i1 %ge1362, i1 false), !dbg !3714
  br i1 %521, label %panic1363, label %checkok1370, !dbg !3714

checkok1370:                                      ; preds = %checkok1361
  %ptroffset1371 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1354, !dbg !3714
  %522 = load i32, ptr %ptroffset1371, align 4, !dbg !3714
  %not1372 = icmp eq i32 %522, 0, !dbg !3714
  br label %and.phi1373, !dbg !3714

and.phi1373:                                      ; preds = %checkok1370, %checkok1350
  %val1374 = phi i1 [ false, %checkok1350 ], [ %not1372, %checkok1370 ], !dbg !3714
  br i1 %val1374, label %if.then1375, label %if.exit1380, !dbg !3714

if.then1375:                                      ; preds = %and.phi1373
  %523 = load i32, ptr %a, align 4, !dbg !3715
  %add1376 = add i32 %523, 1, !dbg !3715
  %and1377 = and i32 %add1376, 127, !dbg !3715
  store i32 %and1377, ptr %a, align 4, !dbg !3715
  %524 = load i32, ptr %i, align 4, !dbg !3717
  %sub1378 = sub i32 %524, 1, !dbg !3717
  store i32 %sub1378, ptr %i, align 4, !dbg !3717
  %525 = load i64, ptr %rp706, align 8, !dbg !3718
  %sub1379 = sub i64 %525, 9, !dbg !3718
  store i64 %sub1379, ptr %rp706, align 8, !dbg !3718
  br label %if.exit1380, !dbg !3718

if.exit1380:                                      ; preds = %if.then1375, %and.phi1373
  %526 = load i32, ptr %k, align 4, !dbg !3719
  %add1381 = add i32 %526, 1, !dbg !3719
  %and1382 = and i32 %add1381, 127, !dbg !3719
  store i32 %and1382, ptr %k, align 4, !dbg !3719
  br label %loop.cond1254, !dbg !3719

loop.exit1383:                                    ; preds = %loop.cond1254
  %527 = load i32, ptr %carry1151, align 4, !dbg !3720
  %intbool1384 = icmp ne i32 %527, 0, !dbg !3720
  br i1 %intbool1384, label %if.then1385, label %if.exit1433, !dbg !3720

if.then1385:                                      ; preds = %loop.exit1383
  %528 = load i32, ptr %z, align 4, !dbg !3721
  %add1386 = add i32 %528, 1, !dbg !3721
  %and1387 = and i32 %add1386, 127, !dbg !3721
  %529 = load i32, ptr %a, align 4, !dbg !3723
  %neq1388 = icmp ne i32 %and1387, %529, !dbg !3721
  br i1 %neq1388, label %if.then1389, label %if.else1410, !dbg !3721

if.then1389:                                      ; preds = %if.then1385
  %530 = load i32, ptr %z, align 4, !dbg !3724
  %sext1390 = sext i32 %530 to i64, !dbg !3724
  %lt1391 = icmp slt i64 %sext1390, 0, !dbg !3724
  %531 = call i1 @llvm.expect.i1(i1 %lt1391, i1 false), !dbg !3724
  br i1 %531, label %panic1392, label %checkok1397, !dbg !3724

checkok1397:                                      ; preds = %if.then1389
  %ge1398 = icmp sge i64 %sext1390, 128, !dbg !3724
  %532 = call i1 @llvm.expect.i1(i1 %ge1398, i1 false), !dbg !3724
  br i1 %532, label %panic1399, label %checkok1406, !dbg !3724

checkok1406:                                      ; preds = %checkok1397
  %ptroffset1407 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1390, !dbg !3724
  %533 = load i32, ptr %carry1151, align 4, !dbg !3726
  store i32 %533, ptr %ptroffset1407, align 4, !dbg !3726
  %534 = load i32, ptr %z, align 4, !dbg !3727
  %add1408 = add i32 %534, 1, !dbg !3727
  %and1409 = and i32 %add1408, 127, !dbg !3727
  store i32 %and1409, ptr %z, align 4, !dbg !3727
  br label %if.exit1432, !dbg !3727

if.else1410:                                      ; preds = %if.then1385
  %535 = load i32, ptr %z, align 4, !dbg !3728
  %sub1411 = sub i32 %535, 1, !dbg !3728
  %and1412 = and i32 %sub1411, 127, !dbg !3728
  %sext1413 = sext i32 %and1412 to i64, !dbg !3728
  %lt1414 = icmp slt i64 %sext1413, 0, !dbg !3728
  %536 = call i1 @llvm.expect.i1(i1 %lt1414, i1 false), !dbg !3728
  br i1 %536, label %panic1415, label %checkok1420, !dbg !3728

checkok1420:                                      ; preds = %if.else1410
  %ge1421 = icmp sge i64 %sext1413, 128, !dbg !3728
  %537 = call i1 @llvm.expect.i1(i1 %ge1421, i1 false), !dbg !3728
  br i1 %537, label %panic1422, label %checkok1429, !dbg !3728

checkok1429:                                      ; preds = %checkok1420
  %ptroffset1430 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1413, !dbg !3728
  %538 = load i32, ptr %ptroffset1430, align 4, !dbg !3728
  %or1431 = or i32 %538, 1, !dbg !3730
  store i32 %or1431, ptr %ptroffset1430, align 4, !dbg !3730
  br label %if.exit1432, !dbg !3730

if.exit1432:                                      ; preds = %checkok1429, %checkok1406
  br label %if.exit1433, !dbg !3730

if.exit1433:                                      ; preds = %if.exit1432, %loop.exit1383
  br label %loop.body1150, !dbg !3730

loop.exit1434:                                    ; preds = %if.then1248
  call void @llvm.dbg.declare(metadata ptr %y1435, metadata !3731, metadata !DIExpression()), !dbg !3732
  store double 0.000000e+00, ptr %y1435, align 8, !dbg !3732
  call void @llvm.dbg.declare(metadata ptr %i1436, metadata !3733, metadata !DIExpression()), !dbg !3734
  store i32 0, ptr %i1436, align 4, !dbg !3734
  store i32 0, ptr %i1436, align 4, !dbg !3735
  br label %loop.cond1437, !dbg !3735

loop.cond1437:                                    ; preds = %checkok1485, %loop.exit1434
  %539 = load i32, ptr %i1436, align 4, !dbg !3737
  %lt1438 = icmp slt i32 %539, 2, !dbg !3737
  br i1 %lt1438, label %loop.body1439, label %loop.exit1490, !dbg !3737

loop.body1439:                                    ; preds = %loop.cond1437
  %540 = load i32, ptr %a, align 4, !dbg !3738
  %541 = load i32, ptr %i1436, align 4, !dbg !3740
  %add1440 = add i32 %540, %541, !dbg !3738
  %and1441 = and i32 %add1440, 127, !dbg !3738
  %542 = load i32, ptr %z, align 4, !dbg !3741
  %eq1442 = icmp eq i32 %and1441, %542, !dbg !3738
  br i1 %eq1442, label %if.then1443, label %if.exit1465, !dbg !3738

if.then1443:                                      ; preds = %loop.body1439
  %543 = load i32, ptr %z, align 4, !dbg !3742
  %add1444 = add i32 %543, 1, !dbg !3742
  %and1445 = and i32 %add1444, 127, !dbg !3742
  store i32 %and1445, ptr %z, align 4, !dbg !3742
  %sub1446 = sub i32 %and1445, 1, !dbg !3743
  %sext1447 = sext i32 %sub1446 to i64, !dbg !3743
  %lt1448 = icmp slt i64 %sext1447, 0, !dbg !3743
  %544 = call i1 @llvm.expect.i1(i1 %lt1448, i1 false), !dbg !3743
  br i1 %544, label %panic1449, label %checkok1454, !dbg !3743

checkok1454:                                      ; preds = %if.then1443
  %ge1455 = icmp sge i64 %sext1447, 128, !dbg !3743
  %545 = call i1 @llvm.expect.i1(i1 %ge1455, i1 false), !dbg !3743
  br i1 %545, label %panic1456, label %checkok1463, !dbg !3743

checkok1463:                                      ; preds = %checkok1454
  %ptroffset1464 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1447, !dbg !3743
  store i32 0, ptr %ptroffset1464, align 4, !dbg !3744
  br label %if.exit1465, !dbg !3744

if.exit1465:                                      ; preds = %checkok1463, %loop.body1439
  %546 = load double, ptr %y1435, align 8, !dbg !3745
  %fmul1466 = fmul double 1.000000e+09, %546, !dbg !3746
  %547 = load i32, ptr %a, align 4, !dbg !3747
  %548 = load i32, ptr %i1436, align 4, !dbg !3748
  %add1467 = add i32 %547, %548, !dbg !3747
  %and1468 = and i32 %add1467, 127, !dbg !3747
  %sext1469 = sext i32 %and1468 to i64, !dbg !3747
  %lt1470 = icmp slt i64 %sext1469, 0, !dbg !3747
  %549 = call i1 @llvm.expect.i1(i1 %lt1470, i1 false), !dbg !3747
  br i1 %549, label %panic1471, label %checkok1476, !dbg !3747

checkok1476:                                      ; preds = %if.exit1465
  %ge1477 = icmp sge i64 %sext1469, 128, !dbg !3747
  %550 = call i1 @llvm.expect.i1(i1 %ge1477, i1 false), !dbg !3747
  br i1 %550, label %panic1478, label %checkok1485, !dbg !3747

checkok1485:                                      ; preds = %checkok1476
  %ptroffset1486 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1469, !dbg !3747
  %551 = load i32, ptr %ptroffset1486, align 4, !dbg !3747
  %uifp1487 = uitofp i32 %551 to double, !dbg !3747
  %fadd1488 = fadd double %fmul1466, %uifp1487, !dbg !3746
  store double %fadd1488, ptr %y1435, align 8, !dbg !3746
  %552 = load i32, ptr %i1436, align 4, !dbg !3749
  %add1489 = add i32 %552, 1, !dbg !3749
  store i32 %add1489, ptr %i1436, align 4, !dbg !3749
  br label %loop.cond1437, !dbg !3749

loop.exit1490:                                    ; preds = %loop.cond1437
  %553 = load double, ptr %y1435, align 8, !dbg !3750
  %554 = load i32, ptr %sign381, align 4, !dbg !3751
  %sifp1491 = sitofp i32 %554 to double, !dbg !3751
  %fmul1492 = fmul double %553, %sifp1491, !dbg !3750
  store double %fmul1492, ptr %y1435, align 8, !dbg !3750
  call void @llvm.dbg.declare(metadata ptr %denormal, metadata !3752, metadata !DIExpression()), !dbg !3753
  store i8 0, ptr %denormal, align 1, !dbg !3753
  call void @llvm.dbg.declare(metadata ptr %bits1493, metadata !3754, metadata !DIExpression()), !dbg !3755
  store i32 24, ptr %bits1493, align 4, !dbg !3756
  %555 = load i32, ptr %bits1493, align 4, !dbg !3757
  %556 = load i32, ptr %e2705, align 4, !dbg !3758
  %add1494 = add i32 53, %556, !dbg !3759
  %sub1495 = sub i32 %add1494, -149, !dbg !3759
  %lt1496 = icmp slt i32 %sub1495, %555, !dbg !3757
  %check1497 = icmp slt i32 %555, 0, !dbg !3757
  %siui-lt1498 = or i1 %check1497, %lt1496, !dbg !3757
  br i1 %siui-lt1498, label %if.then1499, label %if.exit1505, !dbg !3757

if.then1499:                                      ; preds = %loop.exit1490
  %557 = load i32, ptr %e2705, align 4, !dbg !3760
  %add1500 = add i32 53, %557, !dbg !3762
  %sub1501 = sub i32 %add1500, -149, !dbg !3762
  store i32 %sub1501, ptr %bits1493, align 4, !dbg !3762
  %558 = load i32, ptr %bits1493, align 4, !dbg !3763
  %gt1502 = icmp ugt i32 0, %558, !dbg !3763
  br i1 %gt1502, label %if.then1503, label %if.exit1504, !dbg !3763

if.then1503:                                      ; preds = %if.then1499
  store i32 0, ptr %bits1493, align 4, !dbg !3764
  br label %if.exit1504, !dbg !3764

if.exit1504:                                      ; preds = %if.then1503, %if.then1499
  store i8 1, ptr %denormal, align 1, !dbg !3765
  br label %if.exit1505, !dbg !3765

if.exit1505:                                      ; preds = %if.exit1504, %loop.exit1490
  call void @llvm.dbg.declare(metadata ptr %bias1506, metadata !3766, metadata !DIExpression()), !dbg !3767
  store double 0.000000e+00, ptr %bias1506, align 8, !dbg !3767
  call void @llvm.dbg.declare(metadata ptr %frac, metadata !3768, metadata !DIExpression()), !dbg !3769
  store double 0.000000e+00, ptr %frac, align 8, !dbg !3769
  %559 = load i32, ptr %bits1493, align 4, !dbg !3770
  %gt1507 = icmp ugt i32 53, %559, !dbg !3770
  br i1 %gt1507, label %if.then1508, label %if.exit1525, !dbg !3770

if.then1508:                                      ; preds = %if.exit1505
  store double 1.000000e+00, ptr %x1509, align 8
  %560 = load i32, ptr %bits1493, align 4, !dbg !3771
  %sub1510 = sub i32 106, %560, !dbg !3773
  %sub1511 = sub i32 %sub1510, 1, !dbg !3773
  store i32 %sub1511, ptr %n1512, align 4
  %561 = load double, ptr %x1509, align 8, !dbg !3774
  %562 = load i32, ptr %n1512, align 4, !dbg !3774
  %563 = call double @scalbn(double %561, i32 %562), !dbg !3777
  store double %563, ptr %mag1513, align 8
  %564 = load double, ptr %y1435, align 8
  store double %564, ptr %sgn1514, align 8
  %565 = load double, ptr %mag1513, align 8
  store double %565, ptr %x1515, align 8
  %566 = load double, ptr %sgn1514, align 8
  store double %566, ptr %y1516, align 8
  %567 = load double, ptr %x1515, align 8, !dbg !3778
  %568 = load double, ptr %sgn1514, align 8, !dbg !3783
  %569 = call double @llvm.copysign.f64(double %567, double %568), !dbg !3783
  store double %569, ptr %bias1506, align 8, !dbg !3783
  %570 = load double, ptr %y1435, align 8, !dbg !3784
  store double 1.000000e+00, ptr %x1517, align 8
  %571 = load i32, ptr %bits1493, align 4, !dbg !3785
  %sub1518 = sub i32 53, %571, !dbg !3786
  store i32 %sub1518, ptr %n1519, align 4
  %572 = load double, ptr %x1517, align 8, !dbg !3787
  %573 = load i32, ptr %n1519, align 4, !dbg !3787
  %574 = call double @scalbn(double %572, i32 %573), !dbg !3790
  %zero1520 = fcmp ueq double %574, 0.000000e+00, !dbg !3784
  %575 = call i1 @llvm.expect.i1(i1 %zero1520, i1 false), !dbg !3784
  br i1 %575, label %panic1521, label %checkok1522, !dbg !3784

checkok1522:                                      ; preds = %if.then1508
  %fmod = frem double %570, %574, !dbg !3784
  store double %fmod, ptr %frac, align 8, !dbg !3784
  %576 = load double, ptr %y1435, align 8, !dbg !3791
  %577 = load double, ptr %frac, align 8, !dbg !3792
  %fsub1523 = fsub double %576, %577, !dbg !3791
  store double %fsub1523, ptr %y1435, align 8, !dbg !3791
  %578 = load double, ptr %y1435, align 8, !dbg !3793
  %579 = load double, ptr %bias1506, align 8, !dbg !3794
  %fadd1524 = fadd double %578, %579, !dbg !3793
  store double %fadd1524, ptr %y1435, align 8, !dbg !3793
  br label %if.exit1525, !dbg !3793

if.exit1525:                                      ; preds = %checkok1522, %if.exit1505
  %580 = load i32, ptr %a, align 4, !dbg !3795
  %581 = load i32, ptr %i1436, align 4, !dbg !3796
  %add1526 = add i32 %580, %581, !dbg !3795
  %and1527 = and i32 %add1526, 127, !dbg !3795
  %582 = load i32, ptr %z, align 4, !dbg !3797
  %neq1528 = icmp ne i32 %and1527, %582, !dbg !3795
  br i1 %neq1528, label %if.then1529, label %if.exit1604, !dbg !3795

if.then1529:                                      ; preds = %if.exit1525
  call void @llvm.dbg.declare(metadata ptr %t, metadata !3798, metadata !DIExpression()), !dbg !3800
  %583 = load i32, ptr %a, align 4, !dbg !3801
  %584 = load i32, ptr %i1436, align 4, !dbg !3802
  %add1530 = add i32 %583, %584, !dbg !3801
  %and1531 = and i32 %add1530, 127, !dbg !3801
  %sext1532 = sext i32 %and1531 to i64, !dbg !3801
  %lt1533 = icmp slt i64 %sext1532, 0, !dbg !3801
  %585 = call i1 @llvm.expect.i1(i1 %lt1533, i1 false), !dbg !3801
  br i1 %585, label %panic1534, label %checkok1539, !dbg !3801

checkok1539:                                      ; preds = %if.then1529
  %ge1540 = icmp sge i64 %sext1532, 128, !dbg !3801
  %586 = call i1 @llvm.expect.i1(i1 %ge1540, i1 false), !dbg !3801
  br i1 %586, label %panic1541, label %checkok1548, !dbg !3801

checkok1548:                                      ; preds = %checkok1539
  %ptroffset1549 = getelementptr inbounds [4 x i8], ptr %x385, i64 %sext1532, !dbg !3801
  %587 = load i32, ptr %ptroffset1549, align 4, !dbg !3801
  store i32 %587, ptr %t, align 4, !dbg !3801
  store i8 1, ptr %switch1550, align 1
  br label %switch.entry1551

switch.entry1551:                                 ; preds = %checkok1548
  %588 = load i8, ptr %switch1550, align 1
  %589 = trunc i8 %588 to i1
  %590 = load i32, ptr %t, align 4, !dbg !3803
  %gt1552 = icmp ugt i32 500000000, %590, !dbg !3803
  br i1 %gt1552, label %and.rhs1553, label %and.phi1562, !dbg !3803

and.rhs1553:                                      ; preds = %switch.entry1551
  %591 = load i32, ptr %t, align 4, !dbg !3805
  %intbool1554 = icmp ne i32 %591, 0, !dbg !3805
  br i1 %intbool1554, label %or.phi1560, label %or.rhs1555, !dbg !3805

or.rhs1555:                                       ; preds = %and.rhs1553
  %592 = load i32, ptr %a, align 4, !dbg !3806
  %593 = load i32, ptr %i1436, align 4, !dbg !3807
  %add1556 = add i32 %592, %593, !dbg !3806
  %add1557 = add i32 %add1556, 1, !dbg !3806
  %and1558 = and i32 %add1557, 127, !dbg !3806
  %594 = load i32, ptr %z, align 4, !dbg !3808
  %neq1559 = icmp ne i32 %and1558, %594, !dbg !3806
  br label %or.phi1560, !dbg !3806

or.phi1560:                                       ; preds = %or.rhs1555, %and.rhs1553
  %val1561 = phi i1 [ true, %and.rhs1553 ], [ %neq1559, %or.rhs1555 ], !dbg !3806
  br label %and.phi1562, !dbg !3806

and.phi1562:                                      ; preds = %or.phi1560, %switch.entry1551
  %val1563 = phi i1 [ false, %switch.entry1551 ], [ %val1561, %or.phi1560 ], !dbg !3806
  %eq1564 = icmp eq i1 %val1563, %589, !dbg !3806
  br i1 %eq1564, label %switch.case1565, label %next_if1569, !dbg !3806

switch.case1565:                                  ; preds = %and.phi1562
  %595 = load double, ptr %frac, align 8, !dbg !3809
  %596 = load i32, ptr %sign381, align 4, !dbg !3811
  %sifp1566 = sitofp i32 %596 to double, !dbg !3811
  %fmul1567 = fmul double 2.500000e-01, %sifp1566, !dbg !3812
  %fadd1568 = fadd double %595, %fmul1567, !dbg !3809
  store double %fadd1568, ptr %frac, align 8, !dbg !3809
  br label %switch.exit1594, !dbg !3809

next_if1569:                                      ; preds = %and.phi1562
  %597 = load i32, ptr %t, align 4, !dbg !3813
  %lt1570 = icmp ult i32 500000000, %597, !dbg !3813
  %eq1571 = icmp eq i1 %lt1570, %589, !dbg !3813
  br i1 %eq1571, label %switch.case1572, label %next_if1576, !dbg !3813

switch.case1572:                                  ; preds = %next_if1569
  %598 = load double, ptr %frac, align 8, !dbg !3814
  %599 = load i32, ptr %sign381, align 4, !dbg !3816
  %sifp1573 = sitofp i32 %599 to double, !dbg !3816
  %fmul1574 = fmul double 7.500000e-01, %sifp1573, !dbg !3817
  %fadd1575 = fadd double %598, %fmul1574, !dbg !3814
  store double %fadd1575, ptr %frac, align 8, !dbg !3814
  br label %switch.exit1594, !dbg !3814

next_if1576:                                      ; preds = %next_if1569
  %600 = load i32, ptr %t, align 4, !dbg !3818
  %eq1577 = icmp eq i32 500000000, %600, !dbg !3818
  %eq1578 = icmp eq i1 %eq1577, %589, !dbg !3818
  br i1 %eq1578, label %switch.case1579, label %next_if1593, !dbg !3818

switch.case1579:                                  ; preds = %next_if1576
  %601 = load i32, ptr %a, align 4, !dbg !3819
  %602 = load i32, ptr %i1436, align 4, !dbg !3821
  %add1580 = add i32 %601, %602, !dbg !3819
  %add1581 = add i32 %add1580, 1, !dbg !3819
  %and1582 = and i32 %add1581, 127, !dbg !3819
  %603 = load i32, ptr %z, align 4, !dbg !3822
  %eq1583 = icmp eq i32 %and1582, %603, !dbg !3819
  br i1 %eq1583, label %if.then1584, label %if.else1588, !dbg !3819

if.then1584:                                      ; preds = %switch.case1579
  %604 = load double, ptr %frac, align 8, !dbg !3823
  %605 = load i32, ptr %sign381, align 4, !dbg !3825
  %sifp1585 = sitofp i32 %605 to double, !dbg !3825
  %fmul1586 = fmul double 5.000000e-01, %sifp1585, !dbg !3826
  %fadd1587 = fadd double %604, %fmul1586, !dbg !3823
  store double %fadd1587, ptr %frac, align 8, !dbg !3823
  br label %if.exit1592, !dbg !3823

if.else1588:                                      ; preds = %switch.case1579
  %606 = load double, ptr %frac, align 8, !dbg !3827
  %607 = load i32, ptr %sign381, align 4, !dbg !3829
  %sifp1589 = sitofp i32 %607 to double, !dbg !3829
  %fmul1590 = fmul double 7.500000e-01, %sifp1589, !dbg !3830
  %fadd1591 = fadd double %606, %fmul1590, !dbg !3827
  store double %fadd1591, ptr %frac, align 8, !dbg !3827
  br label %if.exit1592, !dbg !3827

if.exit1592:                                      ; preds = %if.else1588, %if.then1584
  br label %switch.exit1594, !dbg !3827

next_if1593:                                      ; preds = %next_if1576
  br label %switch.exit1594, !dbg !3827

switch.exit1594:                                  ; preds = %next_if1593, %if.exit1592, %switch.case1572, %switch.case1565
  %608 = load i32, ptr %bits1493, align 4, !dbg !3831
  %sub1595 = sub i32 53, %608, !dbg !3832
  %ge1596 = icmp sge i32 %sub1595, 2, !dbg !3832
  br i1 %ge1596, label %and.rhs1597, label %and.phi1600, !dbg !3832

and.rhs1597:                                      ; preds = %switch.exit1594
  %609 = load double, ptr %frac, align 8, !dbg !3833
  %fmod1598 = frem double %609, 1.000000e+00, !dbg !3833
  %not1599 = fcmp ueq double %fmod1598, 0.000000e+00, !dbg !3833
  br label %and.phi1600, !dbg !3833

and.phi1600:                                      ; preds = %and.rhs1597, %switch.exit1594
  %val1601 = phi i1 [ false, %switch.exit1594 ], [ %not1599, %and.rhs1597 ], !dbg !3833
  br i1 %val1601, label %if.then1602, label %if.exit1603, !dbg !3833

if.then1602:                                      ; preds = %and.phi1600
  %610 = load double, ptr %frac, align 8, !dbg !3834
  %fincdec = fadd double %610, 1.000000e+00, !dbg !3834
  store double %fincdec, ptr %frac, align 8, !dbg !3834
  br label %if.exit1603, !dbg !3834

if.exit1603:                                      ; preds = %if.then1602, %and.phi1600
  br label %if.exit1604, !dbg !3834

if.exit1604:                                      ; preds = %if.exit1603, %if.exit1525
  %611 = load double, ptr %y1435, align 8, !dbg !3835
  %612 = load double, ptr %frac, align 8, !dbg !3836
  %fadd1605 = fadd double %611, %612, !dbg !3835
  store double %fadd1605, ptr %y1435, align 8, !dbg !3835
  %613 = load double, ptr %y1435, align 8, !dbg !3837
  %614 = load double, ptr %bias1506, align 8, !dbg !3838
  %fsub1606 = fsub double %613, %614, !dbg !3837
  store double %fsub1606, ptr %y1435, align 8, !dbg !3837
  %615 = load i32, ptr %e2705, align 4, !dbg !3839
  %add1607 = add i32 %615, 53, !dbg !3839
  %and1608 = and i32 %add1607, 2147483647, !dbg !3839
  %616 = load i32, ptr %emax, align 4, !dbg !3840
  %sub1609 = sub i32 %616, 5, !dbg !3840
  %gt1610 = icmp sgt i32 %and1608, %sub1609, !dbg !3839
  br i1 %gt1610, label %if.then1611, label %if.exit1639, !dbg !3839

if.then1611:                                      ; preds = %if.exit1604
  %617 = load double, ptr %y1435, align 8
  store double %617, ptr %x1612, align 8
  %618 = load double, ptr %x1612, align 8, !dbg !3841
  %619 = call double @llvm.fabs.f64(double %618), !dbg !3841
  %ge1613 = fcmp oge double %619, 0x4340000000000000, !dbg !3843
  br i1 %ge1613, label %if.then1614, label %if.exit1627, !dbg !3843

if.then1614:                                      ; preds = %if.then1611
  %620 = load i8, ptr %denormal, align 1, !dbg !3845
  %621 = trunc i8 %620 to i1, !dbg !3845
  br i1 %621, label %and.rhs1615, label %and.phi1621, !dbg !3845

and.rhs1615:                                      ; preds = %if.then1614
  %622 = load i32, ptr %bits1493, align 4, !dbg !3847
  %623 = load i32, ptr %e2705, align 4, !dbg !3848
  %add1616 = add i32 53, %623, !dbg !3849
  %sub1617 = sub i32 %add1616, -149, !dbg !3849
  %eq1618 = icmp eq i32 %sub1617, %622, !dbg !3847
  %check1619 = icmp sge i32 %sub1617, 0, !dbg !3847
  %siui-eq1620 = and i1 %check1619, %eq1618, !dbg !3847
  br label %and.phi1621, !dbg !3847

and.phi1621:                                      ; preds = %and.rhs1615, %if.then1614
  %val1622 = phi i1 [ false, %if.then1614 ], [ %siui-eq1620, %and.rhs1615 ], !dbg !3847
  br i1 %val1622, label %if.then1623, label %if.exit1624, !dbg !3847

if.then1623:                                      ; preds = %and.phi1621
  store i8 0, ptr %denormal, align 1, !dbg !3850
  br label %if.exit1624, !dbg !3850

if.exit1624:                                      ; preds = %if.then1623, %and.phi1621
  %624 = load double, ptr %y1435, align 8, !dbg !3851
  %fmul1625 = fmul double %624, 5.000000e-01, !dbg !3851
  store double %fmul1625, ptr %y1435, align 8, !dbg !3851
  %625 = load i32, ptr %e2705, align 4, !dbg !3852
  %add1626 = add i32 %625, 1, !dbg !3852
  store i32 %add1626, ptr %e2705, align 4, !dbg !3852
  br label %if.exit1627, !dbg !3852

if.exit1627:                                      ; preds = %if.exit1624, %if.then1611
  %626 = load i32, ptr %e2705, align 4, !dbg !3853
  %add1628 = add i32 %626, 53, !dbg !3853
  %627 = load i32, ptr %emax, align 4, !dbg !3854
  %gt1629 = icmp sgt i32 %add1628, %627, !dbg !3853
  br i1 %gt1629, label %or.phi1635, label %or.rhs1630, !dbg !3853

or.rhs1630:                                       ; preds = %if.exit1627
  %628 = load i8, ptr %denormal, align 1, !dbg !3855
  %629 = trunc i8 %628 to i1, !dbg !3855
  br i1 %629, label %and.rhs1631, label %and.phi1633, !dbg !3855

and.rhs1631:                                      ; preds = %or.rhs1630
  %630 = load double, ptr %frac, align 8, !dbg !3856
  %fpbool1632 = fcmp une double %630, 0.000000e+00, !dbg !3856
  br label %and.phi1633, !dbg !3856

and.phi1633:                                      ; preds = %and.rhs1631, %or.rhs1630
  %val1634 = phi i1 [ false, %or.rhs1630 ], [ %fpbool1632, %and.rhs1631 ], !dbg !3856
  br label %or.phi1635, !dbg !3856

or.phi1635:                                       ; preds = %and.phi1633, %if.exit1627
  %val1636 = phi i1 [ true, %if.exit1627 ], [ %val1634, %and.phi1633 ], !dbg !3856
  br i1 %val1636, label %if.then1637, label %if.exit1638, !dbg !3856

if.then1637:                                      ; preds = %or.phi1635
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3857
  br label %err_retblock, !dbg !3857

if.exit1638:                                      ; preds = %or.phi1635
  br label %if.exit1639, !dbg !3857

if.exit1639:                                      ; preds = %if.exit1638, %if.exit1604
  %631 = load double, ptr %y1435, align 8
  store double %631, ptr %x1640, align 8
  %632 = load i32, ptr %e2705, align 4
  store i32 %632, ptr %n1641, align 4
  %633 = load double, ptr %x1640, align 8, !dbg !3858
  %634 = load i32, ptr %n1641, align 4, !dbg !3858
  %635 = call double @scalbn(double %633, i32 %634), !dbg !3861
  store double %635, ptr %blockret382, align 8, !dbg !3861
  br label %expr_block.exit1643, !dbg !3861

expr_block.exit1643:                              ; preds = %if.exit1639, %checkok787, %checkok748, %if.then718, %if.then666, %if.then649, %if.exit436, %if.then424
  %636 = load double, ptr %blockret382, align 8, !dbg !3861
  %fpfptrunc1644 = fptrunc double %636 to float, !dbg !3861
  store float %fpfptrunc1644, ptr %blockret, align 4, !dbg !3861
  br label %expr_block.exit1645, !dbg !3861

expr_block.exit1645:                              ; preds = %expr_block.exit1643, %expr_block.exit378, %if.then80, %if.then53
  %637 = load float, ptr %blockret, align 4, !dbg !3861
  store float %637, ptr %0, align 4, !dbg !3861
  ret i64 0, !dbg !3861

err_retblock:                                     ; preds = %if.then1637, %if.then675, %if.then672, %if.then645, %guard_block640, %if.then614, %if.then605, %if.then496, %if.then435, %if.then372, %if.then318, %if.then315, %guard_block, %if.then270, %if.then216, %if.then152, %if.then
  %638 = load i64, ptr %reterr, align 8, !dbg !3861
  ret i64 %638, !dbg !3861

panic:                                            ; preds = %and.rhs
  store i64 %4, ptr %taddr, align 8
  %639 = insertvalue %any undef, ptr %taddr, 0
  %640 = insertvalue %any %639, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %641 = insertvalue %any undef, ptr %taddr3, 0
  %642 = insertvalue %any %641, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %640, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %642, ptr %ptradd4, align 16
  %643 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %643, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 468, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3120
  unreachable, !dbg !3120

panic5:                                           ; preds = %loop.body
  store i64 %10, ptr %taddr6, align 8
  %644 = insertvalue %any undef, ptr %taddr6, 0
  %645 = insertvalue %any %644, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr7, align 8
  %646 = insertvalue %any undef, ptr %taddr7, 0
  %647 = insertvalue %any %646, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %645, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %647, ptr %ptradd9, align 16
  %648 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %648, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 468, ptr byval(%"any[]") align 8 %indirectarg11), !dbg !3121
  unreachable, !dbg !3121

panic17:                                          ; preds = %if.exit
  store i64 %15, ptr %taddr18, align 8
  %649 = insertvalue %any undef, ptr %taddr18, 0
  %650 = insertvalue %any %649, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr19, align 8
  %651 = insertvalue %any undef, ptr %taddr19, 0
  %652 = insertvalue %any %651, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %650, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %652, ptr %ptradd21, align 16
  %653 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %653, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 470, ptr byval(%"any[]") align 8 %indirectarg23), !dbg !3127
  unreachable, !dbg !3127

panic27:                                          ; preds = %switch.case25
  store i64 %22, ptr %taddr28, align 8
  %654 = insertvalue %any undef, ptr %taddr28, 0
  %655 = insertvalue %any %654, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr29, align 8
  %656 = insertvalue %any undef, ptr %taddr29, 0
  %657 = insertvalue %any %656, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %655, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %657, ptr %ptradd31, align 16
  %658 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %658, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 476, ptr byval(%"any[]") align 8 %indirectarg33), !dbg !3131
  unreachable, !dbg !3131

panic87:                                          ; preds = %and.rhs84
  store i64 %56, ptr %taddr88, align 8
  %659 = insertvalue %any undef, ptr %taddr88, 0
  %660 = insertvalue %any %659, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr89, align 8
  %661 = insertvalue %any undef, ptr %taddr89, 0
  %662 = insertvalue %any %661, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %660, ptr %varargslots90, align 16
  %ptradd91 = getelementptr inbounds i8, ptr %varargslots90, i64 16
  store %any %662, ptr %ptradd91, align 16
  %663 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp92" = insertvalue %"any[]" %663, i64 2, 1
  store %"any[]" %"$$temp92", ptr %indirectarg93, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 481, ptr byval(%"any[]") align 8 %indirectarg93), !dbg !3142
  unreachable, !dbg !3142

panic101:                                         ; preds = %and.rhs98
  store i64 %60, ptr %taddr102, align 8
  %664 = insertvalue %any undef, ptr %taddr102, 0
  %665 = insertvalue %any %664, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr103, align 8
  %666 = insertvalue %any undef, ptr %taddr103, 0
  %667 = insertvalue %any %666, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %665, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %667, ptr %ptradd105, align 16
  %668 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %668, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 481, ptr byval(%"any[]") align 8 %indirectarg107), !dbg !3144
  unreachable, !dbg !3144

panic115:                                         ; preds = %if.then113
  store i64 %66, ptr %taddr116, align 8
  %669 = insertvalue %any undef, ptr %taddr116, 0
  %670 = insertvalue %any %669, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr117, align 8
  %671 = insertvalue %any undef, ptr %taddr117, 0
  %672 = insertvalue %any %671, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %670, ptr %varargslots118, align 16
  %ptradd119 = getelementptr inbounds i8, ptr %varargslots118, i64 16
  store %any %672, ptr %ptradd119, align 16
  %673 = insertvalue %"any[]" undef, ptr %varargslots118, 0
  %"$$temp120" = insertvalue %"any[]" %673, i64 2, 1
  store %"any[]" %"$$temp120", ptr %indirectarg121, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 483, ptr byval(%"any[]") align 8 %indirectarg121), !dbg !3148
  unreachable, !dbg !3148

panic132:                                         ; preds = %loop.cond129
  store i64 %73, ptr %taddr133, align 8
  %674 = insertvalue %any undef, ptr %taddr133, 0
  %675 = insertvalue %any %674, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %75, ptr %taddr134, align 8
  %676 = insertvalue %any undef, ptr %taddr134, 0
  %677 = insertvalue %any %676, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %675, ptr %varargslots135, align 16
  %ptradd136 = getelementptr inbounds i8, ptr %varargslots135, i64 16
  store %any %677, ptr %ptradd136, align 16
  %678 = insertvalue %"any[]" undef, ptr %varargslots135, 0
  %"$$temp137" = insertvalue %"any[]" %678, i64 2, 1
  store %"any[]" %"$$temp137", ptr %indirectarg138, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 344, ptr byval(%"any[]") align 8 %indirectarg138), !dbg !3181
  unreachable, !dbg !3181

panic161:                                         ; preds = %and.rhs157
  store i64 %89, ptr %taddr162, align 8
  %679 = insertvalue %any undef, ptr %taddr162, 0
  %680 = insertvalue %any %679, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add159, ptr %taddr163, align 8
  %681 = insertvalue %any undef, ptr %taddr163, 0
  %682 = insertvalue %any %681, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %680, ptr %varargslots164, align 16
  %ptradd165 = getelementptr inbounds i8, ptr %varargslots164, i64 16
  store %any %682, ptr %ptradd165, align 16
  %683 = insertvalue %"any[]" undef, ptr %varargslots164, 0
  %"$$temp166" = insertvalue %"any[]" %683, i64 2, 1
  store %"any[]" %"$$temp166", ptr %indirectarg167, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 357, ptr byval(%"any[]") align 8 %indirectarg167), !dbg !3201
  unreachable, !dbg !3201

panic181:                                         ; preds = %and.rhs177
  store i64 %97, ptr %taddr182, align 8
  %684 = insertvalue %any undef, ptr %taddr182, 0
  %685 = insertvalue %any %684, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add179, ptr %taddr183, align 8
  %686 = insertvalue %any undef, ptr %taddr183, 0
  %687 = insertvalue %any %686, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %685, ptr %varargslots184, align 16
  %ptradd185 = getelementptr inbounds i8, ptr %varargslots184, i64 16
  store %any %687, ptr %ptradd185, align 16
  %688 = insertvalue %"any[]" undef, ptr %varargslots184, 0
  %"$$temp186" = insertvalue %"any[]" %688, i64 2, 1
  store %"any[]" %"$$temp186", ptr %indirectarg187, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 361, ptr byval(%"any[]") align 8 %indirectarg187), !dbg !3212
  unreachable, !dbg !3212

panic259:                                         ; preds = %if.exit255
  store i64 %131, ptr %taddr260, align 8
  %689 = insertvalue %any undef, ptr %taddr260, 0
  %690 = insertvalue %any %689, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add257, ptr %taddr261, align 8
  %691 = insertvalue %any undef, ptr %taddr261, 0
  %692 = insertvalue %any %691, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %690, ptr %varargslots262, align 16
  %ptradd263 = getelementptr inbounds i8, ptr %varargslots262, i64 16
  store %any %692, ptr %ptradd263, align 16
  %693 = insertvalue %"any[]" undef, ptr %varargslots262, 0
  %"$$temp264" = insertvalue %"any[]" %693, i64 2, 1
  store %"any[]" %"$$temp264", ptr %indirectarg265, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 397, ptr byval(%"any[]") align 8 %indirectarg265), !dbg !3260
  unreachable, !dbg !3260

panic289:                                         ; preds = %if.then286
  store i64 %148, ptr %taddr290, align 8
  %694 = insertvalue %any undef, ptr %taddr290, 0
  %695 = insertvalue %any %694, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add287, ptr %taddr291, align 8
  %696 = insertvalue %any undef, ptr %taddr291, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %695, ptr %varargslots292, align 16
  %ptradd293 = getelementptr inbounds i8, ptr %varargslots292, i64 16
  store %any %697, ptr %ptradd293, align 16
  %698 = insertvalue %"any[]" undef, ptr %varargslots292, 0
  %"$$temp294" = insertvalue %"any[]" %698, i64 2, 1
  store %"any[]" %"$$temp294", ptr %indirectarg295, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 406, ptr byval(%"any[]") align 8 %indirectarg295), !dbg !3278
  unreachable, !dbg !3278

panic297:                                         ; preds = %checkok296
  store i64 %add287, ptr %taddr298, align 8
  %699 = insertvalue %any undef, ptr %taddr298, 0
  %700 = insertvalue %any %699, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %700, ptr %varargslots299, align 16
  %701 = insertvalue %"any[]" undef, ptr %varargslots299, 0
  %"$$temp300" = insertvalue %"any[]" %701, i64 1, 1
  store %"any[]" %"$$temp300", ptr %indirectarg301, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.75, i64 22, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 406, ptr byval(%"any[]") align 8 %indirectarg301), !dbg !3277
  unreachable, !dbg !3277

panic390:                                         ; preds = %assert_ok
  store i64 %210, ptr %taddr391, align 8
  %702 = insertvalue %any undef, ptr %taddr391, 0
  %703 = insertvalue %any %702, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr392, align 8
  %704 = insertvalue %any undef, ptr %taddr392, 0
  %705 = insertvalue %any %704, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %703, ptr %varargslots393, align 16
  %ptradd394 = getelementptr inbounds i8, ptr %varargslots393, i64 16
  store %any %705, ptr %ptradd394, align 16
  %706 = insertvalue %"any[]" undef, ptr %varargslots393, 0
  %"$$temp395" = insertvalue %"any[]" %706, i64 2, 1
  store %"any[]" %"$$temp395", ptr %indirectarg396, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 45, ptr byval(%"any[]") align 8 %indirectarg396), !dbg !3370
  unreachable, !dbg !3370

panic412:                                         ; preds = %loop.cond409
  store i64 %219, ptr %taddr413, align 8
  %707 = insertvalue %any undef, ptr %taddr413, 0
  %708 = insertvalue %any %707, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %221, ptr %taddr414, align 8
  %709 = insertvalue %any undef, ptr %taddr414, 0
  %710 = insertvalue %any %709, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %708, ptr %varargslots415, align 16
  %ptradd416 = getelementptr inbounds i8, ptr %varargslots415, i64 16
  store %any %710, ptr %ptradd416, align 16
  %711 = insertvalue %"any[]" undef, ptr %varargslots415, 0
  %"$$temp417" = insertvalue %"any[]" %711, i64 2, 1
  store %"any[]" %"$$temp417", ptr %indirectarg418, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 56, ptr byval(%"any[]") align 8 %indirectarg418), !dbg !3395
  unreachable, !dbg !3395

panic445:                                         ; preds = %and.rhs441
  store i64 %236, ptr %taddr446, align 8
  %712 = insertvalue %any undef, ptr %taddr446, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add443, ptr %taddr447, align 8
  %714 = insertvalue %any undef, ptr %taddr447, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %713, ptr %varargslots448, align 16
  %ptradd449 = getelementptr inbounds i8, ptr %varargslots448, i64 16
  store %any %715, ptr %ptradd449, align 16
  %716 = insertvalue %"any[]" undef, ptr %varargslots448, 0
  %"$$temp450" = insertvalue %"any[]" %716, i64 2, 1
  store %"any[]" %"$$temp450", ptr %indirectarg451, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 70, ptr byval(%"any[]") align 8 %indirectarg451), !dbg !3415
  unreachable, !dbg !3415

panic465:                                         ; preds = %and.rhs461
  store i64 %244, ptr %taddr466, align 8
  %717 = insertvalue %any undef, ptr %taddr466, 0
  %718 = insertvalue %any %717, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add463, ptr %taddr467, align 8
  %719 = insertvalue %any undef, ptr %taddr467, 0
  %720 = insertvalue %any %719, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %718, ptr %varargslots468, align 16
  %ptradd469 = getelementptr inbounds i8, ptr %varargslots468, i64 16
  store %any %720, ptr %ptradd469, align 16
  %721 = insertvalue %"any[]" undef, ptr %varargslots468, 0
  %"$$temp470" = insertvalue %"any[]" %721, i64 2, 1
  store %"any[]" %"$$temp470", ptr %indirectarg471, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 74, ptr byval(%"any[]") align 8 %indirectarg471), !dbg !3426
  unreachable, !dbg !3426

panic510:                                         ; preds = %if.then508
  store i64 %sext, ptr %taddr511, align 8
  %722 = insertvalue %any undef, ptr %taddr511, 0
  %723 = insertvalue %any %722, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %723, ptr %varargslots512, align 16
  %724 = insertvalue %"any[]" undef, ptr %varargslots512, 0
  %"$$temp513" = insertvalue %"any[]" %724, i64 1, 1
  store %"any[]" %"$$temp513", ptr %indirectarg514, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg514), !dbg !3448
  unreachable, !dbg !3448

panic517:                                         ; preds = %checkok515
  store i64 128, ptr %taddr518, align 8
  %725 = insertvalue %any undef, ptr %taddr518, 0
  %726 = insertvalue %any %725, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr519, align 8
  %727 = insertvalue %any undef, ptr %taddr519, 0
  %728 = insertvalue %any %727, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %726, ptr %varargslots520, align 16
  %ptradd521 = getelementptr inbounds i8, ptr %varargslots520, i64 16
  store %any %728, ptr %ptradd521, align 16
  %729 = insertvalue %"any[]" undef, ptr %varargslots520, 0
  %"$$temp522" = insertvalue %"any[]" %729, i64 2, 1
  store %"any[]" %"$$temp522", ptr %indirectarg523, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg523), !dbg !3448
  unreachable, !dbg !3448

panic527:                                         ; preds = %checkok524
  store i64 %sext525, ptr %taddr528, align 8
  %730 = insertvalue %any undef, ptr %taddr528, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %731, ptr %varargslots529, align 16
  %732 = insertvalue %"any[]" undef, ptr %varargslots529, 0
  %"$$temp530" = insertvalue %"any[]" %732, i64 1, 1
  store %"any[]" %"$$temp530", ptr %indirectarg531, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg531), !dbg !3450
  unreachable, !dbg !3450

panic534:                                         ; preds = %checkok532
  store i64 128, ptr %taddr535, align 8
  %733 = insertvalue %any undef, ptr %taddr535, 0
  %734 = insertvalue %any %733, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext525, ptr %taddr536, align 8
  %735 = insertvalue %any undef, ptr %taddr536, 0
  %736 = insertvalue %any %735, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %734, ptr %varargslots537, align 16
  %ptradd538 = getelementptr inbounds i8, ptr %varargslots537, i64 16
  store %any %736, ptr %ptradd538, align 16
  %737 = insertvalue %"any[]" undef, ptr %varargslots537, 0
  %"$$temp539" = insertvalue %"any[]" %737, i64 2, 1
  store %"any[]" %"$$temp539", ptr %indirectarg540, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 94, ptr byval(%"any[]") align 8 %indirectarg540), !dbg !3450
  unreachable, !dbg !3450

panic550:                                         ; preds = %if.else547
  store i64 %sext548, ptr %taddr551, align 8
  %738 = insertvalue %any undef, ptr %taddr551, 0
  %739 = insertvalue %any %738, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %739, ptr %varargslots552, align 16
  %740 = insertvalue %"any[]" undef, ptr %varargslots552, 0
  %"$$temp553" = insertvalue %"any[]" %740, i64 1, 1
  store %"any[]" %"$$temp553", ptr %indirectarg554, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 98, ptr byval(%"any[]") align 8 %indirectarg554), !dbg !3453
  unreachable, !dbg !3453

panic557:                                         ; preds = %checkok555
  store i64 128, ptr %taddr558, align 8
  %741 = insertvalue %any undef, ptr %taddr558, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext548, ptr %taddr559, align 8
  %743 = insertvalue %any undef, ptr %taddr559, 0
  %744 = insertvalue %any %743, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %742, ptr %varargslots560, align 16
  %ptradd561 = getelementptr inbounds i8, ptr %varargslots560, i64 16
  store %any %744, ptr %ptradd561, align 16
  %745 = insertvalue %"any[]" undef, ptr %varargslots560, 0
  %"$$temp562" = insertvalue %"any[]" %745, i64 2, 1
  store %"any[]" %"$$temp562", ptr %indirectarg563, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 98, ptr byval(%"any[]") align 8 %indirectarg563), !dbg !3453
  unreachable, !dbg !3453

panic591:                                         ; preds = %assert_ok587
  store i64 %285, ptr %taddr592, align 8
  %746 = insertvalue %any undef, ptr %taddr592, 0
  %747 = insertvalue %any %746, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add589, ptr %taddr593, align 8
  %748 = insertvalue %any undef, ptr %taddr593, 0
  %749 = insertvalue %any %748, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %747, ptr %varargslots594, align 16
  %ptradd595 = getelementptr inbounds i8, ptr %varargslots594, i64 16
  store %any %749, ptr %ptradd595, align 16
  %750 = insertvalue %"any[]" undef, ptr %varargslots594, 0
  %"$$temp596" = insertvalue %"any[]" %750, i64 2, 1
  store %"any[]" %"$$temp596", ptr %indirectarg597, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 113, ptr byval(%"any[]") align 8 %indirectarg597), !dbg !3474
  unreachable, !dbg !3474

panic618:                                         ; preds = %if.exit615
  store i64 %301, ptr %taddr619, align 8
  %751 = insertvalue %any undef, ptr %taddr619, 0
  %752 = insertvalue %any %751, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add616, ptr %taddr620, align 8
  %753 = insertvalue %any undef, ptr %taddr620, 0
  %754 = insertvalue %any %753, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %752, ptr %varargslots621, align 16
  %ptradd622 = getelementptr inbounds i8, ptr %varargslots621, i64 16
  store %any %754, ptr %ptradd622, align 16
  %755 = insertvalue %"any[]" undef, ptr %varargslots621, 0
  %"$$temp623" = insertvalue %"any[]" %755, i64 2, 1
  store %"any[]" %"$$temp623", ptr %indirectarg624, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 120, ptr byval(%"any[]") align 8 %indirectarg624), !dbg !3488
  unreachable, !dbg !3488

panic627:                                         ; preds = %checkok625
  store i64 %add616, ptr %taddr628, align 8
  %756 = insertvalue %any undef, ptr %taddr628, 0
  %757 = insertvalue %any %756, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %757, ptr %varargslots629, align 16
  %758 = insertvalue %"any[]" undef, ptr %varargslots629, 0
  %"$$temp630" = insertvalue %"any[]" %758, i64 1, 1
  store %"any[]" %"$$temp630", ptr %indirectarg631, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.75, i64 22, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 120, ptr byval(%"any[]") align 8 %indirectarg631), !dbg !3487
  unreachable, !dbg !3487

panic684:                                         ; preds = %loop.body681
  store i64 %sext682, ptr %taddr685, align 8
  %759 = insertvalue %any undef, ptr %taddr685, 0
  %760 = insertvalue %any %759, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %760, ptr %varargslots686, align 16
  %761 = insertvalue %"any[]" undef, ptr %varargslots686, 0
  %"$$temp687" = insertvalue %"any[]" %761, i64 1, 1
  store %"any[]" %"$$temp687", ptr %indirectarg688, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 138, ptr byval(%"any[]") align 8 %indirectarg688), !dbg !3516
  unreachable, !dbg !3516

panic691:                                         ; preds = %checkok689
  store i64 128, ptr %taddr692, align 8
  %762 = insertvalue %any undef, ptr %taddr692, 0
  %763 = insertvalue %any %762, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext682, ptr %taddr693, align 8
  %764 = insertvalue %any undef, ptr %taddr693, 0
  %765 = insertvalue %any %764, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %763, ptr %varargslots694, align 16
  %ptradd695 = getelementptr inbounds i8, ptr %varargslots694, i64 16
  store %any %765, ptr %ptradd695, align 16
  %766 = insertvalue %"any[]" undef, ptr %varargslots694, 0
  %"$$temp696" = insertvalue %"any[]" %766, i64 2, 1
  store %"any[]" %"$$temp696", ptr %indirectarg697, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 138, ptr byval(%"any[]") align 8 %indirectarg697), !dbg !3516
  unreachable, !dbg !3516

panic730:                                         ; preds = %if.then724
  store i64 %sub728, ptr %taddr731, align 8
  %767 = insertvalue %any undef, ptr %taddr731, 0
  %768 = insertvalue %any %767, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %768, ptr %varargslots732, align 16
  %769 = insertvalue %"any[]" undef, ptr %varargslots732, 0
  %"$$temp733" = insertvalue %"any[]" %769, i64 1, 1
  store %"any[]" %"$$temp733", ptr %indirectarg734, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 152, ptr byval(%"any[]") align 8 %indirectarg734), !dbg !3543
  unreachable, !dbg !3543

panic737:                                         ; preds = %checkok735
  store i64 8, ptr %taddr738, align 8
  %770 = insertvalue %any undef, ptr %taddr738, 0
  %771 = insertvalue %any %770, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub728, ptr %taddr739, align 8
  %772 = insertvalue %any undef, ptr %taddr739, 0
  %773 = insertvalue %any %772, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %771, ptr %varargslots740, align 16
  %ptradd741 = getelementptr inbounds i8, ptr %varargslots740, i64 16
  store %any %773, ptr %ptradd741, align 16
  %774 = insertvalue %"any[]" undef, ptr %varargslots740, 0
  %"$$temp742" = insertvalue %"any[]" %774, i64 2, 1
  store %"any[]" %"$$temp742", ptr %indirectarg743, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 152, ptr byval(%"any[]") align 8 %indirectarg743), !dbg !3543
  unreachable, !dbg !3543

panic747:                                         ; preds = %checkok744
  %775 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3540
  call void %775(ptr @.panic_msg.79, i64 17, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 152), !dbg !3540
  unreachable, !dbg !3540

panic757:                                         ; preds = %or.rhs756
  store i32 %353, ptr %taddr758, align 4
  %776 = insertvalue %any undef, ptr %taddr758, 0
  %777 = insertvalue %any %776, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %777, ptr %varargslots759, align 16
  %778 = insertvalue %"any[]" undef, ptr %varargslots759, 0
  %"$$temp760" = insertvalue %"any[]" %778, i64 1, 1
  store %"any[]" %"$$temp760", ptr %indirectarg761, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 154, ptr byval(%"any[]") align 8 %indirectarg761), !dbg !3553
  unreachable, !dbg !3553

panic773:                                         ; preds = %if.then767
  store i64 %sub771, ptr %taddr774, align 8
  %779 = insertvalue %any undef, ptr %taddr774, 0
  %780 = insertvalue %any %779, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %780, ptr %varargslots775, align 16
  %781 = insertvalue %"any[]" undef, ptr %varargslots775, 0
  %"$$temp776" = insertvalue %"any[]" %781, i64 1, 1
  store %"any[]" %"$$temp776", ptr %indirectarg777, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 154, ptr byval(%"any[]") align 8 %indirectarg777), !dbg !3556
  unreachable, !dbg !3556

panic780:                                         ; preds = %checkok778
  store i64 8, ptr %taddr781, align 8
  %782 = insertvalue %any undef, ptr %taddr781, 0
  %783 = insertvalue %any %782, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub771, ptr %taddr782, align 8
  %784 = insertvalue %any undef, ptr %taddr782, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %783, ptr %varargslots783, align 16
  %ptradd784 = getelementptr inbounds i8, ptr %varargslots783, i64 16
  store %any %785, ptr %ptradd784, align 16
  %786 = insertvalue %"any[]" undef, ptr %varargslots783, 0
  %"$$temp785" = insertvalue %"any[]" %786, i64 2, 1
  store %"any[]" %"$$temp785", ptr %indirectarg786, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 154, ptr byval(%"any[]") align 8 %indirectarg786), !dbg !3556
  unreachable, !dbg !3556

panic802:                                         ; preds = %cond.phi
  store i64 %sub800, ptr %taddr803, align 8
  %787 = insertvalue %any undef, ptr %taddr803, 0
  %788 = insertvalue %any %787, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %788, ptr %varargslots804, align 16
  %789 = insertvalue %"any[]" undef, ptr %varargslots804, 0
  %"$$temp805" = insertvalue %"any[]" %789, i64 1, 1
  store %"any[]" %"$$temp805", ptr %indirectarg806, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 161, ptr byval(%"any[]") align 8 %indirectarg806), !dbg !3567
  unreachable, !dbg !3567

panic809:                                         ; preds = %checkok807
  store i64 8, ptr %taddr810, align 8
  %790 = insertvalue %any undef, ptr %taddr810, 0
  %791 = insertvalue %any %790, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub800, ptr %taddr811, align 8
  %792 = insertvalue %any undef, ptr %taddr811, 0
  %793 = insertvalue %any %792, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %791, ptr %varargslots812, align 16
  %ptradd813 = getelementptr inbounds i8, ptr %varargslots812, i64 16
  store %any %793, ptr %ptradd813, align 16
  %794 = insertvalue %"any[]" undef, ptr %varargslots812, 0
  %"$$temp814" = insertvalue %"any[]" %794, i64 2, 1
  store %"any[]" %"$$temp814", ptr %indirectarg815, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 161, ptr byval(%"any[]") align 8 %indirectarg815), !dbg !3567
  unreachable, !dbg !3567

panic823:                                         ; preds = %loop.body820
  store i64 %sext821, ptr %taddr824, align 8
  %795 = insertvalue %any undef, ptr %taddr824, 0
  %796 = insertvalue %any %795, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %796, ptr %varargslots825, align 16
  %797 = insertvalue %"any[]" undef, ptr %varargslots825, 0
  %"$$temp826" = insertvalue %"any[]" %797, i64 1, 1
  store %"any[]" %"$$temp826", ptr %indirectarg827, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 165, ptr byval(%"any[]") align 8 %indirectarg827), !dbg !3578
  unreachable, !dbg !3578

panic830:                                         ; preds = %checkok828
  store i64 128, ptr %taddr831, align 8
  %798 = insertvalue %any undef, ptr %taddr831, 0
  %799 = insertvalue %any %798, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext821, ptr %taddr832, align 8
  %800 = insertvalue %any undef, ptr %taddr832, 0
  %801 = insertvalue %any %800, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %799, ptr %varargslots833, align 16
  %ptradd834 = getelementptr inbounds i8, ptr %varargslots833, i64 16
  store %any %801, ptr %ptradd834, align 16
  %802 = insertvalue %"any[]" undef, ptr %varargslots833, 0
  %"$$temp835" = insertvalue %"any[]" %802, i64 2, 1
  store %"any[]" %"$$temp835", ptr %indirectarg836, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 165, ptr byval(%"any[]") align 8 %indirectarg836), !dbg !3578
  unreachable, !dbg !3578

panic840:                                         ; preds = %checkok837
  %803 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3580
  call void %803(ptr @.panic_msg.81, i64 10, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 165), !dbg !3580
  unreachable, !dbg !3580

panic845:                                         ; preds = %checkok841
  store i64 %sext843, ptr %taddr846, align 8
  %804 = insertvalue %any undef, ptr %taddr846, 0
  %805 = insertvalue %any %804, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %805, ptr %varargslots847, align 16
  %806 = insertvalue %"any[]" undef, ptr %varargslots847, 0
  %"$$temp848" = insertvalue %"any[]" %806, i64 1, 1
  store %"any[]" %"$$temp848", ptr %indirectarg849, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg849), !dbg !3581
  unreachable, !dbg !3581

panic852:                                         ; preds = %checkok850
  store i64 128, ptr %taddr853, align 8
  %807 = insertvalue %any undef, ptr %taddr853, 0
  %808 = insertvalue %any %807, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext843, ptr %taddr854, align 8
  %809 = insertvalue %any undef, ptr %taddr854, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %808, ptr %varargslots855, align 16
  %ptradd856 = getelementptr inbounds i8, ptr %varargslots855, i64 16
  store %any %810, ptr %ptradd856, align 16
  %811 = insertvalue %"any[]" undef, ptr %varargslots855, 0
  %"$$temp857" = insertvalue %"any[]" %811, i64 2, 1
  store %"any[]" %"$$temp857", ptr %indirectarg858, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg858), !dbg !3581
  unreachable, !dbg !3581

panic863:                                         ; preds = %checkok859
  store i64 %sext861, ptr %taddr864, align 8
  %812 = insertvalue %any undef, ptr %taddr864, 0
  %813 = insertvalue %any %812, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %813, ptr %varargslots865, align 16
  %814 = insertvalue %"any[]" undef, ptr %varargslots865, 0
  %"$$temp866" = insertvalue %"any[]" %814, i64 1, 1
  store %"any[]" %"$$temp866", ptr %indirectarg867, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg867), !dbg !3582
  unreachable, !dbg !3582

panic870:                                         ; preds = %checkok868
  store i64 128, ptr %taddr871, align 8
  %815 = insertvalue %any undef, ptr %taddr871, 0
  %816 = insertvalue %any %815, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext861, ptr %taddr872, align 8
  %817 = insertvalue %any undef, ptr %taddr872, 0
  %818 = insertvalue %any %817, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %816, ptr %varargslots873, align 16
  %ptradd874 = getelementptr inbounds i8, ptr %varargslots873, i64 16
  store %any %818, ptr %ptradd874, align 16
  %819 = insertvalue %"any[]" undef, ptr %varargslots873, 0
  %"$$temp875" = insertvalue %"any[]" %819, i64 2, 1
  store %"any[]" %"$$temp875", ptr %indirectarg876, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 166, ptr byval(%"any[]") align 8 %indirectarg876), !dbg !3582
  unreachable, !dbg !3582

panic880:                                         ; preds = %checkok877
  %820 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3584
  call void %820(ptr @.panic_msg.79, i64 17, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 166), !dbg !3584
  unreachable, !dbg !3584

panic884:                                         ; preds = %checkok881
  %821 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3587
  call void %821(ptr @.panic_msg.79, i64 17, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 167), !dbg !3587
  unreachable, !dbg !3587

panic892:                                         ; preds = %and.rhs889
  store i64 %sext890, ptr %taddr893, align 8
  %822 = insertvalue %any undef, ptr %taddr893, 0
  %823 = insertvalue %any %822, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %823, ptr %varargslots894, align 16
  %824 = insertvalue %"any[]" undef, ptr %varargslots894, 0
  %"$$temp895" = insertvalue %"any[]" %824, i64 1, 1
  store %"any[]" %"$$temp895", ptr %indirectarg896, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 168, ptr byval(%"any[]") align 8 %indirectarg896), !dbg !3591
  unreachable, !dbg !3591

panic899:                                         ; preds = %checkok897
  store i64 128, ptr %taddr900, align 8
  %825 = insertvalue %any undef, ptr %taddr900, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext890, ptr %taddr901, align 8
  %827 = insertvalue %any undef, ptr %taddr901, 0
  %828 = insertvalue %any %827, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %826, ptr %varargslots902, align 16
  %ptradd903 = getelementptr inbounds i8, ptr %varargslots902, i64 16
  store %any %828, ptr %ptradd903, align 16
  %829 = insertvalue %"any[]" undef, ptr %varargslots902, 0
  %"$$temp904" = insertvalue %"any[]" %829, i64 2, 1
  store %"any[]" %"$$temp904", ptr %indirectarg905, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 168, ptr byval(%"any[]") align 8 %indirectarg905), !dbg !3591
  unreachable, !dbg !3591

panic923:                                         ; preds = %if.then919
  store i64 %sext921, ptr %taddr924, align 8
  %830 = insertvalue %any undef, ptr %taddr924, 0
  %831 = insertvalue %any %830, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %831, ptr %varargslots925, align 16
  %832 = insertvalue %"any[]" undef, ptr %varargslots925, 0
  %"$$temp926" = insertvalue %"any[]" %832, i64 1, 1
  store %"any[]" %"$$temp926", ptr %indirectarg927, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 174, ptr byval(%"any[]") align 8 %indirectarg927), !dbg !3597
  unreachable, !dbg !3597

panic930:                                         ; preds = %checkok928
  store i64 128, ptr %taddr931, align 8
  %833 = insertvalue %any undef, ptr %taddr931, 0
  %834 = insertvalue %any %833, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext921, ptr %taddr932, align 8
  %835 = insertvalue %any undef, ptr %taddr932, 0
  %836 = insertvalue %any %835, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %834, ptr %varargslots933, align 16
  %ptradd934 = getelementptr inbounds i8, ptr %varargslots933, i64 16
  store %any %836, ptr %ptradd934, align 16
  %837 = insertvalue %"any[]" undef, ptr %varargslots933, 0
  %"$$temp935" = insertvalue %"any[]" %837, i64 2, 1
  store %"any[]" %"$$temp935", ptr %indirectarg936, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 174, ptr byval(%"any[]") align 8 %indirectarg936), !dbg !3597
  unreachable, !dbg !3597

panic950:                                         ; preds = %and.rhs947
  store i64 %sext948, ptr %taddr951, align 8
  %838 = insertvalue %any undef, ptr %taddr951, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %839, ptr %varargslots952, align 16
  %840 = insertvalue %"any[]" undef, ptr %varargslots952, 0
  %"$$temp953" = insertvalue %"any[]" %840, i64 1, 1
  store %"any[]" %"$$temp953", ptr %indirectarg954, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 179, ptr byval(%"any[]") align 8 %indirectarg954), !dbg !3606
  unreachable, !dbg !3606

panic957:                                         ; preds = %checkok955
  store i64 128, ptr %taddr958, align 8
  %841 = insertvalue %any undef, ptr %taddr958, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext948, ptr %taddr959, align 8
  %843 = insertvalue %any undef, ptr %taddr959, 0
  %844 = insertvalue %any %843, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %842, ptr %varargslots960, align 16
  %ptradd961 = getelementptr inbounds i8, ptr %varargslots960, i64 16
  store %any %844, ptr %ptradd961, align 16
  %845 = insertvalue %"any[]" undef, ptr %varargslots960, 0
  %"$$temp962" = insertvalue %"any[]" %845, i64 2, 1
  store %"any[]" %"$$temp962", ptr %indirectarg963, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 179, ptr byval(%"any[]") align 8 %indirectarg963), !dbg !3606
  unreachable, !dbg !3606

panic980:                                         ; preds = %loop.body976
  store i64 %sext978, ptr %taddr981, align 8
  %846 = insertvalue %any undef, ptr %taddr981, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %847, ptr %varargslots982, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots982, 0
  %"$$temp983" = insertvalue %"any[]" %848, i64 1, 1
  store %"any[]" %"$$temp983", ptr %indirectarg984, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 185, ptr byval(%"any[]") align 8 %indirectarg984), !dbg !3618
  unreachable, !dbg !3618

panic987:                                         ; preds = %checkok985
  store i64 128, ptr %taddr988, align 8
  %849 = insertvalue %any undef, ptr %taddr988, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext978, ptr %taddr989, align 8
  %851 = insertvalue %any undef, ptr %taddr989, 0
  %852 = insertvalue %any %851, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %850, ptr %varargslots990, align 16
  %ptradd991 = getelementptr inbounds i8, ptr %varargslots990, i64 16
  store %any %852, ptr %ptradd991, align 16
  %853 = insertvalue %"any[]" undef, ptr %varargslots990, 0
  %"$$temp992" = insertvalue %"any[]" %853, i64 2, 1
  store %"any[]" %"$$temp992", ptr %indirectarg993, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 185, ptr byval(%"any[]") align 8 %indirectarg993), !dbg !3618
  unreachable, !dbg !3618

panic1005:                                        ; preds = %if.then1000
  store i64 %sext1003, ptr %taddr1006, align 8
  %854 = insertvalue %any undef, ptr %taddr1006, 0
  %855 = insertvalue %any %854, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %855, ptr %varargslots1007, align 16
  %856 = insertvalue %"any[]" undef, ptr %varargslots1007, 0
  %"$$temp1008" = insertvalue %"any[]" %856, i64 1, 1
  store %"any[]" %"$$temp1008", ptr %indirectarg1009, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 189, ptr byval(%"any[]") align 8 %indirectarg1009), !dbg !3625
  unreachable, !dbg !3625

panic1012:                                        ; preds = %checkok1010
  store i64 128, ptr %taddr1013, align 8
  %857 = insertvalue %any undef, ptr %taddr1013, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1003, ptr %taddr1014, align 8
  %859 = insertvalue %any undef, ptr %taddr1014, 0
  %860 = insertvalue %any %859, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %858, ptr %varargslots1015, align 16
  %ptradd1016 = getelementptr inbounds i8, ptr %varargslots1015, i64 16
  store %any %860, ptr %ptradd1016, align 16
  %861 = insertvalue %"any[]" undef, ptr %varargslots1015, 0
  %"$$temp1017" = insertvalue %"any[]" %861, i64 2, 1
  store %"any[]" %"$$temp1017", ptr %indirectarg1018, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 189, ptr byval(%"any[]") align 8 %indirectarg1018), !dbg !3625
  unreachable, !dbg !3625

panic1026:                                        ; preds = %if.else1023
  store i64 %sext1024, ptr %taddr1027, align 8
  %862 = insertvalue %any undef, ptr %taddr1027, 0
  %863 = insertvalue %any %862, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %863, ptr %varargslots1028, align 16
  %864 = insertvalue %"any[]" undef, ptr %varargslots1028, 0
  %"$$temp1029" = insertvalue %"any[]" %864, i64 1, 1
  store %"any[]" %"$$temp1029", ptr %indirectarg1030, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 194, ptr byval(%"any[]") align 8 %indirectarg1030), !dbg !3630
  unreachable, !dbg !3630

panic1033:                                        ; preds = %checkok1031
  store i64 128, ptr %taddr1034, align 8
  %865 = insertvalue %any undef, ptr %taddr1034, 0
  %866 = insertvalue %any %865, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1024, ptr %taddr1035, align 8
  %867 = insertvalue %any undef, ptr %taddr1035, 0
  %868 = insertvalue %any %867, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %866, ptr %varargslots1036, align 16
  %ptradd1037 = getelementptr inbounds i8, ptr %varargslots1036, i64 16
  store %any %868, ptr %ptradd1037, align 16
  %869 = insertvalue %"any[]" undef, ptr %varargslots1036, 0
  %"$$temp1038" = insertvalue %"any[]" %869, i64 2, 1
  store %"any[]" %"$$temp1038", ptr %indirectarg1039, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 194, ptr byval(%"any[]") align 8 %indirectarg1039), !dbg !3630
  unreachable, !dbg !3630

panic1054:                                        ; preds = %and.rhs1051
  store i64 %sext1052, ptr %taddr1055, align 8
  %870 = insertvalue %any undef, ptr %taddr1055, 0
  %871 = insertvalue %any %870, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %871, ptr %varargslots1056, align 16
  %872 = insertvalue %"any[]" undef, ptr %varargslots1056, 0
  %"$$temp1057" = insertvalue %"any[]" %872, i64 1, 1
  store %"any[]" %"$$temp1057", ptr %indirectarg1058, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 196, ptr byval(%"any[]") align 8 %indirectarg1058), !dbg !3636
  unreachable, !dbg !3636

panic1061:                                        ; preds = %checkok1059
  store i64 128, ptr %taddr1062, align 8
  %873 = insertvalue %any undef, ptr %taddr1062, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1052, ptr %taddr1063, align 8
  %875 = insertvalue %any undef, ptr %taddr1063, 0
  %876 = insertvalue %any %875, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %874, ptr %varargslots1064, align 16
  %ptradd1065 = getelementptr inbounds i8, ptr %varargslots1064, i64 16
  store %any %876, ptr %ptradd1065, align 16
  %877 = insertvalue %"any[]" undef, ptr %varargslots1064, 0
  %"$$temp1066" = insertvalue %"any[]" %877, i64 2, 1
  store %"any[]" %"$$temp1066", ptr %indirectarg1067, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 196, ptr byval(%"any[]") align 8 %indirectarg1067), !dbg !3636
  unreachable, !dbg !3636

panic1094:                                        ; preds = %if.then1087
  store i64 %sext1092, ptr %taddr1095, align 8
  %878 = insertvalue %any undef, ptr %taddr1095, 0
  %879 = insertvalue %any %878, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %879, ptr %varargslots1096, align 16
  %880 = insertvalue %"any[]" undef, ptr %varargslots1096, 0
  %"$$temp1097" = insertvalue %"any[]" %880, i64 1, 1
  store %"any[]" %"$$temp1097", ptr %indirectarg1098, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1098), !dbg !3650
  unreachable, !dbg !3650

panic1101:                                        ; preds = %checkok1099
  store i64 128, ptr %taddr1102, align 8
  %881 = insertvalue %any undef, ptr %taddr1102, 0
  %882 = insertvalue %any %881, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1092, ptr %taddr1103, align 8
  %883 = insertvalue %any undef, ptr %taddr1103, 0
  %884 = insertvalue %any %883, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %882, ptr %varargslots1104, align 16
  %ptradd1105 = getelementptr inbounds i8, ptr %varargslots1104, i64 16
  store %any %884, ptr %ptradd1105, align 16
  %885 = insertvalue %"any[]" undef, ptr %varargslots1104, 0
  %"$$temp1106" = insertvalue %"any[]" %885, i64 2, 1
  store %"any[]" %"$$temp1106", ptr %indirectarg1107, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1107), !dbg !3650
  unreachable, !dbg !3650

panic1112:                                        ; preds = %checkok1108
  store i64 %sext1110, ptr %taddr1113, align 8
  %886 = insertvalue %any undef, ptr %taddr1113, 0
  %887 = insertvalue %any %886, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %887, ptr %varargslots1114, align 16
  %888 = insertvalue %"any[]" undef, ptr %varargslots1114, 0
  %"$$temp1115" = insertvalue %"any[]" %888, i64 1, 1
  store %"any[]" %"$$temp1115", ptr %indirectarg1116, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1116), !dbg !3651
  unreachable, !dbg !3651

panic1119:                                        ; preds = %checkok1117
  store i64 128, ptr %taddr1120, align 8
  %889 = insertvalue %any undef, ptr %taddr1120, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1110, ptr %taddr1121, align 8
  %891 = insertvalue %any undef, ptr %taddr1121, 0
  %892 = insertvalue %any %891, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %890, ptr %varargslots1122, align 16
  %ptradd1123 = getelementptr inbounds i8, ptr %varargslots1122, i64 16
  store %any %892, ptr %ptradd1123, align 16
  %893 = insertvalue %"any[]" undef, ptr %varargslots1122, 0
  %"$$temp1124" = insertvalue %"any[]" %893, i64 2, 1
  store %"any[]" %"$$temp1124", ptr %indirectarg1125, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 206, ptr byval(%"any[]") align 8 %indirectarg1125), !dbg !3651
  unreachable, !dbg !3651

panic1132:                                        ; preds = %if.exit1129
  store i64 %sext1130, ptr %taddr1133, align 8
  %894 = insertvalue %any undef, ptr %taddr1133, 0
  %895 = insertvalue %any %894, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %895, ptr %varargslots1134, align 16
  %896 = insertvalue %"any[]" undef, ptr %varargslots1134, 0
  %"$$temp1135" = insertvalue %"any[]" %896, i64 1, 1
  store %"any[]" %"$$temp1135", ptr %indirectarg1136, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 208, ptr byval(%"any[]") align 8 %indirectarg1136), !dbg !3653
  unreachable, !dbg !3653

panic1139:                                        ; preds = %checkok1137
  store i64 128, ptr %taddr1140, align 8
  %897 = insertvalue %any undef, ptr %taddr1140, 0
  %898 = insertvalue %any %897, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1130, ptr %taddr1141, align 8
  %899 = insertvalue %any undef, ptr %taddr1141, 0
  %900 = insertvalue %any %899, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %898, ptr %varargslots1142, align 16
  %ptradd1143 = getelementptr inbounds i8, ptr %varargslots1142, i64 16
  store %any %900, ptr %ptradd1143, align 16
  %901 = insertvalue %"any[]" undef, ptr %varargslots1142, 0
  %"$$temp1144" = insertvalue %"any[]" %901, i64 2, 1
  store %"any[]" %"$$temp1144", ptr %indirectarg1145, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 208, ptr byval(%"any[]") align 8 %indirectarg1145), !dbg !3653
  unreachable, !dbg !3653

panic1161:                                        ; preds = %or.rhs1158
  store i64 %sext1159, ptr %taddr1162, align 8
  %902 = insertvalue %any undef, ptr %taddr1162, 0
  %903 = insertvalue %any %902, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %903, ptr %varargslots1163, align 16
  %904 = insertvalue %"any[]" undef, ptr %varargslots1163, 0
  %"$$temp1164" = insertvalue %"any[]" %904, i64 1, 1
  store %"any[]" %"$$temp1164", ptr %indirectarg1165, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1165), !dbg !3674
  unreachable, !dbg !3674

panic1168:                                        ; preds = %checkok1166
  store i64 128, ptr %taddr1169, align 8
  %905 = insertvalue %any undef, ptr %taddr1169, 0
  %906 = insertvalue %any %905, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1159, ptr %taddr1170, align 8
  %907 = insertvalue %any undef, ptr %taddr1170, 0
  %908 = insertvalue %any %907, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %906, ptr %varargslots1171, align 16
  %ptradd1172 = getelementptr inbounds i8, ptr %varargslots1171, i64 16
  store %any %908, ptr %ptradd1172, align 16
  %909 = insertvalue %"any[]" undef, ptr %varargslots1171, 0
  %"$$temp1173" = insertvalue %"any[]" %909, i64 2, 1
  store %"any[]" %"$$temp1173", ptr %indirectarg1174, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1174), !dbg !3674
  unreachable, !dbg !3674

panic1179:                                        ; preds = %checkok1175
  store i64 %sext1177, ptr %taddr1180, align 8
  %910 = insertvalue %any undef, ptr %taddr1180, 0
  %911 = insertvalue %any %910, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %911, ptr %varargslots1181, align 16
  %912 = insertvalue %"any[]" undef, ptr %varargslots1181, 0
  %"$$temp1182" = insertvalue %"any[]" %912, i64 1, 1
  store %"any[]" %"$$temp1182", ptr %indirectarg1183, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1183), !dbg !3675
  unreachable, !dbg !3675

panic1186:                                        ; preds = %checkok1184
  store i64 2, ptr %taddr1187, align 8
  %913 = insertvalue %any undef, ptr %taddr1187, 0
  %914 = insertvalue %any %913, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1177, ptr %taddr1188, align 8
  %915 = insertvalue %any undef, ptr %taddr1188, 0
  %916 = insertvalue %any %915, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %914, ptr %varargslots1189, align 16
  %ptradd1190 = getelementptr inbounds i8, ptr %varargslots1189, i64 16
  store %any %916, ptr %ptradd1190, align 16
  %917 = insertvalue %"any[]" undef, ptr %varargslots1189, 0
  %"$$temp1191" = insertvalue %"any[]" %917, i64 2, 1
  store %"any[]" %"$$temp1191", ptr %indirectarg1192, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 221, ptr byval(%"any[]") align 8 %indirectarg1192), !dbg !3675
  unreachable, !dbg !3675

panic1204:                                        ; preds = %if.exit1199
  store i64 %sext1202, ptr %taddr1205, align 8
  %918 = insertvalue %any undef, ptr %taddr1205, 0
  %919 = insertvalue %any %918, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %919, ptr %varargslots1206, align 16
  %920 = insertvalue %"any[]" undef, ptr %varargslots1206, 0
  %"$$temp1207" = insertvalue %"any[]" %920, i64 1, 1
  store %"any[]" %"$$temp1207", ptr %indirectarg1208, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1208), !dbg !3680
  unreachable, !dbg !3680

panic1211:                                        ; preds = %checkok1209
  store i64 128, ptr %taddr1212, align 8
  %921 = insertvalue %any undef, ptr %taddr1212, 0
  %922 = insertvalue %any %921, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1202, ptr %taddr1213, align 8
  %923 = insertvalue %any undef, ptr %taddr1213, 0
  %924 = insertvalue %any %923, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %922, ptr %varargslots1214, align 16
  %ptradd1215 = getelementptr inbounds i8, ptr %varargslots1214, i64 16
  store %any %924, ptr %ptradd1215, align 16
  %925 = insertvalue %"any[]" undef, ptr %varargslots1214, 0
  %"$$temp1216" = insertvalue %"any[]" %925, i64 2, 1
  store %"any[]" %"$$temp1216", ptr %indirectarg1217, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1217), !dbg !3680
  unreachable, !dbg !3680

panic1222:                                        ; preds = %checkok1218
  store i64 %sext1220, ptr %taddr1223, align 8
  %926 = insertvalue %any undef, ptr %taddr1223, 0
  %927 = insertvalue %any %926, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %927, ptr %varargslots1224, align 16
  %928 = insertvalue %"any[]" undef, ptr %varargslots1224, 0
  %"$$temp1225" = insertvalue %"any[]" %928, i64 1, 1
  store %"any[]" %"$$temp1225", ptr %indirectarg1226, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1226), !dbg !3682
  unreachable, !dbg !3682

panic1229:                                        ; preds = %checkok1227
  store i64 2, ptr %taddr1230, align 8
  %929 = insertvalue %any undef, ptr %taddr1230, 0
  %930 = insertvalue %any %929, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1220, ptr %taddr1231, align 8
  %931 = insertvalue %any undef, ptr %taddr1231, 0
  %932 = insertvalue %any %931, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %930, ptr %varargslots1232, align 16
  %ptradd1233 = getelementptr inbounds i8, ptr %varargslots1232, i64 16
  store %any %932, ptr %ptradd1233, align 16
  %933 = insertvalue %"any[]" undef, ptr %varargslots1232, 0
  %"$$temp1234" = insertvalue %"any[]" %933, i64 2, 1
  store %"any[]" %"$$temp1234", ptr %indirectarg1235, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 226, ptr byval(%"any[]") align 8 %indirectarg1235), !dbg !3682
  unreachable, !dbg !3682

panic1260:                                        ; preds = %loop.body1256
  store i64 %sext1258, ptr %taddr1261, align 8
  %934 = insertvalue %any undef, ptr %taddr1261, 0
  %935 = insertvalue %any %934, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %935, ptr %varargslots1262, align 16
  %936 = insertvalue %"any[]" undef, ptr %varargslots1262, 0
  %"$$temp1263" = insertvalue %"any[]" %936, i64 1, 1
  store %"any[]" %"$$temp1263", ptr %indirectarg1264, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1264), !dbg !3700
  unreachable, !dbg !3700

panic1267:                                        ; preds = %checkok1265
  store i64 128, ptr %taddr1268, align 8
  %937 = insertvalue %any undef, ptr %taddr1268, 0
  %938 = insertvalue %any %937, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1258, ptr %taddr1269, align 8
  %939 = insertvalue %any undef, ptr %taddr1269, 0
  %940 = insertvalue %any %939, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %938, ptr %varargslots1270, align 16
  %ptradd1271 = getelementptr inbounds i8, ptr %varargslots1270, i64 16
  store %any %940, ptr %ptradd1271, align 16
  %941 = insertvalue %"any[]" undef, ptr %varargslots1270, 0
  %"$$temp1272" = insertvalue %"any[]" %941, i64 2, 1
  store %"any[]" %"$$temp1272", ptr %indirectarg1273, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1273), !dbg !3700
  unreachable, !dbg !3700

panic1276:                                        ; preds = %checkok1274
  store i32 %497, ptr %taddr1277, align 4
  %942 = insertvalue %any undef, ptr %taddr1277, 0
  %943 = insertvalue %any %942, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %943, ptr %varargslots1278, align 16
  %944 = insertvalue %"any[]" undef, ptr %varargslots1278, 0
  %"$$temp1279" = insertvalue %"any[]" %944, i64 1, 1
  store %"any[]" %"$$temp1279", ptr %indirectarg1280, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1280), !dbg !3702
  unreachable, !dbg !3702

panic1283:                                        ; preds = %checkok1281
  store i32 %497, ptr %taddr1284, align 4
  %945 = insertvalue %any undef, ptr %taddr1284, 0
  %946 = insertvalue %any %945, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %946, ptr %varargslots1285, align 16
  %947 = insertvalue %"any[]" undef, ptr %varargslots1285, 0
  %"$$temp1286" = insertvalue %"any[]" %947, i64 1, 1
  store %"any[]" %"$$temp1286", ptr %indirectarg1287, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 233, ptr byval(%"any[]") align 8 %indirectarg1287), !dbg !3702
  unreachable, !dbg !3702

panic1294:                                        ; preds = %checkok1288
  store i64 %sext1292, ptr %taddr1295, align 8
  %948 = insertvalue %any undef, ptr %taddr1295, 0
  %949 = insertvalue %any %948, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %949, ptr %varargslots1296, align 16
  %950 = insertvalue %"any[]" undef, ptr %varargslots1296, 0
  %"$$temp1297" = insertvalue %"any[]" %950, i64 1, 1
  store %"any[]" %"$$temp1297", ptr %indirectarg1298, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1298), !dbg !3704
  unreachable, !dbg !3704

panic1301:                                        ; preds = %checkok1299
  store i64 128, ptr %taddr1302, align 8
  %951 = insertvalue %any undef, ptr %taddr1302, 0
  %952 = insertvalue %any %951, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1292, ptr %taddr1303, align 8
  %953 = insertvalue %any undef, ptr %taddr1303, 0
  %954 = insertvalue %any %953, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %952, ptr %varargslots1304, align 16
  %ptradd1305 = getelementptr inbounds i8, ptr %varargslots1304, i64 16
  store %any %954, ptr %ptradd1305, align 16
  %955 = insertvalue %"any[]" undef, ptr %varargslots1304, 0
  %"$$temp1306" = insertvalue %"any[]" %955, i64 2, 1
  store %"any[]" %"$$temp1306", ptr %indirectarg1307, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1307), !dbg !3704
  unreachable, !dbg !3704

panic1312:                                        ; preds = %checkok1308
  store i64 %sext1310, ptr %taddr1313, align 8
  %956 = insertvalue %any undef, ptr %taddr1313, 0
  %957 = insertvalue %any %956, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %957, ptr %varargslots1314, align 16
  %958 = insertvalue %"any[]" undef, ptr %varargslots1314, 0
  %"$$temp1315" = insertvalue %"any[]" %958, i64 1, 1
  store %"any[]" %"$$temp1315", ptr %indirectarg1316, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1316), !dbg !3705
  unreachable, !dbg !3705

panic1319:                                        ; preds = %checkok1317
  store i64 128, ptr %taddr1320, align 8
  %959 = insertvalue %any undef, ptr %taddr1320, 0
  %960 = insertvalue %any %959, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1310, ptr %taddr1321, align 8
  %961 = insertvalue %any undef, ptr %taddr1321, 0
  %962 = insertvalue %any %961, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %960, ptr %varargslots1322, align 16
  %ptradd1323 = getelementptr inbounds i8, ptr %varargslots1322, i64 16
  store %any %962, ptr %ptradd1323, align 16
  %963 = insertvalue %"any[]" undef, ptr %varargslots1322, 0
  %"$$temp1324" = insertvalue %"any[]" %963, i64 2, 1
  store %"any[]" %"$$temp1324", ptr %indirectarg1325, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1325), !dbg !3705
  unreachable, !dbg !3705

panic1329:                                        ; preds = %checkok1326
  store i32 %508, ptr %taddr1330, align 4
  %964 = insertvalue %any undef, ptr %taddr1330, 0
  %965 = insertvalue %any %964, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %965, ptr %varargslots1331, align 16
  %966 = insertvalue %"any[]" undef, ptr %varargslots1331, 0
  %"$$temp1332" = insertvalue %"any[]" %966, i64 1, 1
  store %"any[]" %"$$temp1332", ptr %indirectarg1333, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 234, ptr byval(%"any[]") align 8 %indirectarg1333), !dbg !3707
  unreachable, !dbg !3707

panic1338:                                        ; preds = %checkok1334
  store i32 %512, ptr %taddr1339, align 4
  %967 = insertvalue %any undef, ptr %taddr1339, 0
  %968 = insertvalue %any %967, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %968, ptr %varargslots1340, align 16
  %969 = insertvalue %"any[]" undef, ptr %varargslots1340, 0
  %"$$temp1341" = insertvalue %"any[]" %969, i64 1, 1
  store %"any[]" %"$$temp1341", ptr %indirectarg1342, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 235, ptr byval(%"any[]") align 8 %indirectarg1342), !dbg !3710
  unreachable, !dbg !3710

panic1345:                                        ; preds = %checkok1343
  store i32 %512, ptr %taddr1346, align 4
  %970 = insertvalue %any undef, ptr %taddr1346, 0
  %971 = insertvalue %any %970, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %971, ptr %varargslots1347, align 16
  %972 = insertvalue %"any[]" undef, ptr %varargslots1347, 0
  %"$$temp1348" = insertvalue %"any[]" %972, i64 1, 1
  store %"any[]" %"$$temp1348", ptr %indirectarg1349, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.80, i64 35, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 235, ptr byval(%"any[]") align 8 %indirectarg1349), !dbg !3710
  unreachable, !dbg !3710

panic1356:                                        ; preds = %and.rhs1353
  store i64 %sext1354, ptr %taddr1357, align 8
  %973 = insertvalue %any undef, ptr %taddr1357, 0
  %974 = insertvalue %any %973, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %974, ptr %varargslots1358, align 16
  %975 = insertvalue %"any[]" undef, ptr %varargslots1358, 0
  %"$$temp1359" = insertvalue %"any[]" %975, i64 1, 1
  store %"any[]" %"$$temp1359", ptr %indirectarg1360, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 236, ptr byval(%"any[]") align 8 %indirectarg1360), !dbg !3714
  unreachable, !dbg !3714

panic1363:                                        ; preds = %checkok1361
  store i64 128, ptr %taddr1364, align 8
  %976 = insertvalue %any undef, ptr %taddr1364, 0
  %977 = insertvalue %any %976, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1354, ptr %taddr1365, align 8
  %978 = insertvalue %any undef, ptr %taddr1365, 0
  %979 = insertvalue %any %978, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %977, ptr %varargslots1366, align 16
  %ptradd1367 = getelementptr inbounds i8, ptr %varargslots1366, i64 16
  store %any %979, ptr %ptradd1367, align 16
  %980 = insertvalue %"any[]" undef, ptr %varargslots1366, 0
  %"$$temp1368" = insertvalue %"any[]" %980, i64 2, 1
  store %"any[]" %"$$temp1368", ptr %indirectarg1369, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 236, ptr byval(%"any[]") align 8 %indirectarg1369), !dbg !3714
  unreachable, !dbg !3714

panic1392:                                        ; preds = %if.then1389
  store i64 %sext1390, ptr %taddr1393, align 8
  %981 = insertvalue %any undef, ptr %taddr1393, 0
  %982 = insertvalue %any %981, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %982, ptr %varargslots1394, align 16
  %983 = insertvalue %"any[]" undef, ptr %varargslots1394, 0
  %"$$temp1395" = insertvalue %"any[]" %983, i64 1, 1
  store %"any[]" %"$$temp1395", ptr %indirectarg1396, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 247, ptr byval(%"any[]") align 8 %indirectarg1396), !dbg !3724
  unreachable, !dbg !3724

panic1399:                                        ; preds = %checkok1397
  store i64 128, ptr %taddr1400, align 8
  %984 = insertvalue %any undef, ptr %taddr1400, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1390, ptr %taddr1401, align 8
  %986 = insertvalue %any undef, ptr %taddr1401, 0
  %987 = insertvalue %any %986, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %985, ptr %varargslots1402, align 16
  %ptradd1403 = getelementptr inbounds i8, ptr %varargslots1402, i64 16
  store %any %987, ptr %ptradd1403, align 16
  %988 = insertvalue %"any[]" undef, ptr %varargslots1402, 0
  %"$$temp1404" = insertvalue %"any[]" %988, i64 2, 1
  store %"any[]" %"$$temp1404", ptr %indirectarg1405, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 247, ptr byval(%"any[]") align 8 %indirectarg1405), !dbg !3724
  unreachable, !dbg !3724

panic1415:                                        ; preds = %if.else1410
  store i64 %sext1413, ptr %taddr1416, align 8
  %989 = insertvalue %any undef, ptr %taddr1416, 0
  %990 = insertvalue %any %989, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %990, ptr %varargslots1417, align 16
  %991 = insertvalue %"any[]" undef, ptr %varargslots1417, 0
  %"$$temp1418" = insertvalue %"any[]" %991, i64 1, 1
  store %"any[]" %"$$temp1418", ptr %indirectarg1419, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 252, ptr byval(%"any[]") align 8 %indirectarg1419), !dbg !3728
  unreachable, !dbg !3728

panic1422:                                        ; preds = %checkok1420
  store i64 128, ptr %taddr1423, align 8
  %992 = insertvalue %any undef, ptr %taddr1423, 0
  %993 = insertvalue %any %992, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1413, ptr %taddr1424, align 8
  %994 = insertvalue %any undef, ptr %taddr1424, 0
  %995 = insertvalue %any %994, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %993, ptr %varargslots1425, align 16
  %ptradd1426 = getelementptr inbounds i8, ptr %varargslots1425, i64 16
  store %any %995, ptr %ptradd1426, align 16
  %996 = insertvalue %"any[]" undef, ptr %varargslots1425, 0
  %"$$temp1427" = insertvalue %"any[]" %996, i64 2, 1
  store %"any[]" %"$$temp1427", ptr %indirectarg1428, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 252, ptr byval(%"any[]") align 8 %indirectarg1428), !dbg !3728
  unreachable, !dbg !3728

panic1449:                                        ; preds = %if.then1443
  store i64 %sext1447, ptr %taddr1450, align 8
  %997 = insertvalue %any undef, ptr %taddr1450, 0
  %998 = insertvalue %any %997, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %998, ptr %varargslots1451, align 16
  %999 = insertvalue %"any[]" undef, ptr %varargslots1451, 0
  %"$$temp1452" = insertvalue %"any[]" %999, i64 1, 1
  store %"any[]" %"$$temp1452", ptr %indirectarg1453, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 262, ptr byval(%"any[]") align 8 %indirectarg1453), !dbg !3743
  unreachable, !dbg !3743

panic1456:                                        ; preds = %checkok1454
  store i64 128, ptr %taddr1457, align 8
  %1000 = insertvalue %any undef, ptr %taddr1457, 0
  %1001 = insertvalue %any %1000, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1447, ptr %taddr1458, align 8
  %1002 = insertvalue %any undef, ptr %taddr1458, 0
  %1003 = insertvalue %any %1002, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1001, ptr %varargslots1459, align 16
  %ptradd1460 = getelementptr inbounds i8, ptr %varargslots1459, i64 16
  store %any %1003, ptr %ptradd1460, align 16
  %1004 = insertvalue %"any[]" undef, ptr %varargslots1459, 0
  %"$$temp1461" = insertvalue %"any[]" %1004, i64 2, 1
  store %"any[]" %"$$temp1461", ptr %indirectarg1462, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 262, ptr byval(%"any[]") align 8 %indirectarg1462), !dbg !3743
  unreachable, !dbg !3743

panic1471:                                        ; preds = %if.exit1465
  store i64 %sext1469, ptr %taddr1472, align 8
  %1005 = insertvalue %any undef, ptr %taddr1472, 0
  %1006 = insertvalue %any %1005, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1006, ptr %varargslots1473, align 16
  %1007 = insertvalue %"any[]" undef, ptr %varargslots1473, 0
  %"$$temp1474" = insertvalue %"any[]" %1007, i64 1, 1
  store %"any[]" %"$$temp1474", ptr %indirectarg1475, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 263, ptr byval(%"any[]") align 8 %indirectarg1475), !dbg !3747
  unreachable, !dbg !3747

panic1478:                                        ; preds = %checkok1476
  store i64 128, ptr %taddr1479, align 8
  %1008 = insertvalue %any undef, ptr %taddr1479, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1469, ptr %taddr1480, align 8
  %1010 = insertvalue %any undef, ptr %taddr1480, 0
  %1011 = insertvalue %any %1010, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1009, ptr %varargslots1481, align 16
  %ptradd1482 = getelementptr inbounds i8, ptr %varargslots1481, i64 16
  store %any %1011, ptr %ptradd1482, align 16
  %1012 = insertvalue %"any[]" undef, ptr %varargslots1481, 0
  %"$$temp1483" = insertvalue %"any[]" %1012, i64 2, 1
  store %"any[]" %"$$temp1483", ptr %indirectarg1484, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 263, ptr byval(%"any[]") align 8 %indirectarg1484), !dbg !3747
  unreachable, !dbg !3747

panic1521:                                        ; preds = %if.then1508
  %1013 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3784
  call void %1013(ptr @.panic_msg.81, i64 10, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 284), !dbg !3784
  unreachable, !dbg !3784

panic1534:                                        ; preds = %if.then1529
  store i64 %sext1532, ptr %taddr1535, align 8
  %1014 = insertvalue %any undef, ptr %taddr1535, 0
  %1015 = insertvalue %any %1014, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1015, ptr %varargslots1536, align 16
  %1016 = insertvalue %"any[]" undef, ptr %varargslots1536, 0
  %"$$temp1537" = insertvalue %"any[]" %1016, i64 1, 1
  store %"any[]" %"$$temp1537", ptr %indirectarg1538, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.78, i64 38, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 292, ptr byval(%"any[]") align 8 %indirectarg1538), !dbg !3801
  unreachable, !dbg !3801

panic1541:                                        ; preds = %checkok1539
  store i64 128, ptr %taddr1542, align 8
  %1017 = insertvalue %any undef, ptr %taddr1542, 0
  %1018 = insertvalue %any %1017, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1532, ptr %taddr1543, align 8
  %1019 = insertvalue %any undef, ptr %taddr1543, 0
  %1020 = insertvalue %any %1019, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %1018, ptr %varargslots1544, align 16
  %ptradd1545 = getelementptr inbounds i8, ptr %varargslots1544, i64 16
  store %any %1020, ptr %ptradd1545, align 16
  %1021 = insertvalue %"any[]" undef, ptr %varargslots1544, 0
  %"$$temp1546" = insertvalue %"any[]" %1021, i64 2, 1
  store %"any[]" %"$$temp1546", ptr %indirectarg1547, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.70, i64 17, ptr @.func.82, i64 8, i32 292, ptr byval(%"any[]") align 8 %indirectarg1547), !dbg !3801
  unreachable, !dbg !3801
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.String.splitter(ptr noalias sret(%Splitter) align 8 %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !3862 {
entry:
  %self = alloca %"char[]", align 8
  %split = alloca %"char[]", align 8
  %literal = alloca %Splitter, align 8
  store ptr %1, ptr %self, align 8
  %ptradd = getelementptr inbounds i8, ptr %self, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3870, metadata !DIExpression()), !dbg !3871
  store ptr %3, ptr %split, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %split, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %split, metadata !3872, metadata !DIExpression()), !dbg !3873
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %self, i32 16, i1 false), !dbg !3874
  %ptradd2 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3874
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd2, ptr align 8 %split, i32 16, i1 false), !dbg !3874
  %ptradd3 = getelementptr inbounds i8, ptr %literal, i64 32, !dbg !3874
  store i64 0, ptr %ptradd3, align 8, !dbg !3874
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 40, i1 false), !dbg !3874
  ret void, !dbg !3874
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.core.string.Splitter.reset(ptr %0) #0 comdat !dbg !3875 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3879
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3879
  br i1 %2, label %panic, label %checkok, !dbg !3879

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3880, metadata !DIExpression()), !dbg !3881
  %3 = load ptr, ptr %self, align 8, !dbg !3882
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !3882
  store i64 0, ptr %ptradd, align 8, !dbg !3883
  ret void, !dbg !3883

panic:                                            ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3881
  call void %4(ptr @.panic_msg.87, i64 62, ptr @.file.17, i64 9, ptr @.func.88, i64 5, i32 732), !dbg !3881
  unreachable, !dbg !3881
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.Splitter.next(ptr %0, ptr %1) #0 comdat !dbg !3884 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %current = alloca i64, align 8
  %remaining = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %next = alloca i64, align 8
  %next.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %varargslots25 = alloca [2 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %reterr38 = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3887
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3887
  br i1 %3, label %panic, label %checkok, !dbg !3887

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3888, metadata !DIExpression()), !dbg !3889
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3890, metadata !DIExpression()), !dbg !3891
  %4 = load ptr, ptr %self, align 8, !dbg !3892
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !3892
  %5 = load i64, ptr %ptradd, align 8, !dbg !3892
  store i64 %5, ptr %len, align 8, !dbg !3892
  call void @llvm.dbg.declare(metadata ptr %current, metadata !3893, metadata !DIExpression()), !dbg !3894
  %6 = load ptr, ptr %self, align 8, !dbg !3895
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !3895
  %7 = load i64, ptr %ptradd1, align 8, !dbg !3895
  store i64 %7, ptr %current, align 8, !dbg !3895
  %8 = load i64, ptr %current, align 8, !dbg !3896
  %9 = load i64, ptr %len, align 8, !dbg !3897
  %ge = icmp uge i64 %8, %9, !dbg !3896
  br i1 %ge, label %if.then, label %if.exit, !dbg !3896

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" to i64), !dbg !3898

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %remaining, metadata !3899, metadata !DIExpression()), !dbg !3900
  %10 = load ptr, ptr %self, align 8, !dbg !3901
  %11 = load %"char[]", ptr %10, align 8, !dbg !3901
  %12 = extractvalue %"char[]" %11, 0, !dbg !3901
  %13 = load i64, ptr %current, align 8, !dbg !3902
  %14 = extractvalue %"char[]" %11, 1, !dbg !3902
  %gt = icmp ugt i64 %13, %14, !dbg !3902
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3902
  br i1 %15, label %panic2, label %checkok5, !dbg !3902

checkok5:                                         ; preds = %if.exit
  %size = sub i64 %14, %13, !dbg !3901
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !3901
  %16 = insertvalue %"char[]" undef, ptr %ptradd6, 0, !dbg !3901
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !3901
  store %"char[]" %17, ptr %remaining, align 8, !dbg !3901
  call void @llvm.dbg.declare(metadata ptr %next, metadata !3903, metadata !DIExpression()), !dbg !3904
  %18 = load ptr, ptr %self, align 8, !dbg !3905
  %ptradd7 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !3905
  %lo = load ptr, ptr %remaining, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %remaining, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  %lo9 = load ptr, ptr %ptradd7, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd7, i64 8
  %hi11 = load i64, ptr %ptradd10, align 8
  %19 = call i64 @std.core.String.index_of(ptr %retparam, ptr %lo, i64 %hi, ptr %lo9, i64 %hi11), !dbg !3906
  %not_err = icmp eq i64 %19, 0, !dbg !3906
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3906
  br i1 %20, label %after_check, label %assign_optional, !dbg !3906

assign_optional:                                  ; preds = %checkok5
  store i64 %19, ptr %next.f, align 8, !dbg !3906
  br label %after_assign, !dbg !3906

after_check:                                      ; preds = %checkok5
  %21 = load i64, ptr %retparam, align 8, !dbg !3906
  store i64 %21, ptr %next, align 8, !dbg !3906
  store i64 0, ptr %next.f, align 8, !dbg !3906
  br label %after_assign, !dbg !3906

after_assign:                                     ; preds = %after_check, %assign_optional
  %load.err = load i64, ptr %next.f, align 8, !dbg !3907
  %result = icmp eq i64 %load.err, 0, !dbg !3907
  br i1 %result, label %if.then12, label %if.exit36, !dbg !3907

if.then12:                                        ; preds = %after_assign
  %22 = load %"char[]", ptr %remaining, align 8, !dbg !3908
  %23 = extractvalue %"char[]" %22, 0, !dbg !3908
  %24 = extractvalue %"char[]" %22, 1, !dbg !3910
  %gt13 = icmp ugt i64 0, %24, !dbg !3910
  %25 = call i1 @llvm.expect.i1(i1 %gt13, i1 false), !dbg !3910
  br i1 %25, label %panic14, label %checkok21, !dbg !3910

checkok21:                                        ; preds = %if.then12
  %26 = load i64, ptr %next, align 8, !dbg !3911
  %add = add i64 0, %26, !dbg !3911
  %lt = icmp ult i64 %24, %add, !dbg !3911
  %sub = sub i64 %add, 1, !dbg !3911
  %27 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3911
  br i1 %27, label %panic22, label %checkok29, !dbg !3911

checkok29:                                        ; preds = %checkok21
  %size30 = sub i64 %add, 0, !dbg !3908
  %28 = insertvalue %"char[]" undef, ptr %23, 0, !dbg !3908
  %29 = insertvalue %"char[]" %28, i64 %size30, 1, !dbg !3908
  %30 = load ptr, ptr %self, align 8, !dbg !3912
  %ptradd31 = getelementptr inbounds i8, ptr %30, i64 32, !dbg !3912
  %31 = load i64, ptr %current, align 8, !dbg !3914
  %32 = load i64, ptr %next, align 8, !dbg !3915
  %add32 = add i64 %31, %32, !dbg !3914
  %33 = load ptr, ptr %self, align 8, !dbg !3916
  %ptradd33 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !3916
  %ptradd34 = getelementptr inbounds i8, ptr %ptradd33, i64 8, !dbg !3916
  %34 = load i64, ptr %ptradd34, align 8, !dbg !3916
  %add35 = add i64 %add32, %34, !dbg !3914
  store i64 %add35, ptr %ptradd31, align 8, !dbg !3914
  store %"char[]" %29, ptr %0, align 8, !dbg !3914
  ret i64 0, !dbg !3914

if.exit36:                                        ; preds = %after_assign
  %35 = load ptr, ptr %self, align 8, !dbg !3917
  %ptradd37 = getelementptr inbounds i8, ptr %35, i64 32, !dbg !3917
  %36 = load i64, ptr %len, align 8, !dbg !3918
  store i64 %36, ptr %ptradd37, align 8, !dbg !3918
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %remaining, i32 16, i1 false), !dbg !3919
  ret i64 0, !dbg !3919

panic:                                            ; preds = %entry
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3889
  call void %37(ptr @.panic_msg.87, i64 62, ptr @.file.17, i64 9, ptr @.func.89, i64 4, i32 737), !dbg !3889
  unreachable, !dbg !3889

panic2:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %38 = insertvalue %any undef, ptr %taddr, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr3, align 8
  %40 = insertvalue %any undef, ptr %taddr3, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %39, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %41, ptr %ptradd4, align 16
  %42 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %42, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.89, i64 4, i32 742, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3901
  unreachable, !dbg !3901

panic14:                                          ; preds = %if.then12
  store i64 %24, ptr %taddr15, align 8
  %43 = insertvalue %any undef, ptr %taddr15, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr16, align 8
  %45 = insertvalue %any undef, ptr %taddr16, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %44, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %46, ptr %ptradd18, align 16
  %47 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %47, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func.89, i64 4, i32 747, ptr byval(%"any[]") align 8 %indirectarg20), !dbg !3908
  unreachable, !dbg !3908

panic22:                                          ; preds = %checkok21
  store i64 %sub, ptr %taddr23, align 8
  %48 = insertvalue %any undef, ptr %taddr23, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr24, align 8
  %50 = insertvalue %any undef, ptr %taddr24, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %49, ptr %varargslots25, align 16
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %51, ptr %ptradd26, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %52, i64 2, 1
  store %"any[]" %"$$temp27", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func.89, i64 4, i32 747, ptr byval(%"any[]") align 8 %indirectarg28), !dbg !3908
  unreachable, !dbg !3908
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.string.tformat_zstr(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !3920 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !3932, metadata !DIExpression()), !dbg !3933
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3934, metadata !DIExpression()), !dbg !3935
  call void @llvm.dbg.declare(metadata ptr %str, metadata !3936, metadata !DIExpression()), !dbg !3938
  %ptradd2 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !3939
  %4 = load i64, ptr %ptradd2, align 8, !dbg !3939
  %ptradd3 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !3940
  %5 = load i64, ptr %ptradd3, align 8, !dbg !3940
  %mul = mul i64 %5, 8, !dbg !3940
  %add = add i64 %4, %mul, !dbg !3939
  %6 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !3941
  store ptr %6, ptr %str, align 8, !dbg !3941
  %lo = load ptr, ptr %fmt, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  %lo5 = load ptr, ptr %args, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %args, i64 8
  %hi7 = load i64, ptr %ptradd6, align 8
  %7 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo5, i64 %hi7), !dbg !3942
  %8 = call ptr @std.core.dstring.DString.zstr_view(ptr %str), !dbg !3943
  ret ptr %8, !dbg !3943
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.format(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !3944 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %result = alloca %"char[]", align 8
  %taddr = alloca %"char[]", align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !3947, metadata !DIExpression()), !dbg !3948
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3949, metadata !DIExpression()), !dbg !3950
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !3951, metadata !DIExpression()), !dbg !3952
  call void @llvm.dbg.declare(metadata ptr %current, metadata !3953, metadata !DIExpression()), !dbg !3975
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !3977
  %not = icmp eq ptr %6, null, !dbg !3977
  br i1 %not, label %if.then, label %if.exit, !dbg !3977

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !3980
  br label %if.exit, !dbg !3980

if.exit:                                          ; preds = %if.then, %entry
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !3982
  store ptr %7, ptr %current, align 8, !dbg !3982
  call void @llvm.dbg.declare(metadata ptr %original, metadata !3983, metadata !DIExpression()), !dbg !3984
  %8 = load ptr, ptr %current, align 8, !dbg !3985
  store ptr %8, ptr %original, align 8, !dbg !3985
  %9 = load ptr, ptr %current, align 8, !dbg !3986
  %10 = load ptr, ptr %allocator, align 8, !dbg !3987
  %eq = icmp eq ptr %9, %10, !dbg !3986
  br i1 %eq, label %if.then3, label %if.exit4, !dbg !3986

if.then3:                                         ; preds = %if.exit
  %11 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !3988
  store ptr %11, ptr %current, align 8, !dbg !3988
  br label %if.exit4, !dbg !3988

if.exit4:                                         ; preds = %if.then3, %if.exit
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !3989, metadata !DIExpression()), !dbg !3990
  %12 = load ptr, ptr %current, align 8, !dbg !3991
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 24, !dbg !3991
  %13 = load i64, ptr %ptradd5, align 8, !dbg !3991
  store i64 %13, ptr %mark, align 8, !dbg !3991
  call void @llvm.dbg.declare(metadata ptr %str, metadata !3992, metadata !DIExpression()), !dbg !3994
  %ptradd6 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !3995
  %14 = load i64, ptr %ptradd6, align 8, !dbg !3995
  %ptradd7 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !3996
  %15 = load i64, ptr %ptradd7, align 8, !dbg !3996
  %mul = mul i64 %15, 8, !dbg !3996
  %add = add i64 %14, %mul, !dbg !3995
  %16 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !3997
  store ptr %16, ptr %str, align 8, !dbg !3997
  %lo = load ptr, ptr %fmt, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  %lo9 = load ptr, ptr %args, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %args, i64 8
  %hi11 = load i64, ptr %ptradd10, align 8
  %17 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo9, i64 %hi11), !dbg !3998
  %18 = load ptr, ptr %str, align 8, !dbg !3999
  %lo12 = load i64, ptr %allocator, align 8, !dbg !3999
  %ptradd13 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3999
  %hi14 = load ptr, ptr %ptradd13, align 8, !dbg !3999
  %19 = call { ptr, i64 } @std.core.dstring.DString.copy_str(ptr %18, i64 %lo12, ptr %hi14), !dbg !4000
  store { ptr, i64 } %19, ptr %result, align 8
  %20 = load %"char[]", ptr %result, align 8
  %21 = load ptr, ptr %current, align 8, !dbg !4001
  %22 = load i64, ptr %mark, align 8, !dbg !4001
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %21, i64 %22), !dbg !4003
  %23 = load ptr, ptr %original, align 8, !dbg !4004
  store ptr %23, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4004
  store %"char[]" %20, ptr %taddr, align 8
  %24 = load { ptr, i64 }, ptr %taddr, align 8
  ret { ptr, i64 } %24
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.new_format(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !4005 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !4006, metadata !DIExpression()), !dbg !4007
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !4008, metadata !DIExpression()), !dbg !4009
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4010, metadata !DIExpression()), !dbg !4011
  %6 = load %any, ptr %allocator, align 8, !dbg !4012
  %7 = extractvalue %any %6, 0, !dbg !4012
  %anybool = icmp ne ptr %7, null, !dbg !4012
  br i1 %anybool, label %cond.phi, label %cond.rhs, !dbg !4012

cond.rhs:                                         ; preds = %entry
  %8 = load %any, ptr @std.core.mem.allocator.thread_allocator, align 8, !dbg !4013
  br label %cond.phi, !dbg !4013

cond.phi:                                         ; preds = %cond.rhs, %entry
  %val = phi %any [ %6, %entry ], [ %8, %cond.rhs ], !dbg !4013
  %lo = load ptr, ptr %fmt, align 8, !dbg !4013
  %ptradd3 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4013
  %hi = load i64, ptr %ptradd3, align 8, !dbg !4013
  %lo4 = load ptr, ptr %args, align 8, !dbg !4013
  %ptradd5 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4013
  %hi6 = load i64, ptr %ptradd5, align 8, !dbg !4013
  store %any %val, ptr %taddr, align 8
  %lo7 = load i64, ptr %taddr, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi9 = load ptr, ptr %ptradd8, align 8
  %9 = call { ptr, i64 } @std.core.string.format(ptr %lo, i64 %hi, ptr %lo4, i64 %hi6, i64 %lo7, ptr %hi9), !dbg !4016
  store { ptr, i64 } %9, ptr %result, align 8
  %10 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %10
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.tformat(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !4017 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %result = alloca %"char[]", align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !4020, metadata !DIExpression()), !dbg !4021
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !4022, metadata !DIExpression()), !dbg !4023
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4024, metadata !DIExpression()), !dbg !4025
  %ptradd2 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4026
  %4 = load i64, ptr %ptradd2, align 8, !dbg !4026
  %ptradd3 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4027
  %5 = load i64, ptr %ptradd3, align 8, !dbg !4027
  %mul = mul i64 %5, 8, !dbg !4027
  %add = add i64 %4, %mul, !dbg !4026
  %6 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4028
  store ptr %6, ptr %str, align 8, !dbg !4028
  %lo = load ptr, ptr %fmt, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  %lo5 = load ptr, ptr %args, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %args, i64 8
  %hi7 = load i64, ptr %ptradd6, align 8
  %7 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo5, i64 %hi7), !dbg !4029
  %8 = load ptr, ptr %str, align 8, !dbg !4030
  %9 = call { ptr, i64 } @std.core.dstring.DString.str_view(ptr %8), !dbg !4030
  store { ptr, i64 } %9, ptr %result, align 8
  %10 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %10
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.core.string.new_format_zstr(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !4031 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr %0, ptr %fmt, align 8
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !4034, metadata !DIExpression()), !dbg !4035
  store ptr %2, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !4036, metadata !DIExpression()), !dbg !4037
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4038, metadata !DIExpression()), !dbg !4039
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4040, metadata !DIExpression()), !dbg !4042
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4044
  %not = icmp eq ptr %6, null, !dbg !4044
  br i1 %not, label %if.then, label %if.exit, !dbg !4044

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4047
  br label %if.exit, !dbg !4047

if.exit:                                          ; preds = %if.then, %entry
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4049
  store ptr %7, ptr %current, align 8, !dbg !4049
  call void @llvm.dbg.declare(metadata ptr %original, metadata !4050, metadata !DIExpression()), !dbg !4051
  %8 = load ptr, ptr %current, align 8, !dbg !4052
  store ptr %8, ptr %original, align 8, !dbg !4052
  %9 = load ptr, ptr %current, align 8, !dbg !4053
  %10 = load ptr, ptr %allocator, align 8, !dbg !4054
  %eq = icmp eq ptr %9, %10, !dbg !4053
  br i1 %eq, label %if.then3, label %if.exit4, !dbg !4053

if.then3:                                         ; preds = %if.exit
  %11 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4055
  store ptr %11, ptr %current, align 8, !dbg !4055
  br label %if.exit4, !dbg !4055

if.exit4:                                         ; preds = %if.then3, %if.exit
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !4056, metadata !DIExpression()), !dbg !4057
  %12 = load ptr, ptr %current, align 8, !dbg !4058
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 24, !dbg !4058
  %13 = load i64, ptr %ptradd5, align 8, !dbg !4058
  store i64 %13, ptr %mark, align 8, !dbg !4058
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4059, metadata !DIExpression()), !dbg !4061
  %ptradd6 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4062
  %14 = load i64, ptr %ptradd6, align 8, !dbg !4062
  %ptradd7 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4063
  %15 = load i64, ptr %ptradd7, align 8, !dbg !4063
  %mul = mul i64 %15, 8, !dbg !4063
  %add = add i64 %14, %mul, !dbg !4062
  %16 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4064
  store ptr %16, ptr %str, align 8, !dbg !4064
  %lo = load ptr, ptr %fmt, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %fmt, i64 8
  %hi = load i64, ptr %ptradd8, align 8
  %lo9 = load ptr, ptr %args, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %args, i64 8
  %hi11 = load i64, ptr %ptradd10, align 8
  %17 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr %lo, i64 %hi, ptr %lo9, i64 %hi11), !dbg !4065
  %18 = load ptr, ptr %str, align 8, !dbg !4066
  %lo12 = load i64, ptr %allocator, align 8, !dbg !4066
  %ptradd13 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !4066
  %hi14 = load ptr, ptr %ptradd13, align 8, !dbg !4066
  %19 = call ptr @std.core.dstring.DString.copy_zstr(ptr %18, i64 %lo12, ptr %hi14), !dbg !4067
  %20 = load ptr, ptr %current, align 8, !dbg !4068
  %21 = load i64, ptr %mark, align 8, !dbg !4068
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %20, i64 %21), !dbg !4070
  %22 = load ptr, ptr %original, align 8, !dbg !4071
  store ptr %22, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4071
  ret ptr %19, !dbg !4072
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.core.string.join_new(ptr %0, i64 %1, ptr %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !4073 {
entry:
  %s = alloca %"char[][]", align 8
  %joiner = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %allocator4 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %elements6 = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %total_size = alloca i64, align 8
  %.anon = alloca i64, align 8
  %.anon34 = alloca i64, align 8
  %str = alloca ptr, align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %res = alloca ptr, align 8
  %self = alloca ptr, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %varargslots61 = alloca [2 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %value = alloca %"char[]", align 8
  %.anon67 = alloca ptr, align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %varargslots72 = alloca [2 x %any], align 16
  %indirectarg75 = alloca %"any[]", align 8
  %taddr79 = alloca %"char[][]", align 8
  %.anon80 = alloca i64, align 8
  %.anon85 = alloca i64, align 8
  %str89 = alloca ptr, align 8
  %taddr96 = alloca i64, align 8
  %taddr97 = alloca i64, align 8
  %varargslots98 = alloca [2 x %any], align 16
  %indirectarg101 = alloca %"any[]", align 8
  %self104 = alloca ptr, align 8
  %value105 = alloca %"char[]", align 8
  %self109 = alloca ptr, align 8
  %value113 = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  %taddr122 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !4076, metadata !DIExpression()), !dbg !4077
  store ptr %2, ptr %joiner, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %joiner, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %joiner, metadata !4078, metadata !DIExpression()), !dbg !4079
  store i64 %4, ptr %allocator, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd2, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4080, metadata !DIExpression()), !dbg !4081
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4082
  %6 = load i64, ptr %ptradd3, align 8, !dbg !4082
  %not = icmp eq i64 %6, 0, !dbg !4082
  br i1 %not, label %if.then, label %if.exit29, !dbg !4082

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator, i32 16, i1 false)
  store i64 2, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator4, i32 16, i1 false)
  %7 = load i64, ptr %elements, align 8
  store i64 %7, ptr %elements6, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator5, i32 16, i1 false)
  %8 = load i64, ptr %elements6, align 8, !dbg !4083
  %mul = mul i64 1, %8, !dbg !4089
  store i64 %mul, ptr %size, align 8
  %9 = load i64, ptr %size, align 8, !dbg !4090
  %not8 = icmp eq i64 %9, 0, !dbg !4090
  br i1 %not8, label %if.then9, label %if.exit, !dbg !4090

if.then9:                                         ; preds = %if.then
  store ptr null, ptr %blockret, align 8, !dbg !4093
  br label %expr_block.exit, !dbg !4093

if.exit:                                          ; preds = %if.then
  %ptradd10 = getelementptr inbounds i8, ptr %allocator7, i64 8, !dbg !4094
  %10 = load i64, ptr %ptradd10, align 8, !dbg !4094
  %11 = inttoptr i64 %10 to ptr, !dbg !4094
  %type = load ptr, ptr %.cachedtype, align 8
  %12 = icmp eq ptr %11, %type
  br i1 %12, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd11 = getelementptr inbounds i8, ptr %11, i64 16
  %13 = load ptr, ptr %ptradd11, align 8
  %14 = call ptr @.dyn_search(ptr %13, ptr @"$sel.acquire")
  store ptr %14, ptr %.inlinecache, align 8
  store ptr %11, ptr %.cachedtype, align 8
  br label %15

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %15

15:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %14, %cache_miss ]
  %16 = icmp eq ptr %fn_phi, null
  br i1 %16, label %missing_function, label %match

missing_function:                                 ; preds = %15
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4096
  call void %17(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func, i64 8, i32 80), !dbg !4096
  unreachable, !dbg !4096

match:                                            ; preds = %15
  %18 = load ptr, ptr %allocator7, align 8
  %19 = load i64, ptr %size, align 8
  %20 = call i64 %fn_phi(ptr %retparam, ptr %18, i64 %19, i32 1, i64 0), !dbg !4096
  %not_err = icmp eq i64 %20, 0, !dbg !4096
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4096
  br i1 %21, label %after_check, label %assign_optional, !dbg !4096

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !4096
  br label %panic_block, !dbg !4096

after_check:                                      ; preds = %match
  %22 = load ptr, ptr %retparam, align 8, !dbg !4096
  store ptr %22, ptr %blockret, align 8, !dbg !4096
  br label %expr_block.exit, !dbg !4096

expr_block.exit:                                  ; preds = %after_check, %if.then9
  %23 = load ptr, ptr %blockret, align 8, !dbg !4096
  store ptr %23, ptr %taddr, align 8
  %24 = load ptr, ptr %taddr, align 8
  %25 = load i64, ptr %elements6, align 8, !dbg !4097
  %add = add i64 0, %25, !dbg !4097
  %size12 = sub i64 %add, 0, !dbg !4097
  %26 = insertvalue %"char[]" undef, ptr %24, 0, !dbg !4097
  %27 = insertvalue %"char[]" %26, i64 %size12, 1, !dbg !4097
  br label %noerr_block, !dbg !4097

panic_block:                                      ; preds = %assign_optional
  %28 = insertvalue %any undef, ptr %error_var, 0, !dbg !4097
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !4097
  store %any %29, ptr %varargslots, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.15, i64 36, ptr @.file, i64 16, ptr @.func, i64 8, i32 244, ptr byval(%"any[]") align 8 %indirectarg), !dbg !4085
  unreachable, !dbg !4085

noerr_block:                                      ; preds = %expr_block.exit
  store %"char[]" %27, ptr %taddr13, align 8
  %31 = load %"char[]", ptr %taddr13, align 8
  %32 = extractvalue %"char[]" %31, 0
  %33 = extractvalue %"char[]" %31, 1
  %gt = icmp sgt i64 0, %33
  %34 = call i1 @llvm.expect.i1(i1 %gt, i1 false)
  br i1 %34, label %panic, label %checkok

checkok:                                          ; preds = %noerr_block
  %lt = icmp slt i64 %33, 0, !dbg !4098
  %35 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !4098
  br i1 %35, label %panic20, label %checkok27, !dbg !4098

checkok27:                                        ; preds = %checkok
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !4098
  %37 = insertvalue %"char[]" %36, i64 0, 1, !dbg !4098
  store %"char[]" %37, ptr %taddr28, align 8
  %38 = load { ptr, i64 }, ptr %taddr28, align 8
  ret { ptr, i64 } %38

if.exit29:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %total_size, metadata !4099, metadata !DIExpression()), !dbg !4100
  %ptradd30 = getelementptr inbounds i8, ptr %joiner, i64 8, !dbg !4101
  %39 = load i64, ptr %ptradd30, align 8, !dbg !4101
  %ptradd31 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4102
  %40 = load i64, ptr %ptradd31, align 8, !dbg !4102
  %mul32 = mul i64 %39, %40, !dbg !4101
  store i64 %mul32, ptr %total_size, align 8, !dbg !4101
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !4103, metadata !DIExpression()), !dbg !4105
  %ptradd33 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4105
  %41 = load i64, ptr %ptradd33, align 8, !dbg !4105
  store i64 %41, ptr %.anon, align 8, !dbg !4105
  call void @llvm.dbg.declare(metadata ptr %.anon34, metadata !4103, metadata !DIExpression()), !dbg !4105
  store i64 0, ptr %.anon34, align 8, !dbg !4105
  br label %loop.cond, !dbg !4105

loop.cond:                                        ; preds = %checkok46, %if.exit29
  %42 = load i64, ptr %.anon34, align 8, !dbg !4105
  %43 = load i64, ptr %.anon, align 8, !dbg !4105
  %lt35 = icmp ult i64 %42, %43, !dbg !4105
  br i1 %lt35, label %loop.body, label %loop.exit, !dbg !4105

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4106, metadata !DIExpression()), !dbg !4108
  %ptradd36 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4109
  %44 = load i64, ptr %ptradd36, align 8, !dbg !4109
  %45 = load ptr, ptr %s, align 8, !dbg !4109
  %46 = load i64, ptr %.anon34, align 8, !dbg !4109
  %ge = icmp uge i64 %46, %44, !dbg !4109
  %47 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4109
  br i1 %47, label %panic37, label %checkok44, !dbg !4109

checkok44:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [16 x i8], ptr %45, i64 %46, !dbg !4109
  store ptr %ptroffset, ptr %str, align 8, !dbg !4109
  %48 = load i64, ptr %total_size, align 8, !dbg !4110
  %49 = load ptr, ptr %str, align 8, !dbg !4112
  %checknull = icmp eq ptr %49, null, !dbg !4112
  %50 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4112
  br i1 %50, label %panic45, label %checkok46, !dbg !4112

checkok46:                                        ; preds = %checkok44
  %ptradd47 = getelementptr inbounds i8, ptr %49, i64 8, !dbg !4112
  %51 = load i64, ptr %ptradd47, align 8, !dbg !4112
  %add48 = add i64 %48, %51, !dbg !4110
  store i64 %add48, ptr %total_size, align 8, !dbg !4110
  %52 = load i64, ptr %.anon34, align 8, !dbg !4105
  %addnuw = add nuw i64 %52, 1, !dbg !4105
  store i64 %addnuw, ptr %.anon34, align 8, !dbg !4105
  br label %loop.cond, !dbg !4105

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4113, metadata !DIExpression()), !dbg !4115
  %53 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4117
  %not50 = icmp eq ptr %53, null, !dbg !4117
  br i1 %not50, label %if.then51, label %if.exit52, !dbg !4117

if.then51:                                        ; preds = %loop.exit
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4120
  br label %if.exit52, !dbg !4120

if.exit52:                                        ; preds = %if.then51, %loop.exit
  %54 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4122
  store ptr %54, ptr %current, align 8, !dbg !4122
  call void @llvm.dbg.declare(metadata ptr %original, metadata !4123, metadata !DIExpression()), !dbg !4124
  %55 = load ptr, ptr %current, align 8, !dbg !4125
  store ptr %55, ptr %original, align 8, !dbg !4125
  %56 = load ptr, ptr %current, align 8, !dbg !4126
  %57 = load ptr, ptr %allocator, align 8, !dbg !4127
  %eq = icmp eq ptr %56, %57, !dbg !4126
  br i1 %eq, label %if.then53, label %if.exit54, !dbg !4126

if.then53:                                        ; preds = %if.exit52
  %58 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4128
  store ptr %58, ptr %current, align 8, !dbg !4128
  br label %if.exit54, !dbg !4128

if.exit54:                                        ; preds = %if.then53, %if.exit52
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !4129, metadata !DIExpression()), !dbg !4130
  %59 = load ptr, ptr %current, align 8, !dbg !4131
  %ptradd55 = getelementptr inbounds i8, ptr %59, i64 24, !dbg !4131
  %60 = load i64, ptr %ptradd55, align 8, !dbg !4131
  store i64 %60, ptr %mark, align 8, !dbg !4131
  call void @llvm.dbg.declare(metadata ptr %res, metadata !4132, metadata !DIExpression()), !dbg !4134
  %61 = load i64, ptr %total_size, align 8, !dbg !4135
  %62 = call ptr @std.core.dstring.temp_with_capacity(i64 %61), !dbg !4136
  store ptr %62, ptr %res, align 8, !dbg !4136
  store ptr %res, ptr %self, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4137
  %63 = load i64, ptr %ptradd56, align 8, !dbg !4137
  %64 = load ptr, ptr %s, align 8, !dbg !4137
  %ge57 = icmp sge i64 0, %63, !dbg !4138
  %65 = call i1 @llvm.expect.i1(i1 %ge57, i1 false), !dbg !4138
  br i1 %65, label %panic58, label %checkok65, !dbg !4138

checkok65:                                        ; preds = %if.exit54
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %64, i32 16, i1 false)
  %66 = load ptr, ptr %self, align 8, !dbg !4139
  %lo = load ptr, ptr %value, align 8, !dbg !4139
  %ptradd66 = getelementptr inbounds i8, ptr %value, i64 8, !dbg !4139
  %hi = load i64, ptr %ptradd66, align 8, !dbg !4139
  call void @std.core.dstring.DString.append_chars(ptr %66, ptr %lo, i64 %hi), !dbg !4143
  call void @llvm.dbg.declare(metadata ptr %.anon67, metadata !4144, metadata !DIExpression()), !dbg !4147
  %67 = load %"char[][]", ptr %s, align 8, !dbg !4147
  %68 = extractvalue %"char[][]" %67, 0, !dbg !4147
  %69 = extractvalue %"char[][]" %67, 1, !dbg !4148
  %gt68 = icmp sgt i64 1, %69, !dbg !4148
  %70 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !4148
  br i1 %70, label %panic69, label %checkok76, !dbg !4148

checkok76:                                        ; preds = %checkok65
  %size77 = sub i64 %69, 1, !dbg !4147
  %ptradd78 = getelementptr inbounds i8, ptr %68, i64 16, !dbg !4147
  %71 = insertvalue %"char[][]" undef, ptr %ptradd78, 0, !dbg !4147
  %72 = insertvalue %"char[][]" %71, i64 %size77, 1, !dbg !4147
  store %"char[][]" %72, ptr %taddr79, align 8
  store ptr %taddr79, ptr %.anon67, align 8
  call void @llvm.dbg.declare(metadata ptr %.anon80, metadata !4149, metadata !DIExpression()), !dbg !4147
  %73 = load ptr, ptr %.anon67, align 8, !dbg !4147
  %checknull81 = icmp eq ptr %73, null, !dbg !4147
  %74 = call i1 @llvm.expect.i1(i1 %checknull81, i1 false), !dbg !4147
  br i1 %74, label %panic82, label %checkok83, !dbg !4147

checkok83:                                        ; preds = %checkok76
  %ptradd84 = getelementptr inbounds i8, ptr %73, i64 8, !dbg !4147
  %75 = load i64, ptr %ptradd84, align 8, !dbg !4147
  store i64 %75, ptr %.anon80, align 8, !dbg !4147
  call void @llvm.dbg.declare(metadata ptr %.anon85, metadata !4149, metadata !DIExpression()), !dbg !4147
  store i64 0, ptr %.anon85, align 8, !dbg !4147
  br label %loop.cond86, !dbg !4147

loop.cond86:                                      ; preds = %checkok112, %checkok83
  %76 = load i64, ptr %.anon85, align 8, !dbg !4147
  %77 = load i64, ptr %.anon80, align 8, !dbg !4147
  %lt87 = icmp ult i64 %76, %77, !dbg !4147
  br i1 %lt87, label %loop.body88, label %loop.exit118, !dbg !4147

loop.body88:                                      ; preds = %loop.cond86
  call void @llvm.dbg.declare(metadata ptr %str89, metadata !4150, metadata !DIExpression()), !dbg !4152
  %78 = load ptr, ptr %.anon67, align 8, !dbg !4153
  %checknull90 = icmp eq ptr %78, null, !dbg !4153
  %79 = call i1 @llvm.expect.i1(i1 %checknull90, i1 false), !dbg !4153
  br i1 %79, label %panic91, label %checkok92, !dbg !4153

checkok92:                                        ; preds = %loop.body88
  %ptradd93 = getelementptr inbounds i8, ptr %78, i64 8, !dbg !4153
  %80 = load i64, ptr %ptradd93, align 8, !dbg !4153
  %81 = load ptr, ptr %78, align 8, !dbg !4153
  %82 = load i64, ptr %.anon85, align 8, !dbg !4153
  %ge94 = icmp uge i64 %82, %80, !dbg !4153
  %83 = call i1 @llvm.expect.i1(i1 %ge94, i1 false), !dbg !4153
  br i1 %83, label %panic95, label %checkok102, !dbg !4153

checkok102:                                       ; preds = %checkok92
  %ptroffset103 = getelementptr inbounds [16 x i8], ptr %81, i64 %82, !dbg !4153
  store ptr %ptroffset103, ptr %str89, align 8, !dbg !4153
  store ptr %res, ptr %self104, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value105, ptr align 8 %joiner, i32 16, i1 false)
  %84 = load ptr, ptr %self104, align 8, !dbg !4154
  %lo106 = load ptr, ptr %value105, align 8, !dbg !4154
  %ptradd107 = getelementptr inbounds i8, ptr %value105, i64 8, !dbg !4154
  %hi108 = load i64, ptr %ptradd107, align 8, !dbg !4154
  call void @std.core.dstring.DString.append_chars(ptr %84, ptr %lo106, i64 %hi108), !dbg !4158
  store ptr %res, ptr %self109, align 8
  %85 = load ptr, ptr %str89, align 8, !dbg !4159
  %checknull110 = icmp eq ptr %85, null, !dbg !4159
  %86 = call i1 @llvm.expect.i1(i1 %checknull110, i1 false), !dbg !4159
  br i1 %86, label %panic111, label %checkok112, !dbg !4159

checkok112:                                       ; preds = %checkok102
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value113, ptr align 8 %85, i32 16, i1 false)
  %87 = load ptr, ptr %self109, align 8, !dbg !4160
  %lo114 = load ptr, ptr %value113, align 8, !dbg !4160
  %ptradd115 = getelementptr inbounds i8, ptr %value113, i64 8, !dbg !4160
  %hi116 = load i64, ptr %ptradd115, align 8, !dbg !4160
  call void @std.core.dstring.DString.append_chars(ptr %87, ptr %lo114, i64 %hi116), !dbg !4163
  %88 = load i64, ptr %.anon85, align 8, !dbg !4147
  %addnuw117 = add nuw i64 %88, 1, !dbg !4147
  store i64 %addnuw117, ptr %.anon85, align 8, !dbg !4147
  br label %loop.cond86, !dbg !4147

loop.exit118:                                     ; preds = %loop.cond86
  %89 = load ptr, ptr %res, align 8, !dbg !4164
  %lo119 = load i64, ptr %allocator, align 8, !dbg !4164
  %ptradd120 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !4164
  %hi121 = load ptr, ptr %ptradd120, align 8, !dbg !4164
  %90 = call { ptr, i64 } @std.core.dstring.DString.copy_str(ptr %89, i64 %lo119, ptr %hi121), !dbg !4165
  store { ptr, i64 } %90, ptr %result, align 8
  %91 = load %"char[]", ptr %result, align 8
  %92 = load ptr, ptr %current, align 8, !dbg !4166
  %93 = load i64, ptr %mark, align 8, !dbg !4166
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %92, i64 %93), !dbg !4168
  %94 = load ptr, ptr %original, align 8, !dbg !4169
  store ptr %94, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4169
  store %"char[]" %91, ptr %taddr122, align 8
  %95 = load { ptr, i64 }, ptr %taddr122, align 8
  ret { ptr, i64 } %95

panic:                                            ; preds = %noerr_block
  store i64 %33, ptr %taddr14, align 8
  %96 = insertvalue %any undef, ptr %taddr14, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr15, align 8
  %98 = insertvalue %any undef, ptr %taddr15, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %97, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %99, ptr %ptradd17, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 118, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !4098
  unreachable, !dbg !4098

panic20:                                          ; preds = %checkok
  store i64 -1, ptr %taddr21, align 8
  %101 = insertvalue %any undef, ptr %taddr21, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr22, align 8
  %103 = insertvalue %any undef, ptr %taddr22, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %102, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %104, ptr %ptradd24, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.18, i64 60, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 118, ptr byval(%"any[]") align 8 %indirectarg26), !dbg !4098
  unreachable, !dbg !4098

panic37:                                          ; preds = %loop.body
  store i64 %44, ptr %taddr38, align 8
  %106 = insertvalue %any undef, ptr %taddr38, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %46, ptr %taddr39, align 8
  %108 = insertvalue %any undef, ptr %taddr39, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %107, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %109, ptr %ptradd41, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 122, ptr byval(%"any[]") align 8 %indirectarg43), !dbg !4109
  unreachable, !dbg !4109

panic45:                                          ; preds = %checkok44
  %111 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4112
  call void %111(ptr @.panic_msg.20, i64 44, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 124), !dbg !4112
  unreachable, !dbg !4112

panic58:                                          ; preds = %if.exit54
  store i64 %63, ptr %taddr59, align 8
  %112 = insertvalue %any undef, ptr %taddr59, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr60, align 8
  %114 = insertvalue %any undef, ptr %taddr60, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %113, ptr %varargslots61, align 16
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %115, ptr %ptradd62, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 129, ptr byval(%"any[]") align 8 %indirectarg64), !dbg !4138
  unreachable, !dbg !4138

panic69:                                          ; preds = %checkok65
  store i64 %69, ptr %taddr70, align 8
  %117 = insertvalue %any undef, ptr %taddr70, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr71, align 8
  %119 = insertvalue %any undef, ptr %taddr71, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %118, ptr %varargslots72, align 16
  %ptradd73 = getelementptr inbounds i8, ptr %varargslots72, i64 16
  store %any %120, ptr %ptradd73, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots72, 0
  %"$$temp74" = insertvalue %"any[]" %121, i64 2, 1
  store %"any[]" %"$$temp74", ptr %indirectarg75, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.16, i64 61, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 130, ptr byval(%"any[]") align 8 %indirectarg75), !dbg !4147
  unreachable, !dbg !4147

panic82:                                          ; preds = %checkok76
  %122 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4147
  call void %122(ptr @.panic_msg.21, i64 47, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 130), !dbg !4147
  unreachable, !dbg !4147

panic91:                                          ; preds = %loop.body88
  %123 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4153
  call void %123(ptr @.panic_msg.21, i64 47, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 130), !dbg !4153
  unreachable, !dbg !4153

panic95:                                          ; preds = %checkok92
  store i64 %80, ptr %taddr96, align 8
  %124 = insertvalue %any undef, ptr %taddr96, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %82, ptr %taddr97, align 8
  %126 = insertvalue %any undef, ptr %taddr97, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %125, ptr %varargslots98, align 16
  %ptradd99 = getelementptr inbounds i8, ptr %varargslots98, i64 16
  store %any %127, ptr %ptradd99, align 16
  %128 = insertvalue %"any[]" undef, ptr %varargslots98, 0
  %"$$temp100" = insertvalue %"any[]" %128, i64 2, 1
  store %"any[]" %"$$temp100", ptr %indirectarg101, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.19, i64 59, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 130, ptr byval(%"any[]") align 8 %indirectarg101), !dbg !4153
  unreachable, !dbg !4153

panic111:                                         ; preds = %checkok102
  %129 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4159
  call void %129(ptr @.panic_msg.20, i64 44, ptr @.file.17, i64 9, ptr @.func, i64 8, i32 133), !dbg !4159
  unreachable, !dbg !4159
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.new_from_utf32(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !4170 {
entry:
  %utf32 = alloca %"uint[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %utf32, align 8
  %ptradd = getelementptr inbounds i8, ptr %utf32, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %utf32, metadata !4177, metadata !DIExpression()), !dbg !4178
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4179, metadata !DIExpression()), !dbg !4180
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4181, metadata !DIExpression()), !dbg !4182
  %lo = load ptr, ptr %utf32, align 8, !dbg !4183
  %ptradd2 = getelementptr inbounds i8, ptr %utf32, i64 8, !dbg !4183
  %hi = load i64, ptr %ptradd2, align 8, !dbg !4183
  %5 = call i64 @std.core.string.conv.utf8len_for_utf32(ptr %lo, i64 %hi), !dbg !4184
  store i64 %5, ptr %len, align 8, !dbg !4184
  call void @llvm.dbg.declare(metadata ptr %data, metadata !4185, metadata !DIExpression()), !dbg !4186
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %len, align 8, !dbg !4187
  %add = add i64 %6, 1, !dbg !4187
  store i64 %add, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !4188
  %not = icmp eq i64 %7, 0, !dbg !4188
  br i1 %not, label %if.then, label %if.exit, !dbg !4188

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4191
  br label %expr_block.exit, !dbg !4191

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !4192
  %8 = load i64, ptr %ptradd4, align 8, !dbg !4192
  %9 = inttoptr i64 %8 to ptr, !dbg !4192
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd5, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4194
  call void %15(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.22, i64 14, i32 68), !dbg !4194
  unreachable, !dbg !4194

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator3, align 8
  %17 = load i64, ptr %size, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 0, i64 0), !dbg !4194
  %not_err = icmp eq i64 %18, 0, !dbg !4194
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4194
  br i1 %19, label %after_check, label %assign_optional, !dbg !4194

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !4194
  br label %guard_block, !dbg !4194

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !4194
  store ptr %20, ptr %blockret, align 8, !dbg !4194
  br label %expr_block.exit, !dbg !4194

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4194

guard_block:                                      ; preds = %assign_optional
  %21 = load i64, ptr %error_var, align 8, !dbg !4194
  ret i64 %21, !dbg !4194

noerr_block:                                      ; preds = %expr_block.exit
  %22 = load ptr, ptr %blockret, align 8, !dbg !4194
  store ptr %22, ptr %data, align 8, !dbg !4194
  %lo6 = load ptr, ptr %utf32, align 8, !dbg !4195
  %ptradd7 = getelementptr inbounds i8, ptr %utf32, i64 8, !dbg !4195
  %hi8 = load i64, ptr %ptradd7, align 8, !dbg !4195
  %23 = load ptr, ptr %data, align 8, !dbg !4195
  call void @std.core.string.conv.utf32to8_unsafe(ptr %lo6, i64 %hi8, ptr %23), !dbg !4196
  %24 = load ptr, ptr %data, align 8, !dbg !4197
  %25 = load i64, ptr %len, align 8, !dbg !4198
  %ptradd9 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !4198
  store i8 0, ptr %ptradd9, align 1, !dbg !4199
  %26 = load ptr, ptr %data, align 8, !dbg !4200
  %27 = load i64, ptr %len, align 8, !dbg !4201
  %add10 = add i64 0, %27, !dbg !4201
  %size11 = sub i64 %add10, 0, !dbg !4201
  %28 = insertvalue %"char[]" undef, ptr %26, 0, !dbg !4201
  %29 = insertvalue %"char[]" %28, i64 %size11, 1, !dbg !4201
  store %"char[]" %29, ptr %0, align 8, !dbg !4201
  ret i64 0, !dbg !4201
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.new_from_utf16(ptr %0, ptr %1, i64 %2, i64 %3, ptr %4) #0 comdat !dbg !4202 {
entry:
  %utf16 = alloca %"ushort[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %error_var6 = alloca i64, align 8
  %allocator14 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache19 = alloca ptr, align 8
  %.cachedtype20 = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype20, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %1, ptr %utf16, align 8
  %ptradd = getelementptr inbounds i8, ptr %utf16, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %utf16, metadata !4209, metadata !DIExpression()), !dbg !4210
  store i64 %3, ptr %allocator, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4211, metadata !DIExpression()), !dbg !4212
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4213, metadata !DIExpression()), !dbg !4214
  %lo = load ptr, ptr %utf16, align 8, !dbg !4215
  %ptradd2 = getelementptr inbounds i8, ptr %utf16, i64 8, !dbg !4215
  %hi = load i64, ptr %ptradd2, align 8, !dbg !4215
  %5 = call i64 @std.core.string.conv.utf8len_for_utf16(ptr %lo, i64 %hi), !dbg !4216
  store i64 %5, ptr %len, align 8, !dbg !4216
  call void @llvm.dbg.declare(metadata ptr %data, metadata !4217, metadata !DIExpression()), !dbg !4218
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %6 = load i64, ptr %len, align 8, !dbg !4219
  %add = add i64 %6, 1, !dbg !4219
  store i64 %add, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !4220
  %not = icmp eq i64 %7, 0, !dbg !4220
  br i1 %not, label %if.then, label %if.exit, !dbg !4220

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4223
  br label %expr_block.exit, !dbg !4223

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !4224
  %8 = load i64, ptr %ptradd4, align 8, !dbg !4224
  %9 = inttoptr i64 %8 to ptr, !dbg !4224
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd5, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4226
  call void %15(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func.23, i64 14, i32 68), !dbg !4226
  unreachable, !dbg !4226

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator3, align 8
  %17 = load i64, ptr %size, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 0, i64 0), !dbg !4226
  %not_err = icmp eq i64 %18, 0, !dbg !4226
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4226
  br i1 %19, label %after_check, label %assign_optional, !dbg !4226

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !4226
  br label %guard_block, !dbg !4226

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !4226
  store ptr %20, ptr %blockret, align 8, !dbg !4226
  br label %expr_block.exit, !dbg !4226

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4226

guard_block:                                      ; preds = %assign_optional
  %21 = load i64, ptr %error_var, align 8, !dbg !4226
  ret i64 %21, !dbg !4226

noerr_block:                                      ; preds = %expr_block.exit
  %22 = load ptr, ptr %blockret, align 8, !dbg !4226
  store ptr %22, ptr %data, align 8, !dbg !4226
  %lo7 = load ptr, ptr %utf16, align 8, !dbg !4227
  %ptradd8 = getelementptr inbounds i8, ptr %utf16, i64 8, !dbg !4227
  %hi9 = load i64, ptr %ptradd8, align 8, !dbg !4227
  %23 = load ptr, ptr %data, align 8, !dbg !4227
  %24 = call i64 @std.core.string.conv.utf16to8_unsafe(ptr %lo7, i64 %hi9, ptr %23), !dbg !4228
  %not_err10 = icmp eq i64 %24, 0, !dbg !4228
  %25 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !4228
  br i1 %25, label %after_check12, label %assign_optional11, !dbg !4228

assign_optional11:                                ; preds = %noerr_block
  store i64 %24, ptr %error_var6, align 8, !dbg !4228
  br label %guard_block13, !dbg !4228

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block30, !dbg !4228

guard_block13:                                    ; preds = %assign_optional11
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator14, ptr align 8 %allocator, i32 16, i1 false)
  %26 = load ptr, ptr %data, align 8, !dbg !4229
  store ptr %26, ptr %ptr, align 8
  %27 = load ptr, ptr %ptr, align 8, !dbg !4231
  %not15 = icmp eq ptr %27, null, !dbg !4231
  br i1 %not15, label %if.then16, label %if.exit17, !dbg !4231

if.then16:                                        ; preds = %guard_block13
  br label %expr_block.exit29, !dbg !4234

if.exit17:                                        ; preds = %guard_block13
  %ptradd18 = getelementptr inbounds i8, ptr %allocator14, i64 8, !dbg !4235
  %28 = load i64, ptr %ptradd18, align 8, !dbg !4235
  %29 = inttoptr i64 %28 to ptr, !dbg !4235
  %type21 = load ptr, ptr %.cachedtype20, align 8
  %30 = icmp eq ptr %29, %type21
  br i1 %30, label %cache_hit24, label %cache_miss22

cache_miss22:                                     ; preds = %if.exit17
  %ptradd23 = getelementptr inbounds i8, ptr %29, i64 16
  %31 = load ptr, ptr %ptradd23, align 8
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.release")
  store ptr %32, ptr %.inlinecache19, align 8
  store ptr %29, ptr %.cachedtype20, align 8
  br label %33

cache_hit24:                                      ; preds = %if.exit17
  %cache_hit_fn25 = load ptr, ptr %.inlinecache19, align 8
  br label %33

33:                                               ; preds = %cache_hit24, %cache_miss22
  %fn_phi26 = phi ptr [ %cache_hit_fn25, %cache_hit24 ], [ %32, %cache_miss22 ]
  %34 = icmp eq ptr %fn_phi26, null
  br i1 %34, label %missing_function27, label %match28

missing_function27:                               ; preds = %33
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4236
  call void %35(ptr @.panic_msg.24, i64 44, ptr @.file, i64 16, ptr @.func.23, i64 14, i32 105), !dbg !4236
  unreachable, !dbg !4236

match28:                                          ; preds = %33
  %36 = load ptr, ptr %allocator14, align 8, !dbg !4236
  %37 = load ptr, ptr %ptr, align 8, !dbg !4236
  call void %fn_phi26(ptr %36, ptr %37, i8 zeroext 0), !dbg !4236
  br label %expr_block.exit29, !dbg !4236

expr_block.exit29:                                ; preds = %match28, %if.then16
  %38 = load i64, ptr %error_var6, align 8, !dbg !4236
  ret i64 %38, !dbg !4236

noerr_block30:                                    ; preds = %after_check12
  %39 = load ptr, ptr %data, align 8, !dbg !4237
  %40 = load i64, ptr %len, align 8, !dbg !4238
  %ptradd31 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !4238
  store i8 0, ptr %ptradd31, align 1, !dbg !4239
  %41 = load ptr, ptr %data, align 8, !dbg !4240
  %42 = load i64, ptr %len, align 8, !dbg !4241
  %add32 = add i64 0, %42, !dbg !4241
  %size33 = sub i64 %add32, 0, !dbg !4241
  %43 = insertvalue %"char[]" undef, ptr %41, 0, !dbg !4241
  %44 = insertvalue %"char[]" %43, i64 %size33, 1, !dbg !4241
  store %"char[]" %44, ptr %0, align 8, !dbg !4241
  ret i64 0, !dbg !4241
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.new_from_wstring(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !4242 {
entry:
  %wstring = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %utf16_len = alloca i64, align 8
  %utf16 = alloca %"ushort[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  store ptr %1, ptr %wstring, align 8
  call void @llvm.dbg.declare(metadata ptr %wstring, metadata !4245, metadata !DIExpression()), !dbg !4246
  store i64 %2, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4247, metadata !DIExpression()), !dbg !4248
  call void @llvm.dbg.declare(metadata ptr %utf16_len, metadata !4249, metadata !DIExpression()), !dbg !4250
  store i64 0, ptr %utf16_len, align 8, !dbg !4250
  br label %loop.cond, !dbg !4251

loop.cond:                                        ; preds = %loop.body, %entry
  %4 = load ptr, ptr %wstring, align 8, !dbg !4252
  %5 = load i64, ptr %utf16_len, align 8, !dbg !4254
  %ptroffset = getelementptr inbounds [2 x i8], ptr %4, i64 %5, !dbg !4254
  %6 = load i16, ptr %ptroffset, align 2, !dbg !4254
  %zext = zext i16 %6 to i32, !dbg !4254
  %neq = icmp ne i32 0, %zext, !dbg !4252
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !4252

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, ptr %utf16_len, align 8, !dbg !4255
  %add = add i64 %7, 1, !dbg !4255
  store i64 %add, ptr %utf16_len, align 8, !dbg !4255
  br label %loop.cond, !dbg !4255

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %utf16, metadata !4256, metadata !DIExpression()), !dbg !4257
  %8 = load ptr, ptr %wstring, align 8, !dbg !4258
  %9 = load i64, ptr %utf16_len, align 8, !dbg !4259
  %add1 = add i64 0, %9, !dbg !4259
  %size = sub i64 %add1, 0, !dbg !4259
  %10 = insertvalue %"ushort[]" undef, ptr %8, 0, !dbg !4259
  %11 = insertvalue %"ushort[]" %10, i64 %size, 1, !dbg !4259
  store %"ushort[]" %11, ptr %utf16, align 8, !dbg !4259
  %lo = load ptr, ptr %utf16, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %utf16, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load i64, ptr %allocator, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8
  %hi5 = load ptr, ptr %ptradd4, align 8
  %12 = call i64 @std.core.string.new_from_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo3, ptr %hi5), !dbg !4260
  %not_err = icmp eq i64 %12, 0, !dbg !4260
  %13 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4260
  br i1 %13, label %after_check, label %assign_optional, !dbg !4260

assign_optional:                                  ; preds = %loop.exit
  store i64 %12, ptr %reterr, align 8, !dbg !4260
  br label %err_retblock, !dbg !4260

after_check:                                      ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4260
  ret i64 0, !dbg !4260

err_retblock:                                     ; preds = %assign_optional
  %14 = load i64, ptr %reterr, align 8, !dbg !4260
  ret i64 %14, !dbg !4260
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.temp_from_wstring(ptr %0, ptr %1) #0 comdat !dbg !4261 {
entry:
  %wstring = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %wstring, align 8
  call void @llvm.dbg.declare(metadata ptr %wstring, metadata !4264, metadata !DIExpression()), !dbg !4265
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4266
  %not = icmp eq ptr %2, null, !dbg !4266
  br i1 %not, label %if.then, label %if.exit, !dbg !4266

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4269
  br label %if.exit, !dbg !4269

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4271
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !4271
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !4271
  %6 = load ptr, ptr %wstring, align 8
  store %any %5, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd, align 8
  %7 = call i64 @std.core.string.new_from_wstring(ptr %retparam, ptr %6, i64 %lo, ptr %hi) #5, !dbg !4272
  %not_err = icmp eq i64 %7, 0, !dbg !4272
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4272
  br i1 %8, label %after_check, label %assign_optional, !dbg !4272

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !4272
  br label %err_retblock, !dbg !4272

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4272
  ret i64 0, !dbg !4272

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !4272
  ret i64 %9, !dbg !4272
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.string.temp_from_utf16(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !4273 {
entry:
  %utf16 = alloca %"ushort[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %utf16, align 8
  %ptradd = getelementptr inbounds i8, ptr %utf16, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %utf16, metadata !4276, metadata !DIExpression()), !dbg !4277
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4278
  %not = icmp eq ptr %3, null, !dbg !4278
  br i1 %not, label %if.then, label %if.exit, !dbg !4278

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4281
  br label %if.exit, !dbg !4281

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4283
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !4283
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !4283
  %lo = load ptr, ptr %utf16, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %utf16, i64 8
  %hi = load i64, ptr %ptradd1, align 8
  store %any %6, ptr %taddr, align 8
  %lo2 = load i64, ptr %taddr, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi4 = load ptr, ptr %ptradd3, align 8
  %7 = call i64 @std.core.string.new_from_utf16(ptr %retparam, ptr %lo, i64 %hi, i64 %lo2, ptr %hi4) #5, !dbg !4284
  %not_err = icmp eq i64 %7, 0, !dbg !4284
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4284
  br i1 %8, label %after_check, label %assign_optional, !dbg !4284

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !4284
  br label %err_retblock, !dbg !4284

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4284
  ret i64 0, !dbg !4284

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !4284
  ret i64 %9, !dbg !4284
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.temp_with_capacity(i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.dstring.DString.appendf(ptr, ptr, ptr, i64, ptr, i64) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.DString.zstr_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.allocator.temp_allocator_next() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.dstring.DString.copy_str(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.dstring.DString.str_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.DString.copy_zstr(ptr, i64, ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.dstring.DString.append_chars(ptr, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8len_for_utf32(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.string.conv.utf32to8_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8len_for_utf16(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf16to8_unsafe(ptr, i64, ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf16len_for_utf8(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8to16_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8_codepoints(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8to32_unsafe(ptr, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.ascii.char.is_upper(i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.ascii.char.is_lower(i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare double @scalbn(double, i32) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.copysign.f64(double, double) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #1

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!48, !49, !50, !51, !52, !53}
!llvm.dbg.cu = !{!54}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "SURROGATE_OFFSET", linkageName: "std.core.string.SURROGATE_OFFSET", scope: !2, file: !2, line: 18, type: !3, isLocal: true, isDefinition: true, align: 4)
!2 = !DIFile(filename: "string.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!3 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "SURROGATE_GENERIC_MASK", linkageName: "std.core.string.SURROGATE_GENERIC_MASK", scope: !2, file: !2, line: 19, type: !3, isLocal: true, isDefinition: true, align: 4)
!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
!7 = distinct !DIGlobalVariable(name: "SURROGATE_MASK", linkageName: "std.core.string.SURROGATE_MASK", scope: !2, file: !2, line: 20, type: !3, isLocal: true, isDefinition: true, align: 4)
!8 = !DIGlobalVariableExpression(var: !9, expr: !DIExpression())
!9 = distinct !DIGlobalVariable(name: "SURROGATE_CODEPOINT_MASK", linkageName: "std.core.string.SURROGATE_CODEPOINT_MASK", scope: !2, file: !2, line: 21, type: !3, isLocal: true, isDefinition: true, align: 4)
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "SURROGATE_BITS", linkageName: "std.core.string.SURROGATE_BITS", scope: !2, file: !2, line: 22, type: !3, isLocal: true, isDefinition: true, align: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "SURROGATE_LOW_VALUE", linkageName: "std.core.string.SURROGATE_LOW_VALUE", scope: !2, file: !2, line: 23, type: !3, isLocal: true, isDefinition: true, align: 4)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "SURROGATE_HIGH_VALUE", linkageName: "std.core.string.SURROGATE_HIGH_VALUE", scope: !2, file: !2, line: 24, type: !3, isLocal: true, isDefinition: true, align: 4)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_double.BITS", scope: !2, file: !2, line: 460, type: !18, isLocal: true, isDefinition: true, align: 4)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_double.EMIN", scope: !2, file: !2, line: 461, type: !18, isLocal: true, isDefinition: true, align: 4)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_double.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 64, align: 32, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 2, lowerBound: 0)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_double.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 256, align: 32, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 8, lowerBound: 0)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_float.BITS", scope: !2, file: !2, line: 457, type: !18, isLocal: true, isDefinition: true, align: 4)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_float.EMIN", scope: !2, file: !2, line: 458, type: !18, isLocal: true, isDefinition: true, align: 4)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_float.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_float.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "KMAX", linkageName: "std.core.string.KMAX", scope: !41, file: !41, line: 29, type: !18, isLocal: false, isDefinition: true, align: 4)
!41 = !DIFile(filename: "string_to_real.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "MASK", linkageName: "std.core.string.MASK", scope: !41, file: !41, line: 30, type: !18, isLocal: false, isDefinition: true, align: 4)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "B1B_DIG", linkageName: "std.core.string.B1B_DIG", scope: !41, file: !41, line: 31, type: !18, isLocal: false, isDefinition: true, align: 4)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "B1B_MAX", linkageName: "std.core.string.B1B_MAX", scope: !41, file: !41, line: 32, type: !23, isLocal: false, isDefinition: true, align: 4)
!48 = !{i32 4, !"PIE Level", i32 2}
!49 = !{i32 4, !"PIC Level", i32 2}
!50 = !{i32 2, !"Dwarf Version", i32 4}
!51 = !{i32 2, !"Debug Info Version", i32 3}
!52 = !{i32 2, !"frame-pointer", i32 2}
!53 = !{i32 1, !"uwtable", i32 2}
!54 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !55, splitDebugInlining: false)
!55 = !{!0, !4, !6, !8, !10, !12, !14, !16, !19, !21, !26, !31, !33, !35, !37, !39, !42, !44, !46}
!56 = distinct !DISubprogram(name: "trim", linkageName: "std.core.String.trim", scope: !2, file: !2, line: 147, type: !57, scopeLine: 147, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!57 = !DISubroutineType(types: !58)
!58 = !{!59, !59, !59}
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !60)
!60 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !61, identifier: "char[]")
!61 = !{!62, !65}
!62 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !60, baseType: !63, size: 64, align: 64)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !64, size: 64, align: 64, dwarfAddressSpace: 0)
!64 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !60, baseType: !66, size: 64, align: 64, offset: 64)
!66 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !67)
!67 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!68 = !{}
!69 = !DILocalVariable(name: "string", arg: 1, scope: !56, file: !2, line: 147, type: !59)
!70 = !DILocation(line: 147, column: 23, scope: !56)
!71 = !DILocalVariable(name: "to_trim", arg: 2, scope: !56, file: !2, line: 147, type: !59)
!72 = !DILocation(line: 147, column: 38, scope: !56)
!73 = !DILocalVariable(name: "start", scope: !56, file: !2, line: 149, type: !66, align: 8)
!74 = !DILocation(line: 149, column: 6, scope: !56)
!75 = !DILocation(line: 149, column: 14, scope: !56)
!76 = !DILocalVariable(name: "len", scope: !56, file: !2, line: 150, type: !66, align: 8)
!77 = !DILocation(line: 150, column: 6, scope: !56)
!78 = !DILocation(line: 150, column: 12, scope: !56)
!79 = !DILocation(line: 151, column: 2, scope: !56)
!80 = !DILocation(line: 151, column: 9, scope: !81)
!81 = distinct !DILexicalBlock(scope: !56, file: !2, line: 151, column: 2)
!82 = !DILocation(line: 151, column: 17, scope: !81)
!83 = !DILocation(line: 151, column: 36, scope: !81)
!84 = !DILocation(line: 151, column: 43, scope: !81)
!85 = !DILocalVariable(name: ".temp", scope: !86, file: !2, line: 110, type: !66, align: 8)
!86 = distinct !DILexicalBlock(scope: !87, file: !2, line: 110, column: 2)
!87 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 108, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!88 = !DILocation(line: 110, column: 16, scope: !86, inlinedAt: !89)
!89 = !DILocation(line: 151, column: 24, scope: !81)
!90 = !DILocalVariable(name: "ch", scope: !91, file: !2, line: 110, type: !64, align: 1)
!91 = distinct !DILexicalBlock(scope: !86, file: !2, line: 110, column: 21)
!92 = !DILocation(line: 110, column: 11, scope: !91, inlinedAt: !89)
!93 = !DILocation(line: 110, column: 16, scope: !91, inlinedAt: !89)
!94 = !DILocation(line: 110, column: 25, scope: !91, inlinedAt: !89)
!95 = !DILocation(line: 110, column: 31, scope: !91, inlinedAt: !89)
!96 = !DILocation(line: 110, column: 41, scope: !91, inlinedAt: !89)
!97 = !DILocation(line: 111, column: 9, scope: !87, inlinedAt: !89)
!98 = !DILocation(line: 151, column: 61, scope: !81)
!99 = !DILocation(line: 152, column: 6, scope: !56)
!100 = !DILocation(line: 152, column: 15, scope: !56)
!101 = !DILocation(line: 152, column: 27, scope: !56)
!102 = !DILocalVariable(name: "end", scope: !56, file: !2, line: 153, type: !66, align: 8)
!103 = !DILocation(line: 153, column: 6, scope: !56)
!104 = !DILocation(line: 153, column: 12, scope: !56)
!105 = !DILocation(line: 154, column: 2, scope: !56)
!106 = !DILocation(line: 154, column: 9, scope: !107)
!107 = distinct !DILexicalBlock(scope: !56, file: !2, line: 154, column: 2)
!108 = !DILocation(line: 154, column: 15, scope: !107)
!109 = !DILocation(line: 154, column: 36, scope: !107)
!110 = !DILocation(line: 154, column: 43, scope: !107)
!111 = !DILocalVariable(name: ".temp", scope: !112, file: !2, line: 110, type: !66, align: 8)
!112 = distinct !DILexicalBlock(scope: !113, file: !2, line: 110, column: 2)
!113 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 108, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!114 = !DILocation(line: 110, column: 16, scope: !112, inlinedAt: !115)
!115 = !DILocation(line: 154, column: 24, scope: !107)
!116 = !DILocalVariable(name: "ch", scope: !117, file: !2, line: 110, type: !64, align: 1)
!117 = distinct !DILexicalBlock(scope: !112, file: !2, line: 110, column: 21)
!118 = !DILocation(line: 110, column: 11, scope: !117, inlinedAt: !115)
!119 = !DILocation(line: 110, column: 16, scope: !117, inlinedAt: !115)
!120 = !DILocation(line: 110, column: 25, scope: !117, inlinedAt: !115)
!121 = !DILocation(line: 110, column: 31, scope: !117, inlinedAt: !115)
!122 = !DILocation(line: 110, column: 41, scope: !117, inlinedAt: !115)
!123 = !DILocation(line: 111, column: 9, scope: !113, inlinedAt: !115)
!124 = !DILocation(line: 154, column: 59, scope: !107)
!125 = !DILocation(line: 155, column: 9, scope: !56)
!126 = !DILocation(line: 155, column: 16, scope: !56)
!127 = !DILocation(line: 155, column: 23, scope: !56)
!128 = distinct !DISubprogram(name: "starts_with", linkageName: "std.core.String.starts_with", scope: !2, file: !2, line: 166, type: !129, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!129 = !DISubroutineType(types: !130)
!130 = !{!131, !59, !59}
!131 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!132 = !DILocalVariable(name: "string", arg: 1, scope: !128, file: !2, line: 166, type: !59)
!133 = !DILocation(line: 166, column: 28, scope: !128)
!134 = !DILocalVariable(name: "needle", arg: 2, scope: !128, file: !2, line: 166, type: !59)
!135 = !DILocation(line: 166, column: 43, scope: !128)
!136 = !DILocation(line: 168, column: 6, scope: !128)
!137 = !DILocation(line: 168, column: 19, scope: !128)
!138 = !DILocation(line: 168, column: 38, scope: !128)
!139 = !DILocation(line: 169, column: 7, scope: !128)
!140 = !DILocation(line: 169, column: 26, scope: !128)
!141 = !DILocation(line: 170, column: 9, scope: !128)
!142 = !DILocation(line: 170, column: 16, scope: !128)
!143 = !DILocation(line: 170, column: 17, scope: !128)
!144 = !DILocation(line: 170, column: 32, scope: !128)
!145 = distinct !DISubprogram(name: "ends_with", linkageName: "std.core.String.ends_with", scope: !2, file: !2, line: 181, type: !129, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!146 = !DILocalVariable(name: "string", arg: 1, scope: !145, file: !2, line: 181, type: !59)
!147 = !DILocation(line: 181, column: 26, scope: !145)
!148 = !DILocalVariable(name: "needle", arg: 2, scope: !145, file: !2, line: 181, type: !59)
!149 = !DILocation(line: 181, column: 41, scope: !145)
!150 = !DILocation(line: 183, column: 6, scope: !145)
!151 = !DILocation(line: 183, column: 19, scope: !145)
!152 = !DILocation(line: 183, column: 38, scope: !145)
!153 = !DILocation(line: 184, column: 7, scope: !145)
!154 = !DILocation(line: 184, column: 26, scope: !145)
!155 = !DILocation(line: 185, column: 9, scope: !145)
!156 = !DILocation(line: 185, column: 17, scope: !145)
!157 = !DILocation(line: 185, column: 34, scope: !145)
!158 = distinct !DISubprogram(name: "strip", linkageName: "std.core.String.strip", scope: !2, file: !2, line: 196, type: !57, scopeLine: 196, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!159 = !DILocalVariable(name: "string", arg: 1, scope: !158, file: !2, line: 196, type: !59)
!160 = !DILocation(line: 196, column: 24, scope: !158)
!161 = !DILocalVariable(name: "needle", arg: 2, scope: !158, file: !2, line: 196, type: !59)
!162 = !DILocation(line: 196, column: 39, scope: !158)
!163 = !DILocation(line: 198, column: 7, scope: !158)
!164 = !DILocation(line: 198, column: 41, scope: !158)
!165 = !DILocation(line: 198, column: 22, scope: !158)
!166 = !DILocation(line: 198, column: 57, scope: !158)
!167 = !DILocation(line: 199, column: 9, scope: !158)
!168 = !DILocation(line: 199, column: 16, scope: !158)
!169 = distinct !DISubprogram(name: "strip_end", linkageName: "std.core.String.strip_end", scope: !2, file: !2, line: 210, type: !57, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!170 = !DILocalVariable(name: "string", arg: 1, scope: !169, file: !2, line: 210, type: !59)
!171 = !DILocation(line: 210, column: 28, scope: !169)
!172 = !DILocalVariable(name: "needle", arg: 2, scope: !169, file: !2, line: 210, type: !59)
!173 = !DILocation(line: 210, column: 43, scope: !169)
!174 = !DILocation(line: 212, column: 7, scope: !169)
!175 = !DILocation(line: 212, column: 39, scope: !169)
!176 = !DILocation(line: 212, column: 22, scope: !169)
!177 = !DILocation(line: 212, column: 55, scope: !169)
!178 = !DILocation(line: 214, column: 9, scope: !169)
!179 = !DILocation(line: 214, column: 16, scope: !169)
!180 = !DILocation(line: 214, column: 18, scope: !169)
!181 = !DILocation(line: 214, column: 31, scope: !169)
!182 = distinct !DISubprogram(name: "split", linkageName: "std.core.String.split", scope: !2, file: !2, line: 227, type: !183, scopeLine: 227, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!183 = !DISubroutineType(types: !184)
!184 = !{!185, !59, !59, !67, !190}
!185 = !DICompositeType(tag: DW_TAG_structure_type, name: "String[]", size: 128, align: 64, elements: !186, identifier: "String[]")
!186 = !{!187, !189}
!187 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !185, baseType: !188, size: 64, align: 64)
!188 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !59, size: 64, align: 64, dwarfAddressSpace: 0)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !185, baseType: !66, size: 64, align: 64, offset: 64)
!190 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !191, identifier: "Allocator")
!191 = !{!192, !194}
!192 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !190, baseType: !193, size: 64, align: 64)
!193 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!194 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !190, baseType: !195, size: 64, align: 64, offset: 64)
!195 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!196 = !DILocalVariable(name: "s", arg: 1, scope: !182, file: !2, line: 227, type: !59)
!197 = !DILocation(line: 227, column: 26, scope: !182)
!198 = !DILocalVariable(name: "needle", arg: 2, scope: !182, file: !2, line: 227, type: !59)
!199 = !DILocation(line: 227, column: 36, scope: !182)
!200 = !DILocalVariable(name: "max", arg: 3, scope: !182, file: !2, line: 227, type: !66)
!201 = !DILocation(line: 227, column: 48, scope: !182)
!202 = !DILocalVariable(name: "allocator", arg: 4, scope: !182, file: !2, line: 227, type: !190)
!203 = !DILocation(line: 227, column: 67, scope: !182)
!204 = !DILocation(line: 224, column: 11, scope: !205)
!205 = distinct !DILexicalBlock(scope: !182, file: !2, line: 228, column: 1)
!206 = !DILocalVariable(name: "capacity", scope: !182, file: !2, line: 229, type: !66, align: 8)
!207 = !DILocation(line: 229, column: 6, scope: !182)
!208 = !DILocation(line: 229, column: 17, scope: !182)
!209 = !DILocalVariable(name: "i", scope: !182, file: !2, line: 230, type: !66, align: 8)
!210 = !DILocation(line: 230, column: 6, scope: !182)
!211 = !DILocation(line: 230, column: 10, scope: !182)
!212 = !DILocalVariable(name: "holder", scope: !182, file: !2, line: 231, type: !188, align: 8)
!213 = !DILocation(line: 231, column: 10, scope: !182)
!214 = !DILocation(line: 286, column: 55, scope: !215, inlinedAt: !217)
!215 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !216, file: !216, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!216 = !DIFile(filename: "mem_allocator.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!217 = !DILocation(line: 269, column: 9, scope: !218, inlinedAt: !219)
!218 = distinct !DISubprogram(name: "alloc_array", linkageName: "alloc_array", scope: !216, file: !216, line: 267, scopeLine: 267, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!219 = !DILocation(line: 231, column: 30, scope: !182)
!220 = !DILocation(line: 286, column: 40, scope: !215, inlinedAt: !217)
!221 = !DILocation(line: 62, column: 7, scope: !222, inlinedAt: !223)
!222 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !216, file: !216, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!223 = !DILocation(line: 286, column: 11, scope: !215, inlinedAt: !217)
!224 = !DILocation(line: 62, column: 20, scope: !222, inlinedAt: !223)
!225 = !DILocation(line: 28, column: 71, scope: !226, inlinedAt: !227)
!226 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!227 = !DILocation(line: 68, column: 10, scope: !222, inlinedAt: !223)
!228 = !DILocation(line: 286, column: 67, scope: !215, inlinedAt: !217)
!229 = !DILocalVariable(name: "no_more", scope: !182, file: !2, line: 232, type: !131, align: 1)
!230 = !DILocation(line: 232, column: 7, scope: !182)
!231 = !DILocation(line: 232, column: 17, scope: !182)
!232 = !DILocation(line: 233, column: 2, scope: !182)
!233 = !DILocation(line: 233, column: 10, scope: !234)
!234 = distinct !DILexicalBlock(scope: !182, file: !2, line: 233, column: 2)
!235 = !DILocalVariable(name: "index", scope: !236, file: !2, line: 235, type: !67, align: 8)
!236 = distinct !DILexicalBlock(scope: !234, file: !2, line: 234, column: 2)
!237 = !DILocation(line: 235, column: 8, scope: !236)
!238 = !DILocation(line: 235, column: 16, scope: !236)
!239 = !DILocation(line: 235, column: 21, scope: !236)
!240 = !DILocation(line: 235, column: 31, scope: !236)
!241 = !DILocation(line: 235, column: 55, scope: !236)
!242 = !DILocalVariable(name: "res", scope: !236, file: !2, line: 236, type: !59, align: 8)
!243 = !DILocation(line: 236, column: 10, scope: !236)
!244 = !DILocation(line: 237, column: 7, scope: !236)
!245 = !DILocation(line: 239, column: 10, scope: !246)
!246 = distinct !DILexicalBlock(scope: !236, file: !2, line: 238, column: 3)
!247 = !DILocation(line: 239, column: 12, scope: !246)
!248 = !DILocation(line: 239, column: 13, scope: !246)
!249 = !DILocation(line: 240, column: 8, scope: !246)
!250 = !DILocation(line: 240, column: 10, scope: !246)
!251 = !DILocation(line: 240, column: 18, scope: !246)
!252 = !DILocation(line: 244, column: 10, scope: !253)
!253 = distinct !DILexicalBlock(scope: !236, file: !2, line: 243, column: 3)
!254 = !DILocation(line: 245, column: 14, scope: !253)
!255 = !DILocation(line: 247, column: 7, scope: !236)
!256 = !DILocation(line: 247, column: 12, scope: !236)
!257 = !DILocation(line: 249, column: 4, scope: !258)
!258 = distinct !DILexicalBlock(scope: !236, file: !2, line: 248, column: 3)
!259 = !DILocation(line: 250, column: 43, scope: !258)
!260 = !DILocation(line: 250, column: 67, scope: !258)
!261 = !DILocation(line: 250, column: 51, scope: !258)
!262 = !DILocation(line: 90, column: 7, scope: !263, inlinedAt: !264)
!263 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !216, file: !216, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!264 = !DILocation(line: 85, column: 9, scope: !265, inlinedAt: !266)
!265 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !216, file: !216, line: 83, scopeLine: 83, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!266 = !DILocation(line: 250, column: 24, scope: !258)
!267 = !DILocation(line: 101, column: 7, scope: !268, inlinedAt: !269)
!268 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !216, file: !216, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!269 = !DILocation(line: 92, column: 3, scope: !270, inlinedAt: !264)
!270 = distinct !DILexicalBlock(scope: !263, file: !216, line: 91, column: 2)
!271 = !DILocation(line: 101, column: 18, scope: !268, inlinedAt: !269)
!272 = !DILocation(line: 105, column: 25, scope: !268, inlinedAt: !269)
!273 = !DILocation(line: 105, column: 2, scope: !268, inlinedAt: !269)
!274 = !DILocation(line: 93, column: 10, scope: !270, inlinedAt: !264)
!275 = !DILocation(line: 95, column: 7, scope: !263, inlinedAt: !264)
!276 = !DILocation(line: 28, column: 71, scope: !277, inlinedAt: !278)
!277 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!278 = !DILocation(line: 95, column: 19, scope: !263, inlinedAt: !264)
!279 = !DILocation(line: 35, column: 60, scope: !280, inlinedAt: !281)
!280 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!281 = !DILocation(line: 96, column: 9, scope: !263, inlinedAt: !264)
!282 = !DILocation(line: 252, column: 3, scope: !236)
!283 = !DILocation(line: 252, column: 10, scope: !236)
!284 = !DILocation(line: 252, column: 17, scope: !236)
!285 = !DILocation(line: 254, column: 9, scope: !182)
!286 = !DILocation(line: 254, column: 17, scope: !182)
!287 = !DILocation(line: 225, column: 10, scope: !182)
!288 = distinct !DISubprogram(name: "new_split", linkageName: "std.core.String.new_split", scope: !2, file: !2, line: 267, type: !289, scopeLine: 267, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!289 = !DISubroutineType(types: !290)
!290 = !{!185, !59, !59, !67}
!291 = !DILocalVariable(name: "s", arg: 1, scope: !288, file: !2, line: 267, type: !59)
!292 = !DILocation(line: 267, column: 30, scope: !288)
!293 = !DILocalVariable(name: "needle", arg: 2, scope: !288, file: !2, line: 267, type: !59)
!294 = !DILocation(line: 267, column: 40, scope: !288)
!295 = !DILocalVariable(name: "max", arg: 3, scope: !288, file: !2, line: 267, type: !66)
!296 = !DILocation(line: 267, column: 52, scope: !288)
!297 = !DILocation(line: 264, column: 11, scope: !298)
!298 = distinct !DILexicalBlock(scope: !288, file: !2, line: 267, column: 64)
!299 = !DILocation(line: 392, column: 27, scope: !300, inlinedAt: !301)
!300 = distinct !DISubprogram(name: "heap", linkageName: "heap", scope: !216, file: !216, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!301 = !DILocation(line: 267, column: 96, scope: !288)
!302 = !DILocation(line: 267, column: 64, scope: !288)
!303 = !DILocation(line: 265, column: 10, scope: !288)
!304 = distinct !DISubprogram(name: "tsplit", linkageName: "std.core.String.tsplit", scope: !2, file: !2, line: 277, type: !289, scopeLine: 277, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!305 = !DILocalVariable(name: "s", arg: 1, scope: !304, file: !2, line: 277, type: !59)
!306 = !DILocation(line: 277, column: 27, scope: !304)
!307 = !DILocalVariable(name: "needle", arg: 2, scope: !304, file: !2, line: 277, type: !59)
!308 = !DILocation(line: 277, column: 37, scope: !304)
!309 = !DILocalVariable(name: "max", arg: 3, scope: !304, file: !2, line: 277, type: !66)
!310 = !DILocation(line: 277, column: 49, scope: !304)
!311 = !DILocation(line: 396, column: 7, scope: !312, inlinedAt: !313)
!312 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!313 = !DILocation(line: 277, column: 93, scope: !304)
!314 = !DILocation(line: 398, column: 3, scope: !315, inlinedAt: !313)
!315 = distinct !DILexicalBlock(scope: !312, file: !216, line: 397, column: 2)
!316 = !DILocation(line: 400, column: 9, scope: !312, inlinedAt: !313)
!317 = !DILocation(line: 277, column: 61, scope: !304)
!318 = distinct !DISubprogram(name: "contains", linkageName: "std.core.String.contains", scope: !2, file: !2, line: 287, type: !129, scopeLine: 287, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!319 = !DILocalVariable(name: "s", arg: 1, scope: !318, file: !2, line: 287, type: !59)
!320 = !DILocation(line: 287, column: 25, scope: !318)
!321 = !DILocalVariable(name: "needle", arg: 2, scope: !318, file: !2, line: 287, type: !59)
!322 = !DILocation(line: 287, column: 35, scope: !318)
!323 = !DILocation(line: 336, column: 12, scope: !324, inlinedAt: !326)
!324 = distinct !DISubprogram(name: "@ok", linkageName: "@ok", scope: !325, file: !325, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!325 = !DIFile(filename: "builtin.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!326 = !DILocation(line: 289, column: 9, scope: !318)
!327 = !DILocation(line: 336, column: 26, scope: !324, inlinedAt: !326)
!328 = !DILocation(line: 337, column: 9, scope: !324, inlinedAt: !326)
!329 = distinct !DISubprogram(name: "index_of_char", linkageName: "std.core.String.index_of_char", scope: !2, file: !2, line: 302, type: !330, scopeLine: 302, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!330 = !DISubroutineType(types: !331)
!331 = !{!332, !334, !59, !64}
!332 = !DIDerivedType(tag: DW_TAG_typedef, name: "anyfault", baseType: !333)
!333 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!334 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !66, size: 64, align: 64, dwarfAddressSpace: 0)
!335 = !DILocalVariable(name: "s", arg: 1, scope: !329, file: !2, line: 302, type: !59)
!336 = !DILocation(line: 302, column: 30, scope: !329)
!337 = !DILocalVariable(name: "needle", arg: 2, scope: !329, file: !2, line: 302, type: !64)
!338 = !DILocation(line: 302, column: 38, scope: !329)
!339 = !DILocalVariable(name: ".temp", scope: !340, file: !2, line: 304, type: !66, align: 8)
!340 = distinct !DILexicalBlock(scope: !329, file: !2, line: 304, column: 2)
!341 = !DILocation(line: 304, column: 18, scope: !340)
!342 = !DILocation(line: 304, column: 11, scope: !340)
!343 = !DILocalVariable(name: "i", scope: !344, file: !2, line: 304, type: !66, align: 8)
!344 = distinct !DILexicalBlock(scope: !340, file: !2, line: 305, column: 2)
!345 = !DILocation(line: 304, column: 11, scope: !344)
!346 = !DILocalVariable(name: "c", scope: !344, file: !2, line: 304, type: !64, align: 1)
!347 = !DILocation(line: 304, column: 14, scope: !344)
!348 = !DILocation(line: 304, column: 18, scope: !344)
!349 = !DILocation(line: 306, column: 7, scope: !350)
!350 = distinct !DILexicalBlock(scope: !344, file: !2, line: 305, column: 2)
!351 = !DILocation(line: 306, column: 12, scope: !350)
!352 = !DILocation(line: 306, column: 27, scope: !350)
!353 = !DILocation(line: 298, column: 10, scope: !350)
!354 = !DILocation(line: 298, column: 19, scope: !350)
!355 = !DILocation(line: 308, column: 9, scope: !329)
!356 = distinct !DISubprogram(name: "index_of_char_from", linkageName: "std.core.String.index_of_char_from", scope: !2, file: !2, line: 322, type: !357, scopeLine: 322, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!357 = !DISubroutineType(types: !358)
!358 = !{!332, !334, !59, !64, !67}
!359 = !DILocalVariable(name: "s", arg: 1, scope: !356, file: !2, line: 322, type: !59)
!360 = !DILocation(line: 322, column: 35, scope: !356)
!361 = !DILocalVariable(name: "needle", arg: 2, scope: !356, file: !2, line: 322, type: !64)
!362 = !DILocation(line: 322, column: 43, scope: !356)
!363 = !DILocalVariable(name: "start_index", arg: 3, scope: !356, file: !2, line: 322, type: !66)
!364 = !DILocation(line: 322, column: 55, scope: !356)
!365 = !DILocalVariable(name: "len", scope: !356, file: !2, line: 324, type: !66, align: 8)
!366 = !DILocation(line: 324, column: 6, scope: !356)
!367 = !DILocation(line: 324, column: 12, scope: !356)
!368 = !DILocation(line: 325, column: 6, scope: !356)
!369 = !DILocation(line: 325, column: 13, scope: !356)
!370 = !DILocation(line: 325, column: 33, scope: !356)
!371 = !DILocalVariable(name: "i", scope: !372, file: !2, line: 326, type: !66, align: 8)
!372 = distinct !DILexicalBlock(scope: !356, file: !2, line: 326, column: 2)
!373 = !DILocation(line: 326, column: 11, scope: !372)
!374 = !DILocation(line: 326, column: 15, scope: !372)
!375 = !DILocation(line: 326, column: 28, scope: !372)
!376 = !DILocation(line: 326, column: 32, scope: !372)
!377 = !DILocation(line: 328, column: 7, scope: !378)
!378 = distinct !DILexicalBlock(scope: !372, file: !2, line: 327, column: 2)
!379 = !DILocation(line: 328, column: 9, scope: !378)
!380 = !DILocation(line: 328, column: 15, scope: !378)
!381 = !DILocation(line: 328, column: 30, scope: !378)
!382 = !DILocation(line: 318, column: 10, scope: !378)
!383 = !DILocation(line: 318, column: 19, scope: !378)
!384 = !DILocation(line: 326, column: 37, scope: !372)
!385 = !DILocation(line: 330, column: 9, scope: !356)
!386 = distinct !DISubprogram(name: "rindex_of_char", linkageName: "std.core.String.rindex_of_char", scope: !2, file: !2, line: 343, type: !330, scopeLine: 343, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!387 = !DILocalVariable(name: "s", arg: 1, scope: !386, file: !2, line: 343, type: !59)
!388 = !DILocation(line: 343, column: 31, scope: !386)
!389 = !DILocalVariable(name: "needle", arg: 2, scope: !386, file: !2, line: 343, type: !64)
!390 = !DILocation(line: 343, column: 39, scope: !386)
!391 = !DILocalVariable(name: ".temp", scope: !392, file: !2, line: 345, type: !66, align: 8)
!392 = distinct !DILexicalBlock(scope: !386, file: !2, line: 345, column: 2)
!393 = !DILocation(line: 345, column: 13, scope: !392)
!394 = !DILocation(line: 345, column: 20, scope: !392)
!395 = !DILocalVariable(name: "i", scope: !396, file: !2, line: 345, type: !66, align: 8)
!396 = distinct !DILexicalBlock(scope: !392, file: !2, line: 346, column: 2)
!397 = !DILocation(line: 345, column: 13, scope: !396)
!398 = !DILocalVariable(name: "c", scope: !396, file: !2, line: 345, type: !64, align: 1)
!399 = !DILocation(line: 345, column: 16, scope: !396)
!400 = !DILocation(line: 345, column: 20, scope: !396)
!401 = !DILocation(line: 347, column: 7, scope: !402)
!402 = distinct !DILexicalBlock(scope: !396, file: !2, line: 346, column: 2)
!403 = !DILocation(line: 347, column: 12, scope: !402)
!404 = !DILocation(line: 347, column: 27, scope: !402)
!405 = !DILocation(line: 339, column: 10, scope: !402)
!406 = !DILocation(line: 339, column: 19, scope: !402)
!407 = !DILocation(line: 349, column: 9, scope: !386)
!408 = distinct !DISubprogram(name: "index_of", linkageName: "std.core.String.index_of", scope: !2, file: !2, line: 363, type: !409, scopeLine: 363, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!409 = !DISubroutineType(types: !410)
!410 = !{!332, !334, !59, !59}
!411 = !DILocalVariable(name: "s", arg: 1, scope: !408, file: !2, line: 363, type: !59)
!412 = !DILocation(line: 363, column: 25, scope: !408)
!413 = !DILocalVariable(name: "needle", arg: 2, scope: !408, file: !2, line: 363, type: !59)
!414 = !DILocation(line: 363, column: 35, scope: !408)
!415 = !DILocation(line: 359, column: 11, scope: !416)
!416 = distinct !DILexicalBlock(scope: !408, file: !2, line: 364, column: 1)
!417 = !DILocalVariable(name: "needed", scope: !408, file: !2, line: 365, type: !66, align: 8)
!418 = !DILocation(line: 365, column: 6, scope: !408)
!419 = !DILocation(line: 365, column: 15, scope: !408)
!420 = !DILocation(line: 366, column: 6, scope: !408)
!421 = !DILocation(line: 366, column: 20, scope: !408)
!422 = !DILocation(line: 366, column: 29, scope: !408)
!423 = !DILocalVariable(name: "first", scope: !424, file: !2, line: 368, type: !64, align: 1)
!424 = distinct !DILexicalBlock(scope: !408, file: !2, line: 367, column: 2)
!425 = !DILocation(line: 368, column: 8, scope: !424)
!426 = !DILocation(line: 368, column: 16, scope: !424)
!427 = !DILocation(line: 368, column: 23, scope: !424)
!428 = !DILocalVariable(name: ".temp", scope: !429, file: !2, line: 369, type: !188, align: 8)
!429 = distinct !DILexicalBlock(scope: !424, file: !2, line: 369, column: 3)
!430 = !DILocation(line: 369, column: 18, scope: !429)
!431 = !DILocation(line: 369, column: 20, scope: !429)
!432 = !DILocation(line: 369, column: 23, scope: !429)
!433 = !DILocalVariable(name: ".temp", scope: !429, file: !2, line: 369, type: !66, align: 8)
!434 = !DILocation(line: 369, column: 12, scope: !429)
!435 = !DILocalVariable(name: "i", scope: !436, file: !2, line: 369, type: !66, align: 8)
!436 = distinct !DILexicalBlock(scope: !429, file: !2, line: 370, column: 3)
!437 = !DILocation(line: 369, column: 12, scope: !436)
!438 = !DILocalVariable(name: "c", scope: !436, file: !2, line: 369, type: !64, align: 1)
!439 = !DILocation(line: 369, column: 15, scope: !436)
!440 = !DILocation(line: 369, column: 18, scope: !436)
!441 = !DILocation(line: 371, column: 8, scope: !442)
!442 = distinct !DILexicalBlock(scope: !436, file: !2, line: 370, column: 3)
!443 = !DILocation(line: 371, column: 13, scope: !442)
!444 = !DILocation(line: 371, column: 22, scope: !442)
!445 = !DILocation(line: 371, column: 24, scope: !442)
!446 = !DILocation(line: 371, column: 26, scope: !442)
!447 = !DILocation(line: 371, column: 37, scope: !442)
!448 = !DILocation(line: 371, column: 52, scope: !442)
!449 = !DILocation(line: 358, column: 10, scope: !442)
!450 = !DILocation(line: 358, column: 19, scope: !442)
!451 = !DILocation(line: 374, column: 9, scope: !408)
!452 = distinct !DISubprogram(name: "rindex_of", linkageName: "std.core.String.rindex_of", scope: !2, file: !2, line: 388, type: !409, scopeLine: 388, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!453 = !DILocalVariable(name: "s", arg: 1, scope: !452, file: !2, line: 388, type: !59)
!454 = !DILocation(line: 388, column: 26, scope: !452)
!455 = !DILocalVariable(name: "needle", arg: 2, scope: !452, file: !2, line: 388, type: !59)
!456 = !DILocation(line: 388, column: 36, scope: !452)
!457 = !DILocation(line: 384, column: 11, scope: !458)
!458 = distinct !DILexicalBlock(scope: !452, file: !2, line: 389, column: 1)
!459 = !DILocalVariable(name: "needed", scope: !452, file: !2, line: 390, type: !66, align: 8)
!460 = !DILocation(line: 390, column: 6, scope: !452)
!461 = !DILocation(line: 390, column: 15, scope: !452)
!462 = !DILocation(line: 391, column: 6, scope: !452)
!463 = !DILocation(line: 391, column: 20, scope: !452)
!464 = !DILocation(line: 391, column: 29, scope: !452)
!465 = !DILocalVariable(name: "first", scope: !466, file: !2, line: 393, type: !64, align: 1)
!466 = distinct !DILexicalBlock(scope: !452, file: !2, line: 392, column: 2)
!467 = !DILocation(line: 393, column: 8, scope: !466)
!468 = !DILocation(line: 393, column: 16, scope: !466)
!469 = !DILocation(line: 393, column: 23, scope: !466)
!470 = !DILocalVariable(name: ".temp", scope: !471, file: !2, line: 394, type: !188, align: 8)
!471 = distinct !DILexicalBlock(scope: !466, file: !2, line: 394, column: 3)
!472 = !DILocation(line: 394, column: 20, scope: !471)
!473 = !DILocation(line: 394, column: 22, scope: !471)
!474 = !DILocation(line: 394, column: 25, scope: !471)
!475 = !DILocalVariable(name: ".temp", scope: !471, file: !2, line: 394, type: !66, align: 8)
!476 = !DILocation(line: 394, column: 14, scope: !471)
!477 = !DILocalVariable(name: "i", scope: !478, file: !2, line: 394, type: !66, align: 8)
!478 = distinct !DILexicalBlock(scope: !471, file: !2, line: 395, column: 3)
!479 = !DILocation(line: 394, column: 14, scope: !478)
!480 = !DILocalVariable(name: "c", scope: !478, file: !2, line: 394, type: !64, align: 1)
!481 = !DILocation(line: 394, column: 17, scope: !478)
!482 = !DILocation(line: 394, column: 20, scope: !478)
!483 = !DILocation(line: 396, column: 8, scope: !484)
!484 = distinct !DILexicalBlock(scope: !478, file: !2, line: 395, column: 3)
!485 = !DILocation(line: 396, column: 13, scope: !484)
!486 = !DILocation(line: 396, column: 22, scope: !484)
!487 = !DILocation(line: 396, column: 24, scope: !484)
!488 = !DILocation(line: 396, column: 26, scope: !484)
!489 = !DILocation(line: 396, column: 37, scope: !484)
!490 = !DILocation(line: 396, column: 52, scope: !484)
!491 = !DILocation(line: 383, column: 10, scope: !484)
!492 = !DILocation(line: 383, column: 19, scope: !484)
!493 = !DILocation(line: 399, column: 9, scope: !452)
!494 = distinct !DISubprogram(name: "str_view", linkageName: "std.core.string.ZString.str_view", scope: !2, file: !2, line: 402, type: !495, scopeLine: 402, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!495 = !DISubroutineType(types: !496)
!496 = !{!59, !497}
!497 = !DIDerivedType(tag: DW_TAG_typedef, name: "ZString", scope: !2, file: !2, line: 6, baseType: !63, align: 8)
!498 = !DILocalVariable(name: "str", arg: 1, scope: !494, file: !2, line: 402, type: !497)
!499 = !DILocation(line: 402, column: 28, scope: !494)
!500 = !DILocation(line: 404, column: 18, scope: !494)
!501 = !DILocation(line: 404, column: 23, scope: !494)
!502 = distinct !DISubprogram(name: "char_len", linkageName: "std.core.string.ZString.char_len", scope: !2, file: !2, line: 407, type: !503, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!503 = !DISubroutineType(types: !504)
!504 = !{!66, !497}
!505 = !DILocalVariable(name: "str", arg: 1, scope: !502, file: !2, line: 407, type: !497)
!506 = !DILocation(line: 407, column: 25, scope: !502)
!507 = !DILocalVariable(name: "len", scope: !502, file: !2, line: 409, type: !66, align: 8)
!508 = !DILocation(line: 409, column: 6, scope: !502)
!509 = !DILocation(line: 409, column: 12, scope: !502)
!510 = !DILocalVariable(name: "ptr", scope: !502, file: !2, line: 410, type: !63, align: 8)
!511 = !DILocation(line: 410, column: 8, scope: !502)
!512 = !DILocation(line: 410, column: 15, scope: !502)
!513 = !DILocation(line: 411, column: 2, scope: !502)
!514 = !DILocalVariable(name: "c", scope: !515, file: !2, line: 411, type: !64, align: 1)
!515 = distinct !DILexicalBlock(scope: !502, file: !2, line: 411, column: 2)
!516 = !DILocation(line: 411, column: 14, scope: !515)
!517 = !DILocation(line: 411, column: 18, scope: !515)
!518 = !DILocation(line: 411, column: 24, scope: !515)
!519 = !DILocation(line: 413, column: 7, scope: !520)
!520 = distinct !DILexicalBlock(scope: !515, file: !2, line: 412, column: 2)
!521 = !DILocation(line: 413, column: 25, scope: !520)
!522 = !DILocation(line: 415, column: 9, scope: !502)
!523 = distinct !DISubprogram(name: "len", linkageName: "std.core.string.ZString.len", scope: !2, file: !2, line: 418, type: !503, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!524 = !DILocalVariable(name: "str", arg: 1, scope: !523, file: !2, line: 418, type: !497)
!525 = !DILocation(line: 418, column: 20, scope: !523)
!526 = !DILocalVariable(name: "len", scope: !523, file: !2, line: 420, type: !66, align: 8)
!527 = !DILocation(line: 420, column: 6, scope: !523)
!528 = !DILocation(line: 420, column: 12, scope: !523)
!529 = !DILocalVariable(name: "ptr", scope: !523, file: !2, line: 421, type: !63, align: 8)
!530 = !DILocation(line: 421, column: 8, scope: !523)
!531 = !DILocation(line: 421, column: 15, scope: !523)
!532 = !DILocation(line: 422, column: 2, scope: !523)
!533 = !DILocalVariable(name: "c", scope: !534, file: !2, line: 422, type: !64, align: 1)
!534 = distinct !DILexicalBlock(scope: !523, file: !2, line: 422, column: 2)
!535 = !DILocation(line: 422, column: 14, scope: !534)
!536 = !DILocation(line: 422, column: 18, scope: !534)
!537 = !DILocation(line: 422, column: 24, scope: !534)
!538 = !DILocation(line: 422, column: 28, scope: !534)
!539 = !DILocation(line: 423, column: 9, scope: !523)
!540 = distinct !DISubprogram(name: "zstr_copy", linkageName: "std.core.String.zstr_copy", scope: !2, file: !2, line: 427, type: !541, scopeLine: 427, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!541 = !DISubroutineType(types: !542)
!542 = !{!497, !59, !190}
!543 = !DILocalVariable(name: "s", arg: 1, scope: !540, file: !2, line: 427, type: !59)
!544 = !DILocation(line: 427, column: 29, scope: !540)
!545 = !DILocalVariable(name: "allocator", arg: 2, scope: !540, file: !2, line: 427, type: !190)
!546 = !DILocation(line: 427, column: 42, scope: !540)
!547 = !DILocalVariable(name: "len", scope: !540, file: !2, line: 429, type: !66, align: 8)
!548 = !DILocation(line: 429, column: 6, scope: !540)
!549 = !DILocation(line: 429, column: 12, scope: !540)
!550 = !DILocalVariable(name: "str", scope: !540, file: !2, line: 430, type: !63, align: 8)
!551 = !DILocation(line: 430, column: 8, scope: !540)
!552 = !DILocation(line: 430, column: 43, scope: !540)
!553 = !DILocation(line: 62, column: 7, scope: !554, inlinedAt: !555)
!554 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !216, file: !216, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!555 = !DILocation(line: 57, column: 9, scope: !556, inlinedAt: !557)
!556 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !216, file: !216, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!557 = !DILocation(line: 430, column: 25, scope: !540)
!558 = !DILocation(line: 62, column: 20, scope: !554, inlinedAt: !555)
!559 = !DILocation(line: 28, column: 71, scope: !560, inlinedAt: !561)
!560 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!561 = !DILocation(line: 68, column: 10, scope: !554, inlinedAt: !555)
!562 = !DILocation(line: 431, column: 12, scope: !540)
!563 = !DILocation(line: 431, column: 17, scope: !540)
!564 = !DILocation(line: 309, column: 11, scope: !565, inlinedAt: !568)
!565 = distinct !DILexicalBlock(scope: !567, file: !566, line: 312, column: 1)
!566 = !DIFile(filename: "mem.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!567 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !566, file: !566, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!568 = !DILocation(line: 431, column: 7, scope: !540)
!569 = !DILocation(line: 309, column: 23, scope: !565, inlinedAt: !568)
!570 = !DILocation(line: 309, column: 29, scope: !565, inlinedAt: !568)
!571 = !DILocation(line: 309, column: 36, scope: !565, inlinedAt: !568)
!572 = !DILocation(line: 309, column: 43, scope: !565, inlinedAt: !568)
!573 = !DILocation(line: 309, column: 49, scope: !565, inlinedAt: !568)
!574 = !DILocation(line: 309, column: 56, scope: !565, inlinedAt: !568)
!575 = !DILocation(line: 313, column: 11, scope: !567, inlinedAt: !568)
!576 = !DILocation(line: 313, column: 16, scope: !567, inlinedAt: !568)
!577 = !DILocation(line: 313, column: 21, scope: !567, inlinedAt: !568)
!578 = !DILocation(line: 313, column: 26, scope: !567, inlinedAt: !568)
!579 = !DILocation(line: 432, column: 2, scope: !540)
!580 = !DILocation(line: 432, column: 6, scope: !540)
!581 = !DILocation(line: 432, column: 13, scope: !540)
!582 = !DILocation(line: 433, column: 10, scope: !540)
!583 = distinct !DISubprogram(name: "concat", linkageName: "std.core.String.concat", scope: !2, file: !2, line: 436, type: !584, scopeLine: 436, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!584 = !DISubroutineType(types: !585)
!585 = !{!59, !59, !59, !190}
!586 = !DILocalVariable(name: "s1", arg: 1, scope: !583, file: !2, line: 436, type: !59)
!587 = !DILocation(line: 436, column: 25, scope: !583)
!588 = !DILocalVariable(name: "s2", arg: 2, scope: !583, file: !2, line: 436, type: !59)
!589 = !DILocation(line: 436, column: 36, scope: !583)
!590 = !DILocalVariable(name: "allocator", arg: 3, scope: !583, file: !2, line: 436, type: !190)
!591 = !DILocation(line: 436, column: 50, scope: !583)
!592 = !DILocalVariable(name: "full_len", scope: !583, file: !2, line: 438, type: !66, align: 8)
!593 = !DILocation(line: 438, column: 6, scope: !583)
!594 = !DILocation(line: 438, column: 17, scope: !583)
!595 = !DILocation(line: 438, column: 26, scope: !583)
!596 = !DILocalVariable(name: "str", scope: !583, file: !2, line: 439, type: !63, align: 8)
!597 = !DILocation(line: 439, column: 8, scope: !583)
!598 = !DILocation(line: 439, column: 43, scope: !583)
!599 = !DILocation(line: 62, column: 7, scope: !600, inlinedAt: !601)
!600 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !216, file: !216, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!601 = !DILocation(line: 57, column: 9, scope: !602, inlinedAt: !603)
!602 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !216, file: !216, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!603 = !DILocation(line: 439, column: 25, scope: !583)
!604 = !DILocation(line: 62, column: 20, scope: !600, inlinedAt: !601)
!605 = !DILocation(line: 28, column: 71, scope: !606, inlinedAt: !607)
!606 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!607 = !DILocation(line: 68, column: 10, scope: !600, inlinedAt: !601)
!608 = !DILocalVariable(name: "s1_len", scope: !583, file: !2, line: 440, type: !66, align: 8)
!609 = !DILocation(line: 440, column: 6, scope: !583)
!610 = !DILocation(line: 440, column: 15, scope: !583)
!611 = !DILocation(line: 441, column: 12, scope: !583)
!612 = !DILocation(line: 441, column: 17, scope: !583)
!613 = !DILocation(line: 309, column: 11, scope: !614, inlinedAt: !616)
!614 = distinct !DILexicalBlock(scope: !615, file: !566, line: 312, column: 1)
!615 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !566, file: !566, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!616 = !DILocation(line: 441, column: 7, scope: !583)
!617 = !DILocation(line: 309, column: 23, scope: !614, inlinedAt: !616)
!618 = !DILocation(line: 309, column: 29, scope: !614, inlinedAt: !616)
!619 = !DILocation(line: 309, column: 36, scope: !614, inlinedAt: !616)
!620 = !DILocation(line: 309, column: 43, scope: !614, inlinedAt: !616)
!621 = !DILocation(line: 309, column: 49, scope: !614, inlinedAt: !616)
!622 = !DILocation(line: 309, column: 56, scope: !614, inlinedAt: !616)
!623 = !DILocation(line: 313, column: 11, scope: !615, inlinedAt: !616)
!624 = !DILocation(line: 313, column: 16, scope: !615, inlinedAt: !616)
!625 = !DILocation(line: 313, column: 21, scope: !615, inlinedAt: !616)
!626 = !DILocation(line: 313, column: 26, scope: !615, inlinedAt: !616)
!627 = !DILocation(line: 442, column: 12, scope: !583)
!628 = !DILocation(line: 442, column: 18, scope: !583)
!629 = !DILocation(line: 442, column: 26, scope: !583)
!630 = !DILocation(line: 442, column: 34, scope: !583)
!631 = !DILocation(line: 309, column: 11, scope: !632, inlinedAt: !634)
!632 = distinct !DILexicalBlock(scope: !633, file: !566, line: 312, column: 1)
!633 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !566, file: !566, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!634 = !DILocation(line: 442, column: 7, scope: !583)
!635 = !DILocation(line: 309, column: 23, scope: !632, inlinedAt: !634)
!636 = !DILocation(line: 309, column: 29, scope: !632, inlinedAt: !634)
!637 = !DILocation(line: 309, column: 36, scope: !632, inlinedAt: !634)
!638 = !DILocation(line: 309, column: 43, scope: !632, inlinedAt: !634)
!639 = !DILocation(line: 309, column: 49, scope: !632, inlinedAt: !634)
!640 = !DILocation(line: 309, column: 56, scope: !632, inlinedAt: !634)
!641 = !DILocation(line: 313, column: 11, scope: !633, inlinedAt: !634)
!642 = !DILocation(line: 313, column: 16, scope: !633, inlinedAt: !634)
!643 = !DILocation(line: 313, column: 21, scope: !633, inlinedAt: !634)
!644 = !DILocation(line: 313, column: 26, scope: !633, inlinedAt: !634)
!645 = !DILocation(line: 443, column: 2, scope: !583)
!646 = !DILocation(line: 443, column: 6, scope: !583)
!647 = !DILocation(line: 443, column: 18, scope: !583)
!648 = !DILocation(line: 444, column: 17, scope: !583)
!649 = !DILocation(line: 444, column: 22, scope: !583)
!650 = distinct !DISubprogram(name: "tconcat", linkageName: "std.core.String.tconcat", scope: !2, file: !2, line: 447, type: !57, scopeLine: 447, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!651 = !DILocalVariable(name: "s1", arg: 1, scope: !650, file: !2, line: 447, type: !59)
!652 = !DILocation(line: 447, column: 26, scope: !650)
!653 = !DILocalVariable(name: "s2", arg: 2, scope: !650, file: !2, line: 447, type: !59)
!654 = !DILocation(line: 447, column: 37, scope: !650)
!655 = !DILocation(line: 396, column: 7, scope: !656, inlinedAt: !657)
!656 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!657 = !DILocation(line: 447, column: 69, scope: !650)
!658 = !DILocation(line: 398, column: 3, scope: !659, inlinedAt: !657)
!659 = distinct !DILexicalBlock(scope: !656, file: !216, line: 397, column: 2)
!660 = !DILocation(line: 400, column: 9, scope: !656, inlinedAt: !657)
!661 = !DILocation(line: 447, column: 44, scope: !650)
!662 = distinct !DISubprogram(name: "zstr_tcopy", linkageName: "std.core.String.zstr_tcopy", scope: !2, file: !2, line: 450, type: !663, scopeLine: 450, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!663 = !DISubroutineType(types: !664)
!664 = !{!497, !59}
!665 = !DILocalVariable(name: "s", arg: 1, scope: !662, file: !2, line: 450, type: !59)
!666 = !DILocation(line: 450, column: 30, scope: !662)
!667 = !DILocation(line: 396, column: 7, scope: !668, inlinedAt: !669)
!668 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!669 = !DILocation(line: 450, column: 59, scope: !662)
!670 = !DILocation(line: 398, column: 3, scope: !671, inlinedAt: !669)
!671 = distinct !DILexicalBlock(scope: !668, file: !216, line: 397, column: 2)
!672 = !DILocation(line: 400, column: 9, scope: !668, inlinedAt: !669)
!673 = !DILocation(line: 450, column: 36, scope: !662)
!674 = distinct !DISubprogram(name: "copy", linkageName: "std.core.String.copy", scope: !2, file: !2, line: 452, type: !675, scopeLine: 452, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!675 = !DISubroutineType(types: !676)
!676 = !{!59, !59, !190}
!677 = !DILocalVariable(name: "s", arg: 1, scope: !674, file: !2, line: 452, type: !59)
!678 = !DILocation(line: 452, column: 23, scope: !674)
!679 = !DILocalVariable(name: "allocator", arg: 2, scope: !674, file: !2, line: 452, type: !190)
!680 = !DILocation(line: 452, column: 36, scope: !674)
!681 = !DILocalVariable(name: "len", scope: !674, file: !2, line: 454, type: !66, align: 8)
!682 = !DILocation(line: 454, column: 6, scope: !674)
!683 = !DILocation(line: 454, column: 12, scope: !674)
!684 = !DILocalVariable(name: "str", scope: !674, file: !2, line: 455, type: !63, align: 8)
!685 = !DILocation(line: 455, column: 8, scope: !674)
!686 = !DILocation(line: 455, column: 43, scope: !674)
!687 = !DILocation(line: 62, column: 7, scope: !688, inlinedAt: !689)
!688 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !216, file: !216, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!689 = !DILocation(line: 57, column: 9, scope: !690, inlinedAt: !691)
!690 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !216, file: !216, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!691 = !DILocation(line: 455, column: 25, scope: !674)
!692 = !DILocation(line: 62, column: 20, scope: !688, inlinedAt: !689)
!693 = !DILocation(line: 28, column: 71, scope: !694, inlinedAt: !695)
!694 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!695 = !DILocation(line: 68, column: 10, scope: !688, inlinedAt: !689)
!696 = !DILocation(line: 456, column: 12, scope: !674)
!697 = !DILocation(line: 456, column: 17, scope: !674)
!698 = !DILocation(line: 309, column: 11, scope: !699, inlinedAt: !701)
!699 = distinct !DILexicalBlock(scope: !700, file: !566, line: 312, column: 1)
!700 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !566, file: !566, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!701 = !DILocation(line: 456, column: 7, scope: !674)
!702 = !DILocation(line: 309, column: 23, scope: !699, inlinedAt: !701)
!703 = !DILocation(line: 309, column: 29, scope: !699, inlinedAt: !701)
!704 = !DILocation(line: 309, column: 36, scope: !699, inlinedAt: !701)
!705 = !DILocation(line: 309, column: 43, scope: !699, inlinedAt: !701)
!706 = !DILocation(line: 309, column: 49, scope: !699, inlinedAt: !701)
!707 = !DILocation(line: 309, column: 56, scope: !699, inlinedAt: !701)
!708 = !DILocation(line: 313, column: 11, scope: !700, inlinedAt: !701)
!709 = !DILocation(line: 313, column: 16, scope: !700, inlinedAt: !701)
!710 = !DILocation(line: 313, column: 21, scope: !700, inlinedAt: !701)
!711 = !DILocation(line: 313, column: 26, scope: !700, inlinedAt: !701)
!712 = !DILocation(line: 457, column: 2, scope: !674)
!713 = !DILocation(line: 457, column: 6, scope: !674)
!714 = !DILocation(line: 457, column: 13, scope: !674)
!715 = !DILocation(line: 458, column: 17, scope: !674)
!716 = !DILocation(line: 458, column: 22, scope: !674)
!717 = distinct !DISubprogram(name: "free", linkageName: "std.core.String.free", scope: !2, file: !2, line: 461, type: !718, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!718 = !DISubroutineType(types: !719)
!719 = !{null, !188, !190}
!720 = !DILocation(line: 462, column: 1, scope: !717)
!721 = !DILocalVariable(name: "s", arg: 1, scope: !717, file: !2, line: 461, type: !188)
!722 = !DILocation(line: 461, column: 21, scope: !717)
!723 = !DILocalVariable(name: "allocator", arg: 2, scope: !717, file: !2, line: 461, type: !190)
!724 = !DILocation(line: 461, column: 35, scope: !717)
!725 = !DILocation(line: 463, column: 7, scope: !717)
!726 = !DILocation(line: 463, column: 20, scope: !717)
!727 = !DILocation(line: 464, column: 29, scope: !717)
!728 = !DILocation(line: 101, column: 7, scope: !729, inlinedAt: !730)
!729 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !216, file: !216, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!730 = !DILocation(line: 464, column: 13, scope: !717)
!731 = !DILocation(line: 101, column: 18, scope: !729, inlinedAt: !730)
!732 = !DILocation(line: 105, column: 25, scope: !729, inlinedAt: !730)
!733 = !DILocation(line: 105, column: 2, scope: !729, inlinedAt: !730)
!734 = !DILocation(line: 465, column: 3, scope: !717)
!735 = !DILocation(line: 465, column: 7, scope: !717)
!736 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.String.tcopy", scope: !2, file: !2, line: 468, type: !737, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!737 = !DISubroutineType(types: !738)
!738 = !{!59, !59}
!739 = !DILocalVariable(name: "s", arg: 1, scope: !736, file: !2, line: 468, type: !59)
!740 = !DILocation(line: 468, column: 24, scope: !736)
!741 = !DILocation(line: 396, column: 7, scope: !742, inlinedAt: !743)
!742 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!743 = !DILocation(line: 468, column: 48, scope: !736)
!744 = !DILocation(line: 398, column: 3, scope: !745, inlinedAt: !743)
!745 = distinct !DILexicalBlock(scope: !742, file: !216, line: 397, column: 2)
!746 = !DILocation(line: 400, column: 9, scope: !742, inlinedAt: !743)
!747 = !DILocation(line: 468, column: 30, scope: !736)
!748 = distinct !DISubprogram(name: "copy", linkageName: "std.core.string.ZString.copy", scope: !2, file: !2, line: 470, type: !749, scopeLine: 470, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!749 = !DISubroutineType(types: !750)
!750 = !{!59, !497, !190}
!751 = !DILocalVariable(name: "z", arg: 1, scope: !748, file: !2, line: 470, type: !497)
!752 = !DILocation(line: 470, column: 24, scope: !748)
!753 = !DILocalVariable(name: "allocator", arg: 2, scope: !748, file: !2, line: 470, type: !190)
!754 = !DILocation(line: 470, column: 37, scope: !748)
!755 = !DILocation(line: 472, column: 9, scope: !748)
!756 = !DILocation(line: 472, column: 27, scope: !748)
!757 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.string.ZString.tcopy", scope: !2, file: !2, line: 475, type: !495, scopeLine: 475, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!758 = !DILocalVariable(name: "z", arg: 1, scope: !757, file: !2, line: 475, type: !497)
!759 = !DILocation(line: 475, column: 25, scope: !757)
!760 = !DILocation(line: 477, column: 9, scope: !757)
!761 = !DILocation(line: 396, column: 7, scope: !762, inlinedAt: !763)
!762 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!763 = !DILocation(line: 477, column: 38, scope: !757)
!764 = !DILocation(line: 398, column: 3, scope: !765, inlinedAt: !763)
!765 = distinct !DILexicalBlock(scope: !762, file: !216, line: 397, column: 2)
!766 = !DILocation(line: 400, column: 9, scope: !762, inlinedAt: !763)
!767 = distinct !DISubprogram(name: "to_new_utf16", linkageName: "std.core.String.to_new_utf16", scope: !2, file: !2, line: 486, type: !768, scopeLine: 486, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!768 = !DISubroutineType(types: !769)
!769 = !{!332, !770, !59, !190}
!770 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16[]*", baseType: !771, size: 64, align: 64, dwarfAddressSpace: 0)
!771 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char16[]", size: 128, align: 64, elements: !772, identifier: "Char16[]")
!772 = !{!773, !777}
!773 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !771, baseType: !774, size: 64, align: 64)
!774 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16*", baseType: !775, size: 64, align: 64, dwarfAddressSpace: 0)
!775 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char16", scope: !2, file: !2, line: 9, baseType: !776, align: 2)
!776 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !771, baseType: !66, size: 64, align: 64, offset: 64)
!778 = !DILocalVariable(name: "s", arg: 1, scope: !767, file: !2, line: 486, type: !59)
!779 = !DILocation(line: 486, column: 34, scope: !767)
!780 = !DILocalVariable(name: "allocator", arg: 2, scope: !767, file: !2, line: 486, type: !190)
!781 = !DILocation(line: 486, column: 47, scope: !767)
!782 = !DILocalVariable(name: "len16", scope: !767, file: !2, line: 488, type: !66, align: 8)
!783 = !DILocation(line: 488, column: 6, scope: !767)
!784 = !DILocation(line: 488, column: 38, scope: !767)
!785 = !DILocation(line: 488, column: 20, scope: !767)
!786 = !DILocalVariable(name: "data", scope: !767, file: !2, line: 489, type: !774, align: 8)
!787 = !DILocation(line: 489, column: 10, scope: !767)
!788 = !DILocation(line: 489, column: 63, scope: !767)
!789 = !DILocation(line: 286, column: 55, scope: !790, inlinedAt: !791)
!790 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !216, file: !216, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!791 = !DILocation(line: 489, column: 28, scope: !767)
!792 = !DILocation(line: 286, column: 40, scope: !790, inlinedAt: !791)
!793 = !DILocation(line: 62, column: 7, scope: !794, inlinedAt: !795)
!794 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !216, file: !216, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!795 = !DILocation(line: 286, column: 11, scope: !790, inlinedAt: !791)
!796 = !DILocation(line: 62, column: 20, scope: !794, inlinedAt: !795)
!797 = !DILocation(line: 28, column: 71, scope: !798, inlinedAt: !799)
!798 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!799 = !DILocation(line: 68, column: 10, scope: !794, inlinedAt: !795)
!800 = !DILocation(line: 286, column: 67, scope: !790, inlinedAt: !791)
!801 = !DILocation(line: 490, column: 27, scope: !767)
!802 = !DILocation(line: 490, column: 8, scope: !767)
!803 = !DILocation(line: 491, column: 2, scope: !767)
!804 = !DILocation(line: 491, column: 7, scope: !767)
!805 = !DILocation(line: 491, column: 16, scope: !767)
!806 = !DILocation(line: 492, column: 9, scope: !767)
!807 = !DILocation(line: 492, column: 15, scope: !767)
!808 = distinct !DISubprogram(name: "to_temp_utf16", linkageName: "std.core.String.to_temp_utf16", scope: !2, file: !2, line: 501, type: !809, scopeLine: 501, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!809 = !DISubroutineType(types: !810)
!810 = !{!332, !770, !59}
!811 = !DILocalVariable(name: "s", arg: 1, scope: !808, file: !2, line: 501, type: !59)
!812 = !DILocation(line: 501, column: 35, scope: !808)
!813 = !DILocation(line: 396, column: 7, scope: !814, inlinedAt: !815)
!814 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!815 = !DILocation(line: 503, column: 35, scope: !808)
!816 = !DILocation(line: 398, column: 3, scope: !817, inlinedAt: !815)
!817 = distinct !DILexicalBlock(scope: !814, file: !216, line: 397, column: 2)
!818 = !DILocation(line: 400, column: 9, scope: !814, inlinedAt: !815)
!819 = !DILocation(line: 503, column: 9, scope: !808)
!820 = distinct !DISubprogram(name: "to_wstring", linkageName: "std.core.String.to_wstring", scope: !2, file: !2, line: 506, type: !821, scopeLine: 506, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!821 = !DISubroutineType(types: !822)
!822 = !{!332, !823, !59, !190}
!823 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WString*", baseType: !824, size: 64, align: 64, dwarfAddressSpace: 0)
!824 = !DIDerivedType(tag: DW_TAG_typedef, name: "WString", scope: !2, file: !2, line: 7, baseType: !825, align: 8)
!825 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !776, size: 64, align: 64, dwarfAddressSpace: 0)
!826 = !DILocalVariable(name: "s", arg: 1, scope: !820, file: !2, line: 506, type: !59)
!827 = !DILocation(line: 506, column: 31, scope: !820)
!828 = !DILocalVariable(name: "allocator", arg: 2, scope: !820, file: !2, line: 506, type: !190)
!829 = !DILocation(line: 506, column: 44, scope: !820)
!830 = !DILocation(line: 508, column: 18, scope: !820)
!831 = distinct !DISubprogram(name: "to_temp_wstring", linkageName: "std.core.String.to_temp_wstring", scope: !2, file: !2, line: 511, type: !832, scopeLine: 511, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!832 = !DISubroutineType(types: !833)
!833 = !{!332, !823, !59}
!834 = !DILocalVariable(name: "s", arg: 1, scope: !831, file: !2, line: 511, type: !59)
!835 = !DILocation(line: 511, column: 36, scope: !831)
!836 = !DILocation(line: 396, column: 7, scope: !837, inlinedAt: !838)
!837 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!838 = !DILocation(line: 511, column: 66, scope: !831)
!839 = !DILocation(line: 398, column: 3, scope: !840, inlinedAt: !838)
!840 = distinct !DILexicalBlock(scope: !837, file: !216, line: 397, column: 2)
!841 = !DILocation(line: 400, column: 9, scope: !837, inlinedAt: !838)
!842 = !DILocation(line: 511, column: 42, scope: !831)
!843 = distinct !DISubprogram(name: "to_new_wstring", linkageName: "std.core.String.to_new_wstring", scope: !2, file: !2, line: 512, type: !832, scopeLine: 512, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!844 = !DILocalVariable(name: "s", arg: 1, scope: !843, file: !2, line: 512, type: !59)
!845 = !DILocation(line: 512, column: 35, scope: !843)
!846 = !DILocation(line: 512, column: 41, scope: !843)
!847 = distinct !DISubprogram(name: "to_utf32", linkageName: "std.core.String.to_utf32", scope: !2, file: !2, line: 514, type: !848, scopeLine: 514, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!848 = !DISubroutineType(types: !849)
!849 = !{!332, !850, !59, !190}
!850 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32[]*", baseType: !851, size: 64, align: 64, dwarfAddressSpace: 0)
!851 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char32[]", size: 128, align: 64, elements: !852, identifier: "Char32[]")
!852 = !{!853, !856}
!853 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !851, baseType: !854, size: 64, align: 64)
!854 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32*", baseType: !855, size: 64, align: 64, dwarfAddressSpace: 0)
!855 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !2, file: !2, line: 8, baseType: !3, align: 4)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !851, baseType: !66, size: 64, align: 64, offset: 64)
!857 = !DILocalVariable(name: "s", arg: 1, scope: !847, file: !2, line: 514, type: !59)
!858 = !DILocation(line: 514, column: 30, scope: !847)
!859 = !DILocalVariable(name: "allocator", arg: 2, scope: !847, file: !2, line: 514, type: !190)
!860 = !DILocation(line: 514, column: 43, scope: !847)
!861 = !DILocalVariable(name: "codepoints", scope: !847, file: !2, line: 516, type: !66, align: 8)
!862 = !DILocation(line: 516, column: 6, scope: !847)
!863 = !DILocation(line: 516, column: 41, scope: !847)
!864 = !DILocation(line: 516, column: 25, scope: !847)
!865 = !DILocalVariable(name: "data", scope: !847, file: !2, line: 517, type: !854, align: 8)
!866 = !DILocation(line: 517, column: 10, scope: !847)
!867 = !DILocation(line: 517, column: 63, scope: !847)
!868 = !DILocation(line: 286, column: 55, scope: !869, inlinedAt: !870)
!869 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !216, file: !216, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!870 = !DILocation(line: 517, column: 28, scope: !847)
!871 = !DILocation(line: 286, column: 40, scope: !869, inlinedAt: !870)
!872 = !DILocation(line: 62, column: 7, scope: !873, inlinedAt: !874)
!873 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !216, file: !216, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!874 = !DILocation(line: 286, column: 11, scope: !869, inlinedAt: !870)
!875 = !DILocation(line: 62, column: 20, scope: !873, inlinedAt: !874)
!876 = !DILocation(line: 28, column: 71, scope: !877, inlinedAt: !878)
!877 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!878 = !DILocation(line: 68, column: 10, scope: !873, inlinedAt: !874)
!879 = !DILocation(line: 286, column: 67, scope: !869, inlinedAt: !870)
!880 = !DILocation(line: 518, column: 27, scope: !847)
!881 = !DILocation(line: 518, column: 8, scope: !847)
!882 = !DILocation(line: 519, column: 2, scope: !847)
!883 = !DILocation(line: 519, column: 7, scope: !847)
!884 = !DILocation(line: 519, column: 21, scope: !847)
!885 = !DILocation(line: 520, column: 9, scope: !847)
!886 = !DILocation(line: 520, column: 15, scope: !847)
!887 = distinct !DISubprogram(name: "to_new_utf32", linkageName: "std.core.String.to_new_utf32", scope: !2, file: !2, line: 523, type: !888, scopeLine: 523, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!888 = !DISubroutineType(types: !889)
!889 = !{!332, !850, !59}
!890 = !DILocalVariable(name: "s", arg: 1, scope: !887, file: !2, line: 523, type: !59)
!891 = !DILocation(line: 523, column: 34, scope: !887)
!892 = !DILocation(line: 523, column: 40, scope: !887)
!893 = distinct !DISubprogram(name: "to_temp_utf32", linkageName: "std.core.String.to_temp_utf32", scope: !2, file: !2, line: 524, type: !888, scopeLine: 524, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!894 = !DILocalVariable(name: "s", arg: 1, scope: !893, file: !2, line: 524, type: !59)
!895 = !DILocation(line: 524, column: 35, scope: !893)
!896 = !DILocation(line: 396, column: 7, scope: !897, inlinedAt: !898)
!897 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!898 = !DILocation(line: 524, column: 63, scope: !893)
!899 = !DILocation(line: 398, column: 3, scope: !900, inlinedAt: !898)
!900 = distinct !DILexicalBlock(scope: !897, file: !216, line: 397, column: 2)
!901 = !DILocation(line: 400, column: 9, scope: !897, inlinedAt: !898)
!902 = !DILocation(line: 524, column: 41, scope: !893)
!903 = distinct !DISubprogram(name: "convert_ascii_to_lower", linkageName: "std.core.String.convert_ascii_to_lower", scope: !2, file: !2, line: 532, type: !904, scopeLine: 532, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!904 = !DISubroutineType(types: !905)
!905 = !{null, !59}
!906 = !DILocalVariable(name: "s", arg: 1, scope: !903, file: !2, line: 532, type: !59)
!907 = !DILocation(line: 532, column: 39, scope: !903)
!908 = !DILocalVariable(name: ".temp", scope: !909, file: !2, line: 534, type: !66, align: 8)
!909 = distinct !DILexicalBlock(scope: !903, file: !2, line: 534, column: 2)
!910 = !DILocation(line: 534, column: 16, scope: !909)
!911 = !DILocalVariable(name: "c", scope: !912, file: !2, line: 534, type: !63, align: 8)
!912 = distinct !DILexicalBlock(scope: !909, file: !2, line: 534, column: 19)
!913 = !DILocation(line: 534, column: 12, scope: !912)
!914 = !DILocation(line: 534, column: 16, scope: !912)
!915 = !DILocation(line: 534, column: 23, scope: !912)
!916 = !DILocation(line: 534, column: 44, scope: !912)
!917 = !DILocation(line: 534, column: 43, scope: !912)
!918 = distinct !DISubprogram(name: "new_ascii_to_lower", linkageName: "std.core.String.new_ascii_to_lower", scope: !2, file: !2, line: 537, type: !675, scopeLine: 537, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!919 = !DILocalVariable(name: "s", arg: 1, scope: !918, file: !2, line: 537, type: !59)
!920 = !DILocation(line: 537, column: 37, scope: !918)
!921 = !DILocalVariable(name: "allocator", arg: 2, scope: !918, file: !2, line: 537, type: !190)
!922 = !DILocation(line: 537, column: 50, scope: !918)
!923 = !DILocalVariable(name: "copy", scope: !918, file: !2, line: 539, type: !59, align: 8)
!924 = !DILocation(line: 539, column: 9, scope: !918)
!925 = !DILocation(line: 539, column: 23, scope: !918)
!926 = !DILocation(line: 539, column: 16, scope: !918)
!927 = !DILocation(line: 540, column: 2, scope: !918)
!928 = !DILocation(line: 541, column: 9, scope: !918)
!929 = distinct !DISubprogram(name: "temp_ascii_to_lower", linkageName: "std.core.String.temp_ascii_to_lower", scope: !2, file: !2, line: 544, type: !737, scopeLine: 544, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!930 = !DILocalVariable(name: "s", arg: 1, scope: !929, file: !2, line: 544, type: !59)
!931 = !DILocation(line: 544, column: 38, scope: !929)
!932 = !DILocation(line: 396, column: 7, scope: !933, inlinedAt: !934)
!933 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!934 = !DILocation(line: 546, column: 41, scope: !929)
!935 = !DILocation(line: 398, column: 3, scope: !936, inlinedAt: !934)
!936 = distinct !DILexicalBlock(scope: !933, file: !216, line: 397, column: 2)
!937 = !DILocation(line: 400, column: 9, scope: !933, inlinedAt: !934)
!938 = !DILocation(line: 546, column: 9, scope: !929)
!939 = distinct !DISubprogram(name: "convert_ascii_to_upper", linkageName: "std.core.String.convert_ascii_to_upper", scope: !2, file: !2, line: 555, type: !904, scopeLine: 555, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!940 = !DILocalVariable(name: "s", arg: 1, scope: !939, file: !2, line: 555, type: !59)
!941 = !DILocation(line: 555, column: 39, scope: !939)
!942 = !DILocalVariable(name: ".temp", scope: !943, file: !2, line: 557, type: !66, align: 8)
!943 = distinct !DILexicalBlock(scope: !939, file: !2, line: 557, column: 2)
!944 = !DILocation(line: 557, column: 16, scope: !943)
!945 = !DILocalVariable(name: "c", scope: !946, file: !2, line: 557, type: !63, align: 8)
!946 = distinct !DILexicalBlock(scope: !943, file: !2, line: 557, column: 19)
!947 = !DILocation(line: 557, column: 12, scope: !946)
!948 = !DILocation(line: 557, column: 16, scope: !946)
!949 = !DILocation(line: 557, column: 23, scope: !946)
!950 = !DILocation(line: 557, column: 44, scope: !946)
!951 = !DILocation(line: 557, column: 43, scope: !946)
!952 = distinct !DISubprogram(name: "new_ascii_to_upper", linkageName: "std.core.String.new_ascii_to_upper", scope: !2, file: !2, line: 568, type: !675, scopeLine: 568, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!953 = !DILocalVariable(name: "s", arg: 1, scope: !952, file: !2, line: 568, type: !59)
!954 = !DILocation(line: 568, column: 37, scope: !952)
!955 = !DILocalVariable(name: "allocator", arg: 2, scope: !952, file: !2, line: 568, type: !190)
!956 = !DILocation(line: 568, column: 50, scope: !952)
!957 = !DILocalVariable(name: "copy", scope: !952, file: !2, line: 570, type: !59, align: 8)
!958 = !DILocation(line: 570, column: 9, scope: !952)
!959 = !DILocation(line: 570, column: 23, scope: !952)
!960 = !DILocation(line: 570, column: 16, scope: !952)
!961 = !DILocation(line: 571, column: 2, scope: !952)
!962 = !DILocation(line: 572, column: 9, scope: !952)
!963 = distinct !DISubprogram(name: "iterator", linkageName: "std.core.String.iterator", scope: !2, file: !2, line: 575, type: !964, scopeLine: 575, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!964 = !DISubroutineType(types: !965)
!965 = !{!966, !59}
!966 = !DICompositeType(tag: DW_TAG_structure_type, name: "StringIterator", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !967, identifier: "std.core.string.iterator.StringIterator")
!967 = !{!968, !969}
!968 = !DIDerivedType(tag: DW_TAG_member, name: "utf8", scope: !966, file: !2, line: 5, baseType: !59, size: 128, align: 64)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !966, file: !2, line: 6, baseType: !66, size: 64, align: 64, offset: 128)
!970 = !DILocalVariable(name: "s", arg: 1, scope: !963, file: !2, line: 575, type: !59)
!971 = !DILocation(line: 575, column: 35, scope: !963)
!972 = !DILocation(line: 577, column: 11, scope: !963)
!973 = !DILocation(line: 577, column: 14, scope: !963)
!974 = distinct !DISubprogram(name: "temp_ascii_to_upper", linkageName: "std.core.String.temp_ascii_to_upper", scope: !2, file: !2, line: 584, type: !737, scopeLine: 584, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!975 = !DILocalVariable(name: "s", arg: 1, scope: !974, file: !2, line: 584, type: !59)
!976 = !DILocation(line: 584, column: 38, scope: !974)
!977 = !DILocation(line: 396, column: 7, scope: !978, inlinedAt: !979)
!978 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!979 = !DILocation(line: 586, column: 41, scope: !974)
!980 = !DILocation(line: 398, column: 3, scope: !981, inlinedAt: !979)
!981 = distinct !DILexicalBlock(scope: !978, file: !216, line: 397, column: 2)
!982 = !DILocation(line: 400, column: 9, scope: !978, inlinedAt: !979)
!983 = !DILocation(line: 586, column: 9, scope: !974)
!984 = distinct !DISubprogram(name: "utf8_codepoints", linkageName: "std.core.String.utf8_codepoints", scope: !2, file: !2, line: 620, type: !985, scopeLine: 620, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!985 = !DISubroutineType(types: !986)
!986 = !{!66, !59}
!987 = !DILocalVariable(name: "s", arg: 1, scope: !984, file: !2, line: 620, type: !59)
!988 = !DILocation(line: 620, column: 31, scope: !984)
!989 = !DILocalVariable(name: "len", scope: !984, file: !2, line: 622, type: !66, align: 8)
!990 = !DILocation(line: 622, column: 6, scope: !984)
!991 = !DILocation(line: 622, column: 12, scope: !984)
!992 = !DILocalVariable(name: ".temp", scope: !993, file: !2, line: 623, type: !66, align: 8)
!993 = distinct !DILexicalBlock(scope: !984, file: !2, line: 623, column: 2)
!994 = !DILocation(line: 623, column: 20, scope: !993)
!995 = !DILocalVariable(name: "c", scope: !996, file: !2, line: 623, type: !64, align: 1)
!996 = distinct !DILexicalBlock(scope: !993, file: !2, line: 624, column: 2)
!997 = !DILocation(line: 623, column: 16, scope: !996)
!998 = !DILocation(line: 623, column: 20, scope: !996)
!999 = !DILocation(line: 625, column: 7, scope: !1000)
!1000 = distinct !DILexicalBlock(scope: !996, file: !2, line: 624, column: 2)
!1001 = !DILocation(line: 625, column: 25, scope: !1000)
!1002 = !DILocation(line: 627, column: 9, scope: !984)
!1003 = distinct !DISubprogram(name: "to_int128", linkageName: "std.core.String.to_int128", scope: !2, file: !2, line: 705, type: !1004, scopeLine: 705, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1004 = !DISubroutineType(types: !1005)
!1005 = !{!332, !1006, !59, !18}
!1006 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !1007, size: 64, align: 64, dwarfAddressSpace: 0)
!1007 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!1008 = !DILocalVariable(name: "s", arg: 1, scope: !1003, file: !2, line: 705, type: !59)
!1009 = !DILocation(line: 705, column: 29, scope: !1003)
!1010 = !DILocalVariable(name: "base", arg: 2, scope: !1003, file: !2, line: 705, type: !18)
!1011 = !DILocation(line: 705, column: 36, scope: !1003)
!1012 = !DILocation(line: 632, column: 12, scope: !1013, inlinedAt: !1015)
!1013 = distinct !DILexicalBlock(scope: !1014, file: !2, line: 635, column: 1)
!1014 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1015 = !DILocation(line: 705, column: 50, scope: !1003)
!1016 = !DILocation(line: 632, column: 26, scope: !1013, inlinedAt: !1015)
!1017 = !DILocation(line: 632, column: 39, scope: !1013, inlinedAt: !1015)
!1018 = !DILocalVariable(name: "len", scope: !1014, file: !2, line: 636, type: !66, align: 8)
!1019 = !DILocation(line: 636, column: 6, scope: !1014, inlinedAt: !1015)
!1020 = !DILocation(line: 636, column: 12, scope: !1014, inlinedAt: !1015)
!1021 = !DILocalVariable(name: "index", scope: !1014, file: !2, line: 637, type: !66, align: 8)
!1022 = !DILocation(line: 637, column: 6, scope: !1014, inlinedAt: !1015)
!1023 = !DILocation(line: 637, column: 14, scope: !1014, inlinedAt: !1015)
!1024 = !DILocalVariable(name: "ptr", scope: !1014, file: !2, line: 638, type: !63, align: 8)
!1025 = !DILocation(line: 638, column: 8, scope: !1014, inlinedAt: !1015)
!1026 = !DILocation(line: 638, column: 14, scope: !1014, inlinedAt: !1015)
!1027 = !DILocation(line: 639, column: 2, scope: !1014, inlinedAt: !1015)
!1028 = !DILocation(line: 639, column: 9, scope: !1029, inlinedAt: !1015)
!1029 = distinct !DILexicalBlock(scope: !1014, file: !2, line: 639, column: 2)
!1030 = !DILocation(line: 639, column: 17, scope: !1029, inlinedAt: !1015)
!1031 = !DILocation(line: 639, column: 42, scope: !1029, inlinedAt: !1015)
!1032 = !DILocation(line: 639, column: 46, scope: !1029, inlinedAt: !1015)
!1033 = !DILocation(line: 16, column: 29, scope: !1034, inlinedAt: !1036)
!1034 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1035 = !DIFile(filename: "ascii.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std")
!1036 = !DILocation(line: 639, column: 31, scope: !1029, inlinedAt: !1015)
!1037 = !DILocation(line: 16, column: 42, scope: !1034, inlinedAt: !1036)
!1038 = !DILocation(line: 639, column: 55, scope: !1029, inlinedAt: !1015)
!1039 = !DILocation(line: 640, column: 6, scope: !1014, inlinedAt: !1015)
!1040 = !DILocation(line: 640, column: 13, scope: !1014, inlinedAt: !1015)
!1041 = !DILocation(line: 640, column: 27, scope: !1014, inlinedAt: !1015)
!1042 = !DILocalVariable(name: "is_negative", scope: !1014, file: !2, line: 641, type: !131, align: 1)
!1043 = !DILocation(line: 641, column: 7, scope: !1014, inlinedAt: !1015)
!1044 = !DILocation(line: 642, column: 10, scope: !1045, inlinedAt: !1015)
!1045 = distinct !DILexicalBlock(scope: !1014, file: !2, line: 642, column: 2)
!1046 = !DILocation(line: 642, column: 17, scope: !1045, inlinedAt: !1015)
!1047 = !DILocation(line: 645, column: 8, scope: !1048, inlinedAt: !1015)
!1048 = distinct !DILexicalBlock(scope: !1045, file: !2, line: 645, column: 4)
!1049 = !DILocation(line: 646, column: 18, scope: !1048, inlinedAt: !1015)
!1050 = !DILocation(line: 647, column: 4, scope: !1048, inlinedAt: !1015)
!1051 = !DILocation(line: 649, column: 4, scope: !1052, inlinedAt: !1015)
!1052 = distinct !DILexicalBlock(scope: !1045, file: !2, line: 649, column: 4)
!1053 = !DILocation(line: 651, column: 4, scope: !1054, inlinedAt: !1015)
!1054 = distinct !DILexicalBlock(scope: !1045, file: !2, line: 651, column: 4)
!1055 = !DILocation(line: 653, column: 6, scope: !1014, inlinedAt: !1015)
!1056 = !DILocation(line: 653, column: 13, scope: !1014, inlinedAt: !1015)
!1057 = !DILocation(line: 653, column: 27, scope: !1014, inlinedAt: !1015)
!1058 = !DILocalVariable(name: "base_used", scope: !1014, file: !2, line: 654, type: !1007, align: 8)
!1059 = !DILocation(line: 654, column: 8, scope: !1014, inlinedAt: !1015)
!1060 = !DILocation(line: 654, column: 21, scope: !1014, inlinedAt: !1015)
!1061 = !DILocation(line: 655, column: 6, scope: !1014, inlinedAt: !1015)
!1062 = !DILocation(line: 655, column: 13, scope: !1014, inlinedAt: !1015)
!1063 = !DILocation(line: 655, column: 30, scope: !1014, inlinedAt: !1015)
!1064 = !DILocation(line: 657, column: 3, scope: !1065, inlinedAt: !1015)
!1065 = distinct !DILexicalBlock(scope: !1014, file: !2, line: 656, column: 2)
!1066 = !DILocation(line: 658, column: 7, scope: !1065, inlinedAt: !1015)
!1067 = !DILocation(line: 658, column: 16, scope: !1065, inlinedAt: !1015)
!1068 = !DILocation(line: 658, column: 29, scope: !1065, inlinedAt: !1015)
!1069 = !DILocation(line: 659, column: 11, scope: !1070, inlinedAt: !1015)
!1070 = distinct !DILexicalBlock(scope: !1065, file: !2, line: 659, column: 3)
!1071 = !DILocation(line: 659, column: 18, scope: !1070, inlinedAt: !1015)
!1072 = !DILocation(line: 663, column: 17, scope: !1073, inlinedAt: !1015)
!1073 = distinct !DILexicalBlock(scope: !1070, file: !2, line: 663, column: 5)
!1074 = !DILocation(line: 664, column: 5, scope: !1073, inlinedAt: !1015)
!1075 = !DILocation(line: 667, column: 17, scope: !1076, inlinedAt: !1015)
!1076 = distinct !DILexicalBlock(scope: !1070, file: !2, line: 667, column: 5)
!1077 = !DILocation(line: 668, column: 5, scope: !1076, inlinedAt: !1015)
!1078 = !DILocation(line: 671, column: 17, scope: !1079, inlinedAt: !1015)
!1079 = distinct !DILexicalBlock(scope: !1070, file: !2, line: 671, column: 5)
!1080 = !DILocation(line: 672, column: 5, scope: !1079, inlinedAt: !1015)
!1081 = !DILocation(line: 674, column: 5, scope: !1082, inlinedAt: !1015)
!1082 = distinct !DILexicalBlock(scope: !1070, file: !2, line: 674, column: 5)
!1083 = !DILocation(line: 676, column: 7, scope: !1065, inlinedAt: !1015)
!1084 = !DILocation(line: 676, column: 14, scope: !1065, inlinedAt: !1015)
!1085 = !DILocation(line: 676, column: 28, scope: !1065, inlinedAt: !1015)
!1086 = !DILocalVariable(name: "value", scope: !1014, file: !2, line: 678, type: !1007, align: 8)
!1087 = !DILocation(line: 678, column: 8, scope: !1014, inlinedAt: !1015)
!1088 = !DILocation(line: 678, column: 16, scope: !1014, inlinedAt: !1015)
!1089 = !DILocation(line: 679, column: 2, scope: !1014, inlinedAt: !1015)
!1090 = !DILocation(line: 679, column: 9, scope: !1091, inlinedAt: !1015)
!1091 = distinct !DILexicalBlock(scope: !1014, file: !2, line: 679, column: 2)
!1092 = !DILocation(line: 679, column: 18, scope: !1091, inlinedAt: !1015)
!1093 = !DILocalVariable(name: "c", scope: !1094, file: !2, line: 681, type: !64, align: 1)
!1094 = distinct !DILexicalBlock(scope: !1091, file: !2, line: 680, column: 2)
!1095 = !DILocation(line: 681, column: 8, scope: !1094, inlinedAt: !1015)
!1096 = !DILocalVariable(name: "ch", scope: !1097, file: !2, line: 682, type: !64, align: 1)
!1097 = distinct !DILexicalBlock(scope: !1094, file: !2, line: 682, column: 4)
!1098 = !DILocation(line: 682, column: 9, scope: !1097, inlinedAt: !1015)
!1099 = !DILocation(line: 682, column: 14, scope: !1097, inlinedAt: !1015)
!1100 = !DILocation(line: 682, column: 21, scope: !1097, inlinedAt: !1015)
!1101 = !DILocation(line: 683, column: 8, scope: !1097, inlinedAt: !1015)
!1102 = !DILocation(line: 683, column: 27, scope: !1097, inlinedAt: !1015)
!1103 = !DILocation(line: 683, column: 51, scope: !1097, inlinedAt: !1015)
!1104 = !DILocation(line: 683, column: 45, scope: !1097, inlinedAt: !1015)
!1105 = !DILocation(line: 684, column: 8, scope: !1097, inlinedAt: !1015)
!1106 = !DILocation(line: 684, column: 33, scope: !1097, inlinedAt: !1015)
!1107 = !DILocation(line: 684, column: 27, scope: !1097, inlinedAt: !1015)
!1108 = !DILocation(line: 685, column: 8, scope: !1097, inlinedAt: !1015)
!1109 = !DILocation(line: 685, column: 25, scope: !1097, inlinedAt: !1015)
!1110 = !DILocation(line: 686, column: 8, scope: !1097, inlinedAt: !1015)
!1111 = !DILocation(line: 686, column: 25, scope: !1097, inlinedAt: !1015)
!1112 = !DILocation(line: 687, column: 18, scope: !1097, inlinedAt: !1015)
!1113 = !DILocation(line: 687, column: 12, scope: !1097, inlinedAt: !1015)
!1114 = !DILocation(line: 689, column: 7, scope: !1094, inlinedAt: !1015)
!1115 = !DILocation(line: 689, column: 12, scope: !1094, inlinedAt: !1015)
!1116 = !DILocation(line: 689, column: 30, scope: !1094, inlinedAt: !1015)
!1117 = !DILocation(line: 691, column: 8, scope: !1118, inlinedAt: !1015)
!1118 = distinct !DILexicalBlock(scope: !1094, file: !2, line: 691, column: 4)
!1119 = !DILocalVariable(name: "new_value", scope: !1120, file: !2, line: 693, type: !1007, align: 8)
!1120 = distinct !DILexicalBlock(scope: !1118, file: !2, line: 692, column: 4)
!1121 = !DILocation(line: 693, column: 11, scope: !1120, inlinedAt: !1015)
!1122 = !DILocation(line: 693, column: 23, scope: !1120, inlinedAt: !1015)
!1123 = !DILocation(line: 693, column: 31, scope: !1120, inlinedAt: !1015)
!1124 = !DILocation(line: 693, column: 43, scope: !1120, inlinedAt: !1015)
!1125 = !DILocation(line: 694, column: 9, scope: !1120, inlinedAt: !1015)
!1126 = !DILocation(line: 694, column: 21, scope: !1120, inlinedAt: !1015)
!1127 = !DILocation(line: 694, column: 35, scope: !1120, inlinedAt: !1015)
!1128 = !DILocation(line: 695, column: 12, scope: !1120, inlinedAt: !1015)
!1129 = !DILocalVariable(name: "new_value", scope: !1118, file: !2, line: 697, type: !1007, align: 8)
!1130 = !DILocation(line: 697, column: 10, scope: !1118, inlinedAt: !1015)
!1131 = !DILocation(line: 697, column: 22, scope: !1118, inlinedAt: !1015)
!1132 = !DILocation(line: 697, column: 30, scope: !1118, inlinedAt: !1015)
!1133 = !DILocation(line: 697, column: 42, scope: !1118, inlinedAt: !1015)
!1134 = !DILocation(line: 698, column: 8, scope: !1118, inlinedAt: !1015)
!1135 = !DILocation(line: 698, column: 20, scope: !1118, inlinedAt: !1015)
!1136 = !DILocation(line: 698, column: 34, scope: !1118, inlinedAt: !1015)
!1137 = !DILocation(line: 699, column: 11, scope: !1118, inlinedAt: !1015)
!1138 = !DILocation(line: 702, column: 9, scope: !1014, inlinedAt: !1015)
!1139 = distinct !DISubprogram(name: "to_long", linkageName: "std.core.String.to_long", scope: !2, file: !2, line: 706, type: !1140, scopeLine: 706, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1140 = !DISubroutineType(types: !1141)
!1141 = !{!332, !1142, !59, !18}
!1142 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !333, size: 64, align: 64, dwarfAddressSpace: 0)
!1143 = !DILocalVariable(name: "s", arg: 1, scope: !1139, file: !2, line: 706, type: !59)
!1144 = !DILocation(line: 706, column: 25, scope: !1139)
!1145 = !DILocalVariable(name: "base", arg: 2, scope: !1139, file: !2, line: 706, type: !18)
!1146 = !DILocation(line: 706, column: 32, scope: !1139)
!1147 = !DILocation(line: 632, column: 12, scope: !1148, inlinedAt: !1150)
!1148 = distinct !DILexicalBlock(scope: !1149, file: !2, line: 635, column: 1)
!1149 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1150 = !DILocation(line: 706, column: 46, scope: !1139)
!1151 = !DILocation(line: 632, column: 26, scope: !1148, inlinedAt: !1150)
!1152 = !DILocation(line: 632, column: 39, scope: !1148, inlinedAt: !1150)
!1153 = !DILocalVariable(name: "len", scope: !1149, file: !2, line: 636, type: !66, align: 8)
!1154 = !DILocation(line: 636, column: 6, scope: !1149, inlinedAt: !1150)
!1155 = !DILocation(line: 636, column: 12, scope: !1149, inlinedAt: !1150)
!1156 = !DILocalVariable(name: "index", scope: !1149, file: !2, line: 637, type: !66, align: 8)
!1157 = !DILocation(line: 637, column: 6, scope: !1149, inlinedAt: !1150)
!1158 = !DILocation(line: 637, column: 14, scope: !1149, inlinedAt: !1150)
!1159 = !DILocalVariable(name: "ptr", scope: !1149, file: !2, line: 638, type: !63, align: 8)
!1160 = !DILocation(line: 638, column: 8, scope: !1149, inlinedAt: !1150)
!1161 = !DILocation(line: 638, column: 14, scope: !1149, inlinedAt: !1150)
!1162 = !DILocation(line: 639, column: 2, scope: !1149, inlinedAt: !1150)
!1163 = !DILocation(line: 639, column: 9, scope: !1164, inlinedAt: !1150)
!1164 = distinct !DILexicalBlock(scope: !1149, file: !2, line: 639, column: 2)
!1165 = !DILocation(line: 639, column: 17, scope: !1164, inlinedAt: !1150)
!1166 = !DILocation(line: 639, column: 42, scope: !1164, inlinedAt: !1150)
!1167 = !DILocation(line: 639, column: 46, scope: !1164, inlinedAt: !1150)
!1168 = !DILocation(line: 16, column: 29, scope: !1169, inlinedAt: !1170)
!1169 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1170 = !DILocation(line: 639, column: 31, scope: !1164, inlinedAt: !1150)
!1171 = !DILocation(line: 16, column: 42, scope: !1169, inlinedAt: !1170)
!1172 = !DILocation(line: 639, column: 55, scope: !1164, inlinedAt: !1150)
!1173 = !DILocation(line: 640, column: 6, scope: !1149, inlinedAt: !1150)
!1174 = !DILocation(line: 640, column: 13, scope: !1149, inlinedAt: !1150)
!1175 = !DILocation(line: 640, column: 27, scope: !1149, inlinedAt: !1150)
!1176 = !DILocalVariable(name: "is_negative", scope: !1149, file: !2, line: 641, type: !131, align: 1)
!1177 = !DILocation(line: 641, column: 7, scope: !1149, inlinedAt: !1150)
!1178 = !DILocation(line: 642, column: 10, scope: !1179, inlinedAt: !1150)
!1179 = distinct !DILexicalBlock(scope: !1149, file: !2, line: 642, column: 2)
!1180 = !DILocation(line: 642, column: 17, scope: !1179, inlinedAt: !1150)
!1181 = !DILocation(line: 645, column: 8, scope: !1182, inlinedAt: !1150)
!1182 = distinct !DILexicalBlock(scope: !1179, file: !2, line: 645, column: 4)
!1183 = !DILocation(line: 646, column: 18, scope: !1182, inlinedAt: !1150)
!1184 = !DILocation(line: 647, column: 4, scope: !1182, inlinedAt: !1150)
!1185 = !DILocation(line: 649, column: 4, scope: !1186, inlinedAt: !1150)
!1186 = distinct !DILexicalBlock(scope: !1179, file: !2, line: 649, column: 4)
!1187 = !DILocation(line: 651, column: 4, scope: !1188, inlinedAt: !1150)
!1188 = distinct !DILexicalBlock(scope: !1179, file: !2, line: 651, column: 4)
!1189 = !DILocation(line: 653, column: 6, scope: !1149, inlinedAt: !1150)
!1190 = !DILocation(line: 653, column: 13, scope: !1149, inlinedAt: !1150)
!1191 = !DILocation(line: 653, column: 27, scope: !1149, inlinedAt: !1150)
!1192 = !DILocalVariable(name: "base_used", scope: !1149, file: !2, line: 654, type: !333, align: 8)
!1193 = !DILocation(line: 654, column: 8, scope: !1149, inlinedAt: !1150)
!1194 = !DILocation(line: 654, column: 21, scope: !1149, inlinedAt: !1150)
!1195 = !DILocation(line: 655, column: 6, scope: !1149, inlinedAt: !1150)
!1196 = !DILocation(line: 655, column: 13, scope: !1149, inlinedAt: !1150)
!1197 = !DILocation(line: 655, column: 30, scope: !1149, inlinedAt: !1150)
!1198 = !DILocation(line: 657, column: 3, scope: !1199, inlinedAt: !1150)
!1199 = distinct !DILexicalBlock(scope: !1149, file: !2, line: 656, column: 2)
!1200 = !DILocation(line: 658, column: 7, scope: !1199, inlinedAt: !1150)
!1201 = !DILocation(line: 658, column: 16, scope: !1199, inlinedAt: !1150)
!1202 = !DILocation(line: 658, column: 29, scope: !1199, inlinedAt: !1150)
!1203 = !DILocation(line: 659, column: 11, scope: !1204, inlinedAt: !1150)
!1204 = distinct !DILexicalBlock(scope: !1199, file: !2, line: 659, column: 3)
!1205 = !DILocation(line: 659, column: 18, scope: !1204, inlinedAt: !1150)
!1206 = !DILocation(line: 663, column: 17, scope: !1207, inlinedAt: !1150)
!1207 = distinct !DILexicalBlock(scope: !1204, file: !2, line: 663, column: 5)
!1208 = !DILocation(line: 664, column: 5, scope: !1207, inlinedAt: !1150)
!1209 = !DILocation(line: 667, column: 17, scope: !1210, inlinedAt: !1150)
!1210 = distinct !DILexicalBlock(scope: !1204, file: !2, line: 667, column: 5)
!1211 = !DILocation(line: 668, column: 5, scope: !1210, inlinedAt: !1150)
!1212 = !DILocation(line: 671, column: 17, scope: !1213, inlinedAt: !1150)
!1213 = distinct !DILexicalBlock(scope: !1204, file: !2, line: 671, column: 5)
!1214 = !DILocation(line: 672, column: 5, scope: !1213, inlinedAt: !1150)
!1215 = !DILocation(line: 674, column: 5, scope: !1216, inlinedAt: !1150)
!1216 = distinct !DILexicalBlock(scope: !1204, file: !2, line: 674, column: 5)
!1217 = !DILocation(line: 676, column: 7, scope: !1199, inlinedAt: !1150)
!1218 = !DILocation(line: 676, column: 14, scope: !1199, inlinedAt: !1150)
!1219 = !DILocation(line: 676, column: 28, scope: !1199, inlinedAt: !1150)
!1220 = !DILocalVariable(name: "value", scope: !1149, file: !2, line: 678, type: !333, align: 8)
!1221 = !DILocation(line: 678, column: 8, scope: !1149, inlinedAt: !1150)
!1222 = !DILocation(line: 678, column: 16, scope: !1149, inlinedAt: !1150)
!1223 = !DILocation(line: 679, column: 2, scope: !1149, inlinedAt: !1150)
!1224 = !DILocation(line: 679, column: 9, scope: !1225, inlinedAt: !1150)
!1225 = distinct !DILexicalBlock(scope: !1149, file: !2, line: 679, column: 2)
!1226 = !DILocation(line: 679, column: 18, scope: !1225, inlinedAt: !1150)
!1227 = !DILocalVariable(name: "c", scope: !1228, file: !2, line: 681, type: !64, align: 1)
!1228 = distinct !DILexicalBlock(scope: !1225, file: !2, line: 680, column: 2)
!1229 = !DILocation(line: 681, column: 8, scope: !1228, inlinedAt: !1150)
!1230 = !DILocalVariable(name: "ch", scope: !1231, file: !2, line: 682, type: !64, align: 1)
!1231 = distinct !DILexicalBlock(scope: !1228, file: !2, line: 682, column: 4)
!1232 = !DILocation(line: 682, column: 9, scope: !1231, inlinedAt: !1150)
!1233 = !DILocation(line: 682, column: 14, scope: !1231, inlinedAt: !1150)
!1234 = !DILocation(line: 682, column: 21, scope: !1231, inlinedAt: !1150)
!1235 = !DILocation(line: 683, column: 8, scope: !1231, inlinedAt: !1150)
!1236 = !DILocation(line: 683, column: 27, scope: !1231, inlinedAt: !1150)
!1237 = !DILocation(line: 683, column: 51, scope: !1231, inlinedAt: !1150)
!1238 = !DILocation(line: 683, column: 45, scope: !1231, inlinedAt: !1150)
!1239 = !DILocation(line: 684, column: 8, scope: !1231, inlinedAt: !1150)
!1240 = !DILocation(line: 684, column: 33, scope: !1231, inlinedAt: !1150)
!1241 = !DILocation(line: 684, column: 27, scope: !1231, inlinedAt: !1150)
!1242 = !DILocation(line: 685, column: 8, scope: !1231, inlinedAt: !1150)
!1243 = !DILocation(line: 685, column: 25, scope: !1231, inlinedAt: !1150)
!1244 = !DILocation(line: 686, column: 8, scope: !1231, inlinedAt: !1150)
!1245 = !DILocation(line: 686, column: 25, scope: !1231, inlinedAt: !1150)
!1246 = !DILocation(line: 687, column: 18, scope: !1231, inlinedAt: !1150)
!1247 = !DILocation(line: 687, column: 12, scope: !1231, inlinedAt: !1150)
!1248 = !DILocation(line: 689, column: 7, scope: !1228, inlinedAt: !1150)
!1249 = !DILocation(line: 689, column: 12, scope: !1228, inlinedAt: !1150)
!1250 = !DILocation(line: 689, column: 30, scope: !1228, inlinedAt: !1150)
!1251 = !DILocation(line: 691, column: 8, scope: !1252, inlinedAt: !1150)
!1252 = distinct !DILexicalBlock(scope: !1228, file: !2, line: 691, column: 4)
!1253 = !DILocalVariable(name: "new_value", scope: !1254, file: !2, line: 693, type: !333, align: 8)
!1254 = distinct !DILexicalBlock(scope: !1252, file: !2, line: 692, column: 4)
!1255 = !DILocation(line: 693, column: 11, scope: !1254, inlinedAt: !1150)
!1256 = !DILocation(line: 693, column: 23, scope: !1254, inlinedAt: !1150)
!1257 = !DILocation(line: 693, column: 31, scope: !1254, inlinedAt: !1150)
!1258 = !DILocation(line: 693, column: 43, scope: !1254, inlinedAt: !1150)
!1259 = !DILocation(line: 694, column: 9, scope: !1254, inlinedAt: !1150)
!1260 = !DILocation(line: 694, column: 21, scope: !1254, inlinedAt: !1150)
!1261 = !DILocation(line: 694, column: 35, scope: !1254, inlinedAt: !1150)
!1262 = !DILocation(line: 695, column: 12, scope: !1254, inlinedAt: !1150)
!1263 = !DILocalVariable(name: "new_value", scope: !1252, file: !2, line: 697, type: !333, align: 8)
!1264 = !DILocation(line: 697, column: 10, scope: !1252, inlinedAt: !1150)
!1265 = !DILocation(line: 697, column: 22, scope: !1252, inlinedAt: !1150)
!1266 = !DILocation(line: 697, column: 30, scope: !1252, inlinedAt: !1150)
!1267 = !DILocation(line: 697, column: 42, scope: !1252, inlinedAt: !1150)
!1268 = !DILocation(line: 698, column: 8, scope: !1252, inlinedAt: !1150)
!1269 = !DILocation(line: 698, column: 20, scope: !1252, inlinedAt: !1150)
!1270 = !DILocation(line: 698, column: 34, scope: !1252, inlinedAt: !1150)
!1271 = !DILocation(line: 699, column: 11, scope: !1252, inlinedAt: !1150)
!1272 = !DILocation(line: 702, column: 9, scope: !1149, inlinedAt: !1150)
!1273 = distinct !DISubprogram(name: "to_int", linkageName: "std.core.String.to_int", scope: !2, file: !2, line: 707, type: !1274, scopeLine: 707, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1274 = !DISubroutineType(types: !1275)
!1275 = !{!332, !1276, !59, !18}
!1276 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !18, size: 64, align: 64, dwarfAddressSpace: 0)
!1277 = !DILocalVariable(name: "s", arg: 1, scope: !1273, file: !2, line: 707, type: !59)
!1278 = !DILocation(line: 707, column: 23, scope: !1273)
!1279 = !DILocalVariable(name: "base", arg: 2, scope: !1273, file: !2, line: 707, type: !18)
!1280 = !DILocation(line: 707, column: 30, scope: !1273)
!1281 = !DILocation(line: 632, column: 12, scope: !1282, inlinedAt: !1284)
!1282 = distinct !DILexicalBlock(scope: !1283, file: !2, line: 635, column: 1)
!1283 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1284 = !DILocation(line: 707, column: 44, scope: !1273)
!1285 = !DILocation(line: 632, column: 26, scope: !1282, inlinedAt: !1284)
!1286 = !DILocation(line: 632, column: 39, scope: !1282, inlinedAt: !1284)
!1287 = !DILocalVariable(name: "len", scope: !1283, file: !2, line: 636, type: !66, align: 8)
!1288 = !DILocation(line: 636, column: 6, scope: !1283, inlinedAt: !1284)
!1289 = !DILocation(line: 636, column: 12, scope: !1283, inlinedAt: !1284)
!1290 = !DILocalVariable(name: "index", scope: !1283, file: !2, line: 637, type: !66, align: 8)
!1291 = !DILocation(line: 637, column: 6, scope: !1283, inlinedAt: !1284)
!1292 = !DILocation(line: 637, column: 14, scope: !1283, inlinedAt: !1284)
!1293 = !DILocalVariable(name: "ptr", scope: !1283, file: !2, line: 638, type: !63, align: 8)
!1294 = !DILocation(line: 638, column: 8, scope: !1283, inlinedAt: !1284)
!1295 = !DILocation(line: 638, column: 14, scope: !1283, inlinedAt: !1284)
!1296 = !DILocation(line: 639, column: 2, scope: !1283, inlinedAt: !1284)
!1297 = !DILocation(line: 639, column: 9, scope: !1298, inlinedAt: !1284)
!1298 = distinct !DILexicalBlock(scope: !1283, file: !2, line: 639, column: 2)
!1299 = !DILocation(line: 639, column: 17, scope: !1298, inlinedAt: !1284)
!1300 = !DILocation(line: 639, column: 42, scope: !1298, inlinedAt: !1284)
!1301 = !DILocation(line: 639, column: 46, scope: !1298, inlinedAt: !1284)
!1302 = !DILocation(line: 16, column: 29, scope: !1303, inlinedAt: !1304)
!1303 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1304 = !DILocation(line: 639, column: 31, scope: !1298, inlinedAt: !1284)
!1305 = !DILocation(line: 16, column: 42, scope: !1303, inlinedAt: !1304)
!1306 = !DILocation(line: 639, column: 55, scope: !1298, inlinedAt: !1284)
!1307 = !DILocation(line: 640, column: 6, scope: !1283, inlinedAt: !1284)
!1308 = !DILocation(line: 640, column: 13, scope: !1283, inlinedAt: !1284)
!1309 = !DILocation(line: 640, column: 27, scope: !1283, inlinedAt: !1284)
!1310 = !DILocalVariable(name: "is_negative", scope: !1283, file: !2, line: 641, type: !131, align: 1)
!1311 = !DILocation(line: 641, column: 7, scope: !1283, inlinedAt: !1284)
!1312 = !DILocation(line: 642, column: 10, scope: !1313, inlinedAt: !1284)
!1313 = distinct !DILexicalBlock(scope: !1283, file: !2, line: 642, column: 2)
!1314 = !DILocation(line: 642, column: 17, scope: !1313, inlinedAt: !1284)
!1315 = !DILocation(line: 645, column: 8, scope: !1316, inlinedAt: !1284)
!1316 = distinct !DILexicalBlock(scope: !1313, file: !2, line: 645, column: 4)
!1317 = !DILocation(line: 646, column: 18, scope: !1316, inlinedAt: !1284)
!1318 = !DILocation(line: 647, column: 4, scope: !1316, inlinedAt: !1284)
!1319 = !DILocation(line: 649, column: 4, scope: !1320, inlinedAt: !1284)
!1320 = distinct !DILexicalBlock(scope: !1313, file: !2, line: 649, column: 4)
!1321 = !DILocation(line: 651, column: 4, scope: !1322, inlinedAt: !1284)
!1322 = distinct !DILexicalBlock(scope: !1313, file: !2, line: 651, column: 4)
!1323 = !DILocation(line: 653, column: 6, scope: !1283, inlinedAt: !1284)
!1324 = !DILocation(line: 653, column: 13, scope: !1283, inlinedAt: !1284)
!1325 = !DILocation(line: 653, column: 27, scope: !1283, inlinedAt: !1284)
!1326 = !DILocalVariable(name: "base_used", scope: !1283, file: !2, line: 654, type: !18, align: 4)
!1327 = !DILocation(line: 654, column: 8, scope: !1283, inlinedAt: !1284)
!1328 = !DILocation(line: 654, column: 21, scope: !1283, inlinedAt: !1284)
!1329 = !DILocation(line: 655, column: 6, scope: !1283, inlinedAt: !1284)
!1330 = !DILocation(line: 655, column: 13, scope: !1283, inlinedAt: !1284)
!1331 = !DILocation(line: 655, column: 30, scope: !1283, inlinedAt: !1284)
!1332 = !DILocation(line: 657, column: 3, scope: !1333, inlinedAt: !1284)
!1333 = distinct !DILexicalBlock(scope: !1283, file: !2, line: 656, column: 2)
!1334 = !DILocation(line: 658, column: 7, scope: !1333, inlinedAt: !1284)
!1335 = !DILocation(line: 658, column: 16, scope: !1333, inlinedAt: !1284)
!1336 = !DILocation(line: 658, column: 29, scope: !1333, inlinedAt: !1284)
!1337 = !DILocation(line: 659, column: 11, scope: !1338, inlinedAt: !1284)
!1338 = distinct !DILexicalBlock(scope: !1333, file: !2, line: 659, column: 3)
!1339 = !DILocation(line: 659, column: 18, scope: !1338, inlinedAt: !1284)
!1340 = !DILocation(line: 663, column: 17, scope: !1341, inlinedAt: !1284)
!1341 = distinct !DILexicalBlock(scope: !1338, file: !2, line: 663, column: 5)
!1342 = !DILocation(line: 664, column: 5, scope: !1341, inlinedAt: !1284)
!1343 = !DILocation(line: 667, column: 17, scope: !1344, inlinedAt: !1284)
!1344 = distinct !DILexicalBlock(scope: !1338, file: !2, line: 667, column: 5)
!1345 = !DILocation(line: 668, column: 5, scope: !1344, inlinedAt: !1284)
!1346 = !DILocation(line: 671, column: 17, scope: !1347, inlinedAt: !1284)
!1347 = distinct !DILexicalBlock(scope: !1338, file: !2, line: 671, column: 5)
!1348 = !DILocation(line: 672, column: 5, scope: !1347, inlinedAt: !1284)
!1349 = !DILocation(line: 674, column: 5, scope: !1350, inlinedAt: !1284)
!1350 = distinct !DILexicalBlock(scope: !1338, file: !2, line: 674, column: 5)
!1351 = !DILocation(line: 676, column: 7, scope: !1333, inlinedAt: !1284)
!1352 = !DILocation(line: 676, column: 14, scope: !1333, inlinedAt: !1284)
!1353 = !DILocation(line: 676, column: 28, scope: !1333, inlinedAt: !1284)
!1354 = !DILocalVariable(name: "value", scope: !1283, file: !2, line: 678, type: !18, align: 4)
!1355 = !DILocation(line: 678, column: 8, scope: !1283, inlinedAt: !1284)
!1356 = !DILocation(line: 678, column: 16, scope: !1283, inlinedAt: !1284)
!1357 = !DILocation(line: 679, column: 2, scope: !1283, inlinedAt: !1284)
!1358 = !DILocation(line: 679, column: 9, scope: !1359, inlinedAt: !1284)
!1359 = distinct !DILexicalBlock(scope: !1283, file: !2, line: 679, column: 2)
!1360 = !DILocation(line: 679, column: 18, scope: !1359, inlinedAt: !1284)
!1361 = !DILocalVariable(name: "c", scope: !1362, file: !2, line: 681, type: !64, align: 1)
!1362 = distinct !DILexicalBlock(scope: !1359, file: !2, line: 680, column: 2)
!1363 = !DILocation(line: 681, column: 8, scope: !1362, inlinedAt: !1284)
!1364 = !DILocalVariable(name: "ch", scope: !1365, file: !2, line: 682, type: !64, align: 1)
!1365 = distinct !DILexicalBlock(scope: !1362, file: !2, line: 682, column: 4)
!1366 = !DILocation(line: 682, column: 9, scope: !1365, inlinedAt: !1284)
!1367 = !DILocation(line: 682, column: 14, scope: !1365, inlinedAt: !1284)
!1368 = !DILocation(line: 682, column: 21, scope: !1365, inlinedAt: !1284)
!1369 = !DILocation(line: 683, column: 8, scope: !1365, inlinedAt: !1284)
!1370 = !DILocation(line: 683, column: 27, scope: !1365, inlinedAt: !1284)
!1371 = !DILocation(line: 683, column: 51, scope: !1365, inlinedAt: !1284)
!1372 = !DILocation(line: 683, column: 45, scope: !1365, inlinedAt: !1284)
!1373 = !DILocation(line: 684, column: 8, scope: !1365, inlinedAt: !1284)
!1374 = !DILocation(line: 684, column: 33, scope: !1365, inlinedAt: !1284)
!1375 = !DILocation(line: 684, column: 27, scope: !1365, inlinedAt: !1284)
!1376 = !DILocation(line: 685, column: 8, scope: !1365, inlinedAt: !1284)
!1377 = !DILocation(line: 685, column: 25, scope: !1365, inlinedAt: !1284)
!1378 = !DILocation(line: 686, column: 8, scope: !1365, inlinedAt: !1284)
!1379 = !DILocation(line: 686, column: 25, scope: !1365, inlinedAt: !1284)
!1380 = !DILocation(line: 687, column: 18, scope: !1365, inlinedAt: !1284)
!1381 = !DILocation(line: 687, column: 12, scope: !1365, inlinedAt: !1284)
!1382 = !DILocation(line: 689, column: 7, scope: !1362, inlinedAt: !1284)
!1383 = !DILocation(line: 689, column: 12, scope: !1362, inlinedAt: !1284)
!1384 = !DILocation(line: 689, column: 30, scope: !1362, inlinedAt: !1284)
!1385 = !DILocation(line: 691, column: 8, scope: !1386, inlinedAt: !1284)
!1386 = distinct !DILexicalBlock(scope: !1362, file: !2, line: 691, column: 4)
!1387 = !DILocalVariable(name: "new_value", scope: !1388, file: !2, line: 693, type: !18, align: 4)
!1388 = distinct !DILexicalBlock(scope: !1386, file: !2, line: 692, column: 4)
!1389 = !DILocation(line: 693, column: 11, scope: !1388, inlinedAt: !1284)
!1390 = !DILocation(line: 693, column: 23, scope: !1388, inlinedAt: !1284)
!1391 = !DILocation(line: 693, column: 31, scope: !1388, inlinedAt: !1284)
!1392 = !DILocation(line: 693, column: 43, scope: !1388, inlinedAt: !1284)
!1393 = !DILocation(line: 694, column: 9, scope: !1388, inlinedAt: !1284)
!1394 = !DILocation(line: 694, column: 21, scope: !1388, inlinedAt: !1284)
!1395 = !DILocation(line: 694, column: 35, scope: !1388, inlinedAt: !1284)
!1396 = !DILocation(line: 695, column: 12, scope: !1388, inlinedAt: !1284)
!1397 = !DILocalVariable(name: "new_value", scope: !1386, file: !2, line: 697, type: !18, align: 4)
!1398 = !DILocation(line: 697, column: 10, scope: !1386, inlinedAt: !1284)
!1399 = !DILocation(line: 697, column: 22, scope: !1386, inlinedAt: !1284)
!1400 = !DILocation(line: 697, column: 30, scope: !1386, inlinedAt: !1284)
!1401 = !DILocation(line: 697, column: 42, scope: !1386, inlinedAt: !1284)
!1402 = !DILocation(line: 698, column: 8, scope: !1386, inlinedAt: !1284)
!1403 = !DILocation(line: 698, column: 20, scope: !1386, inlinedAt: !1284)
!1404 = !DILocation(line: 698, column: 34, scope: !1386, inlinedAt: !1284)
!1405 = !DILocation(line: 699, column: 11, scope: !1386, inlinedAt: !1284)
!1406 = !DILocation(line: 702, column: 9, scope: !1283, inlinedAt: !1284)
!1407 = distinct !DISubprogram(name: "to_short", linkageName: "std.core.String.to_short", scope: !2, file: !2, line: 708, type: !1408, scopeLine: 708, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1408 = !DISubroutineType(types: !1409)
!1409 = !{!332, !1410, !59, !18}
!1410 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !1411, size: 64, align: 64, dwarfAddressSpace: 0)
!1411 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!1412 = !DILocalVariable(name: "s", arg: 1, scope: !1407, file: !2, line: 708, type: !59)
!1413 = !DILocation(line: 708, column: 27, scope: !1407)
!1414 = !DILocalVariable(name: "base", arg: 2, scope: !1407, file: !2, line: 708, type: !18)
!1415 = !DILocation(line: 708, column: 34, scope: !1407)
!1416 = !DILocation(line: 632, column: 12, scope: !1417, inlinedAt: !1419)
!1417 = distinct !DILexicalBlock(scope: !1418, file: !2, line: 635, column: 1)
!1418 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1419 = !DILocation(line: 708, column: 48, scope: !1407)
!1420 = !DILocation(line: 632, column: 26, scope: !1417, inlinedAt: !1419)
!1421 = !DILocation(line: 632, column: 39, scope: !1417, inlinedAt: !1419)
!1422 = !DILocalVariable(name: "len", scope: !1418, file: !2, line: 636, type: !66, align: 8)
!1423 = !DILocation(line: 636, column: 6, scope: !1418, inlinedAt: !1419)
!1424 = !DILocation(line: 636, column: 12, scope: !1418, inlinedAt: !1419)
!1425 = !DILocalVariable(name: "index", scope: !1418, file: !2, line: 637, type: !66, align: 8)
!1426 = !DILocation(line: 637, column: 6, scope: !1418, inlinedAt: !1419)
!1427 = !DILocation(line: 637, column: 14, scope: !1418, inlinedAt: !1419)
!1428 = !DILocalVariable(name: "ptr", scope: !1418, file: !2, line: 638, type: !63, align: 8)
!1429 = !DILocation(line: 638, column: 8, scope: !1418, inlinedAt: !1419)
!1430 = !DILocation(line: 638, column: 14, scope: !1418, inlinedAt: !1419)
!1431 = !DILocation(line: 639, column: 2, scope: !1418, inlinedAt: !1419)
!1432 = !DILocation(line: 639, column: 9, scope: !1433, inlinedAt: !1419)
!1433 = distinct !DILexicalBlock(scope: !1418, file: !2, line: 639, column: 2)
!1434 = !DILocation(line: 639, column: 17, scope: !1433, inlinedAt: !1419)
!1435 = !DILocation(line: 639, column: 42, scope: !1433, inlinedAt: !1419)
!1436 = !DILocation(line: 639, column: 46, scope: !1433, inlinedAt: !1419)
!1437 = !DILocation(line: 16, column: 29, scope: !1438, inlinedAt: !1439)
!1438 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1439 = !DILocation(line: 639, column: 31, scope: !1433, inlinedAt: !1419)
!1440 = !DILocation(line: 16, column: 42, scope: !1438, inlinedAt: !1439)
!1441 = !DILocation(line: 639, column: 55, scope: !1433, inlinedAt: !1419)
!1442 = !DILocation(line: 640, column: 6, scope: !1418, inlinedAt: !1419)
!1443 = !DILocation(line: 640, column: 13, scope: !1418, inlinedAt: !1419)
!1444 = !DILocation(line: 640, column: 27, scope: !1418, inlinedAt: !1419)
!1445 = !DILocalVariable(name: "is_negative", scope: !1418, file: !2, line: 641, type: !131, align: 1)
!1446 = !DILocation(line: 641, column: 7, scope: !1418, inlinedAt: !1419)
!1447 = !DILocation(line: 642, column: 10, scope: !1448, inlinedAt: !1419)
!1448 = distinct !DILexicalBlock(scope: !1418, file: !2, line: 642, column: 2)
!1449 = !DILocation(line: 642, column: 17, scope: !1448, inlinedAt: !1419)
!1450 = !DILocation(line: 645, column: 8, scope: !1451, inlinedAt: !1419)
!1451 = distinct !DILexicalBlock(scope: !1448, file: !2, line: 645, column: 4)
!1452 = !DILocation(line: 646, column: 18, scope: !1451, inlinedAt: !1419)
!1453 = !DILocation(line: 647, column: 4, scope: !1451, inlinedAt: !1419)
!1454 = !DILocation(line: 649, column: 4, scope: !1455, inlinedAt: !1419)
!1455 = distinct !DILexicalBlock(scope: !1448, file: !2, line: 649, column: 4)
!1456 = !DILocation(line: 651, column: 4, scope: !1457, inlinedAt: !1419)
!1457 = distinct !DILexicalBlock(scope: !1448, file: !2, line: 651, column: 4)
!1458 = !DILocation(line: 653, column: 6, scope: !1418, inlinedAt: !1419)
!1459 = !DILocation(line: 653, column: 13, scope: !1418, inlinedAt: !1419)
!1460 = !DILocation(line: 653, column: 27, scope: !1418, inlinedAt: !1419)
!1461 = !DILocalVariable(name: "base_used", scope: !1418, file: !2, line: 654, type: !1411, align: 2)
!1462 = !DILocation(line: 654, column: 8, scope: !1418, inlinedAt: !1419)
!1463 = !DILocation(line: 654, column: 21, scope: !1418, inlinedAt: !1419)
!1464 = !DILocation(line: 655, column: 6, scope: !1418, inlinedAt: !1419)
!1465 = !DILocation(line: 655, column: 13, scope: !1418, inlinedAt: !1419)
!1466 = !DILocation(line: 655, column: 30, scope: !1418, inlinedAt: !1419)
!1467 = !DILocation(line: 657, column: 3, scope: !1468, inlinedAt: !1419)
!1468 = distinct !DILexicalBlock(scope: !1418, file: !2, line: 656, column: 2)
!1469 = !DILocation(line: 658, column: 7, scope: !1468, inlinedAt: !1419)
!1470 = !DILocation(line: 658, column: 16, scope: !1468, inlinedAt: !1419)
!1471 = !DILocation(line: 658, column: 29, scope: !1468, inlinedAt: !1419)
!1472 = !DILocation(line: 659, column: 11, scope: !1473, inlinedAt: !1419)
!1473 = distinct !DILexicalBlock(scope: !1468, file: !2, line: 659, column: 3)
!1474 = !DILocation(line: 659, column: 18, scope: !1473, inlinedAt: !1419)
!1475 = !DILocation(line: 663, column: 17, scope: !1476, inlinedAt: !1419)
!1476 = distinct !DILexicalBlock(scope: !1473, file: !2, line: 663, column: 5)
!1477 = !DILocation(line: 664, column: 5, scope: !1476, inlinedAt: !1419)
!1478 = !DILocation(line: 667, column: 17, scope: !1479, inlinedAt: !1419)
!1479 = distinct !DILexicalBlock(scope: !1473, file: !2, line: 667, column: 5)
!1480 = !DILocation(line: 668, column: 5, scope: !1479, inlinedAt: !1419)
!1481 = !DILocation(line: 671, column: 17, scope: !1482, inlinedAt: !1419)
!1482 = distinct !DILexicalBlock(scope: !1473, file: !2, line: 671, column: 5)
!1483 = !DILocation(line: 672, column: 5, scope: !1482, inlinedAt: !1419)
!1484 = !DILocation(line: 674, column: 5, scope: !1485, inlinedAt: !1419)
!1485 = distinct !DILexicalBlock(scope: !1473, file: !2, line: 674, column: 5)
!1486 = !DILocation(line: 676, column: 7, scope: !1468, inlinedAt: !1419)
!1487 = !DILocation(line: 676, column: 14, scope: !1468, inlinedAt: !1419)
!1488 = !DILocation(line: 676, column: 28, scope: !1468, inlinedAt: !1419)
!1489 = !DILocalVariable(name: "value", scope: !1418, file: !2, line: 678, type: !1411, align: 2)
!1490 = !DILocation(line: 678, column: 8, scope: !1418, inlinedAt: !1419)
!1491 = !DILocation(line: 678, column: 16, scope: !1418, inlinedAt: !1419)
!1492 = !DILocation(line: 679, column: 2, scope: !1418, inlinedAt: !1419)
!1493 = !DILocation(line: 679, column: 9, scope: !1494, inlinedAt: !1419)
!1494 = distinct !DILexicalBlock(scope: !1418, file: !2, line: 679, column: 2)
!1495 = !DILocation(line: 679, column: 18, scope: !1494, inlinedAt: !1419)
!1496 = !DILocalVariable(name: "c", scope: !1497, file: !2, line: 681, type: !64, align: 1)
!1497 = distinct !DILexicalBlock(scope: !1494, file: !2, line: 680, column: 2)
!1498 = !DILocation(line: 681, column: 8, scope: !1497, inlinedAt: !1419)
!1499 = !DILocalVariable(name: "ch", scope: !1500, file: !2, line: 682, type: !64, align: 1)
!1500 = distinct !DILexicalBlock(scope: !1497, file: !2, line: 682, column: 4)
!1501 = !DILocation(line: 682, column: 9, scope: !1500, inlinedAt: !1419)
!1502 = !DILocation(line: 682, column: 14, scope: !1500, inlinedAt: !1419)
!1503 = !DILocation(line: 682, column: 21, scope: !1500, inlinedAt: !1419)
!1504 = !DILocation(line: 683, column: 8, scope: !1500, inlinedAt: !1419)
!1505 = !DILocation(line: 683, column: 27, scope: !1500, inlinedAt: !1419)
!1506 = !DILocation(line: 683, column: 51, scope: !1500, inlinedAt: !1419)
!1507 = !DILocation(line: 683, column: 45, scope: !1500, inlinedAt: !1419)
!1508 = !DILocation(line: 684, column: 8, scope: !1500, inlinedAt: !1419)
!1509 = !DILocation(line: 684, column: 33, scope: !1500, inlinedAt: !1419)
!1510 = !DILocation(line: 684, column: 27, scope: !1500, inlinedAt: !1419)
!1511 = !DILocation(line: 685, column: 8, scope: !1500, inlinedAt: !1419)
!1512 = !DILocation(line: 685, column: 25, scope: !1500, inlinedAt: !1419)
!1513 = !DILocation(line: 686, column: 8, scope: !1500, inlinedAt: !1419)
!1514 = !DILocation(line: 686, column: 25, scope: !1500, inlinedAt: !1419)
!1515 = !DILocation(line: 687, column: 18, scope: !1500, inlinedAt: !1419)
!1516 = !DILocation(line: 687, column: 12, scope: !1500, inlinedAt: !1419)
!1517 = !DILocation(line: 689, column: 7, scope: !1497, inlinedAt: !1419)
!1518 = !DILocation(line: 689, column: 12, scope: !1497, inlinedAt: !1419)
!1519 = !DILocation(line: 689, column: 30, scope: !1497, inlinedAt: !1419)
!1520 = !DILocation(line: 691, column: 8, scope: !1521, inlinedAt: !1419)
!1521 = distinct !DILexicalBlock(scope: !1497, file: !2, line: 691, column: 4)
!1522 = !DILocalVariable(name: "new_value", scope: !1523, file: !2, line: 693, type: !1411, align: 2)
!1523 = distinct !DILexicalBlock(scope: !1521, file: !2, line: 692, column: 4)
!1524 = !DILocation(line: 693, column: 11, scope: !1523, inlinedAt: !1419)
!1525 = !DILocation(line: 693, column: 23, scope: !1523, inlinedAt: !1419)
!1526 = !DILocation(line: 693, column: 31, scope: !1523, inlinedAt: !1419)
!1527 = !DILocation(line: 693, column: 43, scope: !1523, inlinedAt: !1419)
!1528 = !DILocation(line: 694, column: 9, scope: !1523, inlinedAt: !1419)
!1529 = !DILocation(line: 694, column: 21, scope: !1523, inlinedAt: !1419)
!1530 = !DILocation(line: 694, column: 35, scope: !1523, inlinedAt: !1419)
!1531 = !DILocation(line: 695, column: 12, scope: !1523, inlinedAt: !1419)
!1532 = !DILocalVariable(name: "new_value", scope: !1521, file: !2, line: 697, type: !1411, align: 2)
!1533 = !DILocation(line: 697, column: 10, scope: !1521, inlinedAt: !1419)
!1534 = !DILocation(line: 697, column: 22, scope: !1521, inlinedAt: !1419)
!1535 = !DILocation(line: 697, column: 30, scope: !1521, inlinedAt: !1419)
!1536 = !DILocation(line: 697, column: 42, scope: !1521, inlinedAt: !1419)
!1537 = !DILocation(line: 698, column: 8, scope: !1521, inlinedAt: !1419)
!1538 = !DILocation(line: 698, column: 20, scope: !1521, inlinedAt: !1419)
!1539 = !DILocation(line: 698, column: 34, scope: !1521, inlinedAt: !1419)
!1540 = !DILocation(line: 699, column: 11, scope: !1521, inlinedAt: !1419)
!1541 = !DILocation(line: 702, column: 9, scope: !1418, inlinedAt: !1419)
!1542 = distinct !DISubprogram(name: "to_ichar", linkageName: "std.core.String.to_ichar", scope: !2, file: !2, line: 709, type: !1543, scopeLine: 709, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1543 = !DISubroutineType(types: !1544)
!1544 = !{!332, !1545, !59, !18}
!1545 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !1546, size: 64, align: 64, dwarfAddressSpace: 0)
!1546 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!1547 = !DILocalVariable(name: "s", arg: 1, scope: !1542, file: !2, line: 709, type: !59)
!1548 = !DILocation(line: 709, column: 27, scope: !1542)
!1549 = !DILocalVariable(name: "base", arg: 2, scope: !1542, file: !2, line: 709, type: !18)
!1550 = !DILocation(line: 709, column: 34, scope: !1542)
!1551 = !DILocation(line: 632, column: 12, scope: !1552, inlinedAt: !1554)
!1552 = distinct !DILexicalBlock(scope: !1553, file: !2, line: 635, column: 1)
!1553 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1554 = !DILocation(line: 709, column: 48, scope: !1542)
!1555 = !DILocation(line: 632, column: 26, scope: !1552, inlinedAt: !1554)
!1556 = !DILocation(line: 632, column: 39, scope: !1552, inlinedAt: !1554)
!1557 = !DILocalVariable(name: "len", scope: !1553, file: !2, line: 636, type: !66, align: 8)
!1558 = !DILocation(line: 636, column: 6, scope: !1553, inlinedAt: !1554)
!1559 = !DILocation(line: 636, column: 12, scope: !1553, inlinedAt: !1554)
!1560 = !DILocalVariable(name: "index", scope: !1553, file: !2, line: 637, type: !66, align: 8)
!1561 = !DILocation(line: 637, column: 6, scope: !1553, inlinedAt: !1554)
!1562 = !DILocation(line: 637, column: 14, scope: !1553, inlinedAt: !1554)
!1563 = !DILocalVariable(name: "ptr", scope: !1553, file: !2, line: 638, type: !63, align: 8)
!1564 = !DILocation(line: 638, column: 8, scope: !1553, inlinedAt: !1554)
!1565 = !DILocation(line: 638, column: 14, scope: !1553, inlinedAt: !1554)
!1566 = !DILocation(line: 639, column: 2, scope: !1553, inlinedAt: !1554)
!1567 = !DILocation(line: 639, column: 9, scope: !1568, inlinedAt: !1554)
!1568 = distinct !DILexicalBlock(scope: !1553, file: !2, line: 639, column: 2)
!1569 = !DILocation(line: 639, column: 17, scope: !1568, inlinedAt: !1554)
!1570 = !DILocation(line: 639, column: 42, scope: !1568, inlinedAt: !1554)
!1571 = !DILocation(line: 639, column: 46, scope: !1568, inlinedAt: !1554)
!1572 = !DILocation(line: 16, column: 29, scope: !1573, inlinedAt: !1574)
!1573 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1574 = !DILocation(line: 639, column: 31, scope: !1568, inlinedAt: !1554)
!1575 = !DILocation(line: 16, column: 42, scope: !1573, inlinedAt: !1574)
!1576 = !DILocation(line: 639, column: 55, scope: !1568, inlinedAt: !1554)
!1577 = !DILocation(line: 640, column: 6, scope: !1553, inlinedAt: !1554)
!1578 = !DILocation(line: 640, column: 13, scope: !1553, inlinedAt: !1554)
!1579 = !DILocation(line: 640, column: 27, scope: !1553, inlinedAt: !1554)
!1580 = !DILocalVariable(name: "is_negative", scope: !1553, file: !2, line: 641, type: !131, align: 1)
!1581 = !DILocation(line: 641, column: 7, scope: !1553, inlinedAt: !1554)
!1582 = !DILocation(line: 642, column: 10, scope: !1583, inlinedAt: !1554)
!1583 = distinct !DILexicalBlock(scope: !1553, file: !2, line: 642, column: 2)
!1584 = !DILocation(line: 642, column: 17, scope: !1583, inlinedAt: !1554)
!1585 = !DILocation(line: 645, column: 8, scope: !1586, inlinedAt: !1554)
!1586 = distinct !DILexicalBlock(scope: !1583, file: !2, line: 645, column: 4)
!1587 = !DILocation(line: 646, column: 18, scope: !1586, inlinedAt: !1554)
!1588 = !DILocation(line: 647, column: 4, scope: !1586, inlinedAt: !1554)
!1589 = !DILocation(line: 649, column: 4, scope: !1590, inlinedAt: !1554)
!1590 = distinct !DILexicalBlock(scope: !1583, file: !2, line: 649, column: 4)
!1591 = !DILocation(line: 651, column: 4, scope: !1592, inlinedAt: !1554)
!1592 = distinct !DILexicalBlock(scope: !1583, file: !2, line: 651, column: 4)
!1593 = !DILocation(line: 653, column: 6, scope: !1553, inlinedAt: !1554)
!1594 = !DILocation(line: 653, column: 13, scope: !1553, inlinedAt: !1554)
!1595 = !DILocation(line: 653, column: 27, scope: !1553, inlinedAt: !1554)
!1596 = !DILocalVariable(name: "base_used", scope: !1553, file: !2, line: 654, type: !1546, align: 1)
!1597 = !DILocation(line: 654, column: 8, scope: !1553, inlinedAt: !1554)
!1598 = !DILocation(line: 654, column: 21, scope: !1553, inlinedAt: !1554)
!1599 = !DILocation(line: 655, column: 6, scope: !1553, inlinedAt: !1554)
!1600 = !DILocation(line: 655, column: 13, scope: !1553, inlinedAt: !1554)
!1601 = !DILocation(line: 655, column: 30, scope: !1553, inlinedAt: !1554)
!1602 = !DILocation(line: 657, column: 3, scope: !1603, inlinedAt: !1554)
!1603 = distinct !DILexicalBlock(scope: !1553, file: !2, line: 656, column: 2)
!1604 = !DILocation(line: 658, column: 7, scope: !1603, inlinedAt: !1554)
!1605 = !DILocation(line: 658, column: 16, scope: !1603, inlinedAt: !1554)
!1606 = !DILocation(line: 658, column: 29, scope: !1603, inlinedAt: !1554)
!1607 = !DILocation(line: 659, column: 11, scope: !1608, inlinedAt: !1554)
!1608 = distinct !DILexicalBlock(scope: !1603, file: !2, line: 659, column: 3)
!1609 = !DILocation(line: 659, column: 18, scope: !1608, inlinedAt: !1554)
!1610 = !DILocation(line: 663, column: 17, scope: !1611, inlinedAt: !1554)
!1611 = distinct !DILexicalBlock(scope: !1608, file: !2, line: 663, column: 5)
!1612 = !DILocation(line: 664, column: 5, scope: !1611, inlinedAt: !1554)
!1613 = !DILocation(line: 667, column: 17, scope: !1614, inlinedAt: !1554)
!1614 = distinct !DILexicalBlock(scope: !1608, file: !2, line: 667, column: 5)
!1615 = !DILocation(line: 668, column: 5, scope: !1614, inlinedAt: !1554)
!1616 = !DILocation(line: 671, column: 17, scope: !1617, inlinedAt: !1554)
!1617 = distinct !DILexicalBlock(scope: !1608, file: !2, line: 671, column: 5)
!1618 = !DILocation(line: 672, column: 5, scope: !1617, inlinedAt: !1554)
!1619 = !DILocation(line: 674, column: 5, scope: !1620, inlinedAt: !1554)
!1620 = distinct !DILexicalBlock(scope: !1608, file: !2, line: 674, column: 5)
!1621 = !DILocation(line: 676, column: 7, scope: !1603, inlinedAt: !1554)
!1622 = !DILocation(line: 676, column: 14, scope: !1603, inlinedAt: !1554)
!1623 = !DILocation(line: 676, column: 28, scope: !1603, inlinedAt: !1554)
!1624 = !DILocalVariable(name: "value", scope: !1553, file: !2, line: 678, type: !1546, align: 1)
!1625 = !DILocation(line: 678, column: 8, scope: !1553, inlinedAt: !1554)
!1626 = !DILocation(line: 678, column: 16, scope: !1553, inlinedAt: !1554)
!1627 = !DILocation(line: 679, column: 2, scope: !1553, inlinedAt: !1554)
!1628 = !DILocation(line: 679, column: 9, scope: !1629, inlinedAt: !1554)
!1629 = distinct !DILexicalBlock(scope: !1553, file: !2, line: 679, column: 2)
!1630 = !DILocation(line: 679, column: 18, scope: !1629, inlinedAt: !1554)
!1631 = !DILocalVariable(name: "c", scope: !1632, file: !2, line: 681, type: !64, align: 1)
!1632 = distinct !DILexicalBlock(scope: !1629, file: !2, line: 680, column: 2)
!1633 = !DILocation(line: 681, column: 8, scope: !1632, inlinedAt: !1554)
!1634 = !DILocalVariable(name: "ch", scope: !1635, file: !2, line: 682, type: !64, align: 1)
!1635 = distinct !DILexicalBlock(scope: !1632, file: !2, line: 682, column: 4)
!1636 = !DILocation(line: 682, column: 9, scope: !1635, inlinedAt: !1554)
!1637 = !DILocation(line: 682, column: 14, scope: !1635, inlinedAt: !1554)
!1638 = !DILocation(line: 682, column: 21, scope: !1635, inlinedAt: !1554)
!1639 = !DILocation(line: 683, column: 8, scope: !1635, inlinedAt: !1554)
!1640 = !DILocation(line: 683, column: 27, scope: !1635, inlinedAt: !1554)
!1641 = !DILocation(line: 683, column: 51, scope: !1635, inlinedAt: !1554)
!1642 = !DILocation(line: 683, column: 45, scope: !1635, inlinedAt: !1554)
!1643 = !DILocation(line: 684, column: 8, scope: !1635, inlinedAt: !1554)
!1644 = !DILocation(line: 684, column: 33, scope: !1635, inlinedAt: !1554)
!1645 = !DILocation(line: 684, column: 27, scope: !1635, inlinedAt: !1554)
!1646 = !DILocation(line: 685, column: 8, scope: !1635, inlinedAt: !1554)
!1647 = !DILocation(line: 685, column: 25, scope: !1635, inlinedAt: !1554)
!1648 = !DILocation(line: 686, column: 8, scope: !1635, inlinedAt: !1554)
!1649 = !DILocation(line: 686, column: 25, scope: !1635, inlinedAt: !1554)
!1650 = !DILocation(line: 687, column: 18, scope: !1635, inlinedAt: !1554)
!1651 = !DILocation(line: 687, column: 12, scope: !1635, inlinedAt: !1554)
!1652 = !DILocation(line: 689, column: 7, scope: !1632, inlinedAt: !1554)
!1653 = !DILocation(line: 689, column: 12, scope: !1632, inlinedAt: !1554)
!1654 = !DILocation(line: 689, column: 30, scope: !1632, inlinedAt: !1554)
!1655 = !DILocation(line: 691, column: 8, scope: !1656, inlinedAt: !1554)
!1656 = distinct !DILexicalBlock(scope: !1632, file: !2, line: 691, column: 4)
!1657 = !DILocalVariable(name: "new_value", scope: !1658, file: !2, line: 693, type: !1546, align: 1)
!1658 = distinct !DILexicalBlock(scope: !1656, file: !2, line: 692, column: 4)
!1659 = !DILocation(line: 693, column: 11, scope: !1658, inlinedAt: !1554)
!1660 = !DILocation(line: 693, column: 23, scope: !1658, inlinedAt: !1554)
!1661 = !DILocation(line: 693, column: 31, scope: !1658, inlinedAt: !1554)
!1662 = !DILocation(line: 693, column: 43, scope: !1658, inlinedAt: !1554)
!1663 = !DILocation(line: 694, column: 9, scope: !1658, inlinedAt: !1554)
!1664 = !DILocation(line: 694, column: 21, scope: !1658, inlinedAt: !1554)
!1665 = !DILocation(line: 694, column: 35, scope: !1658, inlinedAt: !1554)
!1666 = !DILocation(line: 695, column: 12, scope: !1658, inlinedAt: !1554)
!1667 = !DILocalVariable(name: "new_value", scope: !1656, file: !2, line: 697, type: !1546, align: 1)
!1668 = !DILocation(line: 697, column: 10, scope: !1656, inlinedAt: !1554)
!1669 = !DILocation(line: 697, column: 22, scope: !1656, inlinedAt: !1554)
!1670 = !DILocation(line: 697, column: 30, scope: !1656, inlinedAt: !1554)
!1671 = !DILocation(line: 697, column: 42, scope: !1656, inlinedAt: !1554)
!1672 = !DILocation(line: 698, column: 8, scope: !1656, inlinedAt: !1554)
!1673 = !DILocation(line: 698, column: 20, scope: !1656, inlinedAt: !1554)
!1674 = !DILocation(line: 698, column: 34, scope: !1656, inlinedAt: !1554)
!1675 = !DILocation(line: 699, column: 11, scope: !1656, inlinedAt: !1554)
!1676 = !DILocation(line: 702, column: 9, scope: !1553, inlinedAt: !1554)
!1677 = distinct !DISubprogram(name: "to_uint128", linkageName: "std.core.String.to_uint128", scope: !2, file: !2, line: 711, type: !1678, scopeLine: 711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1678 = !DISubroutineType(types: !1679)
!1679 = !{!332, !1680, !59, !18}
!1680 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !1681, size: 64, align: 64, dwarfAddressSpace: 0)
!1681 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!1682 = !DILocalVariable(name: "s", arg: 1, scope: !1677, file: !2, line: 711, type: !59)
!1683 = !DILocation(line: 711, column: 31, scope: !1677)
!1684 = !DILocalVariable(name: "base", arg: 2, scope: !1677, file: !2, line: 711, type: !18)
!1685 = !DILocation(line: 711, column: 38, scope: !1677)
!1686 = !DILocation(line: 632, column: 12, scope: !1687, inlinedAt: !1689)
!1687 = distinct !DILexicalBlock(scope: !1688, file: !2, line: 635, column: 1)
!1688 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1689 = !DILocation(line: 711, column: 52, scope: !1677)
!1690 = !DILocation(line: 632, column: 26, scope: !1687, inlinedAt: !1689)
!1691 = !DILocation(line: 632, column: 39, scope: !1687, inlinedAt: !1689)
!1692 = !DILocalVariable(name: "len", scope: !1688, file: !2, line: 636, type: !66, align: 8)
!1693 = !DILocation(line: 636, column: 6, scope: !1688, inlinedAt: !1689)
!1694 = !DILocation(line: 636, column: 12, scope: !1688, inlinedAt: !1689)
!1695 = !DILocalVariable(name: "index", scope: !1688, file: !2, line: 637, type: !66, align: 8)
!1696 = !DILocation(line: 637, column: 6, scope: !1688, inlinedAt: !1689)
!1697 = !DILocation(line: 637, column: 14, scope: !1688, inlinedAt: !1689)
!1698 = !DILocalVariable(name: "ptr", scope: !1688, file: !2, line: 638, type: !63, align: 8)
!1699 = !DILocation(line: 638, column: 8, scope: !1688, inlinedAt: !1689)
!1700 = !DILocation(line: 638, column: 14, scope: !1688, inlinedAt: !1689)
!1701 = !DILocation(line: 639, column: 2, scope: !1688, inlinedAt: !1689)
!1702 = !DILocation(line: 639, column: 9, scope: !1703, inlinedAt: !1689)
!1703 = distinct !DILexicalBlock(scope: !1688, file: !2, line: 639, column: 2)
!1704 = !DILocation(line: 639, column: 17, scope: !1703, inlinedAt: !1689)
!1705 = !DILocation(line: 639, column: 42, scope: !1703, inlinedAt: !1689)
!1706 = !DILocation(line: 639, column: 46, scope: !1703, inlinedAt: !1689)
!1707 = !DILocation(line: 16, column: 29, scope: !1708, inlinedAt: !1709)
!1708 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1709 = !DILocation(line: 639, column: 31, scope: !1703, inlinedAt: !1689)
!1710 = !DILocation(line: 16, column: 42, scope: !1708, inlinedAt: !1709)
!1711 = !DILocation(line: 639, column: 55, scope: !1703, inlinedAt: !1689)
!1712 = !DILocation(line: 640, column: 6, scope: !1688, inlinedAt: !1689)
!1713 = !DILocation(line: 640, column: 13, scope: !1688, inlinedAt: !1689)
!1714 = !DILocation(line: 640, column: 27, scope: !1688, inlinedAt: !1689)
!1715 = !DILocalVariable(name: "is_negative", scope: !1688, file: !2, line: 641, type: !131, align: 1)
!1716 = !DILocation(line: 641, column: 7, scope: !1688, inlinedAt: !1689)
!1717 = !DILocation(line: 642, column: 10, scope: !1718, inlinedAt: !1689)
!1718 = distinct !DILexicalBlock(scope: !1688, file: !2, line: 642, column: 2)
!1719 = !DILocation(line: 642, column: 17, scope: !1718, inlinedAt: !1689)
!1720 = !DILocation(line: 645, column: 8, scope: !1721, inlinedAt: !1689)
!1721 = distinct !DILexicalBlock(scope: !1718, file: !2, line: 645, column: 4)
!1722 = !DILocation(line: 645, column: 31, scope: !1721, inlinedAt: !1689)
!1723 = !DILocation(line: 649, column: 4, scope: !1724, inlinedAt: !1689)
!1724 = distinct !DILexicalBlock(scope: !1718, file: !2, line: 649, column: 4)
!1725 = !DILocation(line: 651, column: 4, scope: !1726, inlinedAt: !1689)
!1726 = distinct !DILexicalBlock(scope: !1718, file: !2, line: 651, column: 4)
!1727 = !DILocation(line: 653, column: 6, scope: !1688, inlinedAt: !1689)
!1728 = !DILocation(line: 653, column: 13, scope: !1688, inlinedAt: !1689)
!1729 = !DILocation(line: 653, column: 27, scope: !1688, inlinedAt: !1689)
!1730 = !DILocalVariable(name: "base_used", scope: !1688, file: !2, line: 654, type: !1681, align: 8)
!1731 = !DILocation(line: 654, column: 8, scope: !1688, inlinedAt: !1689)
!1732 = !DILocation(line: 654, column: 21, scope: !1688, inlinedAt: !1689)
!1733 = !DILocation(line: 655, column: 6, scope: !1688, inlinedAt: !1689)
!1734 = !DILocation(line: 655, column: 13, scope: !1688, inlinedAt: !1689)
!1735 = !DILocation(line: 655, column: 30, scope: !1688, inlinedAt: !1689)
!1736 = !DILocation(line: 657, column: 3, scope: !1737, inlinedAt: !1689)
!1737 = distinct !DILexicalBlock(scope: !1688, file: !2, line: 656, column: 2)
!1738 = !DILocation(line: 658, column: 7, scope: !1737, inlinedAt: !1689)
!1739 = !DILocation(line: 658, column: 16, scope: !1737, inlinedAt: !1689)
!1740 = !DILocation(line: 658, column: 29, scope: !1737, inlinedAt: !1689)
!1741 = !DILocation(line: 659, column: 11, scope: !1742, inlinedAt: !1689)
!1742 = distinct !DILexicalBlock(scope: !1737, file: !2, line: 659, column: 3)
!1743 = !DILocation(line: 659, column: 18, scope: !1742, inlinedAt: !1689)
!1744 = !DILocation(line: 663, column: 17, scope: !1745, inlinedAt: !1689)
!1745 = distinct !DILexicalBlock(scope: !1742, file: !2, line: 663, column: 5)
!1746 = !DILocation(line: 664, column: 5, scope: !1745, inlinedAt: !1689)
!1747 = !DILocation(line: 667, column: 17, scope: !1748, inlinedAt: !1689)
!1748 = distinct !DILexicalBlock(scope: !1742, file: !2, line: 667, column: 5)
!1749 = !DILocation(line: 668, column: 5, scope: !1748, inlinedAt: !1689)
!1750 = !DILocation(line: 671, column: 17, scope: !1751, inlinedAt: !1689)
!1751 = distinct !DILexicalBlock(scope: !1742, file: !2, line: 671, column: 5)
!1752 = !DILocation(line: 672, column: 5, scope: !1751, inlinedAt: !1689)
!1753 = !DILocation(line: 674, column: 5, scope: !1754, inlinedAt: !1689)
!1754 = distinct !DILexicalBlock(scope: !1742, file: !2, line: 674, column: 5)
!1755 = !DILocation(line: 676, column: 7, scope: !1737, inlinedAt: !1689)
!1756 = !DILocation(line: 676, column: 14, scope: !1737, inlinedAt: !1689)
!1757 = !DILocation(line: 676, column: 28, scope: !1737, inlinedAt: !1689)
!1758 = !DILocalVariable(name: "value", scope: !1688, file: !2, line: 678, type: !1681, align: 8)
!1759 = !DILocation(line: 678, column: 8, scope: !1688, inlinedAt: !1689)
!1760 = !DILocation(line: 678, column: 16, scope: !1688, inlinedAt: !1689)
!1761 = !DILocation(line: 679, column: 2, scope: !1688, inlinedAt: !1689)
!1762 = !DILocation(line: 679, column: 9, scope: !1763, inlinedAt: !1689)
!1763 = distinct !DILexicalBlock(scope: !1688, file: !2, line: 679, column: 2)
!1764 = !DILocation(line: 679, column: 18, scope: !1763, inlinedAt: !1689)
!1765 = !DILocalVariable(name: "c", scope: !1766, file: !2, line: 681, type: !64, align: 1)
!1766 = distinct !DILexicalBlock(scope: !1763, file: !2, line: 680, column: 2)
!1767 = !DILocation(line: 681, column: 8, scope: !1766, inlinedAt: !1689)
!1768 = !DILocalVariable(name: "ch", scope: !1769, file: !2, line: 682, type: !64, align: 1)
!1769 = distinct !DILexicalBlock(scope: !1766, file: !2, line: 682, column: 4)
!1770 = !DILocation(line: 682, column: 9, scope: !1769, inlinedAt: !1689)
!1771 = !DILocation(line: 682, column: 14, scope: !1769, inlinedAt: !1689)
!1772 = !DILocation(line: 682, column: 21, scope: !1769, inlinedAt: !1689)
!1773 = !DILocation(line: 683, column: 8, scope: !1769, inlinedAt: !1689)
!1774 = !DILocation(line: 683, column: 27, scope: !1769, inlinedAt: !1689)
!1775 = !DILocation(line: 683, column: 51, scope: !1769, inlinedAt: !1689)
!1776 = !DILocation(line: 683, column: 45, scope: !1769, inlinedAt: !1689)
!1777 = !DILocation(line: 684, column: 8, scope: !1769, inlinedAt: !1689)
!1778 = !DILocation(line: 684, column: 33, scope: !1769, inlinedAt: !1689)
!1779 = !DILocation(line: 684, column: 27, scope: !1769, inlinedAt: !1689)
!1780 = !DILocation(line: 685, column: 8, scope: !1769, inlinedAt: !1689)
!1781 = !DILocation(line: 685, column: 25, scope: !1769, inlinedAt: !1689)
!1782 = !DILocation(line: 686, column: 8, scope: !1769, inlinedAt: !1689)
!1783 = !DILocation(line: 686, column: 25, scope: !1769, inlinedAt: !1689)
!1784 = !DILocation(line: 687, column: 18, scope: !1769, inlinedAt: !1689)
!1785 = !DILocation(line: 687, column: 12, scope: !1769, inlinedAt: !1689)
!1786 = !DILocation(line: 689, column: 7, scope: !1766, inlinedAt: !1689)
!1787 = !DILocation(line: 689, column: 12, scope: !1766, inlinedAt: !1689)
!1788 = !DILocation(line: 689, column: 30, scope: !1766, inlinedAt: !1689)
!1789 = !DILocation(line: 691, column: 8, scope: !1790, inlinedAt: !1689)
!1790 = distinct !DILexicalBlock(scope: !1766, file: !2, line: 691, column: 4)
!1791 = !DILocalVariable(name: "new_value", scope: !1792, file: !2, line: 693, type: !1681, align: 8)
!1792 = distinct !DILexicalBlock(scope: !1790, file: !2, line: 692, column: 4)
!1793 = !DILocation(line: 693, column: 11, scope: !1792, inlinedAt: !1689)
!1794 = !DILocation(line: 693, column: 23, scope: !1792, inlinedAt: !1689)
!1795 = !DILocation(line: 693, column: 31, scope: !1792, inlinedAt: !1689)
!1796 = !DILocation(line: 693, column: 43, scope: !1792, inlinedAt: !1689)
!1797 = !DILocation(line: 694, column: 9, scope: !1792, inlinedAt: !1689)
!1798 = !DILocation(line: 694, column: 21, scope: !1792, inlinedAt: !1689)
!1799 = !DILocation(line: 694, column: 35, scope: !1792, inlinedAt: !1689)
!1800 = !DILocation(line: 695, column: 12, scope: !1792, inlinedAt: !1689)
!1801 = !DILocalVariable(name: "new_value", scope: !1790, file: !2, line: 697, type: !1681, align: 8)
!1802 = !DILocation(line: 697, column: 10, scope: !1790, inlinedAt: !1689)
!1803 = !DILocation(line: 697, column: 22, scope: !1790, inlinedAt: !1689)
!1804 = !DILocation(line: 697, column: 30, scope: !1790, inlinedAt: !1689)
!1805 = !DILocation(line: 697, column: 42, scope: !1790, inlinedAt: !1689)
!1806 = !DILocation(line: 698, column: 8, scope: !1790, inlinedAt: !1689)
!1807 = !DILocation(line: 698, column: 20, scope: !1790, inlinedAt: !1689)
!1808 = !DILocation(line: 698, column: 34, scope: !1790, inlinedAt: !1689)
!1809 = !DILocation(line: 699, column: 11, scope: !1790, inlinedAt: !1689)
!1810 = !DILocation(line: 702, column: 9, scope: !1688, inlinedAt: !1689)
!1811 = distinct !DISubprogram(name: "to_ulong", linkageName: "std.core.String.to_ulong", scope: !2, file: !2, line: 712, type: !1812, scopeLine: 712, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1812 = !DISubroutineType(types: !1813)
!1813 = !{!332, !1814, !59, !18}
!1814 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !67, size: 64, align: 64, dwarfAddressSpace: 0)
!1815 = !DILocalVariable(name: "s", arg: 1, scope: !1811, file: !2, line: 712, type: !59)
!1816 = !DILocation(line: 712, column: 27, scope: !1811)
!1817 = !DILocalVariable(name: "base", arg: 2, scope: !1811, file: !2, line: 712, type: !18)
!1818 = !DILocation(line: 712, column: 34, scope: !1811)
!1819 = !DILocation(line: 632, column: 12, scope: !1820, inlinedAt: !1822)
!1820 = distinct !DILexicalBlock(scope: !1821, file: !2, line: 635, column: 1)
!1821 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1822 = !DILocation(line: 712, column: 48, scope: !1811)
!1823 = !DILocation(line: 632, column: 26, scope: !1820, inlinedAt: !1822)
!1824 = !DILocation(line: 632, column: 39, scope: !1820, inlinedAt: !1822)
!1825 = !DILocalVariable(name: "len", scope: !1821, file: !2, line: 636, type: !66, align: 8)
!1826 = !DILocation(line: 636, column: 6, scope: !1821, inlinedAt: !1822)
!1827 = !DILocation(line: 636, column: 12, scope: !1821, inlinedAt: !1822)
!1828 = !DILocalVariable(name: "index", scope: !1821, file: !2, line: 637, type: !66, align: 8)
!1829 = !DILocation(line: 637, column: 6, scope: !1821, inlinedAt: !1822)
!1830 = !DILocation(line: 637, column: 14, scope: !1821, inlinedAt: !1822)
!1831 = !DILocalVariable(name: "ptr", scope: !1821, file: !2, line: 638, type: !63, align: 8)
!1832 = !DILocation(line: 638, column: 8, scope: !1821, inlinedAt: !1822)
!1833 = !DILocation(line: 638, column: 14, scope: !1821, inlinedAt: !1822)
!1834 = !DILocation(line: 639, column: 2, scope: !1821, inlinedAt: !1822)
!1835 = !DILocation(line: 639, column: 9, scope: !1836, inlinedAt: !1822)
!1836 = distinct !DILexicalBlock(scope: !1821, file: !2, line: 639, column: 2)
!1837 = !DILocation(line: 639, column: 17, scope: !1836, inlinedAt: !1822)
!1838 = !DILocation(line: 639, column: 42, scope: !1836, inlinedAt: !1822)
!1839 = !DILocation(line: 639, column: 46, scope: !1836, inlinedAt: !1822)
!1840 = !DILocation(line: 16, column: 29, scope: !1841, inlinedAt: !1842)
!1841 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1842 = !DILocation(line: 639, column: 31, scope: !1836, inlinedAt: !1822)
!1843 = !DILocation(line: 16, column: 42, scope: !1841, inlinedAt: !1842)
!1844 = !DILocation(line: 639, column: 55, scope: !1836, inlinedAt: !1822)
!1845 = !DILocation(line: 640, column: 6, scope: !1821, inlinedAt: !1822)
!1846 = !DILocation(line: 640, column: 13, scope: !1821, inlinedAt: !1822)
!1847 = !DILocation(line: 640, column: 27, scope: !1821, inlinedAt: !1822)
!1848 = !DILocalVariable(name: "is_negative", scope: !1821, file: !2, line: 641, type: !131, align: 1)
!1849 = !DILocation(line: 641, column: 7, scope: !1821, inlinedAt: !1822)
!1850 = !DILocation(line: 642, column: 10, scope: !1851, inlinedAt: !1822)
!1851 = distinct !DILexicalBlock(scope: !1821, file: !2, line: 642, column: 2)
!1852 = !DILocation(line: 642, column: 17, scope: !1851, inlinedAt: !1822)
!1853 = !DILocation(line: 645, column: 8, scope: !1854, inlinedAt: !1822)
!1854 = distinct !DILexicalBlock(scope: !1851, file: !2, line: 645, column: 4)
!1855 = !DILocation(line: 645, column: 31, scope: !1854, inlinedAt: !1822)
!1856 = !DILocation(line: 649, column: 4, scope: !1857, inlinedAt: !1822)
!1857 = distinct !DILexicalBlock(scope: !1851, file: !2, line: 649, column: 4)
!1858 = !DILocation(line: 651, column: 4, scope: !1859, inlinedAt: !1822)
!1859 = distinct !DILexicalBlock(scope: !1851, file: !2, line: 651, column: 4)
!1860 = !DILocation(line: 653, column: 6, scope: !1821, inlinedAt: !1822)
!1861 = !DILocation(line: 653, column: 13, scope: !1821, inlinedAt: !1822)
!1862 = !DILocation(line: 653, column: 27, scope: !1821, inlinedAt: !1822)
!1863 = !DILocalVariable(name: "base_used", scope: !1821, file: !2, line: 654, type: !67, align: 8)
!1864 = !DILocation(line: 654, column: 8, scope: !1821, inlinedAt: !1822)
!1865 = !DILocation(line: 654, column: 21, scope: !1821, inlinedAt: !1822)
!1866 = !DILocation(line: 655, column: 6, scope: !1821, inlinedAt: !1822)
!1867 = !DILocation(line: 655, column: 13, scope: !1821, inlinedAt: !1822)
!1868 = !DILocation(line: 655, column: 30, scope: !1821, inlinedAt: !1822)
!1869 = !DILocation(line: 657, column: 3, scope: !1870, inlinedAt: !1822)
!1870 = distinct !DILexicalBlock(scope: !1821, file: !2, line: 656, column: 2)
!1871 = !DILocation(line: 658, column: 7, scope: !1870, inlinedAt: !1822)
!1872 = !DILocation(line: 658, column: 16, scope: !1870, inlinedAt: !1822)
!1873 = !DILocation(line: 658, column: 29, scope: !1870, inlinedAt: !1822)
!1874 = !DILocation(line: 659, column: 11, scope: !1875, inlinedAt: !1822)
!1875 = distinct !DILexicalBlock(scope: !1870, file: !2, line: 659, column: 3)
!1876 = !DILocation(line: 659, column: 18, scope: !1875, inlinedAt: !1822)
!1877 = !DILocation(line: 663, column: 17, scope: !1878, inlinedAt: !1822)
!1878 = distinct !DILexicalBlock(scope: !1875, file: !2, line: 663, column: 5)
!1879 = !DILocation(line: 664, column: 5, scope: !1878, inlinedAt: !1822)
!1880 = !DILocation(line: 667, column: 17, scope: !1881, inlinedAt: !1822)
!1881 = distinct !DILexicalBlock(scope: !1875, file: !2, line: 667, column: 5)
!1882 = !DILocation(line: 668, column: 5, scope: !1881, inlinedAt: !1822)
!1883 = !DILocation(line: 671, column: 17, scope: !1884, inlinedAt: !1822)
!1884 = distinct !DILexicalBlock(scope: !1875, file: !2, line: 671, column: 5)
!1885 = !DILocation(line: 672, column: 5, scope: !1884, inlinedAt: !1822)
!1886 = !DILocation(line: 674, column: 5, scope: !1887, inlinedAt: !1822)
!1887 = distinct !DILexicalBlock(scope: !1875, file: !2, line: 674, column: 5)
!1888 = !DILocation(line: 676, column: 7, scope: !1870, inlinedAt: !1822)
!1889 = !DILocation(line: 676, column: 14, scope: !1870, inlinedAt: !1822)
!1890 = !DILocation(line: 676, column: 28, scope: !1870, inlinedAt: !1822)
!1891 = !DILocalVariable(name: "value", scope: !1821, file: !2, line: 678, type: !67, align: 8)
!1892 = !DILocation(line: 678, column: 8, scope: !1821, inlinedAt: !1822)
!1893 = !DILocation(line: 678, column: 16, scope: !1821, inlinedAt: !1822)
!1894 = !DILocation(line: 679, column: 2, scope: !1821, inlinedAt: !1822)
!1895 = !DILocation(line: 679, column: 9, scope: !1896, inlinedAt: !1822)
!1896 = distinct !DILexicalBlock(scope: !1821, file: !2, line: 679, column: 2)
!1897 = !DILocation(line: 679, column: 18, scope: !1896, inlinedAt: !1822)
!1898 = !DILocalVariable(name: "c", scope: !1899, file: !2, line: 681, type: !64, align: 1)
!1899 = distinct !DILexicalBlock(scope: !1896, file: !2, line: 680, column: 2)
!1900 = !DILocation(line: 681, column: 8, scope: !1899, inlinedAt: !1822)
!1901 = !DILocalVariable(name: "ch", scope: !1902, file: !2, line: 682, type: !64, align: 1)
!1902 = distinct !DILexicalBlock(scope: !1899, file: !2, line: 682, column: 4)
!1903 = !DILocation(line: 682, column: 9, scope: !1902, inlinedAt: !1822)
!1904 = !DILocation(line: 682, column: 14, scope: !1902, inlinedAt: !1822)
!1905 = !DILocation(line: 682, column: 21, scope: !1902, inlinedAt: !1822)
!1906 = !DILocation(line: 683, column: 8, scope: !1902, inlinedAt: !1822)
!1907 = !DILocation(line: 683, column: 27, scope: !1902, inlinedAt: !1822)
!1908 = !DILocation(line: 683, column: 51, scope: !1902, inlinedAt: !1822)
!1909 = !DILocation(line: 683, column: 45, scope: !1902, inlinedAt: !1822)
!1910 = !DILocation(line: 684, column: 8, scope: !1902, inlinedAt: !1822)
!1911 = !DILocation(line: 684, column: 33, scope: !1902, inlinedAt: !1822)
!1912 = !DILocation(line: 684, column: 27, scope: !1902, inlinedAt: !1822)
!1913 = !DILocation(line: 685, column: 8, scope: !1902, inlinedAt: !1822)
!1914 = !DILocation(line: 685, column: 25, scope: !1902, inlinedAt: !1822)
!1915 = !DILocation(line: 686, column: 8, scope: !1902, inlinedAt: !1822)
!1916 = !DILocation(line: 686, column: 25, scope: !1902, inlinedAt: !1822)
!1917 = !DILocation(line: 687, column: 18, scope: !1902, inlinedAt: !1822)
!1918 = !DILocation(line: 687, column: 12, scope: !1902, inlinedAt: !1822)
!1919 = !DILocation(line: 689, column: 7, scope: !1899, inlinedAt: !1822)
!1920 = !DILocation(line: 689, column: 12, scope: !1899, inlinedAt: !1822)
!1921 = !DILocation(line: 689, column: 30, scope: !1899, inlinedAt: !1822)
!1922 = !DILocation(line: 691, column: 8, scope: !1923, inlinedAt: !1822)
!1923 = distinct !DILexicalBlock(scope: !1899, file: !2, line: 691, column: 4)
!1924 = !DILocalVariable(name: "new_value", scope: !1925, file: !2, line: 693, type: !67, align: 8)
!1925 = distinct !DILexicalBlock(scope: !1923, file: !2, line: 692, column: 4)
!1926 = !DILocation(line: 693, column: 11, scope: !1925, inlinedAt: !1822)
!1927 = !DILocation(line: 693, column: 23, scope: !1925, inlinedAt: !1822)
!1928 = !DILocation(line: 693, column: 31, scope: !1925, inlinedAt: !1822)
!1929 = !DILocation(line: 693, column: 43, scope: !1925, inlinedAt: !1822)
!1930 = !DILocation(line: 694, column: 9, scope: !1925, inlinedAt: !1822)
!1931 = !DILocation(line: 694, column: 21, scope: !1925, inlinedAt: !1822)
!1932 = !DILocation(line: 694, column: 35, scope: !1925, inlinedAt: !1822)
!1933 = !DILocation(line: 695, column: 12, scope: !1925, inlinedAt: !1822)
!1934 = !DILocalVariable(name: "new_value", scope: !1923, file: !2, line: 697, type: !67, align: 8)
!1935 = !DILocation(line: 697, column: 10, scope: !1923, inlinedAt: !1822)
!1936 = !DILocation(line: 697, column: 22, scope: !1923, inlinedAt: !1822)
!1937 = !DILocation(line: 697, column: 30, scope: !1923, inlinedAt: !1822)
!1938 = !DILocation(line: 697, column: 42, scope: !1923, inlinedAt: !1822)
!1939 = !DILocation(line: 698, column: 8, scope: !1923, inlinedAt: !1822)
!1940 = !DILocation(line: 698, column: 20, scope: !1923, inlinedAt: !1822)
!1941 = !DILocation(line: 698, column: 34, scope: !1923, inlinedAt: !1822)
!1942 = !DILocation(line: 699, column: 11, scope: !1923, inlinedAt: !1822)
!1943 = !DILocation(line: 702, column: 9, scope: !1821, inlinedAt: !1822)
!1944 = distinct !DISubprogram(name: "to_uint", linkageName: "std.core.String.to_uint", scope: !2, file: !2, line: 713, type: !1945, scopeLine: 713, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1945 = !DISubroutineType(types: !1946)
!1946 = !{!332, !1947, !59, !18}
!1947 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1948 = !DILocalVariable(name: "s", arg: 1, scope: !1944, file: !2, line: 713, type: !59)
!1949 = !DILocation(line: 713, column: 25, scope: !1944)
!1950 = !DILocalVariable(name: "base", arg: 2, scope: !1944, file: !2, line: 713, type: !18)
!1951 = !DILocation(line: 713, column: 32, scope: !1944)
!1952 = !DILocation(line: 632, column: 12, scope: !1953, inlinedAt: !1955)
!1953 = distinct !DILexicalBlock(scope: !1954, file: !2, line: 635, column: 1)
!1954 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1955 = !DILocation(line: 713, column: 46, scope: !1944)
!1956 = !DILocation(line: 632, column: 26, scope: !1953, inlinedAt: !1955)
!1957 = !DILocation(line: 632, column: 39, scope: !1953, inlinedAt: !1955)
!1958 = !DILocalVariable(name: "len", scope: !1954, file: !2, line: 636, type: !66, align: 8)
!1959 = !DILocation(line: 636, column: 6, scope: !1954, inlinedAt: !1955)
!1960 = !DILocation(line: 636, column: 12, scope: !1954, inlinedAt: !1955)
!1961 = !DILocalVariable(name: "index", scope: !1954, file: !2, line: 637, type: !66, align: 8)
!1962 = !DILocation(line: 637, column: 6, scope: !1954, inlinedAt: !1955)
!1963 = !DILocation(line: 637, column: 14, scope: !1954, inlinedAt: !1955)
!1964 = !DILocalVariable(name: "ptr", scope: !1954, file: !2, line: 638, type: !63, align: 8)
!1965 = !DILocation(line: 638, column: 8, scope: !1954, inlinedAt: !1955)
!1966 = !DILocation(line: 638, column: 14, scope: !1954, inlinedAt: !1955)
!1967 = !DILocation(line: 639, column: 2, scope: !1954, inlinedAt: !1955)
!1968 = !DILocation(line: 639, column: 9, scope: !1969, inlinedAt: !1955)
!1969 = distinct !DILexicalBlock(scope: !1954, file: !2, line: 639, column: 2)
!1970 = !DILocation(line: 639, column: 17, scope: !1969, inlinedAt: !1955)
!1971 = !DILocation(line: 639, column: 42, scope: !1969, inlinedAt: !1955)
!1972 = !DILocation(line: 639, column: 46, scope: !1969, inlinedAt: !1955)
!1973 = !DILocation(line: 16, column: 29, scope: !1974, inlinedAt: !1975)
!1974 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1975 = !DILocation(line: 639, column: 31, scope: !1969, inlinedAt: !1955)
!1976 = !DILocation(line: 16, column: 42, scope: !1974, inlinedAt: !1975)
!1977 = !DILocation(line: 639, column: 55, scope: !1969, inlinedAt: !1955)
!1978 = !DILocation(line: 640, column: 6, scope: !1954, inlinedAt: !1955)
!1979 = !DILocation(line: 640, column: 13, scope: !1954, inlinedAt: !1955)
!1980 = !DILocation(line: 640, column: 27, scope: !1954, inlinedAt: !1955)
!1981 = !DILocalVariable(name: "is_negative", scope: !1954, file: !2, line: 641, type: !131, align: 1)
!1982 = !DILocation(line: 641, column: 7, scope: !1954, inlinedAt: !1955)
!1983 = !DILocation(line: 642, column: 10, scope: !1984, inlinedAt: !1955)
!1984 = distinct !DILexicalBlock(scope: !1954, file: !2, line: 642, column: 2)
!1985 = !DILocation(line: 642, column: 17, scope: !1984, inlinedAt: !1955)
!1986 = !DILocation(line: 645, column: 8, scope: !1987, inlinedAt: !1955)
!1987 = distinct !DILexicalBlock(scope: !1984, file: !2, line: 645, column: 4)
!1988 = !DILocation(line: 645, column: 31, scope: !1987, inlinedAt: !1955)
!1989 = !DILocation(line: 649, column: 4, scope: !1990, inlinedAt: !1955)
!1990 = distinct !DILexicalBlock(scope: !1984, file: !2, line: 649, column: 4)
!1991 = !DILocation(line: 651, column: 4, scope: !1992, inlinedAt: !1955)
!1992 = distinct !DILexicalBlock(scope: !1984, file: !2, line: 651, column: 4)
!1993 = !DILocation(line: 653, column: 6, scope: !1954, inlinedAt: !1955)
!1994 = !DILocation(line: 653, column: 13, scope: !1954, inlinedAt: !1955)
!1995 = !DILocation(line: 653, column: 27, scope: !1954, inlinedAt: !1955)
!1996 = !DILocalVariable(name: "base_used", scope: !1954, file: !2, line: 654, type: !3, align: 4)
!1997 = !DILocation(line: 654, column: 8, scope: !1954, inlinedAt: !1955)
!1998 = !DILocation(line: 654, column: 21, scope: !1954, inlinedAt: !1955)
!1999 = !DILocation(line: 655, column: 6, scope: !1954, inlinedAt: !1955)
!2000 = !DILocation(line: 655, column: 13, scope: !1954, inlinedAt: !1955)
!2001 = !DILocation(line: 655, column: 30, scope: !1954, inlinedAt: !1955)
!2002 = !DILocation(line: 657, column: 3, scope: !2003, inlinedAt: !1955)
!2003 = distinct !DILexicalBlock(scope: !1954, file: !2, line: 656, column: 2)
!2004 = !DILocation(line: 658, column: 7, scope: !2003, inlinedAt: !1955)
!2005 = !DILocation(line: 658, column: 16, scope: !2003, inlinedAt: !1955)
!2006 = !DILocation(line: 658, column: 29, scope: !2003, inlinedAt: !1955)
!2007 = !DILocation(line: 659, column: 11, scope: !2008, inlinedAt: !1955)
!2008 = distinct !DILexicalBlock(scope: !2003, file: !2, line: 659, column: 3)
!2009 = !DILocation(line: 659, column: 18, scope: !2008, inlinedAt: !1955)
!2010 = !DILocation(line: 663, column: 17, scope: !2011, inlinedAt: !1955)
!2011 = distinct !DILexicalBlock(scope: !2008, file: !2, line: 663, column: 5)
!2012 = !DILocation(line: 664, column: 5, scope: !2011, inlinedAt: !1955)
!2013 = !DILocation(line: 667, column: 17, scope: !2014, inlinedAt: !1955)
!2014 = distinct !DILexicalBlock(scope: !2008, file: !2, line: 667, column: 5)
!2015 = !DILocation(line: 668, column: 5, scope: !2014, inlinedAt: !1955)
!2016 = !DILocation(line: 671, column: 17, scope: !2017, inlinedAt: !1955)
!2017 = distinct !DILexicalBlock(scope: !2008, file: !2, line: 671, column: 5)
!2018 = !DILocation(line: 672, column: 5, scope: !2017, inlinedAt: !1955)
!2019 = !DILocation(line: 674, column: 5, scope: !2020, inlinedAt: !1955)
!2020 = distinct !DILexicalBlock(scope: !2008, file: !2, line: 674, column: 5)
!2021 = !DILocation(line: 676, column: 7, scope: !2003, inlinedAt: !1955)
!2022 = !DILocation(line: 676, column: 14, scope: !2003, inlinedAt: !1955)
!2023 = !DILocation(line: 676, column: 28, scope: !2003, inlinedAt: !1955)
!2024 = !DILocalVariable(name: "value", scope: !1954, file: !2, line: 678, type: !3, align: 4)
!2025 = !DILocation(line: 678, column: 8, scope: !1954, inlinedAt: !1955)
!2026 = !DILocation(line: 678, column: 16, scope: !1954, inlinedAt: !1955)
!2027 = !DILocation(line: 679, column: 2, scope: !1954, inlinedAt: !1955)
!2028 = !DILocation(line: 679, column: 9, scope: !2029, inlinedAt: !1955)
!2029 = distinct !DILexicalBlock(scope: !1954, file: !2, line: 679, column: 2)
!2030 = !DILocation(line: 679, column: 18, scope: !2029, inlinedAt: !1955)
!2031 = !DILocalVariable(name: "c", scope: !2032, file: !2, line: 681, type: !64, align: 1)
!2032 = distinct !DILexicalBlock(scope: !2029, file: !2, line: 680, column: 2)
!2033 = !DILocation(line: 681, column: 8, scope: !2032, inlinedAt: !1955)
!2034 = !DILocalVariable(name: "ch", scope: !2035, file: !2, line: 682, type: !64, align: 1)
!2035 = distinct !DILexicalBlock(scope: !2032, file: !2, line: 682, column: 4)
!2036 = !DILocation(line: 682, column: 9, scope: !2035, inlinedAt: !1955)
!2037 = !DILocation(line: 682, column: 14, scope: !2035, inlinedAt: !1955)
!2038 = !DILocation(line: 682, column: 21, scope: !2035, inlinedAt: !1955)
!2039 = !DILocation(line: 683, column: 8, scope: !2035, inlinedAt: !1955)
!2040 = !DILocation(line: 683, column: 27, scope: !2035, inlinedAt: !1955)
!2041 = !DILocation(line: 683, column: 51, scope: !2035, inlinedAt: !1955)
!2042 = !DILocation(line: 683, column: 45, scope: !2035, inlinedAt: !1955)
!2043 = !DILocation(line: 684, column: 8, scope: !2035, inlinedAt: !1955)
!2044 = !DILocation(line: 684, column: 33, scope: !2035, inlinedAt: !1955)
!2045 = !DILocation(line: 684, column: 27, scope: !2035, inlinedAt: !1955)
!2046 = !DILocation(line: 685, column: 8, scope: !2035, inlinedAt: !1955)
!2047 = !DILocation(line: 685, column: 25, scope: !2035, inlinedAt: !1955)
!2048 = !DILocation(line: 686, column: 8, scope: !2035, inlinedAt: !1955)
!2049 = !DILocation(line: 686, column: 25, scope: !2035, inlinedAt: !1955)
!2050 = !DILocation(line: 687, column: 18, scope: !2035, inlinedAt: !1955)
!2051 = !DILocation(line: 687, column: 12, scope: !2035, inlinedAt: !1955)
!2052 = !DILocation(line: 689, column: 7, scope: !2032, inlinedAt: !1955)
!2053 = !DILocation(line: 689, column: 12, scope: !2032, inlinedAt: !1955)
!2054 = !DILocation(line: 689, column: 30, scope: !2032, inlinedAt: !1955)
!2055 = !DILocation(line: 691, column: 8, scope: !2056, inlinedAt: !1955)
!2056 = distinct !DILexicalBlock(scope: !2032, file: !2, line: 691, column: 4)
!2057 = !DILocalVariable(name: "new_value", scope: !2058, file: !2, line: 693, type: !3, align: 4)
!2058 = distinct !DILexicalBlock(scope: !2056, file: !2, line: 692, column: 4)
!2059 = !DILocation(line: 693, column: 11, scope: !2058, inlinedAt: !1955)
!2060 = !DILocation(line: 693, column: 23, scope: !2058, inlinedAt: !1955)
!2061 = !DILocation(line: 693, column: 31, scope: !2058, inlinedAt: !1955)
!2062 = !DILocation(line: 693, column: 43, scope: !2058, inlinedAt: !1955)
!2063 = !DILocation(line: 694, column: 9, scope: !2058, inlinedAt: !1955)
!2064 = !DILocation(line: 694, column: 21, scope: !2058, inlinedAt: !1955)
!2065 = !DILocation(line: 694, column: 35, scope: !2058, inlinedAt: !1955)
!2066 = !DILocation(line: 695, column: 12, scope: !2058, inlinedAt: !1955)
!2067 = !DILocalVariable(name: "new_value", scope: !2056, file: !2, line: 697, type: !3, align: 4)
!2068 = !DILocation(line: 697, column: 10, scope: !2056, inlinedAt: !1955)
!2069 = !DILocation(line: 697, column: 22, scope: !2056, inlinedAt: !1955)
!2070 = !DILocation(line: 697, column: 30, scope: !2056, inlinedAt: !1955)
!2071 = !DILocation(line: 697, column: 42, scope: !2056, inlinedAt: !1955)
!2072 = !DILocation(line: 698, column: 8, scope: !2056, inlinedAt: !1955)
!2073 = !DILocation(line: 698, column: 20, scope: !2056, inlinedAt: !1955)
!2074 = !DILocation(line: 698, column: 34, scope: !2056, inlinedAt: !1955)
!2075 = !DILocation(line: 699, column: 11, scope: !2056, inlinedAt: !1955)
!2076 = !DILocation(line: 702, column: 9, scope: !1954, inlinedAt: !1955)
!2077 = distinct !DISubprogram(name: "to_ushort", linkageName: "std.core.String.to_ushort", scope: !2, file: !2, line: 714, type: !2078, scopeLine: 714, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2078 = !DISubroutineType(types: !2079)
!2079 = !{!332, !825, !59, !18}
!2080 = !DILocalVariable(name: "s", arg: 1, scope: !2077, file: !2, line: 714, type: !59)
!2081 = !DILocation(line: 714, column: 29, scope: !2077)
!2082 = !DILocalVariable(name: "base", arg: 2, scope: !2077, file: !2, line: 714, type: !18)
!2083 = !DILocation(line: 714, column: 36, scope: !2077)
!2084 = !DILocation(line: 632, column: 12, scope: !2085, inlinedAt: !2087)
!2085 = distinct !DILexicalBlock(scope: !2086, file: !2, line: 635, column: 1)
!2086 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2087 = !DILocation(line: 714, column: 50, scope: !2077)
!2088 = !DILocation(line: 632, column: 26, scope: !2085, inlinedAt: !2087)
!2089 = !DILocation(line: 632, column: 39, scope: !2085, inlinedAt: !2087)
!2090 = !DILocalVariable(name: "len", scope: !2086, file: !2, line: 636, type: !66, align: 8)
!2091 = !DILocation(line: 636, column: 6, scope: !2086, inlinedAt: !2087)
!2092 = !DILocation(line: 636, column: 12, scope: !2086, inlinedAt: !2087)
!2093 = !DILocalVariable(name: "index", scope: !2086, file: !2, line: 637, type: !66, align: 8)
!2094 = !DILocation(line: 637, column: 6, scope: !2086, inlinedAt: !2087)
!2095 = !DILocation(line: 637, column: 14, scope: !2086, inlinedAt: !2087)
!2096 = !DILocalVariable(name: "ptr", scope: !2086, file: !2, line: 638, type: !63, align: 8)
!2097 = !DILocation(line: 638, column: 8, scope: !2086, inlinedAt: !2087)
!2098 = !DILocation(line: 638, column: 14, scope: !2086, inlinedAt: !2087)
!2099 = !DILocation(line: 639, column: 2, scope: !2086, inlinedAt: !2087)
!2100 = !DILocation(line: 639, column: 9, scope: !2101, inlinedAt: !2087)
!2101 = distinct !DILexicalBlock(scope: !2086, file: !2, line: 639, column: 2)
!2102 = !DILocation(line: 639, column: 17, scope: !2101, inlinedAt: !2087)
!2103 = !DILocation(line: 639, column: 42, scope: !2101, inlinedAt: !2087)
!2104 = !DILocation(line: 639, column: 46, scope: !2101, inlinedAt: !2087)
!2105 = !DILocation(line: 16, column: 29, scope: !2106, inlinedAt: !2107)
!2106 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2107 = !DILocation(line: 639, column: 31, scope: !2101, inlinedAt: !2087)
!2108 = !DILocation(line: 16, column: 42, scope: !2106, inlinedAt: !2107)
!2109 = !DILocation(line: 639, column: 55, scope: !2101, inlinedAt: !2087)
!2110 = !DILocation(line: 640, column: 6, scope: !2086, inlinedAt: !2087)
!2111 = !DILocation(line: 640, column: 13, scope: !2086, inlinedAt: !2087)
!2112 = !DILocation(line: 640, column: 27, scope: !2086, inlinedAt: !2087)
!2113 = !DILocalVariable(name: "is_negative", scope: !2086, file: !2, line: 641, type: !131, align: 1)
!2114 = !DILocation(line: 641, column: 7, scope: !2086, inlinedAt: !2087)
!2115 = !DILocation(line: 642, column: 10, scope: !2116, inlinedAt: !2087)
!2116 = distinct !DILexicalBlock(scope: !2086, file: !2, line: 642, column: 2)
!2117 = !DILocation(line: 642, column: 17, scope: !2116, inlinedAt: !2087)
!2118 = !DILocation(line: 645, column: 8, scope: !2119, inlinedAt: !2087)
!2119 = distinct !DILexicalBlock(scope: !2116, file: !2, line: 645, column: 4)
!2120 = !DILocation(line: 645, column: 31, scope: !2119, inlinedAt: !2087)
!2121 = !DILocation(line: 649, column: 4, scope: !2122, inlinedAt: !2087)
!2122 = distinct !DILexicalBlock(scope: !2116, file: !2, line: 649, column: 4)
!2123 = !DILocation(line: 651, column: 4, scope: !2124, inlinedAt: !2087)
!2124 = distinct !DILexicalBlock(scope: !2116, file: !2, line: 651, column: 4)
!2125 = !DILocation(line: 653, column: 6, scope: !2086, inlinedAt: !2087)
!2126 = !DILocation(line: 653, column: 13, scope: !2086, inlinedAt: !2087)
!2127 = !DILocation(line: 653, column: 27, scope: !2086, inlinedAt: !2087)
!2128 = !DILocalVariable(name: "base_used", scope: !2086, file: !2, line: 654, type: !776, align: 2)
!2129 = !DILocation(line: 654, column: 8, scope: !2086, inlinedAt: !2087)
!2130 = !DILocation(line: 654, column: 21, scope: !2086, inlinedAt: !2087)
!2131 = !DILocation(line: 655, column: 6, scope: !2086, inlinedAt: !2087)
!2132 = !DILocation(line: 655, column: 13, scope: !2086, inlinedAt: !2087)
!2133 = !DILocation(line: 655, column: 30, scope: !2086, inlinedAt: !2087)
!2134 = !DILocation(line: 657, column: 3, scope: !2135, inlinedAt: !2087)
!2135 = distinct !DILexicalBlock(scope: !2086, file: !2, line: 656, column: 2)
!2136 = !DILocation(line: 658, column: 7, scope: !2135, inlinedAt: !2087)
!2137 = !DILocation(line: 658, column: 16, scope: !2135, inlinedAt: !2087)
!2138 = !DILocation(line: 658, column: 29, scope: !2135, inlinedAt: !2087)
!2139 = !DILocation(line: 659, column: 11, scope: !2140, inlinedAt: !2087)
!2140 = distinct !DILexicalBlock(scope: !2135, file: !2, line: 659, column: 3)
!2141 = !DILocation(line: 659, column: 18, scope: !2140, inlinedAt: !2087)
!2142 = !DILocation(line: 663, column: 17, scope: !2143, inlinedAt: !2087)
!2143 = distinct !DILexicalBlock(scope: !2140, file: !2, line: 663, column: 5)
!2144 = !DILocation(line: 664, column: 5, scope: !2143, inlinedAt: !2087)
!2145 = !DILocation(line: 667, column: 17, scope: !2146, inlinedAt: !2087)
!2146 = distinct !DILexicalBlock(scope: !2140, file: !2, line: 667, column: 5)
!2147 = !DILocation(line: 668, column: 5, scope: !2146, inlinedAt: !2087)
!2148 = !DILocation(line: 671, column: 17, scope: !2149, inlinedAt: !2087)
!2149 = distinct !DILexicalBlock(scope: !2140, file: !2, line: 671, column: 5)
!2150 = !DILocation(line: 672, column: 5, scope: !2149, inlinedAt: !2087)
!2151 = !DILocation(line: 674, column: 5, scope: !2152, inlinedAt: !2087)
!2152 = distinct !DILexicalBlock(scope: !2140, file: !2, line: 674, column: 5)
!2153 = !DILocation(line: 676, column: 7, scope: !2135, inlinedAt: !2087)
!2154 = !DILocation(line: 676, column: 14, scope: !2135, inlinedAt: !2087)
!2155 = !DILocation(line: 676, column: 28, scope: !2135, inlinedAt: !2087)
!2156 = !DILocalVariable(name: "value", scope: !2086, file: !2, line: 678, type: !776, align: 2)
!2157 = !DILocation(line: 678, column: 8, scope: !2086, inlinedAt: !2087)
!2158 = !DILocation(line: 678, column: 16, scope: !2086, inlinedAt: !2087)
!2159 = !DILocation(line: 679, column: 2, scope: !2086, inlinedAt: !2087)
!2160 = !DILocation(line: 679, column: 9, scope: !2161, inlinedAt: !2087)
!2161 = distinct !DILexicalBlock(scope: !2086, file: !2, line: 679, column: 2)
!2162 = !DILocation(line: 679, column: 18, scope: !2161, inlinedAt: !2087)
!2163 = !DILocalVariable(name: "c", scope: !2164, file: !2, line: 681, type: !64, align: 1)
!2164 = distinct !DILexicalBlock(scope: !2161, file: !2, line: 680, column: 2)
!2165 = !DILocation(line: 681, column: 8, scope: !2164, inlinedAt: !2087)
!2166 = !DILocalVariable(name: "ch", scope: !2167, file: !2, line: 682, type: !64, align: 1)
!2167 = distinct !DILexicalBlock(scope: !2164, file: !2, line: 682, column: 4)
!2168 = !DILocation(line: 682, column: 9, scope: !2167, inlinedAt: !2087)
!2169 = !DILocation(line: 682, column: 14, scope: !2167, inlinedAt: !2087)
!2170 = !DILocation(line: 682, column: 21, scope: !2167, inlinedAt: !2087)
!2171 = !DILocation(line: 683, column: 8, scope: !2167, inlinedAt: !2087)
!2172 = !DILocation(line: 683, column: 27, scope: !2167, inlinedAt: !2087)
!2173 = !DILocation(line: 683, column: 51, scope: !2167, inlinedAt: !2087)
!2174 = !DILocation(line: 683, column: 45, scope: !2167, inlinedAt: !2087)
!2175 = !DILocation(line: 684, column: 8, scope: !2167, inlinedAt: !2087)
!2176 = !DILocation(line: 684, column: 33, scope: !2167, inlinedAt: !2087)
!2177 = !DILocation(line: 684, column: 27, scope: !2167, inlinedAt: !2087)
!2178 = !DILocation(line: 685, column: 8, scope: !2167, inlinedAt: !2087)
!2179 = !DILocation(line: 685, column: 25, scope: !2167, inlinedAt: !2087)
!2180 = !DILocation(line: 686, column: 8, scope: !2167, inlinedAt: !2087)
!2181 = !DILocation(line: 686, column: 25, scope: !2167, inlinedAt: !2087)
!2182 = !DILocation(line: 687, column: 18, scope: !2167, inlinedAt: !2087)
!2183 = !DILocation(line: 687, column: 12, scope: !2167, inlinedAt: !2087)
!2184 = !DILocation(line: 689, column: 7, scope: !2164, inlinedAt: !2087)
!2185 = !DILocation(line: 689, column: 12, scope: !2164, inlinedAt: !2087)
!2186 = !DILocation(line: 689, column: 30, scope: !2164, inlinedAt: !2087)
!2187 = !DILocation(line: 691, column: 8, scope: !2188, inlinedAt: !2087)
!2188 = distinct !DILexicalBlock(scope: !2164, file: !2, line: 691, column: 4)
!2189 = !DILocalVariable(name: "new_value", scope: !2190, file: !2, line: 693, type: !776, align: 2)
!2190 = distinct !DILexicalBlock(scope: !2188, file: !2, line: 692, column: 4)
!2191 = !DILocation(line: 693, column: 11, scope: !2190, inlinedAt: !2087)
!2192 = !DILocation(line: 693, column: 23, scope: !2190, inlinedAt: !2087)
!2193 = !DILocation(line: 693, column: 31, scope: !2190, inlinedAt: !2087)
!2194 = !DILocation(line: 693, column: 43, scope: !2190, inlinedAt: !2087)
!2195 = !DILocation(line: 694, column: 9, scope: !2190, inlinedAt: !2087)
!2196 = !DILocation(line: 694, column: 21, scope: !2190, inlinedAt: !2087)
!2197 = !DILocation(line: 694, column: 35, scope: !2190, inlinedAt: !2087)
!2198 = !DILocation(line: 695, column: 12, scope: !2190, inlinedAt: !2087)
!2199 = !DILocalVariable(name: "new_value", scope: !2188, file: !2, line: 697, type: !776, align: 2)
!2200 = !DILocation(line: 697, column: 10, scope: !2188, inlinedAt: !2087)
!2201 = !DILocation(line: 697, column: 22, scope: !2188, inlinedAt: !2087)
!2202 = !DILocation(line: 697, column: 30, scope: !2188, inlinedAt: !2087)
!2203 = !DILocation(line: 697, column: 42, scope: !2188, inlinedAt: !2087)
!2204 = !DILocation(line: 698, column: 8, scope: !2188, inlinedAt: !2087)
!2205 = !DILocation(line: 698, column: 20, scope: !2188, inlinedAt: !2087)
!2206 = !DILocation(line: 698, column: 34, scope: !2188, inlinedAt: !2087)
!2207 = !DILocation(line: 699, column: 11, scope: !2188, inlinedAt: !2087)
!2208 = !DILocation(line: 702, column: 9, scope: !2086, inlinedAt: !2087)
!2209 = distinct !DISubprogram(name: "to_uchar", linkageName: "std.core.String.to_uchar", scope: !2, file: !2, line: 715, type: !2210, scopeLine: 715, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2210 = !DISubroutineType(types: !2211)
!2211 = !{!332, !63, !59, !18}
!2212 = !DILocalVariable(name: "s", arg: 1, scope: !2209, file: !2, line: 715, type: !59)
!2213 = !DILocation(line: 715, column: 26, scope: !2209)
!2214 = !DILocalVariable(name: "base", arg: 2, scope: !2209, file: !2, line: 715, type: !18)
!2215 = !DILocation(line: 715, column: 33, scope: !2209)
!2216 = !DILocation(line: 632, column: 12, scope: !2217, inlinedAt: !2219)
!2217 = distinct !DILexicalBlock(scope: !2218, file: !2, line: 635, column: 1)
!2218 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 634, scopeLine: 634, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2219 = !DILocation(line: 715, column: 47, scope: !2209)
!2220 = !DILocation(line: 632, column: 26, scope: !2217, inlinedAt: !2219)
!2221 = !DILocation(line: 632, column: 39, scope: !2217, inlinedAt: !2219)
!2222 = !DILocalVariable(name: "len", scope: !2218, file: !2, line: 636, type: !66, align: 8)
!2223 = !DILocation(line: 636, column: 6, scope: !2218, inlinedAt: !2219)
!2224 = !DILocation(line: 636, column: 12, scope: !2218, inlinedAt: !2219)
!2225 = !DILocalVariable(name: "index", scope: !2218, file: !2, line: 637, type: !66, align: 8)
!2226 = !DILocation(line: 637, column: 6, scope: !2218, inlinedAt: !2219)
!2227 = !DILocation(line: 637, column: 14, scope: !2218, inlinedAt: !2219)
!2228 = !DILocalVariable(name: "ptr", scope: !2218, file: !2, line: 638, type: !63, align: 8)
!2229 = !DILocation(line: 638, column: 8, scope: !2218, inlinedAt: !2219)
!2230 = !DILocation(line: 638, column: 14, scope: !2218, inlinedAt: !2219)
!2231 = !DILocation(line: 639, column: 2, scope: !2218, inlinedAt: !2219)
!2232 = !DILocation(line: 639, column: 9, scope: !2233, inlinedAt: !2219)
!2233 = distinct !DILexicalBlock(scope: !2218, file: !2, line: 639, column: 2)
!2234 = !DILocation(line: 639, column: 17, scope: !2233, inlinedAt: !2219)
!2235 = !DILocation(line: 639, column: 42, scope: !2233, inlinedAt: !2219)
!2236 = !DILocation(line: 639, column: 46, scope: !2233, inlinedAt: !2219)
!2237 = !DILocation(line: 16, column: 29, scope: !2238, inlinedAt: !2239)
!2238 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1035, file: !1035, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2239 = !DILocation(line: 639, column: 31, scope: !2233, inlinedAt: !2219)
!2240 = !DILocation(line: 16, column: 42, scope: !2238, inlinedAt: !2239)
!2241 = !DILocation(line: 639, column: 55, scope: !2233, inlinedAt: !2219)
!2242 = !DILocation(line: 640, column: 6, scope: !2218, inlinedAt: !2219)
!2243 = !DILocation(line: 640, column: 13, scope: !2218, inlinedAt: !2219)
!2244 = !DILocation(line: 640, column: 27, scope: !2218, inlinedAt: !2219)
!2245 = !DILocalVariable(name: "is_negative", scope: !2218, file: !2, line: 641, type: !131, align: 1)
!2246 = !DILocation(line: 641, column: 7, scope: !2218, inlinedAt: !2219)
!2247 = !DILocation(line: 642, column: 10, scope: !2248, inlinedAt: !2219)
!2248 = distinct !DILexicalBlock(scope: !2218, file: !2, line: 642, column: 2)
!2249 = !DILocation(line: 642, column: 17, scope: !2248, inlinedAt: !2219)
!2250 = !DILocation(line: 645, column: 8, scope: !2251, inlinedAt: !2219)
!2251 = distinct !DILexicalBlock(scope: !2248, file: !2, line: 645, column: 4)
!2252 = !DILocation(line: 645, column: 31, scope: !2251, inlinedAt: !2219)
!2253 = !DILocation(line: 649, column: 4, scope: !2254, inlinedAt: !2219)
!2254 = distinct !DILexicalBlock(scope: !2248, file: !2, line: 649, column: 4)
!2255 = !DILocation(line: 651, column: 4, scope: !2256, inlinedAt: !2219)
!2256 = distinct !DILexicalBlock(scope: !2248, file: !2, line: 651, column: 4)
!2257 = !DILocation(line: 653, column: 6, scope: !2218, inlinedAt: !2219)
!2258 = !DILocation(line: 653, column: 13, scope: !2218, inlinedAt: !2219)
!2259 = !DILocation(line: 653, column: 27, scope: !2218, inlinedAt: !2219)
!2260 = !DILocalVariable(name: "base_used", scope: !2218, file: !2, line: 654, type: !64, align: 1)
!2261 = !DILocation(line: 654, column: 8, scope: !2218, inlinedAt: !2219)
!2262 = !DILocation(line: 654, column: 21, scope: !2218, inlinedAt: !2219)
!2263 = !DILocation(line: 655, column: 6, scope: !2218, inlinedAt: !2219)
!2264 = !DILocation(line: 655, column: 13, scope: !2218, inlinedAt: !2219)
!2265 = !DILocation(line: 655, column: 30, scope: !2218, inlinedAt: !2219)
!2266 = !DILocation(line: 657, column: 3, scope: !2267, inlinedAt: !2219)
!2267 = distinct !DILexicalBlock(scope: !2218, file: !2, line: 656, column: 2)
!2268 = !DILocation(line: 658, column: 7, scope: !2267, inlinedAt: !2219)
!2269 = !DILocation(line: 658, column: 16, scope: !2267, inlinedAt: !2219)
!2270 = !DILocation(line: 658, column: 29, scope: !2267, inlinedAt: !2219)
!2271 = !DILocation(line: 659, column: 11, scope: !2272, inlinedAt: !2219)
!2272 = distinct !DILexicalBlock(scope: !2267, file: !2, line: 659, column: 3)
!2273 = !DILocation(line: 659, column: 18, scope: !2272, inlinedAt: !2219)
!2274 = !DILocation(line: 663, column: 17, scope: !2275, inlinedAt: !2219)
!2275 = distinct !DILexicalBlock(scope: !2272, file: !2, line: 663, column: 5)
!2276 = !DILocation(line: 664, column: 5, scope: !2275, inlinedAt: !2219)
!2277 = !DILocation(line: 667, column: 17, scope: !2278, inlinedAt: !2219)
!2278 = distinct !DILexicalBlock(scope: !2272, file: !2, line: 667, column: 5)
!2279 = !DILocation(line: 668, column: 5, scope: !2278, inlinedAt: !2219)
!2280 = !DILocation(line: 671, column: 17, scope: !2281, inlinedAt: !2219)
!2281 = distinct !DILexicalBlock(scope: !2272, file: !2, line: 671, column: 5)
!2282 = !DILocation(line: 672, column: 5, scope: !2281, inlinedAt: !2219)
!2283 = !DILocation(line: 674, column: 5, scope: !2284, inlinedAt: !2219)
!2284 = distinct !DILexicalBlock(scope: !2272, file: !2, line: 674, column: 5)
!2285 = !DILocation(line: 676, column: 7, scope: !2267, inlinedAt: !2219)
!2286 = !DILocation(line: 676, column: 14, scope: !2267, inlinedAt: !2219)
!2287 = !DILocation(line: 676, column: 28, scope: !2267, inlinedAt: !2219)
!2288 = !DILocalVariable(name: "value", scope: !2218, file: !2, line: 678, type: !64, align: 1)
!2289 = !DILocation(line: 678, column: 8, scope: !2218, inlinedAt: !2219)
!2290 = !DILocation(line: 678, column: 16, scope: !2218, inlinedAt: !2219)
!2291 = !DILocation(line: 679, column: 2, scope: !2218, inlinedAt: !2219)
!2292 = !DILocation(line: 679, column: 9, scope: !2293, inlinedAt: !2219)
!2293 = distinct !DILexicalBlock(scope: !2218, file: !2, line: 679, column: 2)
!2294 = !DILocation(line: 679, column: 18, scope: !2293, inlinedAt: !2219)
!2295 = !DILocalVariable(name: "c", scope: !2296, file: !2, line: 681, type: !64, align: 1)
!2296 = distinct !DILexicalBlock(scope: !2293, file: !2, line: 680, column: 2)
!2297 = !DILocation(line: 681, column: 8, scope: !2296, inlinedAt: !2219)
!2298 = !DILocalVariable(name: "ch", scope: !2299, file: !2, line: 682, type: !64, align: 1)
!2299 = distinct !DILexicalBlock(scope: !2296, file: !2, line: 682, column: 4)
!2300 = !DILocation(line: 682, column: 9, scope: !2299, inlinedAt: !2219)
!2301 = !DILocation(line: 682, column: 14, scope: !2299, inlinedAt: !2219)
!2302 = !DILocation(line: 682, column: 21, scope: !2299, inlinedAt: !2219)
!2303 = !DILocation(line: 683, column: 8, scope: !2299, inlinedAt: !2219)
!2304 = !DILocation(line: 683, column: 27, scope: !2299, inlinedAt: !2219)
!2305 = !DILocation(line: 683, column: 51, scope: !2299, inlinedAt: !2219)
!2306 = !DILocation(line: 683, column: 45, scope: !2299, inlinedAt: !2219)
!2307 = !DILocation(line: 684, column: 8, scope: !2299, inlinedAt: !2219)
!2308 = !DILocation(line: 684, column: 33, scope: !2299, inlinedAt: !2219)
!2309 = !DILocation(line: 684, column: 27, scope: !2299, inlinedAt: !2219)
!2310 = !DILocation(line: 685, column: 8, scope: !2299, inlinedAt: !2219)
!2311 = !DILocation(line: 685, column: 25, scope: !2299, inlinedAt: !2219)
!2312 = !DILocation(line: 686, column: 8, scope: !2299, inlinedAt: !2219)
!2313 = !DILocation(line: 686, column: 25, scope: !2299, inlinedAt: !2219)
!2314 = !DILocation(line: 687, column: 18, scope: !2299, inlinedAt: !2219)
!2315 = !DILocation(line: 687, column: 12, scope: !2299, inlinedAt: !2219)
!2316 = !DILocation(line: 689, column: 7, scope: !2296, inlinedAt: !2219)
!2317 = !DILocation(line: 689, column: 12, scope: !2296, inlinedAt: !2219)
!2318 = !DILocation(line: 689, column: 30, scope: !2296, inlinedAt: !2219)
!2319 = !DILocation(line: 691, column: 8, scope: !2320, inlinedAt: !2219)
!2320 = distinct !DILexicalBlock(scope: !2296, file: !2, line: 691, column: 4)
!2321 = !DILocalVariable(name: "new_value", scope: !2322, file: !2, line: 693, type: !64, align: 1)
!2322 = distinct !DILexicalBlock(scope: !2320, file: !2, line: 692, column: 4)
!2323 = !DILocation(line: 693, column: 11, scope: !2322, inlinedAt: !2219)
!2324 = !DILocation(line: 693, column: 23, scope: !2322, inlinedAt: !2219)
!2325 = !DILocation(line: 693, column: 31, scope: !2322, inlinedAt: !2219)
!2326 = !DILocation(line: 693, column: 43, scope: !2322, inlinedAt: !2219)
!2327 = !DILocation(line: 694, column: 9, scope: !2322, inlinedAt: !2219)
!2328 = !DILocation(line: 694, column: 21, scope: !2322, inlinedAt: !2219)
!2329 = !DILocation(line: 694, column: 35, scope: !2322, inlinedAt: !2219)
!2330 = !DILocation(line: 695, column: 12, scope: !2322, inlinedAt: !2219)
!2331 = !DILocalVariable(name: "new_value", scope: !2320, file: !2, line: 697, type: !64, align: 1)
!2332 = !DILocation(line: 697, column: 10, scope: !2320, inlinedAt: !2219)
!2333 = !DILocation(line: 697, column: 22, scope: !2320, inlinedAt: !2219)
!2334 = !DILocation(line: 697, column: 30, scope: !2320, inlinedAt: !2219)
!2335 = !DILocation(line: 697, column: 42, scope: !2320, inlinedAt: !2219)
!2336 = !DILocation(line: 698, column: 8, scope: !2320, inlinedAt: !2219)
!2337 = !DILocation(line: 698, column: 20, scope: !2320, inlinedAt: !2219)
!2338 = !DILocation(line: 698, column: 34, scope: !2320, inlinedAt: !2219)
!2339 = !DILocation(line: 699, column: 11, scope: !2320, inlinedAt: !2219)
!2340 = !DILocation(line: 702, column: 9, scope: !2218, inlinedAt: !2219)
!2341 = distinct !DISubprogram(name: "to_double", linkageName: "std.core.String.to_double", scope: !2, file: !2, line: 717, type: !2342, scopeLine: 717, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2342 = !DISubroutineType(types: !2343)
!2343 = !{!332, !2344, !59}
!2344 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !2345, size: 64, align: 64, dwarfAddressSpace: 0)
!2345 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2346 = !DILocalVariable(name: "s", arg: 1, scope: !2341, file: !2, line: 717, type: !59)
!2347 = !DILocation(line: 717, column: 29, scope: !2341)
!2348 = !DILocalVariable(name: "sign", scope: !2349, file: !2, line: 454, type: !18, align: 4)
!2349 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2350 = !DILocation(line: 454, column: 6, scope: !2349, inlinedAt: !2351)
!2351 = !DILocation(line: 717, column: 35, scope: !2341)
!2352 = !DILocation(line: 454, column: 13, scope: !2349, inlinedAt: !2351)
!2353 = !DILocation(line: 468, column: 2, scope: !2349, inlinedAt: !2351)
!2354 = !DILocation(line: 468, column: 9, scope: !2355, inlinedAt: !2351)
!2355 = distinct !DILexicalBlock(scope: !2349, file: !41, line: 468, column: 2)
!2356 = !DILocation(line: 468, column: 22, scope: !2355, inlinedAt: !2351)
!2357 = !DILocation(line: 468, column: 28, scope: !2355, inlinedAt: !2351)
!2358 = !DILocation(line: 468, column: 47, scope: !2355, inlinedAt: !2351)
!2359 = !DILocation(line: 468, column: 53, scope: !2355, inlinedAt: !2351)
!2360 = !DILocation(line: 469, column: 7, scope: !2349, inlinedAt: !2351)
!2361 = !DILocation(line: 469, column: 25, scope: !2349, inlinedAt: !2351)
!2362 = !DILocation(line: 470, column: 10, scope: !2363, inlinedAt: !2351)
!2363 = distinct !DILexicalBlock(scope: !2349, file: !41, line: 470, column: 2)
!2364 = !DILocation(line: 470, column: 16, scope: !2363, inlinedAt: !2351)
!2365 = !DILocation(line: 473, column: 11, scope: !2366, inlinedAt: !2351)
!2366 = distinct !DILexicalBlock(scope: !2363, file: !41, line: 473, column: 4)
!2367 = !DILocation(line: 474, column: 4, scope: !2366, inlinedAt: !2351)
!2368 = !DILocation(line: 476, column: 12, scope: !2369, inlinedAt: !2351)
!2369 = distinct !DILexicalBlock(scope: !2363, file: !41, line: 476, column: 4)
!2370 = !DILocation(line: 476, column: 18, scope: !2369, inlinedAt: !2351)
!2371 = !DILocation(line: 478, column: 6, scope: !2349, inlinedAt: !2351)
!2372 = !DILocation(line: 478, column: 29, scope: !2349, inlinedAt: !2351)
!2373 = !DILocation(line: 478, column: 57, scope: !2349, inlinedAt: !2351)
!2374 = !DILocation(line: 479, column: 6, scope: !2349, inlinedAt: !2351)
!2375 = !DILocation(line: 479, column: 24, scope: !2349, inlinedAt: !2351)
!2376 = !DILocation(line: 479, column: 47, scope: !2349, inlinedAt: !2351)
!2377 = !DILocation(line: 481, column: 6, scope: !2349, inlinedAt: !2351)
!2378 = !DILocation(line: 481, column: 23, scope: !2349, inlinedAt: !2351)
!2379 = !DILocation(line: 481, column: 29, scope: !2349, inlinedAt: !2351)
!2380 = !DILocation(line: 481, column: 43, scope: !2349, inlinedAt: !2351)
!2381 = !DILocation(line: 481, column: 49, scope: !2349, inlinedAt: !2351)
!2382 = !DILocation(line: 483, column: 34, scope: !2383, inlinedAt: !2351)
!2383 = distinct !DILexicalBlock(scope: !2349, file: !41, line: 482, column: 2)
!2384 = !DILocation(line: 483, column: 40, scope: !2383, inlinedAt: !2351)
!2385 = !DILocation(line: 483, column: 27, scope: !2383, inlinedAt: !2351)
!2386 = !DILocalVariable(name: "scale", scope: !2387, file: !2, line: 330, type: !2345, align: 8)
!2387 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2388 = !DILocation(line: 330, column: 9, scope: !2387, inlinedAt: !2389)
!2389 = !DILocation(line: 483, column: 11, scope: !2383, inlinedAt: !2351)
!2390 = !DILocation(line: 330, column: 17, scope: !2387, inlinedAt: !2389)
!2391 = !DILocalVariable(name: "x", scope: !2387, file: !2, line: 331, type: !3, align: 4)
!2392 = !DILocation(line: 331, column: 7, scope: !2387, inlinedAt: !2389)
!2393 = !DILocalVariable(name: "rp", scope: !2387, file: !2, line: 332, type: !333, align: 8)
!2394 = !DILocation(line: 332, column: 7, scope: !2387, inlinedAt: !2389)
!2395 = !DILocalVariable(name: "dc", scope: !2387, file: !2, line: 333, type: !333, align: 8)
!2396 = !DILocation(line: 333, column: 7, scope: !2387, inlinedAt: !2389)
!2397 = !DILocalVariable(name: "c", scope: !2387, file: !2, line: 334, type: !64, align: 1)
!2398 = !DILocation(line: 334, column: 7, scope: !2387, inlinedAt: !2389)
!2399 = !DILocalVariable(name: "got_rad", scope: !2387, file: !2, line: 335, type: !131, align: 1)
!2400 = !DILocation(line: 335, column: 7, scope: !2387, inlinedAt: !2389)
!2401 = !DILocalVariable(name: "got_digit", scope: !2387, file: !2, line: 336, type: !131, align: 1)
!2402 = !DILocation(line: 336, column: 7, scope: !2387, inlinedAt: !2389)
!2403 = !DILocalVariable(name: "got_tail", scope: !2387, file: !2, line: 337, type: !131, align: 1)
!2404 = !DILocation(line: 337, column: 7, scope: !2387, inlinedAt: !2389)
!2405 = !DILocalVariable(name: "len", scope: !2387, file: !2, line: 338, type: !66, align: 8)
!2406 = !DILocation(line: 338, column: 6, scope: !2387, inlinedAt: !2389)
!2407 = !DILocation(line: 338, column: 12, scope: !2387, inlinedAt: !2389)
!2408 = !DILocalVariable(name: "last_char", scope: !2387, file: !2, line: 339, type: !66, align: 8)
!2409 = !DILocation(line: 339, column: 6, scope: !2387, inlinedAt: !2389)
!2410 = !DILocation(line: 339, column: 18, scope: !2387, inlinedAt: !2389)
!2411 = !DILocalVariable(name: "index", scope: !2387, file: !2, line: 340, type: !66, align: 8)
!2412 = !DILocation(line: 340, column: 6, scope: !2387, inlinedAt: !2389)
!2413 = !DILocalVariable(name: "y", scope: !2387, file: !2, line: 341, type: !2345, align: 8)
!2414 = !DILocation(line: 341, column: 9, scope: !2387, inlinedAt: !2389)
!2415 = !DILocation(line: 344, column: 2, scope: !2387, inlinedAt: !2389)
!2416 = !DILocation(line: 344, column: 14, scope: !2417, inlinedAt: !2389)
!2417 = distinct !DILexicalBlock(scope: !2387, file: !41, line: 344, column: 2)
!2418 = !DILocation(line: 344, column: 20, scope: !2417, inlinedAt: !2389)
!2419 = !DILocation(line: 344, column: 10, scope: !2417, inlinedAt: !2389)
!2420 = !DILocation(line: 346, column: 7, scope: !2421, inlinedAt: !2389)
!2421 = distinct !DILexicalBlock(scope: !2417, file: !41, line: 345, column: 2)
!2422 = !DILocation(line: 346, column: 16, scope: !2421, inlinedAt: !2389)
!2423 = !DILocation(line: 346, column: 34, scope: !2421, inlinedAt: !2389)
!2424 = !DILocation(line: 347, column: 3, scope: !2421, inlinedAt: !2389)
!2425 = !DILocation(line: 349, column: 6, scope: !2387, inlinedAt: !2389)
!2426 = !DILocation(line: 351, column: 13, scope: !2427, inlinedAt: !2389)
!2427 = distinct !DILexicalBlock(scope: !2387, file: !41, line: 350, column: 2)
!2428 = !DILocation(line: 352, column: 7, scope: !2427, inlinedAt: !2389)
!2429 = !DILocation(line: 352, column: 16, scope: !2427, inlinedAt: !2389)
!2430 = !DILocation(line: 354, column: 9, scope: !2431, inlinedAt: !2389)
!2431 = distinct !DILexicalBlock(scope: !2427, file: !41, line: 353, column: 3)
!2432 = !DILocation(line: 354, column: 27, scope: !2431, inlinedAt: !2389)
!2433 = !DILocation(line: 355, column: 11, scope: !2431, inlinedAt: !2389)
!2434 = !DILocation(line: 357, column: 7, scope: !2427, inlinedAt: !2389)
!2435 = !DILocation(line: 357, column: 16, scope: !2427, inlinedAt: !2389)
!2436 = !DILocation(line: 357, column: 34, scope: !2427, inlinedAt: !2389)
!2437 = !DILocation(line: 357, column: 42, scope: !2427, inlinedAt: !2389)
!2438 = !DILocation(line: 357, column: 40, scope: !2427, inlinedAt: !2389)
!2439 = !DILocation(line: 357, column: 30, scope: !2427, inlinedAt: !2389)
!2440 = !DILocation(line: 359, column: 4, scope: !2441, inlinedAt: !2389)
!2441 = distinct !DILexicalBlock(scope: !2427, file: !41, line: 358, column: 3)
!2442 = !DILocation(line: 360, column: 16, scope: !2441, inlinedAt: !2389)
!2443 = !DILocation(line: 361, column: 4, scope: !2441, inlinedAt: !2389)
!2444 = !DILocation(line: 361, column: 11, scope: !2445, inlinedAt: !2389)
!2445 = distinct !DILexicalBlock(scope: !2441, file: !41, line: 361, column: 4)
!2446 = !DILocation(line: 361, column: 24, scope: !2445, inlinedAt: !2389)
!2447 = !DILocation(line: 361, column: 38, scope: !2445, inlinedAt: !2389)
!2448 = !DILocation(line: 361, column: 46, scope: !2445, inlinedAt: !2389)
!2449 = !DILocation(line: 361, column: 44, scope: !2445, inlinedAt: !2389)
!2450 = !DILocation(line: 361, column: 34, scope: !2445, inlinedAt: !2389)
!2451 = !DILocation(line: 363, column: 5, scope: !2452, inlinedAt: !2389)
!2452 = distinct !DILexicalBlock(scope: !2445, file: !41, line: 362, column: 4)
!2453 = !DILocation(line: 368, column: 2, scope: !2387, inlinedAt: !2389)
!2454 = !DILocation(line: 368, column: 10, scope: !2455, inlinedAt: !2389)
!2455 = distinct !DILexicalBlock(scope: !2387, file: !41, line: 368, column: 2)
!2456 = !DILocation(line: 368, column: 30, scope: !2455, inlinedAt: !2389)
!2457 = !DILocation(line: 368, column: 53, scope: !2455, inlinedAt: !2389)
!2458 = !DILocation(line: 370, column: 7, scope: !2459, inlinedAt: !2389)
!2459 = distinct !DILexicalBlock(scope: !2455, file: !41, line: 369, column: 2)
!2460 = !DILocation(line: 372, column: 8, scope: !2461, inlinedAt: !2389)
!2461 = distinct !DILexicalBlock(scope: !2459, file: !41, line: 371, column: 3)
!2462 = !DILocation(line: 372, column: 24, scope: !2461, inlinedAt: !2389)
!2463 = !DILocation(line: 373, column: 14, scope: !2461, inlinedAt: !2389)
!2464 = !DILocation(line: 374, column: 9, scope: !2461, inlinedAt: !2389)
!2465 = !DILocation(line: 378, column: 16, scope: !2466, inlinedAt: !2389)
!2466 = distinct !DILexicalBlock(scope: !2459, file: !41, line: 377, column: 3)
!2467 = !DILocalVariable(name: "d", scope: !2466, file: !2, line: 379, type: !18, align: 4)
!2468 = !DILocation(line: 379, column: 8, scope: !2466, inlinedAt: !2389)
!2469 = !DILocation(line: 380, column: 9, scope: !2470, inlinedAt: !2389)
!2470 = distinct !DILexicalBlock(scope: !2466, file: !41, line: 380, column: 5)
!2471 = !DILocation(line: 380, column: 26, scope: !2470, inlinedAt: !2389)
!2472 = !DILocation(line: 381, column: 12, scope: !2470, inlinedAt: !2389)
!2473 = !DILocation(line: 385, column: 10, scope: !2474, inlinedAt: !2389)
!2474 = distinct !DILexicalBlock(scope: !2466, file: !41, line: 383, column: 4)
!2475 = !DILocation(line: 386, column: 10, scope: !2476, inlinedAt: !2389)
!2476 = distinct !DILexicalBlock(scope: !2474, file: !41, line: 386, column: 6)
!2477 = !DILocation(line: 386, column: 19, scope: !2476, inlinedAt: !2389)
!2478 = !DILocation(line: 387, column: 10, scope: !2474, inlinedAt: !2389)
!2479 = !DILocation(line: 388, column: 6, scope: !2480, inlinedAt: !2389)
!2480 = distinct !DILexicalBlock(scope: !2474, file: !41, line: 388, column: 6)
!2481 = !DILocation(line: 388, column: 11, scope: !2480, inlinedAt: !2389)
!2482 = !DILocation(line: 388, column: 16, scope: !2480, inlinedAt: !2389)
!2483 = !DILocation(line: 389, column: 17, scope: !2480, inlinedAt: !2389)
!2484 = !DILocation(line: 390, column: 10, scope: !2474, inlinedAt: !2389)
!2485 = !DILocation(line: 390, column: 16, scope: !2474, inlinedAt: !2389)
!2486 = !DILocation(line: 391, column: 6, scope: !2487, inlinedAt: !2389)
!2487 = distinct !DILexicalBlock(scope: !2474, file: !41, line: 391, column: 6)
!2488 = !DILocation(line: 391, column: 17, scope: !2487, inlinedAt: !2389)
!2489 = !DILocation(line: 391, column: 11, scope: !2487, inlinedAt: !2389)
!2490 = !DILocation(line: 392, column: 17, scope: !2487, inlinedAt: !2389)
!2491 = !DILocation(line: 394, column: 4, scope: !2466, inlinedAt: !2389)
!2492 = !DILocation(line: 396, column: 7, scope: !2459, inlinedAt: !2389)
!2493 = !DILocation(line: 396, column: 16, scope: !2459, inlinedAt: !2389)
!2494 = !DILocation(line: 396, column: 27, scope: !2459, inlinedAt: !2389)
!2495 = !DILocation(line: 397, column: 7, scope: !2459, inlinedAt: !2389)
!2496 = !DILocation(line: 397, column: 15, scope: !2459, inlinedAt: !2389)
!2497 = !DILocation(line: 397, column: 13, scope: !2459, inlinedAt: !2389)
!2498 = !DILocation(line: 399, column: 7, scope: !2387, inlinedAt: !2389)
!2499 = !DILocation(line: 399, column: 25, scope: !2387, inlinedAt: !2389)
!2500 = !DILocation(line: 400, column: 7, scope: !2387, inlinedAt: !2389)
!2501 = !DILocation(line: 400, column: 21, scope: !2387, inlinedAt: !2389)
!2502 = !DILocation(line: 401, column: 2, scope: !2387, inlinedAt: !2389)
!2503 = !DILocation(line: 401, column: 9, scope: !2504, inlinedAt: !2389)
!2504 = distinct !DILexicalBlock(scope: !2387, file: !41, line: 401, column: 2)
!2505 = !DILocation(line: 401, column: 23, scope: !2504, inlinedAt: !2389)
!2506 = !DILocation(line: 401, column: 17, scope: !2504, inlinedAt: !2389)
!2507 = !DILocalVariable(name: "e2", scope: !2387, file: !2, line: 403, type: !333, align: 8)
!2508 = !DILocation(line: 403, column: 7, scope: !2387, inlinedAt: !2389)
!2509 = !DILocation(line: 404, column: 7, scope: !2387, inlinedAt: !2389)
!2510 = !DILocalVariable(name: "e2val", scope: !2511, file: !2, line: 406, type: !333, align: 8)
!2511 = distinct !DILexicalBlock(scope: !2387, file: !41, line: 405, column: 2)
!2512 = !DILocation(line: 406, column: 8, scope: !2511, inlinedAt: !2389)
!2513 = !DILocation(line: 406, column: 39, scope: !2511, inlinedAt: !2389)
!2514 = !DILocation(line: 406, column: 45, scope: !2511, inlinedAt: !2389)
!2515 = !DILocation(line: 406, column: 32, scope: !2511, inlinedAt: !2389)
!2516 = !DILocation(line: 406, column: 16, scope: !2511, inlinedAt: !2389)
!2517 = !DILocation(line: 406, column: 63, scope: !2511, inlinedAt: !2389)
!2518 = !DILocation(line: 407, column: 8, scope: !2511, inlinedAt: !2389)
!2519 = !DILocation(line: 409, column: 2, scope: !2387, inlinedAt: !2389)
!2520 = !DILocation(line: 409, column: 12, scope: !2387, inlinedAt: !2389)
!2521 = !DILocation(line: 409, column: 8, scope: !2387, inlinedAt: !2389)
!2522 = !DILocation(line: 410, column: 7, scope: !2387, inlinedAt: !2389)
!2523 = !DILocation(line: 410, column: 17, scope: !2387, inlinedAt: !2389)
!2524 = !DILocation(line: 411, column: 6, scope: !2387, inlinedAt: !2389)
!2525 = !DILocation(line: 411, column: 26, scope: !2387, inlinedAt: !2389)
!2526 = !DILocation(line: 412, column: 6, scope: !2387, inlinedAt: !2389)
!2527 = !DILocation(line: 412, column: 53, scope: !2387, inlinedAt: !2389)
!2528 = !DILocation(line: 414, column: 2, scope: !2387, inlinedAt: !2389)
!2529 = !DILocation(line: 414, column: 9, scope: !2530, inlinedAt: !2389)
!2530 = distinct !DILexicalBlock(scope: !2387, file: !41, line: 414, column: 2)
!2531 = !DILocation(line: 416, column: 7, scope: !2532, inlinedAt: !2389)
!2532 = distinct !DILexicalBlock(scope: !2530, file: !41, line: 415, column: 2)
!2533 = !DILocation(line: 418, column: 4, scope: !2534, inlinedAt: !2389)
!2534 = distinct !DILexicalBlock(scope: !2532, file: !41, line: 417, column: 3)
!2535 = !DILocation(line: 418, column: 9, scope: !2534, inlinedAt: !2389)
!2536 = !DILocation(line: 419, column: 4, scope: !2534, inlinedAt: !2389)
!2537 = !DILocation(line: 419, column: 9, scope: !2534, inlinedAt: !2389)
!2538 = !DILocation(line: 423, column: 4, scope: !2539, inlinedAt: !2389)
!2539 = distinct !DILexicalBlock(scope: !2532, file: !41, line: 422, column: 3)
!2540 = !DILocation(line: 423, column: 9, scope: !2539, inlinedAt: !2389)
!2541 = !DILocation(line: 424, column: 4, scope: !2539, inlinedAt: !2389)
!2542 = !DILocation(line: 424, column: 9, scope: !2539, inlinedAt: !2389)
!2543 = !DILocation(line: 426, column: 3, scope: !2532, inlinedAt: !2389)
!2544 = !DILocalVariable(name: "bits", scope: !2387, file: !2, line: 428, type: !18, align: 4)
!2545 = !DILocation(line: 428, column: 6, scope: !2387, inlinedAt: !2389)
!2546 = !DILocation(line: 428, column: 13, scope: !2387, inlinedAt: !2389)
!2547 = !DILocation(line: 429, column: 19, scope: !2387, inlinedAt: !2389)
!2548 = !DILocation(line: 429, column: 14, scope: !2387, inlinedAt: !2389)
!2549 = !DILocation(line: 429, column: 6, scope: !2387, inlinedAt: !2389)
!2550 = !DILocation(line: 431, column: 21, scope: !2551, inlinedAt: !2389)
!2551 = distinct !DILexicalBlock(scope: !2387, file: !41, line: 430, column: 2)
!2552 = !DILocation(line: 431, column: 16, scope: !2551, inlinedAt: !2389)
!2553 = !DILocation(line: 431, column: 11, scope: !2551, inlinedAt: !2389)
!2554 = !DILocation(line: 432, column: 7, scope: !2551, inlinedAt: !2389)
!2555 = !DILocation(line: 432, column: 24, scope: !2551, inlinedAt: !2389)
!2556 = !DILocalVariable(name: "bias", scope: !2387, file: !2, line: 434, type: !2345, align: 8)
!2557 = !DILocation(line: 434, column: 9, scope: !2387, inlinedAt: !2389)
!2558 = !DILocation(line: 435, column: 6, scope: !2387, inlinedAt: !2389)
!2559 = !DILocation(line: 437, column: 70, scope: !2560, inlinedAt: !2389)
!2560 = distinct !DILexicalBlock(scope: !2387, file: !41, line: 436, column: 2)
!2561 = !DILocation(line: 437, column: 41, scope: !2560, inlinedAt: !2389)
!2562 = !DILocation(line: 1024, column: 52, scope: !2563, inlinedAt: !2565)
!2563 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2564 = !DIFile(filename: "math.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math")
!2565 = !DILocation(line: 437, column: 31, scope: !2560, inlinedAt: !2389)
!2566 = !DILocation(line: 1024, column: 41, scope: !2563, inlinedAt: !2565)
!2567 = !DILocation(line: 437, column: 82, scope: !2560, inlinedAt: !2389)
!2568 = !DILocation(line: 41, column: 10, scope: !2569, inlinedAt: !2571)
!2569 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2570, file: !2570, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2570 = !DIFile(filename: "values.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!2571 = !DILocation(line: 288, column: 48, scope: !2572, inlinedAt: !2573)
!2572 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2564, file: !2564, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2573 = !DILocation(line: 437, column: 16, scope: !2560, inlinedAt: !2389)
!2574 = !DILocation(line: 288, column: 77, scope: !2572, inlinedAt: !2573)
!2575 = !DILocation(line: 440, column: 6, scope: !2387, inlinedAt: !2389)
!2576 = !DILocation(line: 440, column: 19, scope: !2387, inlinedAt: !2389)
!2577 = !DILocation(line: 440, column: 26, scope: !2387, inlinedAt: !2389)
!2578 = !DILocation(line: 442, column: 3, scope: !2579, inlinedAt: !2389)
!2579 = distinct !DILexicalBlock(scope: !2387, file: !41, line: 441, column: 2)
!2580 = !DILocation(line: 443, column: 7, scope: !2579, inlinedAt: !2389)
!2581 = !DILocation(line: 445, column: 6, scope: !2387, inlinedAt: !2389)
!2582 = !DILocation(line: 445, column: 13, scope: !2387, inlinedAt: !2389)
!2583 = !DILocation(line: 445, column: 21, scope: !2387, inlinedAt: !2389)
!2584 = !DILocation(line: 445, column: 32, scope: !2387, inlinedAt: !2389)
!2585 = !DILocation(line: 445, column: 39, scope: !2387, inlinedAt: !2389)
!2586 = !DILocation(line: 446, column: 2, scope: !2387, inlinedAt: !2389)
!2587 = !DILocation(line: 446, column: 7, scope: !2387, inlinedAt: !2389)
!2588 = !DILocation(line: 447, column: 7, scope: !2387, inlinedAt: !2389)
!2589 = !DILocation(line: 447, column: 17, scope: !2387, inlinedAt: !2389)
!2590 = !DILocation(line: 449, column: 26, scope: !2387, inlinedAt: !2389)
!2591 = !DILocation(line: 1024, column: 52, scope: !2592, inlinedAt: !2593)
!2592 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2593 = !DILocation(line: 449, column: 15, scope: !2387, inlinedAt: !2389)
!2594 = !DILocation(line: 1024, column: 41, scope: !2592, inlinedAt: !2593)
!2595 = !DILocation(line: 35, column: 11, scope: !2596, inlinedAt: !2598)
!2596 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 38, column: 1)
!2597 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2598 = !DILocation(line: 485, column: 10, scope: !2349, inlinedAt: !2351)
!2599 = !DILocalVariable(name: "x", scope: !2597, file: !2, line: 39, type: !2600, align: 16)
!2600 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 4096, align: 32, elements: !2601)
!2601 = !{!2602}
!2602 = !DISubrange(count: 128, lowerBound: 0)
!2603 = !DILocation(line: 39, column: 13, scope: !2597, inlinedAt: !2598)
!2604 = !DILocalVariable(name: "emax", scope: !2597, file: !2, line: 41, type: !18, align: 4)
!2605 = !DILocation(line: 41, column: 6, scope: !2597, inlinedAt: !2598)
!2606 = !DILocation(line: 41, column: 13, scope: !2597, inlinedAt: !2598)
!2607 = !DILocalVariable(name: "index", scope: !2597, file: !2, line: 44, type: !66, align: 8)
!2608 = !DILocation(line: 44, column: 6, scope: !2597, inlinedAt: !2598)
!2609 = !DILocalVariable(name: "got_digit", scope: !2597, file: !2, line: 45, type: !131, align: 1)
!2610 = !DILocation(line: 45, column: 7, scope: !2597, inlinedAt: !2598)
!2611 = !DILocation(line: 45, column: 19, scope: !2597, inlinedAt: !2598)
!2612 = !DILocation(line: 45, column: 25, scope: !2597, inlinedAt: !2598)
!2613 = !DILocalVariable(name: "got_rad", scope: !2597, file: !2, line: 46, type: !131, align: 1)
!2614 = !DILocation(line: 46, column: 7, scope: !2597, inlinedAt: !2598)
!2615 = !DILocalVariable(name: "lrp", scope: !2597, file: !2, line: 47, type: !333, align: 8)
!2616 = !DILocation(line: 47, column: 7, scope: !2597, inlinedAt: !2598)
!2617 = !DILocalVariable(name: "dc", scope: !2597, file: !2, line: 47, type: !333, align: 8)
!2618 = !DILocation(line: 47, column: 12, scope: !2597, inlinedAt: !2598)
!2619 = !DILocalVariable(name: "k", scope: !2597, file: !2, line: 48, type: !18, align: 4)
!2620 = !DILocation(line: 48, column: 6, scope: !2597, inlinedAt: !2598)
!2621 = !DILocalVariable(name: "j", scope: !2597, file: !2, line: 48, type: !18, align: 4)
!2622 = !DILocation(line: 48, column: 9, scope: !2597, inlinedAt: !2598)
!2623 = !DILocalVariable(name: "lnz", scope: !2597, file: !2, line: 48, type: !18, align: 4)
!2624 = !DILocation(line: 48, column: 12, scope: !2597, inlinedAt: !2598)
!2625 = !DILocalVariable(name: "len", scope: !2597, file: !2, line: 49, type: !66, align: 8)
!2626 = !DILocation(line: 49, column: 6, scope: !2597, inlinedAt: !2598)
!2627 = !DILocation(line: 49, column: 12, scope: !2597, inlinedAt: !2598)
!2628 = !DILocalVariable(name: "last_char", scope: !2597, file: !2, line: 50, type: !66, align: 8)
!2629 = !DILocation(line: 50, column: 6, scope: !2597, inlinedAt: !2598)
!2630 = !DILocation(line: 50, column: 18, scope: !2597, inlinedAt: !2598)
!2631 = !DILocation(line: 52, column: 9, scope: !2597, inlinedAt: !2598)
!2632 = !DILocalVariable(name: "c", scope: !2597, file: !2, line: 54, type: !64, align: 1)
!2633 = !DILocation(line: 54, column: 7, scope: !2597, inlinedAt: !2598)
!2634 = !DILocation(line: 56, column: 2, scope: !2597, inlinedAt: !2598)
!2635 = !DILocation(line: 56, column: 14, scope: !2636, inlinedAt: !2598)
!2636 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 56, column: 2)
!2637 = !DILocation(line: 56, column: 20, scope: !2636, inlinedAt: !2598)
!2638 = !DILocation(line: 56, column: 10, scope: !2636, inlinedAt: !2598)
!2639 = !DILocation(line: 58, column: 7, scope: !2640, inlinedAt: !2598)
!2640 = distinct !DILexicalBlock(scope: !2636, file: !41, line: 57, column: 2)
!2641 = !DILocation(line: 58, column: 16, scope: !2640, inlinedAt: !2598)
!2642 = !DILocation(line: 58, column: 34, scope: !2640, inlinedAt: !2598)
!2643 = !DILocation(line: 59, column: 3, scope: !2640, inlinedAt: !2598)
!2644 = !DILocation(line: 62, column: 6, scope: !2597, inlinedAt: !2598)
!2645 = !DILocation(line: 64, column: 13, scope: !2646, inlinedAt: !2598)
!2646 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 63, column: 2)
!2647 = !DILocation(line: 65, column: 7, scope: !2646, inlinedAt: !2598)
!2648 = !DILocation(line: 65, column: 16, scope: !2646, inlinedAt: !2598)
!2649 = !DILocation(line: 67, column: 9, scope: !2650, inlinedAt: !2598)
!2650 = distinct !DILexicalBlock(scope: !2646, file: !41, line: 66, column: 3)
!2651 = !DILocation(line: 67, column: 27, scope: !2650, inlinedAt: !2598)
!2652 = !DILocation(line: 68, column: 11, scope: !2650, inlinedAt: !2598)
!2653 = !DILocation(line: 70, column: 7, scope: !2646, inlinedAt: !2598)
!2654 = !DILocation(line: 70, column: 16, scope: !2646, inlinedAt: !2598)
!2655 = !DILocation(line: 70, column: 34, scope: !2646, inlinedAt: !2598)
!2656 = !DILocation(line: 70, column: 42, scope: !2646, inlinedAt: !2598)
!2657 = !DILocation(line: 70, column: 40, scope: !2646, inlinedAt: !2598)
!2658 = !DILocation(line: 70, column: 30, scope: !2646, inlinedAt: !2598)
!2659 = !DILocation(line: 72, column: 4, scope: !2660, inlinedAt: !2598)
!2660 = distinct !DILexicalBlock(scope: !2646, file: !41, line: 71, column: 3)
!2661 = !DILocation(line: 73, column: 16, scope: !2660, inlinedAt: !2598)
!2662 = !DILocation(line: 74, column: 4, scope: !2660, inlinedAt: !2598)
!2663 = !DILocation(line: 74, column: 11, scope: !2664, inlinedAt: !2598)
!2664 = distinct !DILexicalBlock(scope: !2660, file: !41, line: 74, column: 4)
!2665 = !DILocation(line: 74, column: 24, scope: !2664, inlinedAt: !2598)
!2666 = !DILocation(line: 74, column: 38, scope: !2664, inlinedAt: !2598)
!2667 = !DILocation(line: 74, column: 46, scope: !2664, inlinedAt: !2598)
!2668 = !DILocation(line: 74, column: 44, scope: !2664, inlinedAt: !2598)
!2669 = !DILocation(line: 74, column: 34, scope: !2664, inlinedAt: !2598)
!2670 = !DILocation(line: 76, column: 5, scope: !2671, inlinedAt: !2598)
!2671 = distinct !DILexicalBlock(scope: !2664, file: !41, line: 75, column: 4)
!2672 = !DILocation(line: 81, column: 2, scope: !2597, inlinedAt: !2598)
!2673 = !DILocation(line: 81, column: 9, scope: !2674, inlinedAt: !2598)
!2674 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 81, column: 2)
!2675 = !DILocation(line: 81, column: 26, scope: !2674, inlinedAt: !2598)
!2676 = !DILocation(line: 85, column: 9, scope: !2677, inlinedAt: !2598)
!2677 = distinct !DILexicalBlock(scope: !2678, file: !41, line: 83, column: 3)
!2678 = distinct !DILexicalBlock(scope: !2674, file: !41, line: 82, column: 2)
!2679 = !DILocation(line: 86, column: 9, scope: !2680, inlinedAt: !2598)
!2680 = distinct !DILexicalBlock(scope: !2677, file: !41, line: 86, column: 5)
!2681 = !DILocation(line: 86, column: 25, scope: !2680, inlinedAt: !2598)
!2682 = !DILocation(line: 87, column: 15, scope: !2680, inlinedAt: !2598)
!2683 = !DILocation(line: 88, column: 11, scope: !2680, inlinedAt: !2598)
!2684 = !DILocation(line: 89, column: 9, scope: !2677, inlinedAt: !2598)
!2685 = !DILocation(line: 90, column: 5, scope: !2686, inlinedAt: !2598)
!2686 = distinct !DILexicalBlock(scope: !2677, file: !41, line: 90, column: 5)
!2687 = !DILocation(line: 91, column: 9, scope: !2686, inlinedAt: !2598)
!2688 = !DILocation(line: 91, column: 26, scope: !2686, inlinedAt: !2598)
!2689 = !DILocation(line: 92, column: 9, scope: !2686, inlinedAt: !2598)
!2690 = !DILocation(line: 94, column: 8, scope: !2691, inlinedAt: !2598)
!2691 = distinct !DILexicalBlock(scope: !2686, file: !41, line: 93, column: 5)
!2692 = !DILocation(line: 94, column: 15, scope: !2691, inlinedAt: !2598)
!2693 = !DILocation(line: 94, column: 13, scope: !2691, inlinedAt: !2598)
!2694 = !DILocation(line: 94, column: 25, scope: !2691, inlinedAt: !2598)
!2695 = !DILocation(line: 98, column: 8, scope: !2696, inlinedAt: !2598)
!2696 = distinct !DILexicalBlock(scope: !2686, file: !41, line: 97, column: 5)
!2697 = !DILocation(line: 98, column: 13, scope: !2696, inlinedAt: !2598)
!2698 = !DILocation(line: 100, column: 11, scope: !2686, inlinedAt: !2598)
!2699 = !DILocation(line: 100, column: 9, scope: !2686, inlinedAt: !2598)
!2700 = !DILocation(line: 102, column: 6, scope: !2701, inlinedAt: !2598)
!2701 = distinct !DILexicalBlock(scope: !2686, file: !41, line: 101, column: 5)
!2702 = !DILocation(line: 103, column: 10, scope: !2701, inlinedAt: !2598)
!2703 = !DILocation(line: 105, column: 17, scope: !2686, inlinedAt: !2598)
!2704 = !DILocation(line: 107, column: 5, scope: !2705, inlinedAt: !2598)
!2705 = distinct !DILexicalBlock(scope: !2677, file: !41, line: 107, column: 5)
!2706 = !DILocation(line: 108, column: 9, scope: !2705, inlinedAt: !2598)
!2707 = !DILocation(line: 108, column: 21, scope: !2705, inlinedAt: !2598)
!2708 = !DILocation(line: 108, column: 19, scope: !2705, inlinedAt: !2598)
!2709 = !DILocation(line: 111, column: 7, scope: !2678, inlinedAt: !2598)
!2710 = !DILocation(line: 111, column: 16, scope: !2678, inlinedAt: !2598)
!2711 = !DILocation(line: 111, column: 27, scope: !2678, inlinedAt: !2598)
!2712 = !DILocation(line: 112, column: 10, scope: !2678, inlinedAt: !2598)
!2713 = !DILocation(line: 112, column: 18, scope: !2678, inlinedAt: !2598)
!2714 = !DILocation(line: 113, column: 7, scope: !2678, inlinedAt: !2598)
!2715 = !DILocation(line: 113, column: 15, scope: !2678, inlinedAt: !2598)
!2716 = !DILocation(line: 113, column: 13, scope: !2678, inlinedAt: !2598)
!2717 = !DILocation(line: 115, column: 7, scope: !2597, inlinedAt: !2598)
!2718 = !DILocation(line: 115, column: 22, scope: !2597, inlinedAt: !2598)
!2719 = !DILocation(line: 116, column: 7, scope: !2597, inlinedAt: !2598)
!2720 = !DILocation(line: 116, column: 25, scope: !2597, inlinedAt: !2598)
!2721 = !DILocation(line: 117, column: 7, scope: !2597, inlinedAt: !2598)
!2722 = !DILocation(line: 119, column: 7, scope: !2723, inlinedAt: !2598)
!2723 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 118, column: 2)
!2724 = !DILocation(line: 119, column: 20, scope: !2723, inlinedAt: !2598)
!2725 = !DILocation(line: 119, column: 34, scope: !2723, inlinedAt: !2598)
!2726 = !DILocalVariable(name: "e10", scope: !2723, file: !2, line: 120, type: !333, align: 8)
!2727 = !DILocation(line: 120, column: 8, scope: !2723, inlinedAt: !2598)
!2728 = !DILocation(line: 120, column: 37, scope: !2723, inlinedAt: !2598)
!2729 = !DILocation(line: 120, column: 43, scope: !2723, inlinedAt: !2598)
!2730 = !DILocation(line: 120, column: 30, scope: !2723, inlinedAt: !2598)
!2731 = !DILocation(line: 120, column: 14, scope: !2723, inlinedAt: !2598)
!2732 = !DILocation(line: 120, column: 60, scope: !2723, inlinedAt: !2598)
!2733 = !DILocation(line: 121, column: 3, scope: !2723, inlinedAt: !2598)
!2734 = !DILocation(line: 121, column: 10, scope: !2723, inlinedAt: !2598)
!2735 = !DILocation(line: 123, column: 11, scope: !2597, inlinedAt: !2598)
!2736 = !DILocation(line: 123, column: 20, scope: !2597, inlinedAt: !2598)
!2737 = !DILocation(line: 125, column: 10, scope: !2738, inlinedAt: !2598)
!2738 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 124, column: 2)
!2739 = !DILocation(line: 128, column: 9, scope: !2597, inlinedAt: !2598)
!2740 = !DILocation(line: 128, column: 20, scope: !2597, inlinedAt: !2598)
!2741 = !DILocation(line: 131, column: 6, scope: !2597, inlinedAt: !2598)
!2742 = !DILocation(line: 131, column: 13, scope: !2597, inlinedAt: !2598)
!2743 = !DILocation(line: 131, column: 19, scope: !2597, inlinedAt: !2598)
!2744 = !DILocation(line: 131, column: 31, scope: !2597, inlinedAt: !2598)
!2745 = !DILocation(line: 131, column: 54, scope: !2597, inlinedAt: !2598)
!2746 = !DILocation(line: 131, column: 46, scope: !2597, inlinedAt: !2598)
!2747 = !DILocation(line: 131, column: 80, scope: !2597, inlinedAt: !2598)
!2748 = !DILocation(line: 131, column: 97, scope: !2597, inlinedAt: !2598)
!2749 = !DILocation(line: 132, column: 6, scope: !2597, inlinedAt: !2598)
!2750 = !DILocation(line: 132, column: 32, scope: !2597, inlinedAt: !2598)
!2751 = !DILocation(line: 133, column: 6, scope: !2597, inlinedAt: !2598)
!2752 = !DILocation(line: 133, column: 54, scope: !2597, inlinedAt: !2598)
!2753 = !DILocation(line: 136, column: 6, scope: !2597, inlinedAt: !2598)
!2754 = !DILocation(line: 138, column: 3, scope: !2755, inlinedAt: !2598)
!2755 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 137, column: 2)
!2756 = !DILocation(line: 138, column: 10, scope: !2757, inlinedAt: !2598)
!2757 = distinct !DILexicalBlock(scope: !2755, file: !41, line: 138, column: 3)
!2758 = !DILocation(line: 138, column: 24, scope: !2757, inlinedAt: !2598)
!2759 = !DILocation(line: 138, column: 22, scope: !2757, inlinedAt: !2598)
!2760 = !DILocation(line: 138, column: 17, scope: !2757, inlinedAt: !2598)
!2761 = !DILocation(line: 139, column: 3, scope: !2755, inlinedAt: !2598)
!2762 = !DILocation(line: 140, column: 7, scope: !2755, inlinedAt: !2598)
!2763 = !DILocalVariable(name: "a", scope: !2597, file: !2, line: 143, type: !18, align: 4)
!2764 = !DILocation(line: 143, column: 6, scope: !2597, inlinedAt: !2598)
!2765 = !DILocalVariable(name: "z", scope: !2597, file: !2, line: 144, type: !18, align: 4)
!2766 = !DILocation(line: 144, column: 6, scope: !2597, inlinedAt: !2598)
!2767 = !DILocation(line: 144, column: 10, scope: !2597, inlinedAt: !2598)
!2768 = !DILocalVariable(name: "e2", scope: !2597, file: !2, line: 145, type: !18, align: 4)
!2769 = !DILocation(line: 145, column: 6, scope: !2597, inlinedAt: !2598)
!2770 = !DILocalVariable(name: "rp", scope: !2597, file: !2, line: 146, type: !333, align: 8)
!2771 = !DILocation(line: 146, column: 7, scope: !2597, inlinedAt: !2598)
!2772 = !DILocation(line: 146, column: 12, scope: !2597, inlinedAt: !2598)
!2773 = !DILocation(line: 149, column: 6, scope: !2597, inlinedAt: !2598)
!2774 = !DILocation(line: 149, column: 17, scope: !2597, inlinedAt: !2598)
!2775 = !DILocation(line: 149, column: 24, scope: !2597, inlinedAt: !2598)
!2776 = !DILocation(line: 149, column: 30, scope: !2597, inlinedAt: !2598)
!2777 = !DILocation(line: 151, column: 7, scope: !2778, inlinedAt: !2598)
!2778 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 150, column: 2)
!2779 = !DILocation(line: 151, column: 23, scope: !2778, inlinedAt: !2598)
!2780 = !DILocation(line: 151, column: 40, scope: !2778, inlinedAt: !2598)
!2781 = !DILocation(line: 152, column: 7, scope: !2778, inlinedAt: !2598)
!2782 = !DILocation(line: 152, column: 22, scope: !2778, inlinedAt: !2598)
!2783 = !DILocation(line: 152, column: 39, scope: !2778, inlinedAt: !2598)
!2784 = !DILocation(line: 152, column: 53, scope: !2778, inlinedAt: !2598)
!2785 = !DILocation(line: 152, column: 49, scope: !2778, inlinedAt: !2598)
!2786 = !DILocalVariable(name: "bitlim", scope: !2778, file: !2, line: 153, type: !18, align: 4)
!2787 = !DILocation(line: 153, column: 7, scope: !2778, inlinedAt: !2598)
!2788 = !DILocation(line: 153, column: 34, scope: !2778, inlinedAt: !2598)
!2789 = !DILocation(line: 153, column: 29, scope: !2778, inlinedAt: !2598)
!2790 = !DILocation(line: 153, column: 24, scope: !2778, inlinedAt: !2598)
!2791 = !DILocation(line: 153, column: 16, scope: !2778, inlinedAt: !2598)
!2792 = !DILocation(line: 154, column: 7, scope: !2778, inlinedAt: !2598)
!2793 = !DILocation(line: 154, column: 24, scope: !2778, inlinedAt: !2598)
!2794 = !DILocation(line: 154, column: 30, scope: !2778, inlinedAt: !2598)
!2795 = !DILocation(line: 154, column: 22, scope: !2778, inlinedAt: !2598)
!2796 = !DILocation(line: 154, column: 50, scope: !2778, inlinedAt: !2598)
!2797 = !DILocation(line: 154, column: 67, scope: !2778, inlinedAt: !2598)
!2798 = !DILocation(line: 154, column: 77, scope: !2778, inlinedAt: !2598)
!2799 = !DILocation(line: 158, column: 6, scope: !2597, inlinedAt: !2598)
!2800 = !DILocalVariable(name: "rpm9", scope: !2801, file: !2, line: 160, type: !333, align: 8)
!2801 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 159, column: 2)
!2802 = !DILocation(line: 160, column: 8, scope: !2801, inlinedAt: !2598)
!2803 = !DILocation(line: 160, column: 15, scope: !2801, inlinedAt: !2598)
!2804 = !DILocation(line: 160, column: 25, scope: !2801, inlinedAt: !2598)
!2805 = !DILocation(line: 160, column: 34, scope: !2801, inlinedAt: !2598)
!2806 = !DILocalVariable(name: "p10", scope: !2801, file: !2, line: 161, type: !18, align: 4)
!2807 = !DILocation(line: 161, column: 7, scope: !2801, inlinedAt: !2598)
!2808 = !DILocation(line: 161, column: 22, scope: !2801, inlinedAt: !2598)
!2809 = !DILocation(line: 161, column: 18, scope: !2801, inlinedAt: !2598)
!2810 = !DILocalVariable(name: "carry", scope: !2801, file: !2, line: 162, type: !3, align: 4)
!2811 = !DILocation(line: 162, column: 8, scope: !2801, inlinedAt: !2598)
!2812 = !DILocation(line: 162, column: 16, scope: !2801, inlinedAt: !2598)
!2813 = !DILocation(line: 163, column: 12, scope: !2814, inlinedAt: !2598)
!2814 = distinct !DILexicalBlock(scope: !2801, file: !41, line: 163, column: 3)
!2815 = !DILocation(line: 163, column: 15, scope: !2814, inlinedAt: !2598)
!2816 = !DILocation(line: 163, column: 20, scope: !2814, inlinedAt: !2598)
!2817 = !DILocalVariable(name: "tmp", scope: !2818, file: !2, line: 165, type: !3, align: 4)
!2818 = distinct !DILexicalBlock(scope: !2814, file: !41, line: 164, column: 3)
!2819 = !DILocation(line: 165, column: 9, scope: !2818, inlinedAt: !2598)
!2820 = !DILocation(line: 165, column: 17, scope: !2818, inlinedAt: !2598)
!2821 = !DILocation(line: 165, column: 22, scope: !2818, inlinedAt: !2598)
!2822 = !DILocation(line: 165, column: 15, scope: !2818, inlinedAt: !2598)
!2823 = !DILocation(line: 166, column: 6, scope: !2818, inlinedAt: !2598)
!2824 = !DILocation(line: 166, column: 13, scope: !2818, inlinedAt: !2598)
!2825 = !DILocation(line: 166, column: 18, scope: !2818, inlinedAt: !2598)
!2826 = !DILocation(line: 166, column: 11, scope: !2818, inlinedAt: !2598)
!2827 = !DILocation(line: 166, column: 24, scope: !2818, inlinedAt: !2598)
!2828 = !DILocation(line: 167, column: 25, scope: !2818, inlinedAt: !2598)
!2829 = !DILocation(line: 167, column: 12, scope: !2818, inlinedAt: !2598)
!2830 = !DILocation(line: 167, column: 31, scope: !2818, inlinedAt: !2598)
!2831 = !DILocation(line: 168, column: 8, scope: !2818, inlinedAt: !2598)
!2832 = !DILocation(line: 168, column: 13, scope: !2818, inlinedAt: !2598)
!2833 = !DILocation(line: 168, column: 21, scope: !2818, inlinedAt: !2598)
!2834 = !DILocation(line: 170, column: 10, scope: !2835, inlinedAt: !2598)
!2835 = distinct !DILexicalBlock(scope: !2818, file: !41, line: 169, column: 4)
!2836 = !DILocation(line: 171, column: 5, scope: !2835, inlinedAt: !2598)
!2837 = !DILocation(line: 163, column: 23, scope: !2814, inlinedAt: !2598)
!2838 = !DILocation(line: 174, column: 7, scope: !2801, inlinedAt: !2598)
!2839 = !DILocation(line: 174, column: 16, scope: !2801, inlinedAt: !2598)
!2840 = !DILocation(line: 174, column: 23, scope: !2801, inlinedAt: !2598)
!2841 = !DILocation(line: 175, column: 3, scope: !2801, inlinedAt: !2598)
!2842 = !DILocation(line: 175, column: 13, scope: !2801, inlinedAt: !2598)
!2843 = !DILocation(line: 175, column: 9, scope: !2801, inlinedAt: !2598)
!2844 = !DILocation(line: 179, column: 2, scope: !2597, inlinedAt: !2598)
!2845 = !DILocation(line: 179, column: 9, scope: !2846, inlinedAt: !2598)
!2846 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 179, column: 2)
!2847 = !DILocation(line: 179, column: 30, scope: !2846, inlinedAt: !2598)
!2848 = !DILocation(line: 179, column: 53, scope: !2846, inlinedAt: !2598)
!2849 = !DILocation(line: 179, column: 51, scope: !2846, inlinedAt: !2598)
!2850 = !DILocalVariable(name: "carry", scope: !2851, file: !2, line: 181, type: !3, align: 4)
!2851 = distinct !DILexicalBlock(scope: !2846, file: !41, line: 180, column: 2)
!2852 = !DILocation(line: 181, column: 8, scope: !2851, inlinedAt: !2598)
!2853 = !DILocation(line: 181, column: 16, scope: !2851, inlinedAt: !2598)
!2854 = !DILocation(line: 182, column: 3, scope: !2851, inlinedAt: !2598)
!2855 = !DILocation(line: 183, column: 13, scope: !2856, inlinedAt: !2598)
!2856 = distinct !DILexicalBlock(scope: !2851, file: !41, line: 183, column: 3)
!2857 = !DILocalVariable(name: "tmp", scope: !2858, file: !2, line: 185, type: !67, align: 8)
!2858 = distinct !DILexicalBlock(scope: !2856, file: !41, line: 184, column: 3)
!2859 = !DILocation(line: 185, column: 10, scope: !2858, inlinedAt: !2598)
!2860 = !DILocation(line: 185, column: 25, scope: !2858, inlinedAt: !2598)
!2861 = !DILocation(line: 185, column: 17, scope: !2858, inlinedAt: !2598)
!2862 = !DILocation(line: 185, column: 36, scope: !2858, inlinedAt: !2598)
!2863 = !DILocation(line: 186, column: 8, scope: !2858, inlinedAt: !2598)
!2864 = !DILocation(line: 188, column: 20, scope: !2865, inlinedAt: !2598)
!2865 = distinct !DILexicalBlock(scope: !2858, file: !41, line: 187, column: 4)
!2866 = !DILocation(line: 188, column: 14, scope: !2865, inlinedAt: !2598)
!2867 = !DILocation(line: 189, column: 7, scope: !2865, inlinedAt: !2598)
!2868 = !DILocation(line: 189, column: 19, scope: !2865, inlinedAt: !2598)
!2869 = !DILocation(line: 189, column: 13, scope: !2865, inlinedAt: !2598)
!2870 = !DILocation(line: 193, column: 13, scope: !2871, inlinedAt: !2598)
!2871 = distinct !DILexicalBlock(scope: !2858, file: !41, line: 192, column: 4)
!2872 = !DILocation(line: 194, column: 7, scope: !2871, inlinedAt: !2598)
!2873 = !DILocation(line: 194, column: 13, scope: !2871, inlinedAt: !2598)
!2874 = !DILocation(line: 196, column: 8, scope: !2858, inlinedAt: !2598)
!2875 = !DILocation(line: 196, column: 14, scope: !2858, inlinedAt: !2598)
!2876 = !DILocation(line: 196, column: 31, scope: !2858, inlinedAt: !2598)
!2877 = !DILocation(line: 196, column: 36, scope: !2858, inlinedAt: !2598)
!2878 = !DILocation(line: 196, column: 44, scope: !2858, inlinedAt: !2598)
!2879 = !DILocation(line: 196, column: 52, scope: !2858, inlinedAt: !2598)
!2880 = !DILocation(line: 197, column: 8, scope: !2858, inlinedAt: !2598)
!2881 = !DILocation(line: 197, column: 13, scope: !2858, inlinedAt: !2598)
!2882 = !DILocation(line: 197, column: 16, scope: !2858, inlinedAt: !2598)
!2883 = !DILocation(line: 183, column: 35, scope: !2856, inlinedAt: !2598)
!2884 = !DILocation(line: 199, column: 7, scope: !2851, inlinedAt: !2598)
!2885 = !DILocation(line: 201, column: 4, scope: !2886, inlinedAt: !2598)
!2886 = distinct !DILexicalBlock(scope: !2851, file: !41, line: 200, column: 3)
!2887 = !DILocation(line: 202, column: 9, scope: !2886, inlinedAt: !2598)
!2888 = !DILocation(line: 203, column: 8, scope: !2886, inlinedAt: !2598)
!2889 = !DILocation(line: 203, column: 13, scope: !2886, inlinedAt: !2598)
!2890 = !DILocation(line: 205, column: 10, scope: !2891, inlinedAt: !2598)
!2891 = distinct !DILexicalBlock(scope: !2886, file: !41, line: 204, column: 4)
!2892 = !DILocation(line: 206, column: 8, scope: !2891, inlinedAt: !2598)
!2893 = !DILocation(line: 206, column: 28, scope: !2891, inlinedAt: !2598)
!2894 = !DILocation(line: 206, column: 5, scope: !2891, inlinedAt: !2598)
!2895 = !DILocation(line: 208, column: 6, scope: !2886, inlinedAt: !2598)
!2896 = !DILocation(line: 208, column: 11, scope: !2886, inlinedAt: !2598)
!2897 = !DILocation(line: 213, column: 2, scope: !2597, inlinedAt: !2598)
!2898 = !DILocalVariable(name: "carry", scope: !2899, file: !2, line: 215, type: !3, align: 4)
!2899 = distinct !DILexicalBlock(scope: !2900, file: !41, line: 214, column: 2)
!2900 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 213, column: 2)
!2901 = !DILocation(line: 215, column: 8, scope: !2899, inlinedAt: !2598)
!2902 = !DILocation(line: 215, column: 16, scope: !2899, inlinedAt: !2598)
!2903 = !DILocalVariable(name: "sh", scope: !2899, file: !2, line: 216, type: !18, align: 4)
!2904 = !DILocation(line: 216, column: 7, scope: !2899, inlinedAt: !2598)
!2905 = !DILocation(line: 216, column: 12, scope: !2899, inlinedAt: !2598)
!2906 = !DILocalVariable(name: "i", scope: !2899, file: !2, line: 217, type: !18, align: 4)
!2907 = !DILocation(line: 217, column: 7, scope: !2899, inlinedAt: !2598)
!2908 = !DILocation(line: 218, column: 12, scope: !2909, inlinedAt: !2598)
!2909 = distinct !DILexicalBlock(scope: !2899, file: !41, line: 218, column: 3)
!2910 = !DILocation(line: 218, column: 15, scope: !2909, inlinedAt: !2598)
!2911 = !DILocation(line: 220, column: 9, scope: !2912, inlinedAt: !2598)
!2912 = distinct !DILexicalBlock(scope: !2909, file: !41, line: 219, column: 3)
!2913 = !DILocation(line: 220, column: 13, scope: !2912, inlinedAt: !2598)
!2914 = !DILocation(line: 221, column: 8, scope: !2912, inlinedAt: !2598)
!2915 = !DILocation(line: 221, column: 13, scope: !2912, inlinedAt: !2598)
!2916 = !DILocation(line: 221, column: 20, scope: !2912, inlinedAt: !2598)
!2917 = !DILocation(line: 221, column: 28, scope: !2912, inlinedAt: !2598)
!2918 = !DILocation(line: 221, column: 18, scope: !2912, inlinedAt: !2598)
!2919 = !DILocation(line: 223, column: 9, scope: !2920, inlinedAt: !2598)
!2920 = distinct !DILexicalBlock(scope: !2912, file: !41, line: 222, column: 4)
!2921 = !DILocation(line: 224, column: 5, scope: !2920, inlinedAt: !2598)
!2922 = !DILocation(line: 226, column: 11, scope: !2912, inlinedAt: !2598)
!2923 = !DILocation(line: 226, column: 15, scope: !2912, inlinedAt: !2598)
!2924 = !DILocation(line: 226, column: 31, scope: !2912, inlinedAt: !2598)
!2925 = !DILocation(line: 226, column: 8, scope: !2912, inlinedAt: !2598)
!2926 = !DILocation(line: 226, column: 35, scope: !2912, inlinedAt: !2598)
!2927 = !DILocation(line: 218, column: 28, scope: !2909, inlinedAt: !2598)
!2928 = !DILocation(line: 228, column: 7, scope: !2899, inlinedAt: !2598)
!2929 = !DILocation(line: 228, column: 23, scope: !2899, inlinedAt: !2598)
!2930 = !DILocation(line: 228, column: 42, scope: !2899, inlinedAt: !2598)
!2931 = !DILocation(line: 229, column: 7, scope: !2899, inlinedAt: !2598)
!2932 = !DILocation(line: 229, column: 34, scope: !2899, inlinedAt: !2598)
!2933 = !DILocation(line: 230, column: 3, scope: !2899, inlinedAt: !2598)
!2934 = !DILocation(line: 230, column: 9, scope: !2899, inlinedAt: !2598)
!2935 = !DILocation(line: 231, column: 12, scope: !2936, inlinedAt: !2598)
!2936 = distinct !DILexicalBlock(scope: !2899, file: !41, line: 231, column: 3)
!2937 = !DILocation(line: 231, column: 15, scope: !2936, inlinedAt: !2598)
!2938 = !DILocation(line: 231, column: 20, scope: !2936, inlinedAt: !2598)
!2939 = !DILocalVariable(name: "tmp", scope: !2940, file: !2, line: 233, type: !3, align: 4)
!2940 = distinct !DILexicalBlock(scope: !2936, file: !41, line: 232, column: 3)
!2941 = !DILocation(line: 233, column: 9, scope: !2940, inlinedAt: !2598)
!2942 = !DILocation(line: 233, column: 17, scope: !2940, inlinedAt: !2598)
!2943 = !DILocation(line: 233, column: 28, scope: !2940, inlinedAt: !2598)
!2944 = !DILocation(line: 233, column: 23, scope: !2940, inlinedAt: !2598)
!2945 = !DILocation(line: 233, column: 15, scope: !2940, inlinedAt: !2598)
!2946 = !DILocation(line: 234, column: 6, scope: !2940, inlinedAt: !2598)
!2947 = !DILocation(line: 234, column: 13, scope: !2940, inlinedAt: !2598)
!2948 = !DILocation(line: 234, column: 19, scope: !2940, inlinedAt: !2598)
!2949 = !DILocation(line: 234, column: 11, scope: !2940, inlinedAt: !2598)
!2950 = !DILocation(line: 234, column: 24, scope: !2940, inlinedAt: !2598)
!2951 = !DILocation(line: 235, column: 27, scope: !2940, inlinedAt: !2598)
!2952 = !DILocation(line: 235, column: 13, scope: !2940, inlinedAt: !2598)
!2953 = !DILocation(line: 235, column: 33, scope: !2940, inlinedAt: !2598)
!2954 = !DILocation(line: 236, column: 8, scope: !2940, inlinedAt: !2598)
!2955 = !DILocation(line: 236, column: 13, scope: !2940, inlinedAt: !2598)
!2956 = !DILocation(line: 236, column: 21, scope: !2940, inlinedAt: !2598)
!2957 = !DILocation(line: 238, column: 10, scope: !2958, inlinedAt: !2598)
!2958 = distinct !DILexicalBlock(scope: !2940, file: !41, line: 237, column: 4)
!2959 = !DILocation(line: 239, column: 5, scope: !2958, inlinedAt: !2598)
!2960 = !DILocation(line: 240, column: 5, scope: !2958, inlinedAt: !2598)
!2961 = !DILocation(line: 231, column: 28, scope: !2936, inlinedAt: !2598)
!2962 = !DILocation(line: 243, column: 7, scope: !2899, inlinedAt: !2598)
!2963 = !DILocation(line: 245, column: 9, scope: !2964, inlinedAt: !2598)
!2964 = distinct !DILexicalBlock(scope: !2899, file: !41, line: 244, column: 3)
!2965 = !DILocation(line: 245, column: 26, scope: !2964, inlinedAt: !2598)
!2966 = !DILocation(line: 247, column: 7, scope: !2967, inlinedAt: !2598)
!2967 = distinct !DILexicalBlock(scope: !2964, file: !41, line: 246, column: 4)
!2968 = !DILocation(line: 247, column: 12, scope: !2967, inlinedAt: !2598)
!2969 = !DILocation(line: 248, column: 10, scope: !2967, inlinedAt: !2598)
!2970 = !DILocation(line: 252, column: 8, scope: !2971, inlinedAt: !2598)
!2971 = distinct !DILexicalBlock(scope: !2964, file: !41, line: 251, column: 4)
!2972 = !DILocation(line: 252, column: 5, scope: !2971, inlinedAt: !2598)
!2973 = !DILocalVariable(name: "y", scope: !2597, file: !2, line: 258, type: !2345, align: 8)
!2974 = !DILocation(line: 258, column: 9, scope: !2597, inlinedAt: !2598)
!2975 = !DILocalVariable(name: "i", scope: !2597, file: !2, line: 259, type: !18, align: 4)
!2976 = !DILocation(line: 259, column: 6, scope: !2597, inlinedAt: !2598)
!2977 = !DILocation(line: 260, column: 11, scope: !2978, inlinedAt: !2598)
!2978 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 260, column: 2)
!2979 = !DILocation(line: 260, column: 14, scope: !2978, inlinedAt: !2598)
!2980 = !DILocation(line: 262, column: 8, scope: !2981, inlinedAt: !2598)
!2981 = distinct !DILexicalBlock(scope: !2978, file: !41, line: 261, column: 2)
!2982 = !DILocation(line: 262, column: 12, scope: !2981, inlinedAt: !2598)
!2983 = !DILocation(line: 262, column: 25, scope: !2981, inlinedAt: !2598)
!2984 = !DILocation(line: 262, column: 36, scope: !2981, inlinedAt: !2598)
!2985 = !DILocation(line: 262, column: 31, scope: !2981, inlinedAt: !2598)
!2986 = !DILocation(line: 262, column: 58, scope: !2981, inlinedAt: !2598)
!2987 = !DILocation(line: 263, column: 22, scope: !2981, inlinedAt: !2598)
!2988 = !DILocation(line: 263, column: 7, scope: !2981, inlinedAt: !2598)
!2989 = !DILocation(line: 263, column: 29, scope: !2981, inlinedAt: !2598)
!2990 = !DILocation(line: 263, column: 33, scope: !2981, inlinedAt: !2598)
!2991 = !DILocation(line: 260, column: 27, scope: !2978, inlinedAt: !2598)
!2992 = !DILocation(line: 266, column: 2, scope: !2597, inlinedAt: !2598)
!2993 = !DILocation(line: 266, column: 7, scope: !2597, inlinedAt: !2598)
!2994 = !DILocalVariable(name: "denormal", scope: !2597, file: !2, line: 268, type: !131, align: 1)
!2995 = !DILocation(line: 268, column: 7, scope: !2597, inlinedAt: !2598)
!2996 = !DILocalVariable(name: "bits", scope: !2597, file: !2, line: 270, type: !3, align: 4)
!2997 = !DILocation(line: 270, column: 7, scope: !2597, inlinedAt: !2598)
!2998 = !DILocation(line: 270, column: 14, scope: !2597, inlinedAt: !2598)
!2999 = !DILocation(line: 271, column: 6, scope: !2597, inlinedAt: !2598)
!3000 = !DILocation(line: 271, column: 37, scope: !2597, inlinedAt: !2598)
!3001 = !DILocation(line: 271, column: 19, scope: !2597, inlinedAt: !2598)
!3002 = !DILocation(line: 273, column: 34, scope: !3003, inlinedAt: !2598)
!3003 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 272, column: 2)
!3004 = !DILocation(line: 273, column: 16, scope: !3003, inlinedAt: !2598)
!3005 = !DILocation(line: 274, column: 7, scope: !3003, inlinedAt: !2598)
!3006 = !DILocation(line: 274, column: 24, scope: !3003, inlinedAt: !2598)
!3007 = !DILocation(line: 275, column: 14, scope: !3003, inlinedAt: !2598)
!3008 = !DILocalVariable(name: "bias", scope: !2597, file: !2, line: 279, type: !2345, align: 8)
!3009 = !DILocation(line: 279, column: 9, scope: !2597, inlinedAt: !2598)
!3010 = !DILocalVariable(name: "frac", scope: !2597, file: !2, line: 280, type: !2345, align: 8)
!3011 = !DILocation(line: 280, column: 9, scope: !2597, inlinedAt: !2598)
!3012 = !DILocation(line: 281, column: 6, scope: !2597, inlinedAt: !2598)
!3013 = !DILocation(line: 283, column: 69, scope: !3014, inlinedAt: !2598)
!3014 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 282, column: 2)
!3015 = !DILocation(line: 283, column: 41, scope: !3014, inlinedAt: !2598)
!3016 = !DILocation(line: 1024, column: 52, scope: !3017, inlinedAt: !3018)
!3017 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3018 = !DILocation(line: 283, column: 31, scope: !3014, inlinedAt: !2598)
!3019 = !DILocation(line: 1024, column: 41, scope: !3017, inlinedAt: !3018)
!3020 = !DILocation(line: 41, column: 10, scope: !3021, inlinedAt: !3022)
!3021 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2570, file: !2570, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3022 = !DILocation(line: 288, column: 48, scope: !3023, inlinedAt: !3024)
!3023 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2564, file: !2564, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3024 = !DILocation(line: 283, column: 16, scope: !3014, inlinedAt: !2598)
!3025 = !DILocation(line: 288, column: 77, scope: !3023, inlinedAt: !3024)
!3026 = !DILocation(line: 284, column: 10, scope: !3014, inlinedAt: !2598)
!3027 = !DILocation(line: 284, column: 54, scope: !3014, inlinedAt: !2598)
!3028 = !DILocation(line: 284, column: 36, scope: !3014, inlinedAt: !2598)
!3029 = !DILocation(line: 1024, column: 52, scope: !3030, inlinedAt: !3031)
!3030 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3031 = !DILocation(line: 284, column: 20, scope: !3014, inlinedAt: !2598)
!3032 = !DILocation(line: 1024, column: 41, scope: !3030, inlinedAt: !3031)
!3033 = !DILocation(line: 285, column: 3, scope: !3014, inlinedAt: !2598)
!3034 = !DILocation(line: 285, column: 8, scope: !3014, inlinedAt: !2598)
!3035 = !DILocation(line: 286, column: 3, scope: !3014, inlinedAt: !2598)
!3036 = !DILocation(line: 286, column: 8, scope: !3014, inlinedAt: !2598)
!3037 = !DILocation(line: 290, column: 7, scope: !2597, inlinedAt: !2598)
!3038 = !DILocation(line: 290, column: 11, scope: !2597, inlinedAt: !2598)
!3039 = !DILocation(line: 290, column: 24, scope: !2597, inlinedAt: !2598)
!3040 = !DILocalVariable(name: "t", scope: !3041, file: !2, line: 292, type: !3, align: 4)
!3041 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 291, column: 2)
!3042 = !DILocation(line: 292, column: 8, scope: !3041, inlinedAt: !2598)
!3043 = !DILocation(line: 292, column: 15, scope: !3041, inlinedAt: !2598)
!3044 = !DILocation(line: 292, column: 19, scope: !3041, inlinedAt: !2598)
!3045 = !DILocation(line: 295, column: 9, scope: !3046, inlinedAt: !2598)
!3046 = distinct !DILexicalBlock(scope: !3041, file: !41, line: 293, column: 3)
!3047 = !DILocation(line: 295, column: 27, scope: !3046, inlinedAt: !2598)
!3048 = !DILocation(line: 295, column: 33, scope: !3046, inlinedAt: !2598)
!3049 = !DILocation(line: 295, column: 37, scope: !3046, inlinedAt: !2598)
!3050 = !DILocation(line: 295, column: 54, scope: !3046, inlinedAt: !2598)
!3051 = !DILocation(line: 296, column: 5, scope: !3052, inlinedAt: !2598)
!3052 = distinct !DILexicalBlock(scope: !3046, file: !41, line: 296, column: 5)
!3053 = !DILocation(line: 296, column: 20, scope: !3052, inlinedAt: !2598)
!3054 = !DILocation(line: 296, column: 13, scope: !3052, inlinedAt: !2598)
!3055 = !DILocation(line: 297, column: 9, scope: !3046, inlinedAt: !2598)
!3056 = !DILocation(line: 298, column: 5, scope: !3057, inlinedAt: !2598)
!3057 = distinct !DILexicalBlock(scope: !3046, file: !41, line: 298, column: 5)
!3058 = !DILocation(line: 298, column: 20, scope: !3057, inlinedAt: !2598)
!3059 = !DILocation(line: 298, column: 13, scope: !3057, inlinedAt: !2598)
!3060 = !DILocation(line: 299, column: 9, scope: !3046, inlinedAt: !2598)
!3061 = !DILocation(line: 300, column: 10, scope: !3062, inlinedAt: !2598)
!3062 = distinct !DILexicalBlock(scope: !3046, file: !41, line: 300, column: 5)
!3063 = !DILocation(line: 300, column: 14, scope: !3062, inlinedAt: !2598)
!3064 = !DILocation(line: 300, column: 31, scope: !3062, inlinedAt: !2598)
!3065 = !DILocation(line: 302, column: 6, scope: !3066, inlinedAt: !2598)
!3066 = distinct !DILexicalBlock(scope: !3062, file: !41, line: 301, column: 5)
!3067 = !DILocation(line: 302, column: 20, scope: !3066, inlinedAt: !2598)
!3068 = !DILocation(line: 302, column: 14, scope: !3066, inlinedAt: !2598)
!3069 = !DILocation(line: 306, column: 6, scope: !3070, inlinedAt: !2598)
!3070 = distinct !DILexicalBlock(scope: !3062, file: !41, line: 305, column: 5)
!3071 = !DILocation(line: 306, column: 21, scope: !3070, inlinedAt: !2598)
!3072 = !DILocation(line: 306, column: 14, scope: !3070, inlinedAt: !2598)
!3073 = !DILocation(line: 309, column: 31, scope: !3041, inlinedAt: !2598)
!3074 = !DILocation(line: 309, column: 13, scope: !3041, inlinedAt: !2598)
!3075 = !DILocation(line: 309, column: 46, scope: !3041, inlinedAt: !2598)
!3076 = !DILocation(line: 309, column: 57, scope: !3041, inlinedAt: !2598)
!3077 = !DILocation(line: 312, column: 2, scope: !2597, inlinedAt: !2598)
!3078 = !DILocation(line: 312, column: 7, scope: !2597, inlinedAt: !2598)
!3079 = !DILocation(line: 313, column: 2, scope: !2597, inlinedAt: !2598)
!3080 = !DILocation(line: 313, column: 7, scope: !2597, inlinedAt: !2598)
!3081 = !DILocation(line: 315, column: 8, scope: !2597, inlinedAt: !2598)
!3082 = !DILocation(line: 315, column: 49, scope: !2597, inlinedAt: !2598)
!3083 = !DILocation(line: 132, column: 23, scope: !3084, inlinedAt: !3085)
!3084 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !2564, file: !2564, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3085 = !DILocation(line: 317, column: 13, scope: !3086, inlinedAt: !2598)
!3086 = distinct !DILexicalBlock(scope: !2597, file: !41, line: 316, column: 2)
!3087 = !DILocation(line: 319, column: 8, scope: !3088, inlinedAt: !2598)
!3088 = distinct !DILexicalBlock(scope: !3086, file: !41, line: 318, column: 3)
!3089 = !DILocation(line: 319, column: 20, scope: !3088, inlinedAt: !2598)
!3090 = !DILocation(line: 319, column: 52, scope: !3088, inlinedAt: !2598)
!3091 = !DILocation(line: 319, column: 34, scope: !3088, inlinedAt: !2598)
!3092 = !DILocation(line: 319, column: 75, scope: !3088, inlinedAt: !2598)
!3093 = !DILocation(line: 320, column: 4, scope: !3088, inlinedAt: !2598)
!3094 = !DILocation(line: 321, column: 4, scope: !3088, inlinedAt: !2598)
!3095 = !DILocation(line: 323, column: 7, scope: !3086, inlinedAt: !2598)
!3096 = !DILocation(line: 323, column: 36, scope: !3086, inlinedAt: !2598)
!3097 = !DILocation(line: 323, column: 45, scope: !3086, inlinedAt: !2598)
!3098 = !DILocation(line: 323, column: 57, scope: !3086, inlinedAt: !2598)
!3099 = !DILocation(line: 323, column: 71, scope: !3086, inlinedAt: !2598)
!3100 = !DILocation(line: 1024, column: 52, scope: !3101, inlinedAt: !3102)
!3101 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3102 = !DILocation(line: 325, column: 15, scope: !2597, inlinedAt: !2598)
!3103 = !DILocation(line: 1024, column: 41, scope: !3101, inlinedAt: !3102)
!3104 = distinct !DISubprogram(name: "to_float", linkageName: "std.core.String.to_float", scope: !2, file: !2, line: 718, type: !3105, scopeLine: 718, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3105 = !DISubroutineType(types: !3106)
!3106 = !{!332, !3107, !59}
!3107 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !3108, size: 64, align: 64, dwarfAddressSpace: 0)
!3108 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!3109 = !DILocalVariable(name: "s", arg: 1, scope: !3104, file: !2, line: 718, type: !59)
!3110 = !DILocation(line: 718, column: 27, scope: !3104)
!3111 = !DILocalVariable(name: "sign", scope: !3112, file: !2, line: 454, type: !18, align: 4)
!3112 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3113 = !DILocation(line: 454, column: 6, scope: !3112, inlinedAt: !3114)
!3114 = !DILocation(line: 718, column: 33, scope: !3104)
!3115 = !DILocation(line: 454, column: 13, scope: !3112, inlinedAt: !3114)
!3116 = !DILocation(line: 468, column: 2, scope: !3112, inlinedAt: !3114)
!3117 = !DILocation(line: 468, column: 9, scope: !3118, inlinedAt: !3114)
!3118 = distinct !DILexicalBlock(scope: !3112, file: !41, line: 468, column: 2)
!3119 = !DILocation(line: 468, column: 22, scope: !3118, inlinedAt: !3114)
!3120 = !DILocation(line: 468, column: 28, scope: !3118, inlinedAt: !3114)
!3121 = !DILocation(line: 468, column: 47, scope: !3118, inlinedAt: !3114)
!3122 = !DILocation(line: 468, column: 53, scope: !3118, inlinedAt: !3114)
!3123 = !DILocation(line: 469, column: 7, scope: !3112, inlinedAt: !3114)
!3124 = !DILocation(line: 469, column: 25, scope: !3112, inlinedAt: !3114)
!3125 = !DILocation(line: 470, column: 10, scope: !3126, inlinedAt: !3114)
!3126 = distinct !DILexicalBlock(scope: !3112, file: !41, line: 470, column: 2)
!3127 = !DILocation(line: 470, column: 16, scope: !3126, inlinedAt: !3114)
!3128 = !DILocation(line: 473, column: 11, scope: !3129, inlinedAt: !3114)
!3129 = distinct !DILexicalBlock(scope: !3126, file: !41, line: 473, column: 4)
!3130 = !DILocation(line: 474, column: 4, scope: !3129, inlinedAt: !3114)
!3131 = !DILocation(line: 476, column: 12, scope: !3132, inlinedAt: !3114)
!3132 = distinct !DILexicalBlock(scope: !3126, file: !41, line: 476, column: 4)
!3133 = !DILocation(line: 476, column: 18, scope: !3132, inlinedAt: !3114)
!3134 = !DILocation(line: 478, column: 6, scope: !3112, inlinedAt: !3114)
!3135 = !DILocation(line: 478, column: 29, scope: !3112, inlinedAt: !3114)
!3136 = !DILocation(line: 478, column: 57, scope: !3112, inlinedAt: !3114)
!3137 = !DILocation(line: 479, column: 6, scope: !3112, inlinedAt: !3114)
!3138 = !DILocation(line: 479, column: 24, scope: !3112, inlinedAt: !3114)
!3139 = !DILocation(line: 479, column: 47, scope: !3112, inlinedAt: !3114)
!3140 = !DILocation(line: 481, column: 6, scope: !3112, inlinedAt: !3114)
!3141 = !DILocation(line: 481, column: 23, scope: !3112, inlinedAt: !3114)
!3142 = !DILocation(line: 481, column: 29, scope: !3112, inlinedAt: !3114)
!3143 = !DILocation(line: 481, column: 43, scope: !3112, inlinedAt: !3114)
!3144 = !DILocation(line: 481, column: 49, scope: !3112, inlinedAt: !3114)
!3145 = !DILocation(line: 483, column: 34, scope: !3146, inlinedAt: !3114)
!3146 = distinct !DILexicalBlock(scope: !3112, file: !41, line: 482, column: 2)
!3147 = !DILocation(line: 483, column: 40, scope: !3146, inlinedAt: !3114)
!3148 = !DILocation(line: 483, column: 27, scope: !3146, inlinedAt: !3114)
!3149 = !DILocalVariable(name: "scale", scope: !3150, file: !2, line: 330, type: !2345, align: 8)
!3150 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3151 = !DILocation(line: 330, column: 9, scope: !3150, inlinedAt: !3152)
!3152 = !DILocation(line: 483, column: 11, scope: !3146, inlinedAt: !3114)
!3153 = !DILocation(line: 330, column: 17, scope: !3150, inlinedAt: !3152)
!3154 = !DILocalVariable(name: "x", scope: !3150, file: !2, line: 331, type: !3, align: 4)
!3155 = !DILocation(line: 331, column: 7, scope: !3150, inlinedAt: !3152)
!3156 = !DILocalVariable(name: "rp", scope: !3150, file: !2, line: 332, type: !333, align: 8)
!3157 = !DILocation(line: 332, column: 7, scope: !3150, inlinedAt: !3152)
!3158 = !DILocalVariable(name: "dc", scope: !3150, file: !2, line: 333, type: !333, align: 8)
!3159 = !DILocation(line: 333, column: 7, scope: !3150, inlinedAt: !3152)
!3160 = !DILocalVariable(name: "c", scope: !3150, file: !2, line: 334, type: !64, align: 1)
!3161 = !DILocation(line: 334, column: 7, scope: !3150, inlinedAt: !3152)
!3162 = !DILocalVariable(name: "got_rad", scope: !3150, file: !2, line: 335, type: !131, align: 1)
!3163 = !DILocation(line: 335, column: 7, scope: !3150, inlinedAt: !3152)
!3164 = !DILocalVariable(name: "got_digit", scope: !3150, file: !2, line: 336, type: !131, align: 1)
!3165 = !DILocation(line: 336, column: 7, scope: !3150, inlinedAt: !3152)
!3166 = !DILocalVariable(name: "got_tail", scope: !3150, file: !2, line: 337, type: !131, align: 1)
!3167 = !DILocation(line: 337, column: 7, scope: !3150, inlinedAt: !3152)
!3168 = !DILocalVariable(name: "len", scope: !3150, file: !2, line: 338, type: !66, align: 8)
!3169 = !DILocation(line: 338, column: 6, scope: !3150, inlinedAt: !3152)
!3170 = !DILocation(line: 338, column: 12, scope: !3150, inlinedAt: !3152)
!3171 = !DILocalVariable(name: "last_char", scope: !3150, file: !2, line: 339, type: !66, align: 8)
!3172 = !DILocation(line: 339, column: 6, scope: !3150, inlinedAt: !3152)
!3173 = !DILocation(line: 339, column: 18, scope: !3150, inlinedAt: !3152)
!3174 = !DILocalVariable(name: "index", scope: !3150, file: !2, line: 340, type: !66, align: 8)
!3175 = !DILocation(line: 340, column: 6, scope: !3150, inlinedAt: !3152)
!3176 = !DILocalVariable(name: "y", scope: !3150, file: !2, line: 341, type: !2345, align: 8)
!3177 = !DILocation(line: 341, column: 9, scope: !3150, inlinedAt: !3152)
!3178 = !DILocation(line: 344, column: 2, scope: !3150, inlinedAt: !3152)
!3179 = !DILocation(line: 344, column: 14, scope: !3180, inlinedAt: !3152)
!3180 = distinct !DILexicalBlock(scope: !3150, file: !41, line: 344, column: 2)
!3181 = !DILocation(line: 344, column: 20, scope: !3180, inlinedAt: !3152)
!3182 = !DILocation(line: 344, column: 10, scope: !3180, inlinedAt: !3152)
!3183 = !DILocation(line: 346, column: 7, scope: !3184, inlinedAt: !3152)
!3184 = distinct !DILexicalBlock(scope: !3180, file: !41, line: 345, column: 2)
!3185 = !DILocation(line: 346, column: 16, scope: !3184, inlinedAt: !3152)
!3186 = !DILocation(line: 346, column: 34, scope: !3184, inlinedAt: !3152)
!3187 = !DILocation(line: 347, column: 3, scope: !3184, inlinedAt: !3152)
!3188 = !DILocation(line: 349, column: 6, scope: !3150, inlinedAt: !3152)
!3189 = !DILocation(line: 351, column: 13, scope: !3190, inlinedAt: !3152)
!3190 = distinct !DILexicalBlock(scope: !3150, file: !41, line: 350, column: 2)
!3191 = !DILocation(line: 352, column: 7, scope: !3190, inlinedAt: !3152)
!3192 = !DILocation(line: 352, column: 16, scope: !3190, inlinedAt: !3152)
!3193 = !DILocation(line: 354, column: 9, scope: !3194, inlinedAt: !3152)
!3194 = distinct !DILexicalBlock(scope: !3190, file: !41, line: 353, column: 3)
!3195 = !DILocation(line: 354, column: 27, scope: !3194, inlinedAt: !3152)
!3196 = !DILocation(line: 355, column: 11, scope: !3194, inlinedAt: !3152)
!3197 = !DILocation(line: 357, column: 7, scope: !3190, inlinedAt: !3152)
!3198 = !DILocation(line: 357, column: 16, scope: !3190, inlinedAt: !3152)
!3199 = !DILocation(line: 357, column: 34, scope: !3190, inlinedAt: !3152)
!3200 = !DILocation(line: 357, column: 42, scope: !3190, inlinedAt: !3152)
!3201 = !DILocation(line: 357, column: 40, scope: !3190, inlinedAt: !3152)
!3202 = !DILocation(line: 357, column: 30, scope: !3190, inlinedAt: !3152)
!3203 = !DILocation(line: 359, column: 4, scope: !3204, inlinedAt: !3152)
!3204 = distinct !DILexicalBlock(scope: !3190, file: !41, line: 358, column: 3)
!3205 = !DILocation(line: 360, column: 16, scope: !3204, inlinedAt: !3152)
!3206 = !DILocation(line: 361, column: 4, scope: !3204, inlinedAt: !3152)
!3207 = !DILocation(line: 361, column: 11, scope: !3208, inlinedAt: !3152)
!3208 = distinct !DILexicalBlock(scope: !3204, file: !41, line: 361, column: 4)
!3209 = !DILocation(line: 361, column: 24, scope: !3208, inlinedAt: !3152)
!3210 = !DILocation(line: 361, column: 38, scope: !3208, inlinedAt: !3152)
!3211 = !DILocation(line: 361, column: 46, scope: !3208, inlinedAt: !3152)
!3212 = !DILocation(line: 361, column: 44, scope: !3208, inlinedAt: !3152)
!3213 = !DILocation(line: 361, column: 34, scope: !3208, inlinedAt: !3152)
!3214 = !DILocation(line: 363, column: 5, scope: !3215, inlinedAt: !3152)
!3215 = distinct !DILexicalBlock(scope: !3208, file: !41, line: 362, column: 4)
!3216 = !DILocation(line: 368, column: 2, scope: !3150, inlinedAt: !3152)
!3217 = !DILocation(line: 368, column: 10, scope: !3218, inlinedAt: !3152)
!3218 = distinct !DILexicalBlock(scope: !3150, file: !41, line: 368, column: 2)
!3219 = !DILocation(line: 368, column: 30, scope: !3218, inlinedAt: !3152)
!3220 = !DILocation(line: 368, column: 53, scope: !3218, inlinedAt: !3152)
!3221 = !DILocation(line: 370, column: 7, scope: !3222, inlinedAt: !3152)
!3222 = distinct !DILexicalBlock(scope: !3218, file: !41, line: 369, column: 2)
!3223 = !DILocation(line: 372, column: 8, scope: !3224, inlinedAt: !3152)
!3224 = distinct !DILexicalBlock(scope: !3222, file: !41, line: 371, column: 3)
!3225 = !DILocation(line: 372, column: 24, scope: !3224, inlinedAt: !3152)
!3226 = !DILocation(line: 373, column: 14, scope: !3224, inlinedAt: !3152)
!3227 = !DILocation(line: 374, column: 9, scope: !3224, inlinedAt: !3152)
!3228 = !DILocation(line: 378, column: 16, scope: !3229, inlinedAt: !3152)
!3229 = distinct !DILexicalBlock(scope: !3222, file: !41, line: 377, column: 3)
!3230 = !DILocalVariable(name: "d", scope: !3229, file: !2, line: 379, type: !18, align: 4)
!3231 = !DILocation(line: 379, column: 8, scope: !3229, inlinedAt: !3152)
!3232 = !DILocation(line: 380, column: 9, scope: !3233, inlinedAt: !3152)
!3233 = distinct !DILexicalBlock(scope: !3229, file: !41, line: 380, column: 5)
!3234 = !DILocation(line: 380, column: 26, scope: !3233, inlinedAt: !3152)
!3235 = !DILocation(line: 381, column: 12, scope: !3233, inlinedAt: !3152)
!3236 = !DILocation(line: 385, column: 10, scope: !3237, inlinedAt: !3152)
!3237 = distinct !DILexicalBlock(scope: !3229, file: !41, line: 383, column: 4)
!3238 = !DILocation(line: 386, column: 10, scope: !3239, inlinedAt: !3152)
!3239 = distinct !DILexicalBlock(scope: !3237, file: !41, line: 386, column: 6)
!3240 = !DILocation(line: 386, column: 19, scope: !3239, inlinedAt: !3152)
!3241 = !DILocation(line: 387, column: 10, scope: !3237, inlinedAt: !3152)
!3242 = !DILocation(line: 388, column: 6, scope: !3243, inlinedAt: !3152)
!3243 = distinct !DILexicalBlock(scope: !3237, file: !41, line: 388, column: 6)
!3244 = !DILocation(line: 388, column: 11, scope: !3243, inlinedAt: !3152)
!3245 = !DILocation(line: 388, column: 16, scope: !3243, inlinedAt: !3152)
!3246 = !DILocation(line: 389, column: 17, scope: !3243, inlinedAt: !3152)
!3247 = !DILocation(line: 390, column: 10, scope: !3237, inlinedAt: !3152)
!3248 = !DILocation(line: 390, column: 16, scope: !3237, inlinedAt: !3152)
!3249 = !DILocation(line: 391, column: 6, scope: !3250, inlinedAt: !3152)
!3250 = distinct !DILexicalBlock(scope: !3237, file: !41, line: 391, column: 6)
!3251 = !DILocation(line: 391, column: 17, scope: !3250, inlinedAt: !3152)
!3252 = !DILocation(line: 391, column: 11, scope: !3250, inlinedAt: !3152)
!3253 = !DILocation(line: 392, column: 17, scope: !3250, inlinedAt: !3152)
!3254 = !DILocation(line: 394, column: 4, scope: !3229, inlinedAt: !3152)
!3255 = !DILocation(line: 396, column: 7, scope: !3222, inlinedAt: !3152)
!3256 = !DILocation(line: 396, column: 16, scope: !3222, inlinedAt: !3152)
!3257 = !DILocation(line: 396, column: 27, scope: !3222, inlinedAt: !3152)
!3258 = !DILocation(line: 397, column: 7, scope: !3222, inlinedAt: !3152)
!3259 = !DILocation(line: 397, column: 15, scope: !3222, inlinedAt: !3152)
!3260 = !DILocation(line: 397, column: 13, scope: !3222, inlinedAt: !3152)
!3261 = !DILocation(line: 399, column: 7, scope: !3150, inlinedAt: !3152)
!3262 = !DILocation(line: 399, column: 25, scope: !3150, inlinedAt: !3152)
!3263 = !DILocation(line: 400, column: 7, scope: !3150, inlinedAt: !3152)
!3264 = !DILocation(line: 400, column: 21, scope: !3150, inlinedAt: !3152)
!3265 = !DILocation(line: 401, column: 2, scope: !3150, inlinedAt: !3152)
!3266 = !DILocation(line: 401, column: 9, scope: !3267, inlinedAt: !3152)
!3267 = distinct !DILexicalBlock(scope: !3150, file: !41, line: 401, column: 2)
!3268 = !DILocation(line: 401, column: 23, scope: !3267, inlinedAt: !3152)
!3269 = !DILocation(line: 401, column: 17, scope: !3267, inlinedAt: !3152)
!3270 = !DILocalVariable(name: "e2", scope: !3150, file: !2, line: 403, type: !333, align: 8)
!3271 = !DILocation(line: 403, column: 7, scope: !3150, inlinedAt: !3152)
!3272 = !DILocation(line: 404, column: 7, scope: !3150, inlinedAt: !3152)
!3273 = !DILocalVariable(name: "e2val", scope: !3274, file: !2, line: 406, type: !333, align: 8)
!3274 = distinct !DILexicalBlock(scope: !3150, file: !41, line: 405, column: 2)
!3275 = !DILocation(line: 406, column: 8, scope: !3274, inlinedAt: !3152)
!3276 = !DILocation(line: 406, column: 39, scope: !3274, inlinedAt: !3152)
!3277 = !DILocation(line: 406, column: 45, scope: !3274, inlinedAt: !3152)
!3278 = !DILocation(line: 406, column: 32, scope: !3274, inlinedAt: !3152)
!3279 = !DILocation(line: 406, column: 16, scope: !3274, inlinedAt: !3152)
!3280 = !DILocation(line: 406, column: 63, scope: !3274, inlinedAt: !3152)
!3281 = !DILocation(line: 407, column: 8, scope: !3274, inlinedAt: !3152)
!3282 = !DILocation(line: 409, column: 2, scope: !3150, inlinedAt: !3152)
!3283 = !DILocation(line: 409, column: 12, scope: !3150, inlinedAt: !3152)
!3284 = !DILocation(line: 409, column: 8, scope: !3150, inlinedAt: !3152)
!3285 = !DILocation(line: 410, column: 7, scope: !3150, inlinedAt: !3152)
!3286 = !DILocation(line: 410, column: 17, scope: !3150, inlinedAt: !3152)
!3287 = !DILocation(line: 411, column: 6, scope: !3150, inlinedAt: !3152)
!3288 = !DILocation(line: 411, column: 26, scope: !3150, inlinedAt: !3152)
!3289 = !DILocation(line: 412, column: 6, scope: !3150, inlinedAt: !3152)
!3290 = !DILocation(line: 412, column: 53, scope: !3150, inlinedAt: !3152)
!3291 = !DILocation(line: 414, column: 2, scope: !3150, inlinedAt: !3152)
!3292 = !DILocation(line: 414, column: 9, scope: !3293, inlinedAt: !3152)
!3293 = distinct !DILexicalBlock(scope: !3150, file: !41, line: 414, column: 2)
!3294 = !DILocation(line: 416, column: 7, scope: !3295, inlinedAt: !3152)
!3295 = distinct !DILexicalBlock(scope: !3293, file: !41, line: 415, column: 2)
!3296 = !DILocation(line: 418, column: 4, scope: !3297, inlinedAt: !3152)
!3297 = distinct !DILexicalBlock(scope: !3295, file: !41, line: 417, column: 3)
!3298 = !DILocation(line: 418, column: 9, scope: !3297, inlinedAt: !3152)
!3299 = !DILocation(line: 419, column: 4, scope: !3297, inlinedAt: !3152)
!3300 = !DILocation(line: 419, column: 9, scope: !3297, inlinedAt: !3152)
!3301 = !DILocation(line: 423, column: 4, scope: !3302, inlinedAt: !3152)
!3302 = distinct !DILexicalBlock(scope: !3295, file: !41, line: 422, column: 3)
!3303 = !DILocation(line: 423, column: 9, scope: !3302, inlinedAt: !3152)
!3304 = !DILocation(line: 424, column: 4, scope: !3302, inlinedAt: !3152)
!3305 = !DILocation(line: 424, column: 9, scope: !3302, inlinedAt: !3152)
!3306 = !DILocation(line: 426, column: 3, scope: !3295, inlinedAt: !3152)
!3307 = !DILocalVariable(name: "bits", scope: !3150, file: !2, line: 428, type: !18, align: 4)
!3308 = !DILocation(line: 428, column: 6, scope: !3150, inlinedAt: !3152)
!3309 = !DILocation(line: 428, column: 13, scope: !3150, inlinedAt: !3152)
!3310 = !DILocation(line: 429, column: 19, scope: !3150, inlinedAt: !3152)
!3311 = !DILocation(line: 429, column: 14, scope: !3150, inlinedAt: !3152)
!3312 = !DILocation(line: 429, column: 6, scope: !3150, inlinedAt: !3152)
!3313 = !DILocation(line: 431, column: 21, scope: !3314, inlinedAt: !3152)
!3314 = distinct !DILexicalBlock(scope: !3150, file: !41, line: 430, column: 2)
!3315 = !DILocation(line: 431, column: 16, scope: !3314, inlinedAt: !3152)
!3316 = !DILocation(line: 431, column: 11, scope: !3314, inlinedAt: !3152)
!3317 = !DILocation(line: 432, column: 7, scope: !3314, inlinedAt: !3152)
!3318 = !DILocation(line: 432, column: 24, scope: !3314, inlinedAt: !3152)
!3319 = !DILocalVariable(name: "bias", scope: !3150, file: !2, line: 434, type: !2345, align: 8)
!3320 = !DILocation(line: 434, column: 9, scope: !3150, inlinedAt: !3152)
!3321 = !DILocation(line: 435, column: 6, scope: !3150, inlinedAt: !3152)
!3322 = !DILocation(line: 437, column: 70, scope: !3323, inlinedAt: !3152)
!3323 = distinct !DILexicalBlock(scope: !3150, file: !41, line: 436, column: 2)
!3324 = !DILocation(line: 437, column: 41, scope: !3323, inlinedAt: !3152)
!3325 = !DILocation(line: 1024, column: 52, scope: !3326, inlinedAt: !3327)
!3326 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3327 = !DILocation(line: 437, column: 31, scope: !3323, inlinedAt: !3152)
!3328 = !DILocation(line: 1024, column: 41, scope: !3326, inlinedAt: !3327)
!3329 = !DILocation(line: 437, column: 82, scope: !3323, inlinedAt: !3152)
!3330 = !DILocation(line: 41, column: 10, scope: !3331, inlinedAt: !3332)
!3331 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2570, file: !2570, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3332 = !DILocation(line: 288, column: 48, scope: !3333, inlinedAt: !3334)
!3333 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2564, file: !2564, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3334 = !DILocation(line: 437, column: 16, scope: !3323, inlinedAt: !3152)
!3335 = !DILocation(line: 288, column: 77, scope: !3333, inlinedAt: !3334)
!3336 = !DILocation(line: 440, column: 6, scope: !3150, inlinedAt: !3152)
!3337 = !DILocation(line: 440, column: 19, scope: !3150, inlinedAt: !3152)
!3338 = !DILocation(line: 440, column: 26, scope: !3150, inlinedAt: !3152)
!3339 = !DILocation(line: 442, column: 3, scope: !3340, inlinedAt: !3152)
!3340 = distinct !DILexicalBlock(scope: !3150, file: !41, line: 441, column: 2)
!3341 = !DILocation(line: 443, column: 7, scope: !3340, inlinedAt: !3152)
!3342 = !DILocation(line: 445, column: 6, scope: !3150, inlinedAt: !3152)
!3343 = !DILocation(line: 445, column: 13, scope: !3150, inlinedAt: !3152)
!3344 = !DILocation(line: 445, column: 21, scope: !3150, inlinedAt: !3152)
!3345 = !DILocation(line: 445, column: 32, scope: !3150, inlinedAt: !3152)
!3346 = !DILocation(line: 445, column: 39, scope: !3150, inlinedAt: !3152)
!3347 = !DILocation(line: 446, column: 2, scope: !3150, inlinedAt: !3152)
!3348 = !DILocation(line: 446, column: 7, scope: !3150, inlinedAt: !3152)
!3349 = !DILocation(line: 447, column: 7, scope: !3150, inlinedAt: !3152)
!3350 = !DILocation(line: 447, column: 17, scope: !3150, inlinedAt: !3152)
!3351 = !DILocation(line: 449, column: 26, scope: !3150, inlinedAt: !3152)
!3352 = !DILocation(line: 1024, column: 52, scope: !3353, inlinedAt: !3354)
!3353 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3354 = !DILocation(line: 449, column: 15, scope: !3150, inlinedAt: !3152)
!3355 = !DILocation(line: 1024, column: 41, scope: !3353, inlinedAt: !3354)
!3356 = !DILocation(line: 35, column: 11, scope: !3357, inlinedAt: !3359)
!3357 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 38, column: 1)
!3358 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3359 = !DILocation(line: 485, column: 10, scope: !3112, inlinedAt: !3114)
!3360 = !DILocalVariable(name: "x", scope: !3358, file: !2, line: 39, type: !2600, align: 16)
!3361 = !DILocation(line: 39, column: 13, scope: !3358, inlinedAt: !3359)
!3362 = !DILocalVariable(name: "emax", scope: !3358, file: !2, line: 41, type: !18, align: 4)
!3363 = !DILocation(line: 41, column: 6, scope: !3358, inlinedAt: !3359)
!3364 = !DILocation(line: 41, column: 13, scope: !3358, inlinedAt: !3359)
!3365 = !DILocalVariable(name: "index", scope: !3358, file: !2, line: 44, type: !66, align: 8)
!3366 = !DILocation(line: 44, column: 6, scope: !3358, inlinedAt: !3359)
!3367 = !DILocalVariable(name: "got_digit", scope: !3358, file: !2, line: 45, type: !131, align: 1)
!3368 = !DILocation(line: 45, column: 7, scope: !3358, inlinedAt: !3359)
!3369 = !DILocation(line: 45, column: 19, scope: !3358, inlinedAt: !3359)
!3370 = !DILocation(line: 45, column: 25, scope: !3358, inlinedAt: !3359)
!3371 = !DILocalVariable(name: "got_rad", scope: !3358, file: !2, line: 46, type: !131, align: 1)
!3372 = !DILocation(line: 46, column: 7, scope: !3358, inlinedAt: !3359)
!3373 = !DILocalVariable(name: "lrp", scope: !3358, file: !2, line: 47, type: !333, align: 8)
!3374 = !DILocation(line: 47, column: 7, scope: !3358, inlinedAt: !3359)
!3375 = !DILocalVariable(name: "dc", scope: !3358, file: !2, line: 47, type: !333, align: 8)
!3376 = !DILocation(line: 47, column: 12, scope: !3358, inlinedAt: !3359)
!3377 = !DILocalVariable(name: "k", scope: !3358, file: !2, line: 48, type: !18, align: 4)
!3378 = !DILocation(line: 48, column: 6, scope: !3358, inlinedAt: !3359)
!3379 = !DILocalVariable(name: "j", scope: !3358, file: !2, line: 48, type: !18, align: 4)
!3380 = !DILocation(line: 48, column: 9, scope: !3358, inlinedAt: !3359)
!3381 = !DILocalVariable(name: "lnz", scope: !3358, file: !2, line: 48, type: !18, align: 4)
!3382 = !DILocation(line: 48, column: 12, scope: !3358, inlinedAt: !3359)
!3383 = !DILocalVariable(name: "len", scope: !3358, file: !2, line: 49, type: !66, align: 8)
!3384 = !DILocation(line: 49, column: 6, scope: !3358, inlinedAt: !3359)
!3385 = !DILocation(line: 49, column: 12, scope: !3358, inlinedAt: !3359)
!3386 = !DILocalVariable(name: "last_char", scope: !3358, file: !2, line: 50, type: !66, align: 8)
!3387 = !DILocation(line: 50, column: 6, scope: !3358, inlinedAt: !3359)
!3388 = !DILocation(line: 50, column: 18, scope: !3358, inlinedAt: !3359)
!3389 = !DILocation(line: 52, column: 9, scope: !3358, inlinedAt: !3359)
!3390 = !DILocalVariable(name: "c", scope: !3358, file: !2, line: 54, type: !64, align: 1)
!3391 = !DILocation(line: 54, column: 7, scope: !3358, inlinedAt: !3359)
!3392 = !DILocation(line: 56, column: 2, scope: !3358, inlinedAt: !3359)
!3393 = !DILocation(line: 56, column: 14, scope: !3394, inlinedAt: !3359)
!3394 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 56, column: 2)
!3395 = !DILocation(line: 56, column: 20, scope: !3394, inlinedAt: !3359)
!3396 = !DILocation(line: 56, column: 10, scope: !3394, inlinedAt: !3359)
!3397 = !DILocation(line: 58, column: 7, scope: !3398, inlinedAt: !3359)
!3398 = distinct !DILexicalBlock(scope: !3394, file: !41, line: 57, column: 2)
!3399 = !DILocation(line: 58, column: 16, scope: !3398, inlinedAt: !3359)
!3400 = !DILocation(line: 58, column: 34, scope: !3398, inlinedAt: !3359)
!3401 = !DILocation(line: 59, column: 3, scope: !3398, inlinedAt: !3359)
!3402 = !DILocation(line: 62, column: 6, scope: !3358, inlinedAt: !3359)
!3403 = !DILocation(line: 64, column: 13, scope: !3404, inlinedAt: !3359)
!3404 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 63, column: 2)
!3405 = !DILocation(line: 65, column: 7, scope: !3404, inlinedAt: !3359)
!3406 = !DILocation(line: 65, column: 16, scope: !3404, inlinedAt: !3359)
!3407 = !DILocation(line: 67, column: 9, scope: !3408, inlinedAt: !3359)
!3408 = distinct !DILexicalBlock(scope: !3404, file: !41, line: 66, column: 3)
!3409 = !DILocation(line: 67, column: 27, scope: !3408, inlinedAt: !3359)
!3410 = !DILocation(line: 68, column: 11, scope: !3408, inlinedAt: !3359)
!3411 = !DILocation(line: 70, column: 7, scope: !3404, inlinedAt: !3359)
!3412 = !DILocation(line: 70, column: 16, scope: !3404, inlinedAt: !3359)
!3413 = !DILocation(line: 70, column: 34, scope: !3404, inlinedAt: !3359)
!3414 = !DILocation(line: 70, column: 42, scope: !3404, inlinedAt: !3359)
!3415 = !DILocation(line: 70, column: 40, scope: !3404, inlinedAt: !3359)
!3416 = !DILocation(line: 70, column: 30, scope: !3404, inlinedAt: !3359)
!3417 = !DILocation(line: 72, column: 4, scope: !3418, inlinedAt: !3359)
!3418 = distinct !DILexicalBlock(scope: !3404, file: !41, line: 71, column: 3)
!3419 = !DILocation(line: 73, column: 16, scope: !3418, inlinedAt: !3359)
!3420 = !DILocation(line: 74, column: 4, scope: !3418, inlinedAt: !3359)
!3421 = !DILocation(line: 74, column: 11, scope: !3422, inlinedAt: !3359)
!3422 = distinct !DILexicalBlock(scope: !3418, file: !41, line: 74, column: 4)
!3423 = !DILocation(line: 74, column: 24, scope: !3422, inlinedAt: !3359)
!3424 = !DILocation(line: 74, column: 38, scope: !3422, inlinedAt: !3359)
!3425 = !DILocation(line: 74, column: 46, scope: !3422, inlinedAt: !3359)
!3426 = !DILocation(line: 74, column: 44, scope: !3422, inlinedAt: !3359)
!3427 = !DILocation(line: 74, column: 34, scope: !3422, inlinedAt: !3359)
!3428 = !DILocation(line: 76, column: 5, scope: !3429, inlinedAt: !3359)
!3429 = distinct !DILexicalBlock(scope: !3422, file: !41, line: 75, column: 4)
!3430 = !DILocation(line: 81, column: 2, scope: !3358, inlinedAt: !3359)
!3431 = !DILocation(line: 81, column: 9, scope: !3432, inlinedAt: !3359)
!3432 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 81, column: 2)
!3433 = !DILocation(line: 81, column: 26, scope: !3432, inlinedAt: !3359)
!3434 = !DILocation(line: 85, column: 9, scope: !3435, inlinedAt: !3359)
!3435 = distinct !DILexicalBlock(scope: !3436, file: !41, line: 83, column: 3)
!3436 = distinct !DILexicalBlock(scope: !3432, file: !41, line: 82, column: 2)
!3437 = !DILocation(line: 86, column: 9, scope: !3438, inlinedAt: !3359)
!3438 = distinct !DILexicalBlock(scope: !3435, file: !41, line: 86, column: 5)
!3439 = !DILocation(line: 86, column: 25, scope: !3438, inlinedAt: !3359)
!3440 = !DILocation(line: 87, column: 15, scope: !3438, inlinedAt: !3359)
!3441 = !DILocation(line: 88, column: 11, scope: !3438, inlinedAt: !3359)
!3442 = !DILocation(line: 89, column: 9, scope: !3435, inlinedAt: !3359)
!3443 = !DILocation(line: 90, column: 5, scope: !3444, inlinedAt: !3359)
!3444 = distinct !DILexicalBlock(scope: !3435, file: !41, line: 90, column: 5)
!3445 = !DILocation(line: 91, column: 9, scope: !3444, inlinedAt: !3359)
!3446 = !DILocation(line: 91, column: 26, scope: !3444, inlinedAt: !3359)
!3447 = !DILocation(line: 92, column: 9, scope: !3444, inlinedAt: !3359)
!3448 = !DILocation(line: 94, column: 8, scope: !3449, inlinedAt: !3359)
!3449 = distinct !DILexicalBlock(scope: !3444, file: !41, line: 93, column: 5)
!3450 = !DILocation(line: 94, column: 15, scope: !3449, inlinedAt: !3359)
!3451 = !DILocation(line: 94, column: 13, scope: !3449, inlinedAt: !3359)
!3452 = !DILocation(line: 94, column: 25, scope: !3449, inlinedAt: !3359)
!3453 = !DILocation(line: 98, column: 8, scope: !3454, inlinedAt: !3359)
!3454 = distinct !DILexicalBlock(scope: !3444, file: !41, line: 97, column: 5)
!3455 = !DILocation(line: 98, column: 13, scope: !3454, inlinedAt: !3359)
!3456 = !DILocation(line: 100, column: 11, scope: !3444, inlinedAt: !3359)
!3457 = !DILocation(line: 100, column: 9, scope: !3444, inlinedAt: !3359)
!3458 = !DILocation(line: 102, column: 6, scope: !3459, inlinedAt: !3359)
!3459 = distinct !DILexicalBlock(scope: !3444, file: !41, line: 101, column: 5)
!3460 = !DILocation(line: 103, column: 10, scope: !3459, inlinedAt: !3359)
!3461 = !DILocation(line: 105, column: 17, scope: !3444, inlinedAt: !3359)
!3462 = !DILocation(line: 107, column: 5, scope: !3463, inlinedAt: !3359)
!3463 = distinct !DILexicalBlock(scope: !3435, file: !41, line: 107, column: 5)
!3464 = !DILocation(line: 108, column: 9, scope: !3463, inlinedAt: !3359)
!3465 = !DILocation(line: 108, column: 21, scope: !3463, inlinedAt: !3359)
!3466 = !DILocation(line: 108, column: 19, scope: !3463, inlinedAt: !3359)
!3467 = !DILocation(line: 111, column: 7, scope: !3436, inlinedAt: !3359)
!3468 = !DILocation(line: 111, column: 16, scope: !3436, inlinedAt: !3359)
!3469 = !DILocation(line: 111, column: 27, scope: !3436, inlinedAt: !3359)
!3470 = !DILocation(line: 112, column: 10, scope: !3436, inlinedAt: !3359)
!3471 = !DILocation(line: 112, column: 18, scope: !3436, inlinedAt: !3359)
!3472 = !DILocation(line: 113, column: 7, scope: !3436, inlinedAt: !3359)
!3473 = !DILocation(line: 113, column: 15, scope: !3436, inlinedAt: !3359)
!3474 = !DILocation(line: 113, column: 13, scope: !3436, inlinedAt: !3359)
!3475 = !DILocation(line: 115, column: 7, scope: !3358, inlinedAt: !3359)
!3476 = !DILocation(line: 115, column: 22, scope: !3358, inlinedAt: !3359)
!3477 = !DILocation(line: 116, column: 7, scope: !3358, inlinedAt: !3359)
!3478 = !DILocation(line: 116, column: 25, scope: !3358, inlinedAt: !3359)
!3479 = !DILocation(line: 117, column: 7, scope: !3358, inlinedAt: !3359)
!3480 = !DILocation(line: 119, column: 7, scope: !3481, inlinedAt: !3359)
!3481 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 118, column: 2)
!3482 = !DILocation(line: 119, column: 20, scope: !3481, inlinedAt: !3359)
!3483 = !DILocation(line: 119, column: 34, scope: !3481, inlinedAt: !3359)
!3484 = !DILocalVariable(name: "e10", scope: !3481, file: !2, line: 120, type: !333, align: 8)
!3485 = !DILocation(line: 120, column: 8, scope: !3481, inlinedAt: !3359)
!3486 = !DILocation(line: 120, column: 37, scope: !3481, inlinedAt: !3359)
!3487 = !DILocation(line: 120, column: 43, scope: !3481, inlinedAt: !3359)
!3488 = !DILocation(line: 120, column: 30, scope: !3481, inlinedAt: !3359)
!3489 = !DILocation(line: 120, column: 14, scope: !3481, inlinedAt: !3359)
!3490 = !DILocation(line: 120, column: 60, scope: !3481, inlinedAt: !3359)
!3491 = !DILocation(line: 121, column: 3, scope: !3481, inlinedAt: !3359)
!3492 = !DILocation(line: 121, column: 10, scope: !3481, inlinedAt: !3359)
!3493 = !DILocation(line: 123, column: 11, scope: !3358, inlinedAt: !3359)
!3494 = !DILocation(line: 123, column: 20, scope: !3358, inlinedAt: !3359)
!3495 = !DILocation(line: 125, column: 10, scope: !3496, inlinedAt: !3359)
!3496 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 124, column: 2)
!3497 = !DILocation(line: 128, column: 9, scope: !3358, inlinedAt: !3359)
!3498 = !DILocation(line: 128, column: 20, scope: !3358, inlinedAt: !3359)
!3499 = !DILocation(line: 131, column: 6, scope: !3358, inlinedAt: !3359)
!3500 = !DILocation(line: 131, column: 13, scope: !3358, inlinedAt: !3359)
!3501 = !DILocation(line: 131, column: 19, scope: !3358, inlinedAt: !3359)
!3502 = !DILocation(line: 131, column: 31, scope: !3358, inlinedAt: !3359)
!3503 = !DILocation(line: 131, column: 54, scope: !3358, inlinedAt: !3359)
!3504 = !DILocation(line: 131, column: 46, scope: !3358, inlinedAt: !3359)
!3505 = !DILocation(line: 131, column: 80, scope: !3358, inlinedAt: !3359)
!3506 = !DILocation(line: 131, column: 97, scope: !3358, inlinedAt: !3359)
!3507 = !DILocation(line: 132, column: 6, scope: !3358, inlinedAt: !3359)
!3508 = !DILocation(line: 132, column: 32, scope: !3358, inlinedAt: !3359)
!3509 = !DILocation(line: 133, column: 6, scope: !3358, inlinedAt: !3359)
!3510 = !DILocation(line: 133, column: 54, scope: !3358, inlinedAt: !3359)
!3511 = !DILocation(line: 136, column: 6, scope: !3358, inlinedAt: !3359)
!3512 = !DILocation(line: 138, column: 3, scope: !3513, inlinedAt: !3359)
!3513 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 137, column: 2)
!3514 = !DILocation(line: 138, column: 10, scope: !3515, inlinedAt: !3359)
!3515 = distinct !DILexicalBlock(scope: !3513, file: !41, line: 138, column: 3)
!3516 = !DILocation(line: 138, column: 24, scope: !3515, inlinedAt: !3359)
!3517 = !DILocation(line: 138, column: 22, scope: !3515, inlinedAt: !3359)
!3518 = !DILocation(line: 138, column: 17, scope: !3515, inlinedAt: !3359)
!3519 = !DILocation(line: 139, column: 3, scope: !3513, inlinedAt: !3359)
!3520 = !DILocation(line: 140, column: 7, scope: !3513, inlinedAt: !3359)
!3521 = !DILocalVariable(name: "a", scope: !3358, file: !2, line: 143, type: !18, align: 4)
!3522 = !DILocation(line: 143, column: 6, scope: !3358, inlinedAt: !3359)
!3523 = !DILocalVariable(name: "z", scope: !3358, file: !2, line: 144, type: !18, align: 4)
!3524 = !DILocation(line: 144, column: 6, scope: !3358, inlinedAt: !3359)
!3525 = !DILocation(line: 144, column: 10, scope: !3358, inlinedAt: !3359)
!3526 = !DILocalVariable(name: "e2", scope: !3358, file: !2, line: 145, type: !18, align: 4)
!3527 = !DILocation(line: 145, column: 6, scope: !3358, inlinedAt: !3359)
!3528 = !DILocalVariable(name: "rp", scope: !3358, file: !2, line: 146, type: !333, align: 8)
!3529 = !DILocation(line: 146, column: 7, scope: !3358, inlinedAt: !3359)
!3530 = !DILocation(line: 146, column: 12, scope: !3358, inlinedAt: !3359)
!3531 = !DILocation(line: 149, column: 6, scope: !3358, inlinedAt: !3359)
!3532 = !DILocation(line: 149, column: 17, scope: !3358, inlinedAt: !3359)
!3533 = !DILocation(line: 149, column: 24, scope: !3358, inlinedAt: !3359)
!3534 = !DILocation(line: 149, column: 30, scope: !3358, inlinedAt: !3359)
!3535 = !DILocation(line: 151, column: 7, scope: !3536, inlinedAt: !3359)
!3536 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 150, column: 2)
!3537 = !DILocation(line: 151, column: 23, scope: !3536, inlinedAt: !3359)
!3538 = !DILocation(line: 151, column: 40, scope: !3536, inlinedAt: !3359)
!3539 = !DILocation(line: 152, column: 7, scope: !3536, inlinedAt: !3359)
!3540 = !DILocation(line: 152, column: 22, scope: !3536, inlinedAt: !3359)
!3541 = !DILocation(line: 152, column: 39, scope: !3536, inlinedAt: !3359)
!3542 = !DILocation(line: 152, column: 53, scope: !3536, inlinedAt: !3359)
!3543 = !DILocation(line: 152, column: 49, scope: !3536, inlinedAt: !3359)
!3544 = !DILocalVariable(name: "bitlim", scope: !3536, file: !2, line: 153, type: !18, align: 4)
!3545 = !DILocation(line: 153, column: 7, scope: !3536, inlinedAt: !3359)
!3546 = !DILocation(line: 153, column: 34, scope: !3536, inlinedAt: !3359)
!3547 = !DILocation(line: 153, column: 29, scope: !3536, inlinedAt: !3359)
!3548 = !DILocation(line: 153, column: 24, scope: !3536, inlinedAt: !3359)
!3549 = !DILocation(line: 153, column: 16, scope: !3536, inlinedAt: !3359)
!3550 = !DILocation(line: 154, column: 7, scope: !3536, inlinedAt: !3359)
!3551 = !DILocation(line: 154, column: 24, scope: !3536, inlinedAt: !3359)
!3552 = !DILocation(line: 154, column: 30, scope: !3536, inlinedAt: !3359)
!3553 = !DILocation(line: 154, column: 22, scope: !3536, inlinedAt: !3359)
!3554 = !DILocation(line: 154, column: 50, scope: !3536, inlinedAt: !3359)
!3555 = !DILocation(line: 154, column: 67, scope: !3536, inlinedAt: !3359)
!3556 = !DILocation(line: 154, column: 77, scope: !3536, inlinedAt: !3359)
!3557 = !DILocation(line: 158, column: 6, scope: !3358, inlinedAt: !3359)
!3558 = !DILocalVariable(name: "rpm9", scope: !3559, file: !2, line: 160, type: !333, align: 8)
!3559 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 159, column: 2)
!3560 = !DILocation(line: 160, column: 8, scope: !3559, inlinedAt: !3359)
!3561 = !DILocation(line: 160, column: 15, scope: !3559, inlinedAt: !3359)
!3562 = !DILocation(line: 160, column: 25, scope: !3559, inlinedAt: !3359)
!3563 = !DILocation(line: 160, column: 34, scope: !3559, inlinedAt: !3359)
!3564 = !DILocalVariable(name: "p10", scope: !3559, file: !2, line: 161, type: !18, align: 4)
!3565 = !DILocation(line: 161, column: 7, scope: !3559, inlinedAt: !3359)
!3566 = !DILocation(line: 161, column: 22, scope: !3559, inlinedAt: !3359)
!3567 = !DILocation(line: 161, column: 18, scope: !3559, inlinedAt: !3359)
!3568 = !DILocalVariable(name: "carry", scope: !3559, file: !2, line: 162, type: !3, align: 4)
!3569 = !DILocation(line: 162, column: 8, scope: !3559, inlinedAt: !3359)
!3570 = !DILocation(line: 162, column: 16, scope: !3559, inlinedAt: !3359)
!3571 = !DILocation(line: 163, column: 12, scope: !3572, inlinedAt: !3359)
!3572 = distinct !DILexicalBlock(scope: !3559, file: !41, line: 163, column: 3)
!3573 = !DILocation(line: 163, column: 15, scope: !3572, inlinedAt: !3359)
!3574 = !DILocation(line: 163, column: 20, scope: !3572, inlinedAt: !3359)
!3575 = !DILocalVariable(name: "tmp", scope: !3576, file: !2, line: 165, type: !3, align: 4)
!3576 = distinct !DILexicalBlock(scope: !3572, file: !41, line: 164, column: 3)
!3577 = !DILocation(line: 165, column: 9, scope: !3576, inlinedAt: !3359)
!3578 = !DILocation(line: 165, column: 17, scope: !3576, inlinedAt: !3359)
!3579 = !DILocation(line: 165, column: 22, scope: !3576, inlinedAt: !3359)
!3580 = !DILocation(line: 165, column: 15, scope: !3576, inlinedAt: !3359)
!3581 = !DILocation(line: 166, column: 6, scope: !3576, inlinedAt: !3359)
!3582 = !DILocation(line: 166, column: 13, scope: !3576, inlinedAt: !3359)
!3583 = !DILocation(line: 166, column: 18, scope: !3576, inlinedAt: !3359)
!3584 = !DILocation(line: 166, column: 11, scope: !3576, inlinedAt: !3359)
!3585 = !DILocation(line: 166, column: 24, scope: !3576, inlinedAt: !3359)
!3586 = !DILocation(line: 167, column: 25, scope: !3576, inlinedAt: !3359)
!3587 = !DILocation(line: 167, column: 12, scope: !3576, inlinedAt: !3359)
!3588 = !DILocation(line: 167, column: 31, scope: !3576, inlinedAt: !3359)
!3589 = !DILocation(line: 168, column: 8, scope: !3576, inlinedAt: !3359)
!3590 = !DILocation(line: 168, column: 13, scope: !3576, inlinedAt: !3359)
!3591 = !DILocation(line: 168, column: 21, scope: !3576, inlinedAt: !3359)
!3592 = !DILocation(line: 170, column: 10, scope: !3593, inlinedAt: !3359)
!3593 = distinct !DILexicalBlock(scope: !3576, file: !41, line: 169, column: 4)
!3594 = !DILocation(line: 171, column: 5, scope: !3593, inlinedAt: !3359)
!3595 = !DILocation(line: 163, column: 23, scope: !3572, inlinedAt: !3359)
!3596 = !DILocation(line: 174, column: 7, scope: !3559, inlinedAt: !3359)
!3597 = !DILocation(line: 174, column: 16, scope: !3559, inlinedAt: !3359)
!3598 = !DILocation(line: 174, column: 23, scope: !3559, inlinedAt: !3359)
!3599 = !DILocation(line: 175, column: 3, scope: !3559, inlinedAt: !3359)
!3600 = !DILocation(line: 175, column: 13, scope: !3559, inlinedAt: !3359)
!3601 = !DILocation(line: 175, column: 9, scope: !3559, inlinedAt: !3359)
!3602 = !DILocation(line: 179, column: 2, scope: !3358, inlinedAt: !3359)
!3603 = !DILocation(line: 179, column: 9, scope: !3604, inlinedAt: !3359)
!3604 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 179, column: 2)
!3605 = !DILocation(line: 179, column: 30, scope: !3604, inlinedAt: !3359)
!3606 = !DILocation(line: 179, column: 53, scope: !3604, inlinedAt: !3359)
!3607 = !DILocation(line: 179, column: 51, scope: !3604, inlinedAt: !3359)
!3608 = !DILocalVariable(name: "carry", scope: !3609, file: !2, line: 181, type: !3, align: 4)
!3609 = distinct !DILexicalBlock(scope: !3604, file: !41, line: 180, column: 2)
!3610 = !DILocation(line: 181, column: 8, scope: !3609, inlinedAt: !3359)
!3611 = !DILocation(line: 181, column: 16, scope: !3609, inlinedAt: !3359)
!3612 = !DILocation(line: 182, column: 3, scope: !3609, inlinedAt: !3359)
!3613 = !DILocation(line: 183, column: 13, scope: !3614, inlinedAt: !3359)
!3614 = distinct !DILexicalBlock(scope: !3609, file: !41, line: 183, column: 3)
!3615 = !DILocalVariable(name: "tmp", scope: !3616, file: !2, line: 185, type: !67, align: 8)
!3616 = distinct !DILexicalBlock(scope: !3614, file: !41, line: 184, column: 3)
!3617 = !DILocation(line: 185, column: 10, scope: !3616, inlinedAt: !3359)
!3618 = !DILocation(line: 185, column: 25, scope: !3616, inlinedAt: !3359)
!3619 = !DILocation(line: 185, column: 17, scope: !3616, inlinedAt: !3359)
!3620 = !DILocation(line: 185, column: 36, scope: !3616, inlinedAt: !3359)
!3621 = !DILocation(line: 186, column: 8, scope: !3616, inlinedAt: !3359)
!3622 = !DILocation(line: 188, column: 20, scope: !3623, inlinedAt: !3359)
!3623 = distinct !DILexicalBlock(scope: !3616, file: !41, line: 187, column: 4)
!3624 = !DILocation(line: 188, column: 14, scope: !3623, inlinedAt: !3359)
!3625 = !DILocation(line: 189, column: 7, scope: !3623, inlinedAt: !3359)
!3626 = !DILocation(line: 189, column: 19, scope: !3623, inlinedAt: !3359)
!3627 = !DILocation(line: 189, column: 13, scope: !3623, inlinedAt: !3359)
!3628 = !DILocation(line: 193, column: 13, scope: !3629, inlinedAt: !3359)
!3629 = distinct !DILexicalBlock(scope: !3616, file: !41, line: 192, column: 4)
!3630 = !DILocation(line: 194, column: 7, scope: !3629, inlinedAt: !3359)
!3631 = !DILocation(line: 194, column: 13, scope: !3629, inlinedAt: !3359)
!3632 = !DILocation(line: 196, column: 8, scope: !3616, inlinedAt: !3359)
!3633 = !DILocation(line: 196, column: 14, scope: !3616, inlinedAt: !3359)
!3634 = !DILocation(line: 196, column: 31, scope: !3616, inlinedAt: !3359)
!3635 = !DILocation(line: 196, column: 36, scope: !3616, inlinedAt: !3359)
!3636 = !DILocation(line: 196, column: 44, scope: !3616, inlinedAt: !3359)
!3637 = !DILocation(line: 196, column: 52, scope: !3616, inlinedAt: !3359)
!3638 = !DILocation(line: 197, column: 8, scope: !3616, inlinedAt: !3359)
!3639 = !DILocation(line: 197, column: 13, scope: !3616, inlinedAt: !3359)
!3640 = !DILocation(line: 197, column: 16, scope: !3616, inlinedAt: !3359)
!3641 = !DILocation(line: 183, column: 35, scope: !3614, inlinedAt: !3359)
!3642 = !DILocation(line: 199, column: 7, scope: !3609, inlinedAt: !3359)
!3643 = !DILocation(line: 201, column: 4, scope: !3644, inlinedAt: !3359)
!3644 = distinct !DILexicalBlock(scope: !3609, file: !41, line: 200, column: 3)
!3645 = !DILocation(line: 202, column: 9, scope: !3644, inlinedAt: !3359)
!3646 = !DILocation(line: 203, column: 8, scope: !3644, inlinedAt: !3359)
!3647 = !DILocation(line: 203, column: 13, scope: !3644, inlinedAt: !3359)
!3648 = !DILocation(line: 205, column: 10, scope: !3649, inlinedAt: !3359)
!3649 = distinct !DILexicalBlock(scope: !3644, file: !41, line: 204, column: 4)
!3650 = !DILocation(line: 206, column: 8, scope: !3649, inlinedAt: !3359)
!3651 = !DILocation(line: 206, column: 28, scope: !3649, inlinedAt: !3359)
!3652 = !DILocation(line: 206, column: 5, scope: !3649, inlinedAt: !3359)
!3653 = !DILocation(line: 208, column: 6, scope: !3644, inlinedAt: !3359)
!3654 = !DILocation(line: 208, column: 11, scope: !3644, inlinedAt: !3359)
!3655 = !DILocation(line: 213, column: 2, scope: !3358, inlinedAt: !3359)
!3656 = !DILocalVariable(name: "carry", scope: !3657, file: !2, line: 215, type: !3, align: 4)
!3657 = distinct !DILexicalBlock(scope: !3658, file: !41, line: 214, column: 2)
!3658 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 213, column: 2)
!3659 = !DILocation(line: 215, column: 8, scope: !3657, inlinedAt: !3359)
!3660 = !DILocation(line: 215, column: 16, scope: !3657, inlinedAt: !3359)
!3661 = !DILocalVariable(name: "sh", scope: !3657, file: !2, line: 216, type: !18, align: 4)
!3662 = !DILocation(line: 216, column: 7, scope: !3657, inlinedAt: !3359)
!3663 = !DILocation(line: 216, column: 12, scope: !3657, inlinedAt: !3359)
!3664 = !DILocalVariable(name: "i", scope: !3657, file: !2, line: 217, type: !18, align: 4)
!3665 = !DILocation(line: 217, column: 7, scope: !3657, inlinedAt: !3359)
!3666 = !DILocation(line: 218, column: 12, scope: !3667, inlinedAt: !3359)
!3667 = distinct !DILexicalBlock(scope: !3657, file: !41, line: 218, column: 3)
!3668 = !DILocation(line: 218, column: 15, scope: !3667, inlinedAt: !3359)
!3669 = !DILocation(line: 220, column: 9, scope: !3670, inlinedAt: !3359)
!3670 = distinct !DILexicalBlock(scope: !3667, file: !41, line: 219, column: 3)
!3671 = !DILocation(line: 220, column: 13, scope: !3670, inlinedAt: !3359)
!3672 = !DILocation(line: 221, column: 8, scope: !3670, inlinedAt: !3359)
!3673 = !DILocation(line: 221, column: 13, scope: !3670, inlinedAt: !3359)
!3674 = !DILocation(line: 221, column: 20, scope: !3670, inlinedAt: !3359)
!3675 = !DILocation(line: 221, column: 28, scope: !3670, inlinedAt: !3359)
!3676 = !DILocation(line: 221, column: 18, scope: !3670, inlinedAt: !3359)
!3677 = !DILocation(line: 223, column: 9, scope: !3678, inlinedAt: !3359)
!3678 = distinct !DILexicalBlock(scope: !3670, file: !41, line: 222, column: 4)
!3679 = !DILocation(line: 224, column: 5, scope: !3678, inlinedAt: !3359)
!3680 = !DILocation(line: 226, column: 11, scope: !3670, inlinedAt: !3359)
!3681 = !DILocation(line: 226, column: 15, scope: !3670, inlinedAt: !3359)
!3682 = !DILocation(line: 226, column: 31, scope: !3670, inlinedAt: !3359)
!3683 = !DILocation(line: 226, column: 8, scope: !3670, inlinedAt: !3359)
!3684 = !DILocation(line: 226, column: 35, scope: !3670, inlinedAt: !3359)
!3685 = !DILocation(line: 218, column: 28, scope: !3667, inlinedAt: !3359)
!3686 = !DILocation(line: 228, column: 7, scope: !3657, inlinedAt: !3359)
!3687 = !DILocation(line: 228, column: 23, scope: !3657, inlinedAt: !3359)
!3688 = !DILocation(line: 228, column: 42, scope: !3657, inlinedAt: !3359)
!3689 = !DILocation(line: 229, column: 7, scope: !3657, inlinedAt: !3359)
!3690 = !DILocation(line: 229, column: 34, scope: !3657, inlinedAt: !3359)
!3691 = !DILocation(line: 230, column: 3, scope: !3657, inlinedAt: !3359)
!3692 = !DILocation(line: 230, column: 9, scope: !3657, inlinedAt: !3359)
!3693 = !DILocation(line: 231, column: 12, scope: !3694, inlinedAt: !3359)
!3694 = distinct !DILexicalBlock(scope: !3657, file: !41, line: 231, column: 3)
!3695 = !DILocation(line: 231, column: 15, scope: !3694, inlinedAt: !3359)
!3696 = !DILocation(line: 231, column: 20, scope: !3694, inlinedAt: !3359)
!3697 = !DILocalVariable(name: "tmp", scope: !3698, file: !2, line: 233, type: !3, align: 4)
!3698 = distinct !DILexicalBlock(scope: !3694, file: !41, line: 232, column: 3)
!3699 = !DILocation(line: 233, column: 9, scope: !3698, inlinedAt: !3359)
!3700 = !DILocation(line: 233, column: 17, scope: !3698, inlinedAt: !3359)
!3701 = !DILocation(line: 233, column: 28, scope: !3698, inlinedAt: !3359)
!3702 = !DILocation(line: 233, column: 23, scope: !3698, inlinedAt: !3359)
!3703 = !DILocation(line: 233, column: 15, scope: !3698, inlinedAt: !3359)
!3704 = !DILocation(line: 234, column: 6, scope: !3698, inlinedAt: !3359)
!3705 = !DILocation(line: 234, column: 13, scope: !3698, inlinedAt: !3359)
!3706 = !DILocation(line: 234, column: 19, scope: !3698, inlinedAt: !3359)
!3707 = !DILocation(line: 234, column: 11, scope: !3698, inlinedAt: !3359)
!3708 = !DILocation(line: 234, column: 24, scope: !3698, inlinedAt: !3359)
!3709 = !DILocation(line: 235, column: 27, scope: !3698, inlinedAt: !3359)
!3710 = !DILocation(line: 235, column: 13, scope: !3698, inlinedAt: !3359)
!3711 = !DILocation(line: 235, column: 33, scope: !3698, inlinedAt: !3359)
!3712 = !DILocation(line: 236, column: 8, scope: !3698, inlinedAt: !3359)
!3713 = !DILocation(line: 236, column: 13, scope: !3698, inlinedAt: !3359)
!3714 = !DILocation(line: 236, column: 21, scope: !3698, inlinedAt: !3359)
!3715 = !DILocation(line: 238, column: 10, scope: !3716, inlinedAt: !3359)
!3716 = distinct !DILexicalBlock(scope: !3698, file: !41, line: 237, column: 4)
!3717 = !DILocation(line: 239, column: 5, scope: !3716, inlinedAt: !3359)
!3718 = !DILocation(line: 240, column: 5, scope: !3716, inlinedAt: !3359)
!3719 = !DILocation(line: 231, column: 28, scope: !3694, inlinedAt: !3359)
!3720 = !DILocation(line: 243, column: 7, scope: !3657, inlinedAt: !3359)
!3721 = !DILocation(line: 245, column: 9, scope: !3722, inlinedAt: !3359)
!3722 = distinct !DILexicalBlock(scope: !3657, file: !41, line: 244, column: 3)
!3723 = !DILocation(line: 245, column: 26, scope: !3722, inlinedAt: !3359)
!3724 = !DILocation(line: 247, column: 7, scope: !3725, inlinedAt: !3359)
!3725 = distinct !DILexicalBlock(scope: !3722, file: !41, line: 246, column: 4)
!3726 = !DILocation(line: 247, column: 12, scope: !3725, inlinedAt: !3359)
!3727 = !DILocation(line: 248, column: 10, scope: !3725, inlinedAt: !3359)
!3728 = !DILocation(line: 252, column: 8, scope: !3729, inlinedAt: !3359)
!3729 = distinct !DILexicalBlock(scope: !3722, file: !41, line: 251, column: 4)
!3730 = !DILocation(line: 252, column: 5, scope: !3729, inlinedAt: !3359)
!3731 = !DILocalVariable(name: "y", scope: !3358, file: !2, line: 258, type: !2345, align: 8)
!3732 = !DILocation(line: 258, column: 9, scope: !3358, inlinedAt: !3359)
!3733 = !DILocalVariable(name: "i", scope: !3358, file: !2, line: 259, type: !18, align: 4)
!3734 = !DILocation(line: 259, column: 6, scope: !3358, inlinedAt: !3359)
!3735 = !DILocation(line: 260, column: 11, scope: !3736, inlinedAt: !3359)
!3736 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 260, column: 2)
!3737 = !DILocation(line: 260, column: 14, scope: !3736, inlinedAt: !3359)
!3738 = !DILocation(line: 262, column: 8, scope: !3739, inlinedAt: !3359)
!3739 = distinct !DILexicalBlock(scope: !3736, file: !41, line: 261, column: 2)
!3740 = !DILocation(line: 262, column: 12, scope: !3739, inlinedAt: !3359)
!3741 = !DILocation(line: 262, column: 25, scope: !3739, inlinedAt: !3359)
!3742 = !DILocation(line: 262, column: 36, scope: !3739, inlinedAt: !3359)
!3743 = !DILocation(line: 262, column: 31, scope: !3739, inlinedAt: !3359)
!3744 = !DILocation(line: 262, column: 58, scope: !3739, inlinedAt: !3359)
!3745 = !DILocation(line: 263, column: 22, scope: !3739, inlinedAt: !3359)
!3746 = !DILocation(line: 263, column: 7, scope: !3739, inlinedAt: !3359)
!3747 = !DILocation(line: 263, column: 29, scope: !3739, inlinedAt: !3359)
!3748 = !DILocation(line: 263, column: 33, scope: !3739, inlinedAt: !3359)
!3749 = !DILocation(line: 260, column: 27, scope: !3736, inlinedAt: !3359)
!3750 = !DILocation(line: 266, column: 2, scope: !3358, inlinedAt: !3359)
!3751 = !DILocation(line: 266, column: 7, scope: !3358, inlinedAt: !3359)
!3752 = !DILocalVariable(name: "denormal", scope: !3358, file: !2, line: 268, type: !131, align: 1)
!3753 = !DILocation(line: 268, column: 7, scope: !3358, inlinedAt: !3359)
!3754 = !DILocalVariable(name: "bits", scope: !3358, file: !2, line: 270, type: !3, align: 4)
!3755 = !DILocation(line: 270, column: 7, scope: !3358, inlinedAt: !3359)
!3756 = !DILocation(line: 270, column: 14, scope: !3358, inlinedAt: !3359)
!3757 = !DILocation(line: 271, column: 6, scope: !3358, inlinedAt: !3359)
!3758 = !DILocation(line: 271, column: 37, scope: !3358, inlinedAt: !3359)
!3759 = !DILocation(line: 271, column: 19, scope: !3358, inlinedAt: !3359)
!3760 = !DILocation(line: 273, column: 34, scope: !3761, inlinedAt: !3359)
!3761 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 272, column: 2)
!3762 = !DILocation(line: 273, column: 16, scope: !3761, inlinedAt: !3359)
!3763 = !DILocation(line: 274, column: 7, scope: !3761, inlinedAt: !3359)
!3764 = !DILocation(line: 274, column: 24, scope: !3761, inlinedAt: !3359)
!3765 = !DILocation(line: 275, column: 14, scope: !3761, inlinedAt: !3359)
!3766 = !DILocalVariable(name: "bias", scope: !3358, file: !2, line: 279, type: !2345, align: 8)
!3767 = !DILocation(line: 279, column: 9, scope: !3358, inlinedAt: !3359)
!3768 = !DILocalVariable(name: "frac", scope: !3358, file: !2, line: 280, type: !2345, align: 8)
!3769 = !DILocation(line: 280, column: 9, scope: !3358, inlinedAt: !3359)
!3770 = !DILocation(line: 281, column: 6, scope: !3358, inlinedAt: !3359)
!3771 = !DILocation(line: 283, column: 69, scope: !3772, inlinedAt: !3359)
!3772 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 282, column: 2)
!3773 = !DILocation(line: 283, column: 41, scope: !3772, inlinedAt: !3359)
!3774 = !DILocation(line: 1024, column: 52, scope: !3775, inlinedAt: !3776)
!3775 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3776 = !DILocation(line: 283, column: 31, scope: !3772, inlinedAt: !3359)
!3777 = !DILocation(line: 1024, column: 41, scope: !3775, inlinedAt: !3776)
!3778 = !DILocation(line: 41, column: 10, scope: !3779, inlinedAt: !3780)
!3779 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2570, file: !2570, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3780 = !DILocation(line: 288, column: 48, scope: !3781, inlinedAt: !3782)
!3781 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2564, file: !2564, line: 288, scopeLine: 288, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3782 = !DILocation(line: 283, column: 16, scope: !3772, inlinedAt: !3359)
!3783 = !DILocation(line: 288, column: 77, scope: !3781, inlinedAt: !3782)
!3784 = !DILocation(line: 284, column: 10, scope: !3772, inlinedAt: !3359)
!3785 = !DILocation(line: 284, column: 54, scope: !3772, inlinedAt: !3359)
!3786 = !DILocation(line: 284, column: 36, scope: !3772, inlinedAt: !3359)
!3787 = !DILocation(line: 1024, column: 52, scope: !3788, inlinedAt: !3789)
!3788 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3789 = !DILocation(line: 284, column: 20, scope: !3772, inlinedAt: !3359)
!3790 = !DILocation(line: 1024, column: 41, scope: !3788, inlinedAt: !3789)
!3791 = !DILocation(line: 285, column: 3, scope: !3772, inlinedAt: !3359)
!3792 = !DILocation(line: 285, column: 8, scope: !3772, inlinedAt: !3359)
!3793 = !DILocation(line: 286, column: 3, scope: !3772, inlinedAt: !3359)
!3794 = !DILocation(line: 286, column: 8, scope: !3772, inlinedAt: !3359)
!3795 = !DILocation(line: 290, column: 7, scope: !3358, inlinedAt: !3359)
!3796 = !DILocation(line: 290, column: 11, scope: !3358, inlinedAt: !3359)
!3797 = !DILocation(line: 290, column: 24, scope: !3358, inlinedAt: !3359)
!3798 = !DILocalVariable(name: "t", scope: !3799, file: !2, line: 292, type: !3, align: 4)
!3799 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 291, column: 2)
!3800 = !DILocation(line: 292, column: 8, scope: !3799, inlinedAt: !3359)
!3801 = !DILocation(line: 292, column: 15, scope: !3799, inlinedAt: !3359)
!3802 = !DILocation(line: 292, column: 19, scope: !3799, inlinedAt: !3359)
!3803 = !DILocation(line: 295, column: 9, scope: !3804, inlinedAt: !3359)
!3804 = distinct !DILexicalBlock(scope: !3799, file: !41, line: 293, column: 3)
!3805 = !DILocation(line: 295, column: 27, scope: !3804, inlinedAt: !3359)
!3806 = !DILocation(line: 295, column: 33, scope: !3804, inlinedAt: !3359)
!3807 = !DILocation(line: 295, column: 37, scope: !3804, inlinedAt: !3359)
!3808 = !DILocation(line: 295, column: 54, scope: !3804, inlinedAt: !3359)
!3809 = !DILocation(line: 296, column: 5, scope: !3810, inlinedAt: !3359)
!3810 = distinct !DILexicalBlock(scope: !3804, file: !41, line: 296, column: 5)
!3811 = !DILocation(line: 296, column: 20, scope: !3810, inlinedAt: !3359)
!3812 = !DILocation(line: 296, column: 13, scope: !3810, inlinedAt: !3359)
!3813 = !DILocation(line: 297, column: 9, scope: !3804, inlinedAt: !3359)
!3814 = !DILocation(line: 298, column: 5, scope: !3815, inlinedAt: !3359)
!3815 = distinct !DILexicalBlock(scope: !3804, file: !41, line: 298, column: 5)
!3816 = !DILocation(line: 298, column: 20, scope: !3815, inlinedAt: !3359)
!3817 = !DILocation(line: 298, column: 13, scope: !3815, inlinedAt: !3359)
!3818 = !DILocation(line: 299, column: 9, scope: !3804, inlinedAt: !3359)
!3819 = !DILocation(line: 300, column: 10, scope: !3820, inlinedAt: !3359)
!3820 = distinct !DILexicalBlock(scope: !3804, file: !41, line: 300, column: 5)
!3821 = !DILocation(line: 300, column: 14, scope: !3820, inlinedAt: !3359)
!3822 = !DILocation(line: 300, column: 31, scope: !3820, inlinedAt: !3359)
!3823 = !DILocation(line: 302, column: 6, scope: !3824, inlinedAt: !3359)
!3824 = distinct !DILexicalBlock(scope: !3820, file: !41, line: 301, column: 5)
!3825 = !DILocation(line: 302, column: 20, scope: !3824, inlinedAt: !3359)
!3826 = !DILocation(line: 302, column: 14, scope: !3824, inlinedAt: !3359)
!3827 = !DILocation(line: 306, column: 6, scope: !3828, inlinedAt: !3359)
!3828 = distinct !DILexicalBlock(scope: !3820, file: !41, line: 305, column: 5)
!3829 = !DILocation(line: 306, column: 21, scope: !3828, inlinedAt: !3359)
!3830 = !DILocation(line: 306, column: 14, scope: !3828, inlinedAt: !3359)
!3831 = !DILocation(line: 309, column: 31, scope: !3799, inlinedAt: !3359)
!3832 = !DILocation(line: 309, column: 13, scope: !3799, inlinedAt: !3359)
!3833 = !DILocation(line: 309, column: 46, scope: !3799, inlinedAt: !3359)
!3834 = !DILocation(line: 309, column: 57, scope: !3799, inlinedAt: !3359)
!3835 = !DILocation(line: 312, column: 2, scope: !3358, inlinedAt: !3359)
!3836 = !DILocation(line: 312, column: 7, scope: !3358, inlinedAt: !3359)
!3837 = !DILocation(line: 313, column: 2, scope: !3358, inlinedAt: !3359)
!3838 = !DILocation(line: 313, column: 7, scope: !3358, inlinedAt: !3359)
!3839 = !DILocation(line: 315, column: 8, scope: !3358, inlinedAt: !3359)
!3840 = !DILocation(line: 315, column: 49, scope: !3358, inlinedAt: !3359)
!3841 = !DILocation(line: 132, column: 23, scope: !3842, inlinedAt: !3843)
!3842 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !2564, file: !2564, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3843 = !DILocation(line: 317, column: 13, scope: !3844, inlinedAt: !3359)
!3844 = distinct !DILexicalBlock(scope: !3358, file: !41, line: 316, column: 2)
!3845 = !DILocation(line: 319, column: 8, scope: !3846, inlinedAt: !3359)
!3846 = distinct !DILexicalBlock(scope: !3844, file: !41, line: 318, column: 3)
!3847 = !DILocation(line: 319, column: 20, scope: !3846, inlinedAt: !3359)
!3848 = !DILocation(line: 319, column: 52, scope: !3846, inlinedAt: !3359)
!3849 = !DILocation(line: 319, column: 34, scope: !3846, inlinedAt: !3359)
!3850 = !DILocation(line: 319, column: 75, scope: !3846, inlinedAt: !3359)
!3851 = !DILocation(line: 320, column: 4, scope: !3846, inlinedAt: !3359)
!3852 = !DILocation(line: 321, column: 4, scope: !3846, inlinedAt: !3359)
!3853 = !DILocation(line: 323, column: 7, scope: !3844, inlinedAt: !3359)
!3854 = !DILocation(line: 323, column: 36, scope: !3844, inlinedAt: !3359)
!3855 = !DILocation(line: 323, column: 45, scope: !3844, inlinedAt: !3359)
!3856 = !DILocation(line: 323, column: 57, scope: !3844, inlinedAt: !3359)
!3857 = !DILocation(line: 323, column: 71, scope: !3844, inlinedAt: !3359)
!3858 = !DILocation(line: 1024, column: 52, scope: !3859, inlinedAt: !3860)
!3859 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2564, file: !2564, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3860 = !DILocation(line: 325, column: 15, scope: !3358, inlinedAt: !3359)
!3861 = !DILocation(line: 1024, column: 41, scope: !3859, inlinedAt: !3860)
!3862 = distinct !DISubprogram(name: "splitter", linkageName: "std.core.String.splitter", scope: !2, file: !2, line: 720, type: !3863, scopeLine: 720, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3863 = !DISubroutineType(types: !3864)
!3864 = !{!3865, !59, !59}
!3865 = !DICompositeType(tag: DW_TAG_structure_type, name: "Splitter", scope: !2, file: !2, line: 725, size: 320, align: 64, elements: !3866, identifier: "std.core.string.Splitter")
!3866 = !{!3867, !3868, !3869}
!3867 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3865, file: !2, line: 727, baseType: !59, size: 128, align: 64)
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "split", scope: !3865, file: !2, line: 728, baseType: !59, size: 128, align: 64, offset: 128)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !3865, file: !2, line: 729, baseType: !66, size: 64, align: 64, offset: 256)
!3870 = !DILocalVariable(name: "self", arg: 1, scope: !3862, file: !2, line: 720, type: !59)
!3871 = !DILocation(line: 720, column: 29, scope: !3862)
!3872 = !DILocalVariable(name: "split", arg: 2, scope: !3862, file: !2, line: 720, type: !59)
!3873 = !DILocation(line: 720, column: 42, scope: !3862)
!3874 = !DILocation(line: 722, column: 9, scope: !3862)
!3875 = distinct !DISubprogram(name: "reset", linkageName: "std.core.string.Splitter.reset", scope: !2, file: !2, line: 732, type: !3876, scopeLine: 732, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3876 = !DISubroutineType(types: !3877)
!3877 = !{null, !3878}
!3878 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Splitter*", baseType: !3865, size: 64, align: 64, dwarfAddressSpace: 0)
!3879 = !DILocation(line: 733, column: 1, scope: !3875)
!3880 = !DILocalVariable(name: "self", arg: 1, scope: !3875, file: !2, line: 732, type: !3878)
!3881 = !DILocation(line: 732, column: 24, scope: !3875)
!3882 = !DILocation(line: 734, column: 2, scope: !3875)
!3883 = !DILocation(line: 734, column: 17, scope: !3875)
!3884 = distinct !DISubprogram(name: "next", linkageName: "std.core.string.Splitter.next", scope: !2, file: !2, line: 737, type: !3885, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3885 = !DISubroutineType(types: !3886)
!3886 = !{!332, !188, !3878}
!3887 = !DILocation(line: 738, column: 1, scope: !3884)
!3888 = !DILocalVariable(name: "self", arg: 1, scope: !3884, file: !2, line: 737, type: !3878)
!3889 = !DILocation(line: 737, column: 26, scope: !3884)
!3890 = !DILocalVariable(name: "len", scope: !3884, file: !2, line: 739, type: !66, align: 8)
!3891 = !DILocation(line: 739, column: 6, scope: !3884)
!3892 = !DILocation(line: 739, column: 12, scope: !3884)
!3893 = !DILocalVariable(name: "current", scope: !3884, file: !2, line: 740, type: !66, align: 8)
!3894 = !DILocation(line: 740, column: 6, scope: !3884)
!3895 = !DILocation(line: 740, column: 16, scope: !3884)
!3896 = !DILocation(line: 741, column: 6, scope: !3884)
!3897 = !DILocation(line: 741, column: 17, scope: !3884)
!3898 = !DILocation(line: 741, column: 29, scope: !3884)
!3899 = !DILocalVariable(name: "remaining", scope: !3884, file: !2, line: 742, type: !59, align: 8)
!3900 = !DILocation(line: 742, column: 9, scope: !3884)
!3901 = !DILocation(line: 742, column: 21, scope: !3884)
!3902 = !DILocation(line: 742, column: 33, scope: !3884)
!3903 = !DILocalVariable(name: "next", scope: !3884, file: !2, line: 743, type: !67, align: 8)
!3904 = !DILocation(line: 743, column: 7, scope: !3884)
!3905 = !DILocation(line: 743, column: 33, scope: !3884)
!3906 = !DILocation(line: 743, column: 14, scope: !3884)
!3907 = !DILocation(line: 744, column: 6, scope: !3884)
!3908 = !DILocation(line: 747, column: 10, scope: !3909)
!3909 = distinct !DILexicalBlock(scope: !3884, file: !2, line: 745, column: 2)
!3910 = !DILocation(line: 747, column: 20, scope: !3909)
!3911 = !DILocation(line: 747, column: 21, scope: !3909)
!3912 = !DILocation(line: 746, column: 9, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3909, file: !2, line: 746, column: 9)
!3914 = !DILocation(line: 746, column: 24, scope: !3913)
!3915 = !DILocation(line: 746, column: 34, scope: !3913)
!3916 = !DILocation(line: 746, column: 41, scope: !3913)
!3917 = !DILocation(line: 749, column: 2, scope: !3884)
!3918 = !DILocation(line: 749, column: 17, scope: !3884)
!3919 = !DILocation(line: 750, column: 9, scope: !3884)
!3920 = distinct !DISubprogram(name: "tformat_zstr", linkageName: "std.core.string.tformat_zstr", scope: !2, file: !2, line: 42, type: !3921, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3921 = !DISubroutineType(types: !3922)
!3922 = !{!497, !59, !3923}
!3923 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !3924, identifier: "any[]")
!3924 = !{!3925, !3931}
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3923, baseType: !3926, size: 64, align: 64)
!3926 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !3927, size: 64, align: 64, dwarfAddressSpace: 0)
!3927 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !3928, identifier: "any")
!3928 = !{!3929, !3930}
!3929 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3927, baseType: !193, size: 64, align: 64)
!3930 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3927, baseType: !195, size: 64, align: 64, offset: 64)
!3931 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3923, baseType: !66, size: 64, align: 64, offset: 64)
!3932 = !DILocalVariable(name: "fmt", arg: 1, scope: !3920, file: !2, line: 42, type: !59)
!3933 = !DILocation(line: 42, column: 32, scope: !3920)
!3934 = !DILocalVariable(name: "args", arg: 2, scope: !3920, file: !2, line: 42, type: !3923)
!3935 = !DILocation(line: 42, column: 37, scope: !3920)
!3936 = !DILocalVariable(name: "str", scope: !3920, file: !2, line: 44, type: !3937, align: 8)
!3937 = !DIDerivedType(tag: DW_TAG_typedef, name: "DString", scope: !2, file: !2, line: 4, baseType: !193, align: 8)
!3938 = !DILocation(line: 44, column: 10, scope: !3920)
!3939 = !DILocation(line: 44, column: 44, scope: !3920)
!3940 = !DILocation(line: 44, column: 54, scope: !3920)
!3941 = !DILocation(line: 44, column: 25, scope: !3920)
!3942 = !DILocation(line: 45, column: 2, scope: !3920)
!3943 = !DILocation(line: 46, column: 9, scope: !3920)
!3944 = distinct !DISubprogram(name: "format", linkageName: "std.core.string.format", scope: !2, file: !2, line: 55, type: !3945, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3945 = !DISubroutineType(types: !3946)
!3946 = !{!59, !59, !3923, !190}
!3947 = !DILocalVariable(name: "fmt", arg: 1, scope: !3944, file: !2, line: 55, type: !59)
!3948 = !DILocation(line: 55, column: 25, scope: !3944)
!3949 = !DILocalVariable(name: "args", arg: 2, scope: !3944, file: !2, line: 55, type: !3923)
!3950 = !DILocation(line: 55, column: 30, scope: !3944)
!3951 = !DILocalVariable(name: "allocator", arg: 3, scope: !3944, file: !2, line: 55, type: !190)
!3952 = !DILocation(line: 55, column: 49, scope: !3944)
!3953 = !DILocalVariable(name: "current", scope: !3954, file: !2, line: 536, type: !3955, align: 8)
!3954 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !566, file: !566, line: 534, scopeLine: 534, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3955 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !3956, size: 64, align: 64, dwarfAddressSpace: 0)
!3956 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !2, file: !2, line: 10, size: 320, align: 64, elements: !3957, identifier: "std.core.mem.allocator.TempAllocator")
!3957 = !{!3958, !3959, !3972, !3973, !3974}
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !3956, file: !2, line: 12, baseType: !190, size: 128, align: 64)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !3956, file: !2, line: 13, baseType: !3960, size: 64, align: 64, offset: 128)
!3960 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !3961, size: 64, align: 64, dwarfAddressSpace: 0)
!3961 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !2, file: !2, line: 22, size: 320, align: 64, elements: !3962, identifier: "std.core.mem.allocator.TempAllocatorPage")
!3962 = !{!3963, !3964, !3965, !3966, !3967, !3968}
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !3961, file: !2, line: 24, baseType: !3960, size: 64, align: 64)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !3961, file: !2, line: 25, baseType: !193, size: 64, align: 64, offset: 64)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !3961, file: !2, line: 26, baseType: !66, size: 64, align: 64, offset: 128)
!3966 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3961, file: !2, line: 27, baseType: !66, size: 64, align: 64, offset: 192)
!3967 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !3961, file: !2, line: 28, baseType: !66, size: 64, align: 64, offset: 256)
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3961, file: !2, line: 29, baseType: !3969, align: 8, offset: 320)
!3969 = !DICompositeType(tag: DW_TAG_array_type, baseType: !64, align: 8, elements: !3970)
!3970 = !{!3971}
!3971 = !DISubrange(count: 0, lowerBound: 0)
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3956, file: !2, line: 14, baseType: !66, size: 64, align: 64, offset: 192)
!3973 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !3956, file: !2, line: 15, baseType: !66, size: 64, align: 64, offset: 256)
!3974 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3956, file: !2, line: 16, baseType: !3969, align: 8, offset: 320)
!3975 = !DILocation(line: 536, column: 17, scope: !3954, inlinedAt: !3976)
!3976 = !DILocation(line: 57, column: 2, scope: !3944)
!3977 = !DILocation(line: 396, column: 7, scope: !3978, inlinedAt: !3979)
!3978 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3979 = !DILocation(line: 536, column: 38, scope: !3954, inlinedAt: !3976)
!3980 = !DILocation(line: 398, column: 3, scope: !3981, inlinedAt: !3979)
!3981 = distinct !DILexicalBlock(scope: !3978, file: !216, line: 397, column: 2)
!3982 = !DILocation(line: 400, column: 9, scope: !3978, inlinedAt: !3979)
!3983 = !DILocalVariable(name: "original", scope: !3954, file: !2, line: 539, type: !3955, align: 8)
!3984 = !DILocation(line: 539, column: 18, scope: !3954, inlinedAt: !3976)
!3985 = !DILocation(line: 539, column: 29, scope: !3954, inlinedAt: !3976)
!3986 = !DILocation(line: 540, column: 7, scope: !3954, inlinedAt: !3976)
!3987 = !DILocation(line: 540, column: 19, scope: !3954, inlinedAt: !3976)
!3988 = !DILocation(line: 540, column: 59, scope: !3954, inlinedAt: !3976)
!3989 = !DILocalVariable(name: "mark", scope: !3954, file: !2, line: 542, type: !66, align: 8)
!3990 = !DILocation(line: 542, column: 6, scope: !3954, inlinedAt: !3976)
!3991 = !DILocation(line: 542, column: 13, scope: !3954, inlinedAt: !3976)
!3992 = !DILocalVariable(name: "str", scope: !3993, file: !2, line: 59, type: !3937, align: 8)
!3993 = distinct !DILexicalBlock(scope: !3944, file: !2, line: 58, column: 2)
!3994 = !DILocation(line: 59, column: 11, scope: !3993)
!3995 = !DILocation(line: 59, column: 45, scope: !3993)
!3996 = !DILocation(line: 59, column: 55, scope: !3993)
!3997 = !DILocation(line: 59, column: 26, scope: !3993)
!3998 = !DILocation(line: 60, column: 3, scope: !3993)
!3999 = !DILocation(line: 61, column: 23, scope: !3993)
!4000 = !DILocation(line: 61, column: 10, scope: !3993)
!4001 = !DILocation(line: 545, column: 17, scope: !4002, inlinedAt: !3976)
!4002 = distinct !DILexicalBlock(scope: !3954, file: !566, line: 544, column: 2)
!4003 = !DILocation(line: 545, column: 3, scope: !4002, inlinedAt: !3976)
!4004 = !DILocation(line: 547, column: 39, scope: !4002, inlinedAt: !3976)
!4005 = distinct !DISubprogram(name: "new_format", linkageName: "std.core.string.new_format", scope: !2, file: !2, line: 70, type: !3945, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4006 = !DILocalVariable(name: "fmt", arg: 1, scope: !4005, file: !2, line: 70, type: !59)
!4007 = !DILocation(line: 70, column: 29, scope: !4005)
!4008 = !DILocalVariable(name: "args", arg: 2, scope: !4005, file: !2, line: 70, type: !3923)
!4009 = !DILocation(line: 70, column: 34, scope: !4005)
!4010 = !DILocalVariable(name: "allocator", arg: 3, scope: !4005, file: !2, line: 70, type: !190)
!4011 = !DILocation(line: 70, column: 53, scope: !4005)
!4012 = !DILocation(line: 70, column: 106, scope: !4005)
!4013 = !DILocation(line: 392, column: 27, scope: !4014, inlinedAt: !4015)
!4014 = distinct !DISubprogram(name: "heap", linkageName: "heap", scope: !216, file: !216, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4015 = !DILocation(line: 70, column: 130, scope: !4005)
!4016 = !DILocation(line: 70, column: 74, scope: !4005)
!4017 = distinct !DISubprogram(name: "tformat", linkageName: "std.core.string.tformat", scope: !2, file: !2, line: 77, type: !4018, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4018 = !DISubroutineType(types: !4019)
!4019 = !{!59, !59, !3923}
!4020 = !DILocalVariable(name: "fmt", arg: 1, scope: !4017, file: !2, line: 77, type: !59)
!4021 = !DILocation(line: 77, column: 26, scope: !4017)
!4022 = !DILocalVariable(name: "args", arg: 2, scope: !4017, file: !2, line: 77, type: !3923)
!4023 = !DILocation(line: 77, column: 31, scope: !4017)
!4024 = !DILocalVariable(name: "str", scope: !4017, file: !2, line: 79, type: !3937, align: 8)
!4025 = !DILocation(line: 79, column: 10, scope: !4017)
!4026 = !DILocation(line: 79, column: 44, scope: !4017)
!4027 = !DILocation(line: 79, column: 54, scope: !4017)
!4028 = !DILocation(line: 79, column: 25, scope: !4017)
!4029 = !DILocation(line: 80, column: 2, scope: !4017)
!4030 = !DILocation(line: 81, column: 9, scope: !4017)
!4031 = distinct !DISubprogram(name: "new_format_zstr", linkageName: "std.core.string.new_format_zstr", scope: !2, file: !2, line: 90, type: !4032, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4032 = !DISubroutineType(types: !4033)
!4033 = !{!497, !59, !3923, !190}
!4034 = !DILocalVariable(name: "fmt", arg: 1, scope: !4031, file: !2, line: 90, type: !59)
!4035 = !DILocation(line: 90, column: 35, scope: !4031)
!4036 = !DILocalVariable(name: "args", arg: 2, scope: !4031, file: !2, line: 90, type: !3923)
!4037 = !DILocation(line: 90, column: 40, scope: !4031)
!4038 = !DILocalVariable(name: "allocator", arg: 3, scope: !4031, file: !2, line: 90, type: !190)
!4039 = !DILocation(line: 90, column: 59, scope: !4031)
!4040 = !DILocalVariable(name: "current", scope: !4041, file: !2, line: 536, type: !3955, align: 8)
!4041 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !566, file: !566, line: 534, scopeLine: 534, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4042 = !DILocation(line: 536, column: 17, scope: !4041, inlinedAt: !4043)
!4043 = !DILocation(line: 92, column: 2, scope: !4031)
!4044 = !DILocation(line: 396, column: 7, scope: !4045, inlinedAt: !4046)
!4045 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4046 = !DILocation(line: 536, column: 38, scope: !4041, inlinedAt: !4043)
!4047 = !DILocation(line: 398, column: 3, scope: !4048, inlinedAt: !4046)
!4048 = distinct !DILexicalBlock(scope: !4045, file: !216, line: 397, column: 2)
!4049 = !DILocation(line: 400, column: 9, scope: !4045, inlinedAt: !4046)
!4050 = !DILocalVariable(name: "original", scope: !4041, file: !2, line: 539, type: !3955, align: 8)
!4051 = !DILocation(line: 539, column: 18, scope: !4041, inlinedAt: !4043)
!4052 = !DILocation(line: 539, column: 29, scope: !4041, inlinedAt: !4043)
!4053 = !DILocation(line: 540, column: 7, scope: !4041, inlinedAt: !4043)
!4054 = !DILocation(line: 540, column: 19, scope: !4041, inlinedAt: !4043)
!4055 = !DILocation(line: 540, column: 59, scope: !4041, inlinedAt: !4043)
!4056 = !DILocalVariable(name: "mark", scope: !4041, file: !2, line: 542, type: !66, align: 8)
!4057 = !DILocation(line: 542, column: 6, scope: !4041, inlinedAt: !4043)
!4058 = !DILocation(line: 542, column: 13, scope: !4041, inlinedAt: !4043)
!4059 = !DILocalVariable(name: "str", scope: !4060, file: !2, line: 94, type: !3937, align: 8)
!4060 = distinct !DILexicalBlock(scope: !4031, file: !2, line: 93, column: 2)
!4061 = !DILocation(line: 94, column: 11, scope: !4060)
!4062 = !DILocation(line: 94, column: 45, scope: !4060)
!4063 = !DILocation(line: 94, column: 55, scope: !4060)
!4064 = !DILocation(line: 94, column: 26, scope: !4060)
!4065 = !DILocation(line: 95, column: 3, scope: !4060)
!4066 = !DILocation(line: 96, column: 24, scope: !4060)
!4067 = !DILocation(line: 96, column: 10, scope: !4060)
!4068 = !DILocation(line: 545, column: 17, scope: !4069, inlinedAt: !4043)
!4069 = distinct !DILexicalBlock(scope: !4041, file: !566, line: 544, column: 2)
!4070 = !DILocation(line: 545, column: 3, scope: !4069, inlinedAt: !4043)
!4071 = !DILocation(line: 547, column: 39, scope: !4069, inlinedAt: !4043)
!4072 = !DILocation(line: 549, column: 2, scope: !4069, inlinedAt: !4043)
!4073 = distinct !DISubprogram(name: "join_new", linkageName: "std.core.string.join_new", scope: !2, file: !2, line: 114, type: !4074, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4074 = !DISubroutineType(types: !4075)
!4075 = !{!59, !185, !59, !190}
!4076 = !DILocalVariable(name: "s", arg: 1, scope: !4073, file: !2, line: 114, type: !185)
!4077 = !DILocation(line: 114, column: 29, scope: !4073)
!4078 = !DILocalVariable(name: "joiner", arg: 2, scope: !4073, file: !2, line: 114, type: !59)
!4079 = !DILocation(line: 114, column: 39, scope: !4073)
!4080 = !DILocalVariable(name: "allocator", arg: 3, scope: !4073, file: !2, line: 114, type: !190)
!4081 = !DILocation(line: 114, column: 57, scope: !4073)
!4082 = !DILocation(line: 116, column: 7, scope: !4073)
!4083 = !DILocation(line: 252, column: 55, scope: !4084, inlinedAt: !4085)
!4084 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !216, file: !216, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4085 = !DILocation(line: 244, column: 9, scope: !4086, inlinedAt: !4087)
!4086 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !216, file: !216, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4087 = !DILocation(line: 118, column: 29, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4073, file: !2, line: 117, column: 2)
!4089 = !DILocation(line: 252, column: 40, scope: !4084, inlinedAt: !4085)
!4090 = !DILocation(line: 79, column: 7, scope: !4091, inlinedAt: !4092)
!4091 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !216, file: !216, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4092 = !DILocation(line: 252, column: 11, scope: !4084, inlinedAt: !4085)
!4093 = !DILocation(line: 79, column: 20, scope: !4091, inlinedAt: !4092)
!4094 = !DILocation(line: 28, column: 71, scope: !4095, inlinedAt: !4096)
!4095 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4096 = !DILocation(line: 80, column: 9, scope: !4091, inlinedAt: !4092)
!4097 = !DILocation(line: 252, column: 67, scope: !4084, inlinedAt: !4085)
!4098 = !DILocation(line: 118, column: 11, scope: !4088)
!4099 = !DILocalVariable(name: "total_size", scope: !4073, file: !2, line: 121, type: !66, align: 8)
!4100 = !DILocation(line: 121, column: 6, scope: !4073)
!4101 = !DILocation(line: 121, column: 19, scope: !4073)
!4102 = !DILocation(line: 121, column: 32, scope: !4073)
!4103 = !DILocalVariable(name: ".temp", scope: !4104, file: !2, line: 122, type: !66, align: 8)
!4104 = distinct !DILexicalBlock(scope: !4073, file: !2, line: 122, column: 2)
!4105 = !DILocation(line: 122, column: 26, scope: !4104)
!4106 = !DILocalVariable(name: "str", scope: !4107, file: !2, line: 122, type: !188, align: 8)
!4107 = distinct !DILexicalBlock(scope: !4104, file: !2, line: 123, column: 2)
!4108 = !DILocation(line: 122, column: 20, scope: !4107)
!4109 = !DILocation(line: 122, column: 26, scope: !4107)
!4110 = !DILocation(line: 124, column: 3, scope: !4111)
!4111 = distinct !DILexicalBlock(scope: !4107, file: !2, line: 123, column: 2)
!4112 = !DILocation(line: 124, column: 17, scope: !4111)
!4113 = !DILocalVariable(name: "current", scope: !4114, file: !2, line: 536, type: !3955, align: 8)
!4114 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !566, file: !566, line: 534, scopeLine: 534, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4115 = !DILocation(line: 536, column: 17, scope: !4114, inlinedAt: !4116)
!4116 = !DILocation(line: 126, column: 2, scope: !4073)
!4117 = !DILocation(line: 396, column: 7, scope: !4118, inlinedAt: !4119)
!4118 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4119 = !DILocation(line: 536, column: 38, scope: !4114, inlinedAt: !4116)
!4120 = !DILocation(line: 398, column: 3, scope: !4121, inlinedAt: !4119)
!4121 = distinct !DILexicalBlock(scope: !4118, file: !216, line: 397, column: 2)
!4122 = !DILocation(line: 400, column: 9, scope: !4118, inlinedAt: !4119)
!4123 = !DILocalVariable(name: "original", scope: !4114, file: !2, line: 539, type: !3955, align: 8)
!4124 = !DILocation(line: 539, column: 18, scope: !4114, inlinedAt: !4116)
!4125 = !DILocation(line: 539, column: 29, scope: !4114, inlinedAt: !4116)
!4126 = !DILocation(line: 540, column: 7, scope: !4114, inlinedAt: !4116)
!4127 = !DILocation(line: 540, column: 19, scope: !4114, inlinedAt: !4116)
!4128 = !DILocation(line: 540, column: 59, scope: !4114, inlinedAt: !4116)
!4129 = !DILocalVariable(name: "mark", scope: !4114, file: !2, line: 542, type: !66, align: 8)
!4130 = !DILocation(line: 542, column: 6, scope: !4114, inlinedAt: !4116)
!4131 = !DILocation(line: 542, column: 13, scope: !4114, inlinedAt: !4116)
!4132 = !DILocalVariable(name: "res", scope: !4133, file: !2, line: 128, type: !3937, align: 8)
!4133 = distinct !DILexicalBlock(scope: !4073, file: !2, line: 127, column: 2)
!4134 = !DILocation(line: 128, column: 11, scope: !4133)
!4135 = !DILocation(line: 128, column: 45, scope: !4133)
!4136 = !DILocation(line: 128, column: 26, scope: !4133)
!4137 = !DILocation(line: 129, column: 14, scope: !4133)
!4138 = !DILocation(line: 129, column: 16, scope: !4133)
!4139 = !DILocation(line: 378, column: 22, scope: !4140, inlinedAt: !4142)
!4140 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4141, file: !4141, line: 368, scopeLine: 368, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4141 = !DIFile(filename: "dstring.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!4142 = !DILocation(line: 129, column: 3, scope: !4133)
!4143 = !DILocation(line: 378, column: 4, scope: !4140, inlinedAt: !4142)
!4144 = !DILocalVariable(name: ".temp", scope: !4145, file: !2, line: 130, type: !4146, align: 8)
!4145 = distinct !DILexicalBlock(scope: !4133, file: !2, line: 130, column: 3)
!4146 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String[]*", baseType: !185, size: 64, align: 64, dwarfAddressSpace: 0)
!4147 = !DILocation(line: 130, column: 27, scope: !4145)
!4148 = !DILocation(line: 130, column: 29, scope: !4145)
!4149 = !DILocalVariable(name: ".temp", scope: !4145, file: !2, line: 130, type: !66, align: 8)
!4150 = !DILocalVariable(name: "str", scope: !4151, file: !2, line: 130, type: !188, align: 8)
!4151 = distinct !DILexicalBlock(scope: !4145, file: !2, line: 131, column: 3)
!4152 = !DILocation(line: 130, column: 21, scope: !4151)
!4153 = !DILocation(line: 130, column: 27, scope: !4151)
!4154 = !DILocation(line: 378, column: 22, scope: !4155, inlinedAt: !4156)
!4155 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4141, file: !4141, line: 368, scopeLine: 368, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4156 = !DILocation(line: 132, column: 4, scope: !4157)
!4157 = distinct !DILexicalBlock(scope: !4151, file: !2, line: 131, column: 3)
!4158 = !DILocation(line: 378, column: 4, scope: !4155, inlinedAt: !4156)
!4159 = !DILocation(line: 133, column: 16, scope: !4157)
!4160 = !DILocation(line: 378, column: 22, scope: !4161, inlinedAt: !4162)
!4161 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4141, file: !4141, line: 368, scopeLine: 368, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4162 = !DILocation(line: 133, column: 4, scope: !4157)
!4163 = !DILocation(line: 378, column: 4, scope: !4161, inlinedAt: !4162)
!4164 = !DILocation(line: 135, column: 23, scope: !4133)
!4165 = !DILocation(line: 135, column: 10, scope: !4133)
!4166 = !DILocation(line: 545, column: 17, scope: !4167, inlinedAt: !4116)
!4167 = distinct !DILexicalBlock(scope: !4114, file: !566, line: 544, column: 2)
!4168 = !DILocation(line: 545, column: 3, scope: !4167, inlinedAt: !4116)
!4169 = !DILocation(line: 547, column: 39, scope: !4167, inlinedAt: !4116)
!4170 = distinct !DISubprogram(name: "new_from_utf32", linkageName: "std.core.string.new_from_utf32", scope: !2, file: !2, line: 589, type: !4171, scopeLine: 589, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4171 = !DISubroutineType(types: !4172)
!4172 = !{!332, !188, !4173, !190}
!4173 = !DICompositeType(tag: DW_TAG_structure_type, name: "uint[]", size: 128, align: 64, elements: !4174, identifier: "uint[]")
!4174 = !{!4175, !4176}
!4175 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4173, baseType: !1947, size: 64, align: 64)
!4176 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4173, baseType: !66, size: 64, align: 64, offset: 64)
!4177 = !DILocalVariable(name: "utf32", arg: 1, scope: !4170, file: !2, line: 589, type: !851)
!4178 = !DILocation(line: 589, column: 36, scope: !4170)
!4179 = !DILocalVariable(name: "allocator", arg: 2, scope: !4170, file: !2, line: 589, type: !190)
!4180 = !DILocation(line: 589, column: 53, scope: !4170)
!4181 = !DILocalVariable(name: "len", scope: !4170, file: !2, line: 591, type: !66, align: 8)
!4182 = !DILocation(line: 591, column: 6, scope: !4170)
!4183 = !DILocation(line: 591, column: 36, scope: !4170)
!4184 = !DILocation(line: 591, column: 18, scope: !4170)
!4185 = !DILocalVariable(name: "data", scope: !4170, file: !2, line: 592, type: !63, align: 8)
!4186 = !DILocation(line: 592, column: 8, scope: !4170)
!4187 = !DILocation(line: 592, column: 48, scope: !4170)
!4188 = !DILocation(line: 62, column: 7, scope: !4189, inlinedAt: !4190)
!4189 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !216, file: !216, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4190 = !DILocation(line: 592, column: 26, scope: !4170)
!4191 = !DILocation(line: 62, column: 20, scope: !4189, inlinedAt: !4190)
!4192 = !DILocation(line: 28, column: 71, scope: !4193, inlinedAt: !4194)
!4193 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4194 = !DILocation(line: 68, column: 10, scope: !4189, inlinedAt: !4190)
!4195 = !DILocation(line: 594, column: 31, scope: !4170)
!4196 = !DILocation(line: 594, column: 8, scope: !4170)
!4197 = !DILocation(line: 595, column: 2, scope: !4170)
!4198 = !DILocation(line: 595, column: 7, scope: !4170)
!4199 = !DILocation(line: 595, column: 14, scope: !4170)
!4200 = !DILocation(line: 596, column: 17, scope: !4170)
!4201 = !DILocation(line: 596, column: 23, scope: !4170)
!4202 = distinct !DISubprogram(name: "new_from_utf16", linkageName: "std.core.string.new_from_utf16", scope: !2, file: !2, line: 599, type: !4203, scopeLine: 599, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4203 = !DISubroutineType(types: !4204)
!4204 = !{!332, !188, !4205, !190}
!4205 = !DICompositeType(tag: DW_TAG_structure_type, name: "ushort[]", size: 128, align: 64, elements: !4206, identifier: "ushort[]")
!4206 = !{!4207, !4208}
!4207 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4205, baseType: !825, size: 64, align: 64)
!4208 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4205, baseType: !66, size: 64, align: 64, offset: 64)
!4209 = !DILocalVariable(name: "utf16", arg: 1, scope: !4202, file: !2, line: 599, type: !771)
!4210 = !DILocation(line: 599, column: 36, scope: !4202)
!4211 = !DILocalVariable(name: "allocator", arg: 2, scope: !4202, file: !2, line: 599, type: !190)
!4212 = !DILocation(line: 599, column: 53, scope: !4202)
!4213 = !DILocalVariable(name: "len", scope: !4202, file: !2, line: 601, type: !66, align: 8)
!4214 = !DILocation(line: 601, column: 6, scope: !4202)
!4215 = !DILocation(line: 601, column: 36, scope: !4202)
!4216 = !DILocation(line: 601, column: 18, scope: !4202)
!4217 = !DILocalVariable(name: "data", scope: !4202, file: !2, line: 602, type: !63, align: 8)
!4218 = !DILocation(line: 602, column: 8, scope: !4202)
!4219 = !DILocation(line: 602, column: 48, scope: !4202)
!4220 = !DILocation(line: 62, column: 7, scope: !4221, inlinedAt: !4222)
!4221 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !216, file: !216, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4222 = !DILocation(line: 602, column: 26, scope: !4202)
!4223 = !DILocation(line: 62, column: 20, scope: !4221, inlinedAt: !4222)
!4224 = !DILocation(line: 28, column: 71, scope: !4225, inlinedAt: !4226)
!4225 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !216, file: !216, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4226 = !DILocation(line: 68, column: 10, scope: !4221, inlinedAt: !4222)
!4227 = !DILocation(line: 604, column: 31, scope: !4202)
!4228 = !DILocation(line: 604, column: 8, scope: !4202)
!4229 = !DILocation(line: 603, column: 41, scope: !4230)
!4230 = distinct !DILexicalBlock(scope: !4202, file: !2, line: 603, column: 25)
!4231 = !DILocation(line: 101, column: 7, scope: !4232, inlinedAt: !4233)
!4232 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !216, file: !216, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4233 = !DILocation(line: 603, column: 25, scope: !4230)
!4234 = !DILocation(line: 101, column: 18, scope: !4232, inlinedAt: !4233)
!4235 = !DILocation(line: 105, column: 25, scope: !4232, inlinedAt: !4233)
!4236 = !DILocation(line: 105, column: 2, scope: !4232, inlinedAt: !4233)
!4237 = !DILocation(line: 605, column: 2, scope: !4202)
!4238 = !DILocation(line: 605, column: 7, scope: !4202)
!4239 = !DILocation(line: 605, column: 14, scope: !4202)
!4240 = !DILocation(line: 606, column: 17, scope: !4202)
!4241 = !DILocation(line: 606, column: 23, scope: !4202)
!4242 = distinct !DISubprogram(name: "new_from_wstring", linkageName: "std.core.string.new_from_wstring", scope: !2, file: !2, line: 609, type: !4243, scopeLine: 609, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4243 = !DISubroutineType(types: !4244)
!4244 = !{!332, !188, !824, !190}
!4245 = !DILocalVariable(name: "wstring", arg: 1, scope: !4242, file: !2, line: 609, type: !824)
!4246 = !DILocation(line: 609, column: 37, scope: !4242)
!4247 = !DILocalVariable(name: "allocator", arg: 2, scope: !4242, file: !2, line: 609, type: !190)
!4248 = !DILocation(line: 609, column: 56, scope: !4242)
!4249 = !DILocalVariable(name: "utf16_len", scope: !4242, file: !2, line: 611, type: !66, align: 8)
!4250 = !DILocation(line: 611, column: 6, scope: !4242)
!4251 = !DILocation(line: 612, column: 2, scope: !4242)
!4252 = !DILocation(line: 612, column: 9, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4242, file: !2, line: 612, column: 2)
!4254 = !DILocation(line: 612, column: 17, scope: !4253)
!4255 = !DILocation(line: 612, column: 34, scope: !4253)
!4256 = !DILocalVariable(name: "utf16", scope: !4242, file: !2, line: 613, type: !771, align: 8)
!4257 = !DILocation(line: 613, column: 11, scope: !4242)
!4258 = !DILocation(line: 613, column: 19, scope: !4242)
!4259 = !DILocation(line: 613, column: 28, scope: !4242)
!4260 = !DILocation(line: 614, column: 9, scope: !4242)
!4261 = distinct !DISubprogram(name: "temp_from_wstring", linkageName: "std.core.string.temp_from_wstring", scope: !2, file: !2, line: 617, type: !4262, scopeLine: 617, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4262 = !DISubroutineType(types: !4263)
!4263 = !{!332, !188, !824}
!4264 = !DILocalVariable(name: "wstring", arg: 1, scope: !4261, file: !2, line: 617, type: !824)
!4265 = !DILocation(line: 617, column: 38, scope: !4261)
!4266 = !DILocation(line: 396, column: 7, scope: !4267, inlinedAt: !4268)
!4267 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4268 = !DILocation(line: 617, column: 87, scope: !4261)
!4269 = !DILocation(line: 398, column: 3, scope: !4270, inlinedAt: !4268)
!4270 = distinct !DILexicalBlock(scope: !4267, file: !216, line: 397, column: 2)
!4271 = !DILocation(line: 400, column: 9, scope: !4267, inlinedAt: !4268)
!4272 = !DILocation(line: 617, column: 50, scope: !4261)
!4273 = distinct !DISubprogram(name: "temp_from_utf16", linkageName: "std.core.string.temp_from_utf16", scope: !2, file: !2, line: 618, type: !4274, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4274 = !DISubroutineType(types: !4275)
!4275 = !{!332, !188, !4205}
!4276 = !DILocalVariable(name: "utf16", arg: 1, scope: !4273, file: !2, line: 618, type: !771)
!4277 = !DILocation(line: 618, column: 37, scope: !4273)
!4278 = !DILocation(line: 396, column: 7, scope: !4279, inlinedAt: !4280)
!4279 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !216, file: !216, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4280 = !DILocation(line: 618, column: 80, scope: !4273)
!4281 = !DILocation(line: 398, column: 3, scope: !4282, inlinedAt: !4280)
!4282 = distinct !DILexicalBlock(scope: !4279, file: !216, line: 397, column: 2)
!4283 = !DILocation(line: 400, column: 9, scope: !4279, inlinedAt: !4280)
!4284 = !DILocation(line: 618, column: 47, scope: !4273)
