; ModuleID = 'std::math::random'
source_filename = "std::math::random"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%any = type { ptr, i64 }
%"char[]" = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"ulong[]" = type { ptr, i64 }

$std.math.random.srand = comdat any

$std.math.random.rand = comdat any

$std.math.random.rand_in_range = comdat any

$std.math.random.rnd = comdat any

$std.math.random.Lcg128Random.set_seed = comdat any

$std.math.random.Lcg128Random.next_long = comdat any

$std.math.random.Lcg128Random.next_bytes = comdat any

$std.math.random.Lcg128Random.next_int128 = comdat any

$std.math.random.Lcg128Random.next_int = comdat any

$std.math.random.Lcg128Random.next_short = comdat any

$std.math.random.Lcg128Random.next_byte = comdat any

$std.math.random.Lcg64Random.set_seed = comdat any

$std.math.random.Lcg64Random.next_int = comdat any

$std.math.random.Lcg64Random.next_bytes = comdat any

$std.math.random.Lcg64Random.next_int128 = comdat any

$std.math.random.Lcg64Random.next_long = comdat any

$std.math.random.Lcg64Random.next_short = comdat any

$std.math.random.Lcg64Random.next_byte = comdat any

$std.math.random.Lcg32Random.set_seed = comdat any

$std.math.random.Lcg32Random.next_short = comdat any

$std.math.random.Lcg32Random.next_bytes = comdat any

$std.math.random.Lcg32Random.next_int128 = comdat any

$std.math.random.Lcg32Random.next_long = comdat any

$std.math.random.Lcg32Random.next_int = comdat any

$std.math.random.Lcg32Random.next_byte = comdat any

$std.math.random.Lcg16Random.set_seed = comdat any

$std.math.random.Lcg16Random.next_byte = comdat any

$std.math.random.Lcg16Random.next_bytes = comdat any

$std.math.random.Lcg16Random.next_int128 = comdat any

$std.math.random.Lcg16Random.next_long = comdat any

$std.math.random.Lcg16Random.next_int = comdat any

$std.math.random.Lcg16Random.next_short = comdat any

$std.math.random.Msws128Random.set_seed = comdat any

$std.math.random.Msws128Random.next_int128 = comdat any

$std.math.random.Msws128Random.next_bytes = comdat any

$std.math.random.Msws128Random.next_long = comdat any

$std.math.random.Msws128Random.next_int = comdat any

$std.math.random.Msws128Random.next_short = comdat any

$std.math.random.Msws128Random.next_byte = comdat any

$std.math.random.Msws64Random.set_seed = comdat any

$std.math.random.Msws64Random.next_long = comdat any

$std.math.random.Msws64Random.next_bytes = comdat any

$std.math.random.Msws64Random.next_int128 = comdat any

$std.math.random.Msws64Random.next_int = comdat any

$std.math.random.Msws64Random.next_short = comdat any

$std.math.random.Msws64Random.next_byte = comdat any

$std.math.random.Msws32Random.set_seed = comdat any

$std.math.random.Msws32Random.next_int = comdat any

$std.math.random.Msws32Random.next_bytes = comdat any

$std.math.random.Msws32Random.next_int128 = comdat any

$std.math.random.Msws32Random.next_long = comdat any

$std.math.random.Msws32Random.next_short = comdat any

$std.math.random.Msws32Random.next_byte = comdat any

$std.math.random.Msws16Random.set_seed = comdat any

$std.math.random.Msws16Random.next_short = comdat any

$std.math.random.Msws16Random.next_bytes = comdat any

$std.math.random.Msws16Random.next_int128 = comdat any

$std.math.random.Msws16Random.next_long = comdat any

$std.math.random.Msws16Random.next_int = comdat any

$std.math.random.Msws16Random.next_byte = comdat any

$std.math.random.Msws8Random.set_seed = comdat any

$std.math.random.Msws8Random.next_byte = comdat any

$std.math.random.Msws8Random.next_bytes = comdat any

$std.math.random.Msws8Random.next_int128 = comdat any

$std.math.random.Msws8Random.next_long = comdat any

$std.math.random.Msws8Random.next_int = comdat any

$std.math.random.Msws8Random.next_short = comdat any

$std.math.random.Sfc128Random.set_seed = comdat any

$std.math.random.Sfc128Random.next_int128 = comdat any

$std.math.random.Sfc128Random.next_bytes = comdat any

$std.math.random.Sfc128Random.next_long = comdat any

$std.math.random.Sfc128Random.next_int = comdat any

$std.math.random.Sfc128Random.next_short = comdat any

$std.math.random.Sfc128Random.next_byte = comdat any

$std.math.random.Sfc64Random.set_seed = comdat any

$std.math.random.Sfc64Random.next_long = comdat any

$std.math.random.Sfc64Random.next_bytes = comdat any

$std.math.random.Sfc64Random.next_int128 = comdat any

$std.math.random.Sfc64Random.next_int = comdat any

$std.math.random.Sfc64Random.next_short = comdat any

$std.math.random.Sfc64Random.next_byte = comdat any

$std.math.random.Sfc32Random.set_seed = comdat any

$std.math.random.Sfc32Random.next_int = comdat any

$std.math.random.Sfc32Random.next_bytes = comdat any

$std.math.random.Sfc32Random.next_int128 = comdat any

$std.math.random.Sfc32Random.next_long = comdat any

$std.math.random.Sfc32Random.next_short = comdat any

$std.math.random.Sfc32Random.next_byte = comdat any

$std.math.random.Sfc16Random.set_seed = comdat any

$std.math.random.Sfc16Random.next_short = comdat any

$std.math.random.Sfc16Random.next_bytes = comdat any

$std.math.random.Sfc16Random.next_int128 = comdat any

$std.math.random.Sfc16Random.next_long = comdat any

$std.math.random.Sfc16Random.next_int = comdat any

$std.math.random.Sfc16Random.next_byte = comdat any

$std.math.random.Sfc8Random.set_seed = comdat any

$std.math.random.Sfc8Random.next_byte = comdat any

$std.math.random.Sfc8Random.next_bytes = comdat any

$std.math.random.Sfc8Random.next_int128 = comdat any

$std.math.random.Sfc8Random.next_long = comdat any

$std.math.random.Sfc8Random.next_int = comdat any

$std.math.random.Sfc8Random.next_short = comdat any

$std.math.random.seeder = comdat any

$std.math.random.entropy = comdat any

$std.math.random.Mcg128Random.set_seed = comdat any

$std.math.random.Mcg128Random.next_bytes = comdat any

$std.math.random.Mcg128Random.next_long = comdat any

$std.math.random.Mcg128Random.next_int128 = comdat any

$std.math.random.Mcg128Random.next_int = comdat any

$std.math.random.Mcg128Random.next_short = comdat any

$std.math.random.Mcg128Random.next_byte = comdat any

$std.math.random.Mcg64Random.set_seed = comdat any

$std.math.random.Mcg64Random.next_bytes = comdat any

$std.math.random.Mcg64Random.next_int = comdat any

$std.math.random.Mcg64Random.next_int128 = comdat any

$std.math.random.Mcg64Random.next_long = comdat any

$std.math.random.Mcg64Random.next_short = comdat any

$std.math.random.Mcg64Random.next_byte = comdat any

$std.math.random.Mcg32Random.set_seed = comdat any

$std.math.random.Mcg32Random.next_short = comdat any

$std.math.random.Mcg32Random.next_bytes = comdat any

$std.math.random.Mcg32Random.next_int128 = comdat any

$std.math.random.Mcg32Random.next_long = comdat any

$std.math.random.Mcg32Random.next_int = comdat any

$std.math.random.Mcg32Random.next_byte = comdat any

$std.math.random.Mcg16Random.set_seed = comdat any

$std.math.random.Mcg16Random.next_byte = comdat any

$std.math.random.Mcg16Random.next_bytes = comdat any

$std.math.random.Mcg16Random.next_int128 = comdat any

$std.math.random.Mcg16Random.next_long = comdat any

$std.math.random.Mcg16Random.next_int = comdat any

$std.math.random.Mcg16Random.next_short = comdat any

$std.math.random.SimpleRandom.set_seed = comdat any

$std.math.random.SimpleRandom.next_int = comdat any

$std.math.random.SimpleRandom.next_bytes = comdat any

$std.math.random.SimpleRandom.next_int128 = comdat any

$std.math.random.SimpleRandom.next_long = comdat any

$std.math.random.SimpleRandom.next_short = comdat any

$std.math.random.SimpleRandom.next_byte = comdat any

$std.math.random.Pcg128Random.set_seed = comdat any

$std.math.random.Pcg128Random.next_long = comdat any

$std.math.random.Pcg128Random.next_bytes = comdat any

$std.math.random.Pcg128Random.next_int128 = comdat any

$std.math.random.Pcg128Random.next_int = comdat any

$std.math.random.Pcg128Random.next_short = comdat any

$std.math.random.Pcg128Random.next_byte = comdat any

$std.math.random.Pcg64Random.set_seed = comdat any

$std.math.random.Pcg64Random.next_int = comdat any

$std.math.random.Pcg64Random.next_bytes = comdat any

$std.math.random.Pcg64Random.next_int128 = comdat any

$std.math.random.Pcg64Random.next_long = comdat any

$std.math.random.Pcg64Random.next_short = comdat any

$std.math.random.Pcg64Random.next_byte = comdat any

$std.math.random.Pcg32Random.set_seed = comdat any

$std.math.random.Pcg32Random.next_short = comdat any

$std.math.random.Pcg32Random.next_bytes = comdat any

$std.math.random.Pcg32Random.next_int128 = comdat any

$std.math.random.Pcg32Random.next_long = comdat any

$std.math.random.Pcg32Random.next_int = comdat any

$std.math.random.Pcg32Random.next_byte = comdat any

$std.math.random.Pcg16Random.set_seed = comdat any

$std.math.random.Pcg16Random.next_byte = comdat any

$std.math.random.Pcg16Random.next_bytes = comdat any

$std.math.random.Pcg16Random.next_int128 = comdat any

$std.math.random.Pcg16Random.next_long = comdat any

$std.math.random.Pcg16Random.next_int = comdat any

$std.math.random.Pcg16Random.next_short = comdat any

$"$ct.std.math.random.Lcg128Random" = comdat any

$"$ct.uint128" = comdat any

$"$ct.std.math.random.Lcg64Random" = comdat any

$"$ct.ulong" = comdat any

$"$ct.std.math.random.Lcg32Random" = comdat any

$"$ct.uint" = comdat any

$"$ct.std.math.random.Lcg16Random" = comdat any

$"$ct.ushort" = comdat any

$"$ct.std.math.random.Msws128Random" = comdat any

$"$ct.std.math.random.Msws64Random" = comdat any

$"$ct.std.math.random.Msws32Random" = comdat any

$"$ct.std.math.random.Msws16Random" = comdat any

$"$ct.std.math.random.Msws8Random" = comdat any

$"$ct.std.math.random.Sfc128Random" = comdat any

$"$ct.a4$uint128" = comdat any

$"$ct.std.math.random.Sfc64Random" = comdat any

$"$ct.a4$ulong" = comdat any

$"$ct.std.math.random.Sfc32Random" = comdat any

$"$ct.a4$uint" = comdat any

$"$ct.std.math.random.Sfc16Random" = comdat any

$"$ct.a4$ushort" = comdat any

$"$ct.std.math.random.Sfc8Random" = comdat any

$"$ct.a4$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.math.random.Mcg128Random" = comdat any

$"$ct.std.math.random.Mcg64Random" = comdat any

$"$ct.std.math.random.Mcg32Random" = comdat any

$"$ct.std.math.random.Mcg16Random" = comdat any

$"$ct.std.math.random.SimpleRandom" = comdat any

$"$ct.std.math.random.Pcg128Random" = comdat any

$"$ct.std.math.random.Pcg64Random" = comdat any

$"$ct.std.math.random.Pcg32Random" = comdat any

$"$ct.std.math.random.Pcg16Random" = comdat any

$std.math.random.default_random = comdat any

$std.math.random.default_random_initialized = comdat any

$"$ct.long" = comdat any

$"$sel.set_seed" = comdat any

$"$sel.next_long" = comdat any

$"$sel.next_bytes" = comdat any

$"$sel.next_int128" = comdat any

$"$sel.next_int" = comdat any

$"$sel.next_short" = comdat any

$"$sel.next_byte" = comdat any

@"$ct.std.math.random.Lcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws128Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws64Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws32Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws16Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws8Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 4, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.a4$uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint128" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.a4$ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ulong" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.a4$uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.a4$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ushort" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc8Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.a4$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$char" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.char" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.SimpleRandom" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@std.math.random.default_random = weak thread_local global [4 x i64] zeroinitializer, comdat, align 16, !dbg !0
@std.math.random.default_random_initialized = weak thread_local local_unnamed_addr global i8 0, comdat, align 1, !dbg !9
@.panic_msg = internal constant [39 x i8] c"@require \22is_random(random)\22 violated.\00", align 1
@.file = internal constant [15 x i8] c"math_random.c3\00", align 1
@.func = internal constant [5 x i8] c"rand\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.2 = internal constant [31 x i8] c"@require \22range > 0\22 violated.\00", align 1
@.panic_msg.3 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.4 = internal constant [32 x i8] c"@require \22max >= min\22 violated.\00", align 1
@.func.5 = internal constant [14 x i8] c"rand_in_range\00", align 1
@.func.6 = internal constant [4 x i8] c"rnd\00", align 1
@std.math.random.ODD_PHI128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 8, !dbg !12
@std.math.random.ODD_PHI64 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !16
@std.math.random.ODD_PHI32 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !18
@std.math.random.ODD_PHI16 = internal unnamed_addr constant i16 -25033, align 2, !dbg !21
@std.math.random.MUL_LCG128 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 8, !dbg !24
@std.math.random.MUL_LCG64 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !26
@std.math.random.MUL_LCG32 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !28
@std.math.random.MUL_LCG16 = internal unnamed_addr constant i16 -28323, align 2, !dbg !30
@.panic_msg.14 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file.15 = internal constant [12 x i8] c"math.lcg.c3\00", align 1
@.func.16 = internal constant [9 x i8] c"set_seed\00", align 1
@.panic_msg.17 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.func.18 = internal constant [10 x i8] c"next_long\00", align 1
@.panic_msg.19 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.20 = internal constant [11 x i8] c"next_bytes\00", align 1
@.panic_msg.21 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.22 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.panic_msg.23 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.24 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.26 = private unnamed_addr constant [24 x i8] c"Lcg128Random.next_bytes\00", align 1
@.func.27 = internal constant [12 x i8] c"next_int128\00", align 1
@.func.28 = internal constant [9 x i8] c"next_int\00", align 1
@.func.29 = internal constant [11 x i8] c"next_short\00", align 1
@.func.30 = internal constant [10 x i8] c"next_byte\00", align 1
@.str.31 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.33 = private unnamed_addr constant [23 x i8] c"Lcg64Random.next_bytes\00", align 1
@.str.34 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.36 = private unnamed_addr constant [23 x i8] c"Lcg32Random.next_bytes\00", align 1
@.str.37 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.38 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.39 = private unnamed_addr constant [23 x i8] c"Lcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.44 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 8, !dbg !32
@std.math.random.ODD_PHI64.45 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !35
@std.math.random.ODD_PHI32.46 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !37
@std.math.random.ODD_PHI16.47 = internal unnamed_addr constant i16 -25033, align 2, !dbg !39
@std.math.random.ODD_PHI8 = internal unnamed_addr constant i8 -97, align 1, !dbg !41
@.file.48 = internal constant [13 x i8] c"math.msws.c3\00", align 1
@.panic_msg.49 = internal constant [54 x i8] c"Dereference of null pointer, '$Type*)&expr' was null.\00", align 1
@.file.50 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.str.51 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.52 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.53 = private unnamed_addr constant [25 x i8] c"Msws128Random.next_bytes\00", align 1
@.str.54 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.55 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.56 = private unnamed_addr constant [24 x i8] c"Msws64Random.next_bytes\00", align 1
@.str.57 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.58 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.59 = private unnamed_addr constant [24 x i8] c"Msws32Random.next_bytes\00", align 1
@.str.60 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.61 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.62 = private unnamed_addr constant [24 x i8] c"Msws16Random.next_bytes\00", align 1
@.str.63 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.64 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.65 = private unnamed_addr constant [23 x i8] c"Msws8Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.70 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 8, !dbg !44
@std.math.random.ODD_PHI64.71 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !46
@std.math.random.ODD_PHI32.72 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !48
@std.math.random.ODD_PHI16.73 = internal unnamed_addr constant i16 -25033, align 2, !dbg !50
@std.math.random.ODD_PHI8.74 = internal unnamed_addr constant i8 -97, align 1, !dbg !52
@.file.75 = internal constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.76 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.78 = private unnamed_addr constant [24 x i8] c"Sfc128Random.next_bytes\00", align 1
@.str.79 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.80 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.81 = private unnamed_addr constant [23 x i8] c"Sfc64Random.next_bytes\00", align 1
@.panic_msg.82 = internal constant [62 x i8] c"Reference parameter 'sfc' was passed a null pointer argument.\00", align 1
@.str.83 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.84 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.85 = private unnamed_addr constant [23 x i8] c"Sfc32Random.next_bytes\00", align 1
@.panic_msg.86 = internal constant [63 x i8] c"Reference parameter 'seed' was passed a null pointer argument.\00", align 1
@.str.87 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.88 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.89 = private unnamed_addr constant [23 x i8] c"Sfc16Random.next_bytes\00", align 1
@.str.90 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.91 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.92 = private unnamed_addr constant [22 x i8] c"Sfc8Random.next_bytes\00", align 1
@std.math.random.ODD_PHI64.95 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !54
@std.math.random.MUL_MCG64 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !57
@std.math.random.MUL_LCG64.96 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !59
@std.core.mem.allocator.thread_temp_allocator = extern_weak thread_local global ptr, align 8
@.file.97 = internal constant [15 x i8] c"math.seeder.c3\00", align 1
@.func.98 = internal constant [7 x i8] c"seeder\00", align 1
@.panic_msg.99 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.100 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.101 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.102 = internal constant [64 x i8] c"Dereference of null pointer, 'char[8]*)&input[i * 8]' was null.\00", align 1
@.panic_msg.103 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.104 = internal constant [7 x i8] c"mem.c3\00", align 1
@entropy.random_int = internal unnamed_addr global i32 0, align 4, !dbg !61
@.str.105 = private unnamed_addr constant [9 x i8] c"16:13:49\00", align 1
@.func.106 = internal constant [8 x i8] c"entropy\00", align 1
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@std.math.random.MUL_MCG128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 8, !dbg !63
@std.math.random.MUL_MCG64.110 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !66
@std.math.random.MUL_MCG32 = internal unnamed_addr constant i32 -1814600227, align 4, !dbg !68
@std.math.random.MUL_MCG16 = internal unnamed_addr constant i16 -27691, align 2, !dbg !70
@.file.111 = internal constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.112 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.113 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.114 = private unnamed_addr constant [24 x i8] c"Mcg128Random.next_bytes\00", align 1
@.str.115 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.116 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.117 = private unnamed_addr constant [23 x i8] c"Mcg64Random.next_bytes\00", align 1
@.str.118 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.119 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.120 = private unnamed_addr constant [23 x i8] c"Mcg32Random.next_bytes\00", align 1
@.str.121 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.122 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.123 = private unnamed_addr constant [23 x i8] c"Mcg16Random.next_bytes\00", align 1
@std.math.random.SIMPLE_RANDOM_MULTIPLIER = internal unnamed_addr constant i64 25214903917, align 8, !dbg !72
@std.math.random.SIMPLE_RANDOM_ADDEND = internal unnamed_addr constant i64 11, align 8, !dbg !76
@std.math.random.SIMPLE_RANDOM_MASK = internal unnamed_addr constant i64 281474976710655, align 8, !dbg !78
@.file.126 = internal constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.127 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.128 = private unnamed_addr constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.129 = private unnamed_addr constant [24 x i8] c"SimpleRandom.next_bytes\00", align 1
@std.math.random.ODD_PHI128.137 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 8, !dbg !80
@std.math.random.ODD_PHI64.138 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !83
@std.math.random.ODD_PHI32.139 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !85
@std.math.random.ODD_PHI16.140 = internal unnamed_addr constant i16 -25033, align 2, !dbg !87
@std.math.random.MUL_LCG128.141 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 8, !dbg !89
@std.math.random.MUL_LCG64.142 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !91
@std.math.random.MUL_LCG32.143 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !93
@std.math.random.MUL_LCG16.144 = internal unnamed_addr constant i16 -28323, align 2, !dbg !95
@.file.145 = internal constant [12 x i8] c"math.pcg.c3\00", align 1
@next_long.ROT_SHIFT = internal unnamed_addr constant i32 58, align 4, !dbg !97
@.str.146 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.147 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.148 = private unnamed_addr constant [24 x i8] c"Pcg128Random.next_bytes\00", align 1
@next_int.ROT_SHIFT = internal unnamed_addr constant i32 27, align 4, !dbg !100
@.str.149 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.150 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.151 = private unnamed_addr constant [23 x i8] c"Pcg64Random.next_bytes\00", align 1
@next_short.ROT_SHIFT = internal unnamed_addr constant i32 12, align 4, !dbg !102
@.str.152 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.153 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.154 = private unnamed_addr constant [23 x i8] c"Pcg32Random.next_bytes\00", align 1
@next_byte.ROT_SHIFT = internal unnamed_addr constant i32 5, align 4, !dbg !104
@.str.155 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.156 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.157 = private unnamed_addr constant [23 x i8] c"Pcg16Random.next_bytes\00", align 1
@"$ct.dyn.std.math.random.Lcg128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.set_seed" = linkonce_odr constant [9 x i8] c"set_seed\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_long" = linkonce_odr constant [10 x i8] c"next_long\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_bytes" = linkonce_odr constant [11 x i8] c"next_bytes\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_int128" = linkonce_odr constant [12 x i8] c"next_int128\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_int" = linkonce_odr constant [9 x i8] c"next_int\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_short" = linkonce_odr constant [11 x i8] c"next_short\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.next_byte" = linkonce_odr constant [10 x i8] c"next_byte\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.set_seed" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_byte" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int128" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_long" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_short" = global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.srand(i64 %0) #0 comdat !dbg !114 {
entry:
  %seed = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  store i64 %0, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !118, metadata !DIExpression()), !dbg !119
  store ptr %seed, ptr %value, align 8
  %1 = load ptr, ptr %value, align 8, !dbg !120
  store ptr %1, ptr %taddr, align 8
  %2 = load ptr, ptr %taddr, align 8
  %3 = insertvalue %"char[]" undef, ptr %2, 0
  %4 = insertvalue %"char[]" %3, i64 8, 1
  call void @std.math.random.Sfc64Random.set_seed(ptr @std.math.random.default_random, ptr %2, i64 8), !dbg !124
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !125
  ret void, !dbg !125
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.rand(i32 %0) #0 comdat !dbg !126 {
entry:
  %range = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %sretparam = alloca [32 x i8], align 1
  %random2 = alloca ptr, align 8
  %range3 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random4 = alloca ptr, align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %range, align 4
  call void @llvm.dbg.declare(metadata ptr %range, metadata !130, metadata !DIExpression()), !dbg !131
  %1 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !132
  %2 = trunc i8 %1 to i1, !dbg !132
  %not = xor i1 %2, true, !dbg !132
  br i1 %not, label %if.then, label %if.exit, !dbg !132

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %3 = load ptr, ptr %random, align 8
  store ptr %3, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !135

assert_fail:                                      ; preds = %if.then
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !137
  call void %4(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func, i64 4, i32 24), !dbg !137
  unreachable, !dbg !137

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !142
  %5 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !142
  %6 = insertvalue %"char[]" %5, i64 32, 1, !dbg !142
  %7 = load ptr, ptr %random, align 8, !dbg !142
  call void @std.math.random.Sfc64Random.set_seed(ptr %7, ptr %sretparam, i64 32), !dbg !143
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !144
  br label %if.exit, !dbg !144

if.exit:                                          ; preds = %assert_ok, %entry
  store ptr @std.math.random.default_random, ptr %random2, align 8
  %8 = load i32, ptr %range, align 4
  store i32 %8, ptr %range3, align 4
  %9 = load ptr, ptr %random2, align 8
  store ptr %9, ptr %random4, align 8
  br i1 true, label %assert_ok6, label %assert_fail5, !dbg !145

assert_fail5:                                     ; preds = %if.exit
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !147
  call void %10(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func, i64 4, i32 34), !dbg !147
  unreachable, !dbg !147

assert_ok6:                                       ; preds = %if.exit
  %11 = load i32, ptr %range3, align 4, !dbg !151
  %lt = icmp ult i32 0, %11, !dbg !151
  br i1 %lt, label %assert_ok8, label %assert_fail7, !dbg !151

assert_fail7:                                     ; preds = %assert_ok6
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !151
  call void %12(ptr @.panic_msg.2, i64 30, ptr @.file, i64 14, ptr @.func, i64 4, i32 35), !dbg !151
  unreachable, !dbg !151

assert_ok8:                                       ; preds = %assert_ok6
  %13 = load i32, ptr %range3, align 4, !dbg !152
  %eq = icmp eq i32 1, %13, !dbg !152
  br i1 %eq, label %if.then9, label %if.exit10, !dbg !152

if.then9:                                         ; preds = %assert_ok8
  store i32 0, ptr %blockret, align 4, !dbg !153
  br label %expr_block.exit, !dbg !153

if.exit10:                                        ; preds = %assert_ok8
  call void @llvm.dbg.declare(metadata ptr %mask, metadata !154, metadata !DIExpression()), !dbg !155
  store i32 -1, ptr %mask, align 4, !dbg !156
  %14 = load i32, ptr %range3, align 4, !dbg !157
  %sub = sub i32 %14, 1, !dbg !157
  store i32 %sub, ptr %range3, align 4, !dbg !157
  %15 = load i32, ptr %mask, align 4, !dbg !158
  %16 = load i32, ptr %range3, align 4
  store i32 %16, ptr %self, align 4
  %17 = load i32, ptr %self, align 4, !dbg !159
  %18 = call i32 @llvm.ctlz.i32(i32 %17, i1 false), !dbg !159
  %shift_exceeds = icmp uge i32 %18, 32, !dbg !158
  %19 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !158
  br i1 %19, label %panic, label %checkok, !dbg !158

checkok:                                          ; preds = %if.exit10
  %lshr = lshr i32 %15, %18, !dbg !158
  %20 = freeze i32 %lshr, !dbg !158
  store i32 %20, ptr %mask, align 4, !dbg !158
  call void @llvm.dbg.declare(metadata ptr %x, metadata !163, metadata !DIExpression()), !dbg !164
  br label %loop.body, !dbg !165

loop.cond:                                        ; preds = %loop.body
  %21 = load i32, ptr %x, align 4, !dbg !166
  %22 = load i32, ptr %range3, align 4, !dbg !168
  %gt = icmp ugt i32 %21, %22, !dbg !166
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !166

loop.body:                                        ; preds = %loop.cond, %checkok
  %23 = load ptr, ptr %random2, align 8, !dbg !169
  %24 = call i32 @std.math.random.Sfc64Random.next_int(ptr %23), !dbg !169
  %25 = load i32, ptr %mask, align 4, !dbg !171
  %and = and i32 %24, %25, !dbg !169
  store i32 %and, ptr %x, align 4, !dbg !169
  br label %loop.cond, !dbg !169

loop.exit:                                        ; preds = %loop.cond
  %26 = load i32, ptr %x, align 4, !dbg !172
  store i32 %26, ptr %blockret, align 4, !dbg !172
  br label %expr_block.exit, !dbg !172

expr_block.exit:                                  ; preds = %loop.exit, %if.then9
  %27 = load i32, ptr %blockret, align 4, !dbg !172
  ret i32 %27, !dbg !172

panic:                                            ; preds = %if.exit10
  store i32 %18, ptr %taddr, align 4
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %29, ptr %varargslots, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 35, ptr @.file, i64 14, ptr @.func, i64 4, i32 42, ptr byval(%"any[]") align 8 %indirectarg), !dbg !158
  unreachable, !dbg !158
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.rand_in_range(i32 %0, i32 %1) #0 comdat !dbg !173 {
entry:
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %sretparam = alloca [32 x i8], align 1
  %random4 = alloca ptr, align 8
  %min5 = alloca i32, align 4
  %max6 = alloca i32, align 4
  %random7 = alloca ptr, align 8
  %random13 = alloca ptr, align 8
  %range = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random14 = alloca ptr, align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %min, align 4
  call void @llvm.dbg.declare(metadata ptr %min, metadata !176, metadata !DIExpression()), !dbg !177
  store i32 %1, ptr %max, align 4
  call void @llvm.dbg.declare(metadata ptr %max, metadata !178, metadata !DIExpression()), !dbg !179
  %2 = load i32, ptr %max, align 4, !dbg !180
  %3 = load i32, ptr %min, align 4, !dbg !182
  %ge = icmp sge i32 %2, %3, !dbg !180
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !180

assert_fail:                                      ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !180
  call void %4(ptr @.panic_msg.4, i64 31, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 88), !dbg !180
  unreachable, !dbg !180

assert_ok:                                        ; preds = %entry
  %5 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !183
  %6 = trunc i8 %5 to i1, !dbg !183
  %not = xor i1 %6, true, !dbg !183
  br i1 %not, label %if.then, label %if.exit, !dbg !183

if.then:                                          ; preds = %assert_ok
  store ptr @std.math.random.default_random, ptr %random, align 8
  %7 = load ptr, ptr %random, align 8
  store ptr %7, ptr %random1, align 8
  br i1 true, label %assert_ok3, label %assert_fail2, !dbg !186

assert_fail2:                                     ; preds = %if.then
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !188
  call void %8(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 24), !dbg !188
  unreachable, !dbg !188

assert_ok3:                                       ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !193
  %9 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !193
  %10 = insertvalue %"char[]" %9, i64 32, 1, !dbg !193
  %11 = load ptr, ptr %random, align 8, !dbg !193
  call void @std.math.random.Sfc64Random.set_seed(ptr %11, ptr %sretparam, i64 32), !dbg !194
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !195
  br label %if.exit, !dbg !195

if.exit:                                          ; preds = %assert_ok3, %assert_ok
  store ptr @std.math.random.default_random, ptr %random4, align 8
  %12 = load i32, ptr %min, align 4
  store i32 %12, ptr %min5, align 4
  %13 = load i32, ptr %max, align 4
  store i32 %13, ptr %max6, align 4
  %14 = load ptr, ptr %random4, align 8
  store ptr %14, ptr %random7, align 8
  br i1 true, label %assert_ok9, label %assert_fail8, !dbg !196

assert_fail8:                                     ; preds = %if.exit
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !198
  call void %15(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 55), !dbg !198
  unreachable, !dbg !198

assert_ok9:                                       ; preds = %if.exit
  %16 = load i32, ptr %max6, align 4, !dbg !202
  %17 = load i32, ptr %min5, align 4, !dbg !203
  %ge10 = icmp sge i32 %16, %17, !dbg !202
  br i1 %ge10, label %assert_ok12, label %assert_fail11, !dbg !202

assert_fail11:                                    ; preds = %assert_ok9
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !202
  call void %18(ptr @.panic_msg.4, i64 31, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 56), !dbg !202
  unreachable, !dbg !202

assert_ok12:                                      ; preds = %assert_ok9
  %19 = load ptr, ptr %random4, align 8
  store ptr %19, ptr %random13, align 8
  %20 = load i32, ptr %max6, align 4, !dbg !204
  %21 = load i32, ptr %min5, align 4, !dbg !205
  %sub = sub i32 %20, %21, !dbg !204
  %add = add i32 %sub, 1, !dbg !204
  store i32 %add, ptr %range, align 4
  %22 = load ptr, ptr %random13, align 8
  store ptr %22, ptr %random14, align 8
  br i1 true, label %assert_ok16, label %assert_fail15, !dbg !206

assert_fail15:                                    ; preds = %assert_ok12
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !208
  call void %23(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 34), !dbg !208
  unreachable, !dbg !208

assert_ok16:                                      ; preds = %assert_ok12
  %24 = load i32, ptr %range, align 4, !dbg !212
  %lt = icmp ult i32 0, %24, !dbg !212
  br i1 %lt, label %assert_ok18, label %assert_fail17, !dbg !212

assert_fail17:                                    ; preds = %assert_ok16
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !212
  call void %25(ptr @.panic_msg.2, i64 30, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 35), !dbg !212
  unreachable, !dbg !212

assert_ok18:                                      ; preds = %assert_ok16
  %26 = load i32, ptr %range, align 4, !dbg !213
  %eq = icmp eq i32 1, %26, !dbg !213
  br i1 %eq, label %if.then19, label %if.exit20, !dbg !213

if.then19:                                        ; preds = %assert_ok18
  store i32 0, ptr %blockret, align 4, !dbg !214
  br label %expr_block.exit, !dbg !214

if.exit20:                                        ; preds = %assert_ok18
  call void @llvm.dbg.declare(metadata ptr %mask, metadata !215, metadata !DIExpression()), !dbg !216
  store i32 -1, ptr %mask, align 4, !dbg !217
  %27 = load i32, ptr %range, align 4, !dbg !218
  %sub21 = sub i32 %27, 1, !dbg !218
  store i32 %sub21, ptr %range, align 4, !dbg !218
  %28 = load i32, ptr %mask, align 4, !dbg !219
  %29 = load i32, ptr %range, align 4
  store i32 %29, ptr %self, align 4
  %30 = load i32, ptr %self, align 4, !dbg !220
  %31 = call i32 @llvm.ctlz.i32(i32 %30, i1 false), !dbg !220
  %shift_exceeds = icmp uge i32 %31, 32, !dbg !219
  %32 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !219
  br i1 %32, label %panic, label %checkok, !dbg !219

checkok:                                          ; preds = %if.exit20
  %lshr = lshr i32 %28, %31, !dbg !219
  %33 = freeze i32 %lshr, !dbg !219
  store i32 %33, ptr %mask, align 4, !dbg !219
  call void @llvm.dbg.declare(metadata ptr %x, metadata !223, metadata !DIExpression()), !dbg !224
  br label %loop.body, !dbg !225

loop.cond:                                        ; preds = %loop.body
  %34 = load i32, ptr %x, align 4, !dbg !226
  %35 = load i32, ptr %range, align 4, !dbg !228
  %gt = icmp ugt i32 %34, %35, !dbg !226
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !226

loop.body:                                        ; preds = %loop.cond, %checkok
  %36 = load ptr, ptr %random13, align 8, !dbg !229
  %37 = call i32 @std.math.random.Sfc64Random.next_int(ptr %36), !dbg !229
  %38 = load i32, ptr %mask, align 4, !dbg !231
  %and = and i32 %37, %38, !dbg !229
  store i32 %and, ptr %x, align 4, !dbg !229
  br label %loop.cond, !dbg !229

loop.exit:                                        ; preds = %loop.cond
  %39 = load i32, ptr %x, align 4, !dbg !232
  store i32 %39, ptr %blockret, align 4, !dbg !232
  br label %expr_block.exit, !dbg !232

expr_block.exit:                                  ; preds = %loop.exit, %if.then19
  %40 = load i32, ptr %blockret, align 4, !dbg !232
  %41 = load i32, ptr %min5, align 4, !dbg !233
  %add22 = add i32 %40, %41, !dbg !211
  ret i32 %add22, !dbg !211

panic:                                            ; preds = %if.exit20
  store i32 %31, ptr %taddr, align 4
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %44, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 35, ptr @.file, i64 14, ptr @.func.5, i64 13, i32 42, ptr byval(%"any[]") align 8 %indirectarg), !dbg !219
  unreachable, !dbg !219
}

; Function Attrs: nounwind ssp uwtable
define weak double @std.math.random.rnd() #0 comdat !dbg !234 {
entry:
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %sretparam = alloca [32 x i8], align 1
  %val = alloca i64, align 8
  %0 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !238
  %1 = trunc i8 %0 to i1, !dbg !238
  %not = xor i1 %1, true, !dbg !238
  br i1 %not, label %if.then, label %if.exit, !dbg !238

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %2 = load ptr, ptr %random, align 8
  store ptr %2, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !241

assert_fail:                                      ; preds = %if.then
  %3 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !243
  call void %3(ptr @.panic_msg, i64 38, ptr @.file, i64 14, ptr @.func.6, i64 3, i32 24), !dbg !243
  unreachable, !dbg !243

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !248
  %4 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !248
  %5 = insertvalue %"char[]" %4, i64 32, 1, !dbg !248
  %6 = load ptr, ptr %random, align 8, !dbg !248
  call void @std.math.random.Sfc64Random.set_seed(ptr %6, ptr %sretparam, i64 32), !dbg !249
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !250
  br label %if.exit, !dbg !250

if.exit:                                          ; preds = %assert_ok, %entry
  call void @llvm.dbg.declare(metadata ptr %val, metadata !251, metadata !DIExpression()), !dbg !252
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr @std.math.random.default_random), !dbg !253
  %and = and i64 %7, 9007199254740991, !dbg !253
  store i64 %and, ptr %val, align 8, !dbg !253
  %8 = load i64, ptr %val, align 8, !dbg !254
  %uifp = uitofp i64 %8 to double, !dbg !254
  %fmul = fmul double %uifp, 0x3CA0000000000000, !dbg !254
  ret double %fmul, !dbg !254
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !255 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca i128, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !266
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !266
  br i1 %4, label %panic, label %checkok, !dbg !266

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !267, metadata !DIExpression()), !dbg !268
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !269, metadata !DIExpression()), !dbg !270
  %5 = load ptr, ptr %self, align 8, !dbg !271
  %checknull = icmp eq ptr %5, null, !dbg !271
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !271
  br i1 %6, label %panic1, label %checkok2, !dbg !271

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !272, metadata !DIExpression()), !dbg !274
  store i128 0, ptr %return_value, align 8, !dbg !274
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !276
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 16, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 16), !dbg !279
  %11 = load i128, ptr %return_value, align 8, !dbg !280
  store i128 %11, ptr %5, align 8, !dbg !280
  ret void, !dbg !280

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !268
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 18), !dbg !268
  unreachable, !dbg !268

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !271
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 20), !dbg !271
  unreachable, !dbg !271
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg128Random.next_long(ptr %0) #0 comdat !dbg !281 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !284
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !284
  br i1 %2, label %panic, label %checkok, !dbg !284

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !285, metadata !DIExpression()), !dbg !286
  call void @llvm.dbg.declare(metadata ptr %s, metadata !287, metadata !DIExpression()), !dbg !289
  %3 = load ptr, ptr %self, align 8, !dbg !290
  store ptr %3, ptr %s, align 8, !dbg !290
  call void @llvm.dbg.declare(metadata ptr %result, metadata !291, metadata !DIExpression()), !dbg !292
  %4 = load ptr, ptr %s, align 8, !dbg !293
  %checknull = icmp eq ptr %4, null, !dbg !293
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !293
  br i1 %5, label %panic1, label %checkok2, !dbg !293

checkok2:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 8, !dbg !293
  %lshr = lshr i128 %6, 64, !dbg !294
  %7 = freeze i128 %lshr, !dbg !294
  %trunc = trunc i128 %7 to i64, !dbg !294
  store i64 %trunc, ptr %result, align 8, !dbg !294
  %8 = load ptr, ptr %s, align 8, !dbg !295
  %checknull3 = icmp eq ptr %8, null, !dbg !295
  %9 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !295
  br i1 %9, label %panic4, label %checkok5, !dbg !295

checkok5:                                         ; preds = %checkok2
  %10 = load ptr, ptr %s, align 8, !dbg !296
  %checknull6 = icmp eq ptr %10, null, !dbg !296
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !296
  br i1 %11, label %panic7, label %checkok8, !dbg !296

checkok8:                                         ; preds = %checkok5
  %12 = load i128, ptr %10, align 8, !dbg !296
  %mul = mul i128 %12, -48899967401452674293065485854872568811, !dbg !297
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !297
  store i128 %add, ptr %8, align 8, !dbg !297
  %13 = load i64, ptr %result, align 8, !dbg !298
  ret i64 %13, !dbg !298

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !286
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.18, i64 9, i32 24), !dbg !286
  unreachable, !dbg !286

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !293
  call void %15(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.18, i64 9, i32 27), !dbg !293
  unreachable, !dbg !293

panic4:                                           ; preds = %checkok2
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !295
  call void %16(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.18, i64 9, i32 28), !dbg !295
  unreachable, !dbg !295

panic7:                                           ; preds = %checkok5
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !296
  call void %17(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.18, i64 9, i32 28), !dbg !296
  unreachable, !dbg !296
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !299 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !300
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !300
  br i1 %4, label %panic, label %checkok, !dbg !300

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !301, metadata !DIExpression()), !dbg !302
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !303, metadata !DIExpression()), !dbg !304
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !305
  %5 = load i64, ptr %ptradd1, align 8, !dbg !305
  %lt = icmp ult i64 0, %5, !dbg !305
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !305

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !305
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.15, i64 11, ptr @.func.20, i64 10, i32 33), !dbg !305
  unreachable, !dbg !305

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !307, metadata !DIExpression()), !dbg !309
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !310
  %7 = load i64, ptr %ptradd3, align 8, !dbg !310
  store i64 %7, ptr %len, align 8, !dbg !310
  br label %loop.cond, !dbg !311

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !312
  %lt4 = icmp ult i64 0, %8, !dbg !312
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !312

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !314, metadata !DIExpression()), !dbg !316
  %9 = load ptr, ptr %self, align 8, !dbg !317
  %10 = call i64 @std.math.random.Lcg128Random.next_long(ptr %9), !dbg !318
  store i64 %10, ptr %value, align 8, !dbg !318
  %11 = load i64, ptr %len, align 8, !dbg !319
  %le = icmp ule i64 %11, 8, !dbg !319
  br i1 %le, label %if.then, label %if.exit, !dbg !319

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !320
  %add = add i64 0, %13, !dbg !320
  %size = sub i64 %add, 0, !dbg !320
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !320
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !320
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !322
  %17 = extractvalue %"char[]" %16, 0, !dbg !322
  %18 = extractvalue %"char[]" %16, 1, !dbg !323
  %gt = icmp ugt i64 0, %18, !dbg !323
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !323
  br i1 %19, label %panic5, label %checkok9, !dbg !323

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !322
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !322
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !322
  %22 = extractvalue %"char[]" %21, 0, !dbg !322
  %23 = extractvalue %"char[]" %15, 0, !dbg !322
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !322
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !322
  br label %expr_block.exit, !dbg !324

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !325
  %32 = extractvalue %"char[]" %31, 0, !dbg !325
  %33 = extractvalue %"char[]" %31, 1, !dbg !325
  %gt24 = icmp sgt i64 0, %33, !dbg !325
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !325
  br i1 %34, label %panic25, label %checkok32, !dbg !325

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 8, !dbg !325
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !325
  br i1 %35, label %panic34, label %checkok41, !dbg !325

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !325
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !325
  %38 = extractvalue %"char[]" %37, 0, !dbg !325
  %39 = extractvalue %"char[]" %30, 0, !dbg !325
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !325
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !325
  %44 = load i64, ptr %len, align 8, !dbg !326
  %sub = sub i64 %44, 8, !dbg !326
  store i64 %sub, ptr %len, align 8, !dbg !326
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !327
  %46 = extractvalue %"char[]" %45, 0, !dbg !327
  %47 = extractvalue %"char[]" %45, 1, !dbg !328
  %gt55 = icmp ugt i64 8, %47, !dbg !328
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !328
  br i1 %48, label %panic56, label %checkok63, !dbg !328

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 8, !dbg !327
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !327
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !327
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !327
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !327
  br label %loop.cond, !dbg !327

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !329
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !329
  %hi = load i64, ptr %ptradd66, align 8, !dbg !329
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.25, i64 11, ptr @.str.26, i64 23, i32 35, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !332
  unreachable, !dbg !333

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !333

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !302
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.20, i64 10, i32 35), !dbg !302
  unreachable, !dbg !302

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !322
  unreachable, !dbg !322

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !322
  unreachable, !dbg !322

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !325
  unreachable, !dbg !325

panic34:                                          ; preds = %checkok32
  store i64 7, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !325
  unreachable, !dbg !325

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !325
  unreachable, !dbg !325

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !327
  unreachable, !dbg !327
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg128Random.next_int128(ptr %0) #0 comdat !dbg !334 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !337
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !337
  br i1 %2, label %panic, label %checkok, !dbg !337

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !338, metadata !DIExpression()), !dbg !339
  %3 = load ptr, ptr %self, align 8, !dbg !340
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !342
  %zext = zext i64 %4 to i128, !dbg !342
  %shl = shl i128 %zext, 64, !dbg !342
  %5 = freeze i128 %shl, !dbg !342
  %6 = load ptr, ptr %self, align 8, !dbg !340
  %7 = call i64 @std.math.random.Lcg128Random.next_long(ptr %6), !dbg !343
  %zext1 = zext i64 %7 to i128, !dbg !343
  %add = add i128 %5, %zext1, !dbg !342
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !339
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.27, i64 11, i32 36), !dbg !339
  unreachable, !dbg !339
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg128Random.next_int(ptr %0) #0 comdat !dbg !344 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !347
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !347
  br i1 %2, label %panic, label %checkok, !dbg !347

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !348, metadata !DIExpression()), !dbg !349
  %3 = load ptr, ptr %self, align 8, !dbg !350
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !351
  %trunc = trunc i64 %4 to i32, !dbg !351
  ret i32 %trunc, !dbg !351

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !349
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.28, i64 8, i32 37), !dbg !349
  unreachable, !dbg !349
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg128Random.next_short(ptr %0) #0 comdat !dbg !352 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !355
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !355
  br i1 %2, label %panic, label %checkok, !dbg !355

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !356, metadata !DIExpression()), !dbg !357
  %3 = load ptr, ptr %self, align 8, !dbg !358
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !359
  %trunc = trunc i64 %4 to i16, !dbg !359
  ret i16 %trunc, !dbg !359

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !357
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 10, i32 38), !dbg !357
  unreachable, !dbg !357
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg128Random.next_byte(ptr %0) #0 comdat !dbg !360 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !363
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !363
  br i1 %2, label %panic, label %checkok, !dbg !363

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !364, metadata !DIExpression()), !dbg !365
  %3 = load ptr, ptr %self, align 8, !dbg !366
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !367
  %trunc = trunc i64 %4 to i8, !dbg !367
  ret i8 %trunc, !dbg !367

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !365
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 9, i32 39), !dbg !365
  unreachable, !dbg !365
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !368 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !373
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !373
  br i1 %4, label %panic, label %checkok, !dbg !373

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !374, metadata !DIExpression()), !dbg !375
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !376, metadata !DIExpression()), !dbg !377
  %5 = load ptr, ptr %self, align 8, !dbg !378
  %checknull = icmp eq ptr %5, null, !dbg !378
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !378
  br i1 %6, label %panic1, label %checkok2, !dbg !378

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !379, metadata !DIExpression()), !dbg !381
  store i64 0, ptr %return_value, align 8, !dbg !381
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !383
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 8, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 8), !dbg !386
  %11 = load i64, ptr %return_value, align 8, !dbg !387
  store i64 %11, ptr %5, align 8, !dbg !387
  ret void, !dbg !387

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !375
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 45), !dbg !375
  unreachable, !dbg !375

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !378
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 47), !dbg !378
  unreachable, !dbg !378
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg64Random.next_int(ptr %0) #0 comdat !dbg !388 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !391
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !391
  br i1 %2, label %panic, label %checkok, !dbg !391

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !392, metadata !DIExpression()), !dbg !393
  call void @llvm.dbg.declare(metadata ptr %s, metadata !394, metadata !DIExpression()), !dbg !396
  %3 = load ptr, ptr %self, align 8, !dbg !397
  store ptr %3, ptr %s, align 8, !dbg !397
  call void @llvm.dbg.declare(metadata ptr %result, metadata !398, metadata !DIExpression()), !dbg !399
  %4 = load ptr, ptr %s, align 8, !dbg !400
  %checknull = icmp eq ptr %4, null, !dbg !400
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !400
  br i1 %5, label %panic1, label %checkok2, !dbg !400

checkok2:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !400
  %lshr = lshr i64 %6, 32, !dbg !401
  %7 = freeze i64 %lshr, !dbg !401
  %trunc = trunc i64 %7 to i32, !dbg !401
  store i32 %trunc, ptr %result, align 4, !dbg !401
  %8 = load ptr, ptr %s, align 8, !dbg !402
  %checknull3 = icmp eq ptr %8, null, !dbg !402
  %9 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !402
  br i1 %9, label %panic4, label %checkok5, !dbg !402

checkok5:                                         ; preds = %checkok2
  %10 = load ptr, ptr %s, align 8, !dbg !403
  %checknull6 = icmp eq ptr %10, null, !dbg !403
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !403
  br i1 %11, label %panic7, label %checkok8, !dbg !403

checkok8:                                         ; preds = %checkok5
  %12 = load i64, ptr %10, align 8, !dbg !403
  %mul = mul i64 %12, -3372029247567499371, !dbg !404
  %add = add i64 %mul, -7046029254386353131, !dbg !404
  store i64 %add, ptr %8, align 8, !dbg !404
  %13 = load i32, ptr %result, align 4, !dbg !405
  ret i32 %13, !dbg !405

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !393
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.28, i64 8, i32 51), !dbg !393
  unreachable, !dbg !393

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !400
  call void %15(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.28, i64 8, i32 54), !dbg !400
  unreachable, !dbg !400

panic4:                                           ; preds = %checkok2
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !402
  call void %16(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.28, i64 8, i32 55), !dbg !402
  unreachable, !dbg !402

panic7:                                           ; preds = %checkok5
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !403
  call void %17(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.28, i64 8, i32 55), !dbg !403
  unreachable, !dbg !403
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !406 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !407
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !407
  br i1 %4, label %panic, label %checkok, !dbg !407

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !408, metadata !DIExpression()), !dbg !409
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !410, metadata !DIExpression()), !dbg !411
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !412
  %5 = load i64, ptr %ptradd1, align 8, !dbg !412
  %lt = icmp ult i64 0, %5, !dbg !412
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !412

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !412
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.15, i64 11, ptr @.func.20, i64 10, i32 60), !dbg !412
  unreachable, !dbg !412

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !414, metadata !DIExpression()), !dbg !416
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !417
  %7 = load i64, ptr %ptradd3, align 8, !dbg !417
  store i64 %7, ptr %len, align 8, !dbg !417
  br label %loop.cond, !dbg !418

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !419
  %lt4 = icmp ult i64 0, %8, !dbg !419
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !419

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !421, metadata !DIExpression()), !dbg !423
  %9 = load ptr, ptr %self, align 8, !dbg !424
  %10 = call i32 @std.math.random.Lcg64Random.next_int(ptr %9), !dbg !425
  store i32 %10, ptr %value, align 4, !dbg !425
  %11 = load i64, ptr %len, align 8, !dbg !426
  %le = icmp ule i64 %11, 4, !dbg !426
  br i1 %le, label %if.then, label %if.exit, !dbg !426

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !427
  %add = add i64 0, %13, !dbg !427
  %size = sub i64 %add, 0, !dbg !427
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !427
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !427
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !429
  %17 = extractvalue %"char[]" %16, 0, !dbg !429
  %18 = extractvalue %"char[]" %16, 1, !dbg !430
  %gt = icmp ugt i64 0, %18, !dbg !430
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !430
  br i1 %19, label %panic5, label %checkok9, !dbg !430

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !429
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !429
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !429
  %22 = extractvalue %"char[]" %21, 0, !dbg !429
  %23 = extractvalue %"char[]" %15, 0, !dbg !429
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !429
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !429
  br label %expr_block.exit, !dbg !431

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !432
  %32 = extractvalue %"char[]" %31, 0, !dbg !432
  %33 = extractvalue %"char[]" %31, 1, !dbg !432
  %gt24 = icmp sgt i64 0, %33, !dbg !432
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !432
  br i1 %34, label %panic25, label %checkok32, !dbg !432

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 4, !dbg !432
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !432
  br i1 %35, label %panic34, label %checkok41, !dbg !432

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !432
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !432
  %38 = extractvalue %"char[]" %37, 0, !dbg !432
  %39 = extractvalue %"char[]" %30, 0, !dbg !432
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !432
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !432
  %44 = load i64, ptr %len, align 8, !dbg !433
  %sub = sub i64 %44, 4, !dbg !433
  store i64 %sub, ptr %len, align 8, !dbg !433
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !434
  %46 = extractvalue %"char[]" %45, 0, !dbg !434
  %47 = extractvalue %"char[]" %45, 1, !dbg !435
  %gt55 = icmp ugt i64 4, %47, !dbg !435
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !435
  br i1 %48, label %panic56, label %checkok63, !dbg !435

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 4, !dbg !434
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !434
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !434
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !434
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !434
  br label %loop.cond, !dbg !434

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.31, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !436
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !436
  %hi = load i64, ptr %ptradd66, align 8, !dbg !436
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.32, i64 11, ptr @.str.33, i64 22, i32 62, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !439
  unreachable, !dbg !440

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !440

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !409
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.20, i64 10, i32 62), !dbg !409
  unreachable, !dbg !409

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !429
  unreachable, !dbg !429

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !429
  unreachable, !dbg !429

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !432
  unreachable, !dbg !432

panic34:                                          ; preds = %checkok32
  store i64 3, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !432
  unreachable, !dbg !432

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !432
  unreachable, !dbg !432

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !434
  unreachable, !dbg !434
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg64Random.next_int128(ptr %0) #0 comdat !dbg !441 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !444
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !444
  br i1 %2, label %panic, label %checkok, !dbg !444

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !445, metadata !DIExpression()), !dbg !446
  %3 = load ptr, ptr %self, align 8, !dbg !447
  %4 = call i64 @std.math.random.Lcg64Random.next_long(ptr %3), !dbg !449
  %zext = zext i64 %4 to i128, !dbg !449
  %shl = shl i128 %zext, 64, !dbg !449
  %5 = freeze i128 %shl, !dbg !449
  %6 = load ptr, ptr %self, align 8, !dbg !447
  %7 = call i64 @std.math.random.Lcg64Random.next_long(ptr %6), !dbg !450
  %zext1 = zext i64 %7 to i128, !dbg !450
  %add = add i128 %5, %zext1, !dbg !449
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !446
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.27, i64 11, i32 63), !dbg !446
  unreachable, !dbg !446
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg64Random.next_long(ptr %0) #0 comdat !dbg !451 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !454
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !454
  br i1 %2, label %panic, label %checkok, !dbg !454

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !455, metadata !DIExpression()), !dbg !456
  %3 = load ptr, ptr %self, align 8, !dbg !457
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !459
  %zext = zext i32 %4 to i64, !dbg !459
  %shl = shl i64 %zext, 32, !dbg !459
  %5 = freeze i64 %shl, !dbg !459
  %6 = load ptr, ptr %self, align 8, !dbg !457
  %7 = call i32 @std.math.random.Lcg64Random.next_int(ptr %6), !dbg !460
  %zext1 = zext i32 %7 to i64, !dbg !460
  %add = add i64 %5, %zext1, !dbg !459
  ret i64 %add, !dbg !459

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !456
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.18, i64 9, i32 64), !dbg !456
  unreachable, !dbg !456
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg64Random.next_short(ptr %0) #0 comdat !dbg !461 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !464
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !464
  br i1 %2, label %panic, label %checkok, !dbg !464

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !465, metadata !DIExpression()), !dbg !466
  %3 = load ptr, ptr %self, align 8, !dbg !467
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !468
  %trunc = trunc i32 %4 to i16, !dbg !468
  ret i16 %trunc, !dbg !468

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !466
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 10, i32 65), !dbg !466
  unreachable, !dbg !466
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg64Random.next_byte(ptr %0) #0 comdat !dbg !469 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !472
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !472
  br i1 %2, label %panic, label %checkok, !dbg !472

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !473, metadata !DIExpression()), !dbg !474
  %3 = load ptr, ptr %self, align 8, !dbg !475
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !476
  %trunc = trunc i32 %4 to i8, !dbg !476
  ret i8 %trunc, !dbg !476

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !474
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 9, i32 66), !dbg !474
  unreachable, !dbg !474
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !477 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !482
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !482
  br i1 %4, label %panic, label %checkok, !dbg !482

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !483, metadata !DIExpression()), !dbg !484
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !485, metadata !DIExpression()), !dbg !486
  %5 = load ptr, ptr %self, align 8, !dbg !487
  %checknull = icmp eq ptr %5, null, !dbg !487
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !487
  br i1 %6, label %panic1, label %checkok2, !dbg !487

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !488, metadata !DIExpression()), !dbg !490
  store i32 0, ptr %return_value, align 4, !dbg !490
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !492
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 4, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 4), !dbg !495
  %11 = load i32, ptr %return_value, align 4, !dbg !496
  store i32 %11, ptr %5, align 4, !dbg !496
  ret void, !dbg !496

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !484
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 72), !dbg !484
  unreachable, !dbg !484

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !487
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 74), !dbg !487
  unreachable, !dbg !487
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg32Random.next_short(ptr %0) #0 comdat !dbg !497 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !500
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !500
  br i1 %2, label %panic, label %checkok, !dbg !500

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !501, metadata !DIExpression()), !dbg !502
  call void @llvm.dbg.declare(metadata ptr %s, metadata !503, metadata !DIExpression()), !dbg !505
  %3 = load ptr, ptr %self, align 8, !dbg !506
  store ptr %3, ptr %s, align 8, !dbg !506
  call void @llvm.dbg.declare(metadata ptr %result, metadata !507, metadata !DIExpression()), !dbg !508
  %4 = load ptr, ptr %s, align 8, !dbg !509
  %checknull = icmp eq ptr %4, null, !dbg !509
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !509
  br i1 %5, label %panic1, label %checkok2, !dbg !509

checkok2:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !509
  %lshr = lshr i32 %6, 16, !dbg !510
  %7 = freeze i32 %lshr, !dbg !510
  %trunc = trunc i32 %7 to i16, !dbg !510
  store i16 %trunc, ptr %result, align 2, !dbg !510
  %8 = load ptr, ptr %s, align 8, !dbg !511
  %checknull3 = icmp eq ptr %8, null, !dbg !511
  %9 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !511
  br i1 %9, label %panic4, label %checkok5, !dbg !511

checkok5:                                         ; preds = %checkok2
  %10 = load ptr, ptr %s, align 8, !dbg !512
  %checknull6 = icmp eq ptr %10, null, !dbg !512
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !512
  br i1 %11, label %panic7, label %checkok8, !dbg !512

checkok8:                                         ; preds = %checkok5
  %12 = load i32, ptr %10, align 4, !dbg !512
  %mul = mul i32 %12, -1856014347, !dbg !513
  %add = add i32 %mul, -1640531527, !dbg !513
  store i32 %add, ptr %8, align 4, !dbg !513
  %13 = load i16, ptr %result, align 2, !dbg !514
  ret i16 %13, !dbg !514

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !502
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 10, i32 77), !dbg !502
  unreachable, !dbg !502

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !509
  call void %15(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.29, i64 10, i32 80), !dbg !509
  unreachable, !dbg !509

panic4:                                           ; preds = %checkok2
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !511
  call void %16(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.29, i64 10, i32 81), !dbg !511
  unreachable, !dbg !511

panic7:                                           ; preds = %checkok5
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !512
  call void %17(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.29, i64 10, i32 81), !dbg !512
  unreachable, !dbg !512
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !515 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca ptr, align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !516
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !516
  br i1 %4, label %panic, label %checkok, !dbg !516

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !517, metadata !DIExpression()), !dbg !518
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !519, metadata !DIExpression()), !dbg !520
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !521, metadata !DIExpression()), !dbg !523
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !524
  %5 = load i64, ptr %ptradd2, align 8, !dbg !524
  store i64 %5, ptr %len, align 8, !dbg !524
  br label %loop.cond, !dbg !525

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !526
  %lt = icmp ult i64 0, %6, !dbg !526
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !526

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !528, metadata !DIExpression()), !dbg !530
  %7 = load ptr, ptr %self, align 8, !dbg !531
  %8 = call i16 @std.math.random.Lcg32Random.next_short(ptr %7), !dbg !532
  store i16 %8, ptr %value, align 2, !dbg !532
  %9 = load i64, ptr %len, align 8, !dbg !533
  %le = icmp ule i64 %9, 2, !dbg !533
  br i1 %le, label %if.then, label %if.exit, !dbg !533

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !534
  %add = add i64 0, %11, !dbg !534
  %size = sub i64 %add, 0, !dbg !534
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !534
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !534
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !536
  %15 = extractvalue %"char[]" %14, 0, !dbg !536
  %16 = extractvalue %"char[]" %14, 1, !dbg !537
  %gt = icmp ugt i64 0, %16, !dbg !537
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !537
  br i1 %17, label %panic3, label %checkok7, !dbg !537

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !536
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !536
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !536
  %20 = extractvalue %"char[]" %19, 0, !dbg !536
  %21 = extractvalue %"char[]" %13, 0, !dbg !536
  store %"char[]" %13, ptr %taddr9, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %taddr9, i64 8
  %22 = load i64, ptr %ptradd10, align 8
  store %"char[]" %19, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %23 = load i64, ptr %ptradd12, align 8
  %neq = icmp ne i64 %23, %22
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %24, label %panic13, label %checkok20

checkok20:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !536
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !536
  br label %expr_block.exit, !dbg !538

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr21, align 8
  %26 = load ptr, ptr %taddr21, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 2, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !539
  %30 = extractvalue %"char[]" %29, 0, !dbg !539
  %31 = extractvalue %"char[]" %29, 1, !dbg !539
  %gt22 = icmp sgt i64 0, %31, !dbg !539
  %32 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !539
  br i1 %32, label %panic23, label %checkok30, !dbg !539

checkok30:                                        ; preds = %if.exit
  %lt31 = icmp slt i64 %31, 2, !dbg !539
  %33 = call i1 @llvm.expect.i1(i1 %lt31, i1 false), !dbg !539
  br i1 %33, label %panic32, label %checkok39, !dbg !539

checkok39:                                        ; preds = %checkok30
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !539
  %35 = insertvalue %"char[]" %34, i64 2, 1, !dbg !539
  %36 = extractvalue %"char[]" %35, 0, !dbg !539
  %37 = extractvalue %"char[]" %28, 0, !dbg !539
  store %"char[]" %28, ptr %taddr40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %taddr40, i64 8
  %38 = load i64, ptr %ptradd41, align 8
  store %"char[]" %35, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %39 = load i64, ptr %ptradd43, align 8
  %neq44 = icmp ne i64 %39, %38
  %40 = call i1 @llvm.expect.i1(i1 %neq44, i1 false)
  br i1 %40, label %panic45, label %checkok52

checkok52:                                        ; preds = %checkok39
  %41 = mul i64 %38, 1, !dbg !539
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !539
  %42 = load i64, ptr %len, align 8, !dbg !540
  %sub = sub i64 %42, 2, !dbg !540
  store i64 %sub, ptr %len, align 8, !dbg !540
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !541
  %44 = extractvalue %"char[]" %43, 0, !dbg !541
  %45 = extractvalue %"char[]" %43, 1, !dbg !542
  %gt53 = icmp ugt i64 2, %45, !dbg !542
  %46 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !542
  br i1 %46, label %panic54, label %checkok61, !dbg !542

checkok61:                                        ; preds = %checkok52
  %size62 = sub i64 %45, 2, !dbg !541
  %ptradd63 = getelementptr inbounds i8, ptr %44, i64 2, !dbg !541
  %47 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !541
  %48 = insertvalue %"char[]" %47, i64 %size62, 1, !dbg !541
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !541
  br label %loop.cond, !dbg !541

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.34, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !543
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !543
  %hi = load i64, ptr %ptradd64, align 8, !dbg !543
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.35, i64 11, ptr @.str.36, i64 22, i32 85, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !546
  unreachable, !dbg !547

expr_block.exit:                                  ; preds = %checkok20
  ret void, !dbg !547

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !518
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.20, i64 10, i32 85), !dbg !518
  unreachable, !dbg !518

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !536
  unreachable, !dbg !536

panic13:                                          ; preds = %checkok7
  store i64 %23, ptr %taddr14, align 8
  %55 = insertvalue %any undef, ptr %taddr14, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr15, align 8
  %57 = insertvalue %any undef, ptr %taddr15, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %58, ptr %ptradd17, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !536
  unreachable, !dbg !536

panic23:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr24, align 8
  %60 = insertvalue %any undef, ptr %taddr24, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %62 = insertvalue %any undef, ptr %taddr25, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %63, ptr %ptradd27, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg29), !dbg !539
  unreachable, !dbg !539

panic32:                                          ; preds = %checkok30
  store i64 1, ptr %taddr33, align 8
  %65 = insertvalue %any undef, ptr %taddr33, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %68, ptr %ptradd36, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg38), !dbg !539
  unreachable, !dbg !539

panic45:                                          ; preds = %checkok39
  store i64 %39, ptr %taddr46, align 8
  %70 = insertvalue %any undef, ptr %taddr46, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr47, align 8
  %72 = insertvalue %any undef, ptr %taddr47, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %73, ptr %ptradd49, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg51), !dbg !539
  unreachable, !dbg !539

panic54:                                          ; preds = %checkok52
  store i64 %45, ptr %taddr55, align 8
  %75 = insertvalue %any undef, ptr %taddr55, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr56, align 8
  %77 = insertvalue %any undef, ptr %taddr56, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %78, ptr %ptradd58, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60), !dbg !541
  unreachable, !dbg !541
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg32Random.next_int128(ptr %0) #0 comdat !dbg !548 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !551
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !551
  br i1 %2, label %panic, label %checkok, !dbg !551

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !552, metadata !DIExpression()), !dbg !553
  %3 = load ptr, ptr %self, align 8, !dbg !554
  %4 = call i64 @std.math.random.Lcg32Random.next_long(ptr %3), !dbg !556
  %zext = zext i64 %4 to i128, !dbg !556
  %shl = shl i128 %zext, 64, !dbg !556
  %5 = freeze i128 %shl, !dbg !556
  %6 = load ptr, ptr %self, align 8, !dbg !554
  %7 = call i64 @std.math.random.Lcg32Random.next_long(ptr %6), !dbg !557
  %zext1 = zext i64 %7 to i128, !dbg !557
  %add = add i128 %5, %zext1, !dbg !556
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !553
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.27, i64 11, i32 86), !dbg !553
  unreachable, !dbg !553
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg32Random.next_long(ptr %0) #0 comdat !dbg !558 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !561
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !561
  br i1 %2, label %panic, label %checkok, !dbg !561

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !562, metadata !DIExpression()), !dbg !563
  %3 = load ptr, ptr %self, align 8, !dbg !564
  %4 = call i32 @std.math.random.Lcg32Random.next_int(ptr %3), !dbg !566
  %zext = zext i32 %4 to i64, !dbg !566
  %shl = shl i64 %zext, 32, !dbg !566
  %5 = freeze i64 %shl, !dbg !566
  %6 = load ptr, ptr %self, align 8, !dbg !564
  %7 = call i32 @std.math.random.Lcg32Random.next_int(ptr %6), !dbg !567
  %zext1 = zext i32 %7 to i64, !dbg !567
  %add = add i64 %5, %zext1, !dbg !566
  ret i64 %add, !dbg !566

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !563
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.18, i64 9, i32 87), !dbg !563
  unreachable, !dbg !563
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg32Random.next_int(ptr %0) #0 comdat !dbg !568 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !571
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !571
  br i1 %2, label %panic, label %checkok, !dbg !571

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !572, metadata !DIExpression()), !dbg !573
  %3 = load ptr, ptr %self, align 8, !dbg !574
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !576
  %zext = zext i16 %4 to i32, !dbg !576
  %shl = shl i32 %zext, 16, !dbg !576
  %5 = freeze i32 %shl, !dbg !576
  %6 = load ptr, ptr %self, align 8, !dbg !574
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !577
  %zext1 = zext i16 %7 to i32, !dbg !577
  %add = add i32 %5, %zext1, !dbg !576
  ret i32 %add, !dbg !576

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !573
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.28, i64 8, i32 88), !dbg !573
  unreachable, !dbg !573
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg32Random.next_byte(ptr %0) #0 comdat !dbg !578 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !581
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !581
  br i1 %2, label %panic, label %checkok, !dbg !581

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !582, metadata !DIExpression()), !dbg !583
  %3 = load ptr, ptr %self, align 8, !dbg !584
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !585
  %trunc = trunc i16 %4 to i8, !dbg !585
  ret i8 %trunc, !dbg !585

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !583
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 9, i32 89), !dbg !583
  unreachable, !dbg !583
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !586 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !591
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !591
  br i1 %4, label %panic, label %checkok, !dbg !591

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !592, metadata !DIExpression()), !dbg !593
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !594, metadata !DIExpression()), !dbg !595
  %5 = load ptr, ptr %self, align 8, !dbg !596
  %checknull = icmp eq ptr %5, null, !dbg !596
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !596
  br i1 %6, label %panic1, label %checkok2, !dbg !596

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !597, metadata !DIExpression()), !dbg !599
  store i16 0, ptr %return_value, align 2, !dbg !599
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !601
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 2, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 2), !dbg !604
  %11 = load i16, ptr %return_value, align 2, !dbg !605
  store i16 %11, ptr %5, align 2, !dbg !605
  ret void, !dbg !605

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !593
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 95), !dbg !593
  unreachable, !dbg !593

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !596
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.15, i64 11, ptr @.func.16, i64 8, i32 97), !dbg !596
  unreachable, !dbg !596
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Lcg16Random.next_byte(ptr %0) #0 comdat !dbg !606 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !609
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !609
  br i1 %2, label %panic, label %checkok, !dbg !609

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !610, metadata !DIExpression()), !dbg !611
  call void @llvm.dbg.declare(metadata ptr %s, metadata !612, metadata !DIExpression()), !dbg !614
  %3 = load ptr, ptr %self, align 8, !dbg !615
  store ptr %3, ptr %s, align 8, !dbg !615
  call void @llvm.dbg.declare(metadata ptr %result, metadata !616, metadata !DIExpression()), !dbg !617
  %4 = load ptr, ptr %s, align 8, !dbg !618
  %checknull = icmp eq ptr %4, null, !dbg !618
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !618
  br i1 %5, label %panic1, label %checkok2, !dbg !618

checkok2:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !618
  %zext = zext i16 %6 to i32, !dbg !618
  %lshr = lshr i32 %zext, 8, !dbg !619
  %7 = freeze i32 %lshr, !dbg !619
  %trunc = trunc i32 %7 to i8, !dbg !619
  store i8 %trunc, ptr %result, align 1, !dbg !619
  %8 = load ptr, ptr %s, align 8, !dbg !620
  %checknull3 = icmp eq ptr %8, null, !dbg !620
  %9 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !620
  br i1 %9, label %panic4, label %checkok5, !dbg !620

checkok5:                                         ; preds = %checkok2
  %10 = load ptr, ptr %s, align 8, !dbg !621
  %checknull6 = icmp eq ptr %10, null, !dbg !621
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !621
  br i1 %11, label %panic7, label %checkok8, !dbg !621

checkok8:                                         ; preds = %checkok5
  %12 = load i16, ptr %10, align 2, !dbg !621
  %zext9 = zext i16 %12 to i32, !dbg !621
  %mul = mul i32 %zext9, 37213, !dbg !622
  %add = add i32 %mul, 40503, !dbg !622
  %trunc10 = trunc i32 %add to i16, !dbg !622
  store i16 %trunc10, ptr %8, align 2, !dbg !622
  %13 = load i8, ptr %result, align 1, !dbg !623
  ret i8 %13, !dbg !623

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !611
  call void %14(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.30, i64 9, i32 100), !dbg !611
  unreachable, !dbg !611

panic1:                                           ; preds = %checkok
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !618
  call void %15(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 9, i32 103), !dbg !618
  unreachable, !dbg !618

panic4:                                           ; preds = %checkok2
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !620
  call void %16(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 9, i32 104), !dbg !620
  unreachable, !dbg !620

panic7:                                           ; preds = %checkok5
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !621
  call void %17(ptr @.panic_msg.19, i64 42, ptr @.file.15, i64 11, ptr @.func.30, i64 9, i32 104), !dbg !621
  unreachable, !dbg !621
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Lcg16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !624 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca ptr, align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !625
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !625
  br i1 %4, label %panic, label %checkok, !dbg !625

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !626, metadata !DIExpression()), !dbg !627
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !628, metadata !DIExpression()), !dbg !629
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !630, metadata !DIExpression()), !dbg !632
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !633
  %5 = load i64, ptr %ptradd2, align 8, !dbg !633
  store i64 %5, ptr %len, align 8, !dbg !633
  br label %loop.cond, !dbg !634

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !635
  %lt = icmp ult i64 0, %6, !dbg !635
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !635

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !637, metadata !DIExpression()), !dbg !639
  %7 = load ptr, ptr %self, align 8, !dbg !640
  %8 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %7), !dbg !641
  store i8 %8, ptr %value, align 1, !dbg !641
  %9 = load i64, ptr %len, align 8, !dbg !642
  %le = icmp ule i64 %9, 1, !dbg !642
  br i1 %le, label %if.then, label %if.exit, !dbg !642

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !643
  %add = add i64 0, %11, !dbg !643
  %size = sub i64 %add, 0, !dbg !643
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !643
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !643
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !645
  %15 = extractvalue %"char[]" %14, 0, !dbg !645
  %16 = extractvalue %"char[]" %14, 1, !dbg !646
  %gt = icmp ugt i64 0, %16, !dbg !646
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !646
  br i1 %17, label %panic3, label %checkok7, !dbg !646

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !645
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !645
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !645
  %20 = extractvalue %"char[]" %19, 0, !dbg !645
  %21 = extractvalue %"char[]" %13, 0, !dbg !645
  store %"char[]" %13, ptr %taddr9, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %taddr9, i64 8
  %22 = load i64, ptr %ptradd10, align 8
  store %"char[]" %19, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %23 = load i64, ptr %ptradd12, align 8
  %neq = icmp ne i64 %23, %22
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %24, label %panic13, label %checkok20

checkok20:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !645
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !645
  br label %expr_block.exit, !dbg !647

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr21, align 8
  %26 = load ptr, ptr %taddr21, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !648
  %30 = extractvalue %"char[]" %29, 0, !dbg !648
  %31 = extractvalue %"char[]" %29, 1, !dbg !648
  %gt22 = icmp sgt i64 0, %31, !dbg !648
  %32 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !648
  br i1 %32, label %panic23, label %checkok30, !dbg !648

checkok30:                                        ; preds = %if.exit
  %lt31 = icmp slt i64 %31, 1, !dbg !648
  %33 = call i1 @llvm.expect.i1(i1 %lt31, i1 false), !dbg !648
  br i1 %33, label %panic32, label %checkok39, !dbg !648

checkok39:                                        ; preds = %checkok30
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !648
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !648
  %36 = extractvalue %"char[]" %35, 0, !dbg !648
  %37 = extractvalue %"char[]" %28, 0, !dbg !648
  store %"char[]" %28, ptr %taddr40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %taddr40, i64 8
  %38 = load i64, ptr %ptradd41, align 8
  store %"char[]" %35, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %39 = load i64, ptr %ptradd43, align 8
  %neq44 = icmp ne i64 %39, %38
  %40 = call i1 @llvm.expect.i1(i1 %neq44, i1 false)
  br i1 %40, label %panic45, label %checkok52

checkok52:                                        ; preds = %checkok39
  %41 = mul i64 %38, 1, !dbg !648
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !648
  %42 = load i64, ptr %len, align 8, !dbg !649
  %sub = sub i64 %42, 1, !dbg !649
  store i64 %sub, ptr %len, align 8, !dbg !649
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !650
  %44 = extractvalue %"char[]" %43, 0, !dbg !650
  %45 = extractvalue %"char[]" %43, 1, !dbg !651
  %gt53 = icmp ugt i64 1, %45, !dbg !651
  %46 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !651
  br i1 %46, label %panic54, label %checkok61, !dbg !651

checkok61:                                        ; preds = %checkok52
  %size62 = sub i64 %45, 1, !dbg !650
  %ptradd63 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !650
  %47 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !650
  %48 = insertvalue %"char[]" %47, i64 %size62, 1, !dbg !650
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !650
  br label %loop.cond, !dbg !650

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.37, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !652
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !652
  %hi = load i64, ptr %ptradd64, align 8, !dbg !652
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.38, i64 11, ptr @.str.39, i64 22, i32 108, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !655
  unreachable, !dbg !656

expr_block.exit:                                  ; preds = %checkok20
  ret void, !dbg !656

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !627
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.20, i64 10, i32 108), !dbg !627
  unreachable, !dbg !627

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !645
  unreachable, !dbg !645

panic13:                                          ; preds = %checkok7
  store i64 %23, ptr %taddr14, align 8
  %55 = insertvalue %any undef, ptr %taddr14, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr15, align 8
  %57 = insertvalue %any undef, ptr %taddr15, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %58, ptr %ptradd17, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !645
  unreachable, !dbg !645

panic23:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr24, align 8
  %60 = insertvalue %any undef, ptr %taddr24, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %62 = insertvalue %any undef, ptr %taddr25, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %63, ptr %ptradd27, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg29), !dbg !648
  unreachable, !dbg !648

panic32:                                          ; preds = %checkok30
  store i64 0, ptr %taddr33, align 8
  %65 = insertvalue %any undef, ptr %taddr33, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %68, ptr %ptradd36, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg38), !dbg !648
  unreachable, !dbg !648

panic45:                                          ; preds = %checkok39
  store i64 %39, ptr %taddr46, align 8
  %70 = insertvalue %any undef, ptr %taddr46, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr47, align 8
  %72 = insertvalue %any undef, ptr %taddr47, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %73, ptr %ptradd49, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg51), !dbg !648
  unreachable, !dbg !648

panic54:                                          ; preds = %checkok52
  store i64 %45, ptr %taddr55, align 8
  %75 = insertvalue %any undef, ptr %taddr55, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %77 = insertvalue %any undef, ptr %taddr56, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %78, ptr %ptradd58, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60), !dbg !650
  unreachable, !dbg !650
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Lcg16Random.next_int128(ptr %0) #0 comdat !dbg !657 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !660
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !660
  br i1 %2, label %panic, label %checkok, !dbg !660

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !661, metadata !DIExpression()), !dbg !662
  %3 = load ptr, ptr %self, align 8, !dbg !663
  %4 = call i64 @std.math.random.Lcg16Random.next_long(ptr %3), !dbg !665
  %zext = zext i64 %4 to i128, !dbg !665
  %shl = shl i128 %zext, 64, !dbg !665
  %5 = freeze i128 %shl, !dbg !665
  %6 = load ptr, ptr %self, align 8, !dbg !663
  %7 = call i64 @std.math.random.Lcg16Random.next_long(ptr %6), !dbg !666
  %zext1 = zext i64 %7 to i128, !dbg !666
  %add = add i128 %5, %zext1, !dbg !665
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !662
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.27, i64 11, i32 109), !dbg !662
  unreachable, !dbg !662
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Lcg16Random.next_long(ptr %0) #0 comdat !dbg !667 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !670
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !670
  br i1 %2, label %panic, label %checkok, !dbg !670

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !671, metadata !DIExpression()), !dbg !672
  %3 = load ptr, ptr %self, align 8, !dbg !673
  %4 = call i32 @std.math.random.Lcg16Random.next_int(ptr %3), !dbg !675
  %zext = zext i32 %4 to i64, !dbg !675
  %shl = shl i64 %zext, 32, !dbg !675
  %5 = freeze i64 %shl, !dbg !675
  %6 = load ptr, ptr %self, align 8, !dbg !673
  %7 = call i32 @std.math.random.Lcg16Random.next_int(ptr %6), !dbg !676
  %zext1 = zext i32 %7 to i64, !dbg !676
  %add = add i64 %5, %zext1, !dbg !675
  ret i64 %add, !dbg !675

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !672
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.18, i64 9, i32 110), !dbg !672
  unreachable, !dbg !672
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Lcg16Random.next_int(ptr %0) #0 comdat !dbg !677 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !680
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !680
  br i1 %2, label %panic, label %checkok, !dbg !680

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !681, metadata !DIExpression()), !dbg !682
  %3 = load ptr, ptr %self, align 8, !dbg !683
  %4 = call i16 @std.math.random.Lcg16Random.next_short(ptr %3), !dbg !685
  %zext = zext i16 %4 to i32, !dbg !685
  %shl = shl i32 %zext, 16, !dbg !685
  %5 = freeze i32 %shl, !dbg !685
  %6 = load ptr, ptr %self, align 8, !dbg !683
  %7 = call i16 @std.math.random.Lcg16Random.next_short(ptr %6), !dbg !686
  %zext1 = zext i16 %7 to i32, !dbg !686
  %add = add i32 %5, %zext1, !dbg !685
  ret i32 %add, !dbg !685

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !682
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.28, i64 8, i32 111), !dbg !682
  unreachable, !dbg !682
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Lcg16Random.next_short(ptr %0) #0 comdat !dbg !687 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !690
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !690
  br i1 %2, label %panic, label %checkok, !dbg !690

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !691, metadata !DIExpression()), !dbg !692
  %3 = load ptr, ptr %self, align 8, !dbg !693
  %4 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %3), !dbg !695
  %zext = zext i8 %4 to i16, !dbg !695
  %zext1 = zext i16 %zext to i32, !dbg !695
  %shl = shl i32 %zext1, 8, !dbg !695
  %5 = freeze i32 %shl, !dbg !695
  %6 = load ptr, ptr %self, align 8, !dbg !693
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !696
  %zext2 = zext i8 %7 to i32, !dbg !696
  %add = add i32 %5, %zext2, !dbg !695
  %trunc = trunc i32 %add to i16, !dbg !695
  ret i16 %trunc, !dbg !695

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !692
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.15, i64 11, ptr @.func.29, i64 10, i32 112), !dbg !692
  unreachable, !dbg !692
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !697 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %expr = alloca [4 x i128], align 16
  %3 = icmp eq ptr %0, null, !dbg !707
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !707
  br i1 %4, label %panic, label %checkok, !dbg !707

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !708, metadata !DIExpression()), !dbg !709
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !710, metadata !DIExpression()), !dbg !711
  %5 = load ptr, ptr %self, align 8, !dbg !712
  %checknull = icmp eq ptr %5, null, !dbg !712
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !712
  br i1 %6, label %panic1, label %checkok2, !dbg !712

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !713, metadata !DIExpression()), !dbg !716
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !716
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !718
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 64, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 64), !dbg !721
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 64, i1 false)
  %checknull5 = icmp eq ptr %expr, null, !dbg !722
  %11 = call i1 @llvm.expect.i1(i1 %checknull5, i1 false), !dbg !722
  br i1 %11, label %panic6, label %checkok7, !dbg !722

checkok7:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %expr, i32 64, i1 false), !dbg !725
  ret void, !dbg !725

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !709
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 17), !dbg !709
  unreachable, !dbg !709

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !712
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 19), !dbg !712
  unreachable, !dbg !712

panic6:                                           ; preds = %checkok2
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !725
  call void %14(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.16, i64 8, i32 212), !dbg !725
  unreachable, !dbg !725
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %0) #0 comdat !dbg !726 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i128, align 8
  %self1 = alloca i128, align 8
  %shift = alloca i128, align 8
  %s1 = alloca i128, align 8
  %self13 = alloca i128, align 8
  %shift14 = alloca i128, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !729
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !729
  br i1 %2, label %panic, label %checkok, !dbg !729

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !730, metadata !DIExpression()), !dbg !731
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !732, metadata !DIExpression()), !dbg !733
  %3 = load ptr, ptr %self, align 8, !dbg !734
  %4 = load i128, ptr %3, align 8, !dbg !734
  store i128 %4, ptr %s0, align 8, !dbg !734
  %5 = load ptr, ptr %self, align 8, !dbg !735
  %6 = load ptr, ptr %self, align 8, !dbg !736
  %7 = load i128, ptr %6, align 8, !dbg !736
  %8 = load ptr, ptr %self, align 8, !dbg !737
  %9 = load i128, ptr %8, align 8, !dbg !737
  %mul = mul i128 %7, %9, !dbg !736
  %10 = load ptr, ptr %self, align 8, !dbg !738
  %ptradd = getelementptr inbounds i8, ptr %10, i64 32, !dbg !738
  %11 = load i128, ptr %ptradd, align 8, !dbg !738
  %add = add i128 %mul, %11, !dbg !736
  store i128 %add, ptr %5, align 8, !dbg !736
  %12 = load ptr, ptr %self, align 8, !dbg !739
  %13 = load ptr, ptr %self, align 8, !dbg !740
  %14 = load i128, ptr %13, align 8
  store i128 %14, ptr %self1, align 8
  store i128 64, ptr %shift, align 8
  %15 = load i128, ptr %self1, align 8, !dbg !741
  %16 = load i128, ptr %self1, align 8, !dbg !743
  %17 = load i128, ptr %shift, align 8, !dbg !744
  %18 = call i128 @llvm.fshr.i128(i128 %15, i128 %16, i128 %17), !dbg !744
  store i128 %18, ptr %12, align 8, !dbg !744
  %19 = load ptr, ptr %self, align 8, !dbg !745
  %ptradd2 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !745
  %20 = load i128, ptr %ptradd2, align 8, !dbg !745
  %add3 = add i128 %20, -129976298391535590297638237547755878347, !dbg !745
  store i128 %add3, ptr %ptradd2, align 8, !dbg !745
  %21 = load ptr, ptr %self, align 8, !dbg !746
  %ptradd4 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !746
  %22 = load ptr, ptr %self, align 8, !dbg !747
  %ptradd5 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !747
  %23 = load i128, ptr %ptradd5, align 8, !dbg !747
  %24 = load ptr, ptr %self, align 8, !dbg !748
  %ptradd6 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !748
  %25 = load i128, ptr %ptradd6, align 8, !dbg !748
  %mul7 = mul i128 %23, %25, !dbg !747
  %26 = load ptr, ptr %self, align 8, !dbg !749
  %ptradd8 = getelementptr inbounds i8, ptr %26, i64 48, !dbg !749
  %27 = load i128, ptr %ptradd8, align 8, !dbg !749
  %add9 = add i128 %mul7, %27, !dbg !747
  store i128 %add9, ptr %ptradd4, align 8, !dbg !747
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !750, metadata !DIExpression()), !dbg !751
  %28 = load ptr, ptr %self, align 8, !dbg !752
  %ptradd10 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !752
  %29 = load i128, ptr %ptradd10, align 8, !dbg !752
  store i128 %29, ptr %s1, align 8, !dbg !752
  %30 = load ptr, ptr %self, align 8, !dbg !753
  %ptradd11 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !753
  %31 = load ptr, ptr %self, align 8, !dbg !754
  %ptradd12 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !754
  %32 = load i128, ptr %ptradd12, align 8
  store i128 %32, ptr %self13, align 8
  store i128 64, ptr %shift14, align 8
  %33 = load i128, ptr %self13, align 8, !dbg !755
  %34 = load i128, ptr %self13, align 8, !dbg !757
  %35 = load i128, ptr %shift14, align 8, !dbg !758
  %36 = call i128 @llvm.fshr.i128(i128 %33, i128 %34, i128 %35), !dbg !758
  store i128 %36, ptr %ptradd11, align 8, !dbg !758
  %37 = load ptr, ptr %self, align 8, !dbg !759
  %ptradd15 = getelementptr inbounds i8, ptr %37, i64 48, !dbg !759
  %38 = load i128, ptr %ptradd15, align 8, !dbg !759
  %sub = sub i128 %38, -129976298391535590297638237547755878347, !dbg !759
  store i128 %sub, ptr %ptradd15, align 8, !dbg !759
  %39 = load i128, ptr %s0, align 8, !dbg !760
  %40 = load i128, ptr %s1, align 8, !dbg !761
  %add16 = add i128 %39, %40, !dbg !760
  store i128 %add16, ptr %taddr, align 8
  %41 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %41

panic:                                            ; preds = %entry
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !731
  call void %42(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.27, i64 11, i32 23), !dbg !731
  unreachable, !dbg !731
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !762 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 8
  %result = alloca i128, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !763
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !763
  br i1 %4, label %panic, label %checkok, !dbg !763

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !764, metadata !DIExpression()), !dbg !765
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !766, metadata !DIExpression()), !dbg !767
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !768
  %5 = load i64, ptr %ptradd1, align 8, !dbg !768
  %lt = icmp ult i64 0, %5, !dbg !768
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !768

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !768
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.48, i64 12, ptr @.func.20, i64 10, i32 39), !dbg !768
  unreachable, !dbg !768

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !770, metadata !DIExpression()), !dbg !772
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !773
  %7 = load i64, ptr %ptradd3, align 8, !dbg !773
  store i64 %7, ptr %len, align 8, !dbg !773
  br label %loop.cond, !dbg !774

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !775
  %lt4 = icmp ult i64 0, %8, !dbg !775
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !775

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !777, metadata !DIExpression()), !dbg !779
  %9 = load ptr, ptr %self, align 8, !dbg !780
  %10 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %9), !dbg !781
  store { i64, i64 } %10, ptr %result, align 8
  %11 = load i128, ptr %result, align 8
  store i128 %11, ptr %value, align 8
  %12 = load i64, ptr %len, align 8, !dbg !782
  %le = icmp ule i64 %12, 16, !dbg !782
  br i1 %le, label %if.then, label %if.exit, !dbg !782

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %13 = load ptr, ptr %taddr, align 8
  %14 = load i64, ptr %len, align 8, !dbg !783
  %add = add i64 0, %14, !dbg !783
  %size = sub i64 %add, 0, !dbg !783
  %15 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !783
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !783
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !785
  %18 = extractvalue %"char[]" %17, 0, !dbg !785
  %19 = extractvalue %"char[]" %17, 1, !dbg !786
  %gt = icmp ugt i64 0, %19, !dbg !786
  %20 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !786
  br i1 %20, label %panic5, label %checkok9, !dbg !786

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %19, 0, !dbg !785
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !785
  %22 = insertvalue %"char[]" %21, i64 %size10, 1, !dbg !785
  %23 = extractvalue %"char[]" %22, 0, !dbg !785
  %24 = extractvalue %"char[]" %16, 0, !dbg !785
  store %"char[]" %16, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %25 = load i64, ptr %ptradd12, align 8
  store %"char[]" %22, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %26 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %26, %25
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %27, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %28 = mul i64 %25, 1, !dbg !785
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !785
  br label %expr_block.exit, !dbg !787

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %29 = load ptr, ptr %taddr23, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 16, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !788
  %33 = extractvalue %"char[]" %32, 0, !dbg !788
  %34 = extractvalue %"char[]" %32, 1, !dbg !788
  %gt24 = icmp sgt i64 0, %34, !dbg !788
  %35 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !788
  br i1 %35, label %panic25, label %checkok32, !dbg !788

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %34, 16, !dbg !788
  %36 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !788
  br i1 %36, label %panic34, label %checkok41, !dbg !788

checkok41:                                        ; preds = %checkok32
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !788
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !788
  %39 = extractvalue %"char[]" %38, 0, !dbg !788
  %40 = extractvalue %"char[]" %31, 0, !dbg !788
  store %"char[]" %31, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %41 = load i64, ptr %ptradd43, align 8
  store %"char[]" %38, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %42 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %42, %41
  %43 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %43, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %44 = mul i64 %41, 1, !dbg !788
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !788
  %45 = load i64, ptr %len, align 8, !dbg !789
  %sub = sub i64 %45, 16, !dbg !789
  store i64 %sub, ptr %len, align 8, !dbg !789
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !790
  %47 = extractvalue %"char[]" %46, 0, !dbg !790
  %48 = extractvalue %"char[]" %46, 1, !dbg !791
  %gt55 = icmp ugt i64 16, %48, !dbg !791
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !791
  br i1 %49, label %panic56, label %checkok63, !dbg !791

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %48, 16, !dbg !790
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !790
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !790
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !790
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !790
  br label %loop.cond, !dbg !790

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.51, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !792
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !792
  %hi = load i64, ptr %ptradd66, align 8, !dbg !792
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.52, i64 12, ptr @.str.53, i64 24, i32 41, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !795
  unreachable, !dbg !796

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !796

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !765
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.20, i64 10, i32 41), !dbg !765
  unreachable, !dbg !765

panic5:                                           ; preds = %if.then
  store i64 %19, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %55 = insertvalue %any undef, ptr %taddr7, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %56, ptr %ptradd8, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !785
  unreachable, !dbg !785

panic15:                                          ; preds = %checkok9
  store i64 %26, ptr %taddr16, align 8
  %58 = insertvalue %any undef, ptr %taddr16, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %60 = insertvalue %any undef, ptr %taddr17, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %59, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %61, ptr %ptradd19, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !785
  unreachable, !dbg !785

panic25:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr26, align 8
  %63 = insertvalue %any undef, ptr %taddr26, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %65 = insertvalue %any undef, ptr %taddr27, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %64, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %66, ptr %ptradd29, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !788
  unreachable, !dbg !788

panic34:                                          ; preds = %checkok32
  store i64 15, ptr %taddr35, align 8
  %68 = insertvalue %any undef, ptr %taddr35, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr36, align 8
  %70 = insertvalue %any undef, ptr %taddr36, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %69, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %71, ptr %ptradd38, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !788
  unreachable, !dbg !788

panic47:                                          ; preds = %checkok41
  store i64 %42, ptr %taddr48, align 8
  %73 = insertvalue %any undef, ptr %taddr48, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr49, align 8
  %75 = insertvalue %any undef, ptr %taddr49, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %76, ptr %ptradd51, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !788
  unreachable, !dbg !788

panic56:                                          ; preds = %checkok54
  store i64 %48, ptr %taddr57, align 8
  %78 = insertvalue %any undef, ptr %taddr57, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr58, align 8
  %80 = insertvalue %any undef, ptr %taddr58, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %81, ptr %ptradd60, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !790
  unreachable, !dbg !790
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws128Random.next_long(ptr %0) #0 comdat !dbg !797 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !800
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !800
  br i1 %2, label %panic, label %checkok, !dbg !800

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !801, metadata !DIExpression()), !dbg !802
  %3 = load ptr, ptr %self, align 8, !dbg !803
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !804
  store { i64, i64 } %4, ptr %result, align 8
  %5 = load i128, ptr %result, align 8
  %trunc = trunc i128 %5 to i64
  ret i64 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !802
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.18, i64 9, i32 42), !dbg !802
  unreachable, !dbg !802
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws128Random.next_int(ptr %0) #0 comdat !dbg !805 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !808
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !808
  br i1 %2, label %panic, label %checkok, !dbg !808

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !809, metadata !DIExpression()), !dbg !810
  %3 = load ptr, ptr %self, align 8, !dbg !811
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !812
  store { i64, i64 } %4, ptr %result, align 8
  %5 = load i128, ptr %result, align 8
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !810
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.28, i64 8, i32 43), !dbg !810
  unreachable, !dbg !810
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws128Random.next_short(ptr %0) #0 comdat !dbg !813 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !816
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !816
  br i1 %2, label %panic, label %checkok, !dbg !816

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !817, metadata !DIExpression()), !dbg !818
  %3 = load ptr, ptr %self, align 8, !dbg !819
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !820
  store { i64, i64 } %4, ptr %result, align 8
  %5 = load i128, ptr %result, align 8
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !818
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.29, i64 10, i32 44), !dbg !818
  unreachable, !dbg !818
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws128Random.next_byte(ptr %0) #0 comdat !dbg !821 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !824
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !824
  br i1 %2, label %panic, label %checkok, !dbg !824

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !825, metadata !DIExpression()), !dbg !826
  %3 = load ptr, ptr %self, align 8, !dbg !827
  %4 = call { i64, i64 } @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !828
  store { i64, i64 } %4, ptr %result, align 8
  %5 = load i128, ptr %result, align 8
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !826
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.30, i64 9, i32 45), !dbg !826
  unreachable, !dbg !826
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !829 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %expr = alloca [4 x i64], align 16
  %3 = icmp eq ptr %0, null, !dbg !839
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !839
  br i1 %4, label %panic, label %checkok, !dbg !839

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !840, metadata !DIExpression()), !dbg !841
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !842, metadata !DIExpression()), !dbg !843
  %5 = load ptr, ptr %self, align 8, !dbg !844
  %checknull = icmp eq ptr %5, null, !dbg !844
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !844
  br i1 %6, label %panic1, label %checkok2, !dbg !844

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !845, metadata !DIExpression()), !dbg !847
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !847
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !849
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 32, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 32), !dbg !852
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 32, i1 false)
  %checknull5 = icmp eq ptr %expr, null, !dbg !853
  %11 = call i1 @llvm.expect.i1(i1 %checknull5, i1 false), !dbg !853
  br i1 %11, label %panic6, label %checkok7, !dbg !853

checkok7:                                         ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %expr, i32 32, i1 false), !dbg !856
  ret void, !dbg !856

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !841
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 55), !dbg !841
  unreachable, !dbg !841

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !844
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 57), !dbg !844
  unreachable, !dbg !844

panic6:                                           ; preds = %checkok2
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !856
  call void %14(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.16, i64 8, i32 212), !dbg !856
  unreachable, !dbg !856
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws64Random.next_long(ptr %0) #0 comdat !dbg !857 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i64, align 8
  %self1 = alloca i64, align 8
  %shift = alloca i64, align 8
  %s1 = alloca i64, align 8
  %self13 = alloca i64, align 8
  %shift14 = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !860
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !860
  br i1 %2, label %panic, label %checkok, !dbg !860

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !861, metadata !DIExpression()), !dbg !862
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !863, metadata !DIExpression()), !dbg !864
  %3 = load ptr, ptr %self, align 8, !dbg !865
  %4 = load i64, ptr %3, align 8, !dbg !865
  store i64 %4, ptr %s0, align 8, !dbg !865
  %5 = load ptr, ptr %self, align 8, !dbg !866
  %6 = load ptr, ptr %self, align 8, !dbg !867
  %7 = load i64, ptr %6, align 8, !dbg !867
  %8 = load ptr, ptr %self, align 8, !dbg !868
  %9 = load i64, ptr %8, align 8, !dbg !868
  %mul = mul i64 %7, %9, !dbg !867
  %10 = load ptr, ptr %self, align 8, !dbg !869
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !869
  %11 = load i64, ptr %ptradd, align 8, !dbg !869
  %add = add i64 %mul, %11, !dbg !867
  store i64 %add, ptr %5, align 8, !dbg !867
  %12 = load ptr, ptr %self, align 8, !dbg !870
  %13 = load ptr, ptr %self, align 8, !dbg !871
  %14 = load i64, ptr %13, align 8
  store i64 %14, ptr %self1, align 8
  store i64 32, ptr %shift, align 8
  %15 = load i64, ptr %self1, align 8, !dbg !872
  %16 = load i64, ptr %self1, align 8, !dbg !874
  %17 = load i64, ptr %shift, align 8, !dbg !875
  %18 = call i64 @llvm.fshr.i64(i64 %15, i64 %16, i64 %17), !dbg !875
  store i64 %18, ptr %12, align 8, !dbg !875
  %19 = load ptr, ptr %self, align 8, !dbg !876
  %ptradd2 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !876
  %20 = load i64, ptr %ptradd2, align 8, !dbg !876
  %add3 = add i64 %20, -7046029254386353131, !dbg !876
  store i64 %add3, ptr %ptradd2, align 8, !dbg !876
  %21 = load ptr, ptr %self, align 8, !dbg !877
  %ptradd4 = getelementptr inbounds i8, ptr %21, i64 8, !dbg !877
  %22 = load ptr, ptr %self, align 8, !dbg !878
  %ptradd5 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !878
  %23 = load i64, ptr %ptradd5, align 8, !dbg !878
  %24 = load ptr, ptr %self, align 8, !dbg !879
  %ptradd6 = getelementptr inbounds i8, ptr %24, i64 8, !dbg !879
  %25 = load i64, ptr %ptradd6, align 8, !dbg !879
  %mul7 = mul i64 %23, %25, !dbg !878
  %26 = load ptr, ptr %self, align 8, !dbg !880
  %ptradd8 = getelementptr inbounds i8, ptr %26, i64 24, !dbg !880
  %27 = load i64, ptr %ptradd8, align 8, !dbg !880
  %add9 = add i64 %mul7, %27, !dbg !878
  store i64 %add9, ptr %ptradd4, align 8, !dbg !878
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !881, metadata !DIExpression()), !dbg !882
  %28 = load ptr, ptr %self, align 8, !dbg !883
  %ptradd10 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !883
  %29 = load i64, ptr %ptradd10, align 8, !dbg !883
  store i64 %29, ptr %s1, align 8, !dbg !883
  %30 = load ptr, ptr %self, align 8, !dbg !884
  %ptradd11 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !884
  %31 = load ptr, ptr %self, align 8, !dbg !885
  %ptradd12 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !885
  %32 = load i64, ptr %ptradd12, align 8
  store i64 %32, ptr %self13, align 8
  store i64 32, ptr %shift14, align 8
  %33 = load i64, ptr %self13, align 8, !dbg !886
  %34 = load i64, ptr %self13, align 8, !dbg !888
  %35 = load i64, ptr %shift14, align 8, !dbg !889
  %36 = call i64 @llvm.fshr.i64(i64 %33, i64 %34, i64 %35), !dbg !889
  store i64 %36, ptr %ptradd11, align 8, !dbg !889
  %37 = load ptr, ptr %self, align 8, !dbg !890
  %ptradd15 = getelementptr inbounds i8, ptr %37, i64 24, !dbg !890
  %38 = load i64, ptr %ptradd15, align 8, !dbg !890
  %sub = sub i64 %38, -7046029254386353131, !dbg !890
  store i64 %sub, ptr %ptradd15, align 8, !dbg !890
  %39 = load i64, ptr %s0, align 8, !dbg !891
  %40 = load i64, ptr %s1, align 8, !dbg !892
  %add16 = add i64 %39, %40, !dbg !891
  ret i64 %add16, !dbg !891

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !862
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.18, i64 9, i32 60), !dbg !862
  unreachable, !dbg !862
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !893 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !894
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !894
  br i1 %4, label %panic, label %checkok, !dbg !894

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !895, metadata !DIExpression()), !dbg !896
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !897, metadata !DIExpression()), !dbg !898
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !899
  %5 = load i64, ptr %ptradd1, align 8, !dbg !899
  %lt = icmp ult i64 0, %5, !dbg !899
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !899

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !899
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.48, i64 12, ptr @.func.20, i64 10, i32 76), !dbg !899
  unreachable, !dbg !899

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !901, metadata !DIExpression()), !dbg !903
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !904
  %7 = load i64, ptr %ptradd3, align 8, !dbg !904
  store i64 %7, ptr %len, align 8, !dbg !904
  br label %loop.cond, !dbg !905

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !906
  %lt4 = icmp ult i64 0, %8, !dbg !906
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !906

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !908, metadata !DIExpression()), !dbg !910
  %9 = load ptr, ptr %self, align 8, !dbg !911
  %10 = call i64 @std.math.random.Msws64Random.next_long(ptr %9), !dbg !912
  store i64 %10, ptr %value, align 8, !dbg !912
  %11 = load i64, ptr %len, align 8, !dbg !913
  %le = icmp ule i64 %11, 8, !dbg !913
  br i1 %le, label %if.then, label %if.exit, !dbg !913

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !914
  %add = add i64 0, %13, !dbg !914
  %size = sub i64 %add, 0, !dbg !914
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !914
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !914
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !916
  %17 = extractvalue %"char[]" %16, 0, !dbg !916
  %18 = extractvalue %"char[]" %16, 1, !dbg !917
  %gt = icmp ugt i64 0, %18, !dbg !917
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !917
  br i1 %19, label %panic5, label %checkok9, !dbg !917

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !916
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !916
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !916
  %22 = extractvalue %"char[]" %21, 0, !dbg !916
  %23 = extractvalue %"char[]" %15, 0, !dbg !916
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !916
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !916
  br label %expr_block.exit, !dbg !918

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !919
  %32 = extractvalue %"char[]" %31, 0, !dbg !919
  %33 = extractvalue %"char[]" %31, 1, !dbg !919
  %gt24 = icmp sgt i64 0, %33, !dbg !919
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !919
  br i1 %34, label %panic25, label %checkok32, !dbg !919

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 8, !dbg !919
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !919
  br i1 %35, label %panic34, label %checkok41, !dbg !919

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !919
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !919
  %38 = extractvalue %"char[]" %37, 0, !dbg !919
  %39 = extractvalue %"char[]" %30, 0, !dbg !919
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !919
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !919
  %44 = load i64, ptr %len, align 8, !dbg !920
  %sub = sub i64 %44, 8, !dbg !920
  store i64 %sub, ptr %len, align 8, !dbg !920
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !921
  %46 = extractvalue %"char[]" %45, 0, !dbg !921
  %47 = extractvalue %"char[]" %45, 1, !dbg !922
  %gt55 = icmp ugt i64 8, %47, !dbg !922
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !922
  br i1 %48, label %panic56, label %checkok63, !dbg !922

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 8, !dbg !921
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !921
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !921
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !921
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !921
  br label %loop.cond, !dbg !921

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.54, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !923
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !923
  %hi = load i64, ptr %ptradd66, align 8, !dbg !923
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.55, i64 12, ptr @.str.56, i64 23, i32 78, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !926
  unreachable, !dbg !927

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !927

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !896
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.20, i64 10, i32 78), !dbg !896
  unreachable, !dbg !896

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !916
  unreachable, !dbg !916

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !916
  unreachable, !dbg !916

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !919
  unreachable, !dbg !919

panic34:                                          ; preds = %checkok32
  store i64 7, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !919
  unreachable, !dbg !919

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !919
  unreachable, !dbg !919

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !921
  unreachable, !dbg !921
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws64Random.next_int128(ptr %0) #0 comdat !dbg !928 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !931
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !931
  br i1 %2, label %panic, label %checkok, !dbg !931

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !932, metadata !DIExpression()), !dbg !933
  %3 = load ptr, ptr %self, align 8, !dbg !934
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !936
  %zext = zext i64 %4 to i128, !dbg !936
  %shl = shl i128 %zext, 64, !dbg !936
  %5 = freeze i128 %shl, !dbg !936
  %6 = load ptr, ptr %self, align 8, !dbg !934
  %7 = call i64 @std.math.random.Msws64Random.next_long(ptr %6), !dbg !937
  %zext1 = zext i64 %7 to i128, !dbg !937
  %add = add i128 %5, %zext1, !dbg !936
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !933
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.27, i64 11, i32 79), !dbg !933
  unreachable, !dbg !933
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws64Random.next_int(ptr %0) #0 comdat !dbg !938 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !941
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !941
  br i1 %2, label %panic, label %checkok, !dbg !941

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !942, metadata !DIExpression()), !dbg !943
  %3 = load ptr, ptr %self, align 8, !dbg !944
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !945
  %trunc = trunc i64 %4 to i32, !dbg !945
  ret i32 %trunc, !dbg !945

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !943
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.28, i64 8, i32 80), !dbg !943
  unreachable, !dbg !943
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws64Random.next_short(ptr %0) #0 comdat !dbg !946 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !949
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !949
  br i1 %2, label %panic, label %checkok, !dbg !949

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !950, metadata !DIExpression()), !dbg !951
  %3 = load ptr, ptr %self, align 8, !dbg !952
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !953
  %trunc = trunc i64 %4 to i16, !dbg !953
  ret i16 %trunc, !dbg !953

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !951
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.29, i64 10, i32 81), !dbg !951
  unreachable, !dbg !951
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws64Random.next_byte(ptr %0) #0 comdat !dbg !954 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !957
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !957
  br i1 %2, label %panic, label %checkok, !dbg !957

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !958, metadata !DIExpression()), !dbg !959
  %3 = load ptr, ptr %self, align 8, !dbg !960
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !961
  %trunc = trunc i64 %4 to i8, !dbg !961
  ret i8 %trunc, !dbg !961

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !959
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.30, i64 9, i32 82), !dbg !959
  unreachable, !dbg !959
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !962 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %expr = alloca [4 x i32], align 16
  %3 = icmp eq ptr %0, null, !dbg !972
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !972
  br i1 %4, label %panic, label %checkok, !dbg !972

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !973, metadata !DIExpression()), !dbg !974
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !975, metadata !DIExpression()), !dbg !976
  %5 = load ptr, ptr %self, align 8, !dbg !977
  %checknull = icmp eq ptr %5, null, !dbg !977
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !977
  br i1 %6, label %panic1, label %checkok2, !dbg !977

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !978, metadata !DIExpression()), !dbg !981
  store i32 0, ptr %return_value, align 4, !dbg !981
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !981
  store i32 0, ptr %ptradd4, align 4, !dbg !981
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !981
  store i32 0, ptr %ptradd5, align 4, !dbg !981
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !981
  store i32 0, ptr %ptradd6, align 4, !dbg !981
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !983
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 16, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 16), !dbg !986
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 16, i1 false)
  %checknull8 = icmp eq ptr %expr, null, !dbg !987
  %11 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !987
  br i1 %11, label %panic9, label %checkok10, !dbg !987

checkok10:                                        ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %5, ptr align 4 %expr, i32 16, i1 false), !dbg !990
  ret void, !dbg !990

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !974
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 91), !dbg !974
  unreachable, !dbg !974

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !977
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 93), !dbg !977
  unreachable, !dbg !977

panic9:                                           ; preds = %checkok2
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !990
  call void %14(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.16, i64 8, i32 212), !dbg !990
  unreachable, !dbg !990
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws32Random.next_int(ptr %0) #0 comdat !dbg !991 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i32, align 4
  %self1 = alloca i32, align 4
  %shift = alloca i32, align 4
  %s1 = alloca i32, align 4
  %self13 = alloca i32, align 4
  %shift14 = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !994
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !994
  br i1 %2, label %panic, label %checkok, !dbg !994

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !995, metadata !DIExpression()), !dbg !996
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !997, metadata !DIExpression()), !dbg !998
  %3 = load ptr, ptr %self, align 8, !dbg !999
  %4 = load i32, ptr %3, align 4, !dbg !999
  store i32 %4, ptr %s0, align 4, !dbg !999
  %5 = load ptr, ptr %self, align 8, !dbg !1000
  %6 = load ptr, ptr %self, align 8, !dbg !1001
  %7 = load i32, ptr %6, align 4, !dbg !1001
  %8 = load ptr, ptr %self, align 8, !dbg !1002
  %9 = load i32, ptr %8, align 4, !dbg !1002
  %mul = mul i32 %7, %9, !dbg !1001
  %10 = load ptr, ptr %self, align 8, !dbg !1003
  %ptradd = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1003
  %11 = load i32, ptr %ptradd, align 4, !dbg !1003
  %add = add i32 %mul, %11, !dbg !1001
  store i32 %add, ptr %5, align 4, !dbg !1001
  %12 = load ptr, ptr %self, align 8, !dbg !1004
  %13 = load ptr, ptr %self, align 8, !dbg !1005
  %14 = load i32, ptr %13, align 4
  store i32 %14, ptr %self1, align 4
  store i32 16, ptr %shift, align 4
  %15 = load i32, ptr %self1, align 4, !dbg !1006
  %16 = load i32, ptr %self1, align 4, !dbg !1008
  %17 = load i32, ptr %shift, align 4, !dbg !1009
  %18 = call i32 @llvm.fshr.i32(i32 %15, i32 %16, i32 %17), !dbg !1009
  store i32 %18, ptr %12, align 4, !dbg !1009
  %19 = load ptr, ptr %self, align 8, !dbg !1010
  %ptradd2 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !1010
  %20 = load i32, ptr %ptradd2, align 4, !dbg !1010
  %add3 = add i32 %20, -1640531527, !dbg !1010
  store i32 %add3, ptr %ptradd2, align 4, !dbg !1010
  %21 = load ptr, ptr %self, align 8, !dbg !1011
  %ptradd4 = getelementptr inbounds i8, ptr %21, i64 4, !dbg !1011
  %22 = load ptr, ptr %self, align 8, !dbg !1012
  %ptradd5 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !1012
  %23 = load i32, ptr %ptradd5, align 4, !dbg !1012
  %24 = load ptr, ptr %self, align 8, !dbg !1013
  %ptradd6 = getelementptr inbounds i8, ptr %24, i64 4, !dbg !1013
  %25 = load i32, ptr %ptradd6, align 4, !dbg !1013
  %mul7 = mul i32 %23, %25, !dbg !1012
  %26 = load ptr, ptr %self, align 8, !dbg !1014
  %ptradd8 = getelementptr inbounds i8, ptr %26, i64 12, !dbg !1014
  %27 = load i32, ptr %ptradd8, align 4, !dbg !1014
  %add9 = add i32 %mul7, %27, !dbg !1012
  store i32 %add9, ptr %ptradd4, align 4, !dbg !1012
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1015, metadata !DIExpression()), !dbg !1016
  %28 = load ptr, ptr %self, align 8, !dbg !1017
  %ptradd10 = getelementptr inbounds i8, ptr %28, i64 4, !dbg !1017
  %29 = load i32, ptr %ptradd10, align 4, !dbg !1017
  store i32 %29, ptr %s1, align 4, !dbg !1017
  %30 = load ptr, ptr %self, align 8, !dbg !1018
  %ptradd11 = getelementptr inbounds i8, ptr %30, i64 4, !dbg !1018
  %31 = load ptr, ptr %self, align 8, !dbg !1019
  %ptradd12 = getelementptr inbounds i8, ptr %31, i64 4, !dbg !1019
  %32 = load i32, ptr %ptradd12, align 4
  store i32 %32, ptr %self13, align 4
  store i32 16, ptr %shift14, align 4
  %33 = load i32, ptr %self13, align 4, !dbg !1020
  %34 = load i32, ptr %self13, align 4, !dbg !1022
  %35 = load i32, ptr %shift14, align 4, !dbg !1023
  %36 = call i32 @llvm.fshr.i32(i32 %33, i32 %34, i32 %35), !dbg !1023
  store i32 %36, ptr %ptradd11, align 4, !dbg !1023
  %37 = load ptr, ptr %self, align 8, !dbg !1024
  %ptradd15 = getelementptr inbounds i8, ptr %37, i64 12, !dbg !1024
  %38 = load i32, ptr %ptradd15, align 4, !dbg !1024
  %sub = sub i32 %38, -1640531527, !dbg !1024
  store i32 %sub, ptr %ptradd15, align 4, !dbg !1024
  %39 = load i32, ptr %s0, align 4, !dbg !1025
  %40 = load i32, ptr %s1, align 4, !dbg !1026
  %add16 = add i32 %39, %40, !dbg !1025
  ret i32 %add16, !dbg !1025

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !996
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.28, i64 8, i32 97), !dbg !996
  unreachable, !dbg !996
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1027 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1028
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1028
  br i1 %4, label %panic, label %checkok, !dbg !1028

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1029, metadata !DIExpression()), !dbg !1030
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1031, metadata !DIExpression()), !dbg !1032
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1033
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1033
  %lt = icmp ult i64 0, %5, !dbg !1033
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1033

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1033
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.48, i64 12, ptr @.func.20, i64 10, i32 113), !dbg !1033
  unreachable, !dbg !1033

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1035, metadata !DIExpression()), !dbg !1037
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1038
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1038
  store i64 %7, ptr %len, align 8, !dbg !1038
  br label %loop.cond, !dbg !1039

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1040
  %lt4 = icmp ult i64 0, %8, !dbg !1040
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1040

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1042, metadata !DIExpression()), !dbg !1044
  %9 = load ptr, ptr %self, align 8, !dbg !1045
  %10 = call i32 @std.math.random.Msws32Random.next_int(ptr %9), !dbg !1046
  store i32 %10, ptr %value, align 4, !dbg !1046
  %11 = load i64, ptr %len, align 8, !dbg !1047
  %le = icmp ule i64 %11, 4, !dbg !1047
  br i1 %le, label %if.then, label %if.exit, !dbg !1047

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1048
  %add = add i64 0, %13, !dbg !1048
  %size = sub i64 %add, 0, !dbg !1048
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1048
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1048
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !1050
  %17 = extractvalue %"char[]" %16, 0, !dbg !1050
  %18 = extractvalue %"char[]" %16, 1, !dbg !1051
  %gt = icmp ugt i64 0, %18, !dbg !1051
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1051
  br i1 %19, label %panic5, label %checkok9, !dbg !1051

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !1050
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1050
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !1050
  %22 = extractvalue %"char[]" %21, 0, !dbg !1050
  %23 = extractvalue %"char[]" %15, 0, !dbg !1050
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !1050
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1050
  br label %expr_block.exit, !dbg !1052

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !1053
  %32 = extractvalue %"char[]" %31, 0, !dbg !1053
  %33 = extractvalue %"char[]" %31, 1, !dbg !1053
  %gt24 = icmp sgt i64 0, %33, !dbg !1053
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !1053
  br i1 %34, label %panic25, label %checkok32, !dbg !1053

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 4, !dbg !1053
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !1053
  br i1 %35, label %panic34, label %checkok41, !dbg !1053

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1053
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !1053
  %38 = extractvalue %"char[]" %37, 0, !dbg !1053
  %39 = extractvalue %"char[]" %30, 0, !dbg !1053
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !1053
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1053
  %44 = load i64, ptr %len, align 8, !dbg !1054
  %sub = sub i64 %44, 4, !dbg !1054
  store i64 %sub, ptr %len, align 8, !dbg !1054
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !1055
  %46 = extractvalue %"char[]" %45, 0, !dbg !1055
  %47 = extractvalue %"char[]" %45, 1, !dbg !1056
  %gt55 = icmp ugt i64 4, %47, !dbg !1056
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1056
  br i1 %48, label %panic56, label %checkok63, !dbg !1056

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 4, !dbg !1055
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !1055
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1055
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !1055
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !1055
  br label %loop.cond, !dbg !1055

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.57, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1057
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1057
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1057
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.58, i64 12, ptr @.str.59, i64 23, i32 115, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1060
  unreachable, !dbg !1061

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !1061

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1030
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.20, i64 10, i32 115), !dbg !1030
  unreachable, !dbg !1030

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1050
  unreachable, !dbg !1050

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !1050
  unreachable, !dbg !1050

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !1053
  unreachable, !dbg !1053

panic34:                                          ; preds = %checkok32
  store i64 3, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !1053
  unreachable, !dbg !1053

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !1053
  unreachable, !dbg !1053

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !1055
  unreachable, !dbg !1055
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws32Random.next_int128(ptr %0) #0 comdat !dbg !1062 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1065
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1065
  br i1 %2, label %panic, label %checkok, !dbg !1065

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1066, metadata !DIExpression()), !dbg !1067
  %3 = load ptr, ptr %self, align 8, !dbg !1068
  %4 = call i64 @std.math.random.Msws32Random.next_long(ptr %3), !dbg !1070
  %zext = zext i64 %4 to i128, !dbg !1070
  %shl = shl i128 %zext, 64, !dbg !1070
  %5 = freeze i128 %shl, !dbg !1070
  %6 = load ptr, ptr %self, align 8, !dbg !1068
  %7 = call i64 @std.math.random.Msws32Random.next_long(ptr %6), !dbg !1071
  %zext1 = zext i64 %7 to i128, !dbg !1071
  %add = add i128 %5, %zext1, !dbg !1070
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1067
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.27, i64 11, i32 116), !dbg !1067
  unreachable, !dbg !1067
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws32Random.next_long(ptr %0) #0 comdat !dbg !1072 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1075
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1075
  br i1 %2, label %panic, label %checkok, !dbg !1075

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1076, metadata !DIExpression()), !dbg !1077
  %3 = load ptr, ptr %self, align 8, !dbg !1078
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1080
  %zext = zext i32 %4 to i64, !dbg !1080
  %shl = shl i64 %zext, 32, !dbg !1080
  %5 = freeze i64 %shl, !dbg !1080
  %6 = load ptr, ptr %self, align 8, !dbg !1078
  %7 = call i32 @std.math.random.Msws32Random.next_int(ptr %6), !dbg !1081
  %zext1 = zext i32 %7 to i64, !dbg !1081
  %add = add i64 %5, %zext1, !dbg !1080
  ret i64 %add, !dbg !1080

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1077
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.18, i64 9, i32 117), !dbg !1077
  unreachable, !dbg !1077
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws32Random.next_short(ptr %0) #0 comdat !dbg !1082 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1085
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1085
  br i1 %2, label %panic, label %checkok, !dbg !1085

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1086, metadata !DIExpression()), !dbg !1087
  %3 = load ptr, ptr %self, align 8, !dbg !1088
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1089
  %trunc = trunc i32 %4 to i16, !dbg !1089
  ret i16 %trunc, !dbg !1089

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1087
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.29, i64 10, i32 118), !dbg !1087
  unreachable, !dbg !1087
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws32Random.next_byte(ptr %0) #0 comdat !dbg !1090 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1093
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1093
  br i1 %2, label %panic, label %checkok, !dbg !1093

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1094, metadata !DIExpression()), !dbg !1095
  %3 = load ptr, ptr %self, align 8, !dbg !1096
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1097
  %trunc = trunc i32 %4 to i8, !dbg !1097
  ret i8 %trunc, !dbg !1097

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1095
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.30, i64 9, i32 119), !dbg !1095
  unreachable, !dbg !1095
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1098 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %expr = alloca [4 x i16], align 2
  %3 = icmp eq ptr %0, null, !dbg !1108
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1108
  br i1 %4, label %panic, label %checkok, !dbg !1108

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1109, metadata !DIExpression()), !dbg !1110
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1111, metadata !DIExpression()), !dbg !1112
  %5 = load ptr, ptr %self, align 8, !dbg !1113
  %checknull = icmp eq ptr %5, null, !dbg !1113
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1113
  br i1 %6, label %panic1, label %checkok2, !dbg !1113

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1114, metadata !DIExpression()), !dbg !1117
  store i16 0, ptr %return_value, align 2, !dbg !1117
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1117
  store i16 0, ptr %ptradd4, align 2, !dbg !1117
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1117
  store i16 0, ptr %ptradd5, align 2, !dbg !1117
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !1117
  store i16 0, ptr %ptradd6, align 2, !dbg !1117
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !1119
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 8, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 8), !dbg !1122
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %expr, ptr align 2 %return_value, i32 8, i1 false)
  %checknull8 = icmp eq ptr %expr, null, !dbg !1123
  %11 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1123
  br i1 %11, label %panic9, label %checkok10, !dbg !1123

checkok10:                                        ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %5, ptr align 2 %expr, i32 8, i1 false), !dbg !1126
  ret void, !dbg !1126

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1110
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 129), !dbg !1110
  unreachable, !dbg !1110

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1113
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 131), !dbg !1113
  unreachable, !dbg !1113

panic9:                                           ; preds = %checkok2
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1126
  call void %14(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.16, i64 8, i32 212), !dbg !1126
  unreachable, !dbg !1126
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws16Random.next_short(ptr %0) #0 comdat !dbg !1127 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i16, align 2
  %self3 = alloca i16, align 2
  %shift = alloca i16, align 2
  %s1 = alloca i16, align 2
  %self19 = alloca i16, align 2
  %shift20 = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !1130
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1130
  br i1 %2, label %panic, label %checkok, !dbg !1130

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1131, metadata !DIExpression()), !dbg !1132
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !1133, metadata !DIExpression()), !dbg !1134
  %3 = load ptr, ptr %self, align 8, !dbg !1135
  %4 = load i16, ptr %3, align 2, !dbg !1135
  store i16 %4, ptr %s0, align 2, !dbg !1135
  %5 = load ptr, ptr %self, align 8, !dbg !1136
  %6 = load ptr, ptr %self, align 8, !dbg !1137
  %7 = load i16, ptr %6, align 2, !dbg !1137
  %zext = zext i16 %7 to i32, !dbg !1137
  %8 = load ptr, ptr %self, align 8, !dbg !1138
  %9 = load i16, ptr %8, align 2, !dbg !1138
  %zext1 = zext i16 %9 to i32, !dbg !1138
  %mul = mul i32 %zext, %zext1, !dbg !1137
  %10 = load ptr, ptr %self, align 8, !dbg !1139
  %ptradd = getelementptr inbounds i8, ptr %10, i64 4, !dbg !1139
  %11 = load i16, ptr %ptradd, align 2, !dbg !1139
  %zext2 = zext i16 %11 to i32, !dbg !1139
  %add = add i32 %mul, %zext2, !dbg !1137
  %trunc = trunc i32 %add to i16, !dbg !1137
  store i16 %trunc, ptr %5, align 2, !dbg !1137
  %12 = load ptr, ptr %self, align 8, !dbg !1140
  %13 = load ptr, ptr %self, align 8, !dbg !1141
  %14 = load i16, ptr %13, align 2
  store i16 %14, ptr %self3, align 2
  store i16 8, ptr %shift, align 2
  %15 = load i16, ptr %self3, align 2, !dbg !1142
  %16 = load i16, ptr %self3, align 2, !dbg !1144
  %17 = load i16, ptr %shift, align 2, !dbg !1145
  %18 = call i16 @llvm.fshr.i16(i16 %15, i16 %16, i16 %17), !dbg !1145
  store i16 %18, ptr %12, align 2, !dbg !1145
  %19 = load ptr, ptr %self, align 8, !dbg !1146
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !1146
  %20 = load i16, ptr %ptradd4, align 2, !dbg !1146
  %add5 = add i16 %20, -25033, !dbg !1146
  store i16 %add5, ptr %ptradd4, align 2, !dbg !1146
  %21 = load ptr, ptr %self, align 8, !dbg !1147
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 2, !dbg !1147
  %22 = load ptr, ptr %self, align 8, !dbg !1148
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !1148
  %23 = load i16, ptr %ptradd7, align 2, !dbg !1148
  %zext8 = zext i16 %23 to i32, !dbg !1148
  %24 = load ptr, ptr %self, align 8, !dbg !1149
  %ptradd9 = getelementptr inbounds i8, ptr %24, i64 2, !dbg !1149
  %25 = load i16, ptr %ptradd9, align 2, !dbg !1149
  %zext10 = zext i16 %25 to i32, !dbg !1149
  %mul11 = mul i32 %zext8, %zext10, !dbg !1148
  %26 = load ptr, ptr %self, align 8, !dbg !1150
  %ptradd12 = getelementptr inbounds i8, ptr %26, i64 6, !dbg !1150
  %27 = load i16, ptr %ptradd12, align 2, !dbg !1150
  %zext13 = zext i16 %27 to i32, !dbg !1150
  %add14 = add i32 %mul11, %zext13, !dbg !1148
  %trunc15 = trunc i32 %add14 to i16, !dbg !1148
  store i16 %trunc15, ptr %ptradd6, align 2, !dbg !1148
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1151, metadata !DIExpression()), !dbg !1152
  %28 = load ptr, ptr %self, align 8, !dbg !1153
  %ptradd16 = getelementptr inbounds i8, ptr %28, i64 2, !dbg !1153
  %29 = load i16, ptr %ptradd16, align 2, !dbg !1153
  store i16 %29, ptr %s1, align 2, !dbg !1153
  %30 = load ptr, ptr %self, align 8, !dbg !1154
  %ptradd17 = getelementptr inbounds i8, ptr %30, i64 2, !dbg !1154
  %31 = load ptr, ptr %self, align 8, !dbg !1155
  %ptradd18 = getelementptr inbounds i8, ptr %31, i64 2, !dbg !1155
  %32 = load i16, ptr %ptradd18, align 2
  store i16 %32, ptr %self19, align 2
  store i16 8, ptr %shift20, align 2
  %33 = load i16, ptr %self19, align 2, !dbg !1156
  %34 = load i16, ptr %self19, align 2, !dbg !1158
  %35 = load i16, ptr %shift20, align 2, !dbg !1159
  %36 = call i16 @llvm.fshr.i16(i16 %33, i16 %34, i16 %35), !dbg !1159
  store i16 %36, ptr %ptradd17, align 2, !dbg !1159
  %37 = load ptr, ptr %self, align 8, !dbg !1160
  %ptradd21 = getelementptr inbounds i8, ptr %37, i64 6, !dbg !1160
  %38 = load i16, ptr %ptradd21, align 2, !dbg !1160
  %sub = sub i16 %38, -25033, !dbg !1160
  store i16 %sub, ptr %ptradd21, align 2, !dbg !1160
  %39 = load i16, ptr %s0, align 2, !dbg !1161
  %zext22 = zext i16 %39 to i32, !dbg !1161
  %40 = load i16, ptr %s1, align 2, !dbg !1162
  %zext23 = zext i16 %40 to i32, !dbg !1162
  %add24 = add i32 %zext22, %zext23, !dbg !1161
  %trunc25 = trunc i32 %add24 to i16, !dbg !1161
  ret i16 %trunc25, !dbg !1161

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1132
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.29, i64 10, i32 135), !dbg !1132
  unreachable, !dbg !1132
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1163 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1164
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1164
  br i1 %4, label %panic, label %checkok, !dbg !1164

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1165, metadata !DIExpression()), !dbg !1166
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1167, metadata !DIExpression()), !dbg !1168
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1169
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1169
  %lt = icmp ult i64 0, %5, !dbg !1169
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1169

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1169
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.48, i64 12, ptr @.func.20, i64 10, i32 151), !dbg !1169
  unreachable, !dbg !1169

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1171, metadata !DIExpression()), !dbg !1173
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1174
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1174
  store i64 %7, ptr %len, align 8, !dbg !1174
  br label %loop.cond, !dbg !1175

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1176
  %lt4 = icmp ult i64 0, %8, !dbg !1176
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1176

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1178, metadata !DIExpression()), !dbg !1180
  %9 = load ptr, ptr %self, align 8, !dbg !1181
  %10 = call i16 @std.math.random.Msws16Random.next_short(ptr %9), !dbg !1182
  store i16 %10, ptr %value, align 2, !dbg !1182
  %11 = load i64, ptr %len, align 8, !dbg !1183
  %le = icmp ule i64 %11, 2, !dbg !1183
  br i1 %le, label %if.then, label %if.exit, !dbg !1183

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1184
  %add = add i64 0, %13, !dbg !1184
  %size = sub i64 %add, 0, !dbg !1184
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1184
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1184
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !1186
  %17 = extractvalue %"char[]" %16, 0, !dbg !1186
  %18 = extractvalue %"char[]" %16, 1, !dbg !1187
  %gt = icmp ugt i64 0, %18, !dbg !1187
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1187
  br i1 %19, label %panic5, label %checkok9, !dbg !1187

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !1186
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1186
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !1186
  %22 = extractvalue %"char[]" %21, 0, !dbg !1186
  %23 = extractvalue %"char[]" %15, 0, !dbg !1186
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !1186
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1186
  br label %expr_block.exit, !dbg !1188

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !1189
  %32 = extractvalue %"char[]" %31, 0, !dbg !1189
  %33 = extractvalue %"char[]" %31, 1, !dbg !1189
  %gt24 = icmp sgt i64 0, %33, !dbg !1189
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !1189
  br i1 %34, label %panic25, label %checkok32, !dbg !1189

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 2, !dbg !1189
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !1189
  br i1 %35, label %panic34, label %checkok41, !dbg !1189

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1189
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !1189
  %38 = extractvalue %"char[]" %37, 0, !dbg !1189
  %39 = extractvalue %"char[]" %30, 0, !dbg !1189
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !1189
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1189
  %44 = load i64, ptr %len, align 8, !dbg !1190
  %sub = sub i64 %44, 2, !dbg !1190
  store i64 %sub, ptr %len, align 8, !dbg !1190
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !1191
  %46 = extractvalue %"char[]" %45, 0, !dbg !1191
  %47 = extractvalue %"char[]" %45, 1, !dbg !1192
  %gt55 = icmp ugt i64 2, %47, !dbg !1192
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1192
  br i1 %48, label %panic56, label %checkok63, !dbg !1192

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 2, !dbg !1191
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !1191
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1191
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !1191
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !1191
  br label %loop.cond, !dbg !1191

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.60, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1193
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1193
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1193
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.61, i64 12, ptr @.str.62, i64 23, i32 153, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1196
  unreachable, !dbg !1197

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !1197

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1166
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.20, i64 10, i32 153), !dbg !1166
  unreachable, !dbg !1166

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1186
  unreachable, !dbg !1186

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !1186
  unreachable, !dbg !1186

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !1189
  unreachable, !dbg !1189

panic34:                                          ; preds = %checkok32
  store i64 1, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !1189
  unreachable, !dbg !1189

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !1189
  unreachable, !dbg !1189

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !1191
  unreachable, !dbg !1191
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws16Random.next_int128(ptr %0) #0 comdat !dbg !1198 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1201
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1201
  br i1 %2, label %panic, label %checkok, !dbg !1201

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1202, metadata !DIExpression()), !dbg !1203
  %3 = load ptr, ptr %self, align 8, !dbg !1204
  %4 = call i64 @std.math.random.Msws16Random.next_long(ptr %3), !dbg !1206
  %zext = zext i64 %4 to i128, !dbg !1206
  %shl = shl i128 %zext, 64, !dbg !1206
  %5 = freeze i128 %shl, !dbg !1206
  %6 = load ptr, ptr %self, align 8, !dbg !1204
  %7 = call i64 @std.math.random.Msws16Random.next_long(ptr %6), !dbg !1207
  %zext1 = zext i64 %7 to i128, !dbg !1207
  %add = add i128 %5, %zext1, !dbg !1206
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1203
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.27, i64 11, i32 154), !dbg !1203
  unreachable, !dbg !1203
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws16Random.next_long(ptr %0) #0 comdat !dbg !1208 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1211
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1211
  br i1 %2, label %panic, label %checkok, !dbg !1211

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1212, metadata !DIExpression()), !dbg !1213
  %3 = load ptr, ptr %self, align 8, !dbg !1214
  %4 = call i32 @std.math.random.Msws16Random.next_int(ptr %3), !dbg !1216
  %zext = zext i32 %4 to i64, !dbg !1216
  %shl = shl i64 %zext, 32, !dbg !1216
  %5 = freeze i64 %shl, !dbg !1216
  %6 = load ptr, ptr %self, align 8, !dbg !1214
  %7 = call i32 @std.math.random.Msws16Random.next_int(ptr %6), !dbg !1217
  %zext1 = zext i32 %7 to i64, !dbg !1217
  %add = add i64 %5, %zext1, !dbg !1216
  ret i64 %add, !dbg !1216

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1213
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.18, i64 9, i32 155), !dbg !1213
  unreachable, !dbg !1213
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws16Random.next_int(ptr %0) #0 comdat !dbg !1218 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1221
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1221
  br i1 %2, label %panic, label %checkok, !dbg !1221

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1222, metadata !DIExpression()), !dbg !1223
  %3 = load ptr, ptr %self, align 8, !dbg !1224
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !1226
  %zext = zext i16 %4 to i32, !dbg !1226
  %shl = shl i32 %zext, 16, !dbg !1226
  %5 = freeze i32 %shl, !dbg !1226
  %6 = load ptr, ptr %self, align 8, !dbg !1224
  %7 = call i16 @std.math.random.Msws16Random.next_short(ptr %6), !dbg !1227
  %zext1 = zext i16 %7 to i32, !dbg !1227
  %add = add i32 %5, %zext1, !dbg !1226
  ret i32 %add, !dbg !1226

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1223
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.28, i64 8, i32 156), !dbg !1223
  unreachable, !dbg !1223
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws16Random.next_byte(ptr %0) #0 comdat !dbg !1228 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1231
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1231
  br i1 %2, label %panic, label %checkok, !dbg !1231

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1232, metadata !DIExpression()), !dbg !1233
  %3 = load ptr, ptr %self, align 8, !dbg !1234
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !1235
  %trunc = trunc i16 %4 to i8, !dbg !1235
  ret i8 %trunc, !dbg !1235

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1233
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.30, i64 9, i32 157), !dbg !1233
  unreachable, !dbg !1233
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws8Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1236 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %expr = alloca [4 x i8], align 1
  %3 = icmp eq ptr %0, null, !dbg !1246
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1246
  br i1 %4, label %panic, label %checkok, !dbg !1246

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1247, metadata !DIExpression()), !dbg !1248
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1249, metadata !DIExpression()), !dbg !1250
  %5 = load ptr, ptr %self, align 8, !dbg !1251
  %checknull = icmp eq ptr %5, null, !dbg !1251
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1251
  br i1 %6, label %panic1, label %checkok2, !dbg !1251

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1252, metadata !DIExpression()), !dbg !1255
  store i8 0, ptr %return_value, align 1, !dbg !1255
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !1255
  store i8 0, ptr %ptradd4, align 1, !dbg !1255
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1255
  store i8 0, ptr %ptradd5, align 1, !dbg !1255
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !1255
  store i8 0, ptr %ptradd6, align 1, !dbg !1255
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !1257
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 4, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 4), !dbg !1260
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %return_value, i32 4, i1 false)
  %checknull8 = icmp eq ptr %expr, null, !dbg !1261
  %11 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1261
  br i1 %11, label %panic9, label %checkok10, !dbg !1261

checkok10:                                        ; preds = %checkok2
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %5, ptr align 1 %expr, i32 4, i1 false), !dbg !1264
  ret void, !dbg !1264

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1248
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 166), !dbg !1248
  unreachable, !dbg !1248

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1251
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.48, i64 12, ptr @.func.16, i64 8, i32 168), !dbg !1251
  unreachable, !dbg !1251

panic9:                                           ; preds = %checkok2
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1264
  call void %14(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.16, i64 8, i32 212), !dbg !1264
  unreachable, !dbg !1264
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Msws8Random.next_byte(ptr %0) #0 comdat !dbg !1265 {
entry:
  %self = alloca ptr, align 8
  %s0 = alloca i8, align 1
  %self3 = alloca i8, align 1
  %shift = alloca i8, align 1
  %s1 = alloca i8, align 1
  %self19 = alloca i8, align 1
  %shift20 = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !1268
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1268
  br i1 %2, label %panic, label %checkok, !dbg !1268

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1269, metadata !DIExpression()), !dbg !1270
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !1271, metadata !DIExpression()), !dbg !1272
  %3 = load ptr, ptr %self, align 8, !dbg !1273
  %4 = load i8, ptr %3, align 1, !dbg !1273
  store i8 %4, ptr %s0, align 1, !dbg !1273
  %5 = load ptr, ptr %self, align 8, !dbg !1274
  %6 = load ptr, ptr %self, align 8, !dbg !1275
  %7 = load i8, ptr %6, align 1, !dbg !1275
  %zext = zext i8 %7 to i32, !dbg !1275
  %8 = load ptr, ptr %self, align 8, !dbg !1276
  %9 = load i8, ptr %8, align 1, !dbg !1276
  %zext1 = zext i8 %9 to i32, !dbg !1276
  %mul = mul i32 %zext, %zext1, !dbg !1275
  %10 = load ptr, ptr %self, align 8, !dbg !1277
  %ptradd = getelementptr inbounds i8, ptr %10, i64 2, !dbg !1277
  %11 = load i8, ptr %ptradd, align 1, !dbg !1277
  %zext2 = zext i8 %11 to i32, !dbg !1277
  %add = add i32 %mul, %zext2, !dbg !1275
  %trunc = trunc i32 %add to i8, !dbg !1275
  store i8 %trunc, ptr %5, align 1, !dbg !1275
  %12 = load ptr, ptr %self, align 8, !dbg !1278
  %13 = load ptr, ptr %self, align 8, !dbg !1279
  %14 = load i8, ptr %13, align 1
  store i8 %14, ptr %self3, align 1
  store i8 4, ptr %shift, align 1
  %15 = load i8, ptr %self3, align 1, !dbg !1280
  %16 = load i8, ptr %self3, align 1, !dbg !1282
  %17 = load i8, ptr %shift, align 1, !dbg !1283
  %18 = call i8 @llvm.fshr.i8(i8 %15, i8 %16, i8 %17), !dbg !1283
  store i8 %18, ptr %12, align 1, !dbg !1283
  %19 = load ptr, ptr %self, align 8, !dbg !1284
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !1284
  %20 = load i8, ptr %ptradd4, align 1, !dbg !1284
  %add5 = add i8 %20, -97, !dbg !1284
  store i8 %add5, ptr %ptradd4, align 1, !dbg !1284
  %21 = load ptr, ptr %self, align 8, !dbg !1285
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !1285
  %22 = load ptr, ptr %self, align 8, !dbg !1286
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 1, !dbg !1286
  %23 = load i8, ptr %ptradd7, align 1, !dbg !1286
  %zext8 = zext i8 %23 to i32, !dbg !1286
  %24 = load ptr, ptr %self, align 8, !dbg !1287
  %ptradd9 = getelementptr inbounds i8, ptr %24, i64 1, !dbg !1287
  %25 = load i8, ptr %ptradd9, align 1, !dbg !1287
  %zext10 = zext i8 %25 to i32, !dbg !1287
  %mul11 = mul i32 %zext8, %zext10, !dbg !1286
  %26 = load ptr, ptr %self, align 8, !dbg !1288
  %ptradd12 = getelementptr inbounds i8, ptr %26, i64 3, !dbg !1288
  %27 = load i8, ptr %ptradd12, align 1, !dbg !1288
  %zext13 = zext i8 %27 to i32, !dbg !1288
  %add14 = add i32 %mul11, %zext13, !dbg !1286
  %trunc15 = trunc i32 %add14 to i8, !dbg !1286
  store i8 %trunc15, ptr %ptradd6, align 1, !dbg !1286
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1289, metadata !DIExpression()), !dbg !1290
  %28 = load ptr, ptr %self, align 8, !dbg !1291
  %ptradd16 = getelementptr inbounds i8, ptr %28, i64 1, !dbg !1291
  %29 = load i8, ptr %ptradd16, align 1, !dbg !1291
  store i8 %29, ptr %s1, align 1, !dbg !1291
  %30 = load ptr, ptr %self, align 8, !dbg !1292
  %ptradd17 = getelementptr inbounds i8, ptr %30, i64 1, !dbg !1292
  %31 = load ptr, ptr %self, align 8, !dbg !1293
  %ptradd18 = getelementptr inbounds i8, ptr %31, i64 1, !dbg !1293
  %32 = load i8, ptr %ptradd18, align 1
  store i8 %32, ptr %self19, align 1
  store i8 4, ptr %shift20, align 1
  %33 = load i8, ptr %self19, align 1, !dbg !1294
  %34 = load i8, ptr %self19, align 1, !dbg !1296
  %35 = load i8, ptr %shift20, align 1, !dbg !1297
  %36 = call i8 @llvm.fshr.i8(i8 %33, i8 %34, i8 %35), !dbg !1297
  store i8 %36, ptr %ptradd17, align 1, !dbg !1297
  %37 = load ptr, ptr %self, align 8, !dbg !1298
  %ptradd21 = getelementptr inbounds i8, ptr %37, i64 3, !dbg !1298
  %38 = load i8, ptr %ptradd21, align 1, !dbg !1298
  %sub = sub i8 %38, -97, !dbg !1298
  store i8 %sub, ptr %ptradd21, align 1, !dbg !1298
  %39 = load i8, ptr %s0, align 1, !dbg !1299
  %zext22 = zext i8 %39 to i32, !dbg !1299
  %40 = load i8, ptr %s1, align 1, !dbg !1300
  %zext23 = zext i8 %40 to i32, !dbg !1300
  %add24 = add i32 %zext22, %zext23, !dbg !1299
  %trunc25 = trunc i32 %add24 to i8, !dbg !1299
  ret i8 %trunc25, !dbg !1299

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1270
  call void %41(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.30, i64 9, i32 171), !dbg !1270
  unreachable, !dbg !1270
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Msws8Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1301 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca ptr, align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1302
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1302
  br i1 %4, label %panic, label %checkok, !dbg !1302

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1303, metadata !DIExpression()), !dbg !1304
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1305, metadata !DIExpression()), !dbg !1306
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1307, metadata !DIExpression()), !dbg !1309
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !1310
  %5 = load i64, ptr %ptradd2, align 8, !dbg !1310
  store i64 %5, ptr %len, align 8, !dbg !1310
  br label %loop.cond, !dbg !1311

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !1312
  %lt = icmp ult i64 0, %6, !dbg !1312
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1312

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1314, metadata !DIExpression()), !dbg !1316
  %7 = load ptr, ptr %self, align 8, !dbg !1317
  %8 = call i8 @std.math.random.Msws8Random.next_byte(ptr %7), !dbg !1318
  store i8 %8, ptr %value, align 1, !dbg !1318
  %9 = load i64, ptr %len, align 8, !dbg !1319
  %le = icmp ule i64 %9, 1, !dbg !1319
  br i1 %le, label %if.then, label %if.exit, !dbg !1319

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !1320
  %add = add i64 0, %11, !dbg !1320
  %size = sub i64 %add, 0, !dbg !1320
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !1320
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !1320
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !1322
  %15 = extractvalue %"char[]" %14, 0, !dbg !1322
  %16 = extractvalue %"char[]" %14, 1, !dbg !1323
  %gt = icmp ugt i64 0, %16, !dbg !1323
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1323
  br i1 %17, label %panic3, label %checkok7, !dbg !1323

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !1322
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !1322
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !1322
  %20 = extractvalue %"char[]" %19, 0, !dbg !1322
  %21 = extractvalue %"char[]" %13, 0, !dbg !1322
  store %"char[]" %13, ptr %taddr9, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %taddr9, i64 8
  %22 = load i64, ptr %ptradd10, align 8
  store %"char[]" %19, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %23 = load i64, ptr %ptradd12, align 8
  %neq = icmp ne i64 %23, %22
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %24, label %panic13, label %checkok20

checkok20:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !1322
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !1322
  br label %expr_block.exit, !dbg !1324

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr21, align 8
  %26 = load ptr, ptr %taddr21, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !1325
  %30 = extractvalue %"char[]" %29, 0, !dbg !1325
  %31 = extractvalue %"char[]" %29, 1, !dbg !1325
  %gt22 = icmp sgt i64 0, %31, !dbg !1325
  %32 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !1325
  br i1 %32, label %panic23, label %checkok30, !dbg !1325

checkok30:                                        ; preds = %if.exit
  %lt31 = icmp slt i64 %31, 1, !dbg !1325
  %33 = call i1 @llvm.expect.i1(i1 %lt31, i1 false), !dbg !1325
  br i1 %33, label %panic32, label %checkok39, !dbg !1325

checkok39:                                        ; preds = %checkok30
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !1325
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !1325
  %36 = extractvalue %"char[]" %35, 0, !dbg !1325
  %37 = extractvalue %"char[]" %28, 0, !dbg !1325
  store %"char[]" %28, ptr %taddr40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %taddr40, i64 8
  %38 = load i64, ptr %ptradd41, align 8
  store %"char[]" %35, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %39 = load i64, ptr %ptradd43, align 8
  %neq44 = icmp ne i64 %39, %38
  %40 = call i1 @llvm.expect.i1(i1 %neq44, i1 false)
  br i1 %40, label %panic45, label %checkok52

checkok52:                                        ; preds = %checkok39
  %41 = mul i64 %38, 1, !dbg !1325
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !1325
  %42 = load i64, ptr %len, align 8, !dbg !1326
  %sub = sub i64 %42, 1, !dbg !1326
  store i64 %sub, ptr %len, align 8, !dbg !1326
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !1327
  %44 = extractvalue %"char[]" %43, 0, !dbg !1327
  %45 = extractvalue %"char[]" %43, 1, !dbg !1328
  %gt53 = icmp ugt i64 1, %45, !dbg !1328
  %46 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !1328
  br i1 %46, label %panic54, label %checkok61, !dbg !1328

checkok61:                                        ; preds = %checkok52
  %size62 = sub i64 %45, 1, !dbg !1327
  %ptradd63 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !1327
  %47 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !1327
  %48 = insertvalue %"char[]" %47, i64 %size62, 1, !dbg !1327
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !1327
  br label %loop.cond, !dbg !1327

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.63, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1329
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1329
  %hi = load i64, ptr %ptradd64, align 8, !dbg !1329
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.64, i64 12, ptr @.str.65, i64 22, i32 186, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !1332
  unreachable, !dbg !1333

expr_block.exit:                                  ; preds = %checkok20
  ret void, !dbg !1333

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1304
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.20, i64 10, i32 186), !dbg !1304
  unreachable, !dbg !1304

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1322
  unreachable, !dbg !1322

panic13:                                          ; preds = %checkok7
  store i64 %23, ptr %taddr14, align 8
  %55 = insertvalue %any undef, ptr %taddr14, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr15, align 8
  %57 = insertvalue %any undef, ptr %taddr15, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %58, ptr %ptradd17, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !1322
  unreachable, !dbg !1322

panic23:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr24, align 8
  %60 = insertvalue %any undef, ptr %taddr24, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %62 = insertvalue %any undef, ptr %taddr25, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %63, ptr %ptradd27, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg29), !dbg !1325
  unreachable, !dbg !1325

panic32:                                          ; preds = %checkok30
  store i64 0, ptr %taddr33, align 8
  %65 = insertvalue %any undef, ptr %taddr33, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %68, ptr %ptradd36, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg38), !dbg !1325
  unreachable, !dbg !1325

panic45:                                          ; preds = %checkok39
  store i64 %39, ptr %taddr46, align 8
  %70 = insertvalue %any undef, ptr %taddr46, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr47, align 8
  %72 = insertvalue %any undef, ptr %taddr47, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %73, ptr %ptradd49, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg51), !dbg !1325
  unreachable, !dbg !1325

panic54:                                          ; preds = %checkok52
  store i64 %45, ptr %taddr55, align 8
  %75 = insertvalue %any undef, ptr %taddr55, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %77 = insertvalue %any undef, ptr %taddr56, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %78, ptr %ptradd58, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60), !dbg !1327
  unreachable, !dbg !1327
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Msws8Random.next_int128(ptr %0) #0 comdat !dbg !1334 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1337
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1337
  br i1 %2, label %panic, label %checkok, !dbg !1337

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1338, metadata !DIExpression()), !dbg !1339
  %3 = load ptr, ptr %self, align 8, !dbg !1340
  %4 = call i64 @std.math.random.Msws8Random.next_long(ptr %3), !dbg !1342
  %zext = zext i64 %4 to i128, !dbg !1342
  %shl = shl i128 %zext, 64, !dbg !1342
  %5 = freeze i128 %shl, !dbg !1342
  %6 = load ptr, ptr %self, align 8, !dbg !1340
  %7 = call i64 @std.math.random.Msws8Random.next_long(ptr %6), !dbg !1343
  %zext1 = zext i64 %7 to i128, !dbg !1343
  %add = add i128 %5, %zext1, !dbg !1342
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1339
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.27, i64 11, i32 187), !dbg !1339
  unreachable, !dbg !1339
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Msws8Random.next_long(ptr %0) #0 comdat !dbg !1344 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1347
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1347
  br i1 %2, label %panic, label %checkok, !dbg !1347

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1348, metadata !DIExpression()), !dbg !1349
  %3 = load ptr, ptr %self, align 8, !dbg !1350
  %4 = call i32 @std.math.random.Msws8Random.next_int(ptr %3), !dbg !1352
  %zext = zext i32 %4 to i64, !dbg !1352
  %shl = shl i64 %zext, 32, !dbg !1352
  %5 = freeze i64 %shl, !dbg !1352
  %6 = load ptr, ptr %self, align 8, !dbg !1350
  %7 = call i32 @std.math.random.Msws8Random.next_int(ptr %6), !dbg !1353
  %zext1 = zext i32 %7 to i64, !dbg !1353
  %add = add i64 %5, %zext1, !dbg !1352
  ret i64 %add, !dbg !1352

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1349
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.18, i64 9, i32 188), !dbg !1349
  unreachable, !dbg !1349
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Msws8Random.next_int(ptr %0) #0 comdat !dbg !1354 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1357
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1357
  br i1 %2, label %panic, label %checkok, !dbg !1357

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1358, metadata !DIExpression()), !dbg !1359
  %3 = load ptr, ptr %self, align 8, !dbg !1360
  %4 = call i16 @std.math.random.Msws8Random.next_short(ptr %3), !dbg !1362
  %zext = zext i16 %4 to i32, !dbg !1362
  %shl = shl i32 %zext, 16, !dbg !1362
  %5 = freeze i32 %shl, !dbg !1362
  %6 = load ptr, ptr %self, align 8, !dbg !1360
  %7 = call i16 @std.math.random.Msws8Random.next_short(ptr %6), !dbg !1363
  %zext1 = zext i16 %7 to i32, !dbg !1363
  %add = add i32 %5, %zext1, !dbg !1362
  ret i32 %add, !dbg !1362

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1359
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.28, i64 8, i32 189), !dbg !1359
  unreachable, !dbg !1359
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Msws8Random.next_short(ptr %0) #0 comdat !dbg !1364 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1367
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1367
  br i1 %2, label %panic, label %checkok, !dbg !1367

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1368, metadata !DIExpression()), !dbg !1369
  %3 = load ptr, ptr %self, align 8, !dbg !1370
  %4 = call i8 @std.math.random.Msws8Random.next_byte(ptr %3), !dbg !1372
  %zext = zext i8 %4 to i16, !dbg !1372
  %zext1 = zext i16 %zext to i32, !dbg !1372
  %shl = shl i32 %zext1, 8, !dbg !1372
  %5 = freeze i32 %shl, !dbg !1372
  %6 = load ptr, ptr %self, align 8, !dbg !1370
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !1373
  %zext2 = zext i8 %7 to i32, !dbg !1373
  %add = add i32 %5, %zext2, !dbg !1372
  %trunc = trunc i32 %add to i16, !dbg !1372
  ret i16 %trunc, !dbg !1372

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1369
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.48, i64 12, ptr @.func.29, i64 10, i32 190), !dbg !1369
  unreachable, !dbg !1369
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1374 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1379
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1379
  br i1 %4, label %panic, label %checkok, !dbg !1379

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1380, metadata !DIExpression()), !dbg !1381
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1382, metadata !DIExpression()), !dbg !1383
  %5 = load ptr, ptr %self, align 8, !dbg !1384
  %checknull = icmp eq ptr %5, null, !dbg !1384
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1384
  br i1 %6, label %panic1, label %checkok2, !dbg !1384

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1385, metadata !DIExpression()), !dbg !1387
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !1387
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !1389
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 64, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 64), !dbg !1392
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 16 %return_value, i32 64, i1 false), !dbg !1393
  ret void, !dbg !1393

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1381
  call void %11(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 15), !dbg !1381
  unreachable, !dbg !1381

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1384
  call void %12(ptr @.panic_msg.17, i64 45, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 17), !dbg !1384
  unreachable, !dbg !1384
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %0) #0 comdat !dbg !1394 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i128, align 8
  %self11 = alloca i128, align 8
  %shift = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1397
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1397
  br i1 %2, label %panic, label %checkok, !dbg !1397

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1398, metadata !DIExpression()), !dbg !1399
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1400, metadata !DIExpression()), !dbg !1401
  %3 = load ptr, ptr %self, align 8, !dbg !1402
  store ptr %3, ptr %s, align 8, !dbg !1402
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1403, metadata !DIExpression()), !dbg !1404
  %4 = load ptr, ptr %s, align 8, !dbg !1405
  %5 = load i128, ptr %4, align 8, !dbg !1406
  %6 = load ptr, ptr %s, align 8, !dbg !1407
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1408
  %7 = load i128, ptr %ptradd, align 8, !dbg !1408
  %add = add i128 %5, %7, !dbg !1405
  %8 = load ptr, ptr %s, align 8, !dbg !1409
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 48, !dbg !1410
  %9 = load i128, ptr %ptradd1, align 8, !dbg !1410
  %add2 = add i128 %add, %9, !dbg !1405
  store i128 %add2, ptr %result, align 8, !dbg !1405
  %10 = load ptr, ptr %s, align 8, !dbg !1411
  %11 = load ptr, ptr %s, align 8, !dbg !1412
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1413
  %12 = load i128, ptr %ptradd3, align 8, !dbg !1413
  %13 = load ptr, ptr %s, align 8, !dbg !1414
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1415
  %14 = load i128, ptr %ptradd4, align 8, !dbg !1415
  %lshr = lshr i128 %14, 11, !dbg !1414
  %15 = freeze i128 %lshr, !dbg !1414
  %xor = xor i128 %12, %15, !dbg !1412
  store i128 %xor, ptr %10, align 8, !dbg !1412
  %16 = load ptr, ptr %s, align 8, !dbg !1416
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1417
  %17 = load ptr, ptr %s, align 8, !dbg !1418
  %ptradd6 = getelementptr inbounds i8, ptr %17, i64 32, !dbg !1419
  %18 = load i128, ptr %ptradd6, align 8, !dbg !1419
  %19 = load ptr, ptr %s, align 8, !dbg !1420
  %ptradd7 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !1421
  %20 = load i128, ptr %ptradd7, align 8, !dbg !1421
  %shl = shl i128 %20, 3, !dbg !1420
  %21 = freeze i128 %shl, !dbg !1420
  %add8 = add i128 %18, %21, !dbg !1418
  store i128 %add8, ptr %ptradd5, align 8, !dbg !1418
  %22 = load ptr, ptr %s, align 8, !dbg !1422
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 32, !dbg !1423
  %23 = load ptr, ptr %s, align 8, !dbg !1424
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !1425
  %24 = load i128, ptr %ptradd10, align 8
  store i128 %24, ptr %self11, align 8
  store i128 40, ptr %shift, align 8
  %25 = load i128, ptr %self11, align 8, !dbg !1426
  %26 = load i128, ptr %self11, align 8, !dbg !1428
  %27 = load i128, ptr %shift, align 8, !dbg !1429
  %28 = call i128 @llvm.fshr.i128(i128 %25, i128 %26, i128 %27), !dbg !1429
  %29 = load i128, ptr %result, align 8, !dbg !1430
  %add12 = add i128 %28, %29, !dbg !1424
  store i128 %add12, ptr %ptradd9, align 8, !dbg !1424
  %30 = load ptr, ptr %s, align 8, !dbg !1431
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !1432
  %31 = load i128, ptr %ptradd13, align 8, !dbg !1432
  %add14 = add i128 %31, -129976298391535590297638237547755878347, !dbg !1431
  store i128 %add14, ptr %ptradd13, align 8, !dbg !1431
  %32 = load { i64, i64 }, ptr %result, align 8, !dbg !1433
  ret { i64, i64 } %32, !dbg !1433

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1399
  call void %33(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.27, i64 11, i32 20), !dbg !1399
  unreachable, !dbg !1399
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1434 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 8
  %result = alloca i128, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1435
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1435
  br i1 %4, label %panic, label %checkok, !dbg !1435

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1436, metadata !DIExpression()), !dbg !1437
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1438, metadata !DIExpression()), !dbg !1439
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1440
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1440
  %lt = icmp ult i64 0, %5, !dbg !1440
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1440

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1440
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.75, i64 11, ptr @.func.20, i64 10, i32 32), !dbg !1440
  unreachable, !dbg !1440

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1442, metadata !DIExpression()), !dbg !1444
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1445
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1445
  store i64 %7, ptr %len, align 8, !dbg !1445
  br label %loop.cond, !dbg !1446

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1447
  %lt4 = icmp ult i64 0, %8, !dbg !1447
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1447

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1449, metadata !DIExpression()), !dbg !1451
  %9 = load ptr, ptr %self, align 8, !dbg !1452
  %10 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %9), !dbg !1453
  store { i64, i64 } %10, ptr %result, align 8
  %11 = load i128, ptr %result, align 8
  store i128 %11, ptr %value, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1454
  %le = icmp ule i64 %12, 16, !dbg !1454
  br i1 %le, label %if.then, label %if.exit, !dbg !1454

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %13 = load ptr, ptr %taddr, align 8
  %14 = load i64, ptr %len, align 8, !dbg !1455
  %add = add i64 0, %14, !dbg !1455
  %size = sub i64 %add, 0, !dbg !1455
  %15 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !1455
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1455
  %17 = load %"char[]", ptr %bytes2, align 8, !dbg !1457
  %18 = extractvalue %"char[]" %17, 0, !dbg !1457
  %19 = extractvalue %"char[]" %17, 1, !dbg !1458
  %gt = icmp ugt i64 0, %19, !dbg !1458
  %20 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1458
  br i1 %20, label %panic5, label %checkok9, !dbg !1458

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %19, 0, !dbg !1457
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !1457
  %22 = insertvalue %"char[]" %21, i64 %size10, 1, !dbg !1457
  %23 = extractvalue %"char[]" %22, 0, !dbg !1457
  %24 = extractvalue %"char[]" %16, 0, !dbg !1457
  store %"char[]" %16, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %25 = load i64, ptr %ptradd12, align 8
  store %"char[]" %22, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %26 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %26, %25
  %27 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %27, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %28 = mul i64 %25, 1, !dbg !1457
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %23, ptr align 1 %24, i64 %28, i1 false), !dbg !1457
  br label %expr_block.exit, !dbg !1459

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %29 = load ptr, ptr %taddr23, align 8
  %30 = insertvalue %"char[]" undef, ptr %29, 0
  %31 = insertvalue %"char[]" %30, i64 16, 1
  %32 = load %"char[]", ptr %bytes2, align 8, !dbg !1460
  %33 = extractvalue %"char[]" %32, 0, !dbg !1460
  %34 = extractvalue %"char[]" %32, 1, !dbg !1460
  %gt24 = icmp sgt i64 0, %34, !dbg !1460
  %35 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !1460
  br i1 %35, label %panic25, label %checkok32, !dbg !1460

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %34, 16, !dbg !1460
  %36 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !1460
  br i1 %36, label %panic34, label %checkok41, !dbg !1460

checkok41:                                        ; preds = %checkok32
  %37 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1460
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !1460
  %39 = extractvalue %"char[]" %38, 0, !dbg !1460
  %40 = extractvalue %"char[]" %31, 0, !dbg !1460
  store %"char[]" %31, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %41 = load i64, ptr %ptradd43, align 8
  store %"char[]" %38, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %42 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %42, %41
  %43 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %43, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %44 = mul i64 %41, 1, !dbg !1460
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1460
  %45 = load i64, ptr %len, align 8, !dbg !1461
  %sub = sub i64 %45, 16, !dbg !1461
  store i64 %sub, ptr %len, align 8, !dbg !1461
  %46 = load %"char[]", ptr %bytes2, align 8, !dbg !1462
  %47 = extractvalue %"char[]" %46, 0, !dbg !1462
  %48 = extractvalue %"char[]" %46, 1, !dbg !1463
  %gt55 = icmp ugt i64 16, %48, !dbg !1463
  %49 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1463
  br i1 %49, label %panic56, label %checkok63, !dbg !1463

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %48, 16, !dbg !1462
  %ptradd65 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !1462
  %50 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1462
  %51 = insertvalue %"char[]" %50, i64 %size64, 1, !dbg !1462
  store %"char[]" %51, ptr %bytes2, align 8, !dbg !1462
  br label %loop.cond, !dbg !1462

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.76, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1464
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1464
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1464
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.77, i64 11, ptr @.str.78, i64 23, i32 34, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1467
  unreachable, !dbg !1468

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !1468

panic:                                            ; preds = %entry
  %52 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1437
  call void %52(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.20, i64 10, i32 34), !dbg !1437
  unreachable, !dbg !1437

panic5:                                           ; preds = %if.then
  store i64 %19, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %55 = insertvalue %any undef, ptr %taddr7, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %54, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %56, ptr %ptradd8, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1457
  unreachable, !dbg !1457

panic15:                                          ; preds = %checkok9
  store i64 %26, ptr %taddr16, align 8
  %58 = insertvalue %any undef, ptr %taddr16, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %60 = insertvalue %any undef, ptr %taddr17, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %59, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %61, ptr %ptradd19, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !1457
  unreachable, !dbg !1457

panic25:                                          ; preds = %if.exit
  store i64 %34, ptr %taddr26, align 8
  %63 = insertvalue %any undef, ptr %taddr26, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %65 = insertvalue %any undef, ptr %taddr27, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %64, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %66, ptr %ptradd29, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !1460
  unreachable, !dbg !1460

panic34:                                          ; preds = %checkok32
  store i64 15, ptr %taddr35, align 8
  %68 = insertvalue %any undef, ptr %taddr35, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr36, align 8
  %70 = insertvalue %any undef, ptr %taddr36, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %69, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %71, ptr %ptradd38, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !1460
  unreachable, !dbg !1460

panic47:                                          ; preds = %checkok41
  store i64 %42, ptr %taddr48, align 8
  %73 = insertvalue %any undef, ptr %taddr48, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr49, align 8
  %75 = insertvalue %any undef, ptr %taddr49, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %76, ptr %ptradd51, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !1460
  unreachable, !dbg !1460

panic56:                                          ; preds = %checkok54
  store i64 %48, ptr %taddr57, align 8
  %78 = insertvalue %any undef, ptr %taddr57, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr58, align 8
  %80 = insertvalue %any undef, ptr %taddr58, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %81, ptr %ptradd60, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !1462
  unreachable, !dbg !1462
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc128Random.next_long(ptr %0) #0 comdat !dbg !1469 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1472
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1472
  br i1 %2, label %panic, label %checkok, !dbg !1472

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1473, metadata !DIExpression()), !dbg !1474
  %3 = load ptr, ptr %self, align 8, !dbg !1475
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1476
  store { i64, i64 } %4, ptr %result, align 8
  %5 = load i128, ptr %result, align 8
  %trunc = trunc i128 %5 to i32
  %zext = zext i32 %trunc to i64
  ret i64 %zext

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1474
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.18, i64 9, i32 35), !dbg !1474
  unreachable, !dbg !1474
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc128Random.next_int(ptr %0) #0 comdat !dbg !1477 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1480
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1480
  br i1 %2, label %panic, label %checkok, !dbg !1480

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1481, metadata !DIExpression()), !dbg !1482
  %3 = load ptr, ptr %self, align 8, !dbg !1483
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1484
  store { i64, i64 } %4, ptr %result, align 8
  %5 = load i128, ptr %result, align 8
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1482
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.28, i64 8, i32 36), !dbg !1482
  unreachable, !dbg !1482
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc128Random.next_short(ptr %0) #0 comdat !dbg !1485 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1488
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1488
  br i1 %2, label %panic, label %checkok, !dbg !1488

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1489, metadata !DIExpression()), !dbg !1490
  %3 = load ptr, ptr %self, align 8, !dbg !1491
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1492
  store { i64, i64 } %4, ptr %result, align 8
  %5 = load i128, ptr %result, align 8
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1490
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.29, i64 10, i32 37), !dbg !1490
  unreachable, !dbg !1490
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc128Random.next_byte(ptr %0) #0 comdat !dbg !1493 {
entry:
  %self = alloca ptr, align 8
  %result = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1496
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1496
  br i1 %2, label %panic, label %checkok, !dbg !1496

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1497, metadata !DIExpression()), !dbg !1498
  %3 = load ptr, ptr %self, align 8, !dbg !1499
  %4 = call { i64, i64 } @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1500
  store { i64, i64 } %4, ptr %result, align 8
  %5 = load i128, ptr %result, align 8
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1498
  call void %6(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.30, i64 9, i32 38), !dbg !1498
  unreachable, !dbg !1498
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1501 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1505
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1505
  br i1 %4, label %panic, label %checkok, !dbg !1505

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1506, metadata !DIExpression()), !dbg !1507
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1508, metadata !DIExpression()), !dbg !1509
  %5 = load ptr, ptr %self, align 8, !dbg !1510
  %checknull = icmp eq ptr %5, null, !dbg !1510
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1510
  br i1 %6, label %panic1, label %checkok2, !dbg !1510

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1511, metadata !DIExpression()), !dbg !1513
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !1513
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !1515
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 32, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 32), !dbg !1518
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 16 %return_value, i32 32, i1 false), !dbg !1519
  ret void, !dbg !1519

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1507
  call void %11(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 45), !dbg !1507
  unreachable, !dbg !1507

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1510
  call void %12(ptr @.panic_msg.17, i64 45, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 47), !dbg !1510
  unreachable, !dbg !1510
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc64Random.next_long(ptr %0) #0 comdat !dbg !1520 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %self11 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !1523
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1523
  br i1 %2, label %panic, label %checkok, !dbg !1523

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1524, metadata !DIExpression()), !dbg !1525
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1526, metadata !DIExpression()), !dbg !1527
  %3 = load ptr, ptr %self, align 8, !dbg !1528
  store ptr %3, ptr %s, align 8, !dbg !1528
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1529, metadata !DIExpression()), !dbg !1530
  %4 = load ptr, ptr %s, align 8, !dbg !1531
  %5 = load i64, ptr %4, align 8, !dbg !1532
  %6 = load ptr, ptr %s, align 8, !dbg !1533
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1534
  %7 = load i64, ptr %ptradd, align 8, !dbg !1534
  %add = add i64 %5, %7, !dbg !1531
  %8 = load ptr, ptr %s, align 8, !dbg !1535
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !1536
  %9 = load i64, ptr %ptradd1, align 8, !dbg !1536
  %add2 = add i64 %add, %9, !dbg !1531
  store i64 %add2, ptr %result, align 8, !dbg !1531
  %10 = load ptr, ptr %s, align 8, !dbg !1537
  %11 = load ptr, ptr %s, align 8, !dbg !1538
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !1539
  %12 = load i64, ptr %ptradd3, align 8, !dbg !1539
  %13 = load ptr, ptr %s, align 8, !dbg !1540
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !1541
  %14 = load i64, ptr %ptradd4, align 8, !dbg !1541
  %lshr = lshr i64 %14, 11, !dbg !1540
  %15 = freeze i64 %lshr, !dbg !1540
  %xor = xor i64 %12, %15, !dbg !1538
  store i64 %xor, ptr %10, align 8, !dbg !1538
  %16 = load ptr, ptr %s, align 8, !dbg !1542
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !1543
  %17 = load ptr, ptr %s, align 8, !dbg !1544
  %ptradd6 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1545
  %18 = load i64, ptr %ptradd6, align 8, !dbg !1545
  %19 = load ptr, ptr %s, align 8, !dbg !1546
  %ptradd7 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1547
  %20 = load i64, ptr %ptradd7, align 8, !dbg !1547
  %shl = shl i64 %20, 3, !dbg !1546
  %21 = freeze i64 %shl, !dbg !1546
  %add8 = add i64 %18, %21, !dbg !1544
  store i64 %add8, ptr %ptradd5, align 8, !dbg !1544
  %22 = load ptr, ptr %s, align 8, !dbg !1548
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1549
  %23 = load ptr, ptr %s, align 8, !dbg !1550
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1551
  %24 = load i64, ptr %ptradd10, align 8
  store i64 %24, ptr %self11, align 8
  store i64 40, ptr %shift, align 8
  %25 = load i64, ptr %self11, align 8, !dbg !1552
  %26 = load i64, ptr %self11, align 8, !dbg !1554
  %27 = load i64, ptr %shift, align 8, !dbg !1555
  %28 = call i64 @llvm.fshr.i64(i64 %25, i64 %26, i64 %27), !dbg !1555
  %29 = load i64, ptr %result, align 8, !dbg !1556
  %add12 = add i64 %28, %29, !dbg !1550
  store i64 %add12, ptr %ptradd9, align 8, !dbg !1550
  %30 = load ptr, ptr %s, align 8, !dbg !1557
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 24, !dbg !1558
  %31 = load i64, ptr %ptradd13, align 8, !dbg !1558
  %add14 = add i64 %31, -7046029254386353131, !dbg !1557
  store i64 %add14, ptr %ptradd13, align 8, !dbg !1557
  %32 = load i64, ptr %result, align 8, !dbg !1559
  ret i64 %32, !dbg !1559

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1525
  call void %33(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.18, i64 9, i32 50), !dbg !1525
  unreachable, !dbg !1525
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1560 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1561
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1561
  br i1 %4, label %panic, label %checkok, !dbg !1561

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1562, metadata !DIExpression()), !dbg !1563
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1564, metadata !DIExpression()), !dbg !1565
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1566
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1566
  %lt = icmp ult i64 0, %5, !dbg !1566
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1566

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1566
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.75, i64 11, ptr @.func.20, i64 10, i32 62), !dbg !1566
  unreachable, !dbg !1566

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1568, metadata !DIExpression()), !dbg !1570
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1571
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1571
  store i64 %7, ptr %len, align 8, !dbg !1571
  br label %loop.cond, !dbg !1572

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1573
  %lt4 = icmp ult i64 0, %8, !dbg !1573
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1573

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1575, metadata !DIExpression()), !dbg !1577
  %9 = load ptr, ptr %self, align 8, !dbg !1578
  %10 = call i64 @std.math.random.Sfc64Random.next_long(ptr %9), !dbg !1579
  store i64 %10, ptr %value, align 8, !dbg !1579
  %11 = load i64, ptr %len, align 8, !dbg !1580
  %le = icmp ule i64 %11, 8, !dbg !1580
  br i1 %le, label %if.then, label %if.exit, !dbg !1580

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1581
  %add = add i64 0, %13, !dbg !1581
  %size = sub i64 %add, 0, !dbg !1581
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1581
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1581
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !1583
  %17 = extractvalue %"char[]" %16, 0, !dbg !1583
  %18 = extractvalue %"char[]" %16, 1, !dbg !1584
  %gt = icmp ugt i64 0, %18, !dbg !1584
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1584
  br i1 %19, label %panic5, label %checkok9, !dbg !1584

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !1583
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1583
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !1583
  %22 = extractvalue %"char[]" %21, 0, !dbg !1583
  %23 = extractvalue %"char[]" %15, 0, !dbg !1583
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !1583
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1583
  br label %expr_block.exit, !dbg !1585

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !1586
  %32 = extractvalue %"char[]" %31, 0, !dbg !1586
  %33 = extractvalue %"char[]" %31, 1, !dbg !1586
  %gt24 = icmp sgt i64 0, %33, !dbg !1586
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !1586
  br i1 %34, label %panic25, label %checkok32, !dbg !1586

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 8, !dbg !1586
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !1586
  br i1 %35, label %panic34, label %checkok41, !dbg !1586

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1586
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !1586
  %38 = extractvalue %"char[]" %37, 0, !dbg !1586
  %39 = extractvalue %"char[]" %30, 0, !dbg !1586
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !1586
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1586
  %44 = load i64, ptr %len, align 8, !dbg !1587
  %sub = sub i64 %44, 8, !dbg !1587
  store i64 %sub, ptr %len, align 8, !dbg !1587
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !1588
  %46 = extractvalue %"char[]" %45, 0, !dbg !1588
  %47 = extractvalue %"char[]" %45, 1, !dbg !1589
  %gt55 = icmp ugt i64 8, %47, !dbg !1589
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1589
  br i1 %48, label %panic56, label %checkok63, !dbg !1589

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 8, !dbg !1588
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !1588
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1588
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !1588
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !1588
  br label %loop.cond, !dbg !1588

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.79, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1590
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1590
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1590
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.80, i64 11, ptr @.str.81, i64 22, i32 64, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1593
  unreachable, !dbg !1594

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !1594

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1563
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.20, i64 10, i32 64), !dbg !1563
  unreachable, !dbg !1563

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1583
  unreachable, !dbg !1583

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !1583
  unreachable, !dbg !1583

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !1586
  unreachable, !dbg !1586

panic34:                                          ; preds = %checkok32
  store i64 7, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !1586
  unreachable, !dbg !1586

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !1586
  unreachable, !dbg !1586

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !1588
  unreachable, !dbg !1588
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc64Random.next_int128(ptr %0) #0 comdat !dbg !1595 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1598
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1598
  br i1 %2, label %panic, label %checkok, !dbg !1598

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1599, metadata !DIExpression()), !dbg !1600
  %3 = load ptr, ptr %self, align 8, !dbg !1601
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1603
  %zext = zext i64 %4 to i128, !dbg !1603
  %shl = shl i128 %zext, 64, !dbg !1603
  %5 = freeze i128 %shl, !dbg !1603
  %6 = load ptr, ptr %self, align 8, !dbg !1601
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr %6), !dbg !1604
  %zext1 = zext i64 %7 to i128, !dbg !1604
  %add = add i128 %5, %zext1, !dbg !1603
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1600
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.27, i64 11, i32 65), !dbg !1600
  unreachable, !dbg !1600
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc64Random.next_int(ptr %0) #0 comdat !dbg !1605 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1608
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1608
  br i1 %2, label %panic, label %checkok, !dbg !1608

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1609, metadata !DIExpression()), !dbg !1610
  %3 = load ptr, ptr %self, align 8, !dbg !1611
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1612
  %trunc = trunc i64 %4 to i32, !dbg !1612
  ret i32 %trunc, !dbg !1612

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1610
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.28, i64 8, i32 66), !dbg !1610
  unreachable, !dbg !1610
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc64Random.next_short(ptr %0) #0 comdat !dbg !1613 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1616
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1616
  br i1 %2, label %panic, label %checkok, !dbg !1616

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1617, metadata !DIExpression()), !dbg !1618
  %3 = load ptr, ptr %self, align 8, !dbg !1619
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1620
  %trunc = trunc i64 %4 to i16, !dbg !1620
  ret i16 %trunc, !dbg !1620

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1618
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.29, i64 10, i32 67), !dbg !1618
  unreachable, !dbg !1618
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc64Random.next_byte(ptr %0) #0 comdat !dbg !1621 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1624
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1624
  br i1 %2, label %panic, label %checkok, !dbg !1624

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1625, metadata !DIExpression()), !dbg !1626
  %3 = load ptr, ptr %self, align 8, !dbg !1627
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1628
  %trunc = trunc i64 %4 to i8, !dbg !1628
  ret i8 %trunc, !dbg !1628

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1626
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.30, i64 9, i32 68), !dbg !1626
  unreachable, !dbg !1626
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1629 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1634
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1634
  br i1 %4, label %panic, label %checkok, !dbg !1634

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1635, metadata !DIExpression()), !dbg !1636
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1637, metadata !DIExpression()), !dbg !1638
  %5 = load ptr, ptr %self, align 8, !dbg !1639
  %checknull = icmp eq ptr %5, null, !dbg !1639
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1639
  br i1 %6, label %panic1, label %checkok2, !dbg !1639

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1640, metadata !DIExpression()), !dbg !1642
  store i32 0, ptr %return_value, align 4, !dbg !1642
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1642
  store i32 0, ptr %ptradd4, align 4, !dbg !1642
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !1642
  store i32 0, ptr %ptradd5, align 4, !dbg !1642
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !1642
  store i32 0, ptr %ptradd6, align 4, !dbg !1642
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !1644
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 16, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 16), !dbg !1647
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %5, ptr align 16 %return_value, i32 16, i1 false), !dbg !1648
  ret void, !dbg !1648

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1636
  call void %11(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 74), !dbg !1636
  unreachable, !dbg !1636

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1639
  call void %12(ptr @.panic_msg.17, i64 45, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 76), !dbg !1639
  unreachable, !dbg !1639
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc32Random.next_int(ptr %0) #0 comdat !dbg !1649 {
entry:
  %sfc = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %self = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !1652
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1652
  br i1 %2, label %panic, label %checkok, !dbg !1652

checkok:                                          ; preds = %entry
  store ptr %0, ptr %sfc, align 8
  call void @llvm.dbg.declare(metadata ptr %sfc, metadata !1653, metadata !DIExpression()), !dbg !1654
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1655, metadata !DIExpression()), !dbg !1656
  %3 = load ptr, ptr %sfc, align 8, !dbg !1657
  store ptr %3, ptr %s, align 8, !dbg !1657
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1658, metadata !DIExpression()), !dbg !1659
  %4 = load ptr, ptr %s, align 8, !dbg !1660
  %5 = load i32, ptr %4, align 4, !dbg !1661
  %6 = load ptr, ptr %s, align 8, !dbg !1662
  %ptradd = getelementptr inbounds i8, ptr %6, i64 4, !dbg !1663
  %7 = load i32, ptr %ptradd, align 4, !dbg !1663
  %add = add i32 %5, %7, !dbg !1660
  %8 = load ptr, ptr %s, align 8, !dbg !1664
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 12, !dbg !1665
  %9 = load i32, ptr %ptradd1, align 4, !dbg !1665
  %add2 = add i32 %add, %9, !dbg !1660
  store i32 %add2, ptr %result, align 4, !dbg !1660
  %10 = load ptr, ptr %s, align 8, !dbg !1666
  %11 = load ptr, ptr %s, align 8, !dbg !1667
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 4, !dbg !1668
  %12 = load i32, ptr %ptradd3, align 4, !dbg !1668
  %13 = load ptr, ptr %s, align 8, !dbg !1669
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 4, !dbg !1670
  %14 = load i32, ptr %ptradd4, align 4, !dbg !1670
  %lshr = lshr i32 %14, 9, !dbg !1669
  %15 = freeze i32 %lshr, !dbg !1669
  %xor = xor i32 %12, %15, !dbg !1667
  store i32 %xor, ptr %10, align 4, !dbg !1667
  %16 = load ptr, ptr %s, align 8, !dbg !1671
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 4, !dbg !1672
  %17 = load ptr, ptr %s, align 8, !dbg !1673
  %ptradd6 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !1674
  %18 = load i32, ptr %ptradd6, align 4, !dbg !1674
  %19 = load ptr, ptr %s, align 8, !dbg !1675
  %ptradd7 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !1676
  %20 = load i32, ptr %ptradd7, align 4, !dbg !1676
  %shl = shl i32 %20, 3, !dbg !1675
  %21 = freeze i32 %shl, !dbg !1675
  %add8 = add i32 %18, %21, !dbg !1673
  store i32 %add8, ptr %ptradd5, align 4, !dbg !1673
  %22 = load ptr, ptr %s, align 8, !dbg !1677
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1678
  %23 = load ptr, ptr %s, align 8, !dbg !1679
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !1680
  %24 = load i32, ptr %ptradd10, align 4
  store i32 %24, ptr %self, align 4
  store i32 11, ptr %shift, align 4
  %25 = load i32, ptr %self, align 4, !dbg !1681
  %26 = load i32, ptr %self, align 4, !dbg !1683
  %27 = load i32, ptr %shift, align 4, !dbg !1684
  %28 = call i32 @llvm.fshr.i32(i32 %25, i32 %26, i32 %27), !dbg !1684
  %29 = load i32, ptr %result, align 4, !dbg !1685
  %add11 = add i32 %28, %29, !dbg !1679
  store i32 %add11, ptr %ptradd9, align 4, !dbg !1679
  %30 = load ptr, ptr %s, align 8, !dbg !1686
  %ptradd12 = getelementptr inbounds i8, ptr %30, i64 12, !dbg !1687
  %31 = load i32, ptr %ptradd12, align 4, !dbg !1687
  %add13 = add i32 %31, -1640531527, !dbg !1686
  store i32 %add13, ptr %ptradd12, align 4, !dbg !1686
  %32 = load i32, ptr %result, align 4, !dbg !1688
  ret i32 %32, !dbg !1688

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1654
  call void %33(ptr @.panic_msg.82, i64 61, ptr @.file.75, i64 11, ptr @.func.28, i64 8, i32 79), !dbg !1654
  unreachable, !dbg !1654
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1689 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1690
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1690
  br i1 %4, label %panic, label %checkok, !dbg !1690

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1691, metadata !DIExpression()), !dbg !1692
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1693, metadata !DIExpression()), !dbg !1694
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1695
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1695
  %lt = icmp ult i64 0, %5, !dbg !1695
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1695

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1695
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.75, i64 11, ptr @.func.20, i64 10, i32 91), !dbg !1695
  unreachable, !dbg !1695

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1697, metadata !DIExpression()), !dbg !1699
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1700
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1700
  store i64 %7, ptr %len, align 8, !dbg !1700
  br label %loop.cond, !dbg !1701

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1702
  %lt4 = icmp ult i64 0, %8, !dbg !1702
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1702

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1704, metadata !DIExpression()), !dbg !1706
  %9 = load ptr, ptr %self, align 8, !dbg !1707
  %10 = call i32 @std.math.random.Sfc32Random.next_int(ptr %9), !dbg !1708
  store i32 %10, ptr %value, align 4, !dbg !1708
  %11 = load i64, ptr %len, align 8, !dbg !1709
  %le = icmp ule i64 %11, 4, !dbg !1709
  br i1 %le, label %if.then, label %if.exit, !dbg !1709

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1710
  %add = add i64 0, %13, !dbg !1710
  %size = sub i64 %add, 0, !dbg !1710
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1710
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1710
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !1712
  %17 = extractvalue %"char[]" %16, 0, !dbg !1712
  %18 = extractvalue %"char[]" %16, 1, !dbg !1713
  %gt = icmp ugt i64 0, %18, !dbg !1713
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1713
  br i1 %19, label %panic5, label %checkok9, !dbg !1713

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !1712
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1712
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !1712
  %22 = extractvalue %"char[]" %21, 0, !dbg !1712
  %23 = extractvalue %"char[]" %15, 0, !dbg !1712
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !1712
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1712
  br label %expr_block.exit, !dbg !1714

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !1715
  %32 = extractvalue %"char[]" %31, 0, !dbg !1715
  %33 = extractvalue %"char[]" %31, 1, !dbg !1715
  %gt24 = icmp sgt i64 0, %33, !dbg !1715
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !1715
  br i1 %34, label %panic25, label %checkok32, !dbg !1715

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 4, !dbg !1715
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !1715
  br i1 %35, label %panic34, label %checkok41, !dbg !1715

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1715
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !1715
  %38 = extractvalue %"char[]" %37, 0, !dbg !1715
  %39 = extractvalue %"char[]" %30, 0, !dbg !1715
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !1715
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1715
  %44 = load i64, ptr %len, align 8, !dbg !1716
  %sub = sub i64 %44, 4, !dbg !1716
  store i64 %sub, ptr %len, align 8, !dbg !1716
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !1717
  %46 = extractvalue %"char[]" %45, 0, !dbg !1717
  %47 = extractvalue %"char[]" %45, 1, !dbg !1718
  %gt55 = icmp ugt i64 4, %47, !dbg !1718
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1718
  br i1 %48, label %panic56, label %checkok63, !dbg !1718

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 4, !dbg !1717
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !1717
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1717
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !1717
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !1717
  br label %loop.cond, !dbg !1717

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.83, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1719
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1719
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1719
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.84, i64 11, ptr @.str.85, i64 22, i32 93, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1722
  unreachable, !dbg !1723

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !1723

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1692
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.20, i64 10, i32 93), !dbg !1692
  unreachable, !dbg !1692

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1712
  unreachable, !dbg !1712

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !1712
  unreachable, !dbg !1712

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !1715
  unreachable, !dbg !1715

panic34:                                          ; preds = %checkok32
  store i64 3, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !1715
  unreachable, !dbg !1715

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !1715
  unreachable, !dbg !1715

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !1717
  unreachable, !dbg !1717
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc32Random.next_int128(ptr %0) #0 comdat !dbg !1724 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1727
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1727
  br i1 %2, label %panic, label %checkok, !dbg !1727

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1728, metadata !DIExpression()), !dbg !1729
  %3 = load ptr, ptr %self, align 8, !dbg !1730
  %4 = call i64 @std.math.random.Sfc32Random.next_long(ptr %3), !dbg !1732
  %zext = zext i64 %4 to i128, !dbg !1732
  %shl = shl i128 %zext, 64, !dbg !1732
  %5 = freeze i128 %shl, !dbg !1732
  %6 = load ptr, ptr %self, align 8, !dbg !1730
  %7 = call i64 @std.math.random.Sfc32Random.next_long(ptr %6), !dbg !1733
  %zext1 = zext i64 %7 to i128, !dbg !1733
  %add = add i128 %5, %zext1, !dbg !1732
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1729
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.27, i64 11, i32 94), !dbg !1729
  unreachable, !dbg !1729
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc32Random.next_long(ptr %0) #0 comdat !dbg !1734 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1737
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1737
  br i1 %2, label %panic, label %checkok, !dbg !1737

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1738, metadata !DIExpression()), !dbg !1739
  %3 = load ptr, ptr %self, align 8, !dbg !1740
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1742
  %zext = zext i32 %4 to i64, !dbg !1742
  %shl = shl i64 %zext, 32, !dbg !1742
  %5 = freeze i64 %shl, !dbg !1742
  %6 = load ptr, ptr %self, align 8, !dbg !1740
  %7 = call i32 @std.math.random.Sfc32Random.next_int(ptr %6), !dbg !1743
  %zext1 = zext i32 %7 to i64, !dbg !1743
  %add = add i64 %5, %zext1, !dbg !1742
  ret i64 %add, !dbg !1742

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1739
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.18, i64 9, i32 95), !dbg !1739
  unreachable, !dbg !1739
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc32Random.next_short(ptr %0) #0 comdat !dbg !1744 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1747
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1747
  br i1 %2, label %panic, label %checkok, !dbg !1747

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1748, metadata !DIExpression()), !dbg !1749
  %3 = load ptr, ptr %self, align 8, !dbg !1750
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1751
  %trunc = trunc i32 %4 to i16, !dbg !1751
  ret i16 %trunc, !dbg !1751

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1749
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.29, i64 10, i32 96), !dbg !1749
  unreachable, !dbg !1749
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc32Random.next_byte(ptr %0) #0 comdat !dbg !1752 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1755
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1755
  br i1 %2, label %panic, label %checkok, !dbg !1755

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1756, metadata !DIExpression()), !dbg !1757
  %3 = load ptr, ptr %self, align 8, !dbg !1758
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1759
  %trunc = trunc i32 %4 to i8, !dbg !1759
  ret i8 %trunc, !dbg !1759

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1757
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.30, i64 9, i32 97), !dbg !1757
  unreachable, !dbg !1757
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1760 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1765
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1765
  br i1 %4, label %panic, label %checkok, !dbg !1765

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1766, metadata !DIExpression()), !dbg !1767
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1768, metadata !DIExpression()), !dbg !1769
  %5 = load ptr, ptr %self, align 8, !dbg !1770
  %checknull = icmp eq ptr %5, null, !dbg !1770
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1770
  br i1 %6, label %panic1, label %checkok2, !dbg !1770

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1771, metadata !DIExpression()), !dbg !1773
  store i16 0, ptr %return_value, align 2, !dbg !1773
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1773
  store i16 0, ptr %ptradd4, align 2, !dbg !1773
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1773
  store i16 0, ptr %ptradd5, align 2, !dbg !1773
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !1773
  store i16 0, ptr %ptradd6, align 2, !dbg !1773
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !1775
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 8, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 8), !dbg !1778
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %5, ptr align 2 %return_value, i32 8, i1 false), !dbg !1779
  ret void, !dbg !1779

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1767
  call void %11(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 103), !dbg !1767
  unreachable, !dbg !1767

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1770
  call void %12(ptr @.panic_msg.17, i64 45, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 105), !dbg !1770
  unreachable, !dbg !1770
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc16Random.next_short(ptr %0) #0 comdat !dbg !1780 {
entry:
  %seed = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %self = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !1783
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1783
  br i1 %2, label %panic, label %checkok, !dbg !1783

checkok:                                          ; preds = %entry
  store ptr %0, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !1784, metadata !DIExpression()), !dbg !1785
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1786, metadata !DIExpression()), !dbg !1787
  %3 = load ptr, ptr %seed, align 8, !dbg !1788
  store ptr %3, ptr %s, align 8, !dbg !1788
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1789, metadata !DIExpression()), !dbg !1790
  %4 = load ptr, ptr %s, align 8, !dbg !1791
  %5 = load i16, ptr %4, align 2, !dbg !1792
  %zext = zext i16 %5 to i32, !dbg !1792
  %6 = load ptr, ptr %s, align 8, !dbg !1793
  %ptradd = getelementptr inbounds i8, ptr %6, i64 2, !dbg !1794
  %7 = load i16, ptr %ptradd, align 2, !dbg !1794
  %zext1 = zext i16 %7 to i32, !dbg !1794
  %add = add i32 %zext, %zext1, !dbg !1791
  %8 = load ptr, ptr %s, align 8, !dbg !1795
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 6, !dbg !1796
  %9 = load i16, ptr %ptradd2, align 2, !dbg !1796
  %zext3 = zext i16 %9 to i32, !dbg !1796
  %add4 = add i32 %add, %zext3, !dbg !1791
  %trunc = trunc i32 %add4 to i16, !dbg !1791
  store i16 %trunc, ptr %result, align 2, !dbg !1791
  %10 = load ptr, ptr %s, align 8, !dbg !1797
  %11 = load ptr, ptr %s, align 8, !dbg !1798
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 2, !dbg !1799
  %12 = load i16, ptr %ptradd5, align 2, !dbg !1799
  %zext6 = zext i16 %12 to i32, !dbg !1799
  %13 = load ptr, ptr %s, align 8, !dbg !1800
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 2, !dbg !1801
  %14 = load i16, ptr %ptradd7, align 2, !dbg !1801
  %zext8 = zext i16 %14 to i32, !dbg !1801
  %lshr = lshr i32 %zext8, 2, !dbg !1800
  %15 = freeze i32 %lshr, !dbg !1800
  %xor = xor i32 %zext6, %15, !dbg !1798
  %trunc9 = trunc i32 %xor to i16, !dbg !1798
  store i16 %trunc9, ptr %10, align 2, !dbg !1798
  %16 = load ptr, ptr %s, align 8, !dbg !1802
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 2, !dbg !1803
  %17 = load ptr, ptr %s, align 8, !dbg !1804
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 4, !dbg !1805
  %18 = load i16, ptr %ptradd11, align 2, !dbg !1805
  %zext12 = zext i16 %18 to i32, !dbg !1805
  %19 = load ptr, ptr %s, align 8, !dbg !1806
  %ptradd13 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !1807
  %20 = load i16, ptr %ptradd13, align 2, !dbg !1807
  %zext14 = zext i16 %20 to i32, !dbg !1807
  %shl = shl i32 %zext14, 3, !dbg !1806
  %21 = freeze i32 %shl, !dbg !1806
  %add15 = add i32 %zext12, %21, !dbg !1804
  %trunc16 = trunc i32 %add15 to i16, !dbg !1804
  store i16 %trunc16, ptr %ptradd10, align 2, !dbg !1804
  %22 = load ptr, ptr %s, align 8, !dbg !1808
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !1809
  %23 = load ptr, ptr %s, align 8, !dbg !1810
  %ptradd18 = getelementptr inbounds i8, ptr %23, i64 4, !dbg !1811
  %24 = load i16, ptr %ptradd18, align 2
  store i16 %24, ptr %self, align 2
  store i16 12, ptr %shift, align 2
  %25 = load i16, ptr %self, align 2, !dbg !1812
  %26 = load i16, ptr %self, align 2, !dbg !1814
  %27 = load i16, ptr %shift, align 2, !dbg !1815
  %28 = call i16 @llvm.fshr.i16(i16 %25, i16 %26, i16 %27), !dbg !1815
  %zext19 = zext i16 %28 to i32, !dbg !1815
  %29 = load i16, ptr %result, align 2, !dbg !1816
  %zext20 = zext i16 %29 to i32, !dbg !1816
  %add21 = add i32 %zext19, %zext20, !dbg !1810
  %trunc22 = trunc i32 %add21 to i16, !dbg !1810
  store i16 %trunc22, ptr %ptradd17, align 2, !dbg !1810
  %30 = load ptr, ptr %s, align 8, !dbg !1817
  %ptradd23 = getelementptr inbounds i8, ptr %30, i64 6, !dbg !1818
  %31 = load i16, ptr %ptradd23, align 2, !dbg !1818
  %add24 = add i16 %31, -25033, !dbg !1817
  store i16 %add24, ptr %ptradd23, align 2, !dbg !1817
  %32 = load i16, ptr %result, align 2, !dbg !1819
  ret i16 %32, !dbg !1819

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1785
  call void %33(ptr @.panic_msg.86, i64 62, ptr @.file.75, i64 11, ptr @.func.29, i64 10, i32 109), !dbg !1785
  unreachable, !dbg !1785
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1820 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1821
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1821
  br i1 %4, label %panic, label %checkok, !dbg !1821

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1822, metadata !DIExpression()), !dbg !1823
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1824, metadata !DIExpression()), !dbg !1825
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1826
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1826
  %lt = icmp ult i64 0, %5, !dbg !1826
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1826

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1826
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.75, i64 11, ptr @.func.20, i64 10, i32 121), !dbg !1826
  unreachable, !dbg !1826

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1828, metadata !DIExpression()), !dbg !1830
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !1831
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1831
  store i64 %7, ptr %len, align 8, !dbg !1831
  br label %loop.cond, !dbg !1832

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !1833
  %lt4 = icmp ult i64 0, %8, !dbg !1833
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !1833

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1835, metadata !DIExpression()), !dbg !1837
  %9 = load ptr, ptr %self, align 8, !dbg !1838
  %10 = call i16 @std.math.random.Sfc16Random.next_short(ptr %9), !dbg !1839
  store i16 %10, ptr %value, align 2, !dbg !1839
  %11 = load i64, ptr %len, align 8, !dbg !1840
  %le = icmp ule i64 %11, 2, !dbg !1840
  br i1 %le, label %if.then, label %if.exit, !dbg !1840

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1841
  %add = add i64 0, %13, !dbg !1841
  %size = sub i64 %add, 0, !dbg !1841
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1841
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1841
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !1843
  %17 = extractvalue %"char[]" %16, 0, !dbg !1843
  %18 = extractvalue %"char[]" %16, 1, !dbg !1844
  %gt = icmp ugt i64 0, %18, !dbg !1844
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1844
  br i1 %19, label %panic5, label %checkok9, !dbg !1844

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !1843
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1843
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !1843
  %22 = extractvalue %"char[]" %21, 0, !dbg !1843
  %23 = extractvalue %"char[]" %15, 0, !dbg !1843
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !1843
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1843
  br label %expr_block.exit, !dbg !1845

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !1846
  %32 = extractvalue %"char[]" %31, 0, !dbg !1846
  %33 = extractvalue %"char[]" %31, 1, !dbg !1846
  %gt24 = icmp sgt i64 0, %33, !dbg !1846
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !1846
  br i1 %34, label %panic25, label %checkok32, !dbg !1846

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 2, !dbg !1846
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !1846
  br i1 %35, label %panic34, label %checkok41, !dbg !1846

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1846
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !1846
  %38 = extractvalue %"char[]" %37, 0, !dbg !1846
  %39 = extractvalue %"char[]" %30, 0, !dbg !1846
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !1846
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1846
  %44 = load i64, ptr %len, align 8, !dbg !1847
  %sub = sub i64 %44, 2, !dbg !1847
  store i64 %sub, ptr %len, align 8, !dbg !1847
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !1848
  %46 = extractvalue %"char[]" %45, 0, !dbg !1848
  %47 = extractvalue %"char[]" %45, 1, !dbg !1849
  %gt55 = icmp ugt i64 2, %47, !dbg !1849
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !1849
  br i1 %48, label %panic56, label %checkok63, !dbg !1849

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 2, !dbg !1848
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !1848
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !1848
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !1848
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !1848
  br label %loop.cond, !dbg !1848

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.87, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1850
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1850
  %hi = load i64, ptr %ptradd66, align 8, !dbg !1850
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.88, i64 11, ptr @.str.89, i64 22, i32 123, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !1853
  unreachable, !dbg !1854

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !1854

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1823
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.20, i64 10, i32 123), !dbg !1823
  unreachable, !dbg !1823

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1843
  unreachable, !dbg !1843

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !1843
  unreachable, !dbg !1843

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !1846
  unreachable, !dbg !1846

panic34:                                          ; preds = %checkok32
  store i64 1, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !1846
  unreachable, !dbg !1846

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !1846
  unreachable, !dbg !1846

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !1848
  unreachable, !dbg !1848
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc16Random.next_int128(ptr %0) #0 comdat !dbg !1855 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1858
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1858
  br i1 %2, label %panic, label %checkok, !dbg !1858

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1859, metadata !DIExpression()), !dbg !1860
  %3 = load ptr, ptr %self, align 8, !dbg !1861
  %4 = call i64 @std.math.random.Sfc16Random.next_long(ptr %3), !dbg !1863
  %zext = zext i64 %4 to i128, !dbg !1863
  %shl = shl i128 %zext, 64, !dbg !1863
  %5 = freeze i128 %shl, !dbg !1863
  %6 = load ptr, ptr %self, align 8, !dbg !1861
  %7 = call i64 @std.math.random.Sfc16Random.next_long(ptr %6), !dbg !1864
  %zext1 = zext i64 %7 to i128, !dbg !1864
  %add = add i128 %5, %zext1, !dbg !1863
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1860
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.27, i64 11, i32 124), !dbg !1860
  unreachable, !dbg !1860
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc16Random.next_long(ptr %0) #0 comdat !dbg !1865 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1868
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1868
  br i1 %2, label %panic, label %checkok, !dbg !1868

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1869, metadata !DIExpression()), !dbg !1870
  %3 = load ptr, ptr %self, align 8, !dbg !1871
  %4 = call i32 @std.math.random.Sfc16Random.next_int(ptr %3), !dbg !1873
  %zext = zext i32 %4 to i64, !dbg !1873
  %shl = shl i64 %zext, 32, !dbg !1873
  %5 = freeze i64 %shl, !dbg !1873
  %6 = load ptr, ptr %self, align 8, !dbg !1871
  %7 = call i32 @std.math.random.Sfc16Random.next_int(ptr %6), !dbg !1874
  %zext1 = zext i32 %7 to i64, !dbg !1874
  %add = add i64 %5, %zext1, !dbg !1873
  ret i64 %add, !dbg !1873

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1870
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.18, i64 9, i32 125), !dbg !1870
  unreachable, !dbg !1870
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc16Random.next_int(ptr %0) #0 comdat !dbg !1875 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1878
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1878
  br i1 %2, label %panic, label %checkok, !dbg !1878

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1879, metadata !DIExpression()), !dbg !1880
  %3 = load ptr, ptr %self, align 8, !dbg !1881
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !1883
  %zext = zext i16 %4 to i32, !dbg !1883
  %shl = shl i32 %zext, 16, !dbg !1883
  %5 = freeze i32 %shl, !dbg !1883
  %6 = load ptr, ptr %self, align 8, !dbg !1881
  %7 = call i16 @std.math.random.Sfc16Random.next_short(ptr %6), !dbg !1884
  %zext1 = zext i16 %7 to i32, !dbg !1884
  %add = add i32 %5, %zext1, !dbg !1883
  ret i32 %add, !dbg !1883

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1880
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.28, i64 8, i32 126), !dbg !1880
  unreachable, !dbg !1880
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc16Random.next_byte(ptr %0) #0 comdat !dbg !1885 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1888
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1888
  br i1 %2, label %panic, label %checkok, !dbg !1888

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1889, metadata !DIExpression()), !dbg !1890
  %3 = load ptr, ptr %self, align 8, !dbg !1891
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !1892
  %trunc = trunc i16 %4 to i8, !dbg !1892
  ret i8 %trunc, !dbg !1892

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1890
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.30, i64 9, i32 127), !dbg !1890
  unreachable, !dbg !1890
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc8Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1893 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !1898
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1898
  br i1 %4, label %panic, label %checkok, !dbg !1898

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1899, metadata !DIExpression()), !dbg !1900
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1901, metadata !DIExpression()), !dbg !1902
  %5 = load ptr, ptr %self, align 8, !dbg !1903
  %checknull = icmp eq ptr %5, null, !dbg !1903
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1903
  br i1 %6, label %panic1, label %checkok2, !dbg !1903

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1904, metadata !DIExpression()), !dbg !1906
  store i8 0, ptr %return_value, align 1, !dbg !1906
  %ptradd4 = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !1906
  store i8 0, ptr %ptradd4, align 1, !dbg !1906
  %ptradd5 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1906
  store i8 0, ptr %ptradd5, align 1, !dbg !1906
  %ptradd6 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !1906
  store i8 0, ptr %ptradd6, align 1, !dbg !1906
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !1908
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 4, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 4), !dbg !1911
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %5, ptr align 1 %return_value, i32 4, i1 false), !dbg !1912
  ret void, !dbg !1912

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1900
  call void %11(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 134), !dbg !1900
  unreachable, !dbg !1900

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1903
  call void %12(ptr @.panic_msg.17, i64 45, ptr @.file.75, i64 11, ptr @.func.16, i64 8, i32 136), !dbg !1903
  unreachable, !dbg !1903
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Sfc8Random.next_byte(ptr %0) #0 comdat !dbg !1913 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %self19 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !1916
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1916
  br i1 %2, label %panic, label %checkok, !dbg !1916

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1917, metadata !DIExpression()), !dbg !1918
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1919, metadata !DIExpression()), !dbg !1920
  %3 = load ptr, ptr %self, align 8, !dbg !1921
  store ptr %3, ptr %s, align 8, !dbg !1921
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1922, metadata !DIExpression()), !dbg !1923
  %4 = load ptr, ptr %s, align 8, !dbg !1924
  %5 = load i8, ptr %4, align 1, !dbg !1925
  %zext = zext i8 %5 to i32, !dbg !1925
  %6 = load ptr, ptr %s, align 8, !dbg !1926
  %ptradd = getelementptr inbounds i8, ptr %6, i64 1, !dbg !1927
  %7 = load i8, ptr %ptradd, align 1, !dbg !1927
  %zext1 = zext i8 %7 to i32, !dbg !1927
  %add = add i32 %zext, %zext1, !dbg !1924
  %8 = load ptr, ptr %s, align 8, !dbg !1928
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 3, !dbg !1929
  %9 = load i8, ptr %ptradd2, align 1, !dbg !1929
  %zext3 = zext i8 %9 to i32, !dbg !1929
  %add4 = add i32 %add, %zext3, !dbg !1924
  %trunc = trunc i32 %add4 to i8, !dbg !1924
  store i8 %trunc, ptr %result, align 1, !dbg !1924
  %10 = load ptr, ptr %s, align 8, !dbg !1930
  %11 = load ptr, ptr %s, align 8, !dbg !1931
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 1, !dbg !1932
  %12 = load i8, ptr %ptradd5, align 1, !dbg !1932
  %zext6 = zext i8 %12 to i32, !dbg !1932
  %13 = load ptr, ptr %s, align 8, !dbg !1933
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 1, !dbg !1934
  %14 = load i8, ptr %ptradd7, align 1, !dbg !1934
  %zext8 = zext i8 %14 to i32, !dbg !1934
  %lshr = lshr i32 %zext8, 1, !dbg !1933
  %15 = freeze i32 %lshr, !dbg !1933
  %xor = xor i32 %zext6, %15, !dbg !1931
  %trunc9 = trunc i32 %xor to i8, !dbg !1931
  store i8 %trunc9, ptr %10, align 1, !dbg !1931
  %16 = load ptr, ptr %s, align 8, !dbg !1935
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 1, !dbg !1936
  %17 = load ptr, ptr %s, align 8, !dbg !1937
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 2, !dbg !1938
  %18 = load i8, ptr %ptradd11, align 1, !dbg !1938
  %zext12 = zext i8 %18 to i32, !dbg !1938
  %19 = load ptr, ptr %s, align 8, !dbg !1939
  %ptradd13 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !1940
  %20 = load i8, ptr %ptradd13, align 1, !dbg !1940
  %zext14 = zext i8 %20 to i32, !dbg !1940
  %shl = shl i32 %zext14, 2, !dbg !1939
  %21 = freeze i32 %shl, !dbg !1939
  %add15 = add i32 %zext12, %21, !dbg !1937
  %trunc16 = trunc i32 %add15 to i8, !dbg !1937
  store i8 %trunc16, ptr %ptradd10, align 1, !dbg !1937
  %22 = load ptr, ptr %s, align 8, !dbg !1941
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !1942
  %23 = load ptr, ptr %s, align 8, !dbg !1943
  %ptradd18 = getelementptr inbounds i8, ptr %23, i64 2, !dbg !1944
  %24 = load i8, ptr %ptradd18, align 1
  store i8 %24, ptr %self19, align 1
  store i8 3, ptr %shift, align 1
  %25 = load i8, ptr %self19, align 1, !dbg !1945
  %26 = load i8, ptr %self19, align 1, !dbg !1947
  %27 = load i8, ptr %shift, align 1, !dbg !1948
  %28 = call i8 @llvm.fshr.i8(i8 %25, i8 %26, i8 %27), !dbg !1948
  %zext20 = zext i8 %28 to i32, !dbg !1948
  %29 = load i8, ptr %result, align 1, !dbg !1949
  %zext21 = zext i8 %29 to i32, !dbg !1949
  %add22 = add i32 %zext20, %zext21, !dbg !1943
  %trunc23 = trunc i32 %add22 to i8, !dbg !1943
  store i8 %trunc23, ptr %ptradd17, align 1, !dbg !1943
  %30 = load ptr, ptr %s, align 8, !dbg !1950
  %ptradd24 = getelementptr inbounds i8, ptr %30, i64 3, !dbg !1951
  %31 = load i8, ptr %ptradd24, align 1, !dbg !1951
  %add25 = add i8 %31, -97, !dbg !1950
  store i8 %add25, ptr %ptradd24, align 1, !dbg !1950
  %32 = load i8, ptr %result, align 1, !dbg !1952
  ret i8 %32, !dbg !1952

panic:                                            ; preds = %entry
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1918
  call void %33(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.30, i64 9, i32 139), !dbg !1918
  unreachable, !dbg !1918
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Sfc8Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !1953 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca ptr, align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !1954
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1954
  br i1 %4, label %panic, label %checkok, !dbg !1954

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1955, metadata !DIExpression()), !dbg !1956
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1957, metadata !DIExpression()), !dbg !1958
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1959, metadata !DIExpression()), !dbg !1961
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !1962
  %5 = load i64, ptr %ptradd2, align 8, !dbg !1962
  store i64 %5, ptr %len, align 8, !dbg !1962
  br label %loop.cond, !dbg !1963

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !1964
  %lt = icmp ult i64 0, %6, !dbg !1964
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1964

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1966, metadata !DIExpression()), !dbg !1968
  %7 = load ptr, ptr %self, align 8, !dbg !1969
  %8 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %7), !dbg !1970
  store i8 %8, ptr %value, align 1, !dbg !1970
  %9 = load i64, ptr %len, align 8, !dbg !1971
  %le = icmp ule i64 %9, 1, !dbg !1971
  br i1 %le, label %if.then, label %if.exit, !dbg !1971

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !1972
  %add = add i64 0, %11, !dbg !1972
  %size = sub i64 %add, 0, !dbg !1972
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !1972
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !1972
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !1974
  %15 = extractvalue %"char[]" %14, 0, !dbg !1974
  %16 = extractvalue %"char[]" %14, 1, !dbg !1975
  %gt = icmp ugt i64 0, %16, !dbg !1975
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1975
  br i1 %17, label %panic3, label %checkok7, !dbg !1975

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !1974
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !1974
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !1974
  %20 = extractvalue %"char[]" %19, 0, !dbg !1974
  %21 = extractvalue %"char[]" %13, 0, !dbg !1974
  store %"char[]" %13, ptr %taddr9, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %taddr9, i64 8
  %22 = load i64, ptr %ptradd10, align 8
  store %"char[]" %19, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %23 = load i64, ptr %ptradd12, align 8
  %neq = icmp ne i64 %23, %22
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %24, label %panic13, label %checkok20

checkok20:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !1974
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !1974
  br label %expr_block.exit, !dbg !1976

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr21, align 8
  %26 = load ptr, ptr %taddr21, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !1977
  %30 = extractvalue %"char[]" %29, 0, !dbg !1977
  %31 = extractvalue %"char[]" %29, 1, !dbg !1977
  %gt22 = icmp sgt i64 0, %31, !dbg !1977
  %32 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !1977
  br i1 %32, label %panic23, label %checkok30, !dbg !1977

checkok30:                                        ; preds = %if.exit
  %lt31 = icmp slt i64 %31, 1, !dbg !1977
  %33 = call i1 @llvm.expect.i1(i1 %lt31, i1 false), !dbg !1977
  br i1 %33, label %panic32, label %checkok39, !dbg !1977

checkok39:                                        ; preds = %checkok30
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !1977
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !1977
  %36 = extractvalue %"char[]" %35, 0, !dbg !1977
  %37 = extractvalue %"char[]" %28, 0, !dbg !1977
  store %"char[]" %28, ptr %taddr40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %taddr40, i64 8
  %38 = load i64, ptr %ptradd41, align 8
  store %"char[]" %35, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %39 = load i64, ptr %ptradd43, align 8
  %neq44 = icmp ne i64 %39, %38
  %40 = call i1 @llvm.expect.i1(i1 %neq44, i1 false)
  br i1 %40, label %panic45, label %checkok52

checkok52:                                        ; preds = %checkok39
  %41 = mul i64 %38, 1, !dbg !1977
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !1977
  %42 = load i64, ptr %len, align 8, !dbg !1978
  %sub = sub i64 %42, 1, !dbg !1978
  store i64 %sub, ptr %len, align 8, !dbg !1978
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !1979
  %44 = extractvalue %"char[]" %43, 0, !dbg !1979
  %45 = extractvalue %"char[]" %43, 1, !dbg !1980
  %gt53 = icmp ugt i64 1, %45, !dbg !1980
  %46 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !1980
  br i1 %46, label %panic54, label %checkok61, !dbg !1980

checkok61:                                        ; preds = %checkok52
  %size62 = sub i64 %45, 1, !dbg !1979
  %ptradd63 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !1979
  %47 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !1979
  %48 = insertvalue %"char[]" %47, i64 %size62, 1, !dbg !1979
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !1979
  br label %loop.cond, !dbg !1979

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.90, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !1981
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1981
  %hi = load i64, ptr %ptradd64, align 8, !dbg !1981
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.91, i64 11, ptr @.str.92, i64 21, i32 150, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !1984
  unreachable, !dbg !1985

expr_block.exit:                                  ; preds = %checkok20
  ret void, !dbg !1985

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1956
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.20, i64 10, i32 150), !dbg !1956
  unreachable, !dbg !1956

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1974
  unreachable, !dbg !1974

panic13:                                          ; preds = %checkok7
  store i64 %23, ptr %taddr14, align 8
  %55 = insertvalue %any undef, ptr %taddr14, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr15, align 8
  %57 = insertvalue %any undef, ptr %taddr15, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %58, ptr %ptradd17, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !1974
  unreachable, !dbg !1974

panic23:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr24, align 8
  %60 = insertvalue %any undef, ptr %taddr24, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %62 = insertvalue %any undef, ptr %taddr25, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %63, ptr %ptradd27, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg29), !dbg !1977
  unreachable, !dbg !1977

panic32:                                          ; preds = %checkok30
  store i64 0, ptr %taddr33, align 8
  %65 = insertvalue %any undef, ptr %taddr33, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %68, ptr %ptradd36, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg38), !dbg !1977
  unreachable, !dbg !1977

panic45:                                          ; preds = %checkok39
  store i64 %39, ptr %taddr46, align 8
  %70 = insertvalue %any undef, ptr %taddr46, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr47, align 8
  %72 = insertvalue %any undef, ptr %taddr47, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %73, ptr %ptradd49, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg51), !dbg !1977
  unreachable, !dbg !1977

panic54:                                          ; preds = %checkok52
  store i64 %45, ptr %taddr55, align 8
  %75 = insertvalue %any undef, ptr %taddr55, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %77 = insertvalue %any undef, ptr %taddr56, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %78, ptr %ptradd58, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60), !dbg !1979
  unreachable, !dbg !1979
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Sfc8Random.next_int128(ptr %0) #0 comdat !dbg !1986 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !1989
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1989
  br i1 %2, label %panic, label %checkok, !dbg !1989

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1990, metadata !DIExpression()), !dbg !1991
  %3 = load ptr, ptr %self, align 8, !dbg !1992
  %4 = call i64 @std.math.random.Sfc8Random.next_long(ptr %3), !dbg !1994
  %zext = zext i64 %4 to i128, !dbg !1994
  %shl = shl i128 %zext, 64, !dbg !1994
  %5 = freeze i128 %shl, !dbg !1994
  %6 = load ptr, ptr %self, align 8, !dbg !1992
  %7 = call i64 @std.math.random.Sfc8Random.next_long(ptr %6), !dbg !1995
  %zext1 = zext i64 %7 to i128, !dbg !1995
  %add = add i128 %5, %zext1, !dbg !1994
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1991
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.27, i64 11, i32 151), !dbg !1991
  unreachable, !dbg !1991
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Sfc8Random.next_long(ptr %0) #0 comdat !dbg !1996 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1999
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1999
  br i1 %2, label %panic, label %checkok, !dbg !1999

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2000, metadata !DIExpression()), !dbg !2001
  %3 = load ptr, ptr %self, align 8, !dbg !2002
  %4 = call i32 @std.math.random.Sfc8Random.next_int(ptr %3), !dbg !2004
  %zext = zext i32 %4 to i64, !dbg !2004
  %shl = shl i64 %zext, 32, !dbg !2004
  %5 = freeze i64 %shl, !dbg !2004
  %6 = load ptr, ptr %self, align 8, !dbg !2002
  %7 = call i32 @std.math.random.Sfc8Random.next_int(ptr %6), !dbg !2005
  %zext1 = zext i32 %7 to i64, !dbg !2005
  %add = add i64 %5, %zext1, !dbg !2004
  ret i64 %add, !dbg !2004

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2001
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.18, i64 9, i32 152), !dbg !2001
  unreachable, !dbg !2001
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Sfc8Random.next_int(ptr %0) #0 comdat !dbg !2006 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2009
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2009
  br i1 %2, label %panic, label %checkok, !dbg !2009

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2010, metadata !DIExpression()), !dbg !2011
  %3 = load ptr, ptr %self, align 8, !dbg !2012
  %4 = call i16 @std.math.random.Sfc8Random.next_short(ptr %3), !dbg !2014
  %zext = zext i16 %4 to i32, !dbg !2014
  %shl = shl i32 %zext, 16, !dbg !2014
  %5 = freeze i32 %shl, !dbg !2014
  %6 = load ptr, ptr %self, align 8, !dbg !2012
  %7 = call i16 @std.math.random.Sfc8Random.next_short(ptr %6), !dbg !2015
  %zext1 = zext i16 %7 to i32, !dbg !2015
  %add = add i32 %5, %zext1, !dbg !2014
  ret i32 %add, !dbg !2014

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2011
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.28, i64 8, i32 153), !dbg !2011
  unreachable, !dbg !2011
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Sfc8Random.next_short(ptr %0) #0 comdat !dbg !2016 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2019
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2019
  br i1 %2, label %panic, label %checkok, !dbg !2019

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2020, metadata !DIExpression()), !dbg !2021
  %3 = load ptr, ptr %self, align 8, !dbg !2022
  %4 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %3), !dbg !2024
  %zext = zext i8 %4 to i16, !dbg !2024
  %zext1 = zext i16 %zext to i32, !dbg !2024
  %shl = shl i32 %zext1, 8, !dbg !2024
  %5 = freeze i32 %shl, !dbg !2024
  %6 = load ptr, ptr %self, align 8, !dbg !2022
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !2025
  %zext2 = zext i8 %7 to i32, !dbg !2025
  %add = add i32 %5, %zext2, !dbg !2024
  %trunc = trunc i32 %add to i16, !dbg !2024
  ret i16 %trunc, !dbg !2024

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2021
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.75, i64 11, ptr @.func.29, i64 10, i32 154), !dbg !2021
  unreachable, !dbg !2021
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.seeder(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !2026 {
entry:
  %input = alloca %"char[]", align 8
  %out_buffer = alloca %"char[]", align 8
  %out_chars = alloca i64, align 8
  %current = alloca ptr, align 8
  %mark = alloca i64, align 8
  %words = alloca %"ulong[]", align 8
  %elements = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %words_len_2 = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %varargslots32 = alloca [1 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca i64, align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %varargslots65 = alloca [2 x %any], align 16
  %indirectarg68 = alloca %"any[]", align 8
  %remaining = alloca i64, align 8
  %rest = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr81 = alloca i64, align 8
  %taddr82 = alloca i64, align 8
  %varargslots83 = alloca [2 x %any], align 16
  %indirectarg86 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %taddr97 = alloca i64, align 8
  %varargslots98 = alloca [1 x %any], align 16
  %indirectarg100 = alloca %"any[]", align 8
  %taddr104 = alloca i64, align 8
  %taddr105 = alloca i64, align 8
  %varargslots106 = alloca [2 x %any], align 16
  %indirectarg109 = alloca %"any[]", align 8
  %taddr117 = alloca i64, align 8
  %varargslots118 = alloca [1 x %any], align 16
  %indirectarg120 = alloca %"any[]", align 8
  %taddr124 = alloca i64, align 8
  %taddr125 = alloca i64, align 8
  %varargslots126 = alloca [2 x %any], align 16
  %indirectarg129 = alloca %"any[]", align 8
  %taddr135 = alloca i64, align 8
  %varargslots136 = alloca [1 x %any], align 16
  %indirectarg138 = alloca %"any[]", align 8
  %taddr142 = alloca i64, align 8
  %taddr143 = alloca i64, align 8
  %varargslots144 = alloca [2 x %any], align 16
  %indirectarg147 = alloca %"any[]", align 8
  %i153 = alloca i64, align 8
  %j158 = alloca i64, align 8
  %taddr166 = alloca i64, align 8
  %varargslots167 = alloca [1 x %any], align 16
  %indirectarg169 = alloca %"any[]", align 8
  %taddr173 = alloca i64, align 8
  %taddr174 = alloca i64, align 8
  %varargslots175 = alloca [2 x %any], align 16
  %indirectarg178 = alloca %"any[]", align 8
  %taddr190 = alloca i64, align 8
  %varargslots191 = alloca [1 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %taddr197 = alloca i64, align 8
  %taddr198 = alloca i64, align 8
  %varargslots199 = alloca [2 x %any], align 16
  %indirectarg202 = alloca %"any[]", align 8
  %taddr210 = alloca i64, align 8
  %varargslots211 = alloca [1 x %any], align 16
  %indirectarg213 = alloca %"any[]", align 8
  %taddr217 = alloca i64, align 8
  %taddr218 = alloca i64, align 8
  %varargslots219 = alloca [2 x %any], align 16
  %indirectarg222 = alloca %"any[]", align 8
  %taddr228 = alloca i64, align 8
  %varargslots229 = alloca [1 x %any], align 16
  %indirectarg231 = alloca %"any[]", align 8
  %taddr235 = alloca i64, align 8
  %taddr236 = alloca i64, align 8
  %varargslots237 = alloca [2 x %any], align 16
  %indirectarg240 = alloca %"any[]", align 8
  %i247 = alloca i64, align 8
  %j251 = alloca i64, align 8
  %taddr260 = alloca i64, align 8
  %taddr261 = alloca i64, align 8
  %varargslots262 = alloca [2 x %any], align 16
  %indirectarg265 = alloca %"any[]", align 8
  %taddr272 = alloca i64, align 8
  %taddr273 = alloca i64, align 8
  %varargslots274 = alloca [2 x %any], align 16
  %indirectarg277 = alloca %"any[]", align 8
  %taddr283 = alloca i64, align 8
  %taddr284 = alloca i64, align 8
  %varargslots285 = alloca [2 x %any], align 16
  %indirectarg288 = alloca %"any[]", align 8
  %taddr295 = alloca ptr, align 8
  %taddr300 = alloca i64, align 8
  %taddr301 = alloca i64, align 8
  %varargslots302 = alloca [2 x %any], align 16
  %indirectarg305 = alloca %"any[]", align 8
  %taddr308 = alloca %"char[]", align 8
  %taddr310 = alloca %"char[]", align 8
  %taddr313 = alloca i64, align 8
  %taddr314 = alloca i64, align 8
  %varargslots315 = alloca [2 x %any], align 16
  %indirectarg318 = alloca %"any[]", align 8
  store ptr %0, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !2029, metadata !DIExpression()), !dbg !2030
  store ptr %2, ptr %out_buffer, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %out_buffer, i64 8
  store i64 %3, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %out_buffer, metadata !2031, metadata !DIExpression()), !dbg !2032
  call void @llvm.dbg.declare(metadata ptr %out_chars, metadata !2033, metadata !DIExpression()), !dbg !2034
  %ptradd2 = getelementptr inbounds i8, ptr %out_buffer, i64 8, !dbg !2035
  %4 = load i64, ptr %ptradd2, align 8, !dbg !2035
  store i64 %4, ptr %out_chars, align 8, !dbg !2035
  call void @llvm.dbg.declare(metadata ptr %current, metadata !2036, metadata !DIExpression()), !dbg !2065
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2067
  %not = icmp eq ptr %5, null, !dbg !2067
  br i1 %not, label %if.then, label %if.exit, !dbg !2067

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !2071
  br label %if.exit, !dbg !2071

if.exit:                                          ; preds = %if.then, %entry
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2073
  store ptr %6, ptr %current, align 8, !dbg !2073
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !2074, metadata !DIExpression()), !dbg !2075
  %7 = load ptr, ptr %current, align 8, !dbg !2076
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !2076
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2076
  store i64 %8, ptr %mark, align 8, !dbg !2076
  call void @llvm.dbg.declare(metadata ptr %words, metadata !2077, metadata !DIExpression()), !dbg !2083
  %9 = load i64, ptr %out_chars, align 8, !dbg !2084
  %add = add i64 %9, 7, !dbg !2084
  %sdiv = sdiv i64 %add, 8, !dbg !2084
  store i64 %sdiv, ptr %elements, align 8
  %10 = load i64, ptr %elements, align 8, !dbg !2085
  %mul = mul i64 8, %10, !dbg !2088
  %11 = call ptr @std.core.mem.tmalloc(i64 %mul, i64 8) #5, !dbg !2089
  store ptr %11, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %elements, align 8, !dbg !2090
  %add4 = add i64 0, %13, !dbg !2090
  %size = sub i64 %add4, 0, !dbg !2090
  %14 = insertvalue %"ulong[]" undef, ptr %12, 0, !dbg !2090
  %15 = insertvalue %"ulong[]" %14, i64 %size, 1, !dbg !2090
  store %"ulong[]" %15, ptr %words, align 8, !dbg !2090
  %16 = load %"ulong[]", ptr %words, align 8, !dbg !2091
  %17 = extractvalue %"ulong[]" %16, 0, !dbg !2091
  %18 = extractvalue %"ulong[]" %16, 1, !dbg !2092
  %gt = icmp ugt i64 0, %18, !dbg !2092
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2092
  br i1 %19, label %panic, label %checkok, !dbg !2092

checkok:                                          ; preds = %if.exit
  br label %cond, !dbg !2091

cond:                                             ; preds = %assign, %checkok
  %20 = phi i64 [ 0, %checkok ], [ %add8, %assign ], !dbg !2091
  %lt = icmp ult i64 %20, %18, !dbg !2091
  br i1 %lt, label %assign, label %exit, !dbg !2091

assign:                                           ; preds = %cond
  %ptroffset = getelementptr inbounds [8 x i8], ptr %17, i64 %20, !dbg !2091
  store i64 -7046029254386353131, ptr %ptroffset, align 8, !dbg !2091
  %add8 = add i64 %20, 1, !dbg !2091
  br label %cond, !dbg !2091

exit:                                             ; preds = %cond
  call void @llvm.dbg.declare(metadata ptr %words_len_2, metadata !2093, metadata !DIExpression()), !dbg !2094
  %ptradd9 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2095
  %21 = load i64, ptr %ptradd9, align 8, !dbg !2095
  %mul10 = mul i64 %21, 2, !dbg !2095
  store i64 %mul10, ptr %words_len_2, align 8, !dbg !2095
  call void @llvm.dbg.declare(metadata ptr %i, metadata !2096, metadata !DIExpression()), !dbg !2098
  store i64 0, ptr %i, align 8, !dbg !2099
  br label %loop.cond, !dbg !2099

loop.cond:                                        ; preds = %checkok69, %exit
  %22 = load i64, ptr %i, align 8, !dbg !2100
  %ptradd11 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !2101
  %23 = load i64, ptr %ptradd11, align 8, !dbg !2101
  %sdiv12 = sdiv i64 %23, 8, !dbg !2101
  %gt13 = icmp sgt i64 %sdiv12, %22, !dbg !2100
  %check = icmp sge i64 %22, 0, !dbg !2100
  %siui-gt = and i1 %check, %gt13, !dbg !2100
  br i1 %siui-gt, label %loop.body, label %loop.exit, !dbg !2100

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %j, metadata !2102, metadata !DIExpression()), !dbg !2104
  %24 = load i64, ptr %i, align 8, !dbg !2105
  %ptradd14 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2106
  %25 = load i64, ptr %ptradd14, align 8, !dbg !2106
  %zero = icmp eq i64 %25, 0, !dbg !2105
  %26 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2105
  br i1 %26, label %panic15, label %checkok16, !dbg !2105

checkok16:                                        ; preds = %loop.body
  %umod = urem i64 %24, %25, !dbg !2105
  store i64 %umod, ptr %j, align 8, !dbg !2105
  %ptradd17 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2107
  %27 = load i64, ptr %ptradd17, align 8, !dbg !2107
  %28 = load ptr, ptr %words, align 8, !dbg !2107
  %29 = load i64, ptr %j, align 8, !dbg !2108
  %ge = icmp uge i64 %29, %27, !dbg !2108
  %30 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2108
  br i1 %30, label %panic18, label %checkok25, !dbg !2108

checkok25:                                        ; preds = %checkok16
  %ptroffset26 = getelementptr inbounds [8 x i8], ptr %28, i64 %29, !dbg !2108
  %31 = load i64, ptr %ptroffset26, align 8, !dbg !2108
  %ptradd27 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !2109
  %32 = load i64, ptr %ptradd27, align 8, !dbg !2109
  %33 = load ptr, ptr %input, align 8, !dbg !2109
  %34 = load i64, ptr %i, align 8, !dbg !2110
  %mul28 = mul i64 %34, 8, !dbg !2110
  %lt29 = icmp slt i64 %mul28, 0, !dbg !2110
  %35 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !2110
  br i1 %35, label %panic30, label %checkok35, !dbg !2110

checkok35:                                        ; preds = %checkok25
  %ge36 = icmp sge i64 %mul28, %32, !dbg !2110
  %36 = call i1 @llvm.expect.i1(i1 %ge36, i1 false), !dbg !2110
  br i1 %36, label %panic37, label %checkok44, !dbg !2110

checkok44:                                        ; preds = %checkok35
  %ptradd45 = getelementptr inbounds i8, ptr %33, i64 %mul28, !dbg !2110
  %checknull = icmp eq ptr %ptradd45, null, !dbg !2110
  %37 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2110
  br i1 %37, label %panic46, label %checkok47, !dbg !2110

checkok47:                                        ; preds = %checkok44
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %ptradd45, i32 8, i1 false)
  call void @llvm.dbg.declare(metadata ptr %x, metadata !2111, metadata !DIExpression()), !dbg !2113
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !2115
  %38 = load i64, ptr %x, align 8, !dbg !2116
  %mul48 = mul i64 %38, -3372029247567499371, !dbg !2114
  %sub = sub i64 %31, %mul48, !dbg !2107
  store i64 %sub, ptr %ptroffset26, align 8, !dbg !2107
  %ptradd49 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2117
  %39 = load i64, ptr %ptradd49, align 8, !dbg !2117
  %40 = load ptr, ptr %words, align 8, !dbg !2117
  %41 = load i64, ptr %j, align 8, !dbg !2118
  %ge50 = icmp uge i64 %41, %39, !dbg !2118
  %42 = call i1 @llvm.expect.i1(i1 %ge50, i1 false), !dbg !2118
  br i1 %42, label %panic51, label %checkok58, !dbg !2118

checkok58:                                        ; preds = %checkok47
  %ptroffset59 = getelementptr inbounds [8 x i8], ptr %40, i64 %41, !dbg !2118
  %43 = load i64, ptr %ptroffset59, align 8, !dbg !2118
  %ptradd60 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2119
  %44 = load i64, ptr %ptradd60, align 8, !dbg !2119
  %45 = load ptr, ptr %words, align 8, !dbg !2119
  %46 = load i64, ptr %j, align 8, !dbg !2120
  %ge61 = icmp uge i64 %46, %44, !dbg !2120
  %47 = call i1 @llvm.expect.i1(i1 %ge61, i1 false), !dbg !2120
  br i1 %47, label %panic62, label %checkok69, !dbg !2120

checkok69:                                        ; preds = %checkok58
  %ptroffset70 = getelementptr inbounds [8 x i8], ptr %45, i64 %46, !dbg !2120
  %48 = load i64, ptr %ptroffset70, align 8, !dbg !2120
  %lshr = lshr i64 %48, 25, !dbg !2119
  %49 = freeze i64 %lshr, !dbg !2119
  %xor = xor i64 %43, %49, !dbg !2117
  store i64 %xor, ptr %ptroffset59, align 8, !dbg !2117
  %50 = load i64, ptr %i, align 8, !dbg !2121
  %add71 = add i64 %50, 1, !dbg !2121
  store i64 %add71, ptr %i, align 8, !dbg !2121
  br label %loop.cond, !dbg !2121

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %remaining, metadata !2122, metadata !DIExpression()), !dbg !2123
  %ptradd72 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !2124
  %51 = load i64, ptr %ptradd72, align 8, !dbg !2124
  %ptradd73 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !2125
  %52 = load i64, ptr %ptradd73, align 8, !dbg !2125
  %sdiv74 = sdiv i64 %52, 8, !dbg !2125
  %mul75 = mul i64 %sdiv74, 8, !dbg !2125
  %sub76 = sub i64 %51, %mul75, !dbg !2124
  store i64 %sub76, ptr %remaining, align 8, !dbg !2124
  %53 = load i64, ptr %remaining, align 8, !dbg !2126
  %intbool = icmp ne i64 %53, 0, !dbg !2126
  br i1 %intbool, label %if.then77, label %if.exit152, !dbg !2126

if.then77:                                        ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %rest, metadata !2127, metadata !DIExpression()), !dbg !2129
  store i64 -1065810590584100411, ptr %rest, align 8, !dbg !2130
  store ptr %rest, ptr %dst, align 8
  %ptradd78 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !2131
  %54 = load i64, ptr %ptradd78, align 8, !dbg !2131
  %55 = load ptr, ptr %input, align 8, !dbg !2131
  %56 = load i64, ptr %remaining, align 8, !dbg !2132
  %57 = sub nuw i64 %54, %56, !dbg !2132
  %ge79 = icmp uge i64 %57, %54, !dbg !2132
  %58 = call i1 @llvm.expect.i1(i1 %ge79, i1 false), !dbg !2132
  br i1 %58, label %panic80, label %checkok87, !dbg !2132

checkok87:                                        ; preds = %if.then77
  %ptradd88 = getelementptr inbounds i8, ptr %55, i64 %57, !dbg !2132
  store ptr %ptradd88, ptr %src, align 8
  %59 = load i64, ptr %remaining, align 8
  store i64 %59, ptr %len, align 8
  %60 = load i64, ptr %len, align 8, !dbg !2133
  %eq = icmp eq i64 0, %60, !dbg !2133
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !2133

or.rhs:                                           ; preds = %checkok87
  %61 = load ptr, ptr %dst, align 8, !dbg !2137
  %62 = load i64, ptr %len, align 8, !dbg !2138
  %ptradd_any = getelementptr i8, ptr %61, i64 %62, !dbg !2138
  %63 = load ptr, ptr %src, align 8, !dbg !2139
  %le = icmp ule ptr %ptradd_any, %63, !dbg !2137
  br label %or.phi, !dbg !2137

or.phi:                                           ; preds = %or.rhs, %checkok87
  %val = phi i1 [ true, %checkok87 ], [ %le, %or.rhs ], !dbg !2137
  br i1 %val, label %or.phi92, label %or.rhs89, !dbg !2137

or.rhs89:                                         ; preds = %or.phi
  %64 = load ptr, ptr %src, align 8, !dbg !2140
  %65 = load i64, ptr %len, align 8, !dbg !2141
  %ptradd_any90 = getelementptr i8, ptr %64, i64 %65, !dbg !2141
  %66 = load ptr, ptr %dst, align 8, !dbg !2142
  %le91 = icmp ule ptr %ptradd_any90, %66, !dbg !2140
  br label %or.phi92, !dbg !2140

or.phi92:                                         ; preds = %or.rhs89, %or.phi
  %val93 = phi i1 [ true, %or.phi ], [ %le91, %or.rhs89 ], !dbg !2140
  br i1 %val93, label %assert_ok, label %assert_fail, !dbg !2140

assert_fail:                                      ; preds = %or.phi92
  %67 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2133
  call void %67(ptr @.panic_msg.103, i64 95, ptr @.file.104, i64 6, ptr @.func.98, i64 6, i32 309), !dbg !2133
  unreachable, !dbg !2133

assert_ok:                                        ; preds = %or.phi92
  %68 = load ptr, ptr %dst, align 8, !dbg !2143
  %69 = load ptr, ptr %src, align 8, !dbg !2144
  %70 = load i64, ptr %len, align 8, !dbg !2145
  call void @llvm.memcpy.p0.p0.i64(ptr %68, ptr %69, i64 %70, i1 false), !dbg !2146
  %ptradd94 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2147
  %71 = load i64, ptr %ptradd94, align 8, !dbg !2147
  %72 = load ptr, ptr %words, align 8, !dbg !2147
  %73 = sub nuw i64 %71, 1, !dbg !2148
  %lt95 = icmp slt i64 %73, 0, !dbg !2148
  %74 = call i1 @llvm.expect.i1(i1 %lt95, i1 false), !dbg !2148
  br i1 %74, label %panic96, label %checkok101, !dbg !2148

checkok101:                                       ; preds = %assert_ok
  %ge102 = icmp sge i64 %73, %71, !dbg !2148
  %75 = call i1 @llvm.expect.i1(i1 %ge102, i1 false), !dbg !2148
  br i1 %75, label %panic103, label %checkok110, !dbg !2148

checkok110:                                       ; preds = %checkok101
  %ptroffset111 = getelementptr inbounds [8 x i8], ptr %72, i64 %73, !dbg !2148
  %76 = load i64, ptr %ptroffset111, align 8, !dbg !2148
  %77 = load i64, ptr %rest, align 8, !dbg !2149
  %mul112 = mul i64 %77, -3372029247567499371, !dbg !2149
  %sub113 = sub i64 %76, %mul112, !dbg !2147
  store i64 %sub113, ptr %ptroffset111, align 8, !dbg !2147
  %ptradd114 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2150
  %78 = load i64, ptr %ptradd114, align 8, !dbg !2150
  %79 = load ptr, ptr %words, align 8, !dbg !2150
  %80 = sub nuw i64 %78, 1, !dbg !2151
  %lt115 = icmp slt i64 %80, 0, !dbg !2151
  %81 = call i1 @llvm.expect.i1(i1 %lt115, i1 false), !dbg !2151
  br i1 %81, label %panic116, label %checkok121, !dbg !2151

checkok121:                                       ; preds = %checkok110
  %ge122 = icmp sge i64 %80, %78, !dbg !2151
  %82 = call i1 @llvm.expect.i1(i1 %ge122, i1 false), !dbg !2151
  br i1 %82, label %panic123, label %checkok130, !dbg !2151

checkok130:                                       ; preds = %checkok121
  %ptroffset131 = getelementptr inbounds [8 x i8], ptr %79, i64 %80, !dbg !2151
  %83 = load i64, ptr %ptroffset131, align 8, !dbg !2151
  %ptradd132 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2152
  %84 = load i64, ptr %ptradd132, align 8, !dbg !2152
  %85 = load ptr, ptr %words, align 8, !dbg !2152
  %86 = sub nuw i64 %84, 1, !dbg !2153
  %lt133 = icmp slt i64 %86, 0, !dbg !2153
  %87 = call i1 @llvm.expect.i1(i1 %lt133, i1 false), !dbg !2153
  br i1 %87, label %panic134, label %checkok139, !dbg !2153

checkok139:                                       ; preds = %checkok130
  %ge140 = icmp sge i64 %86, %84, !dbg !2153
  %88 = call i1 @llvm.expect.i1(i1 %ge140, i1 false), !dbg !2153
  br i1 %88, label %panic141, label %checkok148, !dbg !2153

checkok148:                                       ; preds = %checkok139
  %ptroffset149 = getelementptr inbounds [8 x i8], ptr %85, i64 %86, !dbg !2153
  %89 = load i64, ptr %ptroffset149, align 8, !dbg !2153
  %lshr150 = lshr i64 %89, 25, !dbg !2152
  %90 = freeze i64 %lshr150, !dbg !2152
  %xor151 = xor i64 %83, %90, !dbg !2150
  store i64 %xor151, ptr %ptroffset131, align 8, !dbg !2150
  br label %if.exit152, !dbg !2150

if.exit152:                                       ; preds = %checkok148, %loop.exit
  call void @llvm.dbg.declare(metadata ptr %i153, metadata !2154, metadata !DIExpression()), !dbg !2157
  %91 = load i64, ptr %words_len_2, align 8, !dbg !2158
  %sub154 = sub i64 %91, 1, !dbg !2158
  store i64 %sub154, ptr %i153, align 8, !dbg !2158
  br label %loop.cond155, !dbg !2158

loop.cond155:                                     ; preds = %checkok241, %if.exit152
  %92 = load i64, ptr %i153, align 8, !dbg !2159
  %ge156 = icmp sge i64 %92, 0, !dbg !2159
  br i1 %ge156, label %loop.body157, label %loop.exit246, !dbg !2159

loop.body157:                                     ; preds = %loop.cond155
  call void @llvm.dbg.declare(metadata ptr %j158, metadata !2160, metadata !DIExpression()), !dbg !2162
  %93 = load i64, ptr %i153, align 8, !dbg !2163
  %ptradd159 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2164
  %94 = load i64, ptr %ptradd159, align 8, !dbg !2164
  %zero160 = icmp eq i64 %94, 0, !dbg !2163
  %95 = call i1 @llvm.expect.i1(i1 %zero160, i1 false), !dbg !2163
  br i1 %95, label %panic161, label %checkok162, !dbg !2163

checkok162:                                       ; preds = %loop.body157
  %smod = srem i64 %93, %94, !dbg !2163
  store i64 %smod, ptr %j158, align 8, !dbg !2163
  %ptradd163 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2165
  %96 = load i64, ptr %ptradd163, align 8, !dbg !2165
  %97 = load ptr, ptr %words, align 8, !dbg !2165
  %98 = load i64, ptr %j158, align 8, !dbg !2166
  %lt164 = icmp slt i64 %98, 0, !dbg !2166
  %99 = call i1 @llvm.expect.i1(i1 %lt164, i1 false), !dbg !2166
  br i1 %99, label %panic165, label %checkok170, !dbg !2166

checkok170:                                       ; preds = %checkok162
  %ge171 = icmp sge i64 %98, %96, !dbg !2166
  %100 = call i1 @llvm.expect.i1(i1 %ge171, i1 false), !dbg !2166
  br i1 %100, label %panic172, label %checkok179, !dbg !2166

checkok179:                                       ; preds = %checkok170
  %ptroffset180 = getelementptr inbounds [8 x i8], ptr %97, i64 %98, !dbg !2166
  %101 = load i64, ptr %ptroffset180, align 8, !dbg !2166
  %ptradd181 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2167
  %102 = load i64, ptr %ptradd181, align 8, !dbg !2167
  %103 = load ptr, ptr %words, align 8, !dbg !2167
  %104 = load i64, ptr %i153, align 8, !dbg !2168
  %add182 = add i64 %104, 1, !dbg !2168
  %ptradd183 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2169
  %105 = load i64, ptr %ptradd183, align 8, !dbg !2169
  %zero184 = icmp eq i64 %105, 0, !dbg !2168
  %106 = call i1 @llvm.expect.i1(i1 %zero184, i1 false), !dbg !2168
  br i1 %106, label %panic185, label %checkok186, !dbg !2168

checkok186:                                       ; preds = %checkok179
  %smod187 = srem i64 %add182, %105, !dbg !2168
  %lt188 = icmp slt i64 %smod187, 0, !dbg !2168
  %107 = call i1 @llvm.expect.i1(i1 %lt188, i1 false), !dbg !2168
  br i1 %107, label %panic189, label %checkok194, !dbg !2168

checkok194:                                       ; preds = %checkok186
  %ge195 = icmp sge i64 %smod187, %102, !dbg !2168
  %108 = call i1 @llvm.expect.i1(i1 %ge195, i1 false), !dbg !2168
  br i1 %108, label %panic196, label %checkok203, !dbg !2168

checkok203:                                       ; preds = %checkok194
  %ptroffset204 = getelementptr inbounds [8 x i8], ptr %103, i64 %smod187, !dbg !2168
  %109 = load i64, ptr %ptroffset204, align 8, !dbg !2168
  %mul205 = mul i64 %109, -3372029247567499371, !dbg !2167
  %sub206 = sub i64 %101, %mul205, !dbg !2165
  store i64 %sub206, ptr %ptroffset180, align 8, !dbg !2165
  %ptradd207 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2170
  %110 = load i64, ptr %ptradd207, align 8, !dbg !2170
  %111 = load ptr, ptr %words, align 8, !dbg !2170
  %112 = load i64, ptr %j158, align 8, !dbg !2171
  %lt208 = icmp slt i64 %112, 0, !dbg !2171
  %113 = call i1 @llvm.expect.i1(i1 %lt208, i1 false), !dbg !2171
  br i1 %113, label %panic209, label %checkok214, !dbg !2171

checkok214:                                       ; preds = %checkok203
  %ge215 = icmp sge i64 %112, %110, !dbg !2171
  %114 = call i1 @llvm.expect.i1(i1 %ge215, i1 false), !dbg !2171
  br i1 %114, label %panic216, label %checkok223, !dbg !2171

checkok223:                                       ; preds = %checkok214
  %ptroffset224 = getelementptr inbounds [8 x i8], ptr %111, i64 %112, !dbg !2171
  %115 = load i64, ptr %ptroffset224, align 8, !dbg !2171
  %ptradd225 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2172
  %116 = load i64, ptr %ptradd225, align 8, !dbg !2172
  %117 = load ptr, ptr %words, align 8, !dbg !2172
  %118 = load i64, ptr %j158, align 8, !dbg !2173
  %lt226 = icmp slt i64 %118, 0, !dbg !2173
  %119 = call i1 @llvm.expect.i1(i1 %lt226, i1 false), !dbg !2173
  br i1 %119, label %panic227, label %checkok232, !dbg !2173

checkok232:                                       ; preds = %checkok223
  %ge233 = icmp sge i64 %118, %116, !dbg !2173
  %120 = call i1 @llvm.expect.i1(i1 %ge233, i1 false), !dbg !2173
  br i1 %120, label %panic234, label %checkok241, !dbg !2173

checkok241:                                       ; preds = %checkok232
  %ptroffset242 = getelementptr inbounds [8 x i8], ptr %117, i64 %118, !dbg !2173
  %121 = load i64, ptr %ptroffset242, align 8, !dbg !2173
  %lshr243 = lshr i64 %121, 25, !dbg !2172
  %122 = freeze i64 %lshr243, !dbg !2172
  %xor244 = xor i64 %115, %122, !dbg !2170
  store i64 %xor244, ptr %ptroffset224, align 8, !dbg !2170
  %123 = load i64, ptr %i153, align 8, !dbg !2174
  %sub245 = sub i64 %123, 1, !dbg !2174
  store i64 %sub245, ptr %i153, align 8, !dbg !2174
  br label %loop.cond155, !dbg !2174

loop.exit246:                                     ; preds = %loop.cond155
  call void @llvm.dbg.declare(metadata ptr %i247, metadata !2175, metadata !DIExpression()), !dbg !2177
  store i64 0, ptr %i247, align 8, !dbg !2178
  br label %loop.cond248, !dbg !2178

loop.cond248:                                     ; preds = %checkok289, %loop.exit246
  %124 = load i64, ptr %i247, align 8, !dbg !2179
  %125 = load i64, ptr %words_len_2, align 8, !dbg !2180
  %lt249 = icmp ult i64 %124, %125, !dbg !2179
  br i1 %lt249, label %loop.body250, label %loop.exit294, !dbg !2179

loop.body250:                                     ; preds = %loop.cond248
  call void @llvm.dbg.declare(metadata ptr %j251, metadata !2181, metadata !DIExpression()), !dbg !2183
  %126 = load i64, ptr %i247, align 8, !dbg !2184
  %ptradd252 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2185
  %127 = load i64, ptr %ptradd252, align 8, !dbg !2185
  %zero253 = icmp eq i64 %127, 0, !dbg !2184
  %128 = call i1 @llvm.expect.i1(i1 %zero253, i1 false), !dbg !2184
  br i1 %128, label %panic254, label %checkok255, !dbg !2184

checkok255:                                       ; preds = %loop.body250
  %umod256 = urem i64 %126, %127, !dbg !2184
  store i64 %umod256, ptr %j251, align 8, !dbg !2184
  %ptradd257 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2186
  %129 = load i64, ptr %ptradd257, align 8, !dbg !2186
  %130 = load ptr, ptr %words, align 8, !dbg !2186
  %131 = load i64, ptr %j251, align 8, !dbg !2187
  %ge258 = icmp uge i64 %131, %129, !dbg !2187
  %132 = call i1 @llvm.expect.i1(i1 %ge258, i1 false), !dbg !2187
  br i1 %132, label %panic259, label %checkok266, !dbg !2187

checkok266:                                       ; preds = %checkok255
  %ptroffset267 = getelementptr inbounds [8 x i8], ptr %130, i64 %131, !dbg !2187
  %133 = load i64, ptr %ptroffset267, align 8, !dbg !2187
  %mul268 = mul i64 %133, -1065810590584100411, !dbg !2186
  store i64 %mul268, ptr %ptroffset267, align 8, !dbg !2186
  %ptradd269 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2188
  %134 = load i64, ptr %ptradd269, align 8, !dbg !2188
  %135 = load ptr, ptr %words, align 8, !dbg !2188
  %136 = load i64, ptr %j251, align 8, !dbg !2189
  %ge270 = icmp uge i64 %136, %134, !dbg !2189
  %137 = call i1 @llvm.expect.i1(i1 %ge270, i1 false), !dbg !2189
  br i1 %137, label %panic271, label %checkok278, !dbg !2189

checkok278:                                       ; preds = %checkok266
  %ptroffset279 = getelementptr inbounds [8 x i8], ptr %135, i64 %136, !dbg !2189
  %138 = load i64, ptr %ptroffset279, align 8, !dbg !2189
  %ptradd280 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !2190
  %139 = load i64, ptr %ptradd280, align 8, !dbg !2190
  %140 = load ptr, ptr %words, align 8, !dbg !2190
  %141 = load i64, ptr %j251, align 8, !dbg !2191
  %ge281 = icmp uge i64 %141, %139, !dbg !2191
  %142 = call i1 @llvm.expect.i1(i1 %ge281, i1 false), !dbg !2191
  br i1 %142, label %panic282, label %checkok289, !dbg !2191

checkok289:                                       ; preds = %checkok278
  %ptroffset290 = getelementptr inbounds [8 x i8], ptr %140, i64 %141, !dbg !2191
  %143 = load i64, ptr %ptroffset290, align 8, !dbg !2191
  %lshr291 = lshr i64 %143, 25, !dbg !2190
  %144 = freeze i64 %lshr291, !dbg !2190
  %xor292 = xor i64 %138, %144, !dbg !2188
  store i64 %xor292, ptr %ptroffset279, align 8, !dbg !2188
  %145 = load i64, ptr %i247, align 8, !dbg !2192
  %add293 = add i64 %145, 1, !dbg !2192
  store i64 %add293, ptr %i247, align 8, !dbg !2192
  br label %loop.cond248, !dbg !2192

loop.exit294:                                     ; preds = %loop.cond248
  %146 = load ptr, ptr %words, align 8, !dbg !2193
  store ptr %146, ptr %taddr295, align 8
  %147 = load ptr, ptr %taddr295, align 8
  %148 = load i64, ptr %out_chars, align 8, !dbg !2194
  %add296 = add i64 0, %148, !dbg !2194
  %size297 = sub i64 %add296, 0, !dbg !2194
  %149 = insertvalue %"char[]" undef, ptr %147, 0, !dbg !2194
  %150 = insertvalue %"char[]" %149, i64 %size297, 1, !dbg !2194
  %151 = load %"char[]", ptr %out_buffer, align 8, !dbg !2195
  %152 = extractvalue %"char[]" %151, 0, !dbg !2195
  %153 = extractvalue %"char[]" %151, 1, !dbg !2196
  %gt298 = icmp ugt i64 0, %153, !dbg !2196
  %154 = call i1 @llvm.expect.i1(i1 %gt298, i1 false), !dbg !2196
  br i1 %154, label %panic299, label %checkok306, !dbg !2196

checkok306:                                       ; preds = %loop.exit294
  %size307 = sub i64 %153, 0, !dbg !2195
  %155 = insertvalue %"char[]" undef, ptr %152, 0, !dbg !2195
  %156 = insertvalue %"char[]" %155, i64 %size307, 1, !dbg !2195
  %157 = extractvalue %"char[]" %156, 0, !dbg !2195
  %158 = extractvalue %"char[]" %150, 0, !dbg !2195
  store %"char[]" %150, ptr %taddr308, align 8
  %ptradd309 = getelementptr inbounds i8, ptr %taddr308, i64 8
  %159 = load i64, ptr %ptradd309, align 8
  store %"char[]" %156, ptr %taddr310, align 8
  %ptradd311 = getelementptr inbounds i8, ptr %taddr310, i64 8
  %160 = load i64, ptr %ptradd311, align 8
  %neq = icmp ne i64 %160, %159
  %161 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %161, label %panic312, label %checkok319

checkok319:                                       ; preds = %checkok306
  %162 = mul i64 %159, 1, !dbg !2195
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %157, ptr align 1 %158, i64 %162, i1 false), !dbg !2195
  %163 = load ptr, ptr %current, align 8, !dbg !2197
  %164 = load i64, ptr %mark, align 8, !dbg !2197
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %163, i64 %164), !dbg !2199
  ret void, !dbg !2200

panic:                                            ; preds = %if.exit
  store i64 %18, ptr %taddr5, align 8
  %165 = insertvalue %any undef, ptr %taddr5, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %167 = insertvalue %any undef, ptr %taddr6, 0
  %168 = insertvalue %any %167, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %166, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %168, ptr %ptradd7, align 16
  %169 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %169, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 30, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2091
  unreachable, !dbg !2091

panic15:                                          ; preds = %loop.body
  %170 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2105
  call void %170(ptr @.panic_msg.99, i64 10, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 36), !dbg !2105
  unreachable, !dbg !2105

panic18:                                          ; preds = %checkok16
  store i64 %27, ptr %taddr19, align 8
  %171 = insertvalue %any undef, ptr %taddr19, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %29, ptr %taddr20, align 8
  %173 = insertvalue %any undef, ptr %taddr20, 0
  %174 = insertvalue %any %173, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %172, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %174, ptr %ptradd22, align 16
  %175 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %175, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 37, ptr byval(%"any[]") align 8 %indirectarg24), !dbg !2108
  unreachable, !dbg !2108

panic30:                                          ; preds = %checkok25
  store i64 %mul28, ptr %taddr31, align 8
  %176 = insertvalue %any undef, ptr %taddr31, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %177, ptr %varargslots32, align 16
  %178 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp33" = insertvalue %"any[]" %178, i64 1, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 38, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 37, ptr byval(%"any[]") align 8 %indirectarg34), !dbg !2110
  unreachable, !dbg !2110

panic37:                                          ; preds = %checkok35
  store i64 %32, ptr %taddr38, align 8
  %179 = insertvalue %any undef, ptr %taddr38, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %mul28, ptr %taddr39, align 8
  %181 = insertvalue %any undef, ptr %taddr39, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %180, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %182, ptr %ptradd41, align 16
  %183 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %183, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 37, ptr byval(%"any[]") align 8 %indirectarg43), !dbg !2110
  unreachable, !dbg !2110

panic46:                                          ; preds = %checkok44
  %184 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2201
  call void %184(ptr @.panic_msg.102, i64 63, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 37), !dbg !2201
  unreachable, !dbg !2201

panic51:                                          ; preds = %checkok47
  store i64 %39, ptr %taddr52, align 8
  %185 = insertvalue %any undef, ptr %taddr52, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr53, align 8
  %187 = insertvalue %any undef, ptr %taddr53, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %186, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %188, ptr %ptradd55, align 16
  %189 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 38, ptr byval(%"any[]") align 8 %indirectarg57), !dbg !2118
  unreachable, !dbg !2118

panic62:                                          ; preds = %checkok58
  store i64 %44, ptr %taddr63, align 8
  %190 = insertvalue %any undef, ptr %taddr63, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %46, ptr %taddr64, align 8
  %192 = insertvalue %any undef, ptr %taddr64, 0
  %193 = insertvalue %any %192, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %191, ptr %varargslots65, align 16
  %ptradd66 = getelementptr inbounds i8, ptr %varargslots65, i64 16
  store %any %193, ptr %ptradd66, align 16
  %194 = insertvalue %"any[]" undef, ptr %varargslots65, 0
  %"$$temp67" = insertvalue %"any[]" %194, i64 2, 1
  store %"any[]" %"$$temp67", ptr %indirectarg68, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 38, ptr byval(%"any[]") align 8 %indirectarg68), !dbg !2120
  unreachable, !dbg !2120

panic80:                                          ; preds = %if.then77
  store i64 %54, ptr %taddr81, align 8
  %195 = insertvalue %any undef, ptr %taddr81, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr82, align 8
  %197 = insertvalue %any undef, ptr %taddr82, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %196, ptr %varargslots83, align 16
  %ptradd84 = getelementptr inbounds i8, ptr %varargslots83, i64 16
  store %any %198, ptr %ptradd84, align 16
  %199 = insertvalue %"any[]" undef, ptr %varargslots83, 0
  %"$$temp85" = insertvalue %"any[]" %199, i64 2, 1
  store %"any[]" %"$$temp85", ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 46, ptr byval(%"any[]") align 8 %indirectarg86), !dbg !2132
  unreachable, !dbg !2132

panic96:                                          ; preds = %assert_ok
  store i64 %73, ptr %taddr97, align 8
  %200 = insertvalue %any undef, ptr %taddr97, 0
  %201 = insertvalue %any %200, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %201, ptr %varargslots98, align 16
  %202 = insertvalue %"any[]" undef, ptr %varargslots98, 0
  %"$$temp99" = insertvalue %"any[]" %202, i64 1, 1
  store %"any[]" %"$$temp99", ptr %indirectarg100, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 38, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 47, ptr byval(%"any[]") align 8 %indirectarg100), !dbg !2148
  unreachable, !dbg !2148

panic103:                                         ; preds = %checkok101
  store i64 %71, ptr %taddr104, align 8
  %203 = insertvalue %any undef, ptr %taddr104, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %73, ptr %taddr105, align 8
  %205 = insertvalue %any undef, ptr %taddr105, 0
  %206 = insertvalue %any %205, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %204, ptr %varargslots106, align 16
  %ptradd107 = getelementptr inbounds i8, ptr %varargslots106, i64 16
  store %any %206, ptr %ptradd107, align 16
  %207 = insertvalue %"any[]" undef, ptr %varargslots106, 0
  %"$$temp108" = insertvalue %"any[]" %207, i64 2, 1
  store %"any[]" %"$$temp108", ptr %indirectarg109, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 47, ptr byval(%"any[]") align 8 %indirectarg109), !dbg !2148
  unreachable, !dbg !2148

panic116:                                         ; preds = %checkok110
  store i64 %80, ptr %taddr117, align 8
  %208 = insertvalue %any undef, ptr %taddr117, 0
  %209 = insertvalue %any %208, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %209, ptr %varargslots118, align 16
  %210 = insertvalue %"any[]" undef, ptr %varargslots118, 0
  %"$$temp119" = insertvalue %"any[]" %210, i64 1, 1
  store %"any[]" %"$$temp119", ptr %indirectarg120, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 38, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg120), !dbg !2151
  unreachable, !dbg !2151

panic123:                                         ; preds = %checkok121
  store i64 %78, ptr %taddr124, align 8
  %211 = insertvalue %any undef, ptr %taddr124, 0
  %212 = insertvalue %any %211, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %80, ptr %taddr125, align 8
  %213 = insertvalue %any undef, ptr %taddr125, 0
  %214 = insertvalue %any %213, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %212, ptr %varargslots126, align 16
  %ptradd127 = getelementptr inbounds i8, ptr %varargslots126, i64 16
  store %any %214, ptr %ptradd127, align 16
  %215 = insertvalue %"any[]" undef, ptr %varargslots126, 0
  %"$$temp128" = insertvalue %"any[]" %215, i64 2, 1
  store %"any[]" %"$$temp128", ptr %indirectarg129, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg129), !dbg !2151
  unreachable, !dbg !2151

panic134:                                         ; preds = %checkok130
  store i64 %86, ptr %taddr135, align 8
  %216 = insertvalue %any undef, ptr %taddr135, 0
  %217 = insertvalue %any %216, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %217, ptr %varargslots136, align 16
  %218 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp137" = insertvalue %"any[]" %218, i64 1, 1
  store %"any[]" %"$$temp137", ptr %indirectarg138, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 38, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg138), !dbg !2153
  unreachable, !dbg !2153

panic141:                                         ; preds = %checkok139
  store i64 %84, ptr %taddr142, align 8
  %219 = insertvalue %any undef, ptr %taddr142, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %86, ptr %taddr143, align 8
  %221 = insertvalue %any undef, ptr %taddr143, 0
  %222 = insertvalue %any %221, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %220, ptr %varargslots144, align 16
  %ptradd145 = getelementptr inbounds i8, ptr %varargslots144, i64 16
  store %any %222, ptr %ptradd145, align 16
  %223 = insertvalue %"any[]" undef, ptr %varargslots144, 0
  %"$$temp146" = insertvalue %"any[]" %223, i64 2, 1
  store %"any[]" %"$$temp146", ptr %indirectarg147, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 48, ptr byval(%"any[]") align 8 %indirectarg147), !dbg !2153
  unreachable, !dbg !2153

panic161:                                         ; preds = %loop.body157
  %224 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2163
  call void %224(ptr @.panic_msg.99, i64 10, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 54), !dbg !2163
  unreachable, !dbg !2163

panic165:                                         ; preds = %checkok162
  store i64 %98, ptr %taddr166, align 8
  %225 = insertvalue %any undef, ptr %taddr166, 0
  %226 = insertvalue %any %225, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %226, ptr %varargslots167, align 16
  %227 = insertvalue %"any[]" undef, ptr %varargslots167, 0
  %"$$temp168" = insertvalue %"any[]" %227, i64 1, 1
  store %"any[]" %"$$temp168", ptr %indirectarg169, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 38, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg169), !dbg !2166
  unreachable, !dbg !2166

panic172:                                         ; preds = %checkok170
  store i64 %96, ptr %taddr173, align 8
  %228 = insertvalue %any undef, ptr %taddr173, 0
  %229 = insertvalue %any %228, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %98, ptr %taddr174, align 8
  %230 = insertvalue %any undef, ptr %taddr174, 0
  %231 = insertvalue %any %230, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %229, ptr %varargslots175, align 16
  %ptradd176 = getelementptr inbounds i8, ptr %varargslots175, i64 16
  store %any %231, ptr %ptradd176, align 16
  %232 = insertvalue %"any[]" undef, ptr %varargslots175, 0
  %"$$temp177" = insertvalue %"any[]" %232, i64 2, 1
  store %"any[]" %"$$temp177", ptr %indirectarg178, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg178), !dbg !2166
  unreachable, !dbg !2166

panic185:                                         ; preds = %checkok179
  %233 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2168
  call void %233(ptr @.panic_msg.99, i64 10, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 55), !dbg !2168
  unreachable, !dbg !2168

panic189:                                         ; preds = %checkok186
  store i64 %smod187, ptr %taddr190, align 8
  %234 = insertvalue %any undef, ptr %taddr190, 0
  %235 = insertvalue %any %234, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %235, ptr %varargslots191, align 16
  %236 = insertvalue %"any[]" undef, ptr %varargslots191, 0
  %"$$temp192" = insertvalue %"any[]" %236, i64 1, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 38, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg193), !dbg !2168
  unreachable, !dbg !2168

panic196:                                         ; preds = %checkok194
  store i64 %102, ptr %taddr197, align 8
  %237 = insertvalue %any undef, ptr %taddr197, 0
  %238 = insertvalue %any %237, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod187, ptr %taddr198, align 8
  %239 = insertvalue %any undef, ptr %taddr198, 0
  %240 = insertvalue %any %239, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %238, ptr %varargslots199, align 16
  %ptradd200 = getelementptr inbounds i8, ptr %varargslots199, i64 16
  store %any %240, ptr %ptradd200, align 16
  %241 = insertvalue %"any[]" undef, ptr %varargslots199, 0
  %"$$temp201" = insertvalue %"any[]" %241, i64 2, 1
  store %"any[]" %"$$temp201", ptr %indirectarg202, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 55, ptr byval(%"any[]") align 8 %indirectarg202), !dbg !2168
  unreachable, !dbg !2168

panic209:                                         ; preds = %checkok203
  store i64 %112, ptr %taddr210, align 8
  %242 = insertvalue %any undef, ptr %taddr210, 0
  %243 = insertvalue %any %242, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %243, ptr %varargslots211, align 16
  %244 = insertvalue %"any[]" undef, ptr %varargslots211, 0
  %"$$temp212" = insertvalue %"any[]" %244, i64 1, 1
  store %"any[]" %"$$temp212", ptr %indirectarg213, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 38, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg213), !dbg !2171
  unreachable, !dbg !2171

panic216:                                         ; preds = %checkok214
  store i64 %110, ptr %taddr217, align 8
  %245 = insertvalue %any undef, ptr %taddr217, 0
  %246 = insertvalue %any %245, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %112, ptr %taddr218, align 8
  %247 = insertvalue %any undef, ptr %taddr218, 0
  %248 = insertvalue %any %247, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %246, ptr %varargslots219, align 16
  %ptradd220 = getelementptr inbounds i8, ptr %varargslots219, i64 16
  store %any %248, ptr %ptradd220, align 16
  %249 = insertvalue %"any[]" undef, ptr %varargslots219, 0
  %"$$temp221" = insertvalue %"any[]" %249, i64 2, 1
  store %"any[]" %"$$temp221", ptr %indirectarg222, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg222), !dbg !2171
  unreachable, !dbg !2171

panic227:                                         ; preds = %checkok223
  store i64 %118, ptr %taddr228, align 8
  %250 = insertvalue %any undef, ptr %taddr228, 0
  %251 = insertvalue %any %250, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %251, ptr %varargslots229, align 16
  %252 = insertvalue %"any[]" undef, ptr %varargslots229, 0
  %"$$temp230" = insertvalue %"any[]" %252, i64 1, 1
  store %"any[]" %"$$temp230", ptr %indirectarg231, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 38, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg231), !dbg !2173
  unreachable, !dbg !2173

panic234:                                         ; preds = %checkok232
  store i64 %116, ptr %taddr235, align 8
  %253 = insertvalue %any undef, ptr %taddr235, 0
  %254 = insertvalue %any %253, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %118, ptr %taddr236, align 8
  %255 = insertvalue %any undef, ptr %taddr236, 0
  %256 = insertvalue %any %255, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %254, ptr %varargslots237, align 16
  %ptradd238 = getelementptr inbounds i8, ptr %varargslots237, i64 16
  store %any %256, ptr %ptradd238, align 16
  %257 = insertvalue %"any[]" undef, ptr %varargslots237, 0
  %"$$temp239" = insertvalue %"any[]" %257, i64 2, 1
  store %"any[]" %"$$temp239", ptr %indirectarg240, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 56, ptr byval(%"any[]") align 8 %indirectarg240), !dbg !2173
  unreachable, !dbg !2173

panic254:                                         ; preds = %loop.body250
  %258 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2184
  call void %258(ptr @.panic_msg.99, i64 10, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 62), !dbg !2184
  unreachable, !dbg !2184

panic259:                                         ; preds = %checkok255
  store i64 %129, ptr %taddr260, align 8
  %259 = insertvalue %any undef, ptr %taddr260, 0
  %260 = insertvalue %any %259, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %131, ptr %taddr261, align 8
  %261 = insertvalue %any undef, ptr %taddr261, 0
  %262 = insertvalue %any %261, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %260, ptr %varargslots262, align 16
  %ptradd263 = getelementptr inbounds i8, ptr %varargslots262, i64 16
  store %any %262, ptr %ptradd263, align 16
  %263 = insertvalue %"any[]" undef, ptr %varargslots262, 0
  %"$$temp264" = insertvalue %"any[]" %263, i64 2, 1
  store %"any[]" %"$$temp264", ptr %indirectarg265, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 63, ptr byval(%"any[]") align 8 %indirectarg265), !dbg !2187
  unreachable, !dbg !2187

panic271:                                         ; preds = %checkok266
  store i64 %134, ptr %taddr272, align 8
  %264 = insertvalue %any undef, ptr %taddr272, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %136, ptr %taddr273, align 8
  %266 = insertvalue %any undef, ptr %taddr273, 0
  %267 = insertvalue %any %266, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %265, ptr %varargslots274, align 16
  %ptradd275 = getelementptr inbounds i8, ptr %varargslots274, i64 16
  store %any %267, ptr %ptradd275, align 16
  %268 = insertvalue %"any[]" undef, ptr %varargslots274, 0
  %"$$temp276" = insertvalue %"any[]" %268, i64 2, 1
  store %"any[]" %"$$temp276", ptr %indirectarg277, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 64, ptr byval(%"any[]") align 8 %indirectarg277), !dbg !2189
  unreachable, !dbg !2189

panic282:                                         ; preds = %checkok278
  store i64 %139, ptr %taddr283, align 8
  %269 = insertvalue %any undef, ptr %taddr283, 0
  %270 = insertvalue %any %269, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %141, ptr %taddr284, align 8
  %271 = insertvalue %any undef, ptr %taddr284, 0
  %272 = insertvalue %any %271, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %270, ptr %varargslots285, align 16
  %ptradd286 = getelementptr inbounds i8, ptr %varargslots285, i64 16
  store %any %272, ptr %ptradd286, align 16
  %273 = insertvalue %"any[]" undef, ptr %varargslots285, 0
  %"$$temp287" = insertvalue %"any[]" %273, i64 2, 1
  store %"any[]" %"$$temp287", ptr %indirectarg288, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 64, ptr byval(%"any[]") align 8 %indirectarg288), !dbg !2191
  unreachable, !dbg !2191

panic299:                                         ; preds = %loop.exit294
  store i64 %153, ptr %taddr300, align 8
  %274 = insertvalue %any undef, ptr %taddr300, 0
  %275 = insertvalue %any %274, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr301, align 8
  %276 = insertvalue %any undef, ptr %taddr301, 0
  %277 = insertvalue %any %276, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %275, ptr %varargslots302, align 16
  %ptradd303 = getelementptr inbounds i8, ptr %varargslots302, i64 16
  store %any %277, ptr %ptradd303, align 16
  %278 = insertvalue %"any[]" undef, ptr %varargslots302, 0
  %"$$temp304" = insertvalue %"any[]" %278, i64 2, 1
  store %"any[]" %"$$temp304", ptr %indirectarg305, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 66, ptr byval(%"any[]") align 8 %indirectarg305), !dbg !2195
  unreachable, !dbg !2195

panic312:                                         ; preds = %checkok306
  store i64 %160, ptr %taddr313, align 8
  %279 = insertvalue %any undef, ptr %taddr313, 0
  %280 = insertvalue %any %279, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %159, ptr %taddr314, align 8
  %281 = insertvalue %any undef, ptr %taddr314, 0
  %282 = insertvalue %any %281, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %280, ptr %varargslots315, align 16
  %ptradd316 = getelementptr inbounds i8, ptr %varargslots315, i64 16
  store %any %282, ptr %ptradd316, align 16
  %283 = insertvalue %"any[]" undef, ptr %varargslots315, 0
  %"$$temp317" = insertvalue %"any[]" %283, i64 2, 1
  store %"any[]" %"$$temp317", ptr %indirectarg318, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file.97, i64 14, ptr @.func.98, i64 6, i32 66, ptr byval(%"any[]") align 8 %indirectarg318), !dbg !2195
  unreachable, !dbg !2195
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.entropy(ptr noalias sret([32 x i8]) align 1 %0) #0 comdat !dbg !2202 {
entry:
  %addr = alloca ptr, align 8
  %entropy_data = alloca [8 x i32], align 16
  %value = alloca %"char[]", align 8
  %expr = alloca %"char[]", align 8
  %value1 = alloca ptr, align 8
  %expr2 = alloca ptr, align 8
  %value7 = alloca ptr, align 8
  %expr8 = alloca ptr, align 8
  %value13 = alloca ptr, align 8
  %expr14 = alloca ptr, align 8
  %value20 = alloca i64, align 8
  %expr21 = alloca i64, align 8
  %value26 = alloca ptr, align 8
  %expr27 = alloca ptr, align 8
  %value32 = alloca %any, align 8
  %expr33 = alloca %any, align 8
  %expr37 = alloca [8 x i32], align 16
  call void @llvm.dbg.declare(metadata ptr %addr, metadata !2208, metadata !DIExpression()), !dbg !2209
  %1 = call ptr @std.core.mem.malloc(i64 1) #5, !dbg !2210
  store ptr %1, ptr %addr, align 8, !dbg !2210
  %2 = load ptr, ptr %addr, align 8, !dbg !2211
  call void @std.core.mem.free(ptr %2) #5, !dbg !2212
  %3 = load i32, ptr @entropy.random_int, align 4, !dbg !2213
  %add = add i32 %3, -302935722, !dbg !2213
  store i32 %add, ptr @entropy.random_int, align 4, !dbg !2213
  call void @llvm.dbg.declare(metadata ptr %entropy_data, metadata !2214, metadata !DIExpression()), !dbg !2218
  store %"char[]" { ptr @.str.105, i64 8 }, ptr %value, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr, ptr align 8 %value, i32 16, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !2219
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2219
  br i1 %4, label %panic, label %checkok, !dbg !2219

checkok:                                          ; preds = %entry
  %5 = insertvalue %"char[]" undef, ptr %expr, 0, !dbg !2224
  %6 = insertvalue %"char[]" %5, i64 16, 1, !dbg !2224
  %7 = call i32 @std.hash.fnv32a.encode(ptr %expr, i64 16), !dbg !2225
  store i32 %7, ptr %entropy_data, align 4, !dbg !2225
  %ptradd = getelementptr inbounds i8, ptr %entropy_data, i64 4, !dbg !2225
  %8 = load ptr, ptr %addr, align 8
  store ptr %8, ptr %value1, align 8
  %9 = load ptr, ptr %value1, align 8
  store ptr %9, ptr %expr2, align 8
  %checknull3 = icmp eq ptr %expr2, null, !dbg !2226
  %10 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !2226
  br i1 %10, label %panic4, label %checkok5, !dbg !2226

checkok5:                                         ; preds = %checkok
  %11 = insertvalue %"char[]" undef, ptr %expr2, 0, !dbg !2231
  %12 = insertvalue %"char[]" %11, i64 8, 1, !dbg !2231
  %13 = call i32 @std.hash.fnv32a.encode(ptr %expr2, i64 8), !dbg !2232
  store i32 %13, ptr %ptradd, align 4, !dbg !2232
  %ptradd6 = getelementptr inbounds i8, ptr %entropy_data, i64 8, !dbg !2232
  store ptr %addr, ptr %value7, align 8
  %14 = load ptr, ptr %value7, align 8
  store ptr %14, ptr %expr8, align 8
  %checknull9 = icmp eq ptr %expr8, null, !dbg !2233
  %15 = call i1 @llvm.expect.i1(i1 %checknull9, i1 false), !dbg !2233
  br i1 %15, label %panic10, label %checkok11, !dbg !2233

checkok11:                                        ; preds = %checkok5
  %16 = insertvalue %"char[]" undef, ptr %expr8, 0, !dbg !2238
  %17 = insertvalue %"char[]" %16, i64 8, 1, !dbg !2238
  %18 = call i32 @std.hash.fnv32a.encode(ptr %expr8, i64 8), !dbg !2239
  store i32 %18, ptr %ptradd6, align 4, !dbg !2239
  %ptradd12 = getelementptr inbounds i8, ptr %entropy_data, i64 12, !dbg !2239
  store ptr @std.math.random.entropy, ptr %value13, align 8
  %19 = load ptr, ptr %value13, align 8
  store ptr %19, ptr %expr14, align 8
  %checknull15 = icmp eq ptr %expr14, null, !dbg !2240
  %20 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !2240
  br i1 %20, label %panic16, label %checkok17, !dbg !2240

checkok17:                                        ; preds = %checkok11
  %21 = insertvalue %"char[]" undef, ptr %expr14, 0, !dbg !2245
  %22 = insertvalue %"char[]" %21, i64 8, 1, !dbg !2245
  %23 = call i32 @std.hash.fnv32a.encode(ptr %expr14, i64 8), !dbg !2246
  store i32 %23, ptr %ptradd12, align 4, !dbg !2246
  %ptradd18 = getelementptr inbounds i8, ptr %entropy_data, i64 16, !dbg !2246
  %24 = load i32, ptr @entropy.random_int, align 4, !dbg !2247
  store i32 %24, ptr %ptradd18, align 4, !dbg !2247
  %ptradd19 = getelementptr inbounds i8, ptr %entropy_data, i64 20, !dbg !2247
  %25 = call i64 @std.time.clock.now(), !dbg !2248
  store i64 %25, ptr %value20, align 8
  %26 = load i64, ptr %value20, align 8
  store i64 %26, ptr %expr21, align 8
  %checknull22 = icmp eq ptr %expr21, null, !dbg !2249
  %27 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !2249
  br i1 %27, label %panic23, label %checkok24, !dbg !2249

checkok24:                                        ; preds = %checkok17
  %28 = insertvalue %"char[]" undef, ptr %expr21, 0, !dbg !2254
  %29 = insertvalue %"char[]" %28, i64 8, 1, !dbg !2254
  %30 = call i32 @std.hash.fnv32a.encode(ptr %expr21, i64 8), !dbg !2255
  store i32 %30, ptr %ptradd19, align 4, !dbg !2255
  %ptradd25 = getelementptr inbounds i8, ptr %entropy_data, i64 24, !dbg !2255
  store ptr @std.core.dstring.DString.new_init, ptr %value26, align 8
  %31 = load ptr, ptr %value26, align 8
  store ptr %31, ptr %expr27, align 8
  %checknull28 = icmp eq ptr %expr27, null, !dbg !2256
  %32 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !2256
  br i1 %32, label %panic29, label %checkok30, !dbg !2256

checkok30:                                        ; preds = %checkok24
  %33 = insertvalue %"char[]" undef, ptr %expr27, 0, !dbg !2261
  %34 = insertvalue %"char[]" %33, i64 8, 1, !dbg !2261
  %35 = call i32 @std.hash.fnv32a.encode(ptr %expr27, i64 8), !dbg !2262
  store i32 %35, ptr %ptradd25, align 4, !dbg !2262
  %ptradd31 = getelementptr inbounds i8, ptr %entropy_data, i64 28, !dbg !2262
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value32, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr33, ptr align 8 %value32, i32 16, i1 false)
  %checknull34 = icmp eq ptr %expr33, null, !dbg !2263
  %36 = call i1 @llvm.expect.i1(i1 %checknull34, i1 false), !dbg !2263
  br i1 %36, label %panic35, label %checkok36, !dbg !2263

checkok36:                                        ; preds = %checkok30
  %37 = insertvalue %"char[]" undef, ptr %expr33, 0, !dbg !2268
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !2268
  %39 = call i32 @std.hash.fnv32a.encode(ptr %expr33, i64 16), !dbg !2269
  store i32 %39, ptr %ptradd31, align 4, !dbg !2269
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr37, ptr align 16 %entropy_data, i32 32, i1 false)
  %checknull38 = icmp eq ptr %expr37, null, !dbg !2270
  %40 = call i1 @llvm.expect.i1(i1 %checknull38, i1 false), !dbg !2270
  br i1 %40, label %panic39, label %checkok40, !dbg !2270

checkok40:                                        ; preds = %checkok36
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %expr37, i32 32, i1 false), !dbg !2273
  ret void, !dbg !2273

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2224
  call void %41(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.106, i64 7, i32 212), !dbg !2224
  unreachable, !dbg !2224

panic4:                                           ; preds = %checkok
  %42 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2231
  call void %42(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.106, i64 7, i32 212), !dbg !2231
  unreachable, !dbg !2231

panic10:                                          ; preds = %checkok5
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2238
  call void %43(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.106, i64 7, i32 212), !dbg !2238
  unreachable, !dbg !2238

panic16:                                          ; preds = %checkok11
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2245
  call void %44(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.106, i64 7, i32 212), !dbg !2245
  unreachable, !dbg !2245

panic23:                                          ; preds = %checkok17
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2254
  call void %45(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.106, i64 7, i32 212), !dbg !2254
  unreachable, !dbg !2254

panic29:                                          ; preds = %checkok24
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2261
  call void %46(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.106, i64 7, i32 212), !dbg !2261
  unreachable, !dbg !2261

panic35:                                          ; preds = %checkok30
  %47 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2268
  call void %47(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.106, i64 7, i32 212), !dbg !2268
  unreachable, !dbg !2268

panic39:                                          ; preds = %checkok36
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2273
  call void %48(ptr @.panic_msg.49, i64 53, ptr @.file.50, i64 10, ptr @.func.106, i64 7, i32 212), !dbg !2273
  unreachable, !dbg !2273
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2274 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2279
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2279
  br i1 %4, label %panic, label %checkok, !dbg !2279

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2280, metadata !DIExpression()), !dbg !2281
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2282, metadata !DIExpression()), !dbg !2283
  %5 = load ptr, ptr %self, align 8, !dbg !2284
  %checknull = icmp eq ptr %5, null, !dbg !2284
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2284
  br i1 %6, label %panic1, label %checkok2, !dbg !2284

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2285, metadata !DIExpression()), !dbg !2287
  store i128 0, ptr %return_value, align 8, !dbg !2287
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !2289
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 16, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 16), !dbg !2292
  %11 = load i128, ptr %return_value, align 8, !dbg !2293
  %or = or i128 %11, 1, !dbg !2294
  store i128 %or, ptr %5, align 8, !dbg !2294
  ret void, !dbg !2294

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2281
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.16, i64 8, i32 12), !dbg !2281
  unreachable, !dbg !2281

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2284
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.111, i64 11, ptr @.func.16, i64 8, i32 14), !dbg !2284
  unreachable, !dbg !2284
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2295 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2296
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2296
  br i1 %4, label %panic, label %checkok, !dbg !2296

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2297, metadata !DIExpression()), !dbg !2298
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2299, metadata !DIExpression()), !dbg !2300
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2301
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2301
  %lt = icmp ult i64 0, %5, !dbg !2301
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2301

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2301
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.111, i64 11, ptr @.func.20, i64 10, i32 18), !dbg !2301
  unreachable, !dbg !2301

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2303, metadata !DIExpression()), !dbg !2305
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2307
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2307
  store i64 %7, ptr %len, align 8, !dbg !2307
  br label %loop.cond, !dbg !2308

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2309
  %lt4 = icmp ult i64 0, %8, !dbg !2309
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2309

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2311, metadata !DIExpression()), !dbg !2313
  %9 = load ptr, ptr %self, align 8, !dbg !2314
  %10 = call i64 @std.math.random.Mcg128Random.next_long(ptr %9), !dbg !2315
  store i64 %10, ptr %value, align 8, !dbg !2315
  %11 = load i64, ptr %len, align 8, !dbg !2316
  %le = icmp ule i64 %11, 8, !dbg !2316
  br i1 %le, label %if.then, label %if.exit, !dbg !2316

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2317
  %add = add i64 0, %13, !dbg !2317
  %size = sub i64 %add, 0, !dbg !2317
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2317
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2317
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2319
  %17 = extractvalue %"char[]" %16, 0, !dbg !2319
  %18 = extractvalue %"char[]" %16, 1, !dbg !2320
  %gt = icmp ugt i64 0, %18, !dbg !2320
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2320
  br i1 %19, label %panic5, label %checkok9, !dbg !2320

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2319
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2319
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2319
  %22 = extractvalue %"char[]" %21, 0, !dbg !2319
  %23 = extractvalue %"char[]" %15, 0, !dbg !2319
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2319
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2319
  br label %expr_block.exit, !dbg !2321

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2322
  %32 = extractvalue %"char[]" %31, 0, !dbg !2322
  %33 = extractvalue %"char[]" %31, 1, !dbg !2322
  %gt24 = icmp sgt i64 0, %33, !dbg !2322
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !2322
  br i1 %34, label %panic25, label %checkok32, !dbg !2322

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 8, !dbg !2322
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !2322
  br i1 %35, label %panic34, label %checkok41, !dbg !2322

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2322
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !2322
  %38 = extractvalue %"char[]" %37, 0, !dbg !2322
  %39 = extractvalue %"char[]" %30, 0, !dbg !2322
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !2322
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2322
  %44 = load i64, ptr %len, align 8, !dbg !2323
  %sub = sub i64 %44, 8, !dbg !2323
  store i64 %sub, ptr %len, align 8, !dbg !2323
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2324
  %46 = extractvalue %"char[]" %45, 0, !dbg !2324
  %47 = extractvalue %"char[]" %45, 1, !dbg !2325
  %gt55 = icmp ugt i64 8, %47, !dbg !2325
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2325
  br i1 %48, label %panic56, label %checkok63, !dbg !2325

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 8, !dbg !2324
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !2324
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2324
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !2324
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2324
  br label %loop.cond, !dbg !2324

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.112, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2326
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2326
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2326
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.113, i64 11, ptr @.str.114, i64 23, i32 22, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2329
  unreachable, !dbg !2330

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !2330

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2298
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.20, i64 10, i32 20), !dbg !2298
  unreachable, !dbg !2298

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2319
  unreachable, !dbg !2319

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !2319
  unreachable, !dbg !2319

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !2322
  unreachable, !dbg !2322

panic34:                                          ; preds = %checkok32
  store i64 7, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !2322
  unreachable, !dbg !2322

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !2322
  unreachable, !dbg !2322

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !2324
  unreachable, !dbg !2324
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg128Random.next_long(ptr %0) #0 comdat !dbg !2331 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !2334
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2334
  br i1 %2, label %panic, label %checkok, !dbg !2334

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2335, metadata !DIExpression()), !dbg !2336
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2337, metadata !DIExpression()), !dbg !2338
  %3 = load ptr, ptr %self, align 8, !dbg !2339
  store ptr %3, ptr %s, align 8, !dbg !2339
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2340, metadata !DIExpression()), !dbg !2341
  %4 = load ptr, ptr %s, align 8, !dbg !2342
  %checknull = icmp eq ptr %4, null, !dbg !2342
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2342
  br i1 %5, label %panic1, label %checkok2, !dbg !2342

checkok2:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 8, !dbg !2342
  %lshr = lshr i128 %6, 64, !dbg !2343
  %7 = freeze i128 %lshr, !dbg !2343
  %trunc = trunc i128 %7 to i64, !dbg !2343
  store i64 %trunc, ptr %result, align 8, !dbg !2343
  %8 = load ptr, ptr %s, align 8, !dbg !2344
  %checknull3 = icmp eq ptr %8, null, !dbg !2344
  %9 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !2344
  br i1 %9, label %panic4, label %checkok5, !dbg !2344

checkok5:                                         ; preds = %checkok2
  %10 = load i128, ptr %8, align 8, !dbg !2344
  %mul = mul i128 %10, -129976298391535590297638237547755878347, !dbg !2345
  store i128 %mul, ptr %8, align 8, !dbg !2345
  %11 = load i64, ptr %result, align 8, !dbg !2346
  ret i64 %11, !dbg !2346

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2336
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.18, i64 9, i32 25), !dbg !2336
  unreachable, !dbg !2336

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2342
  call void %13(ptr @.panic_msg.19, i64 42, ptr @.file.111, i64 11, ptr @.func.18, i64 9, i32 28), !dbg !2342
  unreachable, !dbg !2342

panic4:                                           ; preds = %checkok2
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2344
  call void %14(ptr @.panic_msg.19, i64 42, ptr @.file.111, i64 11, ptr @.func.18, i64 9, i32 29), !dbg !2344
  unreachable, !dbg !2344
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg128Random.next_int128(ptr %0) #0 comdat !dbg !2347 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !2350
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2350
  br i1 %2, label %panic, label %checkok, !dbg !2350

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2351, metadata !DIExpression()), !dbg !2352
  %3 = load ptr, ptr %self, align 8, !dbg !2353
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2355
  %zext = zext i64 %4 to i128, !dbg !2355
  %shl = shl i128 %zext, 64, !dbg !2355
  %5 = freeze i128 %shl, !dbg !2355
  %6 = load ptr, ptr %self, align 8, !dbg !2353
  %7 = call i64 @std.math.random.Mcg128Random.next_long(ptr %6), !dbg !2356
  %zext1 = zext i64 %7 to i128, !dbg !2356
  %add = add i128 %5, %zext1, !dbg !2355
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2352
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.27, i64 11, i32 33), !dbg !2352
  unreachable, !dbg !2352
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg128Random.next_int(ptr %0) #0 comdat !dbg !2357 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2360
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2360
  br i1 %2, label %panic, label %checkok, !dbg !2360

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2361, metadata !DIExpression()), !dbg !2362
  %3 = load ptr, ptr %self, align 8, !dbg !2363
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2364
  %trunc = trunc i64 %4 to i32, !dbg !2364
  ret i32 %trunc, !dbg !2364

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2362
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.28, i64 8, i32 34), !dbg !2362
  unreachable, !dbg !2362
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg128Random.next_short(ptr %0) #0 comdat !dbg !2365 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2368
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2368
  br i1 %2, label %panic, label %checkok, !dbg !2368

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2369, metadata !DIExpression()), !dbg !2370
  %3 = load ptr, ptr %self, align 8, !dbg !2371
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2372
  %trunc = trunc i64 %4 to i16, !dbg !2372
  ret i16 %trunc, !dbg !2372

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2370
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.29, i64 10, i32 35), !dbg !2370
  unreachable, !dbg !2370
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg128Random.next_byte(ptr %0) #0 comdat !dbg !2373 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2376
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2376
  br i1 %2, label %panic, label %checkok, !dbg !2376

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2377, metadata !DIExpression()), !dbg !2378
  %3 = load ptr, ptr %self, align 8, !dbg !2379
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2380
  %trunc = trunc i64 %4 to i8, !dbg !2380
  ret i8 %trunc, !dbg !2380

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2378
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.30, i64 9, i32 36), !dbg !2378
  unreachable, !dbg !2378
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2381 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2386
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2386
  br i1 %4, label %panic, label %checkok, !dbg !2386

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2387, metadata !DIExpression()), !dbg !2388
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2389, metadata !DIExpression()), !dbg !2390
  %5 = load ptr, ptr %self, align 8, !dbg !2391
  %checknull = icmp eq ptr %5, null, !dbg !2391
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2391
  br i1 %6, label %panic1, label %checkok2, !dbg !2391

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2392, metadata !DIExpression()), !dbg !2394
  store i64 0, ptr %return_value, align 8, !dbg !2394
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !2396
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 8, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 8), !dbg !2399
  %11 = load i64, ptr %return_value, align 8, !dbg !2400
  %or = or i64 %11, 1, !dbg !2395
  store i64 %or, ptr %5, align 8, !dbg !2395
  ret void, !dbg !2395

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2388
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.16, i64 8, i32 45), !dbg !2388
  unreachable, !dbg !2388

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2391
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.111, i64 11, ptr @.func.16, i64 8, i32 47), !dbg !2391
  unreachable, !dbg !2391
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2401 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2402
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2402
  br i1 %4, label %panic, label %checkok, !dbg !2402

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2403, metadata !DIExpression()), !dbg !2404
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2405, metadata !DIExpression()), !dbg !2406
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2407
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2407
  %lt = icmp ult i64 0, %5, !dbg !2407
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2407

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2407
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.111, i64 11, ptr @.func.20, i64 10, i32 51), !dbg !2407
  unreachable, !dbg !2407

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2409, metadata !DIExpression()), !dbg !2411
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2413
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2413
  store i64 %7, ptr %len, align 8, !dbg !2413
  br label %loop.cond, !dbg !2414

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2415
  %lt4 = icmp ult i64 0, %8, !dbg !2415
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2415

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2417, metadata !DIExpression()), !dbg !2419
  %9 = load ptr, ptr %self, align 8, !dbg !2420
  %10 = call i32 @std.math.random.Mcg64Random.next_int(ptr %9), !dbg !2421
  store i32 %10, ptr %value, align 4, !dbg !2421
  %11 = load i64, ptr %len, align 8, !dbg !2422
  %le = icmp ule i64 %11, 4, !dbg !2422
  br i1 %le, label %if.then, label %if.exit, !dbg !2422

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2423
  %add = add i64 0, %13, !dbg !2423
  %size = sub i64 %add, 0, !dbg !2423
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2423
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2423
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2425
  %17 = extractvalue %"char[]" %16, 0, !dbg !2425
  %18 = extractvalue %"char[]" %16, 1, !dbg !2426
  %gt = icmp ugt i64 0, %18, !dbg !2426
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2426
  br i1 %19, label %panic5, label %checkok9, !dbg !2426

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2425
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2425
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2425
  %22 = extractvalue %"char[]" %21, 0, !dbg !2425
  %23 = extractvalue %"char[]" %15, 0, !dbg !2425
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2425
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2425
  br label %expr_block.exit, !dbg !2427

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2428
  %32 = extractvalue %"char[]" %31, 0, !dbg !2428
  %33 = extractvalue %"char[]" %31, 1, !dbg !2428
  %gt24 = icmp sgt i64 0, %33, !dbg !2428
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !2428
  br i1 %34, label %panic25, label %checkok32, !dbg !2428

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 4, !dbg !2428
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !2428
  br i1 %35, label %panic34, label %checkok41, !dbg !2428

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2428
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !2428
  %38 = extractvalue %"char[]" %37, 0, !dbg !2428
  %39 = extractvalue %"char[]" %30, 0, !dbg !2428
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !2428
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2428
  %44 = load i64, ptr %len, align 8, !dbg !2429
  %sub = sub i64 %44, 4, !dbg !2429
  store i64 %sub, ptr %len, align 8, !dbg !2429
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2430
  %46 = extractvalue %"char[]" %45, 0, !dbg !2430
  %47 = extractvalue %"char[]" %45, 1, !dbg !2431
  %gt55 = icmp ugt i64 4, %47, !dbg !2431
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2431
  br i1 %48, label %panic56, label %checkok63, !dbg !2431

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 4, !dbg !2430
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !2430
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2430
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !2430
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2430
  br label %loop.cond, !dbg !2430

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.115, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2432
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2432
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2432
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.116, i64 11, ptr @.str.117, i64 22, i32 55, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2435
  unreachable, !dbg !2436

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !2436

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2404
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.20, i64 10, i32 53), !dbg !2404
  unreachable, !dbg !2404

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2425
  unreachable, !dbg !2425

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !2425
  unreachable, !dbg !2425

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !2428
  unreachable, !dbg !2428

panic34:                                          ; preds = %checkok32
  store i64 3, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !2428
  unreachable, !dbg !2428

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !2428
  unreachable, !dbg !2428

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !2430
  unreachable, !dbg !2430
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg64Random.next_int(ptr %0) #0 comdat !dbg !2437 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !2440
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2440
  br i1 %2, label %panic, label %checkok, !dbg !2440

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2441, metadata !DIExpression()), !dbg !2442
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2443, metadata !DIExpression()), !dbg !2444
  %3 = load ptr, ptr %self, align 8, !dbg !2445
  store ptr %3, ptr %s, align 8, !dbg !2445
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2446, metadata !DIExpression()), !dbg !2447
  %4 = load ptr, ptr %s, align 8, !dbg !2448
  %checknull = icmp eq ptr %4, null, !dbg !2448
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2448
  br i1 %5, label %panic1, label %checkok2, !dbg !2448

checkok2:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !2448
  %lshr = lshr i64 %6, 32, !dbg !2449
  %7 = freeze i64 %lshr, !dbg !2449
  %trunc = trunc i64 %7 to i32, !dbg !2449
  store i32 %trunc, ptr %result, align 4, !dbg !2449
  %8 = load ptr, ptr %s, align 8, !dbg !2450
  %checknull3 = icmp eq ptr %8, null, !dbg !2450
  %9 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !2450
  br i1 %9, label %panic4, label %checkok5, !dbg !2450

checkok5:                                         ; preds = %checkok2
  %10 = load i64, ptr %8, align 8, !dbg !2450
  %mul = mul i64 %10, -1065810590584100411, !dbg !2451
  store i64 %mul, ptr %8, align 8, !dbg !2451
  %11 = load i32, ptr %result, align 4, !dbg !2452
  ret i32 %11, !dbg !2452

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2442
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.28, i64 8, i32 58), !dbg !2442
  unreachable, !dbg !2442

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2448
  call void %13(ptr @.panic_msg.19, i64 42, ptr @.file.111, i64 11, ptr @.func.28, i64 8, i32 61), !dbg !2448
  unreachable, !dbg !2448

panic4:                                           ; preds = %checkok2
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2450
  call void %14(ptr @.panic_msg.19, i64 42, ptr @.file.111, i64 11, ptr @.func.28, i64 8, i32 62), !dbg !2450
  unreachable, !dbg !2450
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg64Random.next_int128(ptr %0) #0 comdat !dbg !2453 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !2456
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2456
  br i1 %2, label %panic, label %checkok, !dbg !2456

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2457, metadata !DIExpression()), !dbg !2458
  %3 = load ptr, ptr %self, align 8, !dbg !2459
  %4 = call i64 @std.math.random.Mcg64Random.next_long(ptr %3), !dbg !2461
  %zext = zext i64 %4 to i128, !dbg !2461
  %shl = shl i128 %zext, 64, !dbg !2461
  %5 = freeze i128 %shl, !dbg !2461
  %6 = load ptr, ptr %self, align 8, !dbg !2459
  %7 = call i64 @std.math.random.Mcg64Random.next_long(ptr %6), !dbg !2462
  %zext1 = zext i64 %7 to i128, !dbg !2462
  %add = add i128 %5, %zext1, !dbg !2461
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2458
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.27, i64 11, i32 66), !dbg !2458
  unreachable, !dbg !2458
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg64Random.next_long(ptr %0) #0 comdat !dbg !2463 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2466
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2466
  br i1 %2, label %panic, label %checkok, !dbg !2466

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2467, metadata !DIExpression()), !dbg !2468
  %3 = load ptr, ptr %self, align 8, !dbg !2469
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !2471
  %zext = zext i32 %4 to i64, !dbg !2471
  %shl = shl i64 %zext, 32, !dbg !2471
  %5 = freeze i64 %shl, !dbg !2471
  %6 = load ptr, ptr %self, align 8, !dbg !2469
  %7 = call i32 @std.math.random.Mcg64Random.next_int(ptr %6), !dbg !2472
  %zext1 = zext i32 %7 to i64, !dbg !2472
  %add = add i64 %5, %zext1, !dbg !2471
  ret i64 %add, !dbg !2471

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2468
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.18, i64 9, i32 67), !dbg !2468
  unreachable, !dbg !2468
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg64Random.next_short(ptr %0) #0 comdat !dbg !2473 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2476
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2476
  br i1 %2, label %panic, label %checkok, !dbg !2476

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2477, metadata !DIExpression()), !dbg !2478
  %3 = load ptr, ptr %self, align 8, !dbg !2479
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !2480
  %trunc = trunc i32 %4 to i16, !dbg !2480
  ret i16 %trunc, !dbg !2480

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2478
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.29, i64 10, i32 68), !dbg !2478
  unreachable, !dbg !2478
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg64Random.next_byte(ptr %0) #0 comdat !dbg !2481 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2484
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2484
  br i1 %2, label %panic, label %checkok, !dbg !2484

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2485, metadata !DIExpression()), !dbg !2486
  %3 = load ptr, ptr %self, align 8, !dbg !2487
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !2488
  %trunc = trunc i32 %4 to i8, !dbg !2488
  ret i8 %trunc, !dbg !2488

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2486
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.30, i64 9, i32 69), !dbg !2486
  unreachable, !dbg !2486
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2489 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2494
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2494
  br i1 %4, label %panic, label %checkok, !dbg !2494

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2495, metadata !DIExpression()), !dbg !2496
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2497, metadata !DIExpression()), !dbg !2498
  %5 = load ptr, ptr %self, align 8, !dbg !2499
  %checknull = icmp eq ptr %5, null, !dbg !2499
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2499
  br i1 %6, label %panic1, label %checkok2, !dbg !2499

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2500, metadata !DIExpression()), !dbg !2502
  store i32 0, ptr %return_value, align 4, !dbg !2502
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !2504
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 4, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 4), !dbg !2507
  %11 = load i32, ptr %return_value, align 4, !dbg !2508
  %or = or i32 %11, 1, !dbg !2503
  store i32 %or, ptr %5, align 4, !dbg !2503
  ret void, !dbg !2503

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2496
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.16, i64 8, i32 76), !dbg !2496
  unreachable, !dbg !2496

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2499
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.111, i64 11, ptr @.func.16, i64 8, i32 78), !dbg !2499
  unreachable, !dbg !2499
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg32Random.next_short(ptr %0) #0 comdat !dbg !2509 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !2512
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2512
  br i1 %2, label %panic, label %checkok, !dbg !2512

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2513, metadata !DIExpression()), !dbg !2514
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2515, metadata !DIExpression()), !dbg !2516
  %3 = load ptr, ptr %self, align 8, !dbg !2517
  store ptr %3, ptr %s, align 8, !dbg !2517
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2518, metadata !DIExpression()), !dbg !2519
  %4 = load ptr, ptr %s, align 8, !dbg !2520
  %checknull = icmp eq ptr %4, null, !dbg !2520
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2520
  br i1 %5, label %panic1, label %checkok2, !dbg !2520

checkok2:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !2520
  %lshr = lshr i32 %6, 16, !dbg !2521
  %7 = freeze i32 %lshr, !dbg !2521
  %trunc = trunc i32 %7 to i16, !dbg !2521
  store i16 %trunc, ptr %result, align 2, !dbg !2521
  %8 = load ptr, ptr %s, align 8, !dbg !2522
  %checknull3 = icmp eq ptr %8, null, !dbg !2522
  %9 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !2522
  br i1 %9, label %panic4, label %checkok5, !dbg !2522

checkok5:                                         ; preds = %checkok2
  %10 = load i32, ptr %8, align 4, !dbg !2522
  %mul = mul i32 %10, -1814600227, !dbg !2523
  store i32 %mul, ptr %8, align 4, !dbg !2523
  %11 = load i16, ptr %result, align 2, !dbg !2524
  ret i16 %11, !dbg !2524

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2514
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.29, i64 10, i32 81), !dbg !2514
  unreachable, !dbg !2514

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2520
  call void %13(ptr @.panic_msg.19, i64 42, ptr @.file.111, i64 11, ptr @.func.29, i64 10, i32 84), !dbg !2520
  unreachable, !dbg !2520

panic4:                                           ; preds = %checkok2
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2522
  call void %14(ptr @.panic_msg.19, i64 42, ptr @.file.111, i64 11, ptr @.func.29, i64 10, i32 85), !dbg !2522
  unreachable, !dbg !2522
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2525 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2526
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2526
  br i1 %4, label %panic, label %checkok, !dbg !2526

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2527, metadata !DIExpression()), !dbg !2528
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2529, metadata !DIExpression()), !dbg !2530
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2531
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2531
  %lt = icmp ult i64 0, %5, !dbg !2531
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2531

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2531
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.111, i64 11, ptr @.func.20, i64 10, i32 90), !dbg !2531
  unreachable, !dbg !2531

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2533, metadata !DIExpression()), !dbg !2535
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2536
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2536
  store i64 %7, ptr %len, align 8, !dbg !2536
  br label %loop.cond, !dbg !2537

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2538
  %lt4 = icmp ult i64 0, %8, !dbg !2538
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2538

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2540, metadata !DIExpression()), !dbg !2542
  %9 = load ptr, ptr %self, align 8, !dbg !2543
  %10 = call i16 @std.math.random.Mcg32Random.next_short(ptr %9), !dbg !2544
  store i16 %10, ptr %value, align 2, !dbg !2544
  %11 = load i64, ptr %len, align 8, !dbg !2545
  %le = icmp ule i64 %11, 2, !dbg !2545
  br i1 %le, label %if.then, label %if.exit, !dbg !2545

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2546
  %add = add i64 0, %13, !dbg !2546
  %size = sub i64 %add, 0, !dbg !2546
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2546
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2546
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2548
  %17 = extractvalue %"char[]" %16, 0, !dbg !2548
  %18 = extractvalue %"char[]" %16, 1, !dbg !2549
  %gt = icmp ugt i64 0, %18, !dbg !2549
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2549
  br i1 %19, label %panic5, label %checkok9, !dbg !2549

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2548
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2548
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2548
  %22 = extractvalue %"char[]" %21, 0, !dbg !2548
  %23 = extractvalue %"char[]" %15, 0, !dbg !2548
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2548
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2548
  br label %expr_block.exit, !dbg !2550

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2551
  %32 = extractvalue %"char[]" %31, 0, !dbg !2551
  %33 = extractvalue %"char[]" %31, 1, !dbg !2551
  %gt24 = icmp sgt i64 0, %33, !dbg !2551
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !2551
  br i1 %34, label %panic25, label %checkok32, !dbg !2551

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 2, !dbg !2551
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !2551
  br i1 %35, label %panic34, label %checkok41, !dbg !2551

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2551
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !2551
  %38 = extractvalue %"char[]" %37, 0, !dbg !2551
  %39 = extractvalue %"char[]" %30, 0, !dbg !2551
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !2551
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2551
  %44 = load i64, ptr %len, align 8, !dbg !2552
  %sub = sub i64 %44, 2, !dbg !2552
  store i64 %sub, ptr %len, align 8, !dbg !2552
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2553
  %46 = extractvalue %"char[]" %45, 0, !dbg !2553
  %47 = extractvalue %"char[]" %45, 1, !dbg !2554
  %gt55 = icmp ugt i64 2, %47, !dbg !2554
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2554
  br i1 %48, label %panic56, label %checkok63, !dbg !2554

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 2, !dbg !2553
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !2553
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2553
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !2553
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2553
  br label %loop.cond, !dbg !2553

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.118, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2555
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2555
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2555
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.119, i64 11, ptr @.str.120, i64 22, i32 92, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2558
  unreachable, !dbg !2559

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !2559

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2528
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.20, i64 10, i32 92), !dbg !2528
  unreachable, !dbg !2528

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2548
  unreachable, !dbg !2548

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !2548
  unreachable, !dbg !2548

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !2551
  unreachable, !dbg !2551

panic34:                                          ; preds = %checkok32
  store i64 1, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !2551
  unreachable, !dbg !2551

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !2551
  unreachable, !dbg !2551

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !2553
  unreachable, !dbg !2553
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg32Random.next_int128(ptr %0) #0 comdat !dbg !2560 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !2563
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2563
  br i1 %2, label %panic, label %checkok, !dbg !2563

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2564, metadata !DIExpression()), !dbg !2565
  %3 = load ptr, ptr %self, align 8, !dbg !2566
  %4 = call i64 @std.math.random.Mcg32Random.next_long(ptr %3), !dbg !2568
  %zext = zext i64 %4 to i128, !dbg !2568
  %shl = shl i128 %zext, 64, !dbg !2568
  %5 = freeze i128 %shl, !dbg !2568
  %6 = load ptr, ptr %self, align 8, !dbg !2566
  %7 = call i64 @std.math.random.Mcg32Random.next_long(ptr %6), !dbg !2569
  %zext1 = zext i64 %7 to i128, !dbg !2569
  %add = add i128 %5, %zext1, !dbg !2568
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2565
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.27, i64 11, i32 93), !dbg !2565
  unreachable, !dbg !2565
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg32Random.next_long(ptr %0) #0 comdat !dbg !2570 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2573
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2573
  br i1 %2, label %panic, label %checkok, !dbg !2573

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2574, metadata !DIExpression()), !dbg !2575
  %3 = load ptr, ptr %self, align 8, !dbg !2576
  %4 = call i32 @std.math.random.Mcg32Random.next_int(ptr %3), !dbg !2578
  %zext = zext i32 %4 to i64, !dbg !2578
  %shl = shl i64 %zext, 32, !dbg !2578
  %5 = freeze i64 %shl, !dbg !2578
  %6 = load ptr, ptr %self, align 8, !dbg !2576
  %7 = call i32 @std.math.random.Mcg32Random.next_int(ptr %6), !dbg !2579
  %zext1 = zext i32 %7 to i64, !dbg !2579
  %add = add i64 %5, %zext1, !dbg !2578
  ret i64 %add, !dbg !2578

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2575
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.18, i64 9, i32 94), !dbg !2575
  unreachable, !dbg !2575
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg32Random.next_int(ptr %0) #0 comdat !dbg !2580 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2583
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2583
  br i1 %2, label %panic, label %checkok, !dbg !2583

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2584, metadata !DIExpression()), !dbg !2585
  %3 = load ptr, ptr %self, align 8, !dbg !2586
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !2588
  %zext = zext i16 %4 to i32, !dbg !2588
  %shl = shl i32 %zext, 16, !dbg !2588
  %5 = freeze i32 %shl, !dbg !2588
  %6 = load ptr, ptr %self, align 8, !dbg !2586
  %7 = call i16 @std.math.random.Mcg32Random.next_short(ptr %6), !dbg !2589
  %zext1 = zext i16 %7 to i32, !dbg !2589
  %add = add i32 %5, %zext1, !dbg !2588
  ret i32 %add, !dbg !2588

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2585
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.28, i64 8, i32 95), !dbg !2585
  unreachable, !dbg !2585
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg32Random.next_byte(ptr %0) #0 comdat !dbg !2590 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2593
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2593
  br i1 %2, label %panic, label %checkok, !dbg !2593

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2594, metadata !DIExpression()), !dbg !2595
  %3 = load ptr, ptr %self, align 8, !dbg !2596
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !2597
  %trunc = trunc i16 %4 to i8, !dbg !2597
  ret i8 %trunc, !dbg !2597

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2595
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.30, i64 9, i32 96), !dbg !2595
  unreachable, !dbg !2595
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2598 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2603
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2603
  br i1 %4, label %panic, label %checkok, !dbg !2603

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2604, metadata !DIExpression()), !dbg !2605
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2606, metadata !DIExpression()), !dbg !2607
  %5 = load ptr, ptr %self, align 8, !dbg !2608
  %checknull = icmp eq ptr %5, null, !dbg !2608
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2608
  br i1 %6, label %panic1, label %checkok2, !dbg !2608

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2609, metadata !DIExpression()), !dbg !2611
  store i16 0, ptr %return_value, align 2, !dbg !2611
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !2613
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 2, 1
  %lo = load ptr, ptr %input, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %input, i64 8
  %hi = load i64, ptr %ptradd3, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 2), !dbg !2616
  %11 = load i16, ptr %return_value, align 2, !dbg !2617
  %or = or i16 %11, 1, !dbg !2612
  store i16 %or, ptr %5, align 2, !dbg !2612
  ret void, !dbg !2612

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2605
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.16, i64 8, i32 102), !dbg !2605
  unreachable, !dbg !2605

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2608
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.111, i64 11, ptr @.func.16, i64 8, i32 104), !dbg !2608
  unreachable, !dbg !2608
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Mcg16Random.next_byte(ptr %0) #0 comdat !dbg !2618 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !2621
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2621
  br i1 %2, label %panic, label %checkok, !dbg !2621

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2622, metadata !DIExpression()), !dbg !2623
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2624, metadata !DIExpression()), !dbg !2625
  %3 = load ptr, ptr %self, align 8, !dbg !2626
  store ptr %3, ptr %s, align 8, !dbg !2626
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2627, metadata !DIExpression()), !dbg !2628
  %4 = load ptr, ptr %s, align 8, !dbg !2629
  %checknull = icmp eq ptr %4, null, !dbg !2629
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2629
  br i1 %5, label %panic1, label %checkok2, !dbg !2629

checkok2:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !2629
  %zext = zext i16 %6 to i32, !dbg !2629
  %lshr = lshr i32 %zext, 8, !dbg !2630
  %7 = freeze i32 %lshr, !dbg !2630
  %trunc = trunc i32 %7 to i8, !dbg !2630
  store i8 %trunc, ptr %result, align 1, !dbg !2630
  %8 = load ptr, ptr %s, align 8, !dbg !2631
  %checknull3 = icmp eq ptr %8, null, !dbg !2631
  %9 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !2631
  br i1 %9, label %panic4, label %checkok5, !dbg !2631

checkok5:                                         ; preds = %checkok2
  %10 = load i16, ptr %8, align 2, !dbg !2631
  %mul = mul i16 %10, -27691, !dbg !2632
  store i16 %mul, ptr %8, align 2, !dbg !2632
  %11 = load i8, ptr %result, align 1, !dbg !2633
  ret i8 %11, !dbg !2633

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2623
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.30, i64 9, i32 107), !dbg !2623
  unreachable, !dbg !2623

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2629
  call void %13(ptr @.panic_msg.19, i64 42, ptr @.file.111, i64 11, ptr @.func.30, i64 9, i32 110), !dbg !2629
  unreachable, !dbg !2629

panic4:                                           ; preds = %checkok2
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2631
  call void %14(ptr @.panic_msg.19, i64 42, ptr @.file.111, i64 11, ptr @.func.30, i64 9, i32 111), !dbg !2631
  unreachable, !dbg !2631
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Mcg16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2634 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca ptr, align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2635
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2635
  br i1 %4, label %panic, label %checkok, !dbg !2635

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2636, metadata !DIExpression()), !dbg !2637
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2638, metadata !DIExpression()), !dbg !2639
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2640, metadata !DIExpression()), !dbg !2642
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !2643
  %5 = load i64, ptr %ptradd2, align 8, !dbg !2643
  store i64 %5, ptr %len, align 8, !dbg !2643
  br label %loop.cond, !dbg !2644

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !2645
  %lt = icmp ult i64 0, %6, !dbg !2645
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2645

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2647, metadata !DIExpression()), !dbg !2649
  %7 = load ptr, ptr %self, align 8, !dbg !2650
  %8 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %7), !dbg !2651
  store i8 %8, ptr %value, align 1, !dbg !2651
  %9 = load i64, ptr %len, align 8, !dbg !2652
  %le = icmp ule i64 %9, 1, !dbg !2652
  br i1 %le, label %if.then, label %if.exit, !dbg !2652

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !2653
  %add = add i64 0, %11, !dbg !2653
  %size = sub i64 %add, 0, !dbg !2653
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !2653
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !2653
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !2655
  %15 = extractvalue %"char[]" %14, 0, !dbg !2655
  %16 = extractvalue %"char[]" %14, 1, !dbg !2656
  %gt = icmp ugt i64 0, %16, !dbg !2656
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2656
  br i1 %17, label %panic3, label %checkok7, !dbg !2656

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !2655
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !2655
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !2655
  %20 = extractvalue %"char[]" %19, 0, !dbg !2655
  %21 = extractvalue %"char[]" %13, 0, !dbg !2655
  store %"char[]" %13, ptr %taddr9, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %taddr9, i64 8
  %22 = load i64, ptr %ptradd10, align 8
  store %"char[]" %19, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %23 = load i64, ptr %ptradd12, align 8
  %neq = icmp ne i64 %23, %22
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %24, label %panic13, label %checkok20

checkok20:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !2655
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !2655
  br label %expr_block.exit, !dbg !2657

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr21, align 8
  %26 = load ptr, ptr %taddr21, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !2658
  %30 = extractvalue %"char[]" %29, 0, !dbg !2658
  %31 = extractvalue %"char[]" %29, 1, !dbg !2658
  %gt22 = icmp sgt i64 0, %31, !dbg !2658
  %32 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !2658
  br i1 %32, label %panic23, label %checkok30, !dbg !2658

checkok30:                                        ; preds = %if.exit
  %lt31 = icmp slt i64 %31, 1, !dbg !2658
  %33 = call i1 @llvm.expect.i1(i1 %lt31, i1 false), !dbg !2658
  br i1 %33, label %panic32, label %checkok39, !dbg !2658

checkok39:                                        ; preds = %checkok30
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !2658
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !2658
  %36 = extractvalue %"char[]" %35, 0, !dbg !2658
  %37 = extractvalue %"char[]" %28, 0, !dbg !2658
  store %"char[]" %28, ptr %taddr40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %taddr40, i64 8
  %38 = load i64, ptr %ptradd41, align 8
  store %"char[]" %35, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %39 = load i64, ptr %ptradd43, align 8
  %neq44 = icmp ne i64 %39, %38
  %40 = call i1 @llvm.expect.i1(i1 %neq44, i1 false)
  br i1 %40, label %panic45, label %checkok52

checkok52:                                        ; preds = %checkok39
  %41 = mul i64 %38, 1, !dbg !2658
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !2658
  %42 = load i64, ptr %len, align 8, !dbg !2659
  %sub = sub i64 %42, 1, !dbg !2659
  store i64 %sub, ptr %len, align 8, !dbg !2659
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !2660
  %44 = extractvalue %"char[]" %43, 0, !dbg !2660
  %45 = extractvalue %"char[]" %43, 1, !dbg !2661
  %gt53 = icmp ugt i64 1, %45, !dbg !2661
  %46 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !2661
  br i1 %46, label %panic54, label %checkok61, !dbg !2661

checkok61:                                        ; preds = %checkok52
  %size62 = sub i64 %45, 1, !dbg !2660
  %ptradd63 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !2660
  %47 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !2660
  %48 = insertvalue %"char[]" %47, i64 %size62, 1, !dbg !2660
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !2660
  br label %loop.cond, !dbg !2660

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.121, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2662
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2662
  %hi = load i64, ptr %ptradd64, align 8, !dbg !2662
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.122, i64 11, ptr @.str.123, i64 22, i32 115, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !2665
  unreachable, !dbg !2666

expr_block.exit:                                  ; preds = %checkok20
  ret void, !dbg !2666

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2637
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.20, i64 10, i32 115), !dbg !2637
  unreachable, !dbg !2637

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2655
  unreachable, !dbg !2655

panic13:                                          ; preds = %checkok7
  store i64 %23, ptr %taddr14, align 8
  %55 = insertvalue %any undef, ptr %taddr14, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr15, align 8
  %57 = insertvalue %any undef, ptr %taddr15, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %58, ptr %ptradd17, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !2655
  unreachable, !dbg !2655

panic23:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr24, align 8
  %60 = insertvalue %any undef, ptr %taddr24, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %62 = insertvalue %any undef, ptr %taddr25, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %63, ptr %ptradd27, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg29), !dbg !2658
  unreachable, !dbg !2658

panic32:                                          ; preds = %checkok30
  store i64 0, ptr %taddr33, align 8
  %65 = insertvalue %any undef, ptr %taddr33, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %68, ptr %ptradd36, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg38), !dbg !2658
  unreachable, !dbg !2658

panic45:                                          ; preds = %checkok39
  store i64 %39, ptr %taddr46, align 8
  %70 = insertvalue %any undef, ptr %taddr46, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr47, align 8
  %72 = insertvalue %any undef, ptr %taddr47, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %73, ptr %ptradd49, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg51), !dbg !2658
  unreachable, !dbg !2658

panic54:                                          ; preds = %checkok52
  store i64 %45, ptr %taddr55, align 8
  %75 = insertvalue %any undef, ptr %taddr55, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %77 = insertvalue %any undef, ptr %taddr56, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %78, ptr %ptradd58, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60), !dbg !2660
  unreachable, !dbg !2660
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Mcg16Random.next_int128(ptr %0) #0 comdat !dbg !2667 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !2670
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2670
  br i1 %2, label %panic, label %checkok, !dbg !2670

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2671, metadata !DIExpression()), !dbg !2672
  %3 = load ptr, ptr %self, align 8, !dbg !2673
  %4 = call i64 @std.math.random.Mcg16Random.next_long(ptr %3), !dbg !2675
  %zext = zext i64 %4 to i128, !dbg !2675
  %shl = shl i128 %zext, 64, !dbg !2675
  %5 = freeze i128 %shl, !dbg !2675
  %6 = load ptr, ptr %self, align 8, !dbg !2673
  %7 = call i64 @std.math.random.Mcg16Random.next_long(ptr %6), !dbg !2676
  %zext1 = zext i64 %7 to i128, !dbg !2676
  %add = add i128 %5, %zext1, !dbg !2675
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2672
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.27, i64 11, i32 116), !dbg !2672
  unreachable, !dbg !2672
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Mcg16Random.next_long(ptr %0) #0 comdat !dbg !2677 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2680
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2680
  br i1 %2, label %panic, label %checkok, !dbg !2680

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2681, metadata !DIExpression()), !dbg !2682
  %3 = load ptr, ptr %self, align 8, !dbg !2683
  %4 = call i32 @std.math.random.Mcg16Random.next_int(ptr %3), !dbg !2685
  %zext = zext i32 %4 to i64, !dbg !2685
  %shl = shl i64 %zext, 32, !dbg !2685
  %5 = freeze i64 %shl, !dbg !2685
  %6 = load ptr, ptr %self, align 8, !dbg !2683
  %7 = call i32 @std.math.random.Mcg16Random.next_int(ptr %6), !dbg !2686
  %zext1 = zext i32 %7 to i64, !dbg !2686
  %add = add i64 %5, %zext1, !dbg !2685
  ret i64 %add, !dbg !2685

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2682
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.18, i64 9, i32 117), !dbg !2682
  unreachable, !dbg !2682
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Mcg16Random.next_int(ptr %0) #0 comdat !dbg !2687 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2690
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2690
  br i1 %2, label %panic, label %checkok, !dbg !2690

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2691, metadata !DIExpression()), !dbg !2692
  %3 = load ptr, ptr %self, align 8, !dbg !2693
  %4 = call i16 @std.math.random.Mcg16Random.next_short(ptr %3), !dbg !2695
  %zext = zext i16 %4 to i32, !dbg !2695
  %shl = shl i32 %zext, 16, !dbg !2695
  %5 = freeze i32 %shl, !dbg !2695
  %6 = load ptr, ptr %self, align 8, !dbg !2693
  %7 = call i16 @std.math.random.Mcg16Random.next_short(ptr %6), !dbg !2696
  %zext1 = zext i16 %7 to i32, !dbg !2696
  %add = add i32 %5, %zext1, !dbg !2695
  ret i32 %add, !dbg !2695

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2692
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.28, i64 8, i32 118), !dbg !2692
  unreachable, !dbg !2692
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Mcg16Random.next_short(ptr %0) #0 comdat !dbg !2697 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2700
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2700
  br i1 %2, label %panic, label %checkok, !dbg !2700

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2701, metadata !DIExpression()), !dbg !2702
  %3 = load ptr, ptr %self, align 8, !dbg !2703
  %4 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %3), !dbg !2705
  %zext = zext i8 %4 to i16, !dbg !2705
  %zext1 = zext i16 %zext to i32, !dbg !2705
  %shl = shl i32 %zext1, 8, !dbg !2705
  %5 = freeze i32 %shl, !dbg !2705
  %6 = load ptr, ptr %self, align 8, !dbg !2703
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !2706
  %zext2 = zext i8 %7 to i32, !dbg !2706
  %add = add i32 %5, %zext2, !dbg !2705
  %trunc = trunc i32 %add to i16, !dbg !2705
  ret i16 %trunc, !dbg !2705

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2702
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.111, i64 11, ptr @.func.29, i64 10, i32 119), !dbg !2702
  unreachable, !dbg !2702
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.SimpleRandom.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2707 {
entry:
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %full = alloca [8 x i8], align 1
  %.anon = alloca i64, align 8
  %.anon9 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [1 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %3 = icmp eq ptr %0, null, !dbg !2712
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2712
  br i1 %4, label %panic, label %checkok, !dbg !2712

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2713, metadata !DIExpression()), !dbg !2714
  store ptr %1, ptr %seed, align 8
  %ptradd = getelementptr inbounds i8, ptr %seed, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2715, metadata !DIExpression()), !dbg !2716
  call void @llvm.dbg.declare(metadata ptr %full, metadata !2717, metadata !DIExpression()), !dbg !2719
  store i8 0, ptr %full, align 1, !dbg !2719
  %ptradd1 = getelementptr inbounds i8, ptr %full, i64 1, !dbg !2719
  store i8 0, ptr %ptradd1, align 1, !dbg !2719
  %ptradd2 = getelementptr inbounds i8, ptr %full, i64 2, !dbg !2719
  store i8 0, ptr %ptradd2, align 1, !dbg !2719
  %ptradd3 = getelementptr inbounds i8, ptr %full, i64 3, !dbg !2719
  store i8 0, ptr %ptradd3, align 1, !dbg !2719
  %ptradd4 = getelementptr inbounds i8, ptr %full, i64 4, !dbg !2719
  store i8 0, ptr %ptradd4, align 1, !dbg !2719
  %ptradd5 = getelementptr inbounds i8, ptr %full, i64 5, !dbg !2719
  store i8 0, ptr %ptradd5, align 1, !dbg !2719
  %ptradd6 = getelementptr inbounds i8, ptr %full, i64 6, !dbg !2719
  store i8 0, ptr %ptradd6, align 1, !dbg !2719
  %ptradd7 = getelementptr inbounds i8, ptr %full, i64 7, !dbg !2719
  store i8 0, ptr %ptradd7, align 1, !dbg !2719
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !2720, metadata !DIExpression()), !dbg !2722
  %ptradd8 = getelementptr inbounds i8, ptr %seed, i64 8, !dbg !2722
  %5 = load i64, ptr %ptradd8, align 8, !dbg !2722
  store i64 %5, ptr %.anon, align 8, !dbg !2722
  call void @llvm.dbg.declare(metadata ptr %.anon9, metadata !2720, metadata !DIExpression()), !dbg !2723
  store i64 0, ptr %.anon9, align 8, !dbg !2723
  br label %loop.cond, !dbg !2723

loop.cond:                                        ; preds = %checkok31, %checkok
  %6 = load i64, ptr %.anon9, align 8, !dbg !2723
  %7 = load i64, ptr %.anon, align 8, !dbg !2722
  %lt = icmp ult i64 %6, %7, !dbg !2723
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2723

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !2724, metadata !DIExpression()), !dbg !2726
  %8 = load i64, ptr %.anon9, align 8, !dbg !2726
  store i64 %8, ptr %i, align 8, !dbg !2726
  call void @llvm.dbg.declare(metadata ptr %c, metadata !2727, metadata !DIExpression()), !dbg !2728
  %ptradd10 = getelementptr inbounds i8, ptr %seed, i64 8, !dbg !2729
  %9 = load i64, ptr %ptradd10, align 8, !dbg !2729
  %10 = load ptr, ptr %seed, align 8, !dbg !2729
  %11 = load i64, ptr %.anon9, align 8, !dbg !2726
  %ge = icmp uge i64 %11, %9, !dbg !2726
  %12 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2726
  br i1 %12, label %panic11, label %checkok14, !dbg !2726

checkok14:                                        ; preds = %loop.body
  %ptradd15 = getelementptr inbounds i8, ptr %10, i64 %11, !dbg !2726
  %13 = load i8, ptr %ptradd15, align 1, !dbg !2726
  store i8 %13, ptr %c, align 1, !dbg !2726
  %14 = load i64, ptr %i, align 8, !dbg !2730
  %smod = srem i64 %14, 8, !dbg !2730
  %lt16 = icmp slt i64 %smod, 0, !dbg !2730
  %15 = call i1 @llvm.expect.i1(i1 %lt16, i1 false), !dbg !2730
  br i1 %15, label %panic17, label %checkok22, !dbg !2730

checkok22:                                        ; preds = %checkok14
  %ge23 = icmp sge i64 %smod, 8, !dbg !2730
  %16 = call i1 @llvm.expect.i1(i1 %ge23, i1 false), !dbg !2730
  br i1 %16, label %panic24, label %checkok31, !dbg !2730

checkok31:                                        ; preds = %checkok22
  %ptradd32 = getelementptr inbounds i8, ptr %full, i64 %smod, !dbg !2730
  %17 = load i8, ptr %ptradd32, align 1, !dbg !2730
  %18 = load i8, ptr %c, align 1, !dbg !2732
  %xor = xor i8 %17, %18, !dbg !2733
  store i8 %xor, ptr %ptradd32, align 1, !dbg !2733
  %19 = load i64, ptr %.anon9, align 8, !dbg !2723
  %addnuw = add nuw i64 %19, 1, !dbg !2723
  store i64 %addnuw, ptr %.anon9, align 8, !dbg !2723
  br label %loop.cond, !dbg !2723

loop.exit:                                        ; preds = %loop.cond
  %20 = load ptr, ptr %self, align 8, !dbg !2734
  %checknull = icmp eq ptr %20, null, !dbg !2734
  %21 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2734
  br i1 %21, label %panic33, label %checkok34, !dbg !2734

checkok34:                                        ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %full, i32 8, i1 false)
  call void @llvm.dbg.declare(metadata ptr %x, metadata !2735, metadata !DIExpression()), !dbg !2737
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !2739
  %22 = load i64, ptr %x, align 8, !dbg !2740
  %xor35 = xor i64 %22, 25214903917, !dbg !2741
  %and = and i64 %xor35, 281474976710655, !dbg !2741
  store i64 %and, ptr %20, align 8, !dbg !2741
  ret void, !dbg !2741

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2714
  call void %23(ptr @.panic_msg.14, i64 62, ptr @.file.126, i64 21, ptr @.func.16, i64 8, i32 6), !dbg !2714
  unreachable, !dbg !2714

panic11:                                          ; preds = %loop.body
  store i64 %9, ptr %taddr, align 8
  %24 = insertvalue %any undef, ptr %taddr, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr12, align 8
  %26 = insertvalue %any undef, ptr %taddr12, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %27, ptr %ptradd13, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.126, i64 21, ptr @.func.16, i64 8, i32 9, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2726
  unreachable, !dbg !2726

panic17:                                          ; preds = %checkok14
  store i64 %smod, ptr %taddr18, align 8
  %29 = insertvalue %any undef, ptr %taddr18, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %30, ptr %varargslots19, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp20" = insertvalue %"any[]" %31, i64 1, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.101, i64 38, ptr @.file.126, i64 21, ptr @.func.16, i64 8, i32 11, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !2730
  unreachable, !dbg !2730

panic24:                                          ; preds = %checkok22
  store i64 8, ptr %taddr25, align 8
  %32 = insertvalue %any undef, ptr %taddr25, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod, ptr %taddr26, align 8
  %34 = insertvalue %any undef, ptr %taddr26, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %33, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %35, ptr %ptradd28, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %36, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.100, i64 59, ptr @.file.126, i64 21, ptr @.func.16, i64 8, i32 11, ptr byval(%"any[]") align 8 %indirectarg30), !dbg !2730
  unreachable, !dbg !2730

panic33:                                          ; preds = %loop.exit
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2734
  call void %37(ptr @.panic_msg.17, i64 45, ptr @.file.126, i64 21, ptr @.func.16, i64 8, i32 13), !dbg !2734
  unreachable, !dbg !2734
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.SimpleRandom.next_int(ptr %0) #0 comdat !dbg !2742 {
entry:
  %self = alloca ptr, align 8
  %nextseed = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !2745
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2745
  br i1 %2, label %panic, label %checkok, !dbg !2745

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2746, metadata !DIExpression()), !dbg !2747
  call void @llvm.dbg.declare(metadata ptr %nextseed, metadata !2748, metadata !DIExpression()), !dbg !2749
  %3 = load ptr, ptr %self, align 8, !dbg !2750
  %checknull = icmp eq ptr %3, null, !dbg !2750
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2750
  br i1 %4, label %panic1, label %checkok2, !dbg !2750

checkok2:                                         ; preds = %checkok
  %5 = load i64, ptr %3, align 8, !dbg !2750
  %mul = mul i64 %5, 25214903917, !dbg !2751
  %add = add i64 %mul, 11, !dbg !2751
  %and = and i64 %add, 281474976710655, !dbg !2751
  store i64 %and, ptr %nextseed, align 8, !dbg !2751
  %6 = load ptr, ptr %self, align 8, !dbg !2752
  %checknull3 = icmp eq ptr %6, null, !dbg !2752
  %7 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !2752
  br i1 %7, label %panic4, label %checkok5, !dbg !2752

checkok5:                                         ; preds = %checkok2
  %8 = load i64, ptr %nextseed, align 8, !dbg !2753
  store i64 %8, ptr %6, align 8, !dbg !2753
  %9 = load i64, ptr %nextseed, align 8, !dbg !2754
  %lshr = lshr i64 %9, 16, !dbg !2755
  %10 = freeze i64 %lshr, !dbg !2755
  %trunc = trunc i64 %10 to i32, !dbg !2755
  ret i32 %trunc, !dbg !2755

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2747
  call void %11(ptr @.panic_msg.14, i64 62, ptr @.file.126, i64 21, ptr @.func.28, i64 8, i32 16), !dbg !2747
  unreachable, !dbg !2747

panic1:                                           ; preds = %checkok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2750
  call void %12(ptr @.panic_msg.17, i64 45, ptr @.file.126, i64 21, ptr @.func.28, i64 8, i32 18), !dbg !2750
  unreachable, !dbg !2750

panic4:                                           ; preds = %checkok2
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2752
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.126, i64 21, ptr @.func.28, i64 8, i32 19), !dbg !2752
  unreachable, !dbg !2752
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.SimpleRandom.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2756 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2757
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2757
  br i1 %4, label %panic, label %checkok, !dbg !2757

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2758, metadata !DIExpression()), !dbg !2759
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2760, metadata !DIExpression()), !dbg !2761
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2762
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2762
  %lt = icmp ult i64 0, %5, !dbg !2762
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2762

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2762
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.126, i64 21, ptr @.func.20, i64 10, i32 24), !dbg !2762
  unreachable, !dbg !2762

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2764, metadata !DIExpression()), !dbg !2766
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2767
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2767
  store i64 %7, ptr %len, align 8, !dbg !2767
  br label %loop.cond, !dbg !2768

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2769
  %lt4 = icmp ult i64 0, %8, !dbg !2769
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2769

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2771, metadata !DIExpression()), !dbg !2773
  %9 = load ptr, ptr %self, align 8, !dbg !2774
  %10 = call i32 @std.math.random.SimpleRandom.next_int(ptr %9), !dbg !2775
  store i32 %10, ptr %value, align 4, !dbg !2775
  %11 = load i64, ptr %len, align 8, !dbg !2776
  %le = icmp ule i64 %11, 4, !dbg !2776
  br i1 %le, label %if.then, label %if.exit, !dbg !2776

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2777
  %add = add i64 0, %13, !dbg !2777
  %size = sub i64 %add, 0, !dbg !2777
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2777
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2777
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2779
  %17 = extractvalue %"char[]" %16, 0, !dbg !2779
  %18 = extractvalue %"char[]" %16, 1, !dbg !2780
  %gt = icmp ugt i64 0, %18, !dbg !2780
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2780
  br i1 %19, label %panic5, label %checkok9, !dbg !2780

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2779
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2779
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2779
  %22 = extractvalue %"char[]" %21, 0, !dbg !2779
  %23 = extractvalue %"char[]" %15, 0, !dbg !2779
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2779
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2779
  br label %expr_block.exit, !dbg !2781

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2782
  %32 = extractvalue %"char[]" %31, 0, !dbg !2782
  %33 = extractvalue %"char[]" %31, 1, !dbg !2782
  %gt24 = icmp sgt i64 0, %33, !dbg !2782
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !2782
  br i1 %34, label %panic25, label %checkok32, !dbg !2782

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 4, !dbg !2782
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !2782
  br i1 %35, label %panic34, label %checkok41, !dbg !2782

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2782
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !2782
  %38 = extractvalue %"char[]" %37, 0, !dbg !2782
  %39 = extractvalue %"char[]" %30, 0, !dbg !2782
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !2782
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2782
  %44 = load i64, ptr %len, align 8, !dbg !2783
  %sub = sub i64 %44, 4, !dbg !2783
  store i64 %sub, ptr %len, align 8, !dbg !2783
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2784
  %46 = extractvalue %"char[]" %45, 0, !dbg !2784
  %47 = extractvalue %"char[]" %45, 1, !dbg !2785
  %gt55 = icmp ugt i64 4, %47, !dbg !2785
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2785
  br i1 %48, label %panic56, label %checkok63, !dbg !2785

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 4, !dbg !2784
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !2784
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2784
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !2784
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2784
  br label %loop.cond, !dbg !2784

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.127, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2786
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2786
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2786
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.128, i64 21, ptr @.str.129, i64 23, i32 26, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2789
  unreachable, !dbg !2790

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !2790

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2759
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.126, i64 21, ptr @.func.20, i64 10, i32 26), !dbg !2759
  unreachable, !dbg !2759

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2779
  unreachable, !dbg !2779

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !2779
  unreachable, !dbg !2779

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !2782
  unreachable, !dbg !2782

panic34:                                          ; preds = %checkok32
  store i64 3, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !2782
  unreachable, !dbg !2782

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !2782
  unreachable, !dbg !2782

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !2784
  unreachable, !dbg !2784
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.SimpleRandom.next_int128(ptr %0) #0 comdat !dbg !2791 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !2794
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2794
  br i1 %2, label %panic, label %checkok, !dbg !2794

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2795, metadata !DIExpression()), !dbg !2796
  %3 = load ptr, ptr %self, align 8, !dbg !2797
  %4 = call i64 @std.math.random.SimpleRandom.next_long(ptr %3), !dbg !2799
  %zext = zext i64 %4 to i128, !dbg !2799
  %shl = shl i128 %zext, 64, !dbg !2799
  %5 = freeze i128 %shl, !dbg !2799
  %6 = load ptr, ptr %self, align 8, !dbg !2797
  %7 = call i64 @std.math.random.SimpleRandom.next_long(ptr %6), !dbg !2800
  %zext1 = zext i64 %7 to i128, !dbg !2800
  %add = add i128 %5, %zext1, !dbg !2799
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2796
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.126, i64 21, ptr @.func.27, i64 11, i32 27), !dbg !2796
  unreachable, !dbg !2796
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.SimpleRandom.next_long(ptr %0) #0 comdat !dbg !2801 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2804
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2804
  br i1 %2, label %panic, label %checkok, !dbg !2804

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2805, metadata !DIExpression()), !dbg !2806
  %3 = load ptr, ptr %self, align 8, !dbg !2807
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2809
  %zext = zext i32 %4 to i64, !dbg !2809
  %shl = shl i64 %zext, 32, !dbg !2809
  %5 = freeze i64 %shl, !dbg !2809
  %6 = load ptr, ptr %self, align 8, !dbg !2807
  %7 = call i32 @std.math.random.SimpleRandom.next_int(ptr %6), !dbg !2810
  %zext1 = zext i32 %7 to i64, !dbg !2810
  %add = add i64 %5, %zext1, !dbg !2809
  ret i64 %add, !dbg !2809

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2806
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.126, i64 21, ptr @.func.18, i64 9, i32 28), !dbg !2806
  unreachable, !dbg !2806
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.SimpleRandom.next_short(ptr %0) #0 comdat !dbg !2811 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2814
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2814
  br i1 %2, label %panic, label %checkok, !dbg !2814

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2815, metadata !DIExpression()), !dbg !2816
  %3 = load ptr, ptr %self, align 8, !dbg !2817
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2818
  %trunc = trunc i32 %4 to i16, !dbg !2818
  ret i16 %trunc, !dbg !2818

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2816
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.126, i64 21, ptr @.func.29, i64 10, i32 29), !dbg !2816
  unreachable, !dbg !2816
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.SimpleRandom.next_byte(ptr %0) #0 comdat !dbg !2819 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2822
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2822
  br i1 %2, label %panic, label %checkok, !dbg !2822

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2823, metadata !DIExpression()), !dbg !2824
  %3 = load ptr, ptr %self, align 8, !dbg !2825
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2826
  %trunc = trunc i32 %4 to i8, !dbg !2826
  ret i8 %trunc, !dbg !2826

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2824
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.126, i64 21, ptr @.func.30, i64 9, i32 30), !dbg !2824
  unreachable, !dbg !2824
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg128Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2827 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca i128, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2832
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2832
  br i1 %4, label %panic, label %checkok, !dbg !2832

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2833, metadata !DIExpression()), !dbg !2834
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !2835, metadata !DIExpression()), !dbg !2836
  %5 = load ptr, ptr %self, align 8, !dbg !2837
  %checknull = icmp eq ptr %5, null, !dbg !2837
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2837
  br i1 %6, label %panic1, label %checkok2, !dbg !2837

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2838, metadata !DIExpression()), !dbg !2840
  store i128 0, ptr %return_value, align 8, !dbg !2840
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !2842
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 16, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 16), !dbg !2845
  %11 = load i128, ptr %return_value, align 8, !dbg !2846
  store i128 %11, ptr %5, align 8, !dbg !2846
  ret void, !dbg !2846

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2834
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.16, i64 8, i32 20), !dbg !2834
  unreachable, !dbg !2834

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2837
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.145, i64 11, ptr @.func.16, i64 8, i32 22), !dbg !2837
  unreachable, !dbg !2837
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg128Random.next_long(ptr %0) #0 comdat !dbg !2847 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i128, align 8
  %rot = alloca i8, align 1
  %self19 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !2850
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2850
  br i1 %2, label %panic, label %checkok, !dbg !2850

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2851, metadata !DIExpression()), !dbg !2852
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2853, metadata !DIExpression()), !dbg !2854
  %3 = load ptr, ptr %self, align 8, !dbg !2855
  store ptr %3, ptr %s, align 8, !dbg !2855
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !2856, metadata !DIExpression()), !dbg !2857
  %4 = load ptr, ptr %s, align 8, !dbg !2858
  %checknull = icmp eq ptr %4, null, !dbg !2858
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2858
  br i1 %5, label %panic1, label %checkok2, !dbg !2858

checkok2:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 8, !dbg !2858
  %7 = load ptr, ptr %s, align 8, !dbg !2859
  %checknull3 = icmp eq ptr %7, null, !dbg !2859
  %8 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !2859
  br i1 %8, label %panic4, label %checkok5, !dbg !2859

checkok5:                                         ; preds = %checkok2
  %9 = load i128, ptr %7, align 8, !dbg !2859
  %lshr = lshr i128 %9, 35, !dbg !2860
  %10 = freeze i128 %lshr, !dbg !2860
  %xor6 = xor i128 %6, %10, !dbg !2861
  store i128 %xor6, ptr %xor, align 8, !dbg !2861
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !2862, metadata !DIExpression()), !dbg !2863
  %11 = load ptr, ptr %s, align 8, !dbg !2864
  %checknull7 = icmp eq ptr %11, null, !dbg !2864
  %12 = call i1 @llvm.expect.i1(i1 %checknull7, i1 false), !dbg !2864
  br i1 %12, label %panic8, label %checkok9, !dbg !2864

checkok9:                                         ; preds = %checkok5
  %13 = load i128, ptr %11, align 8, !dbg !2864
  %lshr10 = lshr i128 %13, 122, !dbg !2865
  %14 = freeze i128 %lshr10, !dbg !2865
  %trunc = trunc i128 %14 to i8, !dbg !2865
  store i8 %trunc, ptr %rot, align 1, !dbg !2865
  %15 = load ptr, ptr %s, align 8, !dbg !2866
  %checknull11 = icmp eq ptr %15, null, !dbg !2866
  %16 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !2866
  br i1 %16, label %panic12, label %checkok13, !dbg !2866

checkok13:                                        ; preds = %checkok9
  %17 = load ptr, ptr %s, align 8, !dbg !2867
  %checknull14 = icmp eq ptr %17, null, !dbg !2867
  %18 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !2867
  br i1 %18, label %panic15, label %checkok16, !dbg !2867

checkok16:                                        ; preds = %checkok13
  %19 = load i128, ptr %17, align 8, !dbg !2867
  %mul = mul i128 %19, -48899967401452674293065485854872568811, !dbg !2868
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !2868
  store i128 %add, ptr %15, align 8, !dbg !2868
  %20 = load i128, ptr %xor, align 8, !dbg !2869
  %lshr17 = lshr i128 %20, 58, !dbg !2870
  %21 = freeze i128 %lshr17, !dbg !2870
  %trunc18 = trunc i128 %21 to i64, !dbg !2870
  store i64 %trunc18, ptr %self19, align 8
  %22 = load i8, ptr %rot, align 1, !dbg !2871
  %zext = zext i8 %22 to i64, !dbg !2871
  store i64 %zext, ptr %shift, align 8
  %23 = load i64, ptr %self19, align 8, !dbg !2872
  %24 = load i64, ptr %self19, align 8, !dbg !2874
  %25 = load i64, ptr %shift, align 8, !dbg !2875
  %26 = call i64 @llvm.fshr.i64(i64 %23, i64 %24, i64 %25), !dbg !2875
  ret i64 %26, !dbg !2875

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2852
  call void %27(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.18, i64 9, i32 26), !dbg !2852
  unreachable, !dbg !2852

panic1:                                           ; preds = %checkok
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2858
  call void %28(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.18, i64 9, i32 30), !dbg !2858
  unreachable, !dbg !2858

panic4:                                           ; preds = %checkok2
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2859
  call void %29(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.18, i64 9, i32 30), !dbg !2859
  unreachable, !dbg !2859

panic8:                                           ; preds = %checkok5
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2864
  call void %30(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.18, i64 9, i32 31), !dbg !2864
  unreachable, !dbg !2864

panic12:                                          ; preds = %checkok9
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2866
  call void %31(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.18, i64 9, i32 32), !dbg !2866
  unreachable, !dbg !2866

panic15:                                          ; preds = %checkok13
  %32 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2867
  call void %32(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.18, i64 9, i32 32), !dbg !2867
  unreachable, !dbg !2867
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg128Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2876 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2877
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2877
  br i1 %4, label %panic, label %checkok, !dbg !2877

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2878, metadata !DIExpression()), !dbg !2879
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2880, metadata !DIExpression()), !dbg !2881
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2882
  %5 = load i64, ptr %ptradd1, align 8, !dbg !2882
  %lt = icmp ult i64 0, %5, !dbg !2882
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2882

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2882
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.145, i64 11, ptr @.func.20, i64 10, i32 37), !dbg !2882
  unreachable, !dbg !2882

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2884, metadata !DIExpression()), !dbg !2886
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !2887
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2887
  store i64 %7, ptr %len, align 8, !dbg !2887
  br label %loop.cond, !dbg !2888

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !2889
  %lt4 = icmp ult i64 0, %8, !dbg !2889
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !2889

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2891, metadata !DIExpression()), !dbg !2893
  %9 = load ptr, ptr %self, align 8, !dbg !2894
  %10 = call i64 @std.math.random.Pcg128Random.next_long(ptr %9), !dbg !2895
  store i64 %10, ptr %value, align 8, !dbg !2895
  %11 = load i64, ptr %len, align 8, !dbg !2896
  %le = icmp ule i64 %11, 8, !dbg !2896
  br i1 %le, label %if.then, label %if.exit, !dbg !2896

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !2897
  %add = add i64 0, %13, !dbg !2897
  %size = sub i64 %add, 0, !dbg !2897
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2897
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2897
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !2899
  %17 = extractvalue %"char[]" %16, 0, !dbg !2899
  %18 = extractvalue %"char[]" %16, 1, !dbg !2900
  %gt = icmp ugt i64 0, %18, !dbg !2900
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2900
  br i1 %19, label %panic5, label %checkok9, !dbg !2900

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !2899
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2899
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !2899
  %22 = extractvalue %"char[]" %21, 0, !dbg !2899
  %23 = extractvalue %"char[]" %15, 0, !dbg !2899
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !2899
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !2899
  br label %expr_block.exit, !dbg !2901

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 8, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !2902
  %32 = extractvalue %"char[]" %31, 0, !dbg !2902
  %33 = extractvalue %"char[]" %31, 1, !dbg !2902
  %gt24 = icmp sgt i64 0, %33, !dbg !2902
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !2902
  br i1 %34, label %panic25, label %checkok32, !dbg !2902

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 8, !dbg !2902
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !2902
  br i1 %35, label %panic34, label %checkok41, !dbg !2902

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2902
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !2902
  %38 = extractvalue %"char[]" %37, 0, !dbg !2902
  %39 = extractvalue %"char[]" %30, 0, !dbg !2902
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !2902
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2902
  %44 = load i64, ptr %len, align 8, !dbg !2903
  %sub = sub i64 %44, 8, !dbg !2903
  store i64 %sub, ptr %len, align 8, !dbg !2903
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !2904
  %46 = extractvalue %"char[]" %45, 0, !dbg !2904
  %47 = extractvalue %"char[]" %45, 1, !dbg !2905
  %gt55 = icmp ugt i64 8, %47, !dbg !2905
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !2905
  br i1 %48, label %panic56, label %checkok63, !dbg !2905

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 8, !dbg !2904
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !2904
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2904
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !2904
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !2904
  br label %loop.cond, !dbg !2904

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.146, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2906
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2906
  %hi = load i64, ptr %ptradd66, align 8, !dbg !2906
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.147, i64 11, ptr @.str.148, i64 23, i32 39, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !2909
  unreachable, !dbg !2910

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !2910

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2879
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.20, i64 10, i32 39), !dbg !2879
  unreachable, !dbg !2879

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2899
  unreachable, !dbg !2899

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !2899
  unreachable, !dbg !2899

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !2902
  unreachable, !dbg !2902

panic34:                                          ; preds = %checkok32
  store i64 7, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !2902
  unreachable, !dbg !2902

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !2902
  unreachable, !dbg !2902

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !2904
  unreachable, !dbg !2904
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg128Random.next_int128(ptr %0) #0 comdat !dbg !2911 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !2914
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2914
  br i1 %2, label %panic, label %checkok, !dbg !2914

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2915, metadata !DIExpression()), !dbg !2916
  %3 = load ptr, ptr %self, align 8, !dbg !2917
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !2919
  %zext = zext i64 %4 to i128, !dbg !2919
  %shl = shl i128 %zext, 64, !dbg !2919
  %5 = freeze i128 %shl, !dbg !2919
  %6 = load ptr, ptr %self, align 8, !dbg !2917
  %7 = call i64 @std.math.random.Pcg128Random.next_long(ptr %6), !dbg !2920
  %zext1 = zext i64 %7 to i128, !dbg !2920
  %add = add i128 %5, %zext1, !dbg !2919
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2916
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.27, i64 11, i32 40), !dbg !2916
  unreachable, !dbg !2916
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg128Random.next_int(ptr %0) #0 comdat !dbg !2921 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2924
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2924
  br i1 %2, label %panic, label %checkok, !dbg !2924

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2925, metadata !DIExpression()), !dbg !2926
  %3 = load ptr, ptr %self, align 8, !dbg !2927
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !2928
  %trunc = trunc i64 %4 to i32, !dbg !2928
  ret i32 %trunc, !dbg !2928

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2926
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.28, i64 8, i32 41), !dbg !2926
  unreachable, !dbg !2926
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg128Random.next_short(ptr %0) #0 comdat !dbg !2929 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2932
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2932
  br i1 %2, label %panic, label %checkok, !dbg !2932

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2933, metadata !DIExpression()), !dbg !2934
  %3 = load ptr, ptr %self, align 8, !dbg !2935
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !2936
  %trunc = trunc i64 %4 to i16, !dbg !2936
  ret i16 %trunc, !dbg !2936

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2934
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.29, i64 10, i32 42), !dbg !2934
  unreachable, !dbg !2934
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg128Random.next_byte(ptr %0) #0 comdat !dbg !2937 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2940
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2940
  br i1 %2, label %panic, label %checkok, !dbg !2940

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2941, metadata !DIExpression()), !dbg !2942
  %3 = load ptr, ptr %self, align 8, !dbg !2943
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !2944
  %trunc = trunc i64 %4 to i8, !dbg !2944
  ret i8 %trunc, !dbg !2944

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2942
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.30, i64 9, i32 43), !dbg !2942
  unreachable, !dbg !2942
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg64Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2945 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !2950
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2950
  br i1 %4, label %panic, label %checkok, !dbg !2950

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2951, metadata !DIExpression()), !dbg !2952
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !2953, metadata !DIExpression()), !dbg !2954
  %5 = load ptr, ptr %self, align 8, !dbg !2955
  %checknull = icmp eq ptr %5, null, !dbg !2955
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2955
  br i1 %6, label %panic1, label %checkok2, !dbg !2955

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2956, metadata !DIExpression()), !dbg !2958
  store i64 0, ptr %return_value, align 8, !dbg !2958
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !2960
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 8, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 8), !dbg !2963
  %11 = load i64, ptr %return_value, align 8, !dbg !2964
  store i64 %11, ptr %5, align 8, !dbg !2964
  ret void, !dbg !2964

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2952
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.16, i64 8, i32 49), !dbg !2952
  unreachable, !dbg !2952

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2955
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.145, i64 11, ptr @.func.16, i64 8, i32 51), !dbg !2955
  unreachable, !dbg !2955
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg64Random.next_int(ptr %0) #0 comdat !dbg !2965 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i64, align 8
  %rot = alloca i8, align 1
  %self19 = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !2968
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2968
  br i1 %2, label %panic, label %checkok, !dbg !2968

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2969, metadata !DIExpression()), !dbg !2970
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2971, metadata !DIExpression()), !dbg !2972
  %3 = load ptr, ptr %self, align 8, !dbg !2973
  store ptr %3, ptr %s, align 8, !dbg !2973
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !2974, metadata !DIExpression()), !dbg !2975
  %4 = load ptr, ptr %s, align 8, !dbg !2976
  %checknull = icmp eq ptr %4, null, !dbg !2976
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2976
  br i1 %5, label %panic1, label %checkok2, !dbg !2976

checkok2:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !2976
  %7 = load ptr, ptr %s, align 8, !dbg !2977
  %checknull3 = icmp eq ptr %7, null, !dbg !2977
  %8 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !2977
  br i1 %8, label %panic4, label %checkok5, !dbg !2977

checkok5:                                         ; preds = %checkok2
  %9 = load i64, ptr %7, align 8, !dbg !2977
  %lshr = lshr i64 %9, 18, !dbg !2978
  %10 = freeze i64 %lshr, !dbg !2978
  %xor6 = xor i64 %6, %10, !dbg !2979
  store i64 %xor6, ptr %xor, align 8, !dbg !2979
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !2980, metadata !DIExpression()), !dbg !2981
  %11 = load ptr, ptr %s, align 8, !dbg !2982
  %checknull7 = icmp eq ptr %11, null, !dbg !2982
  %12 = call i1 @llvm.expect.i1(i1 %checknull7, i1 false), !dbg !2982
  br i1 %12, label %panic8, label %checkok9, !dbg !2982

checkok9:                                         ; preds = %checkok5
  %13 = load i64, ptr %11, align 8, !dbg !2982
  %lshr10 = lshr i64 %13, 59, !dbg !2983
  %14 = freeze i64 %lshr10, !dbg !2983
  %trunc = trunc i64 %14 to i8, !dbg !2983
  store i8 %trunc, ptr %rot, align 1, !dbg !2983
  %15 = load ptr, ptr %s, align 8, !dbg !2984
  %checknull11 = icmp eq ptr %15, null, !dbg !2984
  %16 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !2984
  br i1 %16, label %panic12, label %checkok13, !dbg !2984

checkok13:                                        ; preds = %checkok9
  %17 = load ptr, ptr %s, align 8, !dbg !2985
  %checknull14 = icmp eq ptr %17, null, !dbg !2985
  %18 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !2985
  br i1 %18, label %panic15, label %checkok16, !dbg !2985

checkok16:                                        ; preds = %checkok13
  %19 = load i64, ptr %17, align 8, !dbg !2985
  %mul = mul i64 %19, -3372029247567499371, !dbg !2986
  %add = add i64 %mul, -7046029254386353131, !dbg !2986
  store i64 %add, ptr %15, align 8, !dbg !2986
  %20 = load i64, ptr %xor, align 8, !dbg !2987
  %lshr17 = lshr i64 %20, 27, !dbg !2988
  %21 = freeze i64 %lshr17, !dbg !2988
  %trunc18 = trunc i64 %21 to i32, !dbg !2988
  store i32 %trunc18, ptr %self19, align 4
  %22 = load i8, ptr %rot, align 1, !dbg !2989
  %zext = zext i8 %22 to i32, !dbg !2989
  store i32 %zext, ptr %shift, align 4
  %23 = load i32, ptr %self19, align 4, !dbg !2990
  %24 = load i32, ptr %self19, align 4, !dbg !2992
  %25 = load i32, ptr %shift, align 4, !dbg !2993
  %26 = call i32 @llvm.fshr.i32(i32 %23, i32 %24, i32 %25), !dbg !2993
  ret i32 %26, !dbg !2993

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2970
  call void %27(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.28, i64 8, i32 54), !dbg !2970
  unreachable, !dbg !2970

panic1:                                           ; preds = %checkok
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2976
  call void %28(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.28, i64 8, i32 58), !dbg !2976
  unreachable, !dbg !2976

panic4:                                           ; preds = %checkok2
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2977
  call void %29(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.28, i64 8, i32 58), !dbg !2977
  unreachable, !dbg !2977

panic8:                                           ; preds = %checkok5
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2982
  call void %30(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.28, i64 8, i32 59), !dbg !2982
  unreachable, !dbg !2982

panic12:                                          ; preds = %checkok9
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2984
  call void %31(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.28, i64 8, i32 60), !dbg !2984
  unreachable, !dbg !2984

panic15:                                          ; preds = %checkok13
  %32 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2985
  call void %32(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.28, i64 8, i32 60), !dbg !2985
  unreachable, !dbg !2985
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg64Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !2994 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !2995
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2995
  br i1 %4, label %panic, label %checkok, !dbg !2995

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2996, metadata !DIExpression()), !dbg !2997
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2998, metadata !DIExpression()), !dbg !2999
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3000
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3000
  %lt = icmp ult i64 0, %5, !dbg !3000
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3000

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3000
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.145, i64 11, ptr @.func.20, i64 10, i32 65), !dbg !3000
  unreachable, !dbg !3000

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3002, metadata !DIExpression()), !dbg !3004
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !3005
  %7 = load i64, ptr %ptradd3, align 8, !dbg !3005
  store i64 %7, ptr %len, align 8, !dbg !3005
  br label %loop.cond, !dbg !3006

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !3007
  %lt4 = icmp ult i64 0, %8, !dbg !3007
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !3007

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !3009, metadata !DIExpression()), !dbg !3011
  %9 = load ptr, ptr %self, align 8, !dbg !3012
  %10 = call i32 @std.math.random.Pcg64Random.next_int(ptr %9), !dbg !3013
  store i32 %10, ptr %value, align 4, !dbg !3013
  %11 = load i64, ptr %len, align 8, !dbg !3014
  %le = icmp ule i64 %11, 4, !dbg !3014
  br i1 %le, label %if.then, label %if.exit, !dbg !3014

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !3015
  %add = add i64 0, %13, !dbg !3015
  %size = sub i64 %add, 0, !dbg !3015
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !3015
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !3015
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !3017
  %17 = extractvalue %"char[]" %16, 0, !dbg !3017
  %18 = extractvalue %"char[]" %16, 1, !dbg !3018
  %gt = icmp ugt i64 0, %18, !dbg !3018
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3018
  br i1 %19, label %panic5, label %checkok9, !dbg !3018

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !3017
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !3017
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !3017
  %22 = extractvalue %"char[]" %21, 0, !dbg !3017
  %23 = extractvalue %"char[]" %15, 0, !dbg !3017
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !3017
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !3017
  br label %expr_block.exit, !dbg !3019

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 4, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !3020
  %32 = extractvalue %"char[]" %31, 0, !dbg !3020
  %33 = extractvalue %"char[]" %31, 1, !dbg !3020
  %gt24 = icmp sgt i64 0, %33, !dbg !3020
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !3020
  br i1 %34, label %panic25, label %checkok32, !dbg !3020

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 4, !dbg !3020
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !3020
  br i1 %35, label %panic34, label %checkok41, !dbg !3020

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !3020
  %37 = insertvalue %"char[]" %36, i64 4, 1, !dbg !3020
  %38 = extractvalue %"char[]" %37, 0, !dbg !3020
  %39 = extractvalue %"char[]" %30, 0, !dbg !3020
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !3020
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !3020
  %44 = load i64, ptr %len, align 8, !dbg !3021
  %sub = sub i64 %44, 4, !dbg !3021
  store i64 %sub, ptr %len, align 8, !dbg !3021
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !3022
  %46 = extractvalue %"char[]" %45, 0, !dbg !3022
  %47 = extractvalue %"char[]" %45, 1, !dbg !3023
  %gt55 = icmp ugt i64 4, %47, !dbg !3023
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !3023
  br i1 %48, label %panic56, label %checkok63, !dbg !3023

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 4, !dbg !3022
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 4, !dbg !3022
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !3022
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !3022
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !3022
  br label %loop.cond, !dbg !3022

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.149, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3024
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3024
  %hi = load i64, ptr %ptradd66, align 8, !dbg !3024
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.150, i64 11, ptr @.str.151, i64 22, i32 67, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !3027
  unreachable, !dbg !3028

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !3028

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2997
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.20, i64 10, i32 67), !dbg !2997
  unreachable, !dbg !2997

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3017
  unreachable, !dbg !3017

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !3017
  unreachable, !dbg !3017

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !3020
  unreachable, !dbg !3020

panic34:                                          ; preds = %checkok32
  store i64 3, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !3020
  unreachable, !dbg !3020

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !3020
  unreachable, !dbg !3020

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !3022
  unreachable, !dbg !3022
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg64Random.next_int128(ptr %0) #0 comdat !dbg !3029 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !3032
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3032
  br i1 %2, label %panic, label %checkok, !dbg !3032

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3033, metadata !DIExpression()), !dbg !3034
  %3 = load ptr, ptr %self, align 8, !dbg !3035
  %4 = call i64 @std.math.random.Pcg64Random.next_long(ptr %3), !dbg !3037
  %zext = zext i64 %4 to i128, !dbg !3037
  %shl = shl i128 %zext, 64, !dbg !3037
  %5 = freeze i128 %shl, !dbg !3037
  %6 = load ptr, ptr %self, align 8, !dbg !3035
  %7 = call i64 @std.math.random.Pcg64Random.next_long(ptr %6), !dbg !3038
  %zext1 = zext i64 %7 to i128, !dbg !3038
  %add = add i128 %5, %zext1, !dbg !3037
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3034
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.27, i64 11, i32 68), !dbg !3034
  unreachable, !dbg !3034
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg64Random.next_long(ptr %0) #0 comdat !dbg !3039 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3042
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3042
  br i1 %2, label %panic, label %checkok, !dbg !3042

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3043, metadata !DIExpression()), !dbg !3044
  %3 = load ptr, ptr %self, align 8, !dbg !3045
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !3047
  %zext = zext i32 %4 to i64, !dbg !3047
  %shl = shl i64 %zext, 32, !dbg !3047
  %5 = freeze i64 %shl, !dbg !3047
  %6 = load ptr, ptr %self, align 8, !dbg !3045
  %7 = call i32 @std.math.random.Pcg64Random.next_int(ptr %6), !dbg !3048
  %zext1 = zext i32 %7 to i64, !dbg !3048
  %add = add i64 %5, %zext1, !dbg !3047
  ret i64 %add, !dbg !3047

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3044
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.18, i64 9, i32 69), !dbg !3044
  unreachable, !dbg !3044
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg64Random.next_short(ptr %0) #0 comdat !dbg !3049 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3052
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3052
  br i1 %2, label %panic, label %checkok, !dbg !3052

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3053, metadata !DIExpression()), !dbg !3054
  %3 = load ptr, ptr %self, align 8, !dbg !3055
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !3056
  %trunc = trunc i32 %4 to i16, !dbg !3056
  ret i16 %trunc, !dbg !3056

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3054
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.29, i64 10, i32 70), !dbg !3054
  unreachable, !dbg !3054
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg64Random.next_byte(ptr %0) #0 comdat !dbg !3057 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3060
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3060
  br i1 %2, label %panic, label %checkok, !dbg !3060

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3061, metadata !DIExpression()), !dbg !3062
  %3 = load ptr, ptr %self, align 8, !dbg !3063
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !3064
  %trunc = trunc i32 %4 to i8, !dbg !3064
  ret i8 %trunc, !dbg !3064

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3062
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.30, i64 9, i32 71), !dbg !3062
  unreachable, !dbg !3062
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg32Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3065 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !3070
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3070
  br i1 %4, label %panic, label %checkok, !dbg !3070

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3071, metadata !DIExpression()), !dbg !3072
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !3073, metadata !DIExpression()), !dbg !3074
  %5 = load ptr, ptr %self, align 8, !dbg !3075
  %checknull = icmp eq ptr %5, null, !dbg !3075
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3075
  br i1 %6, label %panic1, label %checkok2, !dbg !3075

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !3076, metadata !DIExpression()), !dbg !3078
  store i32 0, ptr %return_value, align 4, !dbg !3078
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !3080
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 4, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 4), !dbg !3083
  %11 = load i32, ptr %return_value, align 4, !dbg !3084
  store i32 %11, ptr %5, align 4, !dbg !3084
  ret void, !dbg !3084

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3072
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.16, i64 8, i32 78), !dbg !3072
  unreachable, !dbg !3072

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3075
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.145, i64 11, ptr @.func.16, i64 8, i32 80), !dbg !3075
  unreachable, !dbg !3075
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg32Random.next_short(ptr %0) #0 comdat !dbg !3085 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i32, align 4
  %rot = alloca i8, align 1
  %self19 = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !3088
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3088
  br i1 %2, label %panic, label %checkok, !dbg !3088

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3089, metadata !DIExpression()), !dbg !3090
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3091, metadata !DIExpression()), !dbg !3092
  %3 = load ptr, ptr %self, align 8, !dbg !3093
  store ptr %3, ptr %s, align 8, !dbg !3093
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !3094, metadata !DIExpression()), !dbg !3095
  %4 = load ptr, ptr %s, align 8, !dbg !3096
  %checknull = icmp eq ptr %4, null, !dbg !3096
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3096
  br i1 %5, label %panic1, label %checkok2, !dbg !3096

checkok2:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !3096
  %7 = load ptr, ptr %s, align 8, !dbg !3097
  %checknull3 = icmp eq ptr %7, null, !dbg !3097
  %8 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !3097
  br i1 %8, label %panic4, label %checkok5, !dbg !3097

checkok5:                                         ; preds = %checkok2
  %9 = load i32, ptr %7, align 4, !dbg !3097
  %lshr = lshr i32 %9, 10, !dbg !3098
  %10 = freeze i32 %lshr, !dbg !3098
  %xor6 = xor i32 %6, %10, !dbg !3099
  store i32 %xor6, ptr %xor, align 4, !dbg !3099
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !3100, metadata !DIExpression()), !dbg !3101
  %11 = load ptr, ptr %s, align 8, !dbg !3102
  %checknull7 = icmp eq ptr %11, null, !dbg !3102
  %12 = call i1 @llvm.expect.i1(i1 %checknull7, i1 false), !dbg !3102
  br i1 %12, label %panic8, label %checkok9, !dbg !3102

checkok9:                                         ; preds = %checkok5
  %13 = load i32, ptr %11, align 4, !dbg !3102
  %lshr10 = lshr i32 %13, 28, !dbg !3103
  %14 = freeze i32 %lshr10, !dbg !3103
  %trunc = trunc i32 %14 to i8, !dbg !3103
  store i8 %trunc, ptr %rot, align 1, !dbg !3103
  %15 = load ptr, ptr %s, align 8, !dbg !3104
  %checknull11 = icmp eq ptr %15, null, !dbg !3104
  %16 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !3104
  br i1 %16, label %panic12, label %checkok13, !dbg !3104

checkok13:                                        ; preds = %checkok9
  %17 = load ptr, ptr %s, align 8, !dbg !3105
  %checknull14 = icmp eq ptr %17, null, !dbg !3105
  %18 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !3105
  br i1 %18, label %panic15, label %checkok16, !dbg !3105

checkok16:                                        ; preds = %checkok13
  %19 = load i32, ptr %17, align 4, !dbg !3105
  %mul = mul i32 %19, -1856014347, !dbg !3106
  %add = add i32 %mul, -1640531527, !dbg !3106
  store i32 %add, ptr %15, align 4, !dbg !3106
  %20 = load i32, ptr %xor, align 4, !dbg !3107
  %lshr17 = lshr i32 %20, 12, !dbg !3108
  %21 = freeze i32 %lshr17, !dbg !3108
  %trunc18 = trunc i32 %21 to i16, !dbg !3108
  store i16 %trunc18, ptr %self19, align 2
  %22 = load i8, ptr %rot, align 1, !dbg !3109
  %zext = zext i8 %22 to i16, !dbg !3109
  store i16 %zext, ptr %shift, align 2
  %23 = load i16, ptr %self19, align 2, !dbg !3110
  %24 = load i16, ptr %self19, align 2, !dbg !3112
  %25 = load i16, ptr %shift, align 2, !dbg !3113
  %26 = call i16 @llvm.fshr.i16(i16 %23, i16 %24, i16 %25), !dbg !3113
  ret i16 %26, !dbg !3113

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3090
  call void %27(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.29, i64 10, i32 83), !dbg !3090
  unreachable, !dbg !3090

panic1:                                           ; preds = %checkok
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3096
  call void %28(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.29, i64 10, i32 87), !dbg !3096
  unreachable, !dbg !3096

panic4:                                           ; preds = %checkok2
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3097
  call void %29(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.29, i64 10, i32 87), !dbg !3097
  unreachable, !dbg !3097

panic8:                                           ; preds = %checkok5
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3102
  call void %30(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.29, i64 10, i32 88), !dbg !3102
  unreachable, !dbg !3102

panic12:                                          ; preds = %checkok9
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3104
  call void %31(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.29, i64 10, i32 89), !dbg !3104
  unreachable, !dbg !3104

panic15:                                          ; preds = %checkok13
  %32 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3105
  call void %32(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.29, i64 10, i32 89), !dbg !3105
  unreachable, !dbg !3105
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg32Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3114 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes2 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr23 = alloca ptr, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %any], align 16
  %indirectarg62 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg67 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !3115
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3115
  br i1 %4, label %panic, label %checkok, !dbg !3115

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3116, metadata !DIExpression()), !dbg !3117
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !3118, metadata !DIExpression()), !dbg !3119
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3120
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3120
  %lt = icmp ult i64 0, %5, !dbg !3120
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3120

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3120
  call void %6(ptr @.panic_msg.21, i64 34, ptr @.file.145, i64 11, ptr @.func.20, i64 10, i32 94), !dbg !3120
  unreachable, !dbg !3120

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes2, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3122, metadata !DIExpression()), !dbg !3124
  %ptradd3 = getelementptr inbounds i8, ptr %bytes2, i64 8, !dbg !3125
  %7 = load i64, ptr %ptradd3, align 8, !dbg !3125
  store i64 %7, ptr %len, align 8, !dbg !3125
  br label %loop.cond, !dbg !3126

loop.cond:                                        ; preds = %checkok63, %assert_ok
  %8 = load i64, ptr %len, align 8, !dbg !3127
  %lt4 = icmp ult i64 0, %8, !dbg !3127
  br i1 %lt4, label %loop.body, label %loop.exit, !dbg !3127

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !3129, metadata !DIExpression()), !dbg !3131
  %9 = load ptr, ptr %self, align 8, !dbg !3132
  %10 = call i16 @std.math.random.Pcg32Random.next_short(ptr %9), !dbg !3133
  store i16 %10, ptr %value, align 2, !dbg !3133
  %11 = load i64, ptr %len, align 8, !dbg !3134
  %le = icmp ule i64 %11, 2, !dbg !3134
  br i1 %le, label %if.then, label %if.exit, !dbg !3134

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !3135
  %add = add i64 0, %13, !dbg !3135
  %size = sub i64 %add, 0, !dbg !3135
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !3135
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !3135
  %16 = load %"char[]", ptr %bytes2, align 8, !dbg !3137
  %17 = extractvalue %"char[]" %16, 0, !dbg !3137
  %18 = extractvalue %"char[]" %16, 1, !dbg !3138
  %gt = icmp ugt i64 0, %18, !dbg !3138
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3138
  br i1 %19, label %panic5, label %checkok9, !dbg !3138

checkok9:                                         ; preds = %if.then
  %size10 = sub i64 %18, 0, !dbg !3137
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !3137
  %21 = insertvalue %"char[]" %20, i64 %size10, 1, !dbg !3137
  %22 = extractvalue %"char[]" %21, 0, !dbg !3137
  %23 = extractvalue %"char[]" %15, 0, !dbg !3137
  store %"char[]" %15, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %24 = load i64, ptr %ptradd12, align 8
  store %"char[]" %21, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %25 = load i64, ptr %ptradd14, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic15, label %checkok22

checkok22:                                        ; preds = %checkok9
  %27 = mul i64 %24, 1, !dbg !3137
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !3137
  br label %expr_block.exit, !dbg !3139

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr23, align 8
  %28 = load ptr, ptr %taddr23, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 2, 1
  %31 = load %"char[]", ptr %bytes2, align 8, !dbg !3140
  %32 = extractvalue %"char[]" %31, 0, !dbg !3140
  %33 = extractvalue %"char[]" %31, 1, !dbg !3140
  %gt24 = icmp sgt i64 0, %33, !dbg !3140
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !3140
  br i1 %34, label %panic25, label %checkok32, !dbg !3140

checkok32:                                        ; preds = %if.exit
  %lt33 = icmp slt i64 %33, 2, !dbg !3140
  %35 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !3140
  br i1 %35, label %panic34, label %checkok41, !dbg !3140

checkok41:                                        ; preds = %checkok32
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !3140
  %37 = insertvalue %"char[]" %36, i64 2, 1, !dbg !3140
  %38 = extractvalue %"char[]" %37, 0, !dbg !3140
  %39 = extractvalue %"char[]" %30, 0, !dbg !3140
  store %"char[]" %30, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %40 = load i64, ptr %ptradd43, align 8
  store %"char[]" %37, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %41 = load i64, ptr %ptradd45, align 8
  %neq46 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq46, i1 false)
  br i1 %42, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %43 = mul i64 %40, 1, !dbg !3140
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !3140
  %44 = load i64, ptr %len, align 8, !dbg !3141
  %sub = sub i64 %44, 2, !dbg !3141
  store i64 %sub, ptr %len, align 8, !dbg !3141
  %45 = load %"char[]", ptr %bytes2, align 8, !dbg !3142
  %46 = extractvalue %"char[]" %45, 0, !dbg !3142
  %47 = extractvalue %"char[]" %45, 1, !dbg !3143
  %gt55 = icmp ugt i64 2, %47, !dbg !3143
  %48 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !3143
  br i1 %48, label %panic56, label %checkok63, !dbg !3143

checkok63:                                        ; preds = %checkok54
  %size64 = sub i64 %47, 2, !dbg !3142
  %ptradd65 = getelementptr inbounds i8, ptr %46, i64 2, !dbg !3142
  %49 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !3142
  %50 = insertvalue %"char[]" %49, i64 %size64, 1, !dbg !3142
  store %"char[]" %50, ptr %bytes2, align 8, !dbg !3142
  br label %loop.cond, !dbg !3142

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.152, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3144
  %ptradd66 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3144
  %hi = load i64, ptr %ptradd66, align 8, !dbg !3144
  store %"any[]" zeroinitializer, ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.153, i64 11, ptr @.str.154, i64 22, i32 96, ptr byval(%"any[]") align 8 %indirectarg67), !dbg !3147
  unreachable, !dbg !3148

expr_block.exit:                                  ; preds = %checkok22
  ret void, !dbg !3148

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3117
  call void %51(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.20, i64 10, i32 96), !dbg !3117
  unreachable, !dbg !3117

panic5:                                           ; preds = %if.then
  store i64 %18, ptr %taddr6, align 8
  %52 = insertvalue %any undef, ptr %taddr6, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %54 = insertvalue %any undef, ptr %taddr7, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd8, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3137
  unreachable, !dbg !3137

panic15:                                          ; preds = %checkok9
  store i64 %25, ptr %taddr16, align 8
  %57 = insertvalue %any undef, ptr %taddr16, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr17, align 8
  %59 = insertvalue %any undef, ptr %taddr17, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %60, ptr %ptradd19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !3137
  unreachable, !dbg !3137

panic25:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr26, align 8
  %62 = insertvalue %any undef, ptr %taddr26, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %64 = insertvalue %any undef, ptr %taddr27, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %63, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %65, ptr %ptradd29, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !3140
  unreachable, !dbg !3140

panic34:                                          ; preds = %checkok32
  store i64 1, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %69 = insertvalue %any undef, ptr %taddr36, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %68, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %70, ptr %ptradd38, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !3140
  unreachable, !dbg !3140

panic47:                                          ; preds = %checkok41
  store i64 %41, ptr %taddr48, align 8
  %72 = insertvalue %any undef, ptr %taddr48, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr49, align 8
  %74 = insertvalue %any undef, ptr %taddr49, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %73, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %75, ptr %ptradd51, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !3140
  unreachable, !dbg !3140

panic56:                                          ; preds = %checkok54
  store i64 %47, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %78, ptr %varargslots59, align 16
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %80, ptr %ptradd60, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp61", ptr %indirectarg62, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg62), !dbg !3142
  unreachable, !dbg !3142
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg32Random.next_int128(ptr %0) #0 comdat !dbg !3149 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !3152
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3152
  br i1 %2, label %panic, label %checkok, !dbg !3152

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3153, metadata !DIExpression()), !dbg !3154
  %3 = load ptr, ptr %self, align 8, !dbg !3155
  %4 = call i64 @std.math.random.Pcg32Random.next_long(ptr %3), !dbg !3157
  %zext = zext i64 %4 to i128, !dbg !3157
  %shl = shl i128 %zext, 64, !dbg !3157
  %5 = freeze i128 %shl, !dbg !3157
  %6 = load ptr, ptr %self, align 8, !dbg !3155
  %7 = call i64 @std.math.random.Pcg32Random.next_long(ptr %6), !dbg !3158
  %zext1 = zext i64 %7 to i128, !dbg !3158
  %add = add i128 %5, %zext1, !dbg !3157
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3154
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.27, i64 11, i32 97), !dbg !3154
  unreachable, !dbg !3154
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg32Random.next_long(ptr %0) #0 comdat !dbg !3159 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3162
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3162
  br i1 %2, label %panic, label %checkok, !dbg !3162

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3163, metadata !DIExpression()), !dbg !3164
  %3 = load ptr, ptr %self, align 8, !dbg !3165
  %4 = call i32 @std.math.random.Pcg32Random.next_int(ptr %3), !dbg !3167
  %zext = zext i32 %4 to i64, !dbg !3167
  %shl = shl i64 %zext, 32, !dbg !3167
  %5 = freeze i64 %shl, !dbg !3167
  %6 = load ptr, ptr %self, align 8, !dbg !3165
  %7 = call i32 @std.math.random.Pcg32Random.next_int(ptr %6), !dbg !3168
  %zext1 = zext i32 %7 to i64, !dbg !3168
  %add = add i64 %5, %zext1, !dbg !3167
  ret i64 %add, !dbg !3167

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3164
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.18, i64 9, i32 98), !dbg !3164
  unreachable, !dbg !3164
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg32Random.next_int(ptr %0) #0 comdat !dbg !3169 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3172
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3172
  br i1 %2, label %panic, label %checkok, !dbg !3172

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3173, metadata !DIExpression()), !dbg !3174
  %3 = load ptr, ptr %self, align 8, !dbg !3175
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !3177
  %zext = zext i16 %4 to i32, !dbg !3177
  %shl = shl i32 %zext, 16, !dbg !3177
  %5 = freeze i32 %shl, !dbg !3177
  %6 = load ptr, ptr %self, align 8, !dbg !3175
  %7 = call i16 @std.math.random.Pcg32Random.next_short(ptr %6), !dbg !3178
  %zext1 = zext i16 %7 to i32, !dbg !3178
  %add = add i32 %5, %zext1, !dbg !3177
  ret i32 %add, !dbg !3177

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3174
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.28, i64 8, i32 99), !dbg !3174
  unreachable, !dbg !3174
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg32Random.next_byte(ptr %0) #0 comdat !dbg !3179 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3182
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3182
  br i1 %2, label %panic, label %checkok, !dbg !3182

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3183, metadata !DIExpression()), !dbg !3184
  %3 = load ptr, ptr %self, align 8, !dbg !3185
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !3186
  %trunc = trunc i16 %4 to i8, !dbg !3186
  ret i8 %trunc, !dbg !3186

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3184
  call void %5(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.30, i64 9, i32 100), !dbg !3184
  unreachable, !dbg !3184
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg16Random.set_seed(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3187 {
entry:
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %input3 = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %3 = icmp eq ptr %0, null, !dbg !3192
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3192
  br i1 %4, label %panic, label %checkok, !dbg !3192

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3193, metadata !DIExpression()), !dbg !3194
  store ptr %1, ptr %input, align 8
  %ptradd = getelementptr inbounds i8, ptr %input, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !3195, metadata !DIExpression()), !dbg !3196
  %5 = load ptr, ptr %self, align 8, !dbg !3197
  %checknull = icmp eq ptr %5, null, !dbg !3197
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3197
  br i1 %6, label %panic1, label %checkok2, !dbg !3197

checkok2:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input3, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !3198, metadata !DIExpression()), !dbg !3200
  store i16 0, ptr %return_value, align 2, !dbg !3200
  store ptr %return_value, ptr %value, align 8
  %7 = load ptr, ptr %value, align 8, !dbg !3202
  store ptr %7, ptr %taddr, align 8
  %8 = load ptr, ptr %taddr, align 8
  %9 = insertvalue %"char[]" undef, ptr %8, 0
  %10 = insertvalue %"char[]" %9, i64 2, 1
  %lo = load ptr, ptr %input3, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %input3, i64 8
  %hi = load i64, ptr %ptradd4, align 8
  call void @std.math.random.seeder(ptr %lo, i64 %hi, ptr %8, i64 2), !dbg !3205
  %11 = load i16, ptr %return_value, align 2, !dbg !3206
  store i16 %11, ptr %5, align 2, !dbg !3206
  ret void, !dbg !3206

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3194
  call void %12(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.16, i64 8, i32 106), !dbg !3194
  unreachable, !dbg !3194

panic1:                                           ; preds = %checkok
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3197
  call void %13(ptr @.panic_msg.17, i64 45, ptr @.file.145, i64 11, ptr @.func.16, i64 8, i32 108), !dbg !3197
  unreachable, !dbg !3197
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i8 @std.math.random.Pcg16Random.next_byte(ptr %0) #0 comdat !dbg !3207 {
entry:
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i16, align 2
  %rot = alloca i8, align 1
  %self25 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !3210
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3210
  br i1 %2, label %panic, label %checkok, !dbg !3210

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3211, metadata !DIExpression()), !dbg !3212
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3213, metadata !DIExpression()), !dbg !3214
  %3 = load ptr, ptr %self, align 8, !dbg !3215
  store ptr %3, ptr %s, align 8, !dbg !3215
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !3216, metadata !DIExpression()), !dbg !3217
  %4 = load ptr, ptr %s, align 8, !dbg !3218
  %checknull = icmp eq ptr %4, null, !dbg !3218
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3218
  br i1 %5, label %panic1, label %checkok2, !dbg !3218

checkok2:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !3218
  %zext = zext i16 %6 to i32, !dbg !3218
  %7 = load ptr, ptr %s, align 8, !dbg !3219
  %checknull3 = icmp eq ptr %7, null, !dbg !3219
  %8 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !3219
  br i1 %8, label %panic4, label %checkok5, !dbg !3219

checkok5:                                         ; preds = %checkok2
  %9 = load i16, ptr %7, align 2, !dbg !3219
  %zext6 = zext i16 %9 to i32, !dbg !3219
  %lshr = lshr i32 %zext6, 5, !dbg !3220
  %10 = freeze i32 %lshr, !dbg !3220
  %xor7 = xor i32 %zext, %10, !dbg !3221
  %trunc = trunc i32 %xor7 to i16, !dbg !3221
  store i16 %trunc, ptr %xor, align 2, !dbg !3221
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !3222, metadata !DIExpression()), !dbg !3223
  %11 = load ptr, ptr %s, align 8, !dbg !3224
  %checknull8 = icmp eq ptr %11, null, !dbg !3224
  %12 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !3224
  br i1 %12, label %panic9, label %checkok10, !dbg !3224

checkok10:                                        ; preds = %checkok5
  %13 = load i16, ptr %11, align 2, !dbg !3224
  %zext11 = zext i16 %13 to i32, !dbg !3224
  %lshr12 = lshr i32 %zext11, 13, !dbg !3225
  %14 = freeze i32 %lshr12, !dbg !3225
  %trunc13 = trunc i32 %14 to i8, !dbg !3225
  store i8 %trunc13, ptr %rot, align 1, !dbg !3225
  %15 = load ptr, ptr %s, align 8, !dbg !3226
  %checknull14 = icmp eq ptr %15, null, !dbg !3226
  %16 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !3226
  br i1 %16, label %panic15, label %checkok16, !dbg !3226

checkok16:                                        ; preds = %checkok10
  %17 = load ptr, ptr %s, align 8, !dbg !3227
  %checknull17 = icmp eq ptr %17, null, !dbg !3227
  %18 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !3227
  br i1 %18, label %panic18, label %checkok19, !dbg !3227

checkok19:                                        ; preds = %checkok16
  %19 = load i16, ptr %17, align 2, !dbg !3227
  %zext20 = zext i16 %19 to i32, !dbg !3227
  %mul = mul i32 %zext20, 37213, !dbg !3228
  %add = add i32 %mul, 40503, !dbg !3228
  %trunc21 = trunc i32 %add to i16, !dbg !3228
  store i16 %trunc21, ptr %15, align 2, !dbg !3228
  %20 = load i16, ptr %xor, align 2, !dbg !3229
  %zext22 = zext i16 %20 to i32, !dbg !3229
  %lshr23 = lshr i32 %zext22, 5, !dbg !3230
  %21 = freeze i32 %lshr23, !dbg !3230
  %trunc24 = trunc i32 %21 to i8, !dbg !3230
  store i8 %trunc24, ptr %self25, align 1
  %22 = load i8, ptr %rot, align 1
  store i8 %22, ptr %shift, align 1
  %23 = load i8, ptr %self25, align 1, !dbg !3231
  %24 = load i8, ptr %self25, align 1, !dbg !3233
  %25 = load i8, ptr %shift, align 1, !dbg !3234
  %26 = call i8 @llvm.fshr.i8(i8 %23, i8 %24, i8 %25), !dbg !3234
  ret i8 %26, !dbg !3234

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3212
  call void %27(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.30, i64 9, i32 111), !dbg !3212
  unreachable, !dbg !3212

panic1:                                           ; preds = %checkok
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3218
  call void %28(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.30, i64 9, i32 115), !dbg !3218
  unreachable, !dbg !3218

panic4:                                           ; preds = %checkok2
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3219
  call void %29(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.30, i64 9, i32 115), !dbg !3219
  unreachable, !dbg !3219

panic9:                                           ; preds = %checkok5
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3224
  call void %30(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.30, i64 9, i32 116), !dbg !3224
  unreachable, !dbg !3224

panic15:                                          ; preds = %checkok10
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3226
  call void %31(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.30, i64 9, i32 117), !dbg !3226
  unreachable, !dbg !3226

panic18:                                          ; preds = %checkok16
  %32 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3227
  call void %32(ptr @.panic_msg.19, i64 42, ptr @.file.145, i64 11, ptr @.func.30, i64 9, i32 117), !dbg !3227
  unreachable, !dbg !3227
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.math.random.Pcg16Random.next_bytes(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !3235 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes1 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca ptr, align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %varargslots57 = alloca [2 x %any], align 16
  %indirectarg60 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg65 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !3236
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3236
  br i1 %4, label %panic, label %checkok, !dbg !3236

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3237, metadata !DIExpression()), !dbg !3238
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !3239, metadata !DIExpression()), !dbg !3240
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes1, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3241, metadata !DIExpression()), !dbg !3243
  %ptradd2 = getelementptr inbounds i8, ptr %bytes1, i64 8, !dbg !3244
  %5 = load i64, ptr %ptradd2, align 8, !dbg !3244
  store i64 %5, ptr %len, align 8, !dbg !3244
  br label %loop.cond, !dbg !3245

loop.cond:                                        ; preds = %checkok61, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !3246
  %lt = icmp ult i64 0, %6, !dbg !3246
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3246

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !3248, metadata !DIExpression()), !dbg !3250
  %7 = load ptr, ptr %self, align 8, !dbg !3251
  %8 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %7), !dbg !3252
  store i8 %8, ptr %value, align 1, !dbg !3252
  %9 = load i64, ptr %len, align 8, !dbg !3253
  %le = icmp ule i64 %9, 1, !dbg !3253
  br i1 %le, label %if.then, label %if.exit, !dbg !3253

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %len, align 8, !dbg !3254
  %add = add i64 0, %11, !dbg !3254
  %size = sub i64 %add, 0, !dbg !3254
  %12 = insertvalue %"char[]" undef, ptr %10, 0, !dbg !3254
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !3254
  %14 = load %"char[]", ptr %bytes1, align 8, !dbg !3256
  %15 = extractvalue %"char[]" %14, 0, !dbg !3256
  %16 = extractvalue %"char[]" %14, 1, !dbg !3257
  %gt = icmp ugt i64 0, %16, !dbg !3257
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3257
  br i1 %17, label %panic3, label %checkok7, !dbg !3257

checkok7:                                         ; preds = %if.then
  %size8 = sub i64 %16, 0, !dbg !3256
  %18 = insertvalue %"char[]" undef, ptr %15, 0, !dbg !3256
  %19 = insertvalue %"char[]" %18, i64 %size8, 1, !dbg !3256
  %20 = extractvalue %"char[]" %19, 0, !dbg !3256
  %21 = extractvalue %"char[]" %13, 0, !dbg !3256
  store %"char[]" %13, ptr %taddr9, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %taddr9, i64 8
  %22 = load i64, ptr %ptradd10, align 8
  store %"char[]" %19, ptr %taddr11, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %taddr11, i64 8
  %23 = load i64, ptr %ptradd12, align 8
  %neq = icmp ne i64 %23, %22
  %24 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %24, label %panic13, label %checkok20

checkok20:                                        ; preds = %checkok7
  %25 = mul i64 %22, 1, !dbg !3256
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %20, ptr align 1 %21, i64 %25, i1 false), !dbg !3256
  br label %expr_block.exit, !dbg !3258

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr21, align 8
  %26 = load ptr, ptr %taddr21, align 8
  %27 = insertvalue %"char[]" undef, ptr %26, 0
  %28 = insertvalue %"char[]" %27, i64 1, 1
  %29 = load %"char[]", ptr %bytes1, align 8, !dbg !3259
  %30 = extractvalue %"char[]" %29, 0, !dbg !3259
  %31 = extractvalue %"char[]" %29, 1, !dbg !3259
  %gt22 = icmp sgt i64 0, %31, !dbg !3259
  %32 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !3259
  br i1 %32, label %panic23, label %checkok30, !dbg !3259

checkok30:                                        ; preds = %if.exit
  %lt31 = icmp slt i64 %31, 1, !dbg !3259
  %33 = call i1 @llvm.expect.i1(i1 %lt31, i1 false), !dbg !3259
  br i1 %33, label %panic32, label %checkok39, !dbg !3259

checkok39:                                        ; preds = %checkok30
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !3259
  %35 = insertvalue %"char[]" %34, i64 1, 1, !dbg !3259
  %36 = extractvalue %"char[]" %35, 0, !dbg !3259
  %37 = extractvalue %"char[]" %28, 0, !dbg !3259
  store %"char[]" %28, ptr %taddr40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %taddr40, i64 8
  %38 = load i64, ptr %ptradd41, align 8
  store %"char[]" %35, ptr %taddr42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %taddr42, i64 8
  %39 = load i64, ptr %ptradd43, align 8
  %neq44 = icmp ne i64 %39, %38
  %40 = call i1 @llvm.expect.i1(i1 %neq44, i1 false)
  br i1 %40, label %panic45, label %checkok52

checkok52:                                        ; preds = %checkok39
  %41 = mul i64 %38, 1, !dbg !3259
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %36, ptr align 1 %37, i64 %41, i1 false), !dbg !3259
  %42 = load i64, ptr %len, align 8, !dbg !3260
  %sub = sub i64 %42, 1, !dbg !3260
  store i64 %sub, ptr %len, align 8, !dbg !3260
  %43 = load %"char[]", ptr %bytes1, align 8, !dbg !3261
  %44 = extractvalue %"char[]" %43, 0, !dbg !3261
  %45 = extractvalue %"char[]" %43, 1, !dbg !3262
  %gt53 = icmp ugt i64 1, %45, !dbg !3262
  %46 = call i1 @llvm.expect.i1(i1 %gt53, i1 false), !dbg !3262
  br i1 %46, label %panic54, label %checkok61, !dbg !3262

checkok61:                                        ; preds = %checkok52
  %size62 = sub i64 %45, 1, !dbg !3261
  %ptradd63 = getelementptr inbounds i8, ptr %44, i64 1, !dbg !3261
  %47 = insertvalue %"char[]" undef, ptr %ptradd63, 0, !dbg !3261
  %48 = insertvalue %"char[]" %47, i64 %size62, 1, !dbg !3261
  store %"char[]" %48, ptr %bytes1, align 8, !dbg !3261
  br label %loop.cond, !dbg !3261

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.155, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3263
  %ptradd64 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3263
  %hi = load i64, ptr %ptradd64, align 8, !dbg !3263
  store %"any[]" zeroinitializer, ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.156, i64 11, ptr @.str.157, i64 22, i32 121, ptr byval(%"any[]") align 8 %indirectarg65), !dbg !3266
  unreachable, !dbg !3267

expr_block.exit:                                  ; preds = %checkok20
  ret void, !dbg !3267

panic:                                            ; preds = %entry
  %49 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3238
  call void %49(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.20, i64 10, i32 121), !dbg !3238
  unreachable, !dbg !3238

panic3:                                           ; preds = %if.then
  store i64 %16, ptr %taddr4, align 8
  %50 = insertvalue %any undef, ptr %taddr4, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %52 = insertvalue %any undef, ptr %taddr5, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd6, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3256
  unreachable, !dbg !3256

panic13:                                          ; preds = %checkok7
  store i64 %23, ptr %taddr14, align 8
  %55 = insertvalue %any undef, ptr %taddr14, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr15, align 8
  %57 = insertvalue %any undef, ptr %taddr15, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %58, ptr %ptradd17, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 153, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !3256
  unreachable, !dbg !3256

panic23:                                          ; preds = %if.exit
  store i64 %31, ptr %taddr24, align 8
  %60 = insertvalue %any undef, ptr %taddr24, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %62 = insertvalue %any undef, ptr %taddr25, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %61, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %63, ptr %ptradd27, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg29), !dbg !3259
  unreachable, !dbg !3259

panic32:                                          ; preds = %checkok30
  store i64 0, ptr %taddr33, align 8
  %65 = insertvalue %any undef, ptr %taddr33, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr34, align 8
  %67 = insertvalue %any undef, ptr %taddr34, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %66, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %68, ptr %ptradd36, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.24, i64 60, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg38), !dbg !3259
  unreachable, !dbg !3259

panic45:                                          ; preds = %checkok39
  store i64 %39, ptr %taddr46, align 8
  %70 = insertvalue %any undef, ptr %taddr46, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr47, align 8
  %72 = insertvalue %any undef, ptr %taddr47, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %71, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %73, ptr %ptradd49, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.23, i64 38, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 156, ptr byval(%"any[]") align 8 %indirectarg51), !dbg !3259
  unreachable, !dbg !3259

panic54:                                          ; preds = %checkok52
  store i64 %45, ptr %taddr55, align 8
  %75 = insertvalue %any undef, ptr %taddr55, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr56, align 8
  %77 = insertvalue %any undef, ptr %taddr56, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %76, ptr %varargslots57, align 16
  %ptradd58 = getelementptr inbounds i8, ptr %varargslots57, i64 16
  store %any %78, ptr %ptradd58, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots57, 0
  %"$$temp59" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp59", ptr %indirectarg60, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.22, i64 61, ptr @.file, i64 14, ptr @.func.20, i64 10, i32 158, ptr byval(%"any[]") align 8 %indirectarg60), !dbg !3261
  unreachable, !dbg !3261
}

; Function Attrs: nounwind ssp uwtable
define weak { i64, i64 } @std.math.random.Pcg16Random.next_int128(ptr %0) #0 comdat !dbg !3268 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %1 = icmp eq ptr %0, null, !dbg !3271
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3271
  br i1 %2, label %panic, label %checkok, !dbg !3271

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3272, metadata !DIExpression()), !dbg !3273
  %3 = load ptr, ptr %self, align 8, !dbg !3274
  %4 = call i64 @std.math.random.Pcg16Random.next_long(ptr %3), !dbg !3276
  %zext = zext i64 %4 to i128, !dbg !3276
  %shl = shl i128 %zext, 64, !dbg !3276
  %5 = freeze i128 %shl, !dbg !3276
  %6 = load ptr, ptr %self, align 8, !dbg !3274
  %7 = call i64 @std.math.random.Pcg16Random.next_long(ptr %6), !dbg !3277
  %zext1 = zext i64 %7 to i128, !dbg !3277
  %add = add i128 %5, %zext1, !dbg !3276
  store i128 %add, ptr %taddr, align 8
  %8 = load { i64, i64 }, ptr %taddr, align 8
  ret { i64, i64 } %8

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3273
  call void %9(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.27, i64 11, i32 122), !dbg !3273
  unreachable, !dbg !3273
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.math.random.Pcg16Random.next_long(ptr %0) #0 comdat !dbg !3278 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3281
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3281
  br i1 %2, label %panic, label %checkok, !dbg !3281

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3282, metadata !DIExpression()), !dbg !3283
  %3 = load ptr, ptr %self, align 8, !dbg !3284
  %4 = call i32 @std.math.random.Pcg16Random.next_int(ptr %3), !dbg !3286
  %zext = zext i32 %4 to i64, !dbg !3286
  %shl = shl i64 %zext, 32, !dbg !3286
  %5 = freeze i64 %shl, !dbg !3286
  %6 = load ptr, ptr %self, align 8, !dbg !3284
  %7 = call i32 @std.math.random.Pcg16Random.next_int(ptr %6), !dbg !3287
  %zext1 = zext i32 %7 to i64, !dbg !3287
  %add = add i64 %5, %zext1, !dbg !3286
  ret i64 %add, !dbg !3286

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3283
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.18, i64 9, i32 123), !dbg !3283
  unreachable, !dbg !3283
}

; Function Attrs: nounwind ssp uwtable
define weak i32 @std.math.random.Pcg16Random.next_int(ptr %0) #0 comdat !dbg !3288 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3291
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3291
  br i1 %2, label %panic, label %checkok, !dbg !3291

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3292, metadata !DIExpression()), !dbg !3293
  %3 = load ptr, ptr %self, align 8, !dbg !3294
  %4 = call i16 @std.math.random.Pcg16Random.next_short(ptr %3), !dbg !3296
  %zext = zext i16 %4 to i32, !dbg !3296
  %shl = shl i32 %zext, 16, !dbg !3296
  %5 = freeze i32 %shl, !dbg !3296
  %6 = load ptr, ptr %self, align 8, !dbg !3294
  %7 = call i16 @std.math.random.Pcg16Random.next_short(ptr %6), !dbg !3297
  %zext1 = zext i16 %7 to i32, !dbg !3297
  %add = add i32 %5, %zext1, !dbg !3296
  ret i32 %add, !dbg !3296

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3293
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.28, i64 8, i32 124), !dbg !3293
  unreachable, !dbg !3293
}

; Function Attrs: nounwind ssp uwtable
define weak zeroext i16 @std.math.random.Pcg16Random.next_short(ptr %0) #0 comdat !dbg !3298 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3301
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3301
  br i1 %2, label %panic, label %checkok, !dbg !3301

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3302, metadata !DIExpression()), !dbg !3303
  %3 = load ptr, ptr %self, align 8, !dbg !3304
  %4 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %3), !dbg !3306
  %zext = zext i8 %4 to i16, !dbg !3306
  %zext1 = zext i16 %zext to i32, !dbg !3306
  %shl = shl i32 %zext1, 8, !dbg !3306
  %5 = freeze i32 %shl, !dbg !3306
  %6 = load ptr, ptr %self, align 8, !dbg !3304
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !3307
  %zext2 = zext i8 %7 to i32, !dbg !3307
  %add = add i32 %5, %zext2, !dbg !3306
  %trunc = trunc i32 %add to i16, !dbg !3306
  ret i16 %trunc, !dbg !3306

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3303
  call void %8(ptr @.panic_msg.14, i64 62, ptr @.file.145, i64 11, ptr @.func.29, i64 10, i32 125), !dbg !3303
  unreachable, !dbg !3303
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.fshr.i128(i128, i128, i128) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.fshr.i64(i64, i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshr.i32(i32, i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.fshr.i16(i16, i16, i16) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.fshr.i8(i8, i8, i8) #1

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.tmalloc(i64, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.mem.malloc(i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i32 @std.hash.fnv32a.encode(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.time.clock.now() #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.core.dstring.DString.new_init(ptr, i64, i64, ptr) #0

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  %next_val274 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  %80 = icmp eq ptr %next_val274, inttoptr (i64 -1 to ptr)
  br i1 %80, label %dtable_check275, label %dtable_skip280

dtable_check275:                                  ; preds = %dtable_check275, %dtable_skip273
  %dtable_ref276 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip273 ], [ %next_dtable_ref278, %dtable_check275 ]
  %dtable_ptr277 = load ptr, ptr %dtable_ref276, align 8
  %81 = icmp eq ptr %dtable_ptr277, null
  %next_dtable_ref278 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr277, i32 0, i32 2
  br i1 %81, label %dtable_found279, label %dtable_check275

dtable_found279:                                  ; preds = %dtable_check275
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", ptr %dtable_ref276, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip280

dtable_skip280:                                   ; preds = %dtable_found279, %dtable_skip273
  %next_val281 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  %82 = icmp eq ptr %next_val281, inttoptr (i64 -1 to ptr)
  br i1 %82, label %dtable_check282, label %dtable_skip287

dtable_check282:                                  ; preds = %dtable_check282, %dtable_skip280
  %dtable_ref283 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip280 ], [ %next_dtable_ref285, %dtable_check282 ]
  %dtable_ptr284 = load ptr, ptr %dtable_ref283, align 8
  %83 = icmp eq ptr %dtable_ptr284, null
  %next_dtable_ref285 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr284, i32 0, i32 2
  br i1 %83, label %dtable_found286, label %dtable_check282

dtable_found286:                                  ; preds = %dtable_check282
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", ptr %dtable_ref283, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip287

dtable_skip287:                                   ; preds = %dtable_found286, %dtable_skip280
  %next_val288 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  %84 = icmp eq ptr %next_val288, inttoptr (i64 -1 to ptr)
  br i1 %84, label %dtable_check289, label %dtable_skip294

dtable_check289:                                  ; preds = %dtable_check289, %dtable_skip287
  %dtable_ref290 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip287 ], [ %next_dtable_ref292, %dtable_check289 ]
  %dtable_ptr291 = load ptr, ptr %dtable_ref290, align 8
  %85 = icmp eq ptr %dtable_ptr291, null
  %next_dtable_ref292 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr291, i32 0, i32 2
  br i1 %85, label %dtable_found293, label %dtable_check289

dtable_found293:                                  ; preds = %dtable_check289
  store ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", ptr %dtable_ref290, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip294

dtable_skip294:                                   ; preds = %dtable_found293, %dtable_skip287
  %next_val295 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  %86 = icmp eq ptr %next_val295, inttoptr (i64 -1 to ptr)
  br i1 %86, label %dtable_check296, label %dtable_skip301

dtable_check296:                                  ; preds = %dtable_check296, %dtable_skip294
  %dtable_ref297 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip294 ], [ %next_dtable_ref299, %dtable_check296 ]
  %dtable_ptr298 = load ptr, ptr %dtable_ref297, align 8
  %87 = icmp eq ptr %dtable_ptr298, null
  %next_dtable_ref299 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr298, i32 0, i32 2
  br i1 %87, label %dtable_found300, label %dtable_check296

dtable_found300:                                  ; preds = %dtable_check296
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", ptr %dtable_ref297, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip301

dtable_skip301:                                   ; preds = %dtable_found300, %dtable_skip294
  %next_val302 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  %88 = icmp eq ptr %next_val302, inttoptr (i64 -1 to ptr)
  br i1 %88, label %dtable_check303, label %dtable_skip308

dtable_check303:                                  ; preds = %dtable_check303, %dtable_skip301
  %dtable_ref304 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip301 ], [ %next_dtable_ref306, %dtable_check303 ]
  %dtable_ptr305 = load ptr, ptr %dtable_ref304, align 8
  %89 = icmp eq ptr %dtable_ptr305, null
  %next_dtable_ref306 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr305, i32 0, i32 2
  br i1 %89, label %dtable_found307, label %dtable_check303

dtable_found307:                                  ; preds = %dtable_check303
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", ptr %dtable_ref304, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip308

dtable_skip308:                                   ; preds = %dtable_found307, %dtable_skip301
  %next_val309 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  %90 = icmp eq ptr %next_val309, inttoptr (i64 -1 to ptr)
  br i1 %90, label %dtable_check310, label %dtable_skip315

dtable_check310:                                  ; preds = %dtable_check310, %dtable_skip308
  %dtable_ref311 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip308 ], [ %next_dtable_ref313, %dtable_check310 ]
  %dtable_ptr312 = load ptr, ptr %dtable_ref311, align 8
  %91 = icmp eq ptr %dtable_ptr312, null
  %next_dtable_ref313 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr312, i32 0, i32 2
  br i1 %91, label %dtable_found314, label %dtable_check310

dtable_found314:                                  ; preds = %dtable_check310
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", ptr %dtable_ref311, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip315

dtable_skip315:                                   ; preds = %dtable_found314, %dtable_skip308
  %next_val316 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  %92 = icmp eq ptr %next_val316, inttoptr (i64 -1 to ptr)
  br i1 %92, label %dtable_check317, label %dtable_skip322

dtable_check317:                                  ; preds = %dtable_check317, %dtable_skip315
  %dtable_ref318 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip315 ], [ %next_dtable_ref320, %dtable_check317 ]
  %dtable_ptr319 = load ptr, ptr %dtable_ref318, align 8
  %93 = icmp eq ptr %dtable_ptr319, null
  %next_dtable_ref320 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr319, i32 0, i32 2
  br i1 %93, label %dtable_found321, label %dtable_check317

dtable_found321:                                  ; preds = %dtable_check317
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", ptr %dtable_ref318, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip322

dtable_skip322:                                   ; preds = %dtable_found321, %dtable_skip315
  %next_val323 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  %94 = icmp eq ptr %next_val323, inttoptr (i64 -1 to ptr)
  br i1 %94, label %dtable_check324, label %dtable_skip329

dtable_check324:                                  ; preds = %dtable_check324, %dtable_skip322
  %dtable_ref325 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip322 ], [ %next_dtable_ref327, %dtable_check324 ]
  %dtable_ptr326 = load ptr, ptr %dtable_ref325, align 8
  %95 = icmp eq ptr %dtable_ptr326, null
  %next_dtable_ref327 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr326, i32 0, i32 2
  br i1 %95, label %dtable_found328, label %dtable_check324

dtable_found328:                                  ; preds = %dtable_check324
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", ptr %dtable_ref325, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip329

dtable_skip329:                                   ; preds = %dtable_found328, %dtable_skip322
  %next_val330 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  %96 = icmp eq ptr %next_val330, inttoptr (i64 -1 to ptr)
  br i1 %96, label %dtable_check331, label %dtable_skip336

dtable_check331:                                  ; preds = %dtable_check331, %dtable_skip329
  %dtable_ref332 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip329 ], [ %next_dtable_ref334, %dtable_check331 ]
  %dtable_ptr333 = load ptr, ptr %dtable_ref332, align 8
  %97 = icmp eq ptr %dtable_ptr333, null
  %next_dtable_ref334 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr333, i32 0, i32 2
  br i1 %97, label %dtable_found335, label %dtable_check331

dtable_found335:                                  ; preds = %dtable_check331
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", ptr %dtable_ref332, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip336

dtable_skip336:                                   ; preds = %dtable_found335, %dtable_skip329
  %next_val337 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  %98 = icmp eq ptr %next_val337, inttoptr (i64 -1 to ptr)
  br i1 %98, label %dtable_check338, label %dtable_skip343

dtable_check338:                                  ; preds = %dtable_check338, %dtable_skip336
  %dtable_ref339 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip336 ], [ %next_dtable_ref341, %dtable_check338 ]
  %dtable_ptr340 = load ptr, ptr %dtable_ref339, align 8
  %99 = icmp eq ptr %dtable_ptr340, null
  %next_dtable_ref341 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr340, i32 0, i32 2
  br i1 %99, label %dtable_found342, label %dtable_check338

dtable_found342:                                  ; preds = %dtable_check338
  store ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", ptr %dtable_ref339, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip343

dtable_skip343:                                   ; preds = %dtable_found342, %dtable_skip336
  %next_val344 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  %100 = icmp eq ptr %next_val344, inttoptr (i64 -1 to ptr)
  br i1 %100, label %dtable_check345, label %dtable_skip350

dtable_check345:                                  ; preds = %dtable_check345, %dtable_skip343
  %dtable_ref346 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip343 ], [ %next_dtable_ref348, %dtable_check345 ]
  %dtable_ptr347 = load ptr, ptr %dtable_ref346, align 8
  %101 = icmp eq ptr %dtable_ptr347, null
  %next_dtable_ref348 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr347, i32 0, i32 2
  br i1 %101, label %dtable_found349, label %dtable_check345

dtable_found349:                                  ; preds = %dtable_check345
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", ptr %dtable_ref346, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip350

dtable_skip350:                                   ; preds = %dtable_found349, %dtable_skip343
  %next_val351 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  %102 = icmp eq ptr %next_val351, inttoptr (i64 -1 to ptr)
  br i1 %102, label %dtable_check352, label %dtable_skip357

dtable_check352:                                  ; preds = %dtable_check352, %dtable_skip350
  %dtable_ref353 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip350 ], [ %next_dtable_ref355, %dtable_check352 ]
  %dtable_ptr354 = load ptr, ptr %dtable_ref353, align 8
  %103 = icmp eq ptr %dtable_ptr354, null
  %next_dtable_ref355 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr354, i32 0, i32 2
  br i1 %103, label %dtable_found356, label %dtable_check352

dtable_found356:                                  ; preds = %dtable_check352
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", ptr %dtable_ref353, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip357

dtable_skip357:                                   ; preds = %dtable_found356, %dtable_skip350
  %next_val358 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  %104 = icmp eq ptr %next_val358, inttoptr (i64 -1 to ptr)
  br i1 %104, label %dtable_check359, label %dtable_skip364

dtable_check359:                                  ; preds = %dtable_check359, %dtable_skip357
  %dtable_ref360 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip357 ], [ %next_dtable_ref362, %dtable_check359 ]
  %dtable_ptr361 = load ptr, ptr %dtable_ref360, align 8
  %105 = icmp eq ptr %dtable_ptr361, null
  %next_dtable_ref362 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr361, i32 0, i32 2
  br i1 %105, label %dtable_found363, label %dtable_check359

dtable_found363:                                  ; preds = %dtable_check359
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", ptr %dtable_ref360, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip364

dtable_skip364:                                   ; preds = %dtable_found363, %dtable_skip357
  %next_val365 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  %106 = icmp eq ptr %next_val365, inttoptr (i64 -1 to ptr)
  br i1 %106, label %dtable_check366, label %dtable_skip371

dtable_check366:                                  ; preds = %dtable_check366, %dtable_skip364
  %dtable_ref367 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip364 ], [ %next_dtable_ref369, %dtable_check366 ]
  %dtable_ptr368 = load ptr, ptr %dtable_ref367, align 8
  %107 = icmp eq ptr %dtable_ptr368, null
  %next_dtable_ref369 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr368, i32 0, i32 2
  br i1 %107, label %dtable_found370, label %dtable_check366

dtable_found370:                                  ; preds = %dtable_check366
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", ptr %dtable_ref367, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip371

dtable_skip371:                                   ; preds = %dtable_found370, %dtable_skip364
  %next_val372 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  %108 = icmp eq ptr %next_val372, inttoptr (i64 -1 to ptr)
  br i1 %108, label %dtable_check373, label %dtable_skip378

dtable_check373:                                  ; preds = %dtable_check373, %dtable_skip371
  %dtable_ref374 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip371 ], [ %next_dtable_ref376, %dtable_check373 ]
  %dtable_ptr375 = load ptr, ptr %dtable_ref374, align 8
  %109 = icmp eq ptr %dtable_ptr375, null
  %next_dtable_ref376 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr375, i32 0, i32 2
  br i1 %109, label %dtable_found377, label %dtable_check373

dtable_found377:                                  ; preds = %dtable_check373
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", ptr %dtable_ref374, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip378

dtable_skip378:                                   ; preds = %dtable_found377, %dtable_skip371
  %next_val379 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  %110 = icmp eq ptr %next_val379, inttoptr (i64 -1 to ptr)
  br i1 %110, label %dtable_check380, label %dtable_skip385

dtable_check380:                                  ; preds = %dtable_check380, %dtable_skip378
  %dtable_ref381 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip378 ], [ %next_dtable_ref383, %dtable_check380 ]
  %dtable_ptr382 = load ptr, ptr %dtable_ref381, align 8
  %111 = icmp eq ptr %dtable_ptr382, null
  %next_dtable_ref383 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr382, i32 0, i32 2
  br i1 %111, label %dtable_found384, label %dtable_check380

dtable_found384:                                  ; preds = %dtable_check380
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", ptr %dtable_ref381, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip385

dtable_skip385:                                   ; preds = %dtable_found384, %dtable_skip378
  %next_val386 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  %112 = icmp eq ptr %next_val386, inttoptr (i64 -1 to ptr)
  br i1 %112, label %dtable_check387, label %dtable_skip392

dtable_check387:                                  ; preds = %dtable_check387, %dtable_skip385
  %dtable_ref388 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip385 ], [ %next_dtable_ref390, %dtable_check387 ]
  %dtable_ptr389 = load ptr, ptr %dtable_ref388, align 8
  %113 = icmp eq ptr %dtable_ptr389, null
  %next_dtable_ref390 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr389, i32 0, i32 2
  br i1 %113, label %dtable_found391, label %dtable_check387

dtable_found391:                                  ; preds = %dtable_check387
  store ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", ptr %dtable_ref388, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip392

dtable_skip392:                                   ; preds = %dtable_found391, %dtable_skip385
  %next_val393 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  %114 = icmp eq ptr %next_val393, inttoptr (i64 -1 to ptr)
  br i1 %114, label %dtable_check394, label %dtable_skip399

dtable_check394:                                  ; preds = %dtable_check394, %dtable_skip392
  %dtable_ref395 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip392 ], [ %next_dtable_ref397, %dtable_check394 ]
  %dtable_ptr396 = load ptr, ptr %dtable_ref395, align 8
  %115 = icmp eq ptr %dtable_ptr396, null
  %next_dtable_ref397 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr396, i32 0, i32 2
  br i1 %115, label %dtable_found398, label %dtable_check394

dtable_found398:                                  ; preds = %dtable_check394
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", ptr %dtable_ref395, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip399

dtable_skip399:                                   ; preds = %dtable_found398, %dtable_skip392
  %next_val400 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  %116 = icmp eq ptr %next_val400, inttoptr (i64 -1 to ptr)
  br i1 %116, label %dtable_check401, label %dtable_skip406

dtable_check401:                                  ; preds = %dtable_check401, %dtable_skip399
  %dtable_ref402 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip399 ], [ %next_dtable_ref404, %dtable_check401 ]
  %dtable_ptr403 = load ptr, ptr %dtable_ref402, align 8
  %117 = icmp eq ptr %dtable_ptr403, null
  %next_dtable_ref404 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr403, i32 0, i32 2
  br i1 %117, label %dtable_found405, label %dtable_check401

dtable_found405:                                  ; preds = %dtable_check401
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", ptr %dtable_ref402, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip406

dtable_skip406:                                   ; preds = %dtable_found405, %dtable_skip399
  %next_val407 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  %118 = icmp eq ptr %next_val407, inttoptr (i64 -1 to ptr)
  br i1 %118, label %dtable_check408, label %dtable_skip413

dtable_check408:                                  ; preds = %dtable_check408, %dtable_skip406
  %dtable_ref409 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip406 ], [ %next_dtable_ref411, %dtable_check408 ]
  %dtable_ptr410 = load ptr, ptr %dtable_ref409, align 8
  %119 = icmp eq ptr %dtable_ptr410, null
  %next_dtable_ref411 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr410, i32 0, i32 2
  br i1 %119, label %dtable_found412, label %dtable_check408

dtable_found412:                                  ; preds = %dtable_check408
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", ptr %dtable_ref409, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip413

dtable_skip413:                                   ; preds = %dtable_found412, %dtable_skip406
  %next_val414 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  %120 = icmp eq ptr %next_val414, inttoptr (i64 -1 to ptr)
  br i1 %120, label %dtable_check415, label %dtable_skip420

dtable_check415:                                  ; preds = %dtable_check415, %dtable_skip413
  %dtable_ref416 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip413 ], [ %next_dtable_ref418, %dtable_check415 ]
  %dtable_ptr417 = load ptr, ptr %dtable_ref416, align 8
  %121 = icmp eq ptr %dtable_ptr417, null
  %next_dtable_ref418 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr417, i32 0, i32 2
  br i1 %121, label %dtable_found419, label %dtable_check415

dtable_found419:                                  ; preds = %dtable_check415
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", ptr %dtable_ref416, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip420

dtable_skip420:                                   ; preds = %dtable_found419, %dtable_skip413
  %next_val421 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  %122 = icmp eq ptr %next_val421, inttoptr (i64 -1 to ptr)
  br i1 %122, label %dtable_check422, label %dtable_skip427

dtable_check422:                                  ; preds = %dtable_check422, %dtable_skip420
  %dtable_ref423 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip420 ], [ %next_dtable_ref425, %dtable_check422 ]
  %dtable_ptr424 = load ptr, ptr %dtable_ref423, align 8
  %123 = icmp eq ptr %dtable_ptr424, null
  %next_dtable_ref425 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr424, i32 0, i32 2
  br i1 %123, label %dtable_found426, label %dtable_check422

dtable_found426:                                  ; preds = %dtable_check422
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", ptr %dtable_ref423, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip427

dtable_skip427:                                   ; preds = %dtable_found426, %dtable_skip420
  %next_val428 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  %124 = icmp eq ptr %next_val428, inttoptr (i64 -1 to ptr)
  br i1 %124, label %dtable_check429, label %dtable_skip434

dtable_check429:                                  ; preds = %dtable_check429, %dtable_skip427
  %dtable_ref430 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip427 ], [ %next_dtable_ref432, %dtable_check429 ]
  %dtable_ptr431 = load ptr, ptr %dtable_ref430, align 8
  %125 = icmp eq ptr %dtable_ptr431, null
  %next_dtable_ref432 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr431, i32 0, i32 2
  br i1 %125, label %dtable_found433, label %dtable_check429

dtable_found433:                                  ; preds = %dtable_check429
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", ptr %dtable_ref430, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip434

dtable_skip434:                                   ; preds = %dtable_found433, %dtable_skip427
  %next_val435 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  %126 = icmp eq ptr %next_val435, inttoptr (i64 -1 to ptr)
  br i1 %126, label %dtable_check436, label %dtable_skip441

dtable_check436:                                  ; preds = %dtable_check436, %dtable_skip434
  %dtable_ref437 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip434 ], [ %next_dtable_ref439, %dtable_check436 ]
  %dtable_ptr438 = load ptr, ptr %dtable_ref437, align 8
  %127 = icmp eq ptr %dtable_ptr438, null
  %next_dtable_ref439 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr438, i32 0, i32 2
  br i1 %127, label %dtable_found440, label %dtable_check436

dtable_found440:                                  ; preds = %dtable_check436
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", ptr %dtable_ref437, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip441

dtable_skip441:                                   ; preds = %dtable_found440, %dtable_skip434
  %next_val442 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  %128 = icmp eq ptr %next_val442, inttoptr (i64 -1 to ptr)
  br i1 %128, label %dtable_check443, label %dtable_skip448

dtable_check443:                                  ; preds = %dtable_check443, %dtable_skip441
  %dtable_ref444 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip441 ], [ %next_dtable_ref446, %dtable_check443 ]
  %dtable_ptr445 = load ptr, ptr %dtable_ref444, align 8
  %129 = icmp eq ptr %dtable_ptr445, null
  %next_dtable_ref446 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr445, i32 0, i32 2
  br i1 %129, label %dtable_found447, label %dtable_check443

dtable_found447:                                  ; preds = %dtable_check443
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", ptr %dtable_ref444, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip448

dtable_skip448:                                   ; preds = %dtable_found447, %dtable_skip441
  %next_val449 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  %130 = icmp eq ptr %next_val449, inttoptr (i64 -1 to ptr)
  br i1 %130, label %dtable_check450, label %dtable_skip455

dtable_check450:                                  ; preds = %dtable_check450, %dtable_skip448
  %dtable_ref451 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip448 ], [ %next_dtable_ref453, %dtable_check450 ]
  %dtable_ptr452 = load ptr, ptr %dtable_ref451, align 8
  %131 = icmp eq ptr %dtable_ptr452, null
  %next_dtable_ref453 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr452, i32 0, i32 2
  br i1 %131, label %dtable_found454, label %dtable_check450

dtable_found454:                                  ; preds = %dtable_check450
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", ptr %dtable_ref451, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip455

dtable_skip455:                                   ; preds = %dtable_found454, %dtable_skip448
  %next_val456 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  %132 = icmp eq ptr %next_val456, inttoptr (i64 -1 to ptr)
  br i1 %132, label %dtable_check457, label %dtable_skip462

dtable_check457:                                  ; preds = %dtable_check457, %dtable_skip455
  %dtable_ref458 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip455 ], [ %next_dtable_ref460, %dtable_check457 ]
  %dtable_ptr459 = load ptr, ptr %dtable_ref458, align 8
  %133 = icmp eq ptr %dtable_ptr459, null
  %next_dtable_ref460 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr459, i32 0, i32 2
  br i1 %133, label %dtable_found461, label %dtable_check457

dtable_found461:                                  ; preds = %dtable_check457
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", ptr %dtable_ref458, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip462

dtable_skip462:                                   ; preds = %dtable_found461, %dtable_skip455
  %next_val463 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  %134 = icmp eq ptr %next_val463, inttoptr (i64 -1 to ptr)
  br i1 %134, label %dtable_check464, label %dtable_skip469

dtable_check464:                                  ; preds = %dtable_check464, %dtable_skip462
  %dtable_ref465 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip462 ], [ %next_dtable_ref467, %dtable_check464 ]
  %dtable_ptr466 = load ptr, ptr %dtable_ref465, align 8
  %135 = icmp eq ptr %dtable_ptr466, null
  %next_dtable_ref467 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr466, i32 0, i32 2
  br i1 %135, label %dtable_found468, label %dtable_check464

dtable_found468:                                  ; preds = %dtable_check464
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", ptr %dtable_ref465, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip469

dtable_skip469:                                   ; preds = %dtable_found468, %dtable_skip462
  %next_val470 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  %136 = icmp eq ptr %next_val470, inttoptr (i64 -1 to ptr)
  br i1 %136, label %dtable_check471, label %dtable_skip476

dtable_check471:                                  ; preds = %dtable_check471, %dtable_skip469
  %dtable_ref472 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip469 ], [ %next_dtable_ref474, %dtable_check471 ]
  %dtable_ptr473 = load ptr, ptr %dtable_ref472, align 8
  %137 = icmp eq ptr %dtable_ptr473, null
  %next_dtable_ref474 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr473, i32 0, i32 2
  br i1 %137, label %dtable_found475, label %dtable_check471

dtable_found475:                                  ; preds = %dtable_check471
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", ptr %dtable_ref472, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip476

dtable_skip476:                                   ; preds = %dtable_found475, %dtable_skip469
  %next_val477 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  %138 = icmp eq ptr %next_val477, inttoptr (i64 -1 to ptr)
  br i1 %138, label %dtable_check478, label %dtable_skip483

dtable_check478:                                  ; preds = %dtable_check478, %dtable_skip476
  %dtable_ref479 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip476 ], [ %next_dtable_ref481, %dtable_check478 ]
  %dtable_ptr480 = load ptr, ptr %dtable_ref479, align 8
  %139 = icmp eq ptr %dtable_ptr480, null
  %next_dtable_ref481 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr480, i32 0, i32 2
  br i1 %139, label %dtable_found482, label %dtable_check478

dtable_found482:                                  ; preds = %dtable_check478
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", ptr %dtable_ref479, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip483

dtable_skip483:                                   ; preds = %dtable_found482, %dtable_skip476
  %next_val484 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  %140 = icmp eq ptr %next_val484, inttoptr (i64 -1 to ptr)
  br i1 %140, label %dtable_check485, label %dtable_skip490

dtable_check485:                                  ; preds = %dtable_check485, %dtable_skip483
  %dtable_ref486 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip483 ], [ %next_dtable_ref488, %dtable_check485 ]
  %dtable_ptr487 = load ptr, ptr %dtable_ref486, align 8
  %141 = icmp eq ptr %dtable_ptr487, null
  %next_dtable_ref488 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr487, i32 0, i32 2
  br i1 %141, label %dtable_found489, label %dtable_check485

dtable_found489:                                  ; preds = %dtable_check485
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", ptr %dtable_ref486, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip490

dtable_skip490:                                   ; preds = %dtable_found489, %dtable_skip483
  %next_val491 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  %142 = icmp eq ptr %next_val491, inttoptr (i64 -1 to ptr)
  br i1 %142, label %dtable_check492, label %dtable_skip497

dtable_check492:                                  ; preds = %dtable_check492, %dtable_skip490
  %dtable_ref493 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip490 ], [ %next_dtable_ref495, %dtable_check492 ]
  %dtable_ptr494 = load ptr, ptr %dtable_ref493, align 8
  %143 = icmp eq ptr %dtable_ptr494, null
  %next_dtable_ref495 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr494, i32 0, i32 2
  br i1 %143, label %dtable_found496, label %dtable_check492

dtable_found496:                                  ; preds = %dtable_check492
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", ptr %dtable_ref493, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip497

dtable_skip497:                                   ; preds = %dtable_found496, %dtable_skip490
  %next_val498 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  %144 = icmp eq ptr %next_val498, inttoptr (i64 -1 to ptr)
  br i1 %144, label %dtable_check499, label %dtable_skip504

dtable_check499:                                  ; preds = %dtable_check499, %dtable_skip497
  %dtable_ref500 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip497 ], [ %next_dtable_ref502, %dtable_check499 ]
  %dtable_ptr501 = load ptr, ptr %dtable_ref500, align 8
  %145 = icmp eq ptr %dtable_ptr501, null
  %next_dtable_ref502 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr501, i32 0, i32 2
  br i1 %145, label %dtable_found503, label %dtable_check499

dtable_found503:                                  ; preds = %dtable_check499
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", ptr %dtable_ref500, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip504

dtable_skip504:                                   ; preds = %dtable_found503, %dtable_skip497
  %next_val505 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  %146 = icmp eq ptr %next_val505, inttoptr (i64 -1 to ptr)
  br i1 %146, label %dtable_check506, label %dtable_skip511

dtable_check506:                                  ; preds = %dtable_check506, %dtable_skip504
  %dtable_ref507 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip504 ], [ %next_dtable_ref509, %dtable_check506 ]
  %dtable_ptr508 = load ptr, ptr %dtable_ref507, align 8
  %147 = icmp eq ptr %dtable_ptr508, null
  %next_dtable_ref509 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr508, i32 0, i32 2
  br i1 %147, label %dtable_found510, label %dtable_check506

dtable_found510:                                  ; preds = %dtable_check506
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", ptr %dtable_ref507, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip511

dtable_skip511:                                   ; preds = %dtable_found510, %dtable_skip504
  %next_val512 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  %148 = icmp eq ptr %next_val512, inttoptr (i64 -1 to ptr)
  br i1 %148, label %dtable_check513, label %dtable_skip518

dtable_check513:                                  ; preds = %dtable_check513, %dtable_skip511
  %dtable_ref514 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip511 ], [ %next_dtable_ref516, %dtable_check513 ]
  %dtable_ptr515 = load ptr, ptr %dtable_ref514, align 8
  %149 = icmp eq ptr %dtable_ptr515, null
  %next_dtable_ref516 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr515, i32 0, i32 2
  br i1 %149, label %dtable_found517, label %dtable_check513

dtable_found517:                                  ; preds = %dtable_check513
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", ptr %dtable_ref514, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip518

dtable_skip518:                                   ; preds = %dtable_found517, %dtable_skip511
  %next_val519 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  %150 = icmp eq ptr %next_val519, inttoptr (i64 -1 to ptr)
  br i1 %150, label %dtable_check520, label %dtable_skip525

dtable_check520:                                  ; preds = %dtable_check520, %dtable_skip518
  %dtable_ref521 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip518 ], [ %next_dtable_ref523, %dtable_check520 ]
  %dtable_ptr522 = load ptr, ptr %dtable_ref521, align 8
  %151 = icmp eq ptr %dtable_ptr522, null
  %next_dtable_ref523 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr522, i32 0, i32 2
  br i1 %151, label %dtable_found524, label %dtable_check520

dtable_found524:                                  ; preds = %dtable_check520
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", ptr %dtable_ref521, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip525

dtable_skip525:                                   ; preds = %dtable_found524, %dtable_skip518
  %next_val526 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  %152 = icmp eq ptr %next_val526, inttoptr (i64 -1 to ptr)
  br i1 %152, label %dtable_check527, label %dtable_skip532

dtable_check527:                                  ; preds = %dtable_check527, %dtable_skip525
  %dtable_ref528 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip525 ], [ %next_dtable_ref530, %dtable_check527 ]
  %dtable_ptr529 = load ptr, ptr %dtable_ref528, align 8
  %153 = icmp eq ptr %dtable_ptr529, null
  %next_dtable_ref530 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr529, i32 0, i32 2
  br i1 %153, label %dtable_found531, label %dtable_check527

dtable_found531:                                  ; preds = %dtable_check527
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", ptr %dtable_ref528, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip532

dtable_skip532:                                   ; preds = %dtable_found531, %dtable_skip525
  %next_val533 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  %154 = icmp eq ptr %next_val533, inttoptr (i64 -1 to ptr)
  br i1 %154, label %dtable_check534, label %dtable_skip539

dtable_check534:                                  ; preds = %dtable_check534, %dtable_skip532
  %dtable_ref535 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip532 ], [ %next_dtable_ref537, %dtable_check534 ]
  %dtable_ptr536 = load ptr, ptr %dtable_ref535, align 8
  %155 = icmp eq ptr %dtable_ptr536, null
  %next_dtable_ref537 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr536, i32 0, i32 2
  br i1 %155, label %dtable_found538, label %dtable_check534

dtable_found538:                                  ; preds = %dtable_check534
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", ptr %dtable_ref535, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip539

dtable_skip539:                                   ; preds = %dtable_found538, %dtable_skip532
  %next_val540 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  %156 = icmp eq ptr %next_val540, inttoptr (i64 -1 to ptr)
  br i1 %156, label %dtable_check541, label %dtable_skip546

dtable_check541:                                  ; preds = %dtable_check541, %dtable_skip539
  %dtable_ref542 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip539 ], [ %next_dtable_ref544, %dtable_check541 ]
  %dtable_ptr543 = load ptr, ptr %dtable_ref542, align 8
  %157 = icmp eq ptr %dtable_ptr543, null
  %next_dtable_ref544 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr543, i32 0, i32 2
  br i1 %157, label %dtable_found545, label %dtable_check541

dtable_found545:                                  ; preds = %dtable_check541
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", ptr %dtable_ref542, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip546

dtable_skip546:                                   ; preds = %dtable_found545, %dtable_skip539
  %next_val547 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  %158 = icmp eq ptr %next_val547, inttoptr (i64 -1 to ptr)
  br i1 %158, label %dtable_check548, label %dtable_skip553

dtable_check548:                                  ; preds = %dtable_check548, %dtable_skip546
  %dtable_ref549 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip546 ], [ %next_dtable_ref551, %dtable_check548 ]
  %dtable_ptr550 = load ptr, ptr %dtable_ref549, align 8
  %159 = icmp eq ptr %dtable_ptr550, null
  %next_dtable_ref551 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr550, i32 0, i32 2
  br i1 %159, label %dtable_found552, label %dtable_check548

dtable_found552:                                  ; preds = %dtable_check548
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", ptr %dtable_ref549, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip553

dtable_skip553:                                   ; preds = %dtable_found552, %dtable_skip546
  %next_val554 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  %160 = icmp eq ptr %next_val554, inttoptr (i64 -1 to ptr)
  br i1 %160, label %dtable_check555, label %dtable_skip560

dtable_check555:                                  ; preds = %dtable_check555, %dtable_skip553
  %dtable_ref556 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip553 ], [ %next_dtable_ref558, %dtable_check555 ]
  %dtable_ptr557 = load ptr, ptr %dtable_ref556, align 8
  %161 = icmp eq ptr %dtable_ptr557, null
  %next_dtable_ref558 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr557, i32 0, i32 2
  br i1 %161, label %dtable_found559, label %dtable_check555

dtable_found559:                                  ; preds = %dtable_check555
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", ptr %dtable_ref556, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip560

dtable_skip560:                                   ; preds = %dtable_found559, %dtable_skip553
  %next_val561 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  %162 = icmp eq ptr %next_val561, inttoptr (i64 -1 to ptr)
  br i1 %162, label %dtable_check562, label %dtable_skip567

dtable_check562:                                  ; preds = %dtable_check562, %dtable_skip560
  %dtable_ref563 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip560 ], [ %next_dtable_ref565, %dtable_check562 ]
  %dtable_ptr564 = load ptr, ptr %dtable_ref563, align 8
  %163 = icmp eq ptr %dtable_ptr564, null
  %next_dtable_ref565 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr564, i32 0, i32 2
  br i1 %163, label %dtable_found566, label %dtable_check562

dtable_found566:                                  ; preds = %dtable_check562
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", ptr %dtable_ref563, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip567

dtable_skip567:                                   ; preds = %dtable_found566, %dtable_skip560
  %next_val568 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  %164 = icmp eq ptr %next_val568, inttoptr (i64 -1 to ptr)
  br i1 %164, label %dtable_check569, label %dtable_skip574

dtable_check569:                                  ; preds = %dtable_check569, %dtable_skip567
  %dtable_ref570 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip567 ], [ %next_dtable_ref572, %dtable_check569 ]
  %dtable_ptr571 = load ptr, ptr %dtable_ref570, align 8
  %165 = icmp eq ptr %dtable_ptr571, null
  %next_dtable_ref572 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr571, i32 0, i32 2
  br i1 %165, label %dtable_found573, label %dtable_check569

dtable_found573:                                  ; preds = %dtable_check569
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", ptr %dtable_ref570, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip574

dtable_skip574:                                   ; preds = %dtable_found573, %dtable_skip567
  %next_val575 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  %166 = icmp eq ptr %next_val575, inttoptr (i64 -1 to ptr)
  br i1 %166, label %dtable_check576, label %dtable_skip581

dtable_check576:                                  ; preds = %dtable_check576, %dtable_skip574
  %dtable_ref577 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip574 ], [ %next_dtable_ref579, %dtable_check576 ]
  %dtable_ptr578 = load ptr, ptr %dtable_ref577, align 8
  %167 = icmp eq ptr %dtable_ptr578, null
  %next_dtable_ref579 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr578, i32 0, i32 2
  br i1 %167, label %dtable_found580, label %dtable_check576

dtable_found580:                                  ; preds = %dtable_check576
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", ptr %dtable_ref577, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip581

dtable_skip581:                                   ; preds = %dtable_found580, %dtable_skip574
  %next_val582 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  %168 = icmp eq ptr %next_val582, inttoptr (i64 -1 to ptr)
  br i1 %168, label %dtable_check583, label %dtable_skip588

dtable_check583:                                  ; preds = %dtable_check583, %dtable_skip581
  %dtable_ref584 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip581 ], [ %next_dtable_ref586, %dtable_check583 ]
  %dtable_ptr585 = load ptr, ptr %dtable_ref584, align 8
  %169 = icmp eq ptr %dtable_ptr585, null
  %next_dtable_ref586 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr585, i32 0, i32 2
  br i1 %169, label %dtable_found587, label %dtable_check583

dtable_found587:                                  ; preds = %dtable_check583
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", ptr %dtable_ref584, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip588

dtable_skip588:                                   ; preds = %dtable_found587, %dtable_skip581
  %next_val589 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  %170 = icmp eq ptr %next_val589, inttoptr (i64 -1 to ptr)
  br i1 %170, label %dtable_check590, label %dtable_skip595

dtable_check590:                                  ; preds = %dtable_check590, %dtable_skip588
  %dtable_ref591 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip588 ], [ %next_dtable_ref593, %dtable_check590 ]
  %dtable_ptr592 = load ptr, ptr %dtable_ref591, align 8
  %171 = icmp eq ptr %dtable_ptr592, null
  %next_dtable_ref593 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr592, i32 0, i32 2
  br i1 %171, label %dtable_found594, label %dtable_check590

dtable_found594:                                  ; preds = %dtable_check590
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", ptr %dtable_ref591, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip595

dtable_skip595:                                   ; preds = %dtable_found594, %dtable_skip588
  %next_val596 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  %172 = icmp eq ptr %next_val596, inttoptr (i64 -1 to ptr)
  br i1 %172, label %dtable_check597, label %dtable_skip602

dtable_check597:                                  ; preds = %dtable_check597, %dtable_skip595
  %dtable_ref598 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip595 ], [ %next_dtable_ref600, %dtable_check597 ]
  %dtable_ptr599 = load ptr, ptr %dtable_ref598, align 8
  %173 = icmp eq ptr %dtable_ptr599, null
  %next_dtable_ref600 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr599, i32 0, i32 2
  br i1 %173, label %dtable_found601, label %dtable_check597

dtable_found601:                                  ; preds = %dtable_check597
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", ptr %dtable_ref598, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip602

dtable_skip602:                                   ; preds = %dtable_found601, %dtable_skip595
  %next_val603 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  %174 = icmp eq ptr %next_val603, inttoptr (i64 -1 to ptr)
  br i1 %174, label %dtable_check604, label %dtable_skip609

dtable_check604:                                  ; preds = %dtable_check604, %dtable_skip602
  %dtable_ref605 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip602 ], [ %next_dtable_ref607, %dtable_check604 ]
  %dtable_ptr606 = load ptr, ptr %dtable_ref605, align 8
  %175 = icmp eq ptr %dtable_ptr606, null
  %next_dtable_ref607 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr606, i32 0, i32 2
  br i1 %175, label %dtable_found608, label %dtable_check604

dtable_found608:                                  ; preds = %dtable_check604
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", ptr %dtable_ref605, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip609

dtable_skip609:                                   ; preds = %dtable_found608, %dtable_skip602
  %next_val610 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  %176 = icmp eq ptr %next_val610, inttoptr (i64 -1 to ptr)
  br i1 %176, label %dtable_check611, label %dtable_skip616

dtable_check611:                                  ; preds = %dtable_check611, %dtable_skip609
  %dtable_ref612 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip609 ], [ %next_dtable_ref614, %dtable_check611 ]
  %dtable_ptr613 = load ptr, ptr %dtable_ref612, align 8
  %177 = icmp eq ptr %dtable_ptr613, null
  %next_dtable_ref614 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr613, i32 0, i32 2
  br i1 %177, label %dtable_found615, label %dtable_check611

dtable_found615:                                  ; preds = %dtable_check611
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", ptr %dtable_ref612, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip616

dtable_skip616:                                   ; preds = %dtable_found615, %dtable_skip609
  %next_val617 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  %178 = icmp eq ptr %next_val617, inttoptr (i64 -1 to ptr)
  br i1 %178, label %dtable_check618, label %dtable_skip623

dtable_check618:                                  ; preds = %dtable_check618, %dtable_skip616
  %dtable_ref619 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip616 ], [ %next_dtable_ref621, %dtable_check618 ]
  %dtable_ptr620 = load ptr, ptr %dtable_ref619, align 8
  %179 = icmp eq ptr %dtable_ptr620, null
  %next_dtable_ref621 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr620, i32 0, i32 2
  br i1 %179, label %dtable_found622, label %dtable_check618

dtable_found622:                                  ; preds = %dtable_check618
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", ptr %dtable_ref619, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip623

dtable_skip623:                                   ; preds = %dtable_found622, %dtable_skip616
  %next_val624 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  %180 = icmp eq ptr %next_val624, inttoptr (i64 -1 to ptr)
  br i1 %180, label %dtable_check625, label %dtable_skip630

dtable_check625:                                  ; preds = %dtable_check625, %dtable_skip623
  %dtable_ref626 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip623 ], [ %next_dtable_ref628, %dtable_check625 ]
  %dtable_ptr627 = load ptr, ptr %dtable_ref626, align 8
  %181 = icmp eq ptr %dtable_ptr627, null
  %next_dtable_ref628 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr627, i32 0, i32 2
  br i1 %181, label %dtable_found629, label %dtable_check625

dtable_found629:                                  ; preds = %dtable_check625
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", ptr %dtable_ref626, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip630

dtable_skip630:                                   ; preds = %dtable_found629, %dtable_skip623
  %next_val631 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  %182 = icmp eq ptr %next_val631, inttoptr (i64 -1 to ptr)
  br i1 %182, label %dtable_check632, label %dtable_skip637

dtable_check632:                                  ; preds = %dtable_check632, %dtable_skip630
  %dtable_ref633 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip630 ], [ %next_dtable_ref635, %dtable_check632 ]
  %dtable_ptr634 = load ptr, ptr %dtable_ref633, align 8
  %183 = icmp eq ptr %dtable_ptr634, null
  %next_dtable_ref635 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr634, i32 0, i32 2
  br i1 %183, label %dtable_found636, label %dtable_check632

dtable_found636:                                  ; preds = %dtable_check632
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", ptr %dtable_ref633, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip637

dtable_skip637:                                   ; preds = %dtable_found636, %dtable_skip630
  %next_val638 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  %184 = icmp eq ptr %next_val638, inttoptr (i64 -1 to ptr)
  br i1 %184, label %dtable_check639, label %dtable_skip644

dtable_check639:                                  ; preds = %dtable_check639, %dtable_skip637
  %dtable_ref640 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip637 ], [ %next_dtable_ref642, %dtable_check639 ]
  %dtable_ptr641 = load ptr, ptr %dtable_ref640, align 8
  %185 = icmp eq ptr %dtable_ptr641, null
  %next_dtable_ref642 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr641, i32 0, i32 2
  br i1 %185, label %dtable_found643, label %dtable_check639

dtable_found643:                                  ; preds = %dtable_check639
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", ptr %dtable_ref640, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip644

dtable_skip644:                                   ; preds = %dtable_found643, %dtable_skip637
  %next_val645 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  %186 = icmp eq ptr %next_val645, inttoptr (i64 -1 to ptr)
  br i1 %186, label %dtable_check646, label %dtable_skip651

dtable_check646:                                  ; preds = %dtable_check646, %dtable_skip644
  %dtable_ref647 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip644 ], [ %next_dtable_ref649, %dtable_check646 ]
  %dtable_ptr648 = load ptr, ptr %dtable_ref647, align 8
  %187 = icmp eq ptr %dtable_ptr648, null
  %next_dtable_ref649 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr648, i32 0, i32 2
  br i1 %187, label %dtable_found650, label %dtable_check646

dtable_found650:                                  ; preds = %dtable_check646
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", ptr %dtable_ref647, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip651

dtable_skip651:                                   ; preds = %dtable_found650, %dtable_skip644
  %next_val652 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  %188 = icmp eq ptr %next_val652, inttoptr (i64 -1 to ptr)
  br i1 %188, label %dtable_check653, label %dtable_skip658

dtable_check653:                                  ; preds = %dtable_check653, %dtable_skip651
  %dtable_ref654 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip651 ], [ %next_dtable_ref656, %dtable_check653 ]
  %dtable_ptr655 = load ptr, ptr %dtable_ref654, align 8
  %189 = icmp eq ptr %dtable_ptr655, null
  %next_dtable_ref656 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr655, i32 0, i32 2
  br i1 %189, label %dtable_found657, label %dtable_check653

dtable_found657:                                  ; preds = %dtable_check653
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", ptr %dtable_ref654, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip658

dtable_skip658:                                   ; preds = %dtable_found657, %dtable_skip651
  %next_val659 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  %190 = icmp eq ptr %next_val659, inttoptr (i64 -1 to ptr)
  br i1 %190, label %dtable_check660, label %dtable_skip665

dtable_check660:                                  ; preds = %dtable_check660, %dtable_skip658
  %dtable_ref661 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip658 ], [ %next_dtable_ref663, %dtable_check660 ]
  %dtable_ptr662 = load ptr, ptr %dtable_ref661, align 8
  %191 = icmp eq ptr %dtable_ptr662, null
  %next_dtable_ref663 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr662, i32 0, i32 2
  br i1 %191, label %dtable_found664, label %dtable_check660

dtable_found664:                                  ; preds = %dtable_check660
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", ptr %dtable_ref661, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip665

dtable_skip665:                                   ; preds = %dtable_found664, %dtable_skip658
  %next_val666 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  %192 = icmp eq ptr %next_val666, inttoptr (i64 -1 to ptr)
  br i1 %192, label %dtable_check667, label %dtable_skip672

dtable_check667:                                  ; preds = %dtable_check667, %dtable_skip665
  %dtable_ref668 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip665 ], [ %next_dtable_ref670, %dtable_check667 ]
  %dtable_ptr669 = load ptr, ptr %dtable_ref668, align 8
  %193 = icmp eq ptr %dtable_ptr669, null
  %next_dtable_ref670 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr669, i32 0, i32 2
  br i1 %193, label %dtable_found671, label %dtable_check667

dtable_found671:                                  ; preds = %dtable_check667
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", ptr %dtable_ref668, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip672

dtable_skip672:                                   ; preds = %dtable_found671, %dtable_skip665
  %next_val673 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  %194 = icmp eq ptr %next_val673, inttoptr (i64 -1 to ptr)
  br i1 %194, label %dtable_check674, label %dtable_skip679

dtable_check674:                                  ; preds = %dtable_check674, %dtable_skip672
  %dtable_ref675 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip672 ], [ %next_dtable_ref677, %dtable_check674 ]
  %dtable_ptr676 = load ptr, ptr %dtable_ref675, align 8
  %195 = icmp eq ptr %dtable_ptr676, null
  %next_dtable_ref677 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr676, i32 0, i32 2
  br i1 %195, label %dtable_found678, label %dtable_check674

dtable_found678:                                  ; preds = %dtable_check674
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", ptr %dtable_ref675, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip679

dtable_skip679:                                   ; preds = %dtable_found678, %dtable_skip672
  %next_val680 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  %196 = icmp eq ptr %next_val680, inttoptr (i64 -1 to ptr)
  br i1 %196, label %dtable_check681, label %dtable_skip686

dtable_check681:                                  ; preds = %dtable_check681, %dtable_skip679
  %dtable_ref682 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip679 ], [ %next_dtable_ref684, %dtable_check681 ]
  %dtable_ptr683 = load ptr, ptr %dtable_ref682, align 8
  %197 = icmp eq ptr %dtable_ptr683, null
  %next_dtable_ref684 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr683, i32 0, i32 2
  br i1 %197, label %dtable_found685, label %dtable_check681

dtable_found685:                                  ; preds = %dtable_check681
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", ptr %dtable_ref682, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip686

dtable_skip686:                                   ; preds = %dtable_found685, %dtable_skip679
  %next_val687 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  %198 = icmp eq ptr %next_val687, inttoptr (i64 -1 to ptr)
  br i1 %198, label %dtable_check688, label %dtable_skip693

dtable_check688:                                  ; preds = %dtable_check688, %dtable_skip686
  %dtable_ref689 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip686 ], [ %next_dtable_ref691, %dtable_check688 ]
  %dtable_ptr690 = load ptr, ptr %dtable_ref689, align 8
  %199 = icmp eq ptr %dtable_ptr690, null
  %next_dtable_ref691 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr690, i32 0, i32 2
  br i1 %199, label %dtable_found692, label %dtable_check688

dtable_found692:                                  ; preds = %dtable_check688
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", ptr %dtable_ref689, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip693

dtable_skip693:                                   ; preds = %dtable_found692, %dtable_skip686
  %next_val694 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  %200 = icmp eq ptr %next_val694, inttoptr (i64 -1 to ptr)
  br i1 %200, label %dtable_check695, label %dtable_skip700

dtable_check695:                                  ; preds = %dtable_check695, %dtable_skip693
  %dtable_ref696 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip693 ], [ %next_dtable_ref698, %dtable_check695 ]
  %dtable_ptr697 = load ptr, ptr %dtable_ref696, align 8
  %201 = icmp eq ptr %dtable_ptr697, null
  %next_dtable_ref698 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr697, i32 0, i32 2
  br i1 %201, label %dtable_found699, label %dtable_check695

dtable_found699:                                  ; preds = %dtable_check695
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", ptr %dtable_ref696, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip700

dtable_skip700:                                   ; preds = %dtable_found699, %dtable_skip693
  %next_val701 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  %202 = icmp eq ptr %next_val701, inttoptr (i64 -1 to ptr)
  br i1 %202, label %dtable_check702, label %dtable_skip707

dtable_check702:                                  ; preds = %dtable_check702, %dtable_skip700
  %dtable_ref703 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip700 ], [ %next_dtable_ref705, %dtable_check702 ]
  %dtable_ptr704 = load ptr, ptr %dtable_ref703, align 8
  %203 = icmp eq ptr %dtable_ptr704, null
  %next_dtable_ref705 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr704, i32 0, i32 2
  br i1 %203, label %dtable_found706, label %dtable_check702

dtable_found706:                                  ; preds = %dtable_check702
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", ptr %dtable_ref703, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip707

dtable_skip707:                                   ; preds = %dtable_found706, %dtable_skip700
  %next_val708 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  %204 = icmp eq ptr %next_val708, inttoptr (i64 -1 to ptr)
  br i1 %204, label %dtable_check709, label %dtable_skip714

dtable_check709:                                  ; preds = %dtable_check709, %dtable_skip707
  %dtable_ref710 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip707 ], [ %next_dtable_ref712, %dtable_check709 ]
  %dtable_ptr711 = load ptr, ptr %dtable_ref710, align 8
  %205 = icmp eq ptr %dtable_ptr711, null
  %next_dtable_ref712 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr711, i32 0, i32 2
  br i1 %205, label %dtable_found713, label %dtable_check709

dtable_found713:                                  ; preds = %dtable_check709
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", ptr %dtable_ref710, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip714

dtable_skip714:                                   ; preds = %dtable_found713, %dtable_skip707
  %next_val715 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  %206 = icmp eq ptr %next_val715, inttoptr (i64 -1 to ptr)
  br i1 %206, label %dtable_check716, label %dtable_skip721

dtable_check716:                                  ; preds = %dtable_check716, %dtable_skip714
  %dtable_ref717 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip714 ], [ %next_dtable_ref719, %dtable_check716 ]
  %dtable_ptr718 = load ptr, ptr %dtable_ref717, align 8
  %207 = icmp eq ptr %dtable_ptr718, null
  %next_dtable_ref719 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr718, i32 0, i32 2
  br i1 %207, label %dtable_found720, label %dtable_check716

dtable_found720:                                  ; preds = %dtable_check716
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", ptr %dtable_ref717, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip721

dtable_skip721:                                   ; preds = %dtable_found720, %dtable_skip714
  %next_val722 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  %208 = icmp eq ptr %next_val722, inttoptr (i64 -1 to ptr)
  br i1 %208, label %dtable_check723, label %dtable_skip728

dtable_check723:                                  ; preds = %dtable_check723, %dtable_skip721
  %dtable_ref724 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip721 ], [ %next_dtable_ref726, %dtable_check723 ]
  %dtable_ptr725 = load ptr, ptr %dtable_ref724, align 8
  %209 = icmp eq ptr %dtable_ptr725, null
  %next_dtable_ref726 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr725, i32 0, i32 2
  br i1 %209, label %dtable_found727, label %dtable_check723

dtable_found727:                                  ; preds = %dtable_check723
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", ptr %dtable_ref724, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip728

dtable_skip728:                                   ; preds = %dtable_found727, %dtable_skip721
  %next_val729 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  %210 = icmp eq ptr %next_val729, inttoptr (i64 -1 to ptr)
  br i1 %210, label %dtable_check730, label %dtable_skip735

dtable_check730:                                  ; preds = %dtable_check730, %dtable_skip728
  %dtable_ref731 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip728 ], [ %next_dtable_ref733, %dtable_check730 ]
  %dtable_ptr732 = load ptr, ptr %dtable_ref731, align 8
  %211 = icmp eq ptr %dtable_ptr732, null
  %next_dtable_ref733 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr732, i32 0, i32 2
  br i1 %211, label %dtable_found734, label %dtable_check730

dtable_found734:                                  ; preds = %dtable_check730
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", ptr %dtable_ref731, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip735

dtable_skip735:                                   ; preds = %dtable_found734, %dtable_skip728
  %next_val736 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  %212 = icmp eq ptr %next_val736, inttoptr (i64 -1 to ptr)
  br i1 %212, label %dtable_check737, label %dtable_skip742

dtable_check737:                                  ; preds = %dtable_check737, %dtable_skip735
  %dtable_ref738 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip735 ], [ %next_dtable_ref740, %dtable_check737 ]
  %dtable_ptr739 = load ptr, ptr %dtable_ref738, align 8
  %213 = icmp eq ptr %dtable_ptr739, null
  %next_dtable_ref740 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr739, i32 0, i32 2
  br i1 %213, label %dtable_found741, label %dtable_check737

dtable_found741:                                  ; preds = %dtable_check737
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", ptr %dtable_ref738, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip742

dtable_skip742:                                   ; preds = %dtable_found741, %dtable_skip735
  %next_val743 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  %214 = icmp eq ptr %next_val743, inttoptr (i64 -1 to ptr)
  br i1 %214, label %dtable_check744, label %dtable_skip749

dtable_check744:                                  ; preds = %dtable_check744, %dtable_skip742
  %dtable_ref745 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip742 ], [ %next_dtable_ref747, %dtable_check744 ]
  %dtable_ptr746 = load ptr, ptr %dtable_ref745, align 8
  %215 = icmp eq ptr %dtable_ptr746, null
  %next_dtable_ref747 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr746, i32 0, i32 2
  br i1 %215, label %dtable_found748, label %dtable_check744

dtable_found748:                                  ; preds = %dtable_check744
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", ptr %dtable_ref745, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip749

dtable_skip749:                                   ; preds = %dtable_found748, %dtable_skip742
  %next_val750 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  %216 = icmp eq ptr %next_val750, inttoptr (i64 -1 to ptr)
  br i1 %216, label %dtable_check751, label %dtable_skip756

dtable_check751:                                  ; preds = %dtable_check751, %dtable_skip749
  %dtable_ref752 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip749 ], [ %next_dtable_ref754, %dtable_check751 ]
  %dtable_ptr753 = load ptr, ptr %dtable_ref752, align 8
  %217 = icmp eq ptr %dtable_ptr753, null
  %next_dtable_ref754 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr753, i32 0, i32 2
  br i1 %217, label %dtable_found755, label %dtable_check751

dtable_found755:                                  ; preds = %dtable_check751
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", ptr %dtable_ref752, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip756

dtable_skip756:                                   ; preds = %dtable_found755, %dtable_skip749
  %next_val757 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  %218 = icmp eq ptr %next_val757, inttoptr (i64 -1 to ptr)
  br i1 %218, label %dtable_check758, label %dtable_skip763

dtable_check758:                                  ; preds = %dtable_check758, %dtable_skip756
  %dtable_ref759 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip756 ], [ %next_dtable_ref761, %dtable_check758 ]
  %dtable_ptr760 = load ptr, ptr %dtable_ref759, align 8
  %219 = icmp eq ptr %dtable_ptr760, null
  %next_dtable_ref761 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr760, i32 0, i32 2
  br i1 %219, label %dtable_found762, label %dtable_check758

dtable_found762:                                  ; preds = %dtable_check758
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", ptr %dtable_ref759, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip763

dtable_skip763:                                   ; preds = %dtable_found762, %dtable_skip756
  %next_val764 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  %220 = icmp eq ptr %next_val764, inttoptr (i64 -1 to ptr)
  br i1 %220, label %dtable_check765, label %dtable_skip770

dtable_check765:                                  ; preds = %dtable_check765, %dtable_skip763
  %dtable_ref766 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip763 ], [ %next_dtable_ref768, %dtable_check765 ]
  %dtable_ptr767 = load ptr, ptr %dtable_ref766, align 8
  %221 = icmp eq ptr %dtable_ptr767, null
  %next_dtable_ref768 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr767, i32 0, i32 2
  br i1 %221, label %dtable_found769, label %dtable_check765

dtable_found769:                                  ; preds = %dtable_check765
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", ptr %dtable_ref766, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip770

dtable_skip770:                                   ; preds = %dtable_found769, %dtable_skip763
  %next_val771 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  %222 = icmp eq ptr %next_val771, inttoptr (i64 -1 to ptr)
  br i1 %222, label %dtable_check772, label %dtable_skip777

dtable_check772:                                  ; preds = %dtable_check772, %dtable_skip770
  %dtable_ref773 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip770 ], [ %next_dtable_ref775, %dtable_check772 ]
  %dtable_ptr774 = load ptr, ptr %dtable_ref773, align 8
  %223 = icmp eq ptr %dtable_ptr774, null
  %next_dtable_ref775 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr774, i32 0, i32 2
  br i1 %223, label %dtable_found776, label %dtable_check772

dtable_found776:                                  ; preds = %dtable_check772
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", ptr %dtable_ref773, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip777

dtable_skip777:                                   ; preds = %dtable_found776, %dtable_skip770
  %next_val778 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  %224 = icmp eq ptr %next_val778, inttoptr (i64 -1 to ptr)
  br i1 %224, label %dtable_check779, label %dtable_skip784

dtable_check779:                                  ; preds = %dtable_check779, %dtable_skip777
  %dtable_ref780 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip777 ], [ %next_dtable_ref782, %dtable_check779 ]
  %dtable_ptr781 = load ptr, ptr %dtable_ref780, align 8
  %225 = icmp eq ptr %dtable_ptr781, null
  %next_dtable_ref782 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr781, i32 0, i32 2
  br i1 %225, label %dtable_found783, label %dtable_check779

dtable_found783:                                  ; preds = %dtable_check779
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", ptr %dtable_ref780, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip784

dtable_skip784:                                   ; preds = %dtable_found783, %dtable_skip777
  %next_val785 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  %226 = icmp eq ptr %next_val785, inttoptr (i64 -1 to ptr)
  br i1 %226, label %dtable_check786, label %dtable_skip791

dtable_check786:                                  ; preds = %dtable_check786, %dtable_skip784
  %dtable_ref787 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip784 ], [ %next_dtable_ref789, %dtable_check786 ]
  %dtable_ptr788 = load ptr, ptr %dtable_ref787, align 8
  %227 = icmp eq ptr %dtable_ptr788, null
  %next_dtable_ref789 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr788, i32 0, i32 2
  br i1 %227, label %dtable_found790, label %dtable_check786

dtable_found790:                                  ; preds = %dtable_check786
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", ptr %dtable_ref787, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip791

dtable_skip791:                                   ; preds = %dtable_found790, %dtable_skip784
  %next_val792 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  %228 = icmp eq ptr %next_val792, inttoptr (i64 -1 to ptr)
  br i1 %228, label %dtable_check793, label %dtable_skip798

dtable_check793:                                  ; preds = %dtable_check793, %dtable_skip791
  %dtable_ref794 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip791 ], [ %next_dtable_ref796, %dtable_check793 ]
  %dtable_ptr795 = load ptr, ptr %dtable_ref794, align 8
  %229 = icmp eq ptr %dtable_ptr795, null
  %next_dtable_ref796 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr795, i32 0, i32 2
  br i1 %229, label %dtable_found797, label %dtable_check793

dtable_found797:                                  ; preds = %dtable_check793
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", ptr %dtable_ref794, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip798

dtable_skip798:                                   ; preds = %dtable_found797, %dtable_skip791
  %next_val799 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  %230 = icmp eq ptr %next_val799, inttoptr (i64 -1 to ptr)
  br i1 %230, label %dtable_check800, label %dtable_skip805

dtable_check800:                                  ; preds = %dtable_check800, %dtable_skip798
  %dtable_ref801 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip798 ], [ %next_dtable_ref803, %dtable_check800 ]
  %dtable_ptr802 = load ptr, ptr %dtable_ref801, align 8
  %231 = icmp eq ptr %dtable_ptr802, null
  %next_dtable_ref803 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr802, i32 0, i32 2
  br i1 %231, label %dtable_found804, label %dtable_check800

dtable_found804:                                  ; preds = %dtable_check800
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", ptr %dtable_ref801, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip805

dtable_skip805:                                   ; preds = %dtable_found804, %dtable_skip798
  %next_val806 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  %232 = icmp eq ptr %next_val806, inttoptr (i64 -1 to ptr)
  br i1 %232, label %dtable_check807, label %dtable_skip812

dtable_check807:                                  ; preds = %dtable_check807, %dtable_skip805
  %dtable_ref808 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip805 ], [ %next_dtable_ref810, %dtable_check807 ]
  %dtable_ptr809 = load ptr, ptr %dtable_ref808, align 8
  %233 = icmp eq ptr %dtable_ptr809, null
  %next_dtable_ref810 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr809, i32 0, i32 2
  br i1 %233, label %dtable_found811, label %dtable_check807

dtable_found811:                                  ; preds = %dtable_check807
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", ptr %dtable_ref808, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip812

dtable_skip812:                                   ; preds = %dtable_found811, %dtable_skip805
  %next_val813 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  %234 = icmp eq ptr %next_val813, inttoptr (i64 -1 to ptr)
  br i1 %234, label %dtable_check814, label %dtable_skip819

dtable_check814:                                  ; preds = %dtable_check814, %dtable_skip812
  %dtable_ref815 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip812 ], [ %next_dtable_ref817, %dtable_check814 ]
  %dtable_ptr816 = load ptr, ptr %dtable_ref815, align 8
  %235 = icmp eq ptr %dtable_ptr816, null
  %next_dtable_ref817 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr816, i32 0, i32 2
  br i1 %235, label %dtable_found818, label %dtable_check814

dtable_found818:                                  ; preds = %dtable_check814
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", ptr %dtable_ref815, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip819

dtable_skip819:                                   ; preds = %dtable_found818, %dtable_skip812
  %next_val820 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  %236 = icmp eq ptr %next_val820, inttoptr (i64 -1 to ptr)
  br i1 %236, label %dtable_check821, label %dtable_skip826

dtable_check821:                                  ; preds = %dtable_check821, %dtable_skip819
  %dtable_ref822 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip819 ], [ %next_dtable_ref824, %dtable_check821 ]
  %dtable_ptr823 = load ptr, ptr %dtable_ref822, align 8
  %237 = icmp eq ptr %dtable_ptr823, null
  %next_dtable_ref824 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr823, i32 0, i32 2
  br i1 %237, label %dtable_found825, label %dtable_check821

dtable_found825:                                  ; preds = %dtable_check821
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", ptr %dtable_ref822, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip826

dtable_skip826:                                   ; preds = %dtable_found825, %dtable_skip819
  %next_val827 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  %238 = icmp eq ptr %next_val827, inttoptr (i64 -1 to ptr)
  br i1 %238, label %dtable_check828, label %dtable_skip833

dtable_check828:                                  ; preds = %dtable_check828, %dtable_skip826
  %dtable_ref829 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip826 ], [ %next_dtable_ref831, %dtable_check828 ]
  %dtable_ptr830 = load ptr, ptr %dtable_ref829, align 8
  %239 = icmp eq ptr %dtable_ptr830, null
  %next_dtable_ref831 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr830, i32 0, i32 2
  br i1 %239, label %dtable_found832, label %dtable_check828

dtable_found832:                                  ; preds = %dtable_check828
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", ptr %dtable_ref829, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip833

dtable_skip833:                                   ; preds = %dtable_found832, %dtable_skip826
  %next_val834 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  %240 = icmp eq ptr %next_val834, inttoptr (i64 -1 to ptr)
  br i1 %240, label %dtable_check835, label %dtable_skip840

dtable_check835:                                  ; preds = %dtable_check835, %dtable_skip833
  %dtable_ref836 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip833 ], [ %next_dtable_ref838, %dtable_check835 ]
  %dtable_ptr837 = load ptr, ptr %dtable_ref836, align 8
  %241 = icmp eq ptr %dtable_ptr837, null
  %next_dtable_ref838 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr837, i32 0, i32 2
  br i1 %241, label %dtable_found839, label %dtable_check835

dtable_found839:                                  ; preds = %dtable_check835
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", ptr %dtable_ref836, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip840

dtable_skip840:                                   ; preds = %dtable_found839, %dtable_skip833
  %next_val841 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  %242 = icmp eq ptr %next_val841, inttoptr (i64 -1 to ptr)
  br i1 %242, label %dtable_check842, label %dtable_skip847

dtable_check842:                                  ; preds = %dtable_check842, %dtable_skip840
  %dtable_ref843 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip840 ], [ %next_dtable_ref845, %dtable_check842 ]
  %dtable_ptr844 = load ptr, ptr %dtable_ref843, align 8
  %243 = icmp eq ptr %dtable_ptr844, null
  %next_dtable_ref845 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr844, i32 0, i32 2
  br i1 %243, label %dtable_found846, label %dtable_check842

dtable_found846:                                  ; preds = %dtable_check842
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", ptr %dtable_ref843, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip847

dtable_skip847:                                   ; preds = %dtable_found846, %dtable_skip840
  %next_val848 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  %244 = icmp eq ptr %next_val848, inttoptr (i64 -1 to ptr)
  br i1 %244, label %dtable_check849, label %dtable_skip854

dtable_check849:                                  ; preds = %dtable_check849, %dtable_skip847
  %dtable_ref850 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip847 ], [ %next_dtable_ref852, %dtable_check849 ]
  %dtable_ptr851 = load ptr, ptr %dtable_ref850, align 8
  %245 = icmp eq ptr %dtable_ptr851, null
  %next_dtable_ref852 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr851, i32 0, i32 2
  br i1 %245, label %dtable_found853, label %dtable_check849

dtable_found853:                                  ; preds = %dtable_check849
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", ptr %dtable_ref850, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip854

dtable_skip854:                                   ; preds = %dtable_found853, %dtable_skip847
  %next_val855 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  %246 = icmp eq ptr %next_val855, inttoptr (i64 -1 to ptr)
  br i1 %246, label %dtable_check856, label %dtable_skip861

dtable_check856:                                  ; preds = %dtable_check856, %dtable_skip854
  %dtable_ref857 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip854 ], [ %next_dtable_ref859, %dtable_check856 ]
  %dtable_ptr858 = load ptr, ptr %dtable_ref857, align 8
  %247 = icmp eq ptr %dtable_ptr858, null
  %next_dtable_ref859 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr858, i32 0, i32 2
  br i1 %247, label %dtable_found860, label %dtable_check856

dtable_found860:                                  ; preds = %dtable_check856
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", ptr %dtable_ref857, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip861

dtable_skip861:                                   ; preds = %dtable_found860, %dtable_skip854
  %next_val862 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  %248 = icmp eq ptr %next_val862, inttoptr (i64 -1 to ptr)
  br i1 %248, label %dtable_check863, label %dtable_skip868

dtable_check863:                                  ; preds = %dtable_check863, %dtable_skip861
  %dtable_ref864 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip861 ], [ %next_dtable_ref866, %dtable_check863 ]
  %dtable_ptr865 = load ptr, ptr %dtable_ref864, align 8
  %249 = icmp eq ptr %dtable_ptr865, null
  %next_dtable_ref866 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr865, i32 0, i32 2
  br i1 %249, label %dtable_found867, label %dtable_check863

dtable_found867:                                  ; preds = %dtable_check863
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", ptr %dtable_ref864, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip868

dtable_skip868:                                   ; preds = %dtable_found867, %dtable_skip861
  %next_val869 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  %250 = icmp eq ptr %next_val869, inttoptr (i64 -1 to ptr)
  br i1 %250, label %dtable_check870, label %dtable_skip875

dtable_check870:                                  ; preds = %dtable_check870, %dtable_skip868
  %dtable_ref871 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip868 ], [ %next_dtable_ref873, %dtable_check870 ]
  %dtable_ptr872 = load ptr, ptr %dtable_ref871, align 8
  %251 = icmp eq ptr %dtable_ptr872, null
  %next_dtable_ref873 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr872, i32 0, i32 2
  br i1 %251, label %dtable_found874, label %dtable_check870

dtable_found874:                                  ; preds = %dtable_check870
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", ptr %dtable_ref871, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip875

dtable_skip875:                                   ; preds = %dtable_found874, %dtable_skip868
  %next_val876 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  %252 = icmp eq ptr %next_val876, inttoptr (i64 -1 to ptr)
  br i1 %252, label %dtable_check877, label %dtable_skip882

dtable_check877:                                  ; preds = %dtable_check877, %dtable_skip875
  %dtable_ref878 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip875 ], [ %next_dtable_ref880, %dtable_check877 ]
  %dtable_ptr879 = load ptr, ptr %dtable_ref878, align 8
  %253 = icmp eq ptr %dtable_ptr879, null
  %next_dtable_ref880 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr879, i32 0, i32 2
  br i1 %253, label %dtable_found881, label %dtable_check877

dtable_found881:                                  ; preds = %dtable_check877
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", ptr %dtable_ref878, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip882

dtable_skip882:                                   ; preds = %dtable_found881, %dtable_skip875
  %next_val883 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  %254 = icmp eq ptr %next_val883, inttoptr (i64 -1 to ptr)
  br i1 %254, label %dtable_check884, label %dtable_skip889

dtable_check884:                                  ; preds = %dtable_check884, %dtable_skip882
  %dtable_ref885 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip882 ], [ %next_dtable_ref887, %dtable_check884 ]
  %dtable_ptr886 = load ptr, ptr %dtable_ref885, align 8
  %255 = icmp eq ptr %dtable_ptr886, null
  %next_dtable_ref887 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr886, i32 0, i32 2
  br i1 %255, label %dtable_found888, label %dtable_check884

dtable_found888:                                  ; preds = %dtable_check884
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", ptr %dtable_ref885, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  br label %dtable_skip889

dtable_skip889:                                   ; preds = %dtable_found888, %dtable_skip882
  %next_val890 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  %256 = icmp eq ptr %next_val890, inttoptr (i64 -1 to ptr)
  br i1 %256, label %dtable_check891, label %dtable_skip896

dtable_check891:                                  ; preds = %dtable_check891, %dtable_skip889
  %dtable_ref892 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip889 ], [ %next_dtable_ref894, %dtable_check891 ]
  %dtable_ptr893 = load ptr, ptr %dtable_ref892, align 8
  %257 = icmp eq ptr %dtable_ptr893, null
  %next_dtable_ref894 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr893, i32 0, i32 2
  br i1 %257, label %dtable_found895, label %dtable_check891

dtable_found895:                                  ; preds = %dtable_check891
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", ptr %dtable_ref892, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip896

dtable_skip896:                                   ; preds = %dtable_found895, %dtable_skip889
  %next_val897 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  %258 = icmp eq ptr %next_val897, inttoptr (i64 -1 to ptr)
  br i1 %258, label %dtable_check898, label %dtable_skip903

dtable_check898:                                  ; preds = %dtable_check898, %dtable_skip896
  %dtable_ref899 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip896 ], [ %next_dtable_ref901, %dtable_check898 ]
  %dtable_ptr900 = load ptr, ptr %dtable_ref899, align 8
  %259 = icmp eq ptr %dtable_ptr900, null
  %next_dtable_ref901 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr900, i32 0, i32 2
  br i1 %259, label %dtable_found902, label %dtable_check898

dtable_found902:                                  ; preds = %dtable_check898
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", ptr %dtable_ref899, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip903

dtable_skip903:                                   ; preds = %dtable_found902, %dtable_skip896
  %next_val904 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  %260 = icmp eq ptr %next_val904, inttoptr (i64 -1 to ptr)
  br i1 %260, label %dtable_check905, label %dtable_skip910

dtable_check905:                                  ; preds = %dtable_check905, %dtable_skip903
  %dtable_ref906 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip903 ], [ %next_dtable_ref908, %dtable_check905 ]
  %dtable_ptr907 = load ptr, ptr %dtable_ref906, align 8
  %261 = icmp eq ptr %dtable_ptr907, null
  %next_dtable_ref908 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr907, i32 0, i32 2
  br i1 %261, label %dtable_found909, label %dtable_check905

dtable_found909:                                  ; preds = %dtable_check905
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", ptr %dtable_ref906, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  br label %dtable_skip910

dtable_skip910:                                   ; preds = %dtable_found909, %dtable_skip903
  %next_val911 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  %262 = icmp eq ptr %next_val911, inttoptr (i64 -1 to ptr)
  br i1 %262, label %dtable_check912, label %dtable_skip917

dtable_check912:                                  ; preds = %dtable_check912, %dtable_skip910
  %dtable_ref913 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip910 ], [ %next_dtable_ref915, %dtable_check912 ]
  %dtable_ptr914 = load ptr, ptr %dtable_ref913, align 8
  %263 = icmp eq ptr %dtable_ptr914, null
  %next_dtable_ref915 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr914, i32 0, i32 2
  br i1 %263, label %dtable_found916, label %dtable_check912

dtable_found916:                                  ; preds = %dtable_check912
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", ptr %dtable_ref913, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  br label %dtable_skip917

dtable_skip917:                                   ; preds = %dtable_found916, %dtable_skip910
  %next_val918 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  %264 = icmp eq ptr %next_val918, inttoptr (i64 -1 to ptr)
  br i1 %264, label %dtable_check919, label %dtable_skip924

dtable_check919:                                  ; preds = %dtable_check919, %dtable_skip917
  %dtable_ref920 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip917 ], [ %next_dtable_ref922, %dtable_check919 ]
  %dtable_ptr921 = load ptr, ptr %dtable_ref920, align 8
  %265 = icmp eq ptr %dtable_ptr921, null
  %next_dtable_ref922 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr921, i32 0, i32 2
  br i1 %265, label %dtable_found923, label %dtable_check919

dtable_found923:                                  ; preds = %dtable_check919
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", ptr %dtable_ref920, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip924

dtable_skip924:                                   ; preds = %dtable_found923, %dtable_skip917
  %next_val925 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  %266 = icmp eq ptr %next_val925, inttoptr (i64 -1 to ptr)
  br i1 %266, label %dtable_check926, label %dtable_skip931

dtable_check926:                                  ; preds = %dtable_check926, %dtable_skip924
  %dtable_ref927 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip924 ], [ %next_dtable_ref929, %dtable_check926 ]
  %dtable_ptr928 = load ptr, ptr %dtable_ref927, align 8
  %267 = icmp eq ptr %dtable_ptr928, null
  %next_dtable_ref929 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr928, i32 0, i32 2
  br i1 %267, label %dtable_found930, label %dtable_check926

dtable_found930:                                  ; preds = %dtable_check926
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", ptr %dtable_ref927, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip931

dtable_skip931:                                   ; preds = %dtable_found930, %dtable_skip924
  %next_val932 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  %268 = icmp eq ptr %next_val932, inttoptr (i64 -1 to ptr)
  br i1 %268, label %dtable_check933, label %dtable_skip938

dtable_check933:                                  ; preds = %dtable_check933, %dtable_skip931
  %dtable_ref934 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip931 ], [ %next_dtable_ref936, %dtable_check933 ]
  %dtable_ptr935 = load ptr, ptr %dtable_ref934, align 8
  %269 = icmp eq ptr %dtable_ptr935, null
  %next_dtable_ref936 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr935, i32 0, i32 2
  br i1 %269, label %dtable_found937, label %dtable_check933

dtable_found937:                                  ; preds = %dtable_check933
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", ptr %dtable_ref934, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip938

dtable_skip938:                                   ; preds = %dtable_found937, %dtable_skip931
  %next_val939 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  %270 = icmp eq ptr %next_val939, inttoptr (i64 -1 to ptr)
  br i1 %270, label %dtable_check940, label %dtable_skip945

dtable_check940:                                  ; preds = %dtable_check940, %dtable_skip938
  %dtable_ref941 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip938 ], [ %next_dtable_ref943, %dtable_check940 ]
  %dtable_ptr942 = load ptr, ptr %dtable_ref941, align 8
  %271 = icmp eq ptr %dtable_ptr942, null
  %next_dtable_ref943 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr942, i32 0, i32 2
  br i1 %271, label %dtable_found944, label %dtable_check940

dtable_found944:                                  ; preds = %dtable_check940
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", ptr %dtable_ref941, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip945

dtable_skip945:                                   ; preds = %dtable_found944, %dtable_skip938
  %next_val946 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  %272 = icmp eq ptr %next_val946, inttoptr (i64 -1 to ptr)
  br i1 %272, label %dtable_check947, label %dtable_skip952

dtable_check947:                                  ; preds = %dtable_check947, %dtable_skip945
  %dtable_ref948 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip945 ], [ %next_dtable_ref950, %dtable_check947 ]
  %dtable_ptr949 = load ptr, ptr %dtable_ref948, align 8
  %273 = icmp eq ptr %dtable_ptr949, null
  %next_dtable_ref950 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr949, i32 0, i32 2
  br i1 %273, label %dtable_found951, label %dtable_check947

dtable_found951:                                  ; preds = %dtable_check947
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", ptr %dtable_ref948, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip952

dtable_skip952:                                   ; preds = %dtable_found951, %dtable_skip945
  %next_val953 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  %274 = icmp eq ptr %next_val953, inttoptr (i64 -1 to ptr)
  br i1 %274, label %dtable_check954, label %dtable_skip959

dtable_check954:                                  ; preds = %dtable_check954, %dtable_skip952
  %dtable_ref955 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip952 ], [ %next_dtable_ref957, %dtable_check954 ]
  %dtable_ptr956 = load ptr, ptr %dtable_ref955, align 8
  %275 = icmp eq ptr %dtable_ptr956, null
  %next_dtable_ref957 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr956, i32 0, i32 2
  br i1 %275, label %dtable_found958, label %dtable_check954

dtable_found958:                                  ; preds = %dtable_check954
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", ptr %dtable_ref955, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip959

dtable_skip959:                                   ; preds = %dtable_found958, %dtable_skip952
  %next_val960 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  %276 = icmp eq ptr %next_val960, inttoptr (i64 -1 to ptr)
  br i1 %276, label %dtable_check961, label %dtable_skip966

dtable_check961:                                  ; preds = %dtable_check961, %dtable_skip959
  %dtable_ref962 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip959 ], [ %next_dtable_ref964, %dtable_check961 ]
  %dtable_ptr963 = load ptr, ptr %dtable_ref962, align 8
  %277 = icmp eq ptr %dtable_ptr963, null
  %next_dtable_ref964 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr963, i32 0, i32 2
  br i1 %277, label %dtable_found965, label %dtable_check961

dtable_found965:                                  ; preds = %dtable_check961
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", ptr %dtable_ref962, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip966

dtable_skip966:                                   ; preds = %dtable_found965, %dtable_skip959
  %next_val967 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  %278 = icmp eq ptr %next_val967, inttoptr (i64 -1 to ptr)
  br i1 %278, label %dtable_check968, label %dtable_skip973

dtable_check968:                                  ; preds = %dtable_check968, %dtable_skip966
  %dtable_ref969 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip966 ], [ %next_dtable_ref971, %dtable_check968 ]
  %dtable_ptr970 = load ptr, ptr %dtable_ref969, align 8
  %279 = icmp eq ptr %dtable_ptr970, null
  %next_dtable_ref971 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr970, i32 0, i32 2
  br i1 %279, label %dtable_found972, label %dtable_check968

dtable_found972:                                  ; preds = %dtable_check968
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", ptr %dtable_ref969, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip973

dtable_skip973:                                   ; preds = %dtable_found972, %dtable_skip966
  %next_val974 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  %280 = icmp eq ptr %next_val974, inttoptr (i64 -1 to ptr)
  br i1 %280, label %dtable_check975, label %dtable_skip980

dtable_check975:                                  ; preds = %dtable_check975, %dtable_skip973
  %dtable_ref976 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip973 ], [ %next_dtable_ref978, %dtable_check975 ]
  %dtable_ptr977 = load ptr, ptr %dtable_ref976, align 8
  %281 = icmp eq ptr %dtable_ptr977, null
  %next_dtable_ref978 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr977, i32 0, i32 2
  br i1 %281, label %dtable_found979, label %dtable_check975

dtable_found979:                                  ; preds = %dtable_check975
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", ptr %dtable_ref976, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip980

dtable_skip980:                                   ; preds = %dtable_found979, %dtable_skip973
  %next_val981 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  %282 = icmp eq ptr %next_val981, inttoptr (i64 -1 to ptr)
  br i1 %282, label %dtable_check982, label %dtable_skip987

dtable_check982:                                  ; preds = %dtable_check982, %dtable_skip980
  %dtable_ref983 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip980 ], [ %next_dtable_ref985, %dtable_check982 ]
  %dtable_ptr984 = load ptr, ptr %dtable_ref983, align 8
  %283 = icmp eq ptr %dtable_ptr984, null
  %next_dtable_ref985 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr984, i32 0, i32 2
  br i1 %283, label %dtable_found986, label %dtable_check982

dtable_found986:                                  ; preds = %dtable_check982
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", ptr %dtable_ref983, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip987

dtable_skip987:                                   ; preds = %dtable_found986, %dtable_skip980
  %next_val988 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  %284 = icmp eq ptr %next_val988, inttoptr (i64 -1 to ptr)
  br i1 %284, label %dtable_check989, label %dtable_skip994

dtable_check989:                                  ; preds = %dtable_check989, %dtable_skip987
  %dtable_ref990 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip987 ], [ %next_dtable_ref992, %dtable_check989 ]
  %dtable_ptr991 = load ptr, ptr %dtable_ref990, align 8
  %285 = icmp eq ptr %dtable_ptr991, null
  %next_dtable_ref992 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr991, i32 0, i32 2
  br i1 %285, label %dtable_found993, label %dtable_check989

dtable_found993:                                  ; preds = %dtable_check989
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", ptr %dtable_ref990, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip994

dtable_skip994:                                   ; preds = %dtable_found993, %dtable_skip987
  %next_val995 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  %286 = icmp eq ptr %next_val995, inttoptr (i64 -1 to ptr)
  br i1 %286, label %dtable_check996, label %dtable_skip1001

dtable_check996:                                  ; preds = %dtable_check996, %dtable_skip994
  %dtable_ref997 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip994 ], [ %next_dtable_ref999, %dtable_check996 ]
  %dtable_ptr998 = load ptr, ptr %dtable_ref997, align 8
  %287 = icmp eq ptr %dtable_ptr998, null
  %next_dtable_ref999 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr998, i32 0, i32 2
  br i1 %287, label %dtable_found1000, label %dtable_check996

dtable_found1000:                                 ; preds = %dtable_check996
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", ptr %dtable_ref997, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1001

dtable_skip1001:                                  ; preds = %dtable_found1000, %dtable_skip994
  %next_val1002 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  %288 = icmp eq ptr %next_val1002, inttoptr (i64 -1 to ptr)
  br i1 %288, label %dtable_check1003, label %dtable_skip1008

dtable_check1003:                                 ; preds = %dtable_check1003, %dtable_skip1001
  %dtable_ref1004 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip1001 ], [ %next_dtable_ref1006, %dtable_check1003 ]
  %dtable_ptr1005 = load ptr, ptr %dtable_ref1004, align 8
  %289 = icmp eq ptr %dtable_ptr1005, null
  %next_dtable_ref1006 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1005, i32 0, i32 2
  br i1 %289, label %dtable_found1007, label %dtable_check1003

dtable_found1007:                                 ; preds = %dtable_check1003
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", ptr %dtable_ref1004, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1008

dtable_skip1008:                                  ; preds = %dtable_found1007, %dtable_skip1001
  %next_val1009 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  %290 = icmp eq ptr %next_val1009, inttoptr (i64 -1 to ptr)
  br i1 %290, label %dtable_check1010, label %dtable_skip1015

dtable_check1010:                                 ; preds = %dtable_check1010, %dtable_skip1008
  %dtable_ref1011 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip1008 ], [ %next_dtable_ref1013, %dtable_check1010 ]
  %dtable_ptr1012 = load ptr, ptr %dtable_ref1011, align 8
  %291 = icmp eq ptr %dtable_ptr1012, null
  %next_dtable_ref1013 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1012, i32 0, i32 2
  br i1 %291, label %dtable_found1014, label %dtable_check1010

dtable_found1014:                                 ; preds = %dtable_check1010
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", ptr %dtable_ref1011, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1015

dtable_skip1015:                                  ; preds = %dtable_found1014, %dtable_skip1008
  %next_val1016 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  %292 = icmp eq ptr %next_val1016, inttoptr (i64 -1 to ptr)
  br i1 %292, label %dtable_check1017, label %dtable_skip1022

dtable_check1017:                                 ; preds = %dtable_check1017, %dtable_skip1015
  %dtable_ref1018 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip1015 ], [ %next_dtable_ref1020, %dtable_check1017 ]
  %dtable_ptr1019 = load ptr, ptr %dtable_ref1018, align 8
  %293 = icmp eq ptr %dtable_ptr1019, null
  %next_dtable_ref1020 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1019, i32 0, i32 2
  br i1 %293, label %dtable_found1021, label %dtable_check1017

dtable_found1021:                                 ; preds = %dtable_check1017
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", ptr %dtable_ref1018, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1022

dtable_skip1022:                                  ; preds = %dtable_found1021, %dtable_skip1015
  %next_val1023 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  %294 = icmp eq ptr %next_val1023, inttoptr (i64 -1 to ptr)
  br i1 %294, label %dtable_check1024, label %dtable_skip1029

dtable_check1024:                                 ; preds = %dtable_check1024, %dtable_skip1022
  %dtable_ref1025 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip1022 ], [ %next_dtable_ref1027, %dtable_check1024 ]
  %dtable_ptr1026 = load ptr, ptr %dtable_ref1025, align 8
  %295 = icmp eq ptr %dtable_ptr1026, null
  %next_dtable_ref1027 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1026, i32 0, i32 2
  br i1 %295, label %dtable_found1028, label %dtable_check1024

dtable_found1028:                                 ; preds = %dtable_check1024
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", ptr %dtable_ref1025, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1029

dtable_skip1029:                                  ; preds = %dtable_found1028, %dtable_skip1022
  %next_val1030 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  %296 = icmp eq ptr %next_val1030, inttoptr (i64 -1 to ptr)
  br i1 %296, label %dtable_check1031, label %dtable_skip1036

dtable_check1031:                                 ; preds = %dtable_check1031, %dtable_skip1029
  %dtable_ref1032 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip1029 ], [ %next_dtable_ref1034, %dtable_check1031 ]
  %dtable_ptr1033 = load ptr, ptr %dtable_ref1032, align 8
  %297 = icmp eq ptr %dtable_ptr1033, null
  %next_dtable_ref1034 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1033, i32 0, i32 2
  br i1 %297, label %dtable_found1035, label %dtable_check1031

dtable_found1035:                                 ; preds = %dtable_check1031
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", ptr %dtable_ref1032, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1036

dtable_skip1036:                                  ; preds = %dtable_found1035, %dtable_skip1029
  %next_val1037 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  %298 = icmp eq ptr %next_val1037, inttoptr (i64 -1 to ptr)
  br i1 %298, label %dtable_check1038, label %dtable_skip1043

dtable_check1038:                                 ; preds = %dtable_check1038, %dtable_skip1036
  %dtable_ref1039 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip1036 ], [ %next_dtable_ref1041, %dtable_check1038 ]
  %dtable_ptr1040 = load ptr, ptr %dtable_ref1039, align 8
  %299 = icmp eq ptr %dtable_ptr1040, null
  %next_dtable_ref1041 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1040, i32 0, i32 2
  br i1 %299, label %dtable_found1042, label %dtable_check1038

dtable_found1042:                                 ; preds = %dtable_check1038
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", ptr %dtable_ref1039, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1043

dtable_skip1043:                                  ; preds = %dtable_found1042, %dtable_skip1036
  %next_val1044 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  %300 = icmp eq ptr %next_val1044, inttoptr (i64 -1 to ptr)
  br i1 %300, label %dtable_check1045, label %dtable_skip1050

dtable_check1045:                                 ; preds = %dtable_check1045, %dtable_skip1043
  %dtable_ref1046 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip1043 ], [ %next_dtable_ref1048, %dtable_check1045 ]
  %dtable_ptr1047 = load ptr, ptr %dtable_ref1046, align 8
  %301 = icmp eq ptr %dtable_ptr1047, null
  %next_dtable_ref1048 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1047, i32 0, i32 2
  br i1 %301, label %dtable_found1049, label %dtable_check1045

dtable_found1049:                                 ; preds = %dtable_check1045
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", ptr %dtable_ref1046, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1050

dtable_skip1050:                                  ; preds = %dtable_found1049, %dtable_skip1043
  %next_val1051 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  %302 = icmp eq ptr %next_val1051, inttoptr (i64 -1 to ptr)
  br i1 %302, label %dtable_check1052, label %dtable_skip1057

dtable_check1052:                                 ; preds = %dtable_check1052, %dtable_skip1050
  %dtable_ref1053 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip1050 ], [ %next_dtable_ref1055, %dtable_check1052 ]
  %dtable_ptr1054 = load ptr, ptr %dtable_ref1053, align 8
  %303 = icmp eq ptr %dtable_ptr1054, null
  %next_dtable_ref1055 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1054, i32 0, i32 2
  br i1 %303, label %dtable_found1056, label %dtable_check1052

dtable_found1056:                                 ; preds = %dtable_check1052
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", ptr %dtable_ref1053, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1057

dtable_skip1057:                                  ; preds = %dtable_found1056, %dtable_skip1050
  %next_val1058 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  %304 = icmp eq ptr %next_val1058, inttoptr (i64 -1 to ptr)
  br i1 %304, label %dtable_check1059, label %dtable_skip1064

dtable_check1059:                                 ; preds = %dtable_check1059, %dtable_skip1057
  %dtable_ref1060 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip1057 ], [ %next_dtable_ref1062, %dtable_check1059 ]
  %dtable_ptr1061 = load ptr, ptr %dtable_ref1060, align 8
  %305 = icmp eq ptr %dtable_ptr1061, null
  %next_dtable_ref1062 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1061, i32 0, i32 2
  br i1 %305, label %dtable_found1063, label %dtable_check1059

dtable_found1063:                                 ; preds = %dtable_check1059
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", ptr %dtable_ref1060, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1064

dtable_skip1064:                                  ; preds = %dtable_found1063, %dtable_skip1057
  %next_val1065 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  %306 = icmp eq ptr %next_val1065, inttoptr (i64 -1 to ptr)
  br i1 %306, label %dtable_check1066, label %dtable_skip1071

dtable_check1066:                                 ; preds = %dtable_check1066, %dtable_skip1064
  %dtable_ref1067 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip1064 ], [ %next_dtable_ref1069, %dtable_check1066 ]
  %dtable_ptr1068 = load ptr, ptr %dtable_ref1067, align 8
  %307 = icmp eq ptr %dtable_ptr1068, null
  %next_dtable_ref1069 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1068, i32 0, i32 2
  br i1 %307, label %dtable_found1070, label %dtable_check1066

dtable_found1070:                                 ; preds = %dtable_check1066
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", ptr %dtable_ref1067, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1071

dtable_skip1071:                                  ; preds = %dtable_found1070, %dtable_skip1064
  %next_val1072 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  %308 = icmp eq ptr %next_val1072, inttoptr (i64 -1 to ptr)
  br i1 %308, label %dtable_check1073, label %dtable_skip1078

dtable_check1073:                                 ; preds = %dtable_check1073, %dtable_skip1071
  %dtable_ref1074 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip1071 ], [ %next_dtable_ref1076, %dtable_check1073 ]
  %dtable_ptr1075 = load ptr, ptr %dtable_ref1074, align 8
  %309 = icmp eq ptr %dtable_ptr1075, null
  %next_dtable_ref1076 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1075, i32 0, i32 2
  br i1 %309, label %dtable_found1077, label %dtable_check1073

dtable_found1077:                                 ; preds = %dtable_check1073
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", ptr %dtable_ref1074, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1078

dtable_skip1078:                                  ; preds = %dtable_found1077, %dtable_skip1071
  %next_val1079 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  %310 = icmp eq ptr %next_val1079, inttoptr (i64 -1 to ptr)
  br i1 %310, label %dtable_check1080, label %dtable_skip1085

dtable_check1080:                                 ; preds = %dtable_check1080, %dtable_skip1078
  %dtable_ref1081 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip1078 ], [ %next_dtable_ref1083, %dtable_check1080 ]
  %dtable_ptr1082 = load ptr, ptr %dtable_ref1081, align 8
  %311 = icmp eq ptr %dtable_ptr1082, null
  %next_dtable_ref1083 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1082, i32 0, i32 2
  br i1 %311, label %dtable_found1084, label %dtable_check1080

dtable_found1084:                                 ; preds = %dtable_check1080
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", ptr %dtable_ref1081, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1085

dtable_skip1085:                                  ; preds = %dtable_found1084, %dtable_skip1078
  %next_val1086 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  %312 = icmp eq ptr %next_val1086, inttoptr (i64 -1 to ptr)
  br i1 %312, label %dtable_check1087, label %dtable_skip1092

dtable_check1087:                                 ; preds = %dtable_check1087, %dtable_skip1085
  %dtable_ref1088 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip1085 ], [ %next_dtable_ref1090, %dtable_check1087 ]
  %dtable_ptr1089 = load ptr, ptr %dtable_ref1088, align 8
  %313 = icmp eq ptr %dtable_ptr1089, null
  %next_dtable_ref1090 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1089, i32 0, i32 2
  br i1 %313, label %dtable_found1091, label %dtable_check1087

dtable_found1091:                                 ; preds = %dtable_check1087
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", ptr %dtable_ref1088, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1092

dtable_skip1092:                                  ; preds = %dtable_found1091, %dtable_skip1085
  %next_val1093 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  %314 = icmp eq ptr %next_val1093, inttoptr (i64 -1 to ptr)
  br i1 %314, label %dtable_check1094, label %dtable_skip1099

dtable_check1094:                                 ; preds = %dtable_check1094, %dtable_skip1092
  %dtable_ref1095 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip1092 ], [ %next_dtable_ref1097, %dtable_check1094 ]
  %dtable_ptr1096 = load ptr, ptr %dtable_ref1095, align 8
  %315 = icmp eq ptr %dtable_ptr1096, null
  %next_dtable_ref1097 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1096, i32 0, i32 2
  br i1 %315, label %dtable_found1098, label %dtable_check1094

dtable_found1098:                                 ; preds = %dtable_check1094
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", ptr %dtable_ref1095, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1099

dtable_skip1099:                                  ; preds = %dtable_found1098, %dtable_skip1092
  %next_val1100 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  %316 = icmp eq ptr %next_val1100, inttoptr (i64 -1 to ptr)
  br i1 %316, label %dtable_check1101, label %dtable_skip1106

dtable_check1101:                                 ; preds = %dtable_check1101, %dtable_skip1099
  %dtable_ref1102 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip1099 ], [ %next_dtable_ref1104, %dtable_check1101 ]
  %dtable_ptr1103 = load ptr, ptr %dtable_ref1102, align 8
  %317 = icmp eq ptr %dtable_ptr1103, null
  %next_dtable_ref1104 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1103, i32 0, i32 2
  br i1 %317, label %dtable_found1105, label %dtable_check1101

dtable_found1105:                                 ; preds = %dtable_check1101
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", ptr %dtable_ref1102, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1106

dtable_skip1106:                                  ; preds = %dtable_found1105, %dtable_skip1099
  %next_val1107 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  %318 = icmp eq ptr %next_val1107, inttoptr (i64 -1 to ptr)
  br i1 %318, label %dtable_check1108, label %dtable_skip1113

dtable_check1108:                                 ; preds = %dtable_check1108, %dtable_skip1106
  %dtable_ref1109 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip1106 ], [ %next_dtable_ref1111, %dtable_check1108 ]
  %dtable_ptr1110 = load ptr, ptr %dtable_ref1109, align 8
  %319 = icmp eq ptr %dtable_ptr1110, null
  %next_dtable_ref1111 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1110, i32 0, i32 2
  br i1 %319, label %dtable_found1112, label %dtable_check1108

dtable_found1112:                                 ; preds = %dtable_check1108
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", ptr %dtable_ref1109, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1113

dtable_skip1113:                                  ; preds = %dtable_found1112, %dtable_skip1106
  %next_val1114 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  %320 = icmp eq ptr %next_val1114, inttoptr (i64 -1 to ptr)
  br i1 %320, label %dtable_check1115, label %dtable_skip1120

dtable_check1115:                                 ; preds = %dtable_check1115, %dtable_skip1113
  %dtable_ref1116 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip1113 ], [ %next_dtable_ref1118, %dtable_check1115 ]
  %dtable_ptr1117 = load ptr, ptr %dtable_ref1116, align 8
  %321 = icmp eq ptr %dtable_ptr1117, null
  %next_dtable_ref1118 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1117, i32 0, i32 2
  br i1 %321, label %dtable_found1119, label %dtable_check1115

dtable_found1119:                                 ; preds = %dtable_check1115
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", ptr %dtable_ref1116, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1120

dtable_skip1120:                                  ; preds = %dtable_found1119, %dtable_skip1113
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!106, !107, !108, !109, !110, !111}
!llvm.dbg.cu = !{!112}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "default_random", linkageName: "std.math.random.default_random", scope: !2, file: !2, line: 65, type: !3, isLocal: false, isDefinition: true, align: 16)
!2 = !DIFile(filename: "math_random.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math")
!3 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc64Random", scope: !4, file: !4, line: 43, baseType: !5, align: 8)
!4 = !DIFile(filename: "math.sfc.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math/random")
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256, align: 64, elements: !7)
!6 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!7 = !{!8}
!8 = !DISubrange(count: 4, lowerBound: 0)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "default_random_initialized", linkageName: "std.math.random.default_random_initialized", scope: !2, file: !2, line: 66, type: !11, isLocal: false, isDefinition: true, align: 1)
!11 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !14, file: !14, line: 4, type: !15, isLocal: true, isDefinition: true, align: 8)
!14 = !DIFile(filename: "math.lcg.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math/random")
!15 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !14, file: !14, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !14, file: !14, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!20 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !14, file: !14, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!23 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !14, file: !14, line: 9, type: !15, isLocal: true, isDefinition: true, align: 8)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !14, file: !14, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !14, file: !14, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !14, file: !14, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !34, file: !34, line: 4, type: !15, isLocal: true, isDefinition: true, align: 8)
!34 = !DIFile(filename: "math.msws.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math/random")
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !34, file: !34, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !34, file: !34, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !34, file: !34, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !34, file: !34, line: 8, type: !43, isLocal: true, isDefinition: true, align: 1)
!43 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !4, file: !4, line: 4, type: !15, isLocal: true, isDefinition: true, align: 8)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !4, file: !4, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!48 = !DIGlobalVariableExpression(var: !49, expr: !DIExpression())
!49 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !4, file: !4, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !4, file: !4, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !4, file: !4, line: 8, type: !43, isLocal: true, isDefinition: true, align: 1)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !56, file: !56, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!56 = !DIFile(filename: "math.seeder.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math/random")
!57 = !DIGlobalVariableExpression(var: !58, expr: !DIExpression())
!58 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !56, file: !56, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!59 = !DIGlobalVariableExpression(var: !60, expr: !DIExpression())
!60 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !56, file: !56, line: 6, type: !6, isLocal: true, isDefinition: true, align: 8)
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "random_int", linkageName: "entropy.random_int", scope: !56, file: !56, line: 80, type: !20, isLocal: true, isDefinition: true, align: 4)
!63 = !DIGlobalVariableExpression(var: !64, expr: !DIExpression())
!64 = distinct !DIGlobalVariable(name: "MUL_MCG128", linkageName: "std.math.random.MUL_MCG128", scope: !65, file: !65, line: 3, type: !15, isLocal: true, isDefinition: true, align: 8)
!65 = !DIFile(filename: "math.mcg.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math/random")
!66 = !DIGlobalVariableExpression(var: !67, expr: !DIExpression())
!67 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !65, file: !65, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!68 = !DIGlobalVariableExpression(var: !69, expr: !DIExpression())
!69 = distinct !DIGlobalVariable(name: "MUL_MCG32", linkageName: "std.math.random.MUL_MCG32", scope: !65, file: !65, line: 5, type: !20, isLocal: true, isDefinition: true, align: 4)
!70 = !DIGlobalVariableExpression(var: !71, expr: !DIExpression())
!71 = distinct !DIGlobalVariable(name: "MUL_MCG16", linkageName: "std.math.random.MUL_MCG16", scope: !65, file: !65, line: 6, type: !23, isLocal: true, isDefinition: true, align: 2)
!72 = !DIGlobalVariableExpression(var: !73, expr: !DIExpression())
!73 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MULTIPLIER", linkageName: "std.math.random.SIMPLE_RANDOM_MULTIPLIER", scope: !74, file: !74, line: 32, type: !75, isLocal: true, isDefinition: true, align: 8)
!74 = !DIFile(filename: "math.simple_random.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math/random")
!75 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!76 = !DIGlobalVariableExpression(var: !77, expr: !DIExpression())
!77 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_ADDEND", linkageName: "std.math.random.SIMPLE_RANDOM_ADDEND", scope: !74, file: !74, line: 33, type: !75, isLocal: true, isDefinition: true, align: 8)
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MASK", linkageName: "std.math.random.SIMPLE_RANDOM_MASK", scope: !74, file: !74, line: 34, type: !75, isLocal: true, isDefinition: true, align: 8)
!80 = !DIGlobalVariableExpression(var: !81, expr: !DIExpression())
!81 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !82, file: !82, line: 4, type: !15, isLocal: true, isDefinition: true, align: 8)
!82 = !DIFile(filename: "math.pcg.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math/random")
!83 = !DIGlobalVariableExpression(var: !84, expr: !DIExpression())
!84 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !82, file: !82, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!85 = !DIGlobalVariableExpression(var: !86, expr: !DIExpression())
!86 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !82, file: !82, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!87 = !DIGlobalVariableExpression(var: !88, expr: !DIExpression())
!88 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !82, file: !82, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!89 = !DIGlobalVariableExpression(var: !90, expr: !DIExpression())
!90 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !82, file: !82, line: 9, type: !15, isLocal: true, isDefinition: true, align: 8)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !82, file: !82, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!93 = !DIGlobalVariableExpression(var: !94, expr: !DIExpression())
!94 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !82, file: !82, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!95 = !DIGlobalVariableExpression(var: !96, expr: !DIExpression())
!96 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !82, file: !82, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!97 = !DIGlobalVariableExpression(var: !98, expr: !DIExpression())
!98 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_long.ROT_SHIFT", scope: !82, file: !82, line: 28, type: !99, isLocal: true, isDefinition: true, align: 4)
!99 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!100 = !DIGlobalVariableExpression(var: !101, expr: !DIExpression())
!101 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_int.ROT_SHIFT", scope: !82, file: !82, line: 56, type: !99, isLocal: true, isDefinition: true, align: 4)
!102 = !DIGlobalVariableExpression(var: !103, expr: !DIExpression())
!103 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_short.ROT_SHIFT", scope: !82, file: !82, line: 85, type: !99, isLocal: true, isDefinition: true, align: 4)
!104 = !DIGlobalVariableExpression(var: !105, expr: !DIExpression())
!105 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_byte.ROT_SHIFT", scope: !82, file: !82, line: 113, type: !99, isLocal: true, isDefinition: true, align: 4)
!106 = !{i32 4, !"PIE Level", i32 2}
!107 = !{i32 4, !"PIC Level", i32 2}
!108 = !{i32 2, !"Dwarf Version", i32 4}
!109 = !{i32 2, !"Debug Info Version", i32 3}
!110 = !{i32 2, !"frame-pointer", i32 2}
!111 = !{i32 1, !"uwtable", i32 2}
!112 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !113, splitDebugInlining: false)
!113 = !{!0, !9, !12, !16, !18, !21, !24, !26, !28, !30, !32, !35, !37, !39, !41, !44, !46, !48, !50, !52, !54, !57, !59, !61, !63, !66, !68, !70, !72, !76, !78, !80, !83, !85, !87, !89, !91, !93, !95, !97, !100, !102, !104}
!114 = distinct !DISubprogram(name: "srand", linkageName: "std.math.random.srand", scope: !2, file: !2, line: 71, type: !115, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!115 = !DISubroutineType(types: !116)
!116 = !{null, !6}
!117 = !{}
!118 = !DILocalVariable(name: "seed", arg: 1, scope: !114, file: !2, line: 71, type: !6)
!119 = !DILocation(line: 71, column: 21, scope: !114)
!120 = !DILocation(line: 342, column: 11, scope: !121, inlinedAt: !123)
!121 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!122 = !DIFile(filename: "builtin.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!123 = !DILocation(line: 73, column: 26, scope: !114)
!124 = !DILocation(line: 73, column: 2, scope: !114)
!125 = !DILocation(line: 74, column: 31, scope: !114)
!126 = distinct !DISubprogram(name: "rand", linkageName: "std.math.random.rand", scope: !2, file: !2, line: 80, type: !127, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!127 = !DISubroutineType(types: !128)
!128 = !{!129, !99}
!129 = !DIDerivedType(tag: DW_TAG_typedef, name: "CInt", scope: !2, file: !2, line: 21, baseType: !99, align: 4)
!130 = !DILocalVariable(name: "range", arg: 1, scope: !126, file: !2, line: 80, type: !99)
!131 = !DILocation(line: 80, column: 17, scope: !126)
!132 = !DILocation(line: 179, column: 7, scope: !133, inlinedAt: !134)
!133 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!134 = !DILocation(line: 82, column: 2, scope: !126)
!135 = !DILocation(line: 136, column: 33, scope: !136, inlinedAt: !137)
!136 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!137 = !DILocation(line: 24, column: 11, scope: !138, inlinedAt: !140)
!138 = distinct !DILexicalBlock(scope: !139, file: !2, line: 27, column: 1)
!139 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!140 = !DILocation(line: 181, column: 3, scope: !141, inlinedAt: !134)
!141 = distinct !DILexicalBlock(scope: !133, file: !2, line: 180, column: 2)
!142 = !DILocation(line: 28, column: 20, scope: !139, inlinedAt: !140)
!143 = !DILocation(line: 28, column: 2, scope: !139, inlinedAt: !140)
!144 = !DILocation(line: 182, column: 32, scope: !141, inlinedAt: !134)
!145 = !DILocation(line: 136, column: 33, scope: !146, inlinedAt: !147)
!146 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!147 = !DILocation(line: 34, column: 11, scope: !148, inlinedAt: !150)
!148 = distinct !DILexicalBlock(scope: !149, file: !2, line: 38, column: 1)
!149 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!150 = !DILocation(line: 83, column: 9, scope: !126)
!151 = !DILocation(line: 35, column: 11, scope: !148, inlinedAt: !150)
!152 = !DILocation(line: 39, column: 6, scope: !149, inlinedAt: !150)
!153 = !DILocation(line: 39, column: 25, scope: !149, inlinedAt: !150)
!154 = !DILocalVariable(name: "mask", scope: !149, file: !2, line: 40, type: !20, align: 4)
!155 = !DILocation(line: 40, column: 7, scope: !149, inlinedAt: !150)
!156 = !DILocation(line: 40, column: 14, scope: !149, inlinedAt: !150)
!157 = !DILocation(line: 41, column: 2, scope: !149, inlinedAt: !150)
!158 = !DILocation(line: 42, column: 2, scope: !149, inlinedAt: !150)
!159 = !DILocation(line: 95, column: 31, scope: !160, inlinedAt: !162)
!160 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !161, file: !161, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!161 = !DIFile(filename: "bits.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std")
!162 = !DILocation(line: 42, column: 11, scope: !149, inlinedAt: !150)
!163 = !DILocalVariable(name: "x", scope: !149, file: !2, line: 43, type: !20, align: 4)
!164 = !DILocation(line: 43, column: 7, scope: !149, inlinedAt: !150)
!165 = !DILocation(line: 44, column: 2, scope: !149, inlinedAt: !150)
!166 = !DILocation(line: 48, column: 9, scope: !167, inlinedAt: !150)
!167 = distinct !DILexicalBlock(scope: !149, file: !2, line: 44, column: 2)
!168 = !DILocation(line: 48, column: 13, scope: !167, inlinedAt: !150)
!169 = !DILocation(line: 46, column: 7, scope: !170, inlinedAt: !150)
!170 = distinct !DILexicalBlock(scope: !167, file: !2, line: 45, column: 2)
!171 = !DILocation(line: 46, column: 27, scope: !170, inlinedAt: !150)
!172 = !DILocation(line: 49, column: 9, scope: !149, inlinedAt: !150)
!173 = distinct !DISubprogram(name: "rand_in_range", linkageName: "std.math.random.rand_in_range", scope: !2, file: !2, line: 90, type: !174, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!174 = !DISubroutineType(types: !175)
!175 = !{!99, !99, !99}
!176 = !DILocalVariable(name: "min", arg: 1, scope: !173, file: !2, line: 90, type: !99)
!177 = !DILocation(line: 90, column: 26, scope: !173)
!178 = !DILocalVariable(name: "max", arg: 2, scope: !173, file: !2, line: 90, type: !99)
!179 = !DILocation(line: 90, column: 35, scope: !173)
!180 = !DILocation(line: 88, column: 11, scope: !181)
!181 = distinct !DILexicalBlock(scope: !173, file: !2, line: 91, column: 1)
!182 = !DILocation(line: 88, column: 18, scope: !181)
!183 = !DILocation(line: 179, column: 7, scope: !184, inlinedAt: !185)
!184 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!185 = !DILocation(line: 92, column: 2, scope: !173)
!186 = !DILocation(line: 136, column: 33, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!188 = !DILocation(line: 24, column: 11, scope: !189, inlinedAt: !191)
!189 = distinct !DILexicalBlock(scope: !190, file: !2, line: 27, column: 1)
!190 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!191 = !DILocation(line: 181, column: 3, scope: !192, inlinedAt: !185)
!192 = distinct !DILexicalBlock(scope: !184, file: !2, line: 180, column: 2)
!193 = !DILocation(line: 28, column: 20, scope: !190, inlinedAt: !191)
!194 = !DILocation(line: 28, column: 2, scope: !190, inlinedAt: !191)
!195 = !DILocation(line: 182, column: 32, scope: !192, inlinedAt: !185)
!196 = !DILocation(line: 136, column: 33, scope: !197, inlinedAt: !198)
!197 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!198 = !DILocation(line: 55, column: 11, scope: !199, inlinedAt: !201)
!199 = distinct !DILexicalBlock(scope: !200, file: !2, line: 59, column: 1)
!200 = distinct !DISubprogram(name: "next_in_range", linkageName: "next_in_range", scope: !2, file: !2, line: 58, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!201 = !DILocation(line: 93, column: 9, scope: !173)
!202 = !DILocation(line: 56, column: 11, scope: !199, inlinedAt: !201)
!203 = !DILocation(line: 56, column: 18, scope: !199, inlinedAt: !201)
!204 = !DILocation(line: 60, column: 22, scope: !200, inlinedAt: !201)
!205 = !DILocation(line: 60, column: 28, scope: !200, inlinedAt: !201)
!206 = !DILocation(line: 136, column: 33, scope: !207, inlinedAt: !208)
!207 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!208 = !DILocation(line: 34, column: 11, scope: !209, inlinedAt: !211)
!209 = distinct !DILexicalBlock(scope: !210, file: !2, line: 38, column: 1)
!210 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!211 = !DILocation(line: 60, column: 9, scope: !200, inlinedAt: !201)
!212 = !DILocation(line: 35, column: 11, scope: !209, inlinedAt: !211)
!213 = !DILocation(line: 39, column: 6, scope: !210, inlinedAt: !211)
!214 = !DILocation(line: 39, column: 25, scope: !210, inlinedAt: !211)
!215 = !DILocalVariable(name: "mask", scope: !210, file: !2, line: 40, type: !20, align: 4)
!216 = !DILocation(line: 40, column: 7, scope: !210, inlinedAt: !211)
!217 = !DILocation(line: 40, column: 14, scope: !210, inlinedAt: !211)
!218 = !DILocation(line: 41, column: 2, scope: !210, inlinedAt: !211)
!219 = !DILocation(line: 42, column: 2, scope: !210, inlinedAt: !211)
!220 = !DILocation(line: 95, column: 31, scope: !221, inlinedAt: !222)
!221 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !161, file: !161, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!222 = !DILocation(line: 42, column: 11, scope: !210, inlinedAt: !211)
!223 = !DILocalVariable(name: "x", scope: !210, file: !2, line: 43, type: !20, align: 4)
!224 = !DILocation(line: 43, column: 7, scope: !210, inlinedAt: !211)
!225 = !DILocation(line: 44, column: 2, scope: !210, inlinedAt: !211)
!226 = !DILocation(line: 48, column: 9, scope: !227, inlinedAt: !211)
!227 = distinct !DILexicalBlock(scope: !210, file: !2, line: 44, column: 2)
!228 = !DILocation(line: 48, column: 13, scope: !227, inlinedAt: !211)
!229 = !DILocation(line: 46, column: 7, scope: !230, inlinedAt: !211)
!230 = distinct !DILexicalBlock(scope: !227, file: !2, line: 45, column: 2)
!231 = !DILocation(line: 46, column: 27, scope: !230, inlinedAt: !211)
!232 = !DILocation(line: 49, column: 9, scope: !210, inlinedAt: !211)
!233 = !DILocation(line: 60, column: 39, scope: !200, inlinedAt: !201)
!234 = distinct !DISubprogram(name: "rnd", linkageName: "std.math.random.rnd", scope: !2, file: !2, line: 96, type: !235, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!235 = !DISubroutineType(types: !236)
!236 = !{!237}
!237 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!238 = !DILocation(line: 179, column: 7, scope: !239, inlinedAt: !240)
!239 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!240 = !DILocation(line: 98, column: 2, scope: !234)
!241 = !DILocation(line: 136, column: 33, scope: !242, inlinedAt: !243)
!242 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!243 = !DILocation(line: 24, column: 11, scope: !244, inlinedAt: !246)
!244 = distinct !DILexicalBlock(scope: !245, file: !2, line: 27, column: 1)
!245 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!246 = !DILocation(line: 181, column: 3, scope: !247, inlinedAt: !240)
!247 = distinct !DILexicalBlock(scope: !239, file: !2, line: 180, column: 2)
!248 = !DILocation(line: 28, column: 20, scope: !245, inlinedAt: !246)
!249 = !DILocation(line: 28, column: 2, scope: !245, inlinedAt: !246)
!250 = !DILocation(line: 182, column: 32, scope: !247, inlinedAt: !240)
!251 = !DILocalVariable(name: "val", scope: !234, file: !2, line: 99, type: !6, align: 8)
!252 = !DILocation(line: 99, column: 8, scope: !234)
!253 = !DILocation(line: 99, column: 14, scope: !234)
!254 = !DILocation(line: 100, column: 9, scope: !234)
!255 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg128Random.set_seed", scope: !14, file: !14, line: 18, type: !256, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!256 = !DISubroutineType(types: !257)
!257 = !{null, !258, !260}
!258 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg128Random*", baseType: !259, size: 64, align: 64, dwarfAddressSpace: 0)
!259 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg128Random", scope: !14, file: !14, line: 16, baseType: !15, align: 8)
!260 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !261, identifier: "char[]")
!261 = !{!262, !264}
!262 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !260, baseType: !263, size: 64, align: 64)
!263 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !43, size: 64, align: 64, dwarfAddressSpace: 0)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !260, baseType: !265, size: 64, align: 64, offset: 64)
!265 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !6)
!266 = !DILocation(line: 19, column: 1, scope: !255)
!267 = !DILocalVariable(name: "self", arg: 1, scope: !255, file: !14, line: 18, type: !258)
!268 = !DILocation(line: 18, column: 31, scope: !255)
!269 = !DILocalVariable(name: "input", arg: 2, scope: !255, file: !14, line: 18, type: !260)
!270 = !DILocation(line: 18, column: 45, scope: !255)
!271 = !DILocation(line: 20, column: 3, scope: !255)
!272 = !DILocalVariable(name: "return_value", scope: !273, file: !14, line: 10, type: !15, align: 8)
!273 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!274 = !DILocation(line: 10, column: 8, scope: !273, inlinedAt: !275)
!275 = !DILocation(line: 20, column: 11, scope: !255)
!276 = !DILocation(line: 342, column: 11, scope: !277, inlinedAt: !278)
!277 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!278 = !DILocation(line: 11, column: 16, scope: !273, inlinedAt: !275)
!279 = !DILocation(line: 11, column: 2, scope: !273, inlinedAt: !275)
!280 = !DILocation(line: 12, column: 9, scope: !273, inlinedAt: !275)
!281 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg128Random.next_long", scope: !14, file: !14, line: 24, type: !282, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!282 = !DISubroutineType(types: !283)
!283 = !{!6, !258}
!284 = !DILocation(line: 25, column: 1, scope: !281)
!285 = !DILocalVariable(name: "self", arg: 1, scope: !281, file: !14, line: 24, type: !258)
!286 = !DILocation(line: 24, column: 33, scope: !281)
!287 = !DILocalVariable(name: "s", scope: !281, file: !14, line: 26, type: !288, align: 8)
!288 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !15, size: 64, align: 64, dwarfAddressSpace: 0)
!289 = !DILocation(line: 26, column: 11, scope: !281)
!290 = !DILocation(line: 26, column: 16, scope: !281)
!291 = !DILocalVariable(name: "result", scope: !281, file: !14, line: 27, type: !6, align: 8)
!292 = !DILocation(line: 27, column: 8, scope: !281)
!293 = !DILocation(line: 27, column: 26, scope: !281)
!294 = !DILocation(line: 27, column: 18, scope: !281)
!295 = !DILocation(line: 28, column: 3, scope: !281)
!296 = !DILocation(line: 28, column: 8, scope: !281)
!297 = !DILocation(line: 28, column: 7, scope: !281)
!298 = !DILocation(line: 29, column: 9, scope: !281)
!299 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg128Random.next_bytes", scope: !14, file: !14, line: 35, type: !256, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!300 = !DILocation(line: 35, column: 66, scope: !299)
!301 = !DILocalVariable(name: "self", arg: 1, scope: !299, file: !14, line: 35, type: !258)
!302 = !DILocation(line: 35, column: 33, scope: !299)
!303 = !DILocalVariable(name: "bytes", arg: 2, scope: !299, file: !14, line: 35, type: !260)
!304 = !DILocation(line: 35, column: 47, scope: !299)
!305 = !DILocation(line: 33, column: 11, scope: !306)
!306 = distinct !DILexicalBlock(scope: !299, file: !14, line: 35, column: 66)
!307 = !DILocalVariable(name: "len", scope: !308, file: !14, line: 146, type: !265, align: 8)
!308 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!309 = !DILocation(line: 146, column: 6, scope: !308, inlinedAt: !300)
!310 = !DILocation(line: 146, column: 12, scope: !308, inlinedAt: !300)
!311 = !DILocation(line: 148, column: 2, scope: !308, inlinedAt: !300)
!312 = !DILocation(line: 148, column: 9, scope: !313, inlinedAt: !300)
!313 = distinct !DILexicalBlock(scope: !308, file: !2, line: 148, column: 2)
!314 = !DILocalVariable(name: "value", scope: !315, file: !14, line: 150, type: !6, align: 8)
!315 = distinct !DILexicalBlock(scope: !313, file: !2, line: 149, column: 2)
!316 = !DILocation(line: 150, column: 7, scope: !315, inlinedAt: !300)
!317 = !DILocation(line: 35, column: 89, scope: !315, inlinedAt: !300)
!318 = !DILocation(line: 150, column: 15, scope: !315, inlinedAt: !300)
!319 = !DILocation(line: 151, column: 7, scope: !315, inlinedAt: !300)
!320 = !DILocation(line: 153, column: 33, scope: !321, inlinedAt: !300)
!321 = distinct !DILexicalBlock(scope: !315, file: !2, line: 152, column: 3)
!322 = !DILocation(line: 153, column: 4, scope: !321, inlinedAt: !300)
!323 = !DILocation(line: 153, column: 10, scope: !321, inlinedAt: !300)
!324 = !DILocation(line: 154, column: 10, scope: !321, inlinedAt: !300)
!325 = !DILocation(line: 156, column: 3, scope: !315, inlinedAt: !300)
!326 = !DILocation(line: 157, column: 3, scope: !315, inlinedAt: !300)
!327 = !DILocation(line: 158, column: 11, scope: !315, inlinedAt: !300)
!328 = !DILocation(line: 158, column: 17, scope: !315, inlinedAt: !300)
!329 = !DILocation(line: 164, column: 33, scope: !330, inlinedAt: !331)
!330 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!331 = !DILocation(line: 160, column: 2, scope: !308, inlinedAt: !300)
!332 = !DILocation(line: 164, column: 2, scope: !330, inlinedAt: !331)
!333 = !DILocation(line: 166, column: 2, scope: !330, inlinedAt: !331)
!334 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg128Random.next_int128", scope: !14, file: !14, line: 36, type: !335, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!335 = !DISubroutineType(types: !336)
!336 = !{!15, !258}
!337 = !DILocation(line: 36, column: 56, scope: !334)
!338 = !DILocalVariable(name: "self", arg: 1, scope: !334, file: !14, line: 36, type: !258)
!339 = !DILocation(line: 36, column: 37, scope: !334)
!340 = !DILocation(line: 36, column: 72, scope: !341, inlinedAt: !337)
!341 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!342 = !DILocation(line: 138, column: 46, scope: !341, inlinedAt: !337)
!343 = !DILocation(line: 138, column: 72, scope: !341, inlinedAt: !337)
!344 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg128Random.next_int", scope: !14, file: !14, line: 37, type: !345, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!345 = !DISubroutineType(types: !346)
!346 = !{!20, !258}
!347 = !DILocation(line: 37, column: 50, scope: !344)
!348 = !DILocalVariable(name: "self", arg: 1, scope: !344, file: !14, line: 37, type: !258)
!349 = !DILocation(line: 37, column: 31, scope: !344)
!350 = !DILocation(line: 37, column: 56, scope: !344)
!351 = !DILocation(line: 37, column: 51, scope: !344)
!352 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg128Random.next_short", scope: !14, file: !14, line: 38, type: !353, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!353 = !DISubroutineType(types: !354)
!354 = !{!23, !258}
!355 = !DILocation(line: 38, column: 54, scope: !352)
!356 = !DILocalVariable(name: "self", arg: 1, scope: !352, file: !14, line: 38, type: !258)
!357 = !DILocation(line: 38, column: 35, scope: !352)
!358 = !DILocation(line: 38, column: 62, scope: !352)
!359 = !DILocation(line: 38, column: 55, scope: !352)
!360 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg128Random.next_byte", scope: !14, file: !14, line: 39, type: !361, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!361 = !DISubroutineType(types: !362)
!362 = !{!43, !258}
!363 = !DILocation(line: 39, column: 51, scope: !360)
!364 = !DILocalVariable(name: "self", arg: 1, scope: !360, file: !14, line: 39, type: !258)
!365 = !DILocation(line: 39, column: 32, scope: !360)
!366 = !DILocation(line: 39, column: 57, scope: !360)
!367 = !DILocation(line: 39, column: 52, scope: !360)
!368 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg64Random.set_seed", scope: !14, file: !14, line: 45, type: !369, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!369 = !DISubroutineType(types: !370)
!370 = !{null, !371, !260}
!371 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg64Random*", baseType: !372, size: 64, align: 64, dwarfAddressSpace: 0)
!372 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg64Random", scope: !14, file: !14, line: 43, baseType: !6, align: 8)
!373 = !DILocation(line: 46, column: 1, scope: !368)
!374 = !DILocalVariable(name: "self", arg: 1, scope: !368, file: !14, line: 45, type: !371)
!375 = !DILocation(line: 45, column: 30, scope: !368)
!376 = !DILocalVariable(name: "seed", arg: 2, scope: !368, file: !14, line: 45, type: !260)
!377 = !DILocation(line: 45, column: 44, scope: !368)
!378 = !DILocation(line: 47, column: 3, scope: !368)
!379 = !DILocalVariable(name: "return_value", scope: !380, file: !14, line: 10, type: !6, align: 8)
!380 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!381 = !DILocation(line: 10, column: 8, scope: !380, inlinedAt: !382)
!382 = !DILocation(line: 47, column: 11, scope: !368)
!383 = !DILocation(line: 342, column: 11, scope: !384, inlinedAt: !385)
!384 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!385 = !DILocation(line: 11, column: 16, scope: !380, inlinedAt: !382)
!386 = !DILocation(line: 11, column: 2, scope: !380, inlinedAt: !382)
!387 = !DILocation(line: 12, column: 9, scope: !380, inlinedAt: !382)
!388 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg64Random.next_int", scope: !14, file: !14, line: 51, type: !389, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!389 = !DISubroutineType(types: !390)
!390 = !{!20, !371}
!391 = !DILocation(line: 52, column: 1, scope: !388)
!392 = !DILocalVariable(name: "self", arg: 1, scope: !388, file: !14, line: 51, type: !371)
!393 = !DILocation(line: 51, column: 30, scope: !388)
!394 = !DILocalVariable(name: "s", scope: !388, file: !14, line: 53, type: !395, align: 8)
!395 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !6, size: 64, align: 64, dwarfAddressSpace: 0)
!396 = !DILocation(line: 53, column: 9, scope: !388)
!397 = !DILocation(line: 53, column: 14, scope: !388)
!398 = !DILocalVariable(name: "result", scope: !388, file: !14, line: 54, type: !20, align: 4)
!399 = !DILocation(line: 54, column: 7, scope: !388)
!400 = !DILocation(line: 54, column: 24, scope: !388)
!401 = !DILocation(line: 54, column: 17, scope: !388)
!402 = !DILocation(line: 55, column: 3, scope: !388)
!403 = !DILocation(line: 55, column: 8, scope: !388)
!404 = !DILocation(line: 55, column: 7, scope: !388)
!405 = !DILocation(line: 56, column: 9, scope: !388)
!406 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg64Random.next_bytes", scope: !14, file: !14, line: 62, type: !369, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!407 = !DILocation(line: 62, column: 65, scope: !406)
!408 = !DILocalVariable(name: "self", arg: 1, scope: !406, file: !14, line: 62, type: !371)
!409 = !DILocation(line: 62, column: 32, scope: !406)
!410 = !DILocalVariable(name: "bytes", arg: 2, scope: !406, file: !14, line: 62, type: !260)
!411 = !DILocation(line: 62, column: 46, scope: !406)
!412 = !DILocation(line: 60, column: 11, scope: !413)
!413 = distinct !DILexicalBlock(scope: !406, file: !14, line: 62, column: 65)
!414 = !DILocalVariable(name: "len", scope: !415, file: !14, line: 146, type: !265, align: 8)
!415 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!416 = !DILocation(line: 146, column: 6, scope: !415, inlinedAt: !407)
!417 = !DILocation(line: 146, column: 12, scope: !415, inlinedAt: !407)
!418 = !DILocation(line: 148, column: 2, scope: !415, inlinedAt: !407)
!419 = !DILocation(line: 148, column: 9, scope: !420, inlinedAt: !407)
!420 = distinct !DILexicalBlock(scope: !415, file: !2, line: 148, column: 2)
!421 = !DILocalVariable(name: "value", scope: !422, file: !14, line: 150, type: !20, align: 4)
!422 = distinct !DILexicalBlock(scope: !420, file: !2, line: 149, column: 2)
!423 = !DILocation(line: 150, column: 7, scope: !422, inlinedAt: !407)
!424 = !DILocation(line: 62, column: 88, scope: !422, inlinedAt: !407)
!425 = !DILocation(line: 150, column: 15, scope: !422, inlinedAt: !407)
!426 = !DILocation(line: 151, column: 7, scope: !422, inlinedAt: !407)
!427 = !DILocation(line: 153, column: 33, scope: !428, inlinedAt: !407)
!428 = distinct !DILexicalBlock(scope: !422, file: !2, line: 152, column: 3)
!429 = !DILocation(line: 153, column: 4, scope: !428, inlinedAt: !407)
!430 = !DILocation(line: 153, column: 10, scope: !428, inlinedAt: !407)
!431 = !DILocation(line: 154, column: 10, scope: !428, inlinedAt: !407)
!432 = !DILocation(line: 156, column: 3, scope: !422, inlinedAt: !407)
!433 = !DILocation(line: 157, column: 3, scope: !422, inlinedAt: !407)
!434 = !DILocation(line: 158, column: 11, scope: !422, inlinedAt: !407)
!435 = !DILocation(line: 158, column: 17, scope: !422, inlinedAt: !407)
!436 = !DILocation(line: 164, column: 33, scope: !437, inlinedAt: !438)
!437 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!438 = !DILocation(line: 160, column: 2, scope: !415, inlinedAt: !407)
!439 = !DILocation(line: 164, column: 2, scope: !437, inlinedAt: !438)
!440 = !DILocation(line: 166, column: 2, scope: !437, inlinedAt: !438)
!441 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg64Random.next_int128", scope: !14, file: !14, line: 63, type: !442, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!442 = !DISubroutineType(types: !443)
!443 = !{!15, !371}
!444 = !DILocation(line: 63, column: 55, scope: !441)
!445 = !DILocalVariable(name: "self", arg: 1, scope: !441, file: !14, line: 63, type: !371)
!446 = !DILocation(line: 63, column: 36, scope: !441)
!447 = !DILocation(line: 63, column: 71, scope: !448, inlinedAt: !444)
!448 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!449 = !DILocation(line: 138, column: 46, scope: !448, inlinedAt: !444)
!450 = !DILocation(line: 138, column: 72, scope: !448, inlinedAt: !444)
!451 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg64Random.next_long", scope: !14, file: !14, line: 64, type: !452, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!452 = !DISubroutineType(types: !453)
!453 = !{!6, !371}
!454 = !DILocation(line: 64, column: 51, scope: !451)
!455 = !DILocalVariable(name: "self", arg: 1, scope: !451, file: !14, line: 64, type: !371)
!456 = !DILocation(line: 64, column: 32, scope: !451)
!457 = !DILocation(line: 64, column: 64, scope: !458, inlinedAt: !454)
!458 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!459 = !DILocation(line: 139, column: 41, scope: !458, inlinedAt: !454)
!460 = !DILocation(line: 139, column: 65, scope: !458, inlinedAt: !454)
!461 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg64Random.next_short", scope: !14, file: !14, line: 65, type: !462, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!462 = !DISubroutineType(types: !463)
!463 = !{!23, !371}
!464 = !DILocation(line: 65, column: 53, scope: !461)
!465 = !DILocalVariable(name: "self", arg: 1, scope: !461, file: !14, line: 65, type: !371)
!466 = !DILocation(line: 65, column: 34, scope: !461)
!467 = !DILocation(line: 65, column: 61, scope: !461)
!468 = !DILocation(line: 65, column: 54, scope: !461)
!469 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg64Random.next_byte", scope: !14, file: !14, line: 66, type: !470, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!470 = !DISubroutineType(types: !471)
!471 = !{!43, !371}
!472 = !DILocation(line: 66, column: 50, scope: !469)
!473 = !DILocalVariable(name: "self", arg: 1, scope: !469, file: !14, line: 66, type: !371)
!474 = !DILocation(line: 66, column: 31, scope: !469)
!475 = !DILocation(line: 66, column: 56, scope: !469)
!476 = !DILocation(line: 66, column: 51, scope: !469)
!477 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg32Random.set_seed", scope: !14, file: !14, line: 72, type: !478, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!478 = !DISubroutineType(types: !479)
!479 = !{null, !480, !260}
!480 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg32Random*", baseType: !481, size: 64, align: 64, dwarfAddressSpace: 0)
!481 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg32Random", scope: !14, file: !14, line: 70, baseType: !20, align: 4)
!482 = !DILocation(line: 73, column: 1, scope: !477)
!483 = !DILocalVariable(name: "self", arg: 1, scope: !477, file: !14, line: 72, type: !480)
!484 = !DILocation(line: 72, column: 30, scope: !477)
!485 = !DILocalVariable(name: "seed", arg: 2, scope: !477, file: !14, line: 72, type: !260)
!486 = !DILocation(line: 72, column: 44, scope: !477)
!487 = !DILocation(line: 74, column: 3, scope: !477)
!488 = !DILocalVariable(name: "return_value", scope: !489, file: !14, line: 10, type: !20, align: 4)
!489 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!490 = !DILocation(line: 10, column: 8, scope: !489, inlinedAt: !491)
!491 = !DILocation(line: 74, column: 11, scope: !477)
!492 = !DILocation(line: 342, column: 11, scope: !493, inlinedAt: !494)
!493 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!494 = !DILocation(line: 11, column: 16, scope: !489, inlinedAt: !491)
!495 = !DILocation(line: 11, column: 2, scope: !489, inlinedAt: !491)
!496 = !DILocation(line: 12, column: 9, scope: !489, inlinedAt: !491)
!497 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg32Random.next_short", scope: !14, file: !14, line: 77, type: !498, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!498 = !DISubroutineType(types: !499)
!499 = !{!23, !480}
!500 = !DILocation(line: 78, column: 1, scope: !497)
!501 = !DILocalVariable(name: "self", arg: 1, scope: !497, file: !14, line: 77, type: !480)
!502 = !DILocation(line: 77, column: 34, scope: !497)
!503 = !DILocalVariable(name: "s", scope: !497, file: !14, line: 79, type: !504, align: 8)
!504 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !20, size: 64, align: 64, dwarfAddressSpace: 0)
!505 = !DILocation(line: 79, column: 8, scope: !497)
!506 = !DILocation(line: 79, column: 13, scope: !497)
!507 = !DILocalVariable(name: "result", scope: !497, file: !14, line: 80, type: !23, align: 2)
!508 = !DILocation(line: 80, column: 9, scope: !497)
!509 = !DILocation(line: 80, column: 28, scope: !497)
!510 = !DILocation(line: 80, column: 19, scope: !497)
!511 = !DILocation(line: 81, column: 3, scope: !497)
!512 = !DILocation(line: 81, column: 8, scope: !497)
!513 = !DILocation(line: 81, column: 7, scope: !497)
!514 = !DILocation(line: 82, column: 9, scope: !497)
!515 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg32Random.next_bytes", scope: !14, file: !14, line: 85, type: !478, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!516 = !DILocation(line: 85, column: 65, scope: !515)
!517 = !DILocalVariable(name: "self", arg: 1, scope: !515, file: !14, line: 85, type: !480)
!518 = !DILocation(line: 85, column: 32, scope: !515)
!519 = !DILocalVariable(name: "bytes", arg: 2, scope: !515, file: !14, line: 85, type: !260)
!520 = !DILocation(line: 85, column: 46, scope: !515)
!521 = !DILocalVariable(name: "len", scope: !522, file: !14, line: 146, type: !265, align: 8)
!522 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!523 = !DILocation(line: 146, column: 6, scope: !522, inlinedAt: !516)
!524 = !DILocation(line: 146, column: 12, scope: !522, inlinedAt: !516)
!525 = !DILocation(line: 148, column: 2, scope: !522, inlinedAt: !516)
!526 = !DILocation(line: 148, column: 9, scope: !527, inlinedAt: !516)
!527 = distinct !DILexicalBlock(scope: !522, file: !2, line: 148, column: 2)
!528 = !DILocalVariable(name: "value", scope: !529, file: !14, line: 150, type: !23, align: 2)
!529 = distinct !DILexicalBlock(scope: !527, file: !2, line: 149, column: 2)
!530 = !DILocation(line: 150, column: 7, scope: !529, inlinedAt: !516)
!531 = !DILocation(line: 85, column: 88, scope: !529, inlinedAt: !516)
!532 = !DILocation(line: 150, column: 15, scope: !529, inlinedAt: !516)
!533 = !DILocation(line: 151, column: 7, scope: !529, inlinedAt: !516)
!534 = !DILocation(line: 153, column: 33, scope: !535, inlinedAt: !516)
!535 = distinct !DILexicalBlock(scope: !529, file: !2, line: 152, column: 3)
!536 = !DILocation(line: 153, column: 4, scope: !535, inlinedAt: !516)
!537 = !DILocation(line: 153, column: 10, scope: !535, inlinedAt: !516)
!538 = !DILocation(line: 154, column: 10, scope: !535, inlinedAt: !516)
!539 = !DILocation(line: 156, column: 3, scope: !529, inlinedAt: !516)
!540 = !DILocation(line: 157, column: 3, scope: !529, inlinedAt: !516)
!541 = !DILocation(line: 158, column: 11, scope: !529, inlinedAt: !516)
!542 = !DILocation(line: 158, column: 17, scope: !529, inlinedAt: !516)
!543 = !DILocation(line: 164, column: 33, scope: !544, inlinedAt: !545)
!544 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!545 = !DILocation(line: 160, column: 2, scope: !522, inlinedAt: !516)
!546 = !DILocation(line: 164, column: 2, scope: !544, inlinedAt: !545)
!547 = !DILocation(line: 166, column: 2, scope: !544, inlinedAt: !545)
!548 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg32Random.next_int128", scope: !14, file: !14, line: 86, type: !549, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!549 = !DISubroutineType(types: !550)
!550 = !{!15, !480}
!551 = !DILocation(line: 86, column: 55, scope: !548)
!552 = !DILocalVariable(name: "self", arg: 1, scope: !548, file: !14, line: 86, type: !480)
!553 = !DILocation(line: 86, column: 36, scope: !548)
!554 = !DILocation(line: 86, column: 71, scope: !555, inlinedAt: !551)
!555 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!556 = !DILocation(line: 138, column: 46, scope: !555, inlinedAt: !551)
!557 = !DILocation(line: 138, column: 72, scope: !555, inlinedAt: !551)
!558 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg32Random.next_long", scope: !14, file: !14, line: 87, type: !559, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!559 = !DISubroutineType(types: !560)
!560 = !{!6, !480}
!561 = !DILocation(line: 87, column: 51, scope: !558)
!562 = !DILocalVariable(name: "self", arg: 1, scope: !558, file: !14, line: 87, type: !480)
!563 = !DILocation(line: 87, column: 32, scope: !558)
!564 = !DILocation(line: 87, column: 64, scope: !565, inlinedAt: !561)
!565 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!566 = !DILocation(line: 139, column: 41, scope: !565, inlinedAt: !561)
!567 = !DILocation(line: 139, column: 65, scope: !565, inlinedAt: !561)
!568 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg32Random.next_int", scope: !14, file: !14, line: 88, type: !569, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!569 = !DISubroutineType(types: !570)
!570 = !{!20, !480}
!571 = !DILocation(line: 88, column: 49, scope: !568)
!572 = !DILocalVariable(name: "self", arg: 1, scope: !568, file: !14, line: 88, type: !480)
!573 = !DILocation(line: 88, column: 30, scope: !568)
!574 = !DILocation(line: 88, column: 63, scope: !575, inlinedAt: !571)
!575 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!576 = !DILocation(line: 140, column: 41, scope: !575, inlinedAt: !571)
!577 = !DILocation(line: 140, column: 64, scope: !575, inlinedAt: !571)
!578 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg32Random.next_byte", scope: !14, file: !14, line: 89, type: !579, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!579 = !DISubroutineType(types: !580)
!580 = !{!43, !480}
!581 = !DILocation(line: 89, column: 50, scope: !578)
!582 = !DILocalVariable(name: "self", arg: 1, scope: !578, file: !14, line: 89, type: !480)
!583 = !DILocation(line: 89, column: 31, scope: !578)
!584 = !DILocation(line: 89, column: 56, scope: !578)
!585 = !DILocation(line: 89, column: 51, scope: !578)
!586 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg16Random.set_seed", scope: !14, file: !14, line: 95, type: !587, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!587 = !DISubroutineType(types: !588)
!588 = !{null, !589, !260}
!589 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg16Random*", baseType: !590, size: 64, align: 64, dwarfAddressSpace: 0)
!590 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg16Random", scope: !14, file: !14, line: 93, baseType: !23, align: 2)
!591 = !DILocation(line: 96, column: 1, scope: !586)
!592 = !DILocalVariable(name: "self", arg: 1, scope: !586, file: !14, line: 95, type: !589)
!593 = !DILocation(line: 95, column: 30, scope: !586)
!594 = !DILocalVariable(name: "seed", arg: 2, scope: !586, file: !14, line: 95, type: !260)
!595 = !DILocation(line: 95, column: 44, scope: !586)
!596 = !DILocation(line: 97, column: 3, scope: !586)
!597 = !DILocalVariable(name: "return_value", scope: !598, file: !14, line: 10, type: !23, align: 2)
!598 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!599 = !DILocation(line: 10, column: 8, scope: !598, inlinedAt: !600)
!600 = !DILocation(line: 97, column: 11, scope: !586)
!601 = !DILocation(line: 342, column: 11, scope: !602, inlinedAt: !603)
!602 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!603 = !DILocation(line: 11, column: 16, scope: !598, inlinedAt: !600)
!604 = !DILocation(line: 11, column: 2, scope: !598, inlinedAt: !600)
!605 = !DILocation(line: 12, column: 9, scope: !598, inlinedAt: !600)
!606 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg16Random.next_byte", scope: !14, file: !14, line: 100, type: !607, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!607 = !DISubroutineType(types: !608)
!608 = !{!43, !589}
!609 = !DILocation(line: 101, column: 1, scope: !606)
!610 = !DILocalVariable(name: "self", arg: 1, scope: !606, file: !14, line: 100, type: !589)
!611 = !DILocation(line: 100, column: 31, scope: !606)
!612 = !DILocalVariable(name: "s", scope: !606, file: !14, line: 102, type: !613, align: 8)
!613 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !23, size: 64, align: 64, dwarfAddressSpace: 0)
!614 = !DILocation(line: 102, column: 10, scope: !606)
!615 = !DILocation(line: 102, column: 15, scope: !606)
!616 = !DILocalVariable(name: "result", scope: !606, file: !14, line: 103, type: !43, align: 1)
!617 = !DILocation(line: 103, column: 7, scope: !606)
!618 = !DILocation(line: 103, column: 24, scope: !606)
!619 = !DILocation(line: 103, column: 17, scope: !606)
!620 = !DILocation(line: 104, column: 3, scope: !606)
!621 = !DILocation(line: 104, column: 8, scope: !606)
!622 = !DILocation(line: 104, column: 7, scope: !606)
!623 = !DILocation(line: 105, column: 9, scope: !606)
!624 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg16Random.next_bytes", scope: !14, file: !14, line: 108, type: !587, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!625 = !DILocation(line: 108, column: 65, scope: !624)
!626 = !DILocalVariable(name: "self", arg: 1, scope: !624, file: !14, line: 108, type: !589)
!627 = !DILocation(line: 108, column: 32, scope: !624)
!628 = !DILocalVariable(name: "bytes", arg: 2, scope: !624, file: !14, line: 108, type: !260)
!629 = !DILocation(line: 108, column: 46, scope: !624)
!630 = !DILocalVariable(name: "len", scope: !631, file: !14, line: 146, type: !265, align: 8)
!631 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!632 = !DILocation(line: 146, column: 6, scope: !631, inlinedAt: !625)
!633 = !DILocation(line: 146, column: 12, scope: !631, inlinedAt: !625)
!634 = !DILocation(line: 148, column: 2, scope: !631, inlinedAt: !625)
!635 = !DILocation(line: 148, column: 9, scope: !636, inlinedAt: !625)
!636 = distinct !DILexicalBlock(scope: !631, file: !2, line: 148, column: 2)
!637 = !DILocalVariable(name: "value", scope: !638, file: !14, line: 150, type: !43, align: 1)
!638 = distinct !DILexicalBlock(scope: !636, file: !2, line: 149, column: 2)
!639 = !DILocation(line: 150, column: 7, scope: !638, inlinedAt: !625)
!640 = !DILocation(line: 108, column: 88, scope: !638, inlinedAt: !625)
!641 = !DILocation(line: 150, column: 15, scope: !638, inlinedAt: !625)
!642 = !DILocation(line: 151, column: 7, scope: !638, inlinedAt: !625)
!643 = !DILocation(line: 153, column: 33, scope: !644, inlinedAt: !625)
!644 = distinct !DILexicalBlock(scope: !638, file: !2, line: 152, column: 3)
!645 = !DILocation(line: 153, column: 4, scope: !644, inlinedAt: !625)
!646 = !DILocation(line: 153, column: 10, scope: !644, inlinedAt: !625)
!647 = !DILocation(line: 154, column: 10, scope: !644, inlinedAt: !625)
!648 = !DILocation(line: 156, column: 3, scope: !638, inlinedAt: !625)
!649 = !DILocation(line: 157, column: 3, scope: !638, inlinedAt: !625)
!650 = !DILocation(line: 158, column: 11, scope: !638, inlinedAt: !625)
!651 = !DILocation(line: 158, column: 17, scope: !638, inlinedAt: !625)
!652 = !DILocation(line: 164, column: 33, scope: !653, inlinedAt: !654)
!653 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!654 = !DILocation(line: 160, column: 2, scope: !631, inlinedAt: !625)
!655 = !DILocation(line: 164, column: 2, scope: !653, inlinedAt: !654)
!656 = !DILocation(line: 166, column: 2, scope: !653, inlinedAt: !654)
!657 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg16Random.next_int128", scope: !14, file: !14, line: 109, type: !658, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!658 = !DISubroutineType(types: !659)
!659 = !{!15, !589}
!660 = !DILocation(line: 109, column: 55, scope: !657)
!661 = !DILocalVariable(name: "self", arg: 1, scope: !657, file: !14, line: 109, type: !589)
!662 = !DILocation(line: 109, column: 36, scope: !657)
!663 = !DILocation(line: 109, column: 71, scope: !664, inlinedAt: !660)
!664 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!665 = !DILocation(line: 138, column: 46, scope: !664, inlinedAt: !660)
!666 = !DILocation(line: 138, column: 72, scope: !664, inlinedAt: !660)
!667 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg16Random.next_long", scope: !14, file: !14, line: 110, type: !668, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!668 = !DISubroutineType(types: !669)
!669 = !{!6, !589}
!670 = !DILocation(line: 110, column: 51, scope: !667)
!671 = !DILocalVariable(name: "self", arg: 1, scope: !667, file: !14, line: 110, type: !589)
!672 = !DILocation(line: 110, column: 32, scope: !667)
!673 = !DILocation(line: 110, column: 64, scope: !674, inlinedAt: !670)
!674 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!675 = !DILocation(line: 139, column: 41, scope: !674, inlinedAt: !670)
!676 = !DILocation(line: 139, column: 65, scope: !674, inlinedAt: !670)
!677 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg16Random.next_int", scope: !14, file: !14, line: 111, type: !678, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!678 = !DISubroutineType(types: !679)
!679 = !{!20, !589}
!680 = !DILocation(line: 111, column: 49, scope: !677)
!681 = !DILocalVariable(name: "self", arg: 1, scope: !677, file: !14, line: 111, type: !589)
!682 = !DILocation(line: 111, column: 30, scope: !677)
!683 = !DILocation(line: 111, column: 63, scope: !684, inlinedAt: !680)
!684 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!685 = !DILocation(line: 140, column: 41, scope: !684, inlinedAt: !680)
!686 = !DILocation(line: 140, column: 64, scope: !684, inlinedAt: !680)
!687 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg16Random.next_short", scope: !14, file: !14, line: 112, type: !688, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!688 = !DISubroutineType(types: !689)
!689 = !{!23, !589}
!690 = !DILocation(line: 112, column: 53, scope: !687)
!691 = !DILocalVariable(name: "self", arg: 1, scope: !687, file: !14, line: 112, type: !589)
!692 = !DILocation(line: 112, column: 34, scope: !687)
!693 = !DILocation(line: 112, column: 68, scope: !694, inlinedAt: !690)
!694 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!695 = !DILocation(line: 141, column: 44, scope: !694, inlinedAt: !690)
!696 = !DILocation(line: 141, column: 68, scope: !694, inlinedAt: !690)
!697 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws128Random.set_seed", scope: !34, file: !34, line: 17, type: !698, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!698 = !DISubroutineType(types: !699)
!699 = !{null, !700, !260}
!700 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws128Random*", baseType: !701, size: 64, align: 64, dwarfAddressSpace: 0)
!701 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws128Random", scope: !34, file: !34, line: 11, size: 512, align: 64, elements: !702, identifier: "std.math.random.Msws128Random")
!702 = !{!703, !704, !705, !706}
!703 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !701, file: !34, line: 13, baseType: !15, size: 128, align: 64)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !701, file: !34, line: 13, baseType: !15, size: 128, align: 64, offset: 128)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !701, file: !34, line: 14, baseType: !15, size: 128, align: 64, offset: 256)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !701, file: !34, line: 14, baseType: !15, size: 128, align: 64, offset: 384)
!707 = !DILocation(line: 18, column: 1, scope: !697)
!708 = !DILocalVariable(name: "self", arg: 1, scope: !697, file: !34, line: 17, type: !700)
!709 = !DILocation(line: 17, column: 32, scope: !697)
!710 = !DILocalVariable(name: "input", arg: 2, scope: !697, file: !34, line: 17, type: !260)
!711 = !DILocation(line: 17, column: 46, scope: !697)
!712 = !DILocation(line: 19, column: 3, scope: !697)
!713 = !DILocalVariable(name: "return_value", scope: !714, file: !34, line: 10, type: !715, align: 16)
!714 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!715 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 512, align: 64, elements: !7)
!716 = !DILocation(line: 10, column: 8, scope: !714, inlinedAt: !717)
!717 = !DILocation(line: 19, column: 26, scope: !697)
!718 = !DILocation(line: 342, column: 11, scope: !719, inlinedAt: !720)
!719 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!720 = !DILocation(line: 11, column: 16, scope: !714, inlinedAt: !717)
!721 = !DILocation(line: 11, column: 2, scope: !714, inlinedAt: !717)
!722 = !DILocation(line: 212, column: 20, scope: !723, inlinedAt: !724)
!723 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!724 = !DILocation(line: 19, column: 10, scope: !697)
!725 = !DILocation(line: 212, column: 12, scope: !723, inlinedAt: !724)
!726 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws128Random.next_int128", scope: !34, file: !34, line: 23, type: !727, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!727 = !DISubroutineType(types: !728)
!728 = !{!15, !700}
!729 = !DILocation(line: 24, column: 1, scope: !726)
!730 = !DILocalVariable(name: "self", arg: 1, scope: !726, file: !34, line: 23, type: !700)
!731 = !DILocation(line: 23, column: 38, scope: !726)
!732 = !DILocalVariable(name: "s0", scope: !726, file: !34, line: 25, type: !15, align: 8)
!733 = !DILocation(line: 25, column: 10, scope: !726)
!734 = !DILocation(line: 25, column: 15, scope: !726)
!735 = !DILocation(line: 26, column: 2, scope: !726)
!736 = !DILocation(line: 26, column: 16, scope: !726)
!737 = !DILocation(line: 26, column: 30, scope: !726)
!738 = !DILocation(line: 26, column: 44, scope: !726)
!739 = !DILocation(line: 27, column: 2, scope: !726)
!740 = !DILocation(line: 27, column: 16, scope: !726)
!741 = !DILocation(line: 163, column: 59, scope: !742, inlinedAt: !740)
!742 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!743 = !DILocation(line: 163, column: 65, scope: !742, inlinedAt: !740)
!744 = !DILocation(line: 163, column: 71, scope: !742, inlinedAt: !740)
!745 = !DILocation(line: 28, column: 2, scope: !726)
!746 = !DILocation(line: 30, column: 2, scope: !726)
!747 = !DILocation(line: 30, column: 16, scope: !726)
!748 = !DILocation(line: 30, column: 30, scope: !726)
!749 = !DILocation(line: 30, column: 44, scope: !726)
!750 = !DILocalVariable(name: "s1", scope: !726, file: !34, line: 31, type: !15, align: 8)
!751 = !DILocation(line: 31, column: 10, scope: !726)
!752 = !DILocation(line: 31, column: 15, scope: !726)
!753 = !DILocation(line: 32, column: 2, scope: !726)
!754 = !DILocation(line: 32, column: 16, scope: !726)
!755 = !DILocation(line: 163, column: 59, scope: !756, inlinedAt: !754)
!756 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!757 = !DILocation(line: 163, column: 65, scope: !756, inlinedAt: !754)
!758 = !DILocation(line: 163, column: 71, scope: !756, inlinedAt: !754)
!759 = !DILocation(line: 33, column: 2, scope: !726)
!760 = !DILocation(line: 35, column: 9, scope: !726)
!761 = !DILocation(line: 35, column: 14, scope: !726)
!762 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws128Random.next_bytes", scope: !34, file: !34, line: 41, type: !698, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!763 = !DILocation(line: 41, column: 67, scope: !762)
!764 = !DILocalVariable(name: "self", arg: 1, scope: !762, file: !34, line: 41, type: !700)
!765 = !DILocation(line: 41, column: 34, scope: !762)
!766 = !DILocalVariable(name: "bytes", arg: 2, scope: !762, file: !34, line: 41, type: !260)
!767 = !DILocation(line: 41, column: 48, scope: !762)
!768 = !DILocation(line: 39, column: 11, scope: !769)
!769 = distinct !DILexicalBlock(scope: !762, file: !34, line: 41, column: 67)
!770 = !DILocalVariable(name: "len", scope: !771, file: !34, line: 146, type: !265, align: 8)
!771 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!772 = !DILocation(line: 146, column: 6, scope: !771, inlinedAt: !763)
!773 = !DILocation(line: 146, column: 12, scope: !771, inlinedAt: !763)
!774 = !DILocation(line: 148, column: 2, scope: !771, inlinedAt: !763)
!775 = !DILocation(line: 148, column: 9, scope: !776, inlinedAt: !763)
!776 = distinct !DILexicalBlock(scope: !771, file: !2, line: 148, column: 2)
!777 = !DILocalVariable(name: "value", scope: !778, file: !34, line: 150, type: !15, align: 8)
!778 = distinct !DILexicalBlock(scope: !776, file: !2, line: 149, column: 2)
!779 = !DILocation(line: 150, column: 7, scope: !778, inlinedAt: !763)
!780 = !DILocation(line: 41, column: 90, scope: !778, inlinedAt: !763)
!781 = !DILocation(line: 150, column: 15, scope: !778, inlinedAt: !763)
!782 = !DILocation(line: 151, column: 7, scope: !778, inlinedAt: !763)
!783 = !DILocation(line: 153, column: 33, scope: !784, inlinedAt: !763)
!784 = distinct !DILexicalBlock(scope: !778, file: !2, line: 152, column: 3)
!785 = !DILocation(line: 153, column: 4, scope: !784, inlinedAt: !763)
!786 = !DILocation(line: 153, column: 10, scope: !784, inlinedAt: !763)
!787 = !DILocation(line: 154, column: 10, scope: !784, inlinedAt: !763)
!788 = !DILocation(line: 156, column: 3, scope: !778, inlinedAt: !763)
!789 = !DILocation(line: 157, column: 3, scope: !778, inlinedAt: !763)
!790 = !DILocation(line: 158, column: 11, scope: !778, inlinedAt: !763)
!791 = !DILocation(line: 158, column: 17, scope: !778, inlinedAt: !763)
!792 = !DILocation(line: 164, column: 33, scope: !793, inlinedAt: !794)
!793 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!794 = !DILocation(line: 160, column: 2, scope: !771, inlinedAt: !763)
!795 = !DILocation(line: 164, column: 2, scope: !793, inlinedAt: !794)
!796 = !DILocation(line: 166, column: 2, scope: !793, inlinedAt: !794)
!797 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws128Random.next_long", scope: !34, file: !34, line: 42, type: !798, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!798 = !DISubroutineType(types: !799)
!799 = !{!6, !700}
!800 = !DILocation(line: 42, column: 53, scope: !797)
!801 = !DILocalVariable(name: "self", arg: 1, scope: !797, file: !34, line: 42, type: !700)
!802 = !DILocation(line: 42, column: 34, scope: !797)
!803 = !DILocation(line: 42, column: 60, scope: !797)
!804 = !DILocation(line: 42, column: 54, scope: !797)
!805 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws128Random.next_int", scope: !34, file: !34, line: 43, type: !806, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!806 = !DISubroutineType(types: !807)
!807 = !{!20, !700}
!808 = !DILocation(line: 43, column: 51, scope: !805)
!809 = !DILocalVariable(name: "self", arg: 1, scope: !805, file: !34, line: 43, type: !700)
!810 = !DILocation(line: 43, column: 32, scope: !805)
!811 = !DILocation(line: 43, column: 57, scope: !805)
!812 = !DILocation(line: 43, column: 52, scope: !805)
!813 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws128Random.next_short", scope: !34, file: !34, line: 44, type: !814, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!814 = !DISubroutineType(types: !815)
!815 = !{!23, !700}
!816 = !DILocation(line: 44, column: 55, scope: !813)
!817 = !DILocalVariable(name: "self", arg: 1, scope: !813, file: !34, line: 44, type: !700)
!818 = !DILocation(line: 44, column: 36, scope: !813)
!819 = !DILocation(line: 44, column: 63, scope: !813)
!820 = !DILocation(line: 44, column: 56, scope: !813)
!821 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws128Random.next_byte", scope: !34, file: !34, line: 45, type: !822, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!822 = !DISubroutineType(types: !823)
!823 = !{!43, !700}
!824 = !DILocation(line: 45, column: 52, scope: !821)
!825 = !DILocalVariable(name: "self", arg: 1, scope: !821, file: !34, line: 45, type: !700)
!826 = !DILocation(line: 45, column: 33, scope: !821)
!827 = !DILocation(line: 45, column: 58, scope: !821)
!828 = !DILocation(line: 45, column: 53, scope: !821)
!829 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws64Random.set_seed", scope: !34, file: !34, line: 55, type: !830, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!830 = !DISubroutineType(types: !831)
!831 = !{null, !832, !260}
!832 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws64Random*", baseType: !833, size: 64, align: 64, dwarfAddressSpace: 0)
!833 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws64Random", scope: !34, file: !34, line: 49, size: 256, align: 64, elements: !834, identifier: "std.math.random.Msws64Random")
!834 = !{!835, !836, !837, !838}
!835 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !833, file: !34, line: 51, baseType: !6, size: 64, align: 64)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !833, file: !34, line: 51, baseType: !6, size: 64, align: 64, offset: 64)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !833, file: !34, line: 52, baseType: !6, size: 64, align: 64, offset: 128)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !833, file: !34, line: 52, baseType: !6, size: 64, align: 64, offset: 192)
!839 = !DILocation(line: 56, column: 1, scope: !829)
!840 = !DILocalVariable(name: "self", arg: 1, scope: !829, file: !34, line: 55, type: !832)
!841 = !DILocation(line: 55, column: 32, scope: !829)
!842 = !DILocalVariable(name: "input", arg: 2, scope: !829, file: !34, line: 55, type: !260)
!843 = !DILocation(line: 55, column: 46, scope: !829)
!844 = !DILocation(line: 57, column: 3, scope: !829)
!845 = !DILocalVariable(name: "return_value", scope: !846, file: !34, line: 10, type: !5, align: 16)
!846 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!847 = !DILocation(line: 10, column: 8, scope: !846, inlinedAt: !848)
!848 = !DILocation(line: 57, column: 26, scope: !829)
!849 = !DILocation(line: 342, column: 11, scope: !850, inlinedAt: !851)
!850 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!851 = !DILocation(line: 11, column: 16, scope: !846, inlinedAt: !848)
!852 = !DILocation(line: 11, column: 2, scope: !846, inlinedAt: !848)
!853 = !DILocation(line: 212, column: 20, scope: !854, inlinedAt: !855)
!854 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!855 = !DILocation(line: 57, column: 10, scope: !829)
!856 = !DILocation(line: 212, column: 12, scope: !854, inlinedAt: !855)
!857 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws64Random.next_long", scope: !34, file: !34, line: 60, type: !858, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!858 = !DISubroutineType(types: !859)
!859 = !{!6, !832}
!860 = !DILocation(line: 61, column: 1, scope: !857)
!861 = !DILocalVariable(name: "self", arg: 1, scope: !857, file: !34, line: 60, type: !832)
!862 = !DILocation(line: 60, column: 33, scope: !857)
!863 = !DILocalVariable(name: "s0", scope: !857, file: !34, line: 62, type: !6, align: 8)
!864 = !DILocation(line: 62, column: 8, scope: !857)
!865 = !DILocation(line: 62, column: 13, scope: !857)
!866 = !DILocation(line: 63, column: 2, scope: !857)
!867 = !DILocation(line: 63, column: 16, scope: !857)
!868 = !DILocation(line: 63, column: 30, scope: !857)
!869 = !DILocation(line: 63, column: 44, scope: !857)
!870 = !DILocation(line: 64, column: 2, scope: !857)
!871 = !DILocation(line: 64, column: 16, scope: !857)
!872 = !DILocation(line: 147, column: 53, scope: !873, inlinedAt: !871)
!873 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!874 = !DILocation(line: 147, column: 59, scope: !873, inlinedAt: !871)
!875 = !DILocation(line: 147, column: 65, scope: !873, inlinedAt: !871)
!876 = !DILocation(line: 65, column: 2, scope: !857)
!877 = !DILocation(line: 67, column: 2, scope: !857)
!878 = !DILocation(line: 67, column: 16, scope: !857)
!879 = !DILocation(line: 67, column: 30, scope: !857)
!880 = !DILocation(line: 67, column: 44, scope: !857)
!881 = !DILocalVariable(name: "s1", scope: !857, file: !34, line: 68, type: !6, align: 8)
!882 = !DILocation(line: 68, column: 8, scope: !857)
!883 = !DILocation(line: 68, column: 13, scope: !857)
!884 = !DILocation(line: 69, column: 2, scope: !857)
!885 = !DILocation(line: 69, column: 16, scope: !857)
!886 = !DILocation(line: 147, column: 53, scope: !887, inlinedAt: !885)
!887 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!888 = !DILocation(line: 147, column: 59, scope: !887, inlinedAt: !885)
!889 = !DILocation(line: 147, column: 65, scope: !887, inlinedAt: !885)
!890 = !DILocation(line: 70, column: 2, scope: !857)
!891 = !DILocation(line: 72, column: 9, scope: !857)
!892 = !DILocation(line: 72, column: 14, scope: !857)
!893 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws64Random.next_bytes", scope: !34, file: !34, line: 78, type: !830, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!894 = !DILocation(line: 78, column: 66, scope: !893)
!895 = !DILocalVariable(name: "self", arg: 1, scope: !893, file: !34, line: 78, type: !832)
!896 = !DILocation(line: 78, column: 33, scope: !893)
!897 = !DILocalVariable(name: "bytes", arg: 2, scope: !893, file: !34, line: 78, type: !260)
!898 = !DILocation(line: 78, column: 47, scope: !893)
!899 = !DILocation(line: 76, column: 11, scope: !900)
!900 = distinct !DILexicalBlock(scope: !893, file: !34, line: 78, column: 66)
!901 = !DILocalVariable(name: "len", scope: !902, file: !34, line: 146, type: !265, align: 8)
!902 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!903 = !DILocation(line: 146, column: 6, scope: !902, inlinedAt: !894)
!904 = !DILocation(line: 146, column: 12, scope: !902, inlinedAt: !894)
!905 = !DILocation(line: 148, column: 2, scope: !902, inlinedAt: !894)
!906 = !DILocation(line: 148, column: 9, scope: !907, inlinedAt: !894)
!907 = distinct !DILexicalBlock(scope: !902, file: !2, line: 148, column: 2)
!908 = !DILocalVariable(name: "value", scope: !909, file: !34, line: 150, type: !6, align: 8)
!909 = distinct !DILexicalBlock(scope: !907, file: !2, line: 149, column: 2)
!910 = !DILocation(line: 150, column: 7, scope: !909, inlinedAt: !894)
!911 = !DILocation(line: 78, column: 89, scope: !909, inlinedAt: !894)
!912 = !DILocation(line: 150, column: 15, scope: !909, inlinedAt: !894)
!913 = !DILocation(line: 151, column: 7, scope: !909, inlinedAt: !894)
!914 = !DILocation(line: 153, column: 33, scope: !915, inlinedAt: !894)
!915 = distinct !DILexicalBlock(scope: !909, file: !2, line: 152, column: 3)
!916 = !DILocation(line: 153, column: 4, scope: !915, inlinedAt: !894)
!917 = !DILocation(line: 153, column: 10, scope: !915, inlinedAt: !894)
!918 = !DILocation(line: 154, column: 10, scope: !915, inlinedAt: !894)
!919 = !DILocation(line: 156, column: 3, scope: !909, inlinedAt: !894)
!920 = !DILocation(line: 157, column: 3, scope: !909, inlinedAt: !894)
!921 = !DILocation(line: 158, column: 11, scope: !909, inlinedAt: !894)
!922 = !DILocation(line: 158, column: 17, scope: !909, inlinedAt: !894)
!923 = !DILocation(line: 164, column: 33, scope: !924, inlinedAt: !925)
!924 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!925 = !DILocation(line: 160, column: 2, scope: !902, inlinedAt: !894)
!926 = !DILocation(line: 164, column: 2, scope: !924, inlinedAt: !925)
!927 = !DILocation(line: 166, column: 2, scope: !924, inlinedAt: !925)
!928 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws64Random.next_int128", scope: !34, file: !34, line: 79, type: !929, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!929 = !DISubroutineType(types: !930)
!930 = !{!15, !832}
!931 = !DILocation(line: 79, column: 56, scope: !928)
!932 = !DILocalVariable(name: "self", arg: 1, scope: !928, file: !34, line: 79, type: !832)
!933 = !DILocation(line: 79, column: 37, scope: !928)
!934 = !DILocation(line: 79, column: 72, scope: !935, inlinedAt: !931)
!935 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!936 = !DILocation(line: 138, column: 46, scope: !935, inlinedAt: !931)
!937 = !DILocation(line: 138, column: 72, scope: !935, inlinedAt: !931)
!938 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws64Random.next_int", scope: !34, file: !34, line: 80, type: !939, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!939 = !DISubroutineType(types: !940)
!940 = !{!20, !832}
!941 = !DILocation(line: 80, column: 50, scope: !938)
!942 = !DILocalVariable(name: "self", arg: 1, scope: !938, file: !34, line: 80, type: !832)
!943 = !DILocation(line: 80, column: 31, scope: !938)
!944 = !DILocation(line: 80, column: 56, scope: !938)
!945 = !DILocation(line: 80, column: 51, scope: !938)
!946 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws64Random.next_short", scope: !34, file: !34, line: 81, type: !947, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!947 = !DISubroutineType(types: !948)
!948 = !{!23, !832}
!949 = !DILocation(line: 81, column: 54, scope: !946)
!950 = !DILocalVariable(name: "self", arg: 1, scope: !946, file: !34, line: 81, type: !832)
!951 = !DILocation(line: 81, column: 35, scope: !946)
!952 = !DILocation(line: 81, column: 62, scope: !946)
!953 = !DILocation(line: 81, column: 55, scope: !946)
!954 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws64Random.next_byte", scope: !34, file: !34, line: 82, type: !955, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!955 = !DISubroutineType(types: !956)
!956 = !{!43, !832}
!957 = !DILocation(line: 82, column: 51, scope: !954)
!958 = !DILocalVariable(name: "self", arg: 1, scope: !954, file: !34, line: 82, type: !832)
!959 = !DILocation(line: 82, column: 32, scope: !954)
!960 = !DILocation(line: 82, column: 57, scope: !954)
!961 = !DILocation(line: 82, column: 52, scope: !954)
!962 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws32Random.set_seed", scope: !34, file: !34, line: 91, type: !963, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!963 = !DISubroutineType(types: !964)
!964 = !{null, !965, !260}
!965 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws32Random*", baseType: !966, size: 64, align: 64, dwarfAddressSpace: 0)
!966 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws32Random", scope: !34, file: !34, line: 85, size: 128, align: 32, elements: !967, identifier: "std.math.random.Msws32Random")
!967 = !{!968, !969, !970, !971}
!968 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !966, file: !34, line: 87, baseType: !20, size: 32, align: 32)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !966, file: !34, line: 87, baseType: !20, size: 32, align: 32, offset: 32)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !966, file: !34, line: 88, baseType: !20, size: 32, align: 32, offset: 64)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !966, file: !34, line: 88, baseType: !20, size: 32, align: 32, offset: 96)
!972 = !DILocation(line: 92, column: 1, scope: !962)
!973 = !DILocalVariable(name: "self", arg: 1, scope: !962, file: !34, line: 91, type: !965)
!974 = !DILocation(line: 91, column: 32, scope: !962)
!975 = !DILocalVariable(name: "input", arg: 2, scope: !962, file: !34, line: 91, type: !260)
!976 = !DILocation(line: 91, column: 46, scope: !962)
!977 = !DILocation(line: 93, column: 3, scope: !962)
!978 = !DILocalVariable(name: "return_value", scope: !979, file: !34, line: 10, type: !980, align: 16)
!979 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!980 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 128, align: 32, elements: !7)
!981 = !DILocation(line: 10, column: 8, scope: !979, inlinedAt: !982)
!982 = !DILocation(line: 93, column: 26, scope: !962)
!983 = !DILocation(line: 342, column: 11, scope: !984, inlinedAt: !985)
!984 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!985 = !DILocation(line: 11, column: 16, scope: !979, inlinedAt: !982)
!986 = !DILocation(line: 11, column: 2, scope: !979, inlinedAt: !982)
!987 = !DILocation(line: 212, column: 20, scope: !988, inlinedAt: !989)
!988 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!989 = !DILocation(line: 93, column: 10, scope: !962)
!990 = !DILocation(line: 212, column: 12, scope: !988, inlinedAt: !989)
!991 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws32Random.next_int", scope: !34, file: !34, line: 97, type: !992, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!992 = !DISubroutineType(types: !993)
!993 = !{!20, !965}
!994 = !DILocation(line: 98, column: 1, scope: !991)
!995 = !DILocalVariable(name: "self", arg: 1, scope: !991, file: !34, line: 97, type: !965)
!996 = !DILocation(line: 97, column: 31, scope: !991)
!997 = !DILocalVariable(name: "s0", scope: !991, file: !34, line: 99, type: !20, align: 4)
!998 = !DILocation(line: 99, column: 7, scope: !991)
!999 = !DILocation(line: 99, column: 12, scope: !991)
!1000 = !DILocation(line: 100, column: 2, scope: !991)
!1001 = !DILocation(line: 100, column: 16, scope: !991)
!1002 = !DILocation(line: 100, column: 30, scope: !991)
!1003 = !DILocation(line: 100, column: 44, scope: !991)
!1004 = !DILocation(line: 101, column: 2, scope: !991)
!1005 = !DILocation(line: 101, column: 16, scope: !991)
!1006 = !DILocation(line: 99, column: 50, scope: !1007, inlinedAt: !1005)
!1007 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1008 = !DILocation(line: 99, column: 56, scope: !1007, inlinedAt: !1005)
!1009 = !DILocation(line: 99, column: 62, scope: !1007, inlinedAt: !1005)
!1010 = !DILocation(line: 102, column: 2, scope: !991)
!1011 = !DILocation(line: 104, column: 2, scope: !991)
!1012 = !DILocation(line: 104, column: 16, scope: !991)
!1013 = !DILocation(line: 104, column: 30, scope: !991)
!1014 = !DILocation(line: 104, column: 44, scope: !991)
!1015 = !DILocalVariable(name: "s1", scope: !991, file: !34, line: 105, type: !20, align: 4)
!1016 = !DILocation(line: 105, column: 7, scope: !991)
!1017 = !DILocation(line: 105, column: 12, scope: !991)
!1018 = !DILocation(line: 106, column: 2, scope: !991)
!1019 = !DILocation(line: 106, column: 16, scope: !991)
!1020 = !DILocation(line: 99, column: 50, scope: !1021, inlinedAt: !1019)
!1021 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1022 = !DILocation(line: 99, column: 56, scope: !1021, inlinedAt: !1019)
!1023 = !DILocation(line: 99, column: 62, scope: !1021, inlinedAt: !1019)
!1024 = !DILocation(line: 107, column: 2, scope: !991)
!1025 = !DILocation(line: 109, column: 9, scope: !991)
!1026 = !DILocation(line: 109, column: 14, scope: !991)
!1027 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws32Random.next_bytes", scope: !34, file: !34, line: 115, type: !963, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1028 = !DILocation(line: 115, column: 66, scope: !1027)
!1029 = !DILocalVariable(name: "self", arg: 1, scope: !1027, file: !34, line: 115, type: !965)
!1030 = !DILocation(line: 115, column: 33, scope: !1027)
!1031 = !DILocalVariable(name: "bytes", arg: 2, scope: !1027, file: !34, line: 115, type: !260)
!1032 = !DILocation(line: 115, column: 47, scope: !1027)
!1033 = !DILocation(line: 113, column: 11, scope: !1034)
!1034 = distinct !DILexicalBlock(scope: !1027, file: !34, line: 115, column: 66)
!1035 = !DILocalVariable(name: "len", scope: !1036, file: !34, line: 146, type: !265, align: 8)
!1036 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1037 = !DILocation(line: 146, column: 6, scope: !1036, inlinedAt: !1028)
!1038 = !DILocation(line: 146, column: 12, scope: !1036, inlinedAt: !1028)
!1039 = !DILocation(line: 148, column: 2, scope: !1036, inlinedAt: !1028)
!1040 = !DILocation(line: 148, column: 9, scope: !1041, inlinedAt: !1028)
!1041 = distinct !DILexicalBlock(scope: !1036, file: !2, line: 148, column: 2)
!1042 = !DILocalVariable(name: "value", scope: !1043, file: !34, line: 150, type: !20, align: 4)
!1043 = distinct !DILexicalBlock(scope: !1041, file: !2, line: 149, column: 2)
!1044 = !DILocation(line: 150, column: 7, scope: !1043, inlinedAt: !1028)
!1045 = !DILocation(line: 115, column: 89, scope: !1043, inlinedAt: !1028)
!1046 = !DILocation(line: 150, column: 15, scope: !1043, inlinedAt: !1028)
!1047 = !DILocation(line: 151, column: 7, scope: !1043, inlinedAt: !1028)
!1048 = !DILocation(line: 153, column: 33, scope: !1049, inlinedAt: !1028)
!1049 = distinct !DILexicalBlock(scope: !1043, file: !2, line: 152, column: 3)
!1050 = !DILocation(line: 153, column: 4, scope: !1049, inlinedAt: !1028)
!1051 = !DILocation(line: 153, column: 10, scope: !1049, inlinedAt: !1028)
!1052 = !DILocation(line: 154, column: 10, scope: !1049, inlinedAt: !1028)
!1053 = !DILocation(line: 156, column: 3, scope: !1043, inlinedAt: !1028)
!1054 = !DILocation(line: 157, column: 3, scope: !1043, inlinedAt: !1028)
!1055 = !DILocation(line: 158, column: 11, scope: !1043, inlinedAt: !1028)
!1056 = !DILocation(line: 158, column: 17, scope: !1043, inlinedAt: !1028)
!1057 = !DILocation(line: 164, column: 33, scope: !1058, inlinedAt: !1059)
!1058 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1059 = !DILocation(line: 160, column: 2, scope: !1036, inlinedAt: !1028)
!1060 = !DILocation(line: 164, column: 2, scope: !1058, inlinedAt: !1059)
!1061 = !DILocation(line: 166, column: 2, scope: !1058, inlinedAt: !1059)
!1062 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws32Random.next_int128", scope: !34, file: !34, line: 116, type: !1063, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!15, !965}
!1065 = !DILocation(line: 116, column: 56, scope: !1062)
!1066 = !DILocalVariable(name: "self", arg: 1, scope: !1062, file: !34, line: 116, type: !965)
!1067 = !DILocation(line: 116, column: 37, scope: !1062)
!1068 = !DILocation(line: 116, column: 72, scope: !1069, inlinedAt: !1065)
!1069 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1070 = !DILocation(line: 138, column: 46, scope: !1069, inlinedAt: !1065)
!1071 = !DILocation(line: 138, column: 72, scope: !1069, inlinedAt: !1065)
!1072 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws32Random.next_long", scope: !34, file: !34, line: 117, type: !1073, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1073 = !DISubroutineType(types: !1074)
!1074 = !{!6, !965}
!1075 = !DILocation(line: 117, column: 52, scope: !1072)
!1076 = !DILocalVariable(name: "self", arg: 1, scope: !1072, file: !34, line: 117, type: !965)
!1077 = !DILocation(line: 117, column: 33, scope: !1072)
!1078 = !DILocation(line: 117, column: 65, scope: !1079, inlinedAt: !1075)
!1079 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1080 = !DILocation(line: 139, column: 41, scope: !1079, inlinedAt: !1075)
!1081 = !DILocation(line: 139, column: 65, scope: !1079, inlinedAt: !1075)
!1082 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws32Random.next_short", scope: !34, file: !34, line: 118, type: !1083, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1083 = !DISubroutineType(types: !1084)
!1084 = !{!23, !965}
!1085 = !DILocation(line: 118, column: 54, scope: !1082)
!1086 = !DILocalVariable(name: "self", arg: 1, scope: !1082, file: !34, line: 118, type: !965)
!1087 = !DILocation(line: 118, column: 35, scope: !1082)
!1088 = !DILocation(line: 118, column: 62, scope: !1082)
!1089 = !DILocation(line: 118, column: 55, scope: !1082)
!1090 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws32Random.next_byte", scope: !34, file: !34, line: 119, type: !1091, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!43, !965}
!1093 = !DILocation(line: 119, column: 51, scope: !1090)
!1094 = !DILocalVariable(name: "self", arg: 1, scope: !1090, file: !34, line: 119, type: !965)
!1095 = !DILocation(line: 119, column: 32, scope: !1090)
!1096 = !DILocation(line: 119, column: 57, scope: !1090)
!1097 = !DILocation(line: 119, column: 52, scope: !1090)
!1098 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws16Random.set_seed", scope: !34, file: !34, line: 129, type: !1099, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{null, !1101, !260}
!1101 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws16Random*", baseType: !1102, size: 64, align: 64, dwarfAddressSpace: 0)
!1102 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws16Random", scope: !34, file: !34, line: 123, size: 64, align: 16, elements: !1103, identifier: "std.math.random.Msws16Random")
!1103 = !{!1104, !1105, !1106, !1107}
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1102, file: !34, line: 125, baseType: !23, size: 16, align: 16)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1102, file: !34, line: 125, baseType: !23, size: 16, align: 16, offset: 16)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1102, file: !34, line: 126, baseType: !23, size: 16, align: 16, offset: 32)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1102, file: !34, line: 126, baseType: !23, size: 16, align: 16, offset: 48)
!1108 = !DILocation(line: 130, column: 1, scope: !1098)
!1109 = !DILocalVariable(name: "self", arg: 1, scope: !1098, file: !34, line: 129, type: !1101)
!1110 = !DILocation(line: 129, column: 32, scope: !1098)
!1111 = !DILocalVariable(name: "input", arg: 2, scope: !1098, file: !34, line: 129, type: !260)
!1112 = !DILocation(line: 129, column: 46, scope: !1098)
!1113 = !DILocation(line: 131, column: 3, scope: !1098)
!1114 = !DILocalVariable(name: "return_value", scope: !1115, file: !34, line: 10, type: !1116, align: 2)
!1115 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1116 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 64, align: 16, elements: !7)
!1117 = !DILocation(line: 10, column: 8, scope: !1115, inlinedAt: !1118)
!1118 = !DILocation(line: 131, column: 26, scope: !1098)
!1119 = !DILocation(line: 342, column: 11, scope: !1120, inlinedAt: !1121)
!1120 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1121 = !DILocation(line: 11, column: 16, scope: !1115, inlinedAt: !1118)
!1122 = !DILocation(line: 11, column: 2, scope: !1115, inlinedAt: !1118)
!1123 = !DILocation(line: 212, column: 20, scope: !1124, inlinedAt: !1125)
!1124 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1125 = !DILocation(line: 131, column: 10, scope: !1098)
!1126 = !DILocation(line: 212, column: 12, scope: !1124, inlinedAt: !1125)
!1127 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws16Random.next_short", scope: !34, file: !34, line: 135, type: !1128, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1128 = !DISubroutineType(types: !1129)
!1129 = !{!23, !1101}
!1130 = !DILocation(line: 136, column: 1, scope: !1127)
!1131 = !DILocalVariable(name: "self", arg: 1, scope: !1127, file: !34, line: 135, type: !1101)
!1132 = !DILocation(line: 135, column: 35, scope: !1127)
!1133 = !DILocalVariable(name: "s0", scope: !1127, file: !34, line: 137, type: !23, align: 2)
!1134 = !DILocation(line: 137, column: 9, scope: !1127)
!1135 = !DILocation(line: 137, column: 14, scope: !1127)
!1136 = !DILocation(line: 138, column: 2, scope: !1127)
!1137 = !DILocation(line: 138, column: 16, scope: !1127)
!1138 = !DILocation(line: 138, column: 30, scope: !1127)
!1139 = !DILocation(line: 138, column: 44, scope: !1127)
!1140 = !DILocation(line: 139, column: 2, scope: !1127)
!1141 = !DILocation(line: 139, column: 16, scope: !1127)
!1142 = !DILocation(line: 115, column: 56, scope: !1143, inlinedAt: !1141)
!1143 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1144 = !DILocation(line: 115, column: 62, scope: !1143, inlinedAt: !1141)
!1145 = !DILocation(line: 115, column: 68, scope: !1143, inlinedAt: !1141)
!1146 = !DILocation(line: 140, column: 2, scope: !1127)
!1147 = !DILocation(line: 142, column: 2, scope: !1127)
!1148 = !DILocation(line: 142, column: 16, scope: !1127)
!1149 = !DILocation(line: 142, column: 30, scope: !1127)
!1150 = !DILocation(line: 142, column: 44, scope: !1127)
!1151 = !DILocalVariable(name: "s1", scope: !1127, file: !34, line: 143, type: !23, align: 2)
!1152 = !DILocation(line: 143, column: 9, scope: !1127)
!1153 = !DILocation(line: 143, column: 14, scope: !1127)
!1154 = !DILocation(line: 144, column: 2, scope: !1127)
!1155 = !DILocation(line: 144, column: 16, scope: !1127)
!1156 = !DILocation(line: 115, column: 56, scope: !1157, inlinedAt: !1155)
!1157 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1158 = !DILocation(line: 115, column: 62, scope: !1157, inlinedAt: !1155)
!1159 = !DILocation(line: 115, column: 68, scope: !1157, inlinedAt: !1155)
!1160 = !DILocation(line: 145, column: 2, scope: !1127)
!1161 = !DILocation(line: 147, column: 9, scope: !1127)
!1162 = !DILocation(line: 147, column: 14, scope: !1127)
!1163 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws16Random.next_bytes", scope: !34, file: !34, line: 153, type: !1099, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1164 = !DILocation(line: 153, column: 66, scope: !1163)
!1165 = !DILocalVariable(name: "self", arg: 1, scope: !1163, file: !34, line: 153, type: !1101)
!1166 = !DILocation(line: 153, column: 33, scope: !1163)
!1167 = !DILocalVariable(name: "bytes", arg: 2, scope: !1163, file: !34, line: 153, type: !260)
!1168 = !DILocation(line: 153, column: 47, scope: !1163)
!1169 = !DILocation(line: 151, column: 11, scope: !1170)
!1170 = distinct !DILexicalBlock(scope: !1163, file: !34, line: 153, column: 66)
!1171 = !DILocalVariable(name: "len", scope: !1172, file: !34, line: 146, type: !265, align: 8)
!1172 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1173 = !DILocation(line: 146, column: 6, scope: !1172, inlinedAt: !1164)
!1174 = !DILocation(line: 146, column: 12, scope: !1172, inlinedAt: !1164)
!1175 = !DILocation(line: 148, column: 2, scope: !1172, inlinedAt: !1164)
!1176 = !DILocation(line: 148, column: 9, scope: !1177, inlinedAt: !1164)
!1177 = distinct !DILexicalBlock(scope: !1172, file: !2, line: 148, column: 2)
!1178 = !DILocalVariable(name: "value", scope: !1179, file: !34, line: 150, type: !23, align: 2)
!1179 = distinct !DILexicalBlock(scope: !1177, file: !2, line: 149, column: 2)
!1180 = !DILocation(line: 150, column: 7, scope: !1179, inlinedAt: !1164)
!1181 = !DILocation(line: 153, column: 89, scope: !1179, inlinedAt: !1164)
!1182 = !DILocation(line: 150, column: 15, scope: !1179, inlinedAt: !1164)
!1183 = !DILocation(line: 151, column: 7, scope: !1179, inlinedAt: !1164)
!1184 = !DILocation(line: 153, column: 33, scope: !1185, inlinedAt: !1164)
!1185 = distinct !DILexicalBlock(scope: !1179, file: !2, line: 152, column: 3)
!1186 = !DILocation(line: 153, column: 4, scope: !1185, inlinedAt: !1164)
!1187 = !DILocation(line: 153, column: 10, scope: !1185, inlinedAt: !1164)
!1188 = !DILocation(line: 154, column: 10, scope: !1185, inlinedAt: !1164)
!1189 = !DILocation(line: 156, column: 3, scope: !1179, inlinedAt: !1164)
!1190 = !DILocation(line: 157, column: 3, scope: !1179, inlinedAt: !1164)
!1191 = !DILocation(line: 158, column: 11, scope: !1179, inlinedAt: !1164)
!1192 = !DILocation(line: 158, column: 17, scope: !1179, inlinedAt: !1164)
!1193 = !DILocation(line: 164, column: 33, scope: !1194, inlinedAt: !1195)
!1194 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1195 = !DILocation(line: 160, column: 2, scope: !1172, inlinedAt: !1164)
!1196 = !DILocation(line: 164, column: 2, scope: !1194, inlinedAt: !1195)
!1197 = !DILocation(line: 166, column: 2, scope: !1194, inlinedAt: !1195)
!1198 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws16Random.next_int128", scope: !34, file: !34, line: 154, type: !1199, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1199 = !DISubroutineType(types: !1200)
!1200 = !{!15, !1101}
!1201 = !DILocation(line: 154, column: 56, scope: !1198)
!1202 = !DILocalVariable(name: "self", arg: 1, scope: !1198, file: !34, line: 154, type: !1101)
!1203 = !DILocation(line: 154, column: 37, scope: !1198)
!1204 = !DILocation(line: 154, column: 72, scope: !1205, inlinedAt: !1201)
!1205 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1206 = !DILocation(line: 138, column: 46, scope: !1205, inlinedAt: !1201)
!1207 = !DILocation(line: 138, column: 72, scope: !1205, inlinedAt: !1201)
!1208 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws16Random.next_long", scope: !34, file: !34, line: 155, type: !1209, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1209 = !DISubroutineType(types: !1210)
!1210 = !{!6, !1101}
!1211 = !DILocation(line: 155, column: 52, scope: !1208)
!1212 = !DILocalVariable(name: "self", arg: 1, scope: !1208, file: !34, line: 155, type: !1101)
!1213 = !DILocation(line: 155, column: 33, scope: !1208)
!1214 = !DILocation(line: 155, column: 65, scope: !1215, inlinedAt: !1211)
!1215 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1216 = !DILocation(line: 139, column: 41, scope: !1215, inlinedAt: !1211)
!1217 = !DILocation(line: 139, column: 65, scope: !1215, inlinedAt: !1211)
!1218 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws16Random.next_int", scope: !34, file: !34, line: 156, type: !1219, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1219 = !DISubroutineType(types: !1220)
!1220 = !{!20, !1101}
!1221 = !DILocation(line: 156, column: 50, scope: !1218)
!1222 = !DILocalVariable(name: "self", arg: 1, scope: !1218, file: !34, line: 156, type: !1101)
!1223 = !DILocation(line: 156, column: 31, scope: !1218)
!1224 = !DILocation(line: 156, column: 64, scope: !1225, inlinedAt: !1221)
!1225 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1226 = !DILocation(line: 140, column: 41, scope: !1225, inlinedAt: !1221)
!1227 = !DILocation(line: 140, column: 64, scope: !1225, inlinedAt: !1221)
!1228 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws16Random.next_byte", scope: !34, file: !34, line: 157, type: !1229, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1229 = !DISubroutineType(types: !1230)
!1230 = !{!43, !1101}
!1231 = !DILocation(line: 157, column: 51, scope: !1228)
!1232 = !DILocalVariable(name: "self", arg: 1, scope: !1228, file: !34, line: 157, type: !1101)
!1233 = !DILocation(line: 157, column: 32, scope: !1228)
!1234 = !DILocation(line: 157, column: 57, scope: !1228)
!1235 = !DILocation(line: 157, column: 52, scope: !1228)
!1236 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws8Random.set_seed", scope: !34, file: !34, line: 166, type: !1237, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1237 = !DISubroutineType(types: !1238)
!1238 = !{null, !1239, !260}
!1239 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws8Random*", baseType: !1240, size: 64, align: 64, dwarfAddressSpace: 0)
!1240 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws8Random", scope: !34, file: !34, line: 160, size: 32, align: 8, elements: !1241, identifier: "std.math.random.Msws8Random")
!1241 = !{!1242, !1243, !1244, !1245}
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1240, file: !34, line: 162, baseType: !43, size: 8, align: 8)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1240, file: !34, line: 162, baseType: !43, size: 8, align: 8, offset: 8)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1240, file: !34, line: 163, baseType: !43, size: 8, align: 8, offset: 16)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1240, file: !34, line: 163, baseType: !43, size: 8, align: 8, offset: 24)
!1246 = !DILocation(line: 167, column: 1, scope: !1236)
!1247 = !DILocalVariable(name: "self", arg: 1, scope: !1236, file: !34, line: 166, type: !1239)
!1248 = !DILocation(line: 166, column: 31, scope: !1236)
!1249 = !DILocalVariable(name: "input", arg: 2, scope: !1236, file: !34, line: 166, type: !260)
!1250 = !DILocation(line: 166, column: 45, scope: !1236)
!1251 = !DILocation(line: 168, column: 3, scope: !1236)
!1252 = !DILocalVariable(name: "return_value", scope: !1253, file: !34, line: 10, type: !1254, align: 1)
!1253 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1254 = !DICompositeType(tag: DW_TAG_array_type, baseType: !43, size: 32, align: 8, elements: !7)
!1255 = !DILocation(line: 10, column: 8, scope: !1253, inlinedAt: !1256)
!1256 = !DILocation(line: 168, column: 26, scope: !1236)
!1257 = !DILocation(line: 342, column: 11, scope: !1258, inlinedAt: !1259)
!1258 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1259 = !DILocation(line: 11, column: 16, scope: !1253, inlinedAt: !1256)
!1260 = !DILocation(line: 11, column: 2, scope: !1253, inlinedAt: !1256)
!1261 = !DILocation(line: 212, column: 20, scope: !1262, inlinedAt: !1263)
!1262 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1263 = !DILocation(line: 168, column: 10, scope: !1236)
!1264 = !DILocation(line: 212, column: 12, scope: !1262, inlinedAt: !1263)
!1265 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws8Random.next_byte", scope: !34, file: !34, line: 171, type: !1266, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1266 = !DISubroutineType(types: !1267)
!1267 = !{!43, !1239}
!1268 = !DILocation(line: 172, column: 1, scope: !1265)
!1269 = !DILocalVariable(name: "self", arg: 1, scope: !1265, file: !34, line: 171, type: !1239)
!1270 = !DILocation(line: 171, column: 31, scope: !1265)
!1271 = !DILocalVariable(name: "s0", scope: !1265, file: !34, line: 173, type: !43, align: 1)
!1272 = !DILocation(line: 173, column: 7, scope: !1265)
!1273 = !DILocation(line: 173, column: 12, scope: !1265)
!1274 = !DILocation(line: 174, column: 2, scope: !1265)
!1275 = !DILocation(line: 174, column: 16, scope: !1265)
!1276 = !DILocation(line: 174, column: 30, scope: !1265)
!1277 = !DILocation(line: 174, column: 44, scope: !1265)
!1278 = !DILocation(line: 175, column: 2, scope: !1265)
!1279 = !DILocation(line: 175, column: 16, scope: !1265)
!1280 = !DILocation(line: 131, column: 50, scope: !1281, inlinedAt: !1279)
!1281 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1282 = !DILocation(line: 131, column: 56, scope: !1281, inlinedAt: !1279)
!1283 = !DILocation(line: 131, column: 62, scope: !1281, inlinedAt: !1279)
!1284 = !DILocation(line: 176, column: 2, scope: !1265)
!1285 = !DILocation(line: 178, column: 2, scope: !1265)
!1286 = !DILocation(line: 178, column: 16, scope: !1265)
!1287 = !DILocation(line: 178, column: 30, scope: !1265)
!1288 = !DILocation(line: 178, column: 44, scope: !1265)
!1289 = !DILocalVariable(name: "s1", scope: !1265, file: !34, line: 179, type: !43, align: 1)
!1290 = !DILocation(line: 179, column: 7, scope: !1265)
!1291 = !DILocation(line: 179, column: 12, scope: !1265)
!1292 = !DILocation(line: 180, column: 2, scope: !1265)
!1293 = !DILocation(line: 180, column: 16, scope: !1265)
!1294 = !DILocation(line: 131, column: 50, scope: !1295, inlinedAt: !1293)
!1295 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1296 = !DILocation(line: 131, column: 56, scope: !1295, inlinedAt: !1293)
!1297 = !DILocation(line: 131, column: 62, scope: !1295, inlinedAt: !1293)
!1298 = !DILocation(line: 181, column: 2, scope: !1265)
!1299 = !DILocation(line: 183, column: 9, scope: !1265)
!1300 = !DILocation(line: 183, column: 14, scope: !1265)
!1301 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws8Random.next_bytes", scope: !34, file: !34, line: 186, type: !1237, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1302 = !DILocation(line: 186, column: 65, scope: !1301)
!1303 = !DILocalVariable(name: "self", arg: 1, scope: !1301, file: !34, line: 186, type: !1239)
!1304 = !DILocation(line: 186, column: 32, scope: !1301)
!1305 = !DILocalVariable(name: "bytes", arg: 2, scope: !1301, file: !34, line: 186, type: !260)
!1306 = !DILocation(line: 186, column: 46, scope: !1301)
!1307 = !DILocalVariable(name: "len", scope: !1308, file: !34, line: 146, type: !265, align: 8)
!1308 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1309 = !DILocation(line: 146, column: 6, scope: !1308, inlinedAt: !1302)
!1310 = !DILocation(line: 146, column: 12, scope: !1308, inlinedAt: !1302)
!1311 = !DILocation(line: 148, column: 2, scope: !1308, inlinedAt: !1302)
!1312 = !DILocation(line: 148, column: 9, scope: !1313, inlinedAt: !1302)
!1313 = distinct !DILexicalBlock(scope: !1308, file: !2, line: 148, column: 2)
!1314 = !DILocalVariable(name: "value", scope: !1315, file: !34, line: 150, type: !43, align: 1)
!1315 = distinct !DILexicalBlock(scope: !1313, file: !2, line: 149, column: 2)
!1316 = !DILocation(line: 150, column: 7, scope: !1315, inlinedAt: !1302)
!1317 = !DILocation(line: 186, column: 88, scope: !1315, inlinedAt: !1302)
!1318 = !DILocation(line: 150, column: 15, scope: !1315, inlinedAt: !1302)
!1319 = !DILocation(line: 151, column: 7, scope: !1315, inlinedAt: !1302)
!1320 = !DILocation(line: 153, column: 33, scope: !1321, inlinedAt: !1302)
!1321 = distinct !DILexicalBlock(scope: !1315, file: !2, line: 152, column: 3)
!1322 = !DILocation(line: 153, column: 4, scope: !1321, inlinedAt: !1302)
!1323 = !DILocation(line: 153, column: 10, scope: !1321, inlinedAt: !1302)
!1324 = !DILocation(line: 154, column: 10, scope: !1321, inlinedAt: !1302)
!1325 = !DILocation(line: 156, column: 3, scope: !1315, inlinedAt: !1302)
!1326 = !DILocation(line: 157, column: 3, scope: !1315, inlinedAt: !1302)
!1327 = !DILocation(line: 158, column: 11, scope: !1315, inlinedAt: !1302)
!1328 = !DILocation(line: 158, column: 17, scope: !1315, inlinedAt: !1302)
!1329 = !DILocation(line: 164, column: 33, scope: !1330, inlinedAt: !1331)
!1330 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1331 = !DILocation(line: 160, column: 2, scope: !1308, inlinedAt: !1302)
!1332 = !DILocation(line: 164, column: 2, scope: !1330, inlinedAt: !1331)
!1333 = !DILocation(line: 166, column: 2, scope: !1330, inlinedAt: !1331)
!1334 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws8Random.next_int128", scope: !34, file: !34, line: 187, type: !1335, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1335 = !DISubroutineType(types: !1336)
!1336 = !{!15, !1239}
!1337 = !DILocation(line: 187, column: 55, scope: !1334)
!1338 = !DILocalVariable(name: "self", arg: 1, scope: !1334, file: !34, line: 187, type: !1239)
!1339 = !DILocation(line: 187, column: 36, scope: !1334)
!1340 = !DILocation(line: 187, column: 71, scope: !1341, inlinedAt: !1337)
!1341 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1342 = !DILocation(line: 138, column: 46, scope: !1341, inlinedAt: !1337)
!1343 = !DILocation(line: 138, column: 72, scope: !1341, inlinedAt: !1337)
!1344 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws8Random.next_long", scope: !34, file: !34, line: 188, type: !1345, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1345 = !DISubroutineType(types: !1346)
!1346 = !{!6, !1239}
!1347 = !DILocation(line: 188, column: 51, scope: !1344)
!1348 = !DILocalVariable(name: "self", arg: 1, scope: !1344, file: !34, line: 188, type: !1239)
!1349 = !DILocation(line: 188, column: 32, scope: !1344)
!1350 = !DILocation(line: 188, column: 64, scope: !1351, inlinedAt: !1347)
!1351 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1352 = !DILocation(line: 139, column: 41, scope: !1351, inlinedAt: !1347)
!1353 = !DILocation(line: 139, column: 65, scope: !1351, inlinedAt: !1347)
!1354 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws8Random.next_int", scope: !34, file: !34, line: 189, type: !1355, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1355 = !DISubroutineType(types: !1356)
!1356 = !{!20, !1239}
!1357 = !DILocation(line: 189, column: 49, scope: !1354)
!1358 = !DILocalVariable(name: "self", arg: 1, scope: !1354, file: !34, line: 189, type: !1239)
!1359 = !DILocation(line: 189, column: 30, scope: !1354)
!1360 = !DILocation(line: 189, column: 63, scope: !1361, inlinedAt: !1357)
!1361 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1362 = !DILocation(line: 140, column: 41, scope: !1361, inlinedAt: !1357)
!1363 = !DILocation(line: 140, column: 64, scope: !1361, inlinedAt: !1357)
!1364 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws8Random.next_short", scope: !34, file: !34, line: 190, type: !1365, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1365 = !DISubroutineType(types: !1366)
!1366 = !{!23, !1239}
!1367 = !DILocation(line: 190, column: 53, scope: !1364)
!1368 = !DILocalVariable(name: "self", arg: 1, scope: !1364, file: !34, line: 190, type: !1239)
!1369 = !DILocation(line: 190, column: 34, scope: !1364)
!1370 = !DILocation(line: 190, column: 68, scope: !1371, inlinedAt: !1367)
!1371 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1372 = !DILocation(line: 141, column: 44, scope: !1371, inlinedAt: !1367)
!1373 = !DILocation(line: 141, column: 68, scope: !1371, inlinedAt: !1367)
!1374 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc128Random.set_seed", scope: !4, file: !4, line: 15, type: !1375, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1375 = !DISubroutineType(types: !1376)
!1376 = !{null, !1377, !260}
!1377 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc128Random*", baseType: !1378, size: 64, align: 64, dwarfAddressSpace: 0)
!1378 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc128Random", scope: !4, file: !4, line: 13, baseType: !715, align: 8)
!1379 = !DILocation(line: 16, column: 1, scope: !1374)
!1380 = !DILocalVariable(name: "self", arg: 1, scope: !1374, file: !4, line: 15, type: !1377)
!1381 = !DILocation(line: 15, column: 32, scope: !1374)
!1382 = !DILocalVariable(name: "input", arg: 2, scope: !1374, file: !4, line: 15, type: !260)
!1383 = !DILocation(line: 15, column: 46, scope: !1374)
!1384 = !DILocation(line: 17, column: 3, scope: !1374)
!1385 = !DILocalVariable(name: "return_value", scope: !1386, file: !4, line: 10, type: !715, align: 16)
!1386 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1387 = !DILocation(line: 10, column: 8, scope: !1386, inlinedAt: !1388)
!1388 = !DILocation(line: 17, column: 11, scope: !1374)
!1389 = !DILocation(line: 342, column: 11, scope: !1390, inlinedAt: !1391)
!1390 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1391 = !DILocation(line: 11, column: 16, scope: !1386, inlinedAt: !1388)
!1392 = !DILocation(line: 11, column: 2, scope: !1386, inlinedAt: !1388)
!1393 = !DILocation(line: 12, column: 9, scope: !1386, inlinedAt: !1388)
!1394 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc128Random.next_int128", scope: !4, file: !4, line: 20, type: !1395, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1395 = !DISubroutineType(types: !1396)
!1396 = !{!15, !1377}
!1397 = !DILocation(line: 21, column: 1, scope: !1394)
!1398 = !DILocalVariable(name: "self", arg: 1, scope: !1394, file: !4, line: 20, type: !1377)
!1399 = !DILocation(line: 20, column: 37, scope: !1394)
!1400 = !DILocalVariable(name: "s", scope: !1394, file: !4, line: 22, type: !288, align: 8)
!1401 = !DILocation(line: 22, column: 11, scope: !1394)
!1402 = !DILocation(line: 22, column: 16, scope: !1394)
!1403 = !DILocalVariable(name: "result", scope: !1394, file: !4, line: 23, type: !15, align: 8)
!1404 = !DILocation(line: 23, column: 10, scope: !1394)
!1405 = !DILocation(line: 23, column: 19, scope: !1394)
!1406 = !DILocation(line: 23, column: 21, scope: !1394)
!1407 = !DILocation(line: 23, column: 26, scope: !1394)
!1408 = !DILocation(line: 23, column: 28, scope: !1394)
!1409 = !DILocation(line: 23, column: 33, scope: !1394)
!1410 = !DILocation(line: 23, column: 35, scope: !1394)
!1411 = !DILocation(line: 24, column: 2, scope: !1394)
!1412 = !DILocation(line: 24, column: 9, scope: !1394)
!1413 = !DILocation(line: 24, column: 11, scope: !1394)
!1414 = !DILocation(line: 24, column: 16, scope: !1394)
!1415 = !DILocation(line: 24, column: 18, scope: !1394)
!1416 = !DILocation(line: 25, column: 2, scope: !1394)
!1417 = !DILocation(line: 25, column: 4, scope: !1394)
!1418 = !DILocation(line: 25, column: 9, scope: !1394)
!1419 = !DILocation(line: 25, column: 11, scope: !1394)
!1420 = !DILocation(line: 25, column: 16, scope: !1394)
!1421 = !DILocation(line: 25, column: 18, scope: !1394)
!1422 = !DILocation(line: 26, column: 2, scope: !1394)
!1423 = !DILocation(line: 26, column: 4, scope: !1394)
!1424 = !DILocation(line: 26, column: 9, scope: !1394)
!1425 = !DILocation(line: 26, column: 11, scope: !1394)
!1426 = !DILocation(line: 163, column: 59, scope: !1427, inlinedAt: !1424)
!1427 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1428 = !DILocation(line: 163, column: 65, scope: !1427, inlinedAt: !1424)
!1429 = !DILocation(line: 163, column: 71, scope: !1427, inlinedAt: !1424)
!1430 = !DILocation(line: 26, column: 25, scope: !1394)
!1431 = !DILocation(line: 27, column: 2, scope: !1394)
!1432 = !DILocation(line: 27, column: 4, scope: !1394)
!1433 = !DILocation(line: 28, column: 9, scope: !1394)
!1434 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc128Random.next_bytes", scope: !4, file: !4, line: 34, type: !1375, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1435 = !DILocation(line: 34, column: 66, scope: !1434)
!1436 = !DILocalVariable(name: "self", arg: 1, scope: !1434, file: !4, line: 34, type: !1377)
!1437 = !DILocation(line: 34, column: 33, scope: !1434)
!1438 = !DILocalVariable(name: "bytes", arg: 2, scope: !1434, file: !4, line: 34, type: !260)
!1439 = !DILocation(line: 34, column: 47, scope: !1434)
!1440 = !DILocation(line: 32, column: 11, scope: !1441)
!1441 = distinct !DILexicalBlock(scope: !1434, file: !4, line: 34, column: 66)
!1442 = !DILocalVariable(name: "len", scope: !1443, file: !4, line: 146, type: !265, align: 8)
!1443 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1444 = !DILocation(line: 146, column: 6, scope: !1443, inlinedAt: !1435)
!1445 = !DILocation(line: 146, column: 12, scope: !1443, inlinedAt: !1435)
!1446 = !DILocation(line: 148, column: 2, scope: !1443, inlinedAt: !1435)
!1447 = !DILocation(line: 148, column: 9, scope: !1448, inlinedAt: !1435)
!1448 = distinct !DILexicalBlock(scope: !1443, file: !2, line: 148, column: 2)
!1449 = !DILocalVariable(name: "value", scope: !1450, file: !4, line: 150, type: !15, align: 8)
!1450 = distinct !DILexicalBlock(scope: !1448, file: !2, line: 149, column: 2)
!1451 = !DILocation(line: 150, column: 7, scope: !1450, inlinedAt: !1435)
!1452 = !DILocation(line: 34, column: 89, scope: !1450, inlinedAt: !1435)
!1453 = !DILocation(line: 150, column: 15, scope: !1450, inlinedAt: !1435)
!1454 = !DILocation(line: 151, column: 7, scope: !1450, inlinedAt: !1435)
!1455 = !DILocation(line: 153, column: 33, scope: !1456, inlinedAt: !1435)
!1456 = distinct !DILexicalBlock(scope: !1450, file: !2, line: 152, column: 3)
!1457 = !DILocation(line: 153, column: 4, scope: !1456, inlinedAt: !1435)
!1458 = !DILocation(line: 153, column: 10, scope: !1456, inlinedAt: !1435)
!1459 = !DILocation(line: 154, column: 10, scope: !1456, inlinedAt: !1435)
!1460 = !DILocation(line: 156, column: 3, scope: !1450, inlinedAt: !1435)
!1461 = !DILocation(line: 157, column: 3, scope: !1450, inlinedAt: !1435)
!1462 = !DILocation(line: 158, column: 11, scope: !1450, inlinedAt: !1435)
!1463 = !DILocation(line: 158, column: 17, scope: !1450, inlinedAt: !1435)
!1464 = !DILocation(line: 164, column: 33, scope: !1465, inlinedAt: !1466)
!1465 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1466 = !DILocation(line: 160, column: 2, scope: !1443, inlinedAt: !1435)
!1467 = !DILocation(line: 164, column: 2, scope: !1465, inlinedAt: !1466)
!1468 = !DILocation(line: 166, column: 2, scope: !1465, inlinedAt: !1466)
!1469 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc128Random.next_long", scope: !4, file: !4, line: 35, type: !1470, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1470 = !DISubroutineType(types: !1471)
!1471 = !{!6, !1377}
!1472 = !DILocation(line: 35, column: 52, scope: !1469)
!1473 = !DILocalVariable(name: "self", arg: 1, scope: !1469, file: !4, line: 35, type: !1377)
!1474 = !DILocation(line: 35, column: 33, scope: !1469)
!1475 = !DILocation(line: 35, column: 58, scope: !1469)
!1476 = !DILocation(line: 35, column: 53, scope: !1469)
!1477 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc128Random.next_int", scope: !4, file: !4, line: 36, type: !1478, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1478 = !DISubroutineType(types: !1479)
!1479 = !{!20, !1377}
!1480 = !DILocation(line: 36, column: 50, scope: !1477)
!1481 = !DILocalVariable(name: "self", arg: 1, scope: !1477, file: !4, line: 36, type: !1377)
!1482 = !DILocation(line: 36, column: 31, scope: !1477)
!1483 = !DILocation(line: 36, column: 56, scope: !1477)
!1484 = !DILocation(line: 36, column: 51, scope: !1477)
!1485 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc128Random.next_short", scope: !4, file: !4, line: 37, type: !1486, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1486 = !DISubroutineType(types: !1487)
!1487 = !{!23, !1377}
!1488 = !DILocation(line: 37, column: 54, scope: !1485)
!1489 = !DILocalVariable(name: "self", arg: 1, scope: !1485, file: !4, line: 37, type: !1377)
!1490 = !DILocation(line: 37, column: 35, scope: !1485)
!1491 = !DILocation(line: 37, column: 62, scope: !1485)
!1492 = !DILocation(line: 37, column: 55, scope: !1485)
!1493 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc128Random.next_byte", scope: !4, file: !4, line: 38, type: !1494, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1494 = !DISubroutineType(types: !1495)
!1495 = !{!43, !1377}
!1496 = !DILocation(line: 38, column: 51, scope: !1493)
!1497 = !DILocalVariable(name: "self", arg: 1, scope: !1493, file: !4, line: 38, type: !1377)
!1498 = !DILocation(line: 38, column: 32, scope: !1493)
!1499 = !DILocation(line: 38, column: 57, scope: !1493)
!1500 = !DILocation(line: 38, column: 52, scope: !1493)
!1501 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc64Random.set_seed", scope: !4, file: !4, line: 45, type: !1502, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1502 = !DISubroutineType(types: !1503)
!1503 = !{null, !1504, !260}
!1504 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc64Random*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1505 = !DILocation(line: 46, column: 1, scope: !1501)
!1506 = !DILocalVariable(name: "self", arg: 1, scope: !1501, file: !4, line: 45, type: !1504)
!1507 = !DILocation(line: 45, column: 31, scope: !1501)
!1508 = !DILocalVariable(name: "input", arg: 2, scope: !1501, file: !4, line: 45, type: !260)
!1509 = !DILocation(line: 45, column: 45, scope: !1501)
!1510 = !DILocation(line: 47, column: 3, scope: !1501)
!1511 = !DILocalVariable(name: "return_value", scope: !1512, file: !4, line: 10, type: !5, align: 16)
!1512 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1513 = !DILocation(line: 10, column: 8, scope: !1512, inlinedAt: !1514)
!1514 = !DILocation(line: 47, column: 11, scope: !1501)
!1515 = !DILocation(line: 342, column: 11, scope: !1516, inlinedAt: !1517)
!1516 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1517 = !DILocation(line: 11, column: 16, scope: !1512, inlinedAt: !1514)
!1518 = !DILocation(line: 11, column: 2, scope: !1512, inlinedAt: !1514)
!1519 = !DILocation(line: 12, column: 9, scope: !1512, inlinedAt: !1514)
!1520 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc64Random.next_long", scope: !4, file: !4, line: 50, type: !1521, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1521 = !DISubroutineType(types: !1522)
!1522 = !{!6, !1504}
!1523 = !DILocation(line: 51, column: 1, scope: !1520)
!1524 = !DILocalVariable(name: "self", arg: 1, scope: !1520, file: !4, line: 50, type: !1504)
!1525 = !DILocation(line: 50, column: 32, scope: !1520)
!1526 = !DILocalVariable(name: "s", scope: !1520, file: !4, line: 52, type: !395, align: 8)
!1527 = !DILocation(line: 52, column: 9, scope: !1520)
!1528 = !DILocation(line: 52, column: 14, scope: !1520)
!1529 = !DILocalVariable(name: "result", scope: !1520, file: !4, line: 53, type: !6, align: 8)
!1530 = !DILocation(line: 53, column: 8, scope: !1520)
!1531 = !DILocation(line: 53, column: 17, scope: !1520)
!1532 = !DILocation(line: 53, column: 19, scope: !1520)
!1533 = !DILocation(line: 53, column: 24, scope: !1520)
!1534 = !DILocation(line: 53, column: 26, scope: !1520)
!1535 = !DILocation(line: 53, column: 31, scope: !1520)
!1536 = !DILocation(line: 53, column: 33, scope: !1520)
!1537 = !DILocation(line: 54, column: 2, scope: !1520)
!1538 = !DILocation(line: 54, column: 9, scope: !1520)
!1539 = !DILocation(line: 54, column: 11, scope: !1520)
!1540 = !DILocation(line: 54, column: 16, scope: !1520)
!1541 = !DILocation(line: 54, column: 18, scope: !1520)
!1542 = !DILocation(line: 55, column: 2, scope: !1520)
!1543 = !DILocation(line: 55, column: 4, scope: !1520)
!1544 = !DILocation(line: 55, column: 9, scope: !1520)
!1545 = !DILocation(line: 55, column: 11, scope: !1520)
!1546 = !DILocation(line: 55, column: 16, scope: !1520)
!1547 = !DILocation(line: 55, column: 18, scope: !1520)
!1548 = !DILocation(line: 56, column: 2, scope: !1520)
!1549 = !DILocation(line: 56, column: 4, scope: !1520)
!1550 = !DILocation(line: 56, column: 9, scope: !1520)
!1551 = !DILocation(line: 56, column: 11, scope: !1520)
!1552 = !DILocation(line: 147, column: 53, scope: !1553, inlinedAt: !1550)
!1553 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1554 = !DILocation(line: 147, column: 59, scope: !1553, inlinedAt: !1550)
!1555 = !DILocation(line: 147, column: 65, scope: !1553, inlinedAt: !1550)
!1556 = !DILocation(line: 56, column: 25, scope: !1520)
!1557 = !DILocation(line: 57, column: 2, scope: !1520)
!1558 = !DILocation(line: 57, column: 4, scope: !1520)
!1559 = !DILocation(line: 58, column: 9, scope: !1520)
!1560 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc64Random.next_bytes", scope: !4, file: !4, line: 64, type: !1502, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1561 = !DILocation(line: 64, column: 65, scope: !1560)
!1562 = !DILocalVariable(name: "self", arg: 1, scope: !1560, file: !4, line: 64, type: !1504)
!1563 = !DILocation(line: 64, column: 32, scope: !1560)
!1564 = !DILocalVariable(name: "bytes", arg: 2, scope: !1560, file: !4, line: 64, type: !260)
!1565 = !DILocation(line: 64, column: 46, scope: !1560)
!1566 = !DILocation(line: 62, column: 11, scope: !1567)
!1567 = distinct !DILexicalBlock(scope: !1560, file: !4, line: 64, column: 65)
!1568 = !DILocalVariable(name: "len", scope: !1569, file: !4, line: 146, type: !265, align: 8)
!1569 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1570 = !DILocation(line: 146, column: 6, scope: !1569, inlinedAt: !1561)
!1571 = !DILocation(line: 146, column: 12, scope: !1569, inlinedAt: !1561)
!1572 = !DILocation(line: 148, column: 2, scope: !1569, inlinedAt: !1561)
!1573 = !DILocation(line: 148, column: 9, scope: !1574, inlinedAt: !1561)
!1574 = distinct !DILexicalBlock(scope: !1569, file: !2, line: 148, column: 2)
!1575 = !DILocalVariable(name: "value", scope: !1576, file: !4, line: 150, type: !6, align: 8)
!1576 = distinct !DILexicalBlock(scope: !1574, file: !2, line: 149, column: 2)
!1577 = !DILocation(line: 150, column: 7, scope: !1576, inlinedAt: !1561)
!1578 = !DILocation(line: 64, column: 88, scope: !1576, inlinedAt: !1561)
!1579 = !DILocation(line: 150, column: 15, scope: !1576, inlinedAt: !1561)
!1580 = !DILocation(line: 151, column: 7, scope: !1576, inlinedAt: !1561)
!1581 = !DILocation(line: 153, column: 33, scope: !1582, inlinedAt: !1561)
!1582 = distinct !DILexicalBlock(scope: !1576, file: !2, line: 152, column: 3)
!1583 = !DILocation(line: 153, column: 4, scope: !1582, inlinedAt: !1561)
!1584 = !DILocation(line: 153, column: 10, scope: !1582, inlinedAt: !1561)
!1585 = !DILocation(line: 154, column: 10, scope: !1582, inlinedAt: !1561)
!1586 = !DILocation(line: 156, column: 3, scope: !1576, inlinedAt: !1561)
!1587 = !DILocation(line: 157, column: 3, scope: !1576, inlinedAt: !1561)
!1588 = !DILocation(line: 158, column: 11, scope: !1576, inlinedAt: !1561)
!1589 = !DILocation(line: 158, column: 17, scope: !1576, inlinedAt: !1561)
!1590 = !DILocation(line: 164, column: 33, scope: !1591, inlinedAt: !1592)
!1591 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1592 = !DILocation(line: 160, column: 2, scope: !1569, inlinedAt: !1561)
!1593 = !DILocation(line: 164, column: 2, scope: !1591, inlinedAt: !1592)
!1594 = !DILocation(line: 166, column: 2, scope: !1591, inlinedAt: !1592)
!1595 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc64Random.next_int128", scope: !4, file: !4, line: 65, type: !1596, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1596 = !DISubroutineType(types: !1597)
!1597 = !{!15, !1504}
!1598 = !DILocation(line: 65, column: 55, scope: !1595)
!1599 = !DILocalVariable(name: "self", arg: 1, scope: !1595, file: !4, line: 65, type: !1504)
!1600 = !DILocation(line: 65, column: 36, scope: !1595)
!1601 = !DILocation(line: 65, column: 71, scope: !1602, inlinedAt: !1598)
!1602 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1603 = !DILocation(line: 138, column: 46, scope: !1602, inlinedAt: !1598)
!1604 = !DILocation(line: 138, column: 72, scope: !1602, inlinedAt: !1598)
!1605 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc64Random.next_int", scope: !4, file: !4, line: 66, type: !1606, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1606 = !DISubroutineType(types: !1607)
!1607 = !{!20, !1504}
!1608 = !DILocation(line: 66, column: 49, scope: !1605)
!1609 = !DILocalVariable(name: "self", arg: 1, scope: !1605, file: !4, line: 66, type: !1504)
!1610 = !DILocation(line: 66, column: 30, scope: !1605)
!1611 = !DILocation(line: 66, column: 55, scope: !1605)
!1612 = !DILocation(line: 66, column: 50, scope: !1605)
!1613 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc64Random.next_short", scope: !4, file: !4, line: 67, type: !1614, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1614 = !DISubroutineType(types: !1615)
!1615 = !{!23, !1504}
!1616 = !DILocation(line: 67, column: 53, scope: !1613)
!1617 = !DILocalVariable(name: "self", arg: 1, scope: !1613, file: !4, line: 67, type: !1504)
!1618 = !DILocation(line: 67, column: 34, scope: !1613)
!1619 = !DILocation(line: 67, column: 61, scope: !1613)
!1620 = !DILocation(line: 67, column: 54, scope: !1613)
!1621 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc64Random.next_byte", scope: !4, file: !4, line: 68, type: !1622, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1622 = !DISubroutineType(types: !1623)
!1623 = !{!43, !1504}
!1624 = !DILocation(line: 68, column: 50, scope: !1621)
!1625 = !DILocalVariable(name: "self", arg: 1, scope: !1621, file: !4, line: 68, type: !1504)
!1626 = !DILocation(line: 68, column: 31, scope: !1621)
!1627 = !DILocation(line: 68, column: 56, scope: !1621)
!1628 = !DILocation(line: 68, column: 51, scope: !1621)
!1629 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc32Random.set_seed", scope: !4, file: !4, line: 74, type: !1630, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1630 = !DISubroutineType(types: !1631)
!1631 = !{null, !1632, !260}
!1632 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc32Random*", baseType: !1633, size: 64, align: 64, dwarfAddressSpace: 0)
!1633 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc32Random", scope: !4, file: !4, line: 72, baseType: !980, align: 4)
!1634 = !DILocation(line: 75, column: 1, scope: !1629)
!1635 = !DILocalVariable(name: "self", arg: 1, scope: !1629, file: !4, line: 74, type: !1632)
!1636 = !DILocation(line: 74, column: 31, scope: !1629)
!1637 = !DILocalVariable(name: "input", arg: 2, scope: !1629, file: !4, line: 74, type: !260)
!1638 = !DILocation(line: 74, column: 45, scope: !1629)
!1639 = !DILocation(line: 76, column: 3, scope: !1629)
!1640 = !DILocalVariable(name: "return_value", scope: !1641, file: !4, line: 10, type: !980, align: 16)
!1641 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1642 = !DILocation(line: 10, column: 8, scope: !1641, inlinedAt: !1643)
!1643 = !DILocation(line: 76, column: 11, scope: !1629)
!1644 = !DILocation(line: 342, column: 11, scope: !1645, inlinedAt: !1646)
!1645 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1646 = !DILocation(line: 11, column: 16, scope: !1641, inlinedAt: !1643)
!1647 = !DILocation(line: 11, column: 2, scope: !1641, inlinedAt: !1643)
!1648 = !DILocation(line: 12, column: 9, scope: !1641, inlinedAt: !1643)
!1649 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc32Random.next_int", scope: !4, file: !4, line: 79, type: !1650, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1650 = !DISubroutineType(types: !1651)
!1651 = !{!20, !1632}
!1652 = !DILocation(line: 80, column: 1, scope: !1649)
!1653 = !DILocalVariable(name: "sfc", arg: 1, scope: !1649, file: !4, line: 79, type: !1632)
!1654 = !DILocation(line: 79, column: 30, scope: !1649)
!1655 = !DILocalVariable(name: "s", scope: !1649, file: !4, line: 81, type: !504, align: 8)
!1656 = !DILocation(line: 81, column: 8, scope: !1649)
!1657 = !DILocation(line: 81, column: 13, scope: !1649)
!1658 = !DILocalVariable(name: "result", scope: !1649, file: !4, line: 82, type: !20, align: 4)
!1659 = !DILocation(line: 82, column: 7, scope: !1649)
!1660 = !DILocation(line: 82, column: 16, scope: !1649)
!1661 = !DILocation(line: 82, column: 18, scope: !1649)
!1662 = !DILocation(line: 82, column: 23, scope: !1649)
!1663 = !DILocation(line: 82, column: 25, scope: !1649)
!1664 = !DILocation(line: 82, column: 30, scope: !1649)
!1665 = !DILocation(line: 82, column: 32, scope: !1649)
!1666 = !DILocation(line: 83, column: 2, scope: !1649)
!1667 = !DILocation(line: 83, column: 9, scope: !1649)
!1668 = !DILocation(line: 83, column: 11, scope: !1649)
!1669 = !DILocation(line: 83, column: 16, scope: !1649)
!1670 = !DILocation(line: 83, column: 18, scope: !1649)
!1671 = !DILocation(line: 84, column: 2, scope: !1649)
!1672 = !DILocation(line: 84, column: 4, scope: !1649)
!1673 = !DILocation(line: 84, column: 9, scope: !1649)
!1674 = !DILocation(line: 84, column: 11, scope: !1649)
!1675 = !DILocation(line: 84, column: 16, scope: !1649)
!1676 = !DILocation(line: 84, column: 18, scope: !1649)
!1677 = !DILocation(line: 85, column: 2, scope: !1649)
!1678 = !DILocation(line: 85, column: 4, scope: !1649)
!1679 = !DILocation(line: 85, column: 9, scope: !1649)
!1680 = !DILocation(line: 85, column: 11, scope: !1649)
!1681 = !DILocation(line: 99, column: 50, scope: !1682, inlinedAt: !1679)
!1682 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1683 = !DILocation(line: 99, column: 56, scope: !1682, inlinedAt: !1679)
!1684 = !DILocation(line: 99, column: 62, scope: !1682, inlinedAt: !1679)
!1685 = !DILocation(line: 85, column: 25, scope: !1649)
!1686 = !DILocation(line: 86, column: 2, scope: !1649)
!1687 = !DILocation(line: 86, column: 4, scope: !1649)
!1688 = !DILocation(line: 87, column: 9, scope: !1649)
!1689 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc32Random.next_bytes", scope: !4, file: !4, line: 93, type: !1630, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1690 = !DILocation(line: 93, column: 65, scope: !1689)
!1691 = !DILocalVariable(name: "self", arg: 1, scope: !1689, file: !4, line: 93, type: !1632)
!1692 = !DILocation(line: 93, column: 32, scope: !1689)
!1693 = !DILocalVariable(name: "bytes", arg: 2, scope: !1689, file: !4, line: 93, type: !260)
!1694 = !DILocation(line: 93, column: 46, scope: !1689)
!1695 = !DILocation(line: 91, column: 11, scope: !1696)
!1696 = distinct !DILexicalBlock(scope: !1689, file: !4, line: 93, column: 65)
!1697 = !DILocalVariable(name: "len", scope: !1698, file: !4, line: 146, type: !265, align: 8)
!1698 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1699 = !DILocation(line: 146, column: 6, scope: !1698, inlinedAt: !1690)
!1700 = !DILocation(line: 146, column: 12, scope: !1698, inlinedAt: !1690)
!1701 = !DILocation(line: 148, column: 2, scope: !1698, inlinedAt: !1690)
!1702 = !DILocation(line: 148, column: 9, scope: !1703, inlinedAt: !1690)
!1703 = distinct !DILexicalBlock(scope: !1698, file: !2, line: 148, column: 2)
!1704 = !DILocalVariable(name: "value", scope: !1705, file: !4, line: 150, type: !20, align: 4)
!1705 = distinct !DILexicalBlock(scope: !1703, file: !2, line: 149, column: 2)
!1706 = !DILocation(line: 150, column: 7, scope: !1705, inlinedAt: !1690)
!1707 = !DILocation(line: 93, column: 88, scope: !1705, inlinedAt: !1690)
!1708 = !DILocation(line: 150, column: 15, scope: !1705, inlinedAt: !1690)
!1709 = !DILocation(line: 151, column: 7, scope: !1705, inlinedAt: !1690)
!1710 = !DILocation(line: 153, column: 33, scope: !1711, inlinedAt: !1690)
!1711 = distinct !DILexicalBlock(scope: !1705, file: !2, line: 152, column: 3)
!1712 = !DILocation(line: 153, column: 4, scope: !1711, inlinedAt: !1690)
!1713 = !DILocation(line: 153, column: 10, scope: !1711, inlinedAt: !1690)
!1714 = !DILocation(line: 154, column: 10, scope: !1711, inlinedAt: !1690)
!1715 = !DILocation(line: 156, column: 3, scope: !1705, inlinedAt: !1690)
!1716 = !DILocation(line: 157, column: 3, scope: !1705, inlinedAt: !1690)
!1717 = !DILocation(line: 158, column: 11, scope: !1705, inlinedAt: !1690)
!1718 = !DILocation(line: 158, column: 17, scope: !1705, inlinedAt: !1690)
!1719 = !DILocation(line: 164, column: 33, scope: !1720, inlinedAt: !1721)
!1720 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1721 = !DILocation(line: 160, column: 2, scope: !1698, inlinedAt: !1690)
!1722 = !DILocation(line: 164, column: 2, scope: !1720, inlinedAt: !1721)
!1723 = !DILocation(line: 166, column: 2, scope: !1720, inlinedAt: !1721)
!1724 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc32Random.next_int128", scope: !4, file: !4, line: 94, type: !1725, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1725 = !DISubroutineType(types: !1726)
!1726 = !{!15, !1632}
!1727 = !DILocation(line: 94, column: 55, scope: !1724)
!1728 = !DILocalVariable(name: "self", arg: 1, scope: !1724, file: !4, line: 94, type: !1632)
!1729 = !DILocation(line: 94, column: 36, scope: !1724)
!1730 = !DILocation(line: 94, column: 71, scope: !1731, inlinedAt: !1727)
!1731 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1732 = !DILocation(line: 138, column: 46, scope: !1731, inlinedAt: !1727)
!1733 = !DILocation(line: 138, column: 72, scope: !1731, inlinedAt: !1727)
!1734 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc32Random.next_long", scope: !4, file: !4, line: 95, type: !1735, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1735 = !DISubroutineType(types: !1736)
!1736 = !{!6, !1632}
!1737 = !DILocation(line: 95, column: 51, scope: !1734)
!1738 = !DILocalVariable(name: "self", arg: 1, scope: !1734, file: !4, line: 95, type: !1632)
!1739 = !DILocation(line: 95, column: 32, scope: !1734)
!1740 = !DILocation(line: 95, column: 64, scope: !1741, inlinedAt: !1737)
!1741 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1742 = !DILocation(line: 139, column: 41, scope: !1741, inlinedAt: !1737)
!1743 = !DILocation(line: 139, column: 65, scope: !1741, inlinedAt: !1737)
!1744 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc32Random.next_short", scope: !4, file: !4, line: 96, type: !1745, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1745 = !DISubroutineType(types: !1746)
!1746 = !{!23, !1632}
!1747 = !DILocation(line: 96, column: 53, scope: !1744)
!1748 = !DILocalVariable(name: "self", arg: 1, scope: !1744, file: !4, line: 96, type: !1632)
!1749 = !DILocation(line: 96, column: 34, scope: !1744)
!1750 = !DILocation(line: 96, column: 61, scope: !1744)
!1751 = !DILocation(line: 96, column: 54, scope: !1744)
!1752 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc32Random.next_byte", scope: !4, file: !4, line: 97, type: !1753, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1753 = !DISubroutineType(types: !1754)
!1754 = !{!43, !1632}
!1755 = !DILocation(line: 97, column: 50, scope: !1752)
!1756 = !DILocalVariable(name: "self", arg: 1, scope: !1752, file: !4, line: 97, type: !1632)
!1757 = !DILocation(line: 97, column: 31, scope: !1752)
!1758 = !DILocation(line: 97, column: 56, scope: !1752)
!1759 = !DILocation(line: 97, column: 51, scope: !1752)
!1760 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc16Random.set_seed", scope: !4, file: !4, line: 103, type: !1761, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1761 = !DISubroutineType(types: !1762)
!1762 = !{null, !1763, !260}
!1763 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc16Random*", baseType: !1764, size: 64, align: 64, dwarfAddressSpace: 0)
!1764 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc16Random", scope: !4, file: !4, line: 101, baseType: !1116, align: 2)
!1765 = !DILocation(line: 104, column: 1, scope: !1760)
!1766 = !DILocalVariable(name: "self", arg: 1, scope: !1760, file: !4, line: 103, type: !1763)
!1767 = !DILocation(line: 103, column: 31, scope: !1760)
!1768 = !DILocalVariable(name: "input", arg: 2, scope: !1760, file: !4, line: 103, type: !260)
!1769 = !DILocation(line: 103, column: 45, scope: !1760)
!1770 = !DILocation(line: 105, column: 3, scope: !1760)
!1771 = !DILocalVariable(name: "return_value", scope: !1772, file: !4, line: 10, type: !1116, align: 2)
!1772 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1773 = !DILocation(line: 10, column: 8, scope: !1772, inlinedAt: !1774)
!1774 = !DILocation(line: 105, column: 11, scope: !1760)
!1775 = !DILocation(line: 342, column: 11, scope: !1776, inlinedAt: !1777)
!1776 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1777 = !DILocation(line: 11, column: 16, scope: !1772, inlinedAt: !1774)
!1778 = !DILocation(line: 11, column: 2, scope: !1772, inlinedAt: !1774)
!1779 = !DILocation(line: 12, column: 9, scope: !1772, inlinedAt: !1774)
!1780 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc16Random.next_short", scope: !4, file: !4, line: 109, type: !1781, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1781 = !DISubroutineType(types: !1782)
!1782 = !{!23, !1763}
!1783 = !DILocation(line: 110, column: 1, scope: !1780)
!1784 = !DILocalVariable(name: "seed", arg: 1, scope: !1780, file: !4, line: 109, type: !1763)
!1785 = !DILocation(line: 109, column: 34, scope: !1780)
!1786 = !DILocalVariable(name: "s", scope: !1780, file: !4, line: 111, type: !613, align: 8)
!1787 = !DILocation(line: 111, column: 10, scope: !1780)
!1788 = !DILocation(line: 111, column: 15, scope: !1780)
!1789 = !DILocalVariable(name: "result", scope: !1780, file: !4, line: 112, type: !23, align: 2)
!1790 = !DILocation(line: 112, column: 9, scope: !1780)
!1791 = !DILocation(line: 112, column: 18, scope: !1780)
!1792 = !DILocation(line: 112, column: 20, scope: !1780)
!1793 = !DILocation(line: 112, column: 25, scope: !1780)
!1794 = !DILocation(line: 112, column: 27, scope: !1780)
!1795 = !DILocation(line: 112, column: 32, scope: !1780)
!1796 = !DILocation(line: 112, column: 34, scope: !1780)
!1797 = !DILocation(line: 113, column: 2, scope: !1780)
!1798 = !DILocation(line: 113, column: 9, scope: !1780)
!1799 = !DILocation(line: 113, column: 11, scope: !1780)
!1800 = !DILocation(line: 113, column: 16, scope: !1780)
!1801 = !DILocation(line: 113, column: 18, scope: !1780)
!1802 = !DILocation(line: 114, column: 2, scope: !1780)
!1803 = !DILocation(line: 114, column: 4, scope: !1780)
!1804 = !DILocation(line: 114, column: 9, scope: !1780)
!1805 = !DILocation(line: 114, column: 11, scope: !1780)
!1806 = !DILocation(line: 114, column: 16, scope: !1780)
!1807 = !DILocation(line: 114, column: 18, scope: !1780)
!1808 = !DILocation(line: 115, column: 2, scope: !1780)
!1809 = !DILocation(line: 115, column: 4, scope: !1780)
!1810 = !DILocation(line: 115, column: 9, scope: !1780)
!1811 = !DILocation(line: 115, column: 11, scope: !1780)
!1812 = !DILocation(line: 115, column: 56, scope: !1813, inlinedAt: !1810)
!1813 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1814 = !DILocation(line: 115, column: 62, scope: !1813, inlinedAt: !1810)
!1815 = !DILocation(line: 115, column: 68, scope: !1813, inlinedAt: !1810)
!1816 = !DILocation(line: 115, column: 25, scope: !1780)
!1817 = !DILocation(line: 116, column: 2, scope: !1780)
!1818 = !DILocation(line: 116, column: 4, scope: !1780)
!1819 = !DILocation(line: 117, column: 9, scope: !1780)
!1820 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc16Random.next_bytes", scope: !4, file: !4, line: 123, type: !1761, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1821 = !DILocation(line: 123, column: 65, scope: !1820)
!1822 = !DILocalVariable(name: "self", arg: 1, scope: !1820, file: !4, line: 123, type: !1763)
!1823 = !DILocation(line: 123, column: 32, scope: !1820)
!1824 = !DILocalVariable(name: "bytes", arg: 2, scope: !1820, file: !4, line: 123, type: !260)
!1825 = !DILocation(line: 123, column: 46, scope: !1820)
!1826 = !DILocation(line: 121, column: 11, scope: !1827)
!1827 = distinct !DILexicalBlock(scope: !1820, file: !4, line: 123, column: 65)
!1828 = !DILocalVariable(name: "len", scope: !1829, file: !4, line: 146, type: !265, align: 8)
!1829 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1830 = !DILocation(line: 146, column: 6, scope: !1829, inlinedAt: !1821)
!1831 = !DILocation(line: 146, column: 12, scope: !1829, inlinedAt: !1821)
!1832 = !DILocation(line: 148, column: 2, scope: !1829, inlinedAt: !1821)
!1833 = !DILocation(line: 148, column: 9, scope: !1834, inlinedAt: !1821)
!1834 = distinct !DILexicalBlock(scope: !1829, file: !2, line: 148, column: 2)
!1835 = !DILocalVariable(name: "value", scope: !1836, file: !4, line: 150, type: !23, align: 2)
!1836 = distinct !DILexicalBlock(scope: !1834, file: !2, line: 149, column: 2)
!1837 = !DILocation(line: 150, column: 7, scope: !1836, inlinedAt: !1821)
!1838 = !DILocation(line: 123, column: 88, scope: !1836, inlinedAt: !1821)
!1839 = !DILocation(line: 150, column: 15, scope: !1836, inlinedAt: !1821)
!1840 = !DILocation(line: 151, column: 7, scope: !1836, inlinedAt: !1821)
!1841 = !DILocation(line: 153, column: 33, scope: !1842, inlinedAt: !1821)
!1842 = distinct !DILexicalBlock(scope: !1836, file: !2, line: 152, column: 3)
!1843 = !DILocation(line: 153, column: 4, scope: !1842, inlinedAt: !1821)
!1844 = !DILocation(line: 153, column: 10, scope: !1842, inlinedAt: !1821)
!1845 = !DILocation(line: 154, column: 10, scope: !1842, inlinedAt: !1821)
!1846 = !DILocation(line: 156, column: 3, scope: !1836, inlinedAt: !1821)
!1847 = !DILocation(line: 157, column: 3, scope: !1836, inlinedAt: !1821)
!1848 = !DILocation(line: 158, column: 11, scope: !1836, inlinedAt: !1821)
!1849 = !DILocation(line: 158, column: 17, scope: !1836, inlinedAt: !1821)
!1850 = !DILocation(line: 164, column: 33, scope: !1851, inlinedAt: !1852)
!1851 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1852 = !DILocation(line: 160, column: 2, scope: !1829, inlinedAt: !1821)
!1853 = !DILocation(line: 164, column: 2, scope: !1851, inlinedAt: !1852)
!1854 = !DILocation(line: 166, column: 2, scope: !1851, inlinedAt: !1852)
!1855 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc16Random.next_int128", scope: !4, file: !4, line: 124, type: !1856, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1856 = !DISubroutineType(types: !1857)
!1857 = !{!15, !1763}
!1858 = !DILocation(line: 124, column: 55, scope: !1855)
!1859 = !DILocalVariable(name: "self", arg: 1, scope: !1855, file: !4, line: 124, type: !1763)
!1860 = !DILocation(line: 124, column: 36, scope: !1855)
!1861 = !DILocation(line: 124, column: 71, scope: !1862, inlinedAt: !1858)
!1862 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1863 = !DILocation(line: 138, column: 46, scope: !1862, inlinedAt: !1858)
!1864 = !DILocation(line: 138, column: 72, scope: !1862, inlinedAt: !1858)
!1865 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc16Random.next_long", scope: !4, file: !4, line: 125, type: !1866, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1866 = !DISubroutineType(types: !1867)
!1867 = !{!6, !1763}
!1868 = !DILocation(line: 125, column: 51, scope: !1865)
!1869 = !DILocalVariable(name: "self", arg: 1, scope: !1865, file: !4, line: 125, type: !1763)
!1870 = !DILocation(line: 125, column: 32, scope: !1865)
!1871 = !DILocation(line: 125, column: 64, scope: !1872, inlinedAt: !1868)
!1872 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1873 = !DILocation(line: 139, column: 41, scope: !1872, inlinedAt: !1868)
!1874 = !DILocation(line: 139, column: 65, scope: !1872, inlinedAt: !1868)
!1875 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc16Random.next_int", scope: !4, file: !4, line: 126, type: !1876, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1876 = !DISubroutineType(types: !1877)
!1877 = !{!20, !1763}
!1878 = !DILocation(line: 126, column: 49, scope: !1875)
!1879 = !DILocalVariable(name: "self", arg: 1, scope: !1875, file: !4, line: 126, type: !1763)
!1880 = !DILocation(line: 126, column: 30, scope: !1875)
!1881 = !DILocation(line: 126, column: 63, scope: !1882, inlinedAt: !1878)
!1882 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1883 = !DILocation(line: 140, column: 41, scope: !1882, inlinedAt: !1878)
!1884 = !DILocation(line: 140, column: 64, scope: !1882, inlinedAt: !1878)
!1885 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc16Random.next_byte", scope: !4, file: !4, line: 127, type: !1886, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1886 = !DISubroutineType(types: !1887)
!1887 = !{!43, !1763}
!1888 = !DILocation(line: 127, column: 50, scope: !1885)
!1889 = !DILocalVariable(name: "self", arg: 1, scope: !1885, file: !4, line: 127, type: !1763)
!1890 = !DILocation(line: 127, column: 31, scope: !1885)
!1891 = !DILocation(line: 127, column: 56, scope: !1885)
!1892 = !DILocation(line: 127, column: 51, scope: !1885)
!1893 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc8Random.set_seed", scope: !4, file: !4, line: 134, type: !1894, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1894 = !DISubroutineType(types: !1895)
!1895 = !{null, !1896, !260}
!1896 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc8Random*", baseType: !1897, size: 64, align: 64, dwarfAddressSpace: 0)
!1897 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc8Random", scope: !4, file: !4, line: 132, baseType: !1254, align: 1)
!1898 = !DILocation(line: 135, column: 1, scope: !1893)
!1899 = !DILocalVariable(name: "self", arg: 1, scope: !1893, file: !4, line: 134, type: !1896)
!1900 = !DILocation(line: 134, column: 30, scope: !1893)
!1901 = !DILocalVariable(name: "input", arg: 2, scope: !1893, file: !4, line: 134, type: !260)
!1902 = !DILocation(line: 134, column: 44, scope: !1893)
!1903 = !DILocation(line: 136, column: 3, scope: !1893)
!1904 = !DILocalVariable(name: "return_value", scope: !1905, file: !4, line: 10, type: !1254, align: 1)
!1905 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1906 = !DILocation(line: 10, column: 8, scope: !1905, inlinedAt: !1907)
!1907 = !DILocation(line: 136, column: 11, scope: !1893)
!1908 = !DILocation(line: 342, column: 11, scope: !1909, inlinedAt: !1910)
!1909 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1910 = !DILocation(line: 11, column: 16, scope: !1905, inlinedAt: !1907)
!1911 = !DILocation(line: 11, column: 2, scope: !1905, inlinedAt: !1907)
!1912 = !DILocation(line: 12, column: 9, scope: !1905, inlinedAt: !1907)
!1913 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc8Random.next_byte", scope: !4, file: !4, line: 139, type: !1914, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1914 = !DISubroutineType(types: !1915)
!1915 = !{!43, !1896}
!1916 = !DILocation(line: 140, column: 1, scope: !1913)
!1917 = !DILocalVariable(name: "self", arg: 1, scope: !1913, file: !4, line: 139, type: !1896)
!1918 = !DILocation(line: 139, column: 30, scope: !1913)
!1919 = !DILocalVariable(name: "s", scope: !1913, file: !4, line: 141, type: !263, align: 8)
!1920 = !DILocation(line: 141, column: 8, scope: !1913)
!1921 = !DILocation(line: 141, column: 13, scope: !1913)
!1922 = !DILocalVariable(name: "result", scope: !1913, file: !4, line: 142, type: !43, align: 1)
!1923 = !DILocation(line: 142, column: 7, scope: !1913)
!1924 = !DILocation(line: 142, column: 16, scope: !1913)
!1925 = !DILocation(line: 142, column: 18, scope: !1913)
!1926 = !DILocation(line: 142, column: 23, scope: !1913)
!1927 = !DILocation(line: 142, column: 25, scope: !1913)
!1928 = !DILocation(line: 142, column: 30, scope: !1913)
!1929 = !DILocation(line: 142, column: 32, scope: !1913)
!1930 = !DILocation(line: 143, column: 2, scope: !1913)
!1931 = !DILocation(line: 143, column: 9, scope: !1913)
!1932 = !DILocation(line: 143, column: 11, scope: !1913)
!1933 = !DILocation(line: 143, column: 16, scope: !1913)
!1934 = !DILocation(line: 143, column: 18, scope: !1913)
!1935 = !DILocation(line: 144, column: 2, scope: !1913)
!1936 = !DILocation(line: 144, column: 4, scope: !1913)
!1937 = !DILocation(line: 144, column: 9, scope: !1913)
!1938 = !DILocation(line: 144, column: 11, scope: !1913)
!1939 = !DILocation(line: 144, column: 16, scope: !1913)
!1940 = !DILocation(line: 144, column: 18, scope: !1913)
!1941 = !DILocation(line: 145, column: 2, scope: !1913)
!1942 = !DILocation(line: 145, column: 4, scope: !1913)
!1943 = !DILocation(line: 145, column: 9, scope: !1913)
!1944 = !DILocation(line: 145, column: 11, scope: !1913)
!1945 = !DILocation(line: 131, column: 50, scope: !1946, inlinedAt: !1943)
!1946 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1947 = !DILocation(line: 131, column: 56, scope: !1946, inlinedAt: !1943)
!1948 = !DILocation(line: 131, column: 62, scope: !1946, inlinedAt: !1943)
!1949 = !DILocation(line: 145, column: 24, scope: !1913)
!1950 = !DILocation(line: 146, column: 2, scope: !1913)
!1951 = !DILocation(line: 146, column: 4, scope: !1913)
!1952 = !DILocation(line: 147, column: 9, scope: !1913)
!1953 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc8Random.next_bytes", scope: !4, file: !4, line: 150, type: !1894, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1954 = !DILocation(line: 150, column: 64, scope: !1953)
!1955 = !DILocalVariable(name: "self", arg: 1, scope: !1953, file: !4, line: 150, type: !1896)
!1956 = !DILocation(line: 150, column: 31, scope: !1953)
!1957 = !DILocalVariable(name: "bytes", arg: 2, scope: !1953, file: !4, line: 150, type: !260)
!1958 = !DILocation(line: 150, column: 45, scope: !1953)
!1959 = !DILocalVariable(name: "len", scope: !1960, file: !4, line: 146, type: !265, align: 8)
!1960 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1961 = !DILocation(line: 146, column: 6, scope: !1960, inlinedAt: !1954)
!1962 = !DILocation(line: 146, column: 12, scope: !1960, inlinedAt: !1954)
!1963 = !DILocation(line: 148, column: 2, scope: !1960, inlinedAt: !1954)
!1964 = !DILocation(line: 148, column: 9, scope: !1965, inlinedAt: !1954)
!1965 = distinct !DILexicalBlock(scope: !1960, file: !2, line: 148, column: 2)
!1966 = !DILocalVariable(name: "value", scope: !1967, file: !4, line: 150, type: !43, align: 1)
!1967 = distinct !DILexicalBlock(scope: !1965, file: !2, line: 149, column: 2)
!1968 = !DILocation(line: 150, column: 7, scope: !1967, inlinedAt: !1954)
!1969 = !DILocation(line: 150, column: 87, scope: !1967, inlinedAt: !1954)
!1970 = !DILocation(line: 150, column: 15, scope: !1967, inlinedAt: !1954)
!1971 = !DILocation(line: 151, column: 7, scope: !1967, inlinedAt: !1954)
!1972 = !DILocation(line: 153, column: 33, scope: !1973, inlinedAt: !1954)
!1973 = distinct !DILexicalBlock(scope: !1967, file: !2, line: 152, column: 3)
!1974 = !DILocation(line: 153, column: 4, scope: !1973, inlinedAt: !1954)
!1975 = !DILocation(line: 153, column: 10, scope: !1973, inlinedAt: !1954)
!1976 = !DILocation(line: 154, column: 10, scope: !1973, inlinedAt: !1954)
!1977 = !DILocation(line: 156, column: 3, scope: !1967, inlinedAt: !1954)
!1978 = !DILocation(line: 157, column: 3, scope: !1967, inlinedAt: !1954)
!1979 = !DILocation(line: 158, column: 11, scope: !1967, inlinedAt: !1954)
!1980 = !DILocation(line: 158, column: 17, scope: !1967, inlinedAt: !1954)
!1981 = !DILocation(line: 164, column: 33, scope: !1982, inlinedAt: !1983)
!1982 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1983 = !DILocation(line: 160, column: 2, scope: !1960, inlinedAt: !1954)
!1984 = !DILocation(line: 164, column: 2, scope: !1982, inlinedAt: !1983)
!1985 = !DILocation(line: 166, column: 2, scope: !1982, inlinedAt: !1983)
!1986 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc8Random.next_int128", scope: !4, file: !4, line: 151, type: !1987, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1987 = !DISubroutineType(types: !1988)
!1988 = !{!15, !1896}
!1989 = !DILocation(line: 151, column: 54, scope: !1986)
!1990 = !DILocalVariable(name: "self", arg: 1, scope: !1986, file: !4, line: 151, type: !1896)
!1991 = !DILocation(line: 151, column: 35, scope: !1986)
!1992 = !DILocation(line: 151, column: 70, scope: !1993, inlinedAt: !1989)
!1993 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1994 = !DILocation(line: 138, column: 46, scope: !1993, inlinedAt: !1989)
!1995 = !DILocation(line: 138, column: 72, scope: !1993, inlinedAt: !1989)
!1996 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc8Random.next_long", scope: !4, file: !4, line: 152, type: !1997, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1997 = !DISubroutineType(types: !1998)
!1998 = !{!6, !1896}
!1999 = !DILocation(line: 152, column: 50, scope: !1996)
!2000 = !DILocalVariable(name: "self", arg: 1, scope: !1996, file: !4, line: 152, type: !1896)
!2001 = !DILocation(line: 152, column: 31, scope: !1996)
!2002 = !DILocation(line: 152, column: 63, scope: !2003, inlinedAt: !1999)
!2003 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2004 = !DILocation(line: 139, column: 41, scope: !2003, inlinedAt: !1999)
!2005 = !DILocation(line: 139, column: 65, scope: !2003, inlinedAt: !1999)
!2006 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc8Random.next_int", scope: !4, file: !4, line: 153, type: !2007, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2007 = !DISubroutineType(types: !2008)
!2008 = !{!20, !1896}
!2009 = !DILocation(line: 153, column: 48, scope: !2006)
!2010 = !DILocalVariable(name: "self", arg: 1, scope: !2006, file: !4, line: 153, type: !1896)
!2011 = !DILocation(line: 153, column: 29, scope: !2006)
!2012 = !DILocation(line: 153, column: 62, scope: !2013, inlinedAt: !2009)
!2013 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2014 = !DILocation(line: 140, column: 41, scope: !2013, inlinedAt: !2009)
!2015 = !DILocation(line: 140, column: 64, scope: !2013, inlinedAt: !2009)
!2016 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc8Random.next_short", scope: !4, file: !4, line: 154, type: !2017, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2017 = !DISubroutineType(types: !2018)
!2018 = !{!23, !1896}
!2019 = !DILocation(line: 154, column: 52, scope: !2016)
!2020 = !DILocalVariable(name: "self", arg: 1, scope: !2016, file: !4, line: 154, type: !1896)
!2021 = !DILocation(line: 154, column: 33, scope: !2016)
!2022 = !DILocation(line: 154, column: 67, scope: !2023, inlinedAt: !2019)
!2023 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2024 = !DILocation(line: 141, column: 44, scope: !2023, inlinedAt: !2019)
!2025 = !DILocation(line: 141, column: 68, scope: !2023, inlinedAt: !2019)
!2026 = distinct !DISubprogram(name: "seeder", linkageName: "std.math.random.seeder", scope: !56, file: !56, line: 20, type: !2027, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2027 = !DISubroutineType(types: !2028)
!2028 = !{null, !260, !260}
!2029 = !DILocalVariable(name: "input", arg: 1, scope: !2026, file: !56, line: 20, type: !260)
!2030 = !DILocation(line: 20, column: 23, scope: !2026)
!2031 = !DILocalVariable(name: "out_buffer", arg: 2, scope: !2026, file: !56, line: 20, type: !260)
!2032 = !DILocation(line: 20, column: 37, scope: !2026)
!2033 = !DILocalVariable(name: "out_chars", scope: !2026, file: !56, line: 26, type: !265, align: 8)
!2034 = !DILocation(line: 26, column: 6, scope: !2026)
!2035 = !DILocation(line: 26, column: 18, scope: !2026)
!2036 = !DILocalVariable(name: "current", scope: !2037, file: !56, line: 536, type: !2039, align: 8)
!2037 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !2038, file: !2038, line: 534, scopeLine: 534, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2038 = !DIFile(filename: "mem.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!2039 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !2040, size: 64, align: 64, dwarfAddressSpace: 0)
!2040 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !56, file: !56, line: 10, size: 320, align: 64, elements: !2041, identifier: "std.core.mem.allocator.TempAllocator")
!2041 = !{!2042, !2049, !2062, !2063, !2064}
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !2040, file: !56, line: 12, baseType: !2043, size: 128, align: 64)
!2043 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !2044, identifier: "Allocator")
!2044 = !{!2045, !2047}
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2043, baseType: !2046, size: 64, align: 64)
!2046 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2043, baseType: !2048, size: 64, align: 64, offset: 64)
!2048 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !2040, file: !56, line: 13, baseType: !2050, size: 64, align: 64, offset: 128)
!2050 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !2051, size: 64, align: 64, dwarfAddressSpace: 0)
!2051 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !56, file: !56, line: 22, size: 320, align: 64, elements: !2052, identifier: "std.core.mem.allocator.TempAllocatorPage")
!2052 = !{!2053, !2054, !2055, !2056, !2057, !2058}
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !2051, file: !56, line: 24, baseType: !2050, size: 64, align: 64)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !2051, file: !56, line: 25, baseType: !2046, size: 64, align: 64, offset: 64)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !2051, file: !56, line: 26, baseType: !265, size: 64, align: 64, offset: 128)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2051, file: !56, line: 27, baseType: !265, size: 64, align: 64, offset: 192)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !2051, file: !56, line: 28, baseType: !265, size: 64, align: 64, offset: 256)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2051, file: !56, line: 29, baseType: !2059, align: 8, offset: 320)
!2059 = !DICompositeType(tag: DW_TAG_array_type, baseType: !43, align: 8, elements: !2060)
!2060 = !{!2061}
!2061 = !DISubrange(count: 0, lowerBound: 0)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2040, file: !56, line: 14, baseType: !265, size: 64, align: 64, offset: 192)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2040, file: !56, line: 15, baseType: !265, size: 64, align: 64, offset: 256)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2040, file: !56, line: 16, baseType: !2059, align: 8, offset: 320)
!2065 = !DILocation(line: 536, column: 17, scope: !2037, inlinedAt: !2066)
!2066 = !DILocation(line: 27, column: 2, scope: !2026)
!2067 = !DILocation(line: 396, column: 7, scope: !2068, inlinedAt: !2070)
!2068 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !2069, file: !2069, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2069 = !DIFile(filename: "mem_allocator.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!2070 = !DILocation(line: 536, column: 38, scope: !2037, inlinedAt: !2066)
!2071 = !DILocation(line: 398, column: 3, scope: !2072, inlinedAt: !2070)
!2072 = distinct !DILexicalBlock(scope: !2068, file: !2069, line: 397, column: 2)
!2073 = !DILocation(line: 400, column: 9, scope: !2068, inlinedAt: !2070)
!2074 = !DILocalVariable(name: "mark", scope: !2037, file: !56, line: 542, type: !265, align: 8)
!2075 = !DILocation(line: 542, column: 6, scope: !2037, inlinedAt: !2066)
!2076 = !DILocation(line: 542, column: 13, scope: !2037, inlinedAt: !2066)
!2077 = !DILocalVariable(name: "words", scope: !2078, file: !56, line: 29, type: !2079, align: 8)
!2078 = distinct !DILexicalBlock(scope: !2026, file: !56, line: 28, column: 2)
!2079 = !DICompositeType(tag: DW_TAG_structure_type, name: "ulong[]", size: 128, align: 64, elements: !2080, identifier: "ulong[]")
!2080 = !{!2081, !2082}
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2079, baseType: !395, size: 64, align: 64)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2079, baseType: !265, size: 64, align: 64, offset: 64)
!2083 = !DILocation(line: 29, column: 11, scope: !2078)
!2084 = !DILocation(line: 29, column: 49, scope: !2078)
!2085 = !DILocation(line: 722, column: 41, scope: !2086, inlinedAt: !2087)
!2086 = distinct !DISubprogram(name: "temp_alloc_array", linkageName: "temp_alloc_array", scope: !2038, file: !2038, line: 720, scopeLine: 720, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2087 = !DILocation(line: 29, column: 24, scope: !2078)
!2088 = !DILocation(line: 722, column: 26, scope: !2086, inlinedAt: !2087)
!2089 = !DILocation(line: 722, column: 11, scope: !2086, inlinedAt: !2087)
!2090 = !DILocation(line: 722, column: 68, scope: !2086, inlinedAt: !2087)
!2091 = !DILocation(line: 30, column: 3, scope: !2078)
!2092 = !DILocation(line: 30, column: 9, scope: !2078)
!2093 = !DILocalVariable(name: "words_len_2", scope: !2078, file: !56, line: 31, type: !265, align: 8)
!2094 = !DILocation(line: 31, column: 7, scope: !2078)
!2095 = !DILocation(line: 31, column: 21, scope: !2078)
!2096 = !DILocalVariable(name: "i", scope: !2097, file: !56, line: 34, type: !265, align: 8)
!2097 = distinct !DILexicalBlock(scope: !2078, file: !56, line: 34, column: 3)
!2098 = !DILocation(line: 34, column: 12, scope: !2097)
!2099 = !DILocation(line: 34, column: 16, scope: !2097)
!2100 = !DILocation(line: 34, column: 19, scope: !2097)
!2101 = !DILocation(line: 34, column: 23, scope: !2097)
!2102 = !DILocalVariable(name: "j", scope: !2103, file: !56, line: 36, type: !265, align: 8)
!2103 = distinct !DILexicalBlock(scope: !2097, file: !56, line: 35, column: 3)
!2104 = !DILocation(line: 36, column: 8, scope: !2103)
!2105 = !DILocation(line: 36, column: 12, scope: !2103)
!2106 = !DILocation(line: 36, column: 16, scope: !2103)
!2107 = !DILocation(line: 37, column: 4, scope: !2103)
!2108 = !DILocation(line: 37, column: 10, scope: !2103)
!2109 = !DILocation(line: 37, column: 36, scope: !2103)
!2110 = !DILocation(line: 37, column: 42, scope: !2103)
!2111 = !DILocalVariable(name: "x", scope: !2112, file: !56, line: 214, type: !6, align: 8)
!2112 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2113 = !DILocation(line: 214, column: 9, scope: !2112, inlinedAt: !2114)
!2114 = !DILocation(line: 37, column: 16, scope: !2103)
!2115 = !DILocation(line: 215, column: 38, scope: !2112, inlinedAt: !2114)
!2116 = !DILocation(line: 216, column: 10, scope: !2112, inlinedAt: !2114)
!2117 = !DILocation(line: 38, column: 4, scope: !2103)
!2118 = !DILocation(line: 38, column: 10, scope: !2103)
!2119 = !DILocation(line: 38, column: 16, scope: !2103)
!2120 = !DILocation(line: 38, column: 22, scope: !2103)
!2121 = !DILocation(line: 34, column: 38, scope: !2097)
!2122 = !DILocalVariable(name: "remaining", scope: !2078, file: !56, line: 42, type: !265, align: 8)
!2123 = !DILocation(line: 42, column: 7, scope: !2078)
!2124 = !DILocation(line: 42, column: 19, scope: !2078)
!2125 = !DILocation(line: 42, column: 31, scope: !2078)
!2126 = !DILocation(line: 43, column: 7, scope: !2078)
!2127 = !DILocalVariable(name: "rest", scope: !2128, file: !56, line: 45, type: !6, align: 8)
!2128 = distinct !DILexicalBlock(scope: !2078, file: !56, line: 44, column: 3)
!2129 = !DILocation(line: 45, column: 10, scope: !2128)
!2130 = !DILocation(line: 45, column: 17, scope: !2128)
!2131 = !DILocation(line: 46, column: 22, scope: !2128)
!2132 = !DILocation(line: 46, column: 29, scope: !2128)
!2133 = !DILocation(line: 309, column: 11, scope: !2134, inlinedAt: !2136)
!2134 = distinct !DILexicalBlock(scope: !2135, file: !2038, line: 312, column: 1)
!2135 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !2038, file: !2038, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2136 = !DILocation(line: 46, column: 9, scope: !2128)
!2137 = !DILocation(line: 309, column: 23, scope: !2134, inlinedAt: !2136)
!2138 = !DILocation(line: 309, column: 29, scope: !2134, inlinedAt: !2136)
!2139 = !DILocation(line: 309, column: 36, scope: !2134, inlinedAt: !2136)
!2140 = !DILocation(line: 309, column: 43, scope: !2134, inlinedAt: !2136)
!2141 = !DILocation(line: 309, column: 49, scope: !2134, inlinedAt: !2136)
!2142 = !DILocation(line: 309, column: 56, scope: !2134, inlinedAt: !2136)
!2143 = !DILocation(line: 313, column: 11, scope: !2135, inlinedAt: !2136)
!2144 = !DILocation(line: 313, column: 16, scope: !2135, inlinedAt: !2136)
!2145 = !DILocation(line: 313, column: 21, scope: !2135, inlinedAt: !2136)
!2146 = !DILocation(line: 313, column: 26, scope: !2135, inlinedAt: !2136)
!2147 = !DILocation(line: 47, column: 4, scope: !2128)
!2148 = !DILocation(line: 47, column: 11, scope: !2128)
!2149 = !DILocation(line: 47, column: 17, scope: !2128)
!2150 = !DILocation(line: 48, column: 4, scope: !2128)
!2151 = !DILocation(line: 48, column: 11, scope: !2128)
!2152 = !DILocation(line: 48, column: 17, scope: !2128)
!2153 = !DILocation(line: 48, column: 24, scope: !2128)
!2154 = !DILocalVariable(name: "i", scope: !2155, file: !56, line: 52, type: !2156, align: 8)
!2155 = distinct !DILexicalBlock(scope: !2078, file: !56, line: 52, column: 3)
!2156 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !75)
!2157 = !DILocation(line: 52, column: 12, scope: !2155)
!2158 = !DILocation(line: 52, column: 16, scope: !2155)
!2159 = !DILocation(line: 52, column: 33, scope: !2155)
!2160 = !DILocalVariable(name: "j", scope: !2161, file: !56, line: 54, type: !2156, align: 8)
!2161 = distinct !DILexicalBlock(scope: !2155, file: !56, line: 53, column: 3)
!2162 = !DILocation(line: 54, column: 8, scope: !2161)
!2163 = !DILocation(line: 54, column: 12, scope: !2161)
!2164 = !DILocation(line: 54, column: 16, scope: !2161)
!2165 = !DILocation(line: 55, column: 4, scope: !2161)
!2166 = !DILocation(line: 55, column: 10, scope: !2161)
!2167 = !DILocation(line: 55, column: 16, scope: !2161)
!2168 = !DILocation(line: 55, column: 23, scope: !2161)
!2169 = !DILocation(line: 55, column: 32, scope: !2161)
!2170 = !DILocation(line: 56, column: 4, scope: !2161)
!2171 = !DILocation(line: 56, column: 10, scope: !2161)
!2172 = !DILocation(line: 56, column: 16, scope: !2161)
!2173 = !DILocation(line: 56, column: 22, scope: !2161)
!2174 = !DILocation(line: 52, column: 41, scope: !2155)
!2175 = !DILocalVariable(name: "i", scope: !2176, file: !56, line: 60, type: !265, align: 8)
!2176 = distinct !DILexicalBlock(scope: !2078, file: !56, line: 60, column: 3)
!2177 = !DILocation(line: 60, column: 12, scope: !2176)
!2178 = !DILocation(line: 60, column: 16, scope: !2176)
!2179 = !DILocation(line: 60, column: 19, scope: !2176)
!2180 = !DILocation(line: 60, column: 23, scope: !2176)
!2181 = !DILocalVariable(name: "j", scope: !2182, file: !56, line: 62, type: !265, align: 8)
!2182 = distinct !DILexicalBlock(scope: !2176, file: !56, line: 61, column: 3)
!2183 = !DILocation(line: 62, column: 8, scope: !2182)
!2184 = !DILocation(line: 62, column: 12, scope: !2182)
!2185 = !DILocation(line: 62, column: 16, scope: !2182)
!2186 = !DILocation(line: 63, column: 4, scope: !2182)
!2187 = !DILocation(line: 63, column: 10, scope: !2182)
!2188 = !DILocation(line: 64, column: 4, scope: !2182)
!2189 = !DILocation(line: 64, column: 10, scope: !2182)
!2190 = !DILocation(line: 64, column: 16, scope: !2182)
!2191 = !DILocation(line: 64, column: 22, scope: !2182)
!2192 = !DILocation(line: 60, column: 36, scope: !2176)
!2193 = !DILocation(line: 66, column: 28, scope: !2078)
!2194 = !DILocation(line: 66, column: 40, scope: !2078)
!2195 = !DILocation(line: 66, column: 3, scope: !2078)
!2196 = !DILocation(line: 66, column: 14, scope: !2078)
!2197 = !DILocation(line: 545, column: 17, scope: !2198, inlinedAt: !2066)
!2198 = distinct !DILexicalBlock(scope: !2037, file: !2038, line: 544, column: 2)
!2199 = !DILocation(line: 545, column: 3, scope: !2198, inlinedAt: !2066)
!2200 = !DILocation(line: 549, column: 2, scope: !2198, inlinedAt: !2066)
!2201 = !DILocation(line: 37, column: 26, scope: !2103)
!2202 = distinct !DISubprogram(name: "entropy", linkageName: "std.math.random.entropy", scope: !56, file: !56, line: 75, type: !2203, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2203 = !DISubroutineType(types: !2204)
!2204 = !{!2205}
!2205 = !DICompositeType(tag: DW_TAG_array_type, baseType: !43, size: 256, align: 8, elements: !2206)
!2206 = !{!2207}
!2207 = !DISubrange(count: 32, lowerBound: 0)
!2208 = !DILocalVariable(name: "addr", scope: !2202, file: !56, line: 78, type: !2046, align: 8)
!2209 = !DILocation(line: 78, column: 8, scope: !2202)
!2210 = !DILocation(line: 78, column: 15, scope: !2202)
!2211 = !DILocation(line: 79, column: 7, scope: !2202)
!2212 = !DILocation(line: 79, column: 2, scope: !2202)
!2213 = !DILocation(line: 81, column: 2, scope: !2202)
!2214 = !DILocalVariable(name: "entropy_data", scope: !2202, file: !56, line: 82, type: !2215, align: 16)
!2215 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 256, align: 32, elements: !2216)
!2216 = !{!2217}
!2217 = !DISubrange(count: 8, lowerBound: 0)
!2218 = !DILocation(line: 82, column: 10, scope: !2202)
!2219 = !DILocation(line: 212, column: 20, scope: !2220, inlinedAt: !2221)
!2220 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2221 = !DILocation(line: 72, column: 26, scope: !2222, inlinedAt: !2223)
!2222 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !56, file: !56, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2223 = !DILocation(line: 83, column: 3, scope: !2202)
!2224 = !DILocation(line: 212, column: 12, scope: !2220, inlinedAt: !2221)
!2225 = !DILocation(line: 72, column: 17, scope: !2222, inlinedAt: !2223)
!2226 = !DILocation(line: 212, column: 20, scope: !2227, inlinedAt: !2228)
!2227 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2228 = !DILocation(line: 72, column: 26, scope: !2229, inlinedAt: !2230)
!2229 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !56, file: !56, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2230 = !DILocation(line: 84, column: 3, scope: !2202)
!2231 = !DILocation(line: 212, column: 12, scope: !2227, inlinedAt: !2228)
!2232 = !DILocation(line: 72, column: 17, scope: !2229, inlinedAt: !2230)
!2233 = !DILocation(line: 212, column: 20, scope: !2234, inlinedAt: !2235)
!2234 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2235 = !DILocation(line: 72, column: 26, scope: !2236, inlinedAt: !2237)
!2236 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !56, file: !56, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2237 = !DILocation(line: 85, column: 3, scope: !2202)
!2238 = !DILocation(line: 212, column: 12, scope: !2234, inlinedAt: !2235)
!2239 = !DILocation(line: 72, column: 17, scope: !2236, inlinedAt: !2237)
!2240 = !DILocation(line: 212, column: 20, scope: !2241, inlinedAt: !2242)
!2241 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2242 = !DILocation(line: 72, column: 26, scope: !2243, inlinedAt: !2244)
!2243 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !56, file: !56, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2244 = !DILocation(line: 86, column: 3, scope: !2202)
!2245 = !DILocation(line: 212, column: 12, scope: !2241, inlinedAt: !2242)
!2246 = !DILocation(line: 72, column: 17, scope: !2243, inlinedAt: !2244)
!2247 = !DILocation(line: 87, column: 3, scope: !2202)
!2248 = !DILocation(line: 88, column: 15, scope: !2202)
!2249 = !DILocation(line: 212, column: 20, scope: !2250, inlinedAt: !2251)
!2250 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2251 = !DILocation(line: 72, column: 26, scope: !2252, inlinedAt: !2253)
!2252 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !56, file: !56, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2253 = !DILocation(line: 88, column: 3, scope: !2202)
!2254 = !DILocation(line: 212, column: 12, scope: !2250, inlinedAt: !2251)
!2255 = !DILocation(line: 72, column: 17, scope: !2252, inlinedAt: !2253)
!2256 = !DILocation(line: 212, column: 20, scope: !2257, inlinedAt: !2258)
!2257 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2258 = !DILocation(line: 72, column: 26, scope: !2259, inlinedAt: !2260)
!2259 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !56, file: !56, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2260 = !DILocation(line: 89, column: 3, scope: !2202)
!2261 = !DILocation(line: 212, column: 12, scope: !2257, inlinedAt: !2258)
!2262 = !DILocation(line: 72, column: 17, scope: !2259, inlinedAt: !2260)
!2263 = !DILocation(line: 212, column: 20, scope: !2264, inlinedAt: !2265)
!2264 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2265 = !DILocation(line: 72, column: 26, scope: !2266, inlinedAt: !2267)
!2266 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !56, file: !56, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2267 = !DILocation(line: 90, column: 3, scope: !2202)
!2268 = !DILocation(line: 212, column: 12, scope: !2264, inlinedAt: !2265)
!2269 = !DILocation(line: 72, column: 17, scope: !2266, inlinedAt: !2267)
!2270 = !DILocation(line: 212, column: 20, scope: !2271, inlinedAt: !2272)
!2271 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2272 = !DILocation(line: 92, column: 9, scope: !2202)
!2273 = !DILocation(line: 212, column: 12, scope: !2271, inlinedAt: !2272)
!2274 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg128Random.set_seed", scope: !65, file: !65, line: 12, type: !2275, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2275 = !DISubroutineType(types: !2276)
!2276 = !{null, !2277, !260}
!2277 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg128Random*", baseType: !2278, size: 64, align: 64, dwarfAddressSpace: 0)
!2278 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg128Random", scope: !65, file: !65, line: 10, baseType: !15, align: 8)
!2279 = !DILocation(line: 13, column: 1, scope: !2274)
!2280 = !DILocalVariable(name: "self", arg: 1, scope: !2274, file: !65, line: 12, type: !2277)
!2281 = !DILocation(line: 12, column: 31, scope: !2274)
!2282 = !DILocalVariable(name: "seed", arg: 2, scope: !2274, file: !65, line: 12, type: !260)
!2283 = !DILocation(line: 12, column: 45, scope: !2274)
!2284 = !DILocation(line: 14, column: 3, scope: !2274)
!2285 = !DILocalVariable(name: "return_value", scope: !2286, file: !65, line: 10, type: !15, align: 8)
!2286 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2287 = !DILocation(line: 10, column: 8, scope: !2286, inlinedAt: !2288)
!2288 = !DILocation(line: 14, column: 33, scope: !2274)
!2289 = !DILocation(line: 342, column: 11, scope: !2290, inlinedAt: !2291)
!2290 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2291 = !DILocation(line: 11, column: 16, scope: !2286, inlinedAt: !2288)
!2292 = !DILocation(line: 11, column: 2, scope: !2286, inlinedAt: !2288)
!2293 = !DILocation(line: 12, column: 9, scope: !2286, inlinedAt: !2288)
!2294 = !DILocation(line: 14, column: 11, scope: !2274)
!2295 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg128Random.next_bytes", scope: !65, file: !65, line: 20, type: !2275, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2296 = !DILocation(line: 21, column: 1, scope: !2295)
!2297 = !DILocalVariable(name: "self", arg: 1, scope: !2295, file: !65, line: 20, type: !2277)
!2298 = !DILocation(line: 20, column: 33, scope: !2295)
!2299 = !DILocalVariable(name: "bytes", arg: 2, scope: !2295, file: !65, line: 20, type: !260)
!2300 = !DILocation(line: 20, column: 47, scope: !2295)
!2301 = !DILocation(line: 18, column: 11, scope: !2302)
!2302 = distinct !DILexicalBlock(scope: !2295, file: !65, line: 21, column: 1)
!2303 = !DILocalVariable(name: "len", scope: !2304, file: !65, line: 146, type: !265, align: 8)
!2304 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2305 = !DILocation(line: 146, column: 6, scope: !2304, inlinedAt: !2306)
!2306 = !DILocation(line: 22, column: 2, scope: !2295)
!2307 = !DILocation(line: 146, column: 12, scope: !2304, inlinedAt: !2306)
!2308 = !DILocation(line: 148, column: 2, scope: !2304, inlinedAt: !2306)
!2309 = !DILocation(line: 148, column: 9, scope: !2310, inlinedAt: !2306)
!2310 = distinct !DILexicalBlock(scope: !2304, file: !2, line: 148, column: 2)
!2311 = !DILocalVariable(name: "value", scope: !2312, file: !65, line: 150, type: !6, align: 8)
!2312 = distinct !DILexicalBlock(scope: !2310, file: !2, line: 149, column: 2)
!2313 = !DILocation(line: 150, column: 7, scope: !2312, inlinedAt: !2306)
!2314 = !DILocation(line: 22, column: 25, scope: !2312, inlinedAt: !2306)
!2315 = !DILocation(line: 150, column: 15, scope: !2312, inlinedAt: !2306)
!2316 = !DILocation(line: 151, column: 7, scope: !2312, inlinedAt: !2306)
!2317 = !DILocation(line: 153, column: 33, scope: !2318, inlinedAt: !2306)
!2318 = distinct !DILexicalBlock(scope: !2312, file: !2, line: 152, column: 3)
!2319 = !DILocation(line: 153, column: 4, scope: !2318, inlinedAt: !2306)
!2320 = !DILocation(line: 153, column: 10, scope: !2318, inlinedAt: !2306)
!2321 = !DILocation(line: 154, column: 10, scope: !2318, inlinedAt: !2306)
!2322 = !DILocation(line: 156, column: 3, scope: !2312, inlinedAt: !2306)
!2323 = !DILocation(line: 157, column: 3, scope: !2312, inlinedAt: !2306)
!2324 = !DILocation(line: 158, column: 11, scope: !2312, inlinedAt: !2306)
!2325 = !DILocation(line: 158, column: 17, scope: !2312, inlinedAt: !2306)
!2326 = !DILocation(line: 164, column: 33, scope: !2327, inlinedAt: !2328)
!2327 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2328 = !DILocation(line: 160, column: 2, scope: !2304, inlinedAt: !2306)
!2329 = !DILocation(line: 164, column: 2, scope: !2327, inlinedAt: !2328)
!2330 = !DILocation(line: 166, column: 2, scope: !2327, inlinedAt: !2328)
!2331 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg128Random.next_long", scope: !65, file: !65, line: 25, type: !2332, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2332 = !DISubroutineType(types: !2333)
!2333 = !{!6, !2277}
!2334 = !DILocation(line: 26, column: 1, scope: !2331)
!2335 = !DILocalVariable(name: "self", arg: 1, scope: !2331, file: !65, line: 25, type: !2277)
!2336 = !DILocation(line: 25, column: 33, scope: !2331)
!2337 = !DILocalVariable(name: "s", scope: !2331, file: !65, line: 27, type: !288, align: 8)
!2338 = !DILocation(line: 27, column: 11, scope: !2331)
!2339 = !DILocation(line: 27, column: 16, scope: !2331)
!2340 = !DILocalVariable(name: "result", scope: !2331, file: !65, line: 28, type: !6, align: 8)
!2341 = !DILocation(line: 28, column: 8, scope: !2331)
!2342 = !DILocation(line: 28, column: 26, scope: !2331)
!2343 = !DILocation(line: 28, column: 18, scope: !2331)
!2344 = !DILocation(line: 29, column: 3, scope: !2331)
!2345 = !DILocation(line: 29, column: 2, scope: !2331)
!2346 = !DILocation(line: 30, column: 9, scope: !2331)
!2347 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg128Random.next_int128", scope: !65, file: !65, line: 33, type: !2348, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2348 = !DISubroutineType(types: !2349)
!2349 = !{!15, !2277}
!2350 = !DILocation(line: 33, column: 56, scope: !2347)
!2351 = !DILocalVariable(name: "self", arg: 1, scope: !2347, file: !65, line: 33, type: !2277)
!2352 = !DILocation(line: 33, column: 37, scope: !2347)
!2353 = !DILocation(line: 33, column: 72, scope: !2354, inlinedAt: !2350)
!2354 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2355 = !DILocation(line: 138, column: 46, scope: !2354, inlinedAt: !2350)
!2356 = !DILocation(line: 138, column: 72, scope: !2354, inlinedAt: !2350)
!2357 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg128Random.next_int", scope: !65, file: !65, line: 34, type: !2358, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2358 = !DISubroutineType(types: !2359)
!2359 = !{!20, !2277}
!2360 = !DILocation(line: 34, column: 50, scope: !2357)
!2361 = !DILocalVariable(name: "self", arg: 1, scope: !2357, file: !65, line: 34, type: !2277)
!2362 = !DILocation(line: 34, column: 31, scope: !2357)
!2363 = !DILocation(line: 34, column: 56, scope: !2357)
!2364 = !DILocation(line: 34, column: 51, scope: !2357)
!2365 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg128Random.next_short", scope: !65, file: !65, line: 35, type: !2366, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2366 = !DISubroutineType(types: !2367)
!2367 = !{!23, !2277}
!2368 = !DILocation(line: 35, column: 54, scope: !2365)
!2369 = !DILocalVariable(name: "self", arg: 1, scope: !2365, file: !65, line: 35, type: !2277)
!2370 = !DILocation(line: 35, column: 35, scope: !2365)
!2371 = !DILocation(line: 35, column: 62, scope: !2365)
!2372 = !DILocation(line: 35, column: 55, scope: !2365)
!2373 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg128Random.next_byte", scope: !65, file: !65, line: 36, type: !2374, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2374 = !DISubroutineType(types: !2375)
!2375 = !{!43, !2277}
!2376 = !DILocation(line: 36, column: 51, scope: !2373)
!2377 = !DILocalVariable(name: "self", arg: 1, scope: !2373, file: !65, line: 36, type: !2277)
!2378 = !DILocation(line: 36, column: 32, scope: !2373)
!2379 = !DILocation(line: 36, column: 57, scope: !2373)
!2380 = !DILocation(line: 36, column: 52, scope: !2373)
!2381 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg64Random.set_seed", scope: !65, file: !65, line: 45, type: !2382, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2382 = !DISubroutineType(types: !2383)
!2383 = !{null, !2384, !260}
!2384 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg64Random*", baseType: !2385, size: 64, align: 64, dwarfAddressSpace: 0)
!2385 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg64Random", scope: !65, file: !65, line: 43, baseType: !6, align: 8)
!2386 = !DILocation(line: 46, column: 1, scope: !2381)
!2387 = !DILocalVariable(name: "self", arg: 1, scope: !2381, file: !65, line: 45, type: !2384)
!2388 = !DILocation(line: 45, column: 30, scope: !2381)
!2389 = !DILocalVariable(name: "seed", arg: 2, scope: !2381, file: !65, line: 45, type: !260)
!2390 = !DILocation(line: 45, column: 44, scope: !2381)
!2391 = !DILocation(line: 47, column: 3, scope: !2381)
!2392 = !DILocalVariable(name: "return_value", scope: !2393, file: !65, line: 10, type: !6, align: 8)
!2393 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2394 = !DILocation(line: 10, column: 8, scope: !2393, inlinedAt: !2395)
!2395 = !DILocation(line: 47, column: 11, scope: !2381)
!2396 = !DILocation(line: 342, column: 11, scope: !2397, inlinedAt: !2398)
!2397 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2398 = !DILocation(line: 11, column: 16, scope: !2393, inlinedAt: !2395)
!2399 = !DILocation(line: 11, column: 2, scope: !2393, inlinedAt: !2395)
!2400 = !DILocation(line: 12, column: 9, scope: !2393, inlinedAt: !2395)
!2401 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg64Random.next_bytes", scope: !65, file: !65, line: 53, type: !2382, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2402 = !DILocation(line: 54, column: 1, scope: !2401)
!2403 = !DILocalVariable(name: "self", arg: 1, scope: !2401, file: !65, line: 53, type: !2384)
!2404 = !DILocation(line: 53, column: 32, scope: !2401)
!2405 = !DILocalVariable(name: "bytes", arg: 2, scope: !2401, file: !65, line: 53, type: !260)
!2406 = !DILocation(line: 53, column: 46, scope: !2401)
!2407 = !DILocation(line: 51, column: 11, scope: !2408)
!2408 = distinct !DILexicalBlock(scope: !2401, file: !65, line: 54, column: 1)
!2409 = !DILocalVariable(name: "len", scope: !2410, file: !65, line: 146, type: !265, align: 8)
!2410 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2411 = !DILocation(line: 146, column: 6, scope: !2410, inlinedAt: !2412)
!2412 = !DILocation(line: 55, column: 2, scope: !2401)
!2413 = !DILocation(line: 146, column: 12, scope: !2410, inlinedAt: !2412)
!2414 = !DILocation(line: 148, column: 2, scope: !2410, inlinedAt: !2412)
!2415 = !DILocation(line: 148, column: 9, scope: !2416, inlinedAt: !2412)
!2416 = distinct !DILexicalBlock(scope: !2410, file: !2, line: 148, column: 2)
!2417 = !DILocalVariable(name: "value", scope: !2418, file: !65, line: 150, type: !20, align: 4)
!2418 = distinct !DILexicalBlock(scope: !2416, file: !2, line: 149, column: 2)
!2419 = !DILocation(line: 150, column: 7, scope: !2418, inlinedAt: !2412)
!2420 = !DILocation(line: 55, column: 25, scope: !2418, inlinedAt: !2412)
!2421 = !DILocation(line: 150, column: 15, scope: !2418, inlinedAt: !2412)
!2422 = !DILocation(line: 151, column: 7, scope: !2418, inlinedAt: !2412)
!2423 = !DILocation(line: 153, column: 33, scope: !2424, inlinedAt: !2412)
!2424 = distinct !DILexicalBlock(scope: !2418, file: !2, line: 152, column: 3)
!2425 = !DILocation(line: 153, column: 4, scope: !2424, inlinedAt: !2412)
!2426 = !DILocation(line: 153, column: 10, scope: !2424, inlinedAt: !2412)
!2427 = !DILocation(line: 154, column: 10, scope: !2424, inlinedAt: !2412)
!2428 = !DILocation(line: 156, column: 3, scope: !2418, inlinedAt: !2412)
!2429 = !DILocation(line: 157, column: 3, scope: !2418, inlinedAt: !2412)
!2430 = !DILocation(line: 158, column: 11, scope: !2418, inlinedAt: !2412)
!2431 = !DILocation(line: 158, column: 17, scope: !2418, inlinedAt: !2412)
!2432 = !DILocation(line: 164, column: 33, scope: !2433, inlinedAt: !2434)
!2433 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2434 = !DILocation(line: 160, column: 2, scope: !2410, inlinedAt: !2412)
!2435 = !DILocation(line: 164, column: 2, scope: !2433, inlinedAt: !2434)
!2436 = !DILocation(line: 166, column: 2, scope: !2433, inlinedAt: !2434)
!2437 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg64Random.next_int", scope: !65, file: !65, line: 58, type: !2438, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2438 = !DISubroutineType(types: !2439)
!2439 = !{!20, !2384}
!2440 = !DILocation(line: 59, column: 1, scope: !2437)
!2441 = !DILocalVariable(name: "self", arg: 1, scope: !2437, file: !65, line: 58, type: !2384)
!2442 = !DILocation(line: 58, column: 30, scope: !2437)
!2443 = !DILocalVariable(name: "s", scope: !2437, file: !65, line: 60, type: !395, align: 8)
!2444 = !DILocation(line: 60, column: 9, scope: !2437)
!2445 = !DILocation(line: 60, column: 14, scope: !2437)
!2446 = !DILocalVariable(name: "result", scope: !2437, file: !65, line: 61, type: !20, align: 4)
!2447 = !DILocation(line: 61, column: 7, scope: !2437)
!2448 = !DILocation(line: 61, column: 24, scope: !2437)
!2449 = !DILocation(line: 61, column: 17, scope: !2437)
!2450 = !DILocation(line: 62, column: 3, scope: !2437)
!2451 = !DILocation(line: 62, column: 2, scope: !2437)
!2452 = !DILocation(line: 63, column: 9, scope: !2437)
!2453 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg64Random.next_int128", scope: !65, file: !65, line: 66, type: !2454, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2454 = !DISubroutineType(types: !2455)
!2455 = !{!15, !2384}
!2456 = !DILocation(line: 66, column: 55, scope: !2453)
!2457 = !DILocalVariable(name: "self", arg: 1, scope: !2453, file: !65, line: 66, type: !2384)
!2458 = !DILocation(line: 66, column: 36, scope: !2453)
!2459 = !DILocation(line: 66, column: 71, scope: !2460, inlinedAt: !2456)
!2460 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2461 = !DILocation(line: 138, column: 46, scope: !2460, inlinedAt: !2456)
!2462 = !DILocation(line: 138, column: 72, scope: !2460, inlinedAt: !2456)
!2463 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg64Random.next_long", scope: !65, file: !65, line: 67, type: !2464, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2464 = !DISubroutineType(types: !2465)
!2465 = !{!6, !2384}
!2466 = !DILocation(line: 67, column: 51, scope: !2463)
!2467 = !DILocalVariable(name: "self", arg: 1, scope: !2463, file: !65, line: 67, type: !2384)
!2468 = !DILocation(line: 67, column: 32, scope: !2463)
!2469 = !DILocation(line: 67, column: 64, scope: !2470, inlinedAt: !2466)
!2470 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2471 = !DILocation(line: 139, column: 41, scope: !2470, inlinedAt: !2466)
!2472 = !DILocation(line: 139, column: 65, scope: !2470, inlinedAt: !2466)
!2473 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg64Random.next_short", scope: !65, file: !65, line: 68, type: !2474, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2474 = !DISubroutineType(types: !2475)
!2475 = !{!23, !2384}
!2476 = !DILocation(line: 68, column: 53, scope: !2473)
!2477 = !DILocalVariable(name: "self", arg: 1, scope: !2473, file: !65, line: 68, type: !2384)
!2478 = !DILocation(line: 68, column: 34, scope: !2473)
!2479 = !DILocation(line: 68, column: 61, scope: !2473)
!2480 = !DILocation(line: 68, column: 54, scope: !2473)
!2481 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg64Random.next_byte", scope: !65, file: !65, line: 69, type: !2482, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2482 = !DISubroutineType(types: !2483)
!2483 = !{!43, !2384}
!2484 = !DILocation(line: 69, column: 50, scope: !2481)
!2485 = !DILocalVariable(name: "self", arg: 1, scope: !2481, file: !65, line: 69, type: !2384)
!2486 = !DILocation(line: 69, column: 31, scope: !2481)
!2487 = !DILocation(line: 69, column: 56, scope: !2481)
!2488 = !DILocation(line: 69, column: 51, scope: !2481)
!2489 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg32Random.set_seed", scope: !65, file: !65, line: 76, type: !2490, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2490 = !DISubroutineType(types: !2491)
!2491 = !{null, !2492, !260}
!2492 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg32Random*", baseType: !2493, size: 64, align: 64, dwarfAddressSpace: 0)
!2493 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg32Random", scope: !65, file: !65, line: 74, baseType: !20, align: 4)
!2494 = !DILocation(line: 77, column: 1, scope: !2489)
!2495 = !DILocalVariable(name: "self", arg: 1, scope: !2489, file: !65, line: 76, type: !2492)
!2496 = !DILocation(line: 76, column: 30, scope: !2489)
!2497 = !DILocalVariable(name: "seed", arg: 2, scope: !2489, file: !65, line: 76, type: !260)
!2498 = !DILocation(line: 76, column: 44, scope: !2489)
!2499 = !DILocation(line: 78, column: 3, scope: !2489)
!2500 = !DILocalVariable(name: "return_value", scope: !2501, file: !65, line: 10, type: !20, align: 4)
!2501 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2502 = !DILocation(line: 10, column: 8, scope: !2501, inlinedAt: !2503)
!2503 = !DILocation(line: 78, column: 11, scope: !2489)
!2504 = !DILocation(line: 342, column: 11, scope: !2505, inlinedAt: !2506)
!2505 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2506 = !DILocation(line: 11, column: 16, scope: !2501, inlinedAt: !2503)
!2507 = !DILocation(line: 11, column: 2, scope: !2501, inlinedAt: !2503)
!2508 = !DILocation(line: 12, column: 9, scope: !2501, inlinedAt: !2503)
!2509 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg32Random.next_short", scope: !65, file: !65, line: 81, type: !2510, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2510 = !DISubroutineType(types: !2511)
!2511 = !{!23, !2492}
!2512 = !DILocation(line: 82, column: 1, scope: !2509)
!2513 = !DILocalVariable(name: "self", arg: 1, scope: !2509, file: !65, line: 81, type: !2492)
!2514 = !DILocation(line: 81, column: 34, scope: !2509)
!2515 = !DILocalVariable(name: "s", scope: !2509, file: !65, line: 83, type: !504, align: 8)
!2516 = !DILocation(line: 83, column: 8, scope: !2509)
!2517 = !DILocation(line: 83, column: 13, scope: !2509)
!2518 = !DILocalVariable(name: "result", scope: !2509, file: !65, line: 84, type: !23, align: 2)
!2519 = !DILocation(line: 84, column: 9, scope: !2509)
!2520 = !DILocation(line: 84, column: 28, scope: !2509)
!2521 = !DILocation(line: 84, column: 19, scope: !2509)
!2522 = !DILocation(line: 85, column: 3, scope: !2509)
!2523 = !DILocation(line: 85, column: 2, scope: !2509)
!2524 = !DILocation(line: 86, column: 9, scope: !2509)
!2525 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg32Random.next_bytes", scope: !65, file: !65, line: 92, type: !2490, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2526 = !DILocation(line: 92, column: 65, scope: !2525)
!2527 = !DILocalVariable(name: "self", arg: 1, scope: !2525, file: !65, line: 92, type: !2492)
!2528 = !DILocation(line: 92, column: 32, scope: !2525)
!2529 = !DILocalVariable(name: "bytes", arg: 2, scope: !2525, file: !65, line: 92, type: !260)
!2530 = !DILocation(line: 92, column: 46, scope: !2525)
!2531 = !DILocation(line: 90, column: 11, scope: !2532)
!2532 = distinct !DILexicalBlock(scope: !2525, file: !65, line: 92, column: 65)
!2533 = !DILocalVariable(name: "len", scope: !2534, file: !65, line: 146, type: !265, align: 8)
!2534 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2535 = !DILocation(line: 146, column: 6, scope: !2534, inlinedAt: !2526)
!2536 = !DILocation(line: 146, column: 12, scope: !2534, inlinedAt: !2526)
!2537 = !DILocation(line: 148, column: 2, scope: !2534, inlinedAt: !2526)
!2538 = !DILocation(line: 148, column: 9, scope: !2539, inlinedAt: !2526)
!2539 = distinct !DILexicalBlock(scope: !2534, file: !2, line: 148, column: 2)
!2540 = !DILocalVariable(name: "value", scope: !2541, file: !65, line: 150, type: !23, align: 2)
!2541 = distinct !DILexicalBlock(scope: !2539, file: !2, line: 149, column: 2)
!2542 = !DILocation(line: 150, column: 7, scope: !2541, inlinedAt: !2526)
!2543 = !DILocation(line: 92, column: 88, scope: !2541, inlinedAt: !2526)
!2544 = !DILocation(line: 150, column: 15, scope: !2541, inlinedAt: !2526)
!2545 = !DILocation(line: 151, column: 7, scope: !2541, inlinedAt: !2526)
!2546 = !DILocation(line: 153, column: 33, scope: !2547, inlinedAt: !2526)
!2547 = distinct !DILexicalBlock(scope: !2541, file: !2, line: 152, column: 3)
!2548 = !DILocation(line: 153, column: 4, scope: !2547, inlinedAt: !2526)
!2549 = !DILocation(line: 153, column: 10, scope: !2547, inlinedAt: !2526)
!2550 = !DILocation(line: 154, column: 10, scope: !2547, inlinedAt: !2526)
!2551 = !DILocation(line: 156, column: 3, scope: !2541, inlinedAt: !2526)
!2552 = !DILocation(line: 157, column: 3, scope: !2541, inlinedAt: !2526)
!2553 = !DILocation(line: 158, column: 11, scope: !2541, inlinedAt: !2526)
!2554 = !DILocation(line: 158, column: 17, scope: !2541, inlinedAt: !2526)
!2555 = !DILocation(line: 164, column: 33, scope: !2556, inlinedAt: !2557)
!2556 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2557 = !DILocation(line: 160, column: 2, scope: !2534, inlinedAt: !2526)
!2558 = !DILocation(line: 164, column: 2, scope: !2556, inlinedAt: !2557)
!2559 = !DILocation(line: 166, column: 2, scope: !2556, inlinedAt: !2557)
!2560 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg32Random.next_int128", scope: !65, file: !65, line: 93, type: !2561, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2561 = !DISubroutineType(types: !2562)
!2562 = !{!15, !2492}
!2563 = !DILocation(line: 93, column: 55, scope: !2560)
!2564 = !DILocalVariable(name: "self", arg: 1, scope: !2560, file: !65, line: 93, type: !2492)
!2565 = !DILocation(line: 93, column: 36, scope: !2560)
!2566 = !DILocation(line: 93, column: 71, scope: !2567, inlinedAt: !2563)
!2567 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2568 = !DILocation(line: 138, column: 46, scope: !2567, inlinedAt: !2563)
!2569 = !DILocation(line: 138, column: 72, scope: !2567, inlinedAt: !2563)
!2570 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg32Random.next_long", scope: !65, file: !65, line: 94, type: !2571, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2571 = !DISubroutineType(types: !2572)
!2572 = !{!6, !2492}
!2573 = !DILocation(line: 94, column: 51, scope: !2570)
!2574 = !DILocalVariable(name: "self", arg: 1, scope: !2570, file: !65, line: 94, type: !2492)
!2575 = !DILocation(line: 94, column: 32, scope: !2570)
!2576 = !DILocation(line: 94, column: 64, scope: !2577, inlinedAt: !2573)
!2577 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2578 = !DILocation(line: 139, column: 41, scope: !2577, inlinedAt: !2573)
!2579 = !DILocation(line: 139, column: 65, scope: !2577, inlinedAt: !2573)
!2580 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg32Random.next_int", scope: !65, file: !65, line: 95, type: !2581, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2581 = !DISubroutineType(types: !2582)
!2582 = !{!20, !2492}
!2583 = !DILocation(line: 95, column: 49, scope: !2580)
!2584 = !DILocalVariable(name: "self", arg: 1, scope: !2580, file: !65, line: 95, type: !2492)
!2585 = !DILocation(line: 95, column: 30, scope: !2580)
!2586 = !DILocation(line: 95, column: 63, scope: !2587, inlinedAt: !2583)
!2587 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2588 = !DILocation(line: 140, column: 41, scope: !2587, inlinedAt: !2583)
!2589 = !DILocation(line: 140, column: 64, scope: !2587, inlinedAt: !2583)
!2590 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg32Random.next_byte", scope: !65, file: !65, line: 96, type: !2591, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2591 = !DISubroutineType(types: !2592)
!2592 = !{!43, !2492}
!2593 = !DILocation(line: 96, column: 50, scope: !2590)
!2594 = !DILocalVariable(name: "self", arg: 1, scope: !2590, file: !65, line: 96, type: !2492)
!2595 = !DILocation(line: 96, column: 31, scope: !2590)
!2596 = !DILocation(line: 96, column: 56, scope: !2590)
!2597 = !DILocation(line: 96, column: 51, scope: !2590)
!2598 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg16Random.set_seed", scope: !65, file: !65, line: 102, type: !2599, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2599 = !DISubroutineType(types: !2600)
!2600 = !{null, !2601, !260}
!2601 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg16Random*", baseType: !2602, size: 64, align: 64, dwarfAddressSpace: 0)
!2602 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg16Random", scope: !65, file: !65, line: 100, baseType: !23, align: 2)
!2603 = !DILocation(line: 103, column: 1, scope: !2598)
!2604 = !DILocalVariable(name: "self", arg: 1, scope: !2598, file: !65, line: 102, type: !2601)
!2605 = !DILocation(line: 102, column: 30, scope: !2598)
!2606 = !DILocalVariable(name: "seed", arg: 2, scope: !2598, file: !65, line: 102, type: !260)
!2607 = !DILocation(line: 102, column: 44, scope: !2598)
!2608 = !DILocation(line: 104, column: 3, scope: !2598)
!2609 = !DILocalVariable(name: "return_value", scope: !2610, file: !65, line: 10, type: !23, align: 2)
!2610 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2611 = !DILocation(line: 10, column: 8, scope: !2610, inlinedAt: !2612)
!2612 = !DILocation(line: 104, column: 11, scope: !2598)
!2613 = !DILocation(line: 342, column: 11, scope: !2614, inlinedAt: !2615)
!2614 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2615 = !DILocation(line: 11, column: 16, scope: !2610, inlinedAt: !2612)
!2616 = !DILocation(line: 11, column: 2, scope: !2610, inlinedAt: !2612)
!2617 = !DILocation(line: 12, column: 9, scope: !2610, inlinedAt: !2612)
!2618 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg16Random.next_byte", scope: !65, file: !65, line: 107, type: !2619, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2619 = !DISubroutineType(types: !2620)
!2620 = !{!43, !2601}
!2621 = !DILocation(line: 108, column: 1, scope: !2618)
!2622 = !DILocalVariable(name: "self", arg: 1, scope: !2618, file: !65, line: 107, type: !2601)
!2623 = !DILocation(line: 107, column: 31, scope: !2618)
!2624 = !DILocalVariable(name: "s", scope: !2618, file: !65, line: 109, type: !613, align: 8)
!2625 = !DILocation(line: 109, column: 10, scope: !2618)
!2626 = !DILocation(line: 109, column: 15, scope: !2618)
!2627 = !DILocalVariable(name: "result", scope: !2618, file: !65, line: 110, type: !43, align: 1)
!2628 = !DILocation(line: 110, column: 7, scope: !2618)
!2629 = !DILocation(line: 110, column: 24, scope: !2618)
!2630 = !DILocation(line: 110, column: 17, scope: !2618)
!2631 = !DILocation(line: 111, column: 3, scope: !2618)
!2632 = !DILocation(line: 111, column: 2, scope: !2618)
!2633 = !DILocation(line: 112, column: 9, scope: !2618)
!2634 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg16Random.next_bytes", scope: !65, file: !65, line: 115, type: !2599, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2635 = !DILocation(line: 115, column: 65, scope: !2634)
!2636 = !DILocalVariable(name: "self", arg: 1, scope: !2634, file: !65, line: 115, type: !2601)
!2637 = !DILocation(line: 115, column: 32, scope: !2634)
!2638 = !DILocalVariable(name: "bytes", arg: 2, scope: !2634, file: !65, line: 115, type: !260)
!2639 = !DILocation(line: 115, column: 46, scope: !2634)
!2640 = !DILocalVariable(name: "len", scope: !2641, file: !65, line: 146, type: !265, align: 8)
!2641 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2642 = !DILocation(line: 146, column: 6, scope: !2641, inlinedAt: !2635)
!2643 = !DILocation(line: 146, column: 12, scope: !2641, inlinedAt: !2635)
!2644 = !DILocation(line: 148, column: 2, scope: !2641, inlinedAt: !2635)
!2645 = !DILocation(line: 148, column: 9, scope: !2646, inlinedAt: !2635)
!2646 = distinct !DILexicalBlock(scope: !2641, file: !2, line: 148, column: 2)
!2647 = !DILocalVariable(name: "value", scope: !2648, file: !65, line: 150, type: !43, align: 1)
!2648 = distinct !DILexicalBlock(scope: !2646, file: !2, line: 149, column: 2)
!2649 = !DILocation(line: 150, column: 7, scope: !2648, inlinedAt: !2635)
!2650 = !DILocation(line: 115, column: 88, scope: !2648, inlinedAt: !2635)
!2651 = !DILocation(line: 150, column: 15, scope: !2648, inlinedAt: !2635)
!2652 = !DILocation(line: 151, column: 7, scope: !2648, inlinedAt: !2635)
!2653 = !DILocation(line: 153, column: 33, scope: !2654, inlinedAt: !2635)
!2654 = distinct !DILexicalBlock(scope: !2648, file: !2, line: 152, column: 3)
!2655 = !DILocation(line: 153, column: 4, scope: !2654, inlinedAt: !2635)
!2656 = !DILocation(line: 153, column: 10, scope: !2654, inlinedAt: !2635)
!2657 = !DILocation(line: 154, column: 10, scope: !2654, inlinedAt: !2635)
!2658 = !DILocation(line: 156, column: 3, scope: !2648, inlinedAt: !2635)
!2659 = !DILocation(line: 157, column: 3, scope: !2648, inlinedAt: !2635)
!2660 = !DILocation(line: 158, column: 11, scope: !2648, inlinedAt: !2635)
!2661 = !DILocation(line: 158, column: 17, scope: !2648, inlinedAt: !2635)
!2662 = !DILocation(line: 164, column: 33, scope: !2663, inlinedAt: !2664)
!2663 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2664 = !DILocation(line: 160, column: 2, scope: !2641, inlinedAt: !2635)
!2665 = !DILocation(line: 164, column: 2, scope: !2663, inlinedAt: !2664)
!2666 = !DILocation(line: 166, column: 2, scope: !2663, inlinedAt: !2664)
!2667 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg16Random.next_int128", scope: !65, file: !65, line: 116, type: !2668, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2668 = !DISubroutineType(types: !2669)
!2669 = !{!15, !2601}
!2670 = !DILocation(line: 116, column: 55, scope: !2667)
!2671 = !DILocalVariable(name: "self", arg: 1, scope: !2667, file: !65, line: 116, type: !2601)
!2672 = !DILocation(line: 116, column: 36, scope: !2667)
!2673 = !DILocation(line: 116, column: 71, scope: !2674, inlinedAt: !2670)
!2674 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2675 = !DILocation(line: 138, column: 46, scope: !2674, inlinedAt: !2670)
!2676 = !DILocation(line: 138, column: 72, scope: !2674, inlinedAt: !2670)
!2677 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg16Random.next_long", scope: !65, file: !65, line: 117, type: !2678, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2678 = !DISubroutineType(types: !2679)
!2679 = !{!6, !2601}
!2680 = !DILocation(line: 117, column: 51, scope: !2677)
!2681 = !DILocalVariable(name: "self", arg: 1, scope: !2677, file: !65, line: 117, type: !2601)
!2682 = !DILocation(line: 117, column: 32, scope: !2677)
!2683 = !DILocation(line: 117, column: 64, scope: !2684, inlinedAt: !2680)
!2684 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2685 = !DILocation(line: 139, column: 41, scope: !2684, inlinedAt: !2680)
!2686 = !DILocation(line: 139, column: 65, scope: !2684, inlinedAt: !2680)
!2687 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg16Random.next_int", scope: !65, file: !65, line: 118, type: !2688, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2688 = !DISubroutineType(types: !2689)
!2689 = !{!20, !2601}
!2690 = !DILocation(line: 118, column: 49, scope: !2687)
!2691 = !DILocalVariable(name: "self", arg: 1, scope: !2687, file: !65, line: 118, type: !2601)
!2692 = !DILocation(line: 118, column: 30, scope: !2687)
!2693 = !DILocation(line: 118, column: 63, scope: !2694, inlinedAt: !2690)
!2694 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2695 = !DILocation(line: 140, column: 41, scope: !2694, inlinedAt: !2690)
!2696 = !DILocation(line: 140, column: 64, scope: !2694, inlinedAt: !2690)
!2697 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg16Random.next_short", scope: !65, file: !65, line: 119, type: !2698, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2698 = !DISubroutineType(types: !2699)
!2699 = !{!23, !2601}
!2700 = !DILocation(line: 119, column: 53, scope: !2697)
!2701 = !DILocalVariable(name: "self", arg: 1, scope: !2697, file: !65, line: 119, type: !2601)
!2702 = !DILocation(line: 119, column: 34, scope: !2697)
!2703 = !DILocation(line: 119, column: 68, scope: !2704, inlinedAt: !2700)
!2704 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2705 = !DILocation(line: 141, column: 44, scope: !2704, inlinedAt: !2700)
!2706 = !DILocation(line: 141, column: 68, scope: !2704, inlinedAt: !2700)
!2707 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.SimpleRandom.set_seed", scope: !74, file: !74, line: 6, type: !2708, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2708 = !DISubroutineType(types: !2709)
!2709 = !{null, !2710, !260}
!2710 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "SimpleRandom*", baseType: !2711, size: 64, align: 64, dwarfAddressSpace: 0)
!2711 = !DIDerivedType(tag: DW_TAG_typedef, name: "SimpleRandom", scope: !74, file: !74, line: 3, baseType: !6, align: 8)
!2712 = !DILocation(line: 7, column: 1, scope: !2707)
!2713 = !DILocalVariable(name: "self", arg: 1, scope: !2707, file: !74, line: 6, type: !2710)
!2714 = !DILocation(line: 6, column: 31, scope: !2707)
!2715 = !DILocalVariable(name: "seed", arg: 2, scope: !2707, file: !74, line: 6, type: !260)
!2716 = !DILocation(line: 6, column: 45, scope: !2707)
!2717 = !DILocalVariable(name: "full", scope: !2707, file: !74, line: 8, type: !2718, align: 1)
!2718 = !DICompositeType(tag: DW_TAG_array_type, baseType: !43, size: 64, align: 8, elements: !2216)
!2719 = !DILocation(line: 8, column: 10, scope: !2707)
!2720 = !DILocalVariable(name: ".temp", scope: !2721, file: !74, line: 9, type: !265, align: 8)
!2721 = distinct !DILexicalBlock(scope: !2707, file: !74, line: 9, column: 2)
!2722 = !DILocation(line: 9, column: 18, scope: !2721)
!2723 = !DILocation(line: 9, column: 11, scope: !2721)
!2724 = !DILocalVariable(name: "i", scope: !2725, file: !74, line: 9, type: !265, align: 8)
!2725 = distinct !DILexicalBlock(scope: !2721, file: !74, line: 10, column: 2)
!2726 = !DILocation(line: 9, column: 11, scope: !2725)
!2727 = !DILocalVariable(name: "c", scope: !2725, file: !74, line: 9, type: !43, align: 1)
!2728 = !DILocation(line: 9, column: 14, scope: !2725)
!2729 = !DILocation(line: 9, column: 18, scope: !2725)
!2730 = !DILocation(line: 11, column: 8, scope: !2731)
!2731 = distinct !DILexicalBlock(scope: !2725, file: !74, line: 10, column: 2)
!2732 = !DILocation(line: 11, column: 18, scope: !2731)
!2733 = !DILocation(line: 11, column: 3, scope: !2731)
!2734 = !DILocation(line: 13, column: 3, scope: !2707)
!2735 = !DILocalVariable(name: "x", scope: !2736, file: !74, line: 214, type: !6, align: 8)
!2736 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2737 = !DILocation(line: 214, column: 9, scope: !2736, inlinedAt: !2738)
!2738 = !DILocation(line: 13, column: 25, scope: !2707)
!2739 = !DILocation(line: 215, column: 38, scope: !2736, inlinedAt: !2738)
!2740 = !DILocation(line: 216, column: 10, scope: !2736, inlinedAt: !2738)
!2741 = !DILocation(line: 13, column: 11, scope: !2707)
!2742 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.SimpleRandom.next_int", scope: !74, file: !74, line: 16, type: !2743, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2743 = !DISubroutineType(types: !2744)
!2744 = !{!20, !2710}
!2745 = !DILocation(line: 17, column: 1, scope: !2742)
!2746 = !DILocalVariable(name: "self", arg: 1, scope: !2742, file: !74, line: 16, type: !2710)
!2747 = !DILocation(line: 16, column: 31, scope: !2742)
!2748 = !DILocalVariable(name: "nextseed", scope: !2742, file: !74, line: 18, type: !6, align: 8)
!2749 = !DILocation(line: 18, column: 8, scope: !2742)
!2750 = !DILocation(line: 18, column: 28, scope: !2742)
!2751 = !DILocation(line: 18, column: 21, scope: !2742)
!2752 = !DILocation(line: 19, column: 3, scope: !2742)
!2753 = !DILocation(line: 19, column: 11, scope: !2742)
!2754 = !DILocation(line: 20, column: 16, scope: !2742)
!2755 = !DILocation(line: 20, column: 10, scope: !2742)
!2756 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.SimpleRandom.next_bytes", scope: !74, file: !74, line: 26, type: !2708, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2757 = !DILocation(line: 26, column: 66, scope: !2756)
!2758 = !DILocalVariable(name: "self", arg: 1, scope: !2756, file: !74, line: 26, type: !2710)
!2759 = !DILocation(line: 26, column: 33, scope: !2756)
!2760 = !DILocalVariable(name: "bytes", arg: 2, scope: !2756, file: !74, line: 26, type: !260)
!2761 = !DILocation(line: 26, column: 47, scope: !2756)
!2762 = !DILocation(line: 24, column: 11, scope: !2763)
!2763 = distinct !DILexicalBlock(scope: !2756, file: !74, line: 26, column: 66)
!2764 = !DILocalVariable(name: "len", scope: !2765, file: !74, line: 146, type: !265, align: 8)
!2765 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2766 = !DILocation(line: 146, column: 6, scope: !2765, inlinedAt: !2757)
!2767 = !DILocation(line: 146, column: 12, scope: !2765, inlinedAt: !2757)
!2768 = !DILocation(line: 148, column: 2, scope: !2765, inlinedAt: !2757)
!2769 = !DILocation(line: 148, column: 9, scope: !2770, inlinedAt: !2757)
!2770 = distinct !DILexicalBlock(scope: !2765, file: !2, line: 148, column: 2)
!2771 = !DILocalVariable(name: "value", scope: !2772, file: !74, line: 150, type: !20, align: 4)
!2772 = distinct !DILexicalBlock(scope: !2770, file: !2, line: 149, column: 2)
!2773 = !DILocation(line: 150, column: 7, scope: !2772, inlinedAt: !2757)
!2774 = !DILocation(line: 26, column: 89, scope: !2772, inlinedAt: !2757)
!2775 = !DILocation(line: 150, column: 15, scope: !2772, inlinedAt: !2757)
!2776 = !DILocation(line: 151, column: 7, scope: !2772, inlinedAt: !2757)
!2777 = !DILocation(line: 153, column: 33, scope: !2778, inlinedAt: !2757)
!2778 = distinct !DILexicalBlock(scope: !2772, file: !2, line: 152, column: 3)
!2779 = !DILocation(line: 153, column: 4, scope: !2778, inlinedAt: !2757)
!2780 = !DILocation(line: 153, column: 10, scope: !2778, inlinedAt: !2757)
!2781 = !DILocation(line: 154, column: 10, scope: !2778, inlinedAt: !2757)
!2782 = !DILocation(line: 156, column: 3, scope: !2772, inlinedAt: !2757)
!2783 = !DILocation(line: 157, column: 3, scope: !2772, inlinedAt: !2757)
!2784 = !DILocation(line: 158, column: 11, scope: !2772, inlinedAt: !2757)
!2785 = !DILocation(line: 158, column: 17, scope: !2772, inlinedAt: !2757)
!2786 = !DILocation(line: 164, column: 33, scope: !2787, inlinedAt: !2788)
!2787 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2788 = !DILocation(line: 160, column: 2, scope: !2765, inlinedAt: !2757)
!2789 = !DILocation(line: 164, column: 2, scope: !2787, inlinedAt: !2788)
!2790 = !DILocation(line: 166, column: 2, scope: !2787, inlinedAt: !2788)
!2791 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.SimpleRandom.next_int128", scope: !74, file: !74, line: 27, type: !2792, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2792 = !DISubroutineType(types: !2793)
!2793 = !{!15, !2710}
!2794 = !DILocation(line: 27, column: 56, scope: !2791)
!2795 = !DILocalVariable(name: "self", arg: 1, scope: !2791, file: !74, line: 27, type: !2710)
!2796 = !DILocation(line: 27, column: 37, scope: !2791)
!2797 = !DILocation(line: 27, column: 72, scope: !2798, inlinedAt: !2794)
!2798 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2799 = !DILocation(line: 138, column: 46, scope: !2798, inlinedAt: !2794)
!2800 = !DILocation(line: 138, column: 72, scope: !2798, inlinedAt: !2794)
!2801 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.SimpleRandom.next_long", scope: !74, file: !74, line: 28, type: !2802, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2802 = !DISubroutineType(types: !2803)
!2803 = !{!6, !2710}
!2804 = !DILocation(line: 28, column: 52, scope: !2801)
!2805 = !DILocalVariable(name: "self", arg: 1, scope: !2801, file: !74, line: 28, type: !2710)
!2806 = !DILocation(line: 28, column: 33, scope: !2801)
!2807 = !DILocation(line: 28, column: 65, scope: !2808, inlinedAt: !2804)
!2808 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2809 = !DILocation(line: 139, column: 41, scope: !2808, inlinedAt: !2804)
!2810 = !DILocation(line: 139, column: 65, scope: !2808, inlinedAt: !2804)
!2811 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.SimpleRandom.next_short", scope: !74, file: !74, line: 29, type: !2812, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2812 = !DISubroutineType(types: !2813)
!2813 = !{!23, !2710}
!2814 = !DILocation(line: 29, column: 54, scope: !2811)
!2815 = !DILocalVariable(name: "self", arg: 1, scope: !2811, file: !74, line: 29, type: !2710)
!2816 = !DILocation(line: 29, column: 35, scope: !2811)
!2817 = !DILocation(line: 29, column: 62, scope: !2811)
!2818 = !DILocation(line: 29, column: 55, scope: !2811)
!2819 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.SimpleRandom.next_byte", scope: !74, file: !74, line: 30, type: !2820, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2820 = !DISubroutineType(types: !2821)
!2821 = !{!43, !2710}
!2822 = !DILocation(line: 30, column: 51, scope: !2819)
!2823 = !DILocalVariable(name: "self", arg: 1, scope: !2819, file: !74, line: 30, type: !2710)
!2824 = !DILocation(line: 30, column: 32, scope: !2819)
!2825 = !DILocation(line: 30, column: 57, scope: !2819)
!2826 = !DILocation(line: 30, column: 52, scope: !2819)
!2827 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg128Random.set_seed", scope: !82, file: !82, line: 20, type: !2828, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2828 = !DISubroutineType(types: !2829)
!2829 = !{null, !2830, !260}
!2830 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg128Random*", baseType: !2831, size: 64, align: 64, dwarfAddressSpace: 0)
!2831 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg128Random", scope: !82, file: !82, line: 18, baseType: !15, align: 8)
!2832 = !DILocation(line: 21, column: 1, scope: !2827)
!2833 = !DILocalVariable(name: "self", arg: 1, scope: !2827, file: !82, line: 20, type: !2830)
!2834 = !DILocation(line: 20, column: 32, scope: !2827)
!2835 = !DILocalVariable(name: "input", arg: 2, scope: !2827, file: !82, line: 20, type: !260)
!2836 = !DILocation(line: 20, column: 46, scope: !2827)
!2837 = !DILocation(line: 22, column: 3, scope: !2827)
!2838 = !DILocalVariable(name: "return_value", scope: !2839, file: !82, line: 10, type: !15, align: 8)
!2839 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2840 = !DILocation(line: 10, column: 8, scope: !2839, inlinedAt: !2841)
!2841 = !DILocation(line: 22, column: 11, scope: !2827)
!2842 = !DILocation(line: 342, column: 11, scope: !2843, inlinedAt: !2844)
!2843 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2844 = !DILocation(line: 11, column: 16, scope: !2839, inlinedAt: !2841)
!2845 = !DILocation(line: 11, column: 2, scope: !2839, inlinedAt: !2841)
!2846 = !DILocation(line: 12, column: 9, scope: !2839, inlinedAt: !2841)
!2847 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg128Random.next_long", scope: !82, file: !82, line: 26, type: !2848, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2848 = !DISubroutineType(types: !2849)
!2849 = !{!6, !2830}
!2850 = !DILocation(line: 27, column: 1, scope: !2847)
!2851 = !DILocalVariable(name: "self", arg: 1, scope: !2847, file: !82, line: 26, type: !2830)
!2852 = !DILocation(line: 26, column: 33, scope: !2847)
!2853 = !DILocalVariable(name: "s", scope: !2847, file: !82, line: 29, type: !288, align: 8)
!2854 = !DILocation(line: 29, column: 11, scope: !2847)
!2855 = !DILocation(line: 29, column: 16, scope: !2847)
!2856 = !DILocalVariable(name: "xor", scope: !2847, file: !82, line: 30, type: !15, align: 8)
!2857 = !DILocation(line: 30, column: 10, scope: !2847)
!2858 = !DILocation(line: 30, column: 17, scope: !2847)
!2859 = !DILocation(line: 30, column: 22, scope: !2847)
!2860 = !DILocation(line: 30, column: 21, scope: !2847)
!2861 = !DILocation(line: 30, column: 16, scope: !2847)
!2862 = !DILocalVariable(name: "rot", scope: !2847, file: !82, line: 31, type: !43, align: 1)
!2863 = !DILocation(line: 31, column: 7, scope: !2847)
!2864 = !DILocation(line: 31, column: 21, scope: !2847)
!2865 = !DILocation(line: 31, column: 14, scope: !2847)
!2866 = !DILocation(line: 32, column: 3, scope: !2847)
!2867 = !DILocation(line: 32, column: 8, scope: !2847)
!2868 = !DILocation(line: 32, column: 7, scope: !2847)
!2869 = !DILocation(line: 33, column: 18, scope: !2847)
!2870 = !DILocation(line: 33, column: 11, scope: !2847)
!2871 = !DILocation(line: 33, column: 42, scope: !2847)
!2872 = !DILocation(line: 147, column: 53, scope: !2873, inlinedAt: !2870)
!2873 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2874 = !DILocation(line: 147, column: 59, scope: !2873, inlinedAt: !2870)
!2875 = !DILocation(line: 147, column: 65, scope: !2873, inlinedAt: !2870)
!2876 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg128Random.next_bytes", scope: !82, file: !82, line: 39, type: !2828, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2877 = !DILocation(line: 39, column: 66, scope: !2876)
!2878 = !DILocalVariable(name: "self", arg: 1, scope: !2876, file: !82, line: 39, type: !2830)
!2879 = !DILocation(line: 39, column: 33, scope: !2876)
!2880 = !DILocalVariable(name: "bytes", arg: 2, scope: !2876, file: !82, line: 39, type: !260)
!2881 = !DILocation(line: 39, column: 47, scope: !2876)
!2882 = !DILocation(line: 37, column: 11, scope: !2883)
!2883 = distinct !DILexicalBlock(scope: !2876, file: !82, line: 39, column: 66)
!2884 = !DILocalVariable(name: "len", scope: !2885, file: !82, line: 146, type: !265, align: 8)
!2885 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2886 = !DILocation(line: 146, column: 6, scope: !2885, inlinedAt: !2877)
!2887 = !DILocation(line: 146, column: 12, scope: !2885, inlinedAt: !2877)
!2888 = !DILocation(line: 148, column: 2, scope: !2885, inlinedAt: !2877)
!2889 = !DILocation(line: 148, column: 9, scope: !2890, inlinedAt: !2877)
!2890 = distinct !DILexicalBlock(scope: !2885, file: !2, line: 148, column: 2)
!2891 = !DILocalVariable(name: "value", scope: !2892, file: !82, line: 150, type: !6, align: 8)
!2892 = distinct !DILexicalBlock(scope: !2890, file: !2, line: 149, column: 2)
!2893 = !DILocation(line: 150, column: 7, scope: !2892, inlinedAt: !2877)
!2894 = !DILocation(line: 39, column: 89, scope: !2892, inlinedAt: !2877)
!2895 = !DILocation(line: 150, column: 15, scope: !2892, inlinedAt: !2877)
!2896 = !DILocation(line: 151, column: 7, scope: !2892, inlinedAt: !2877)
!2897 = !DILocation(line: 153, column: 33, scope: !2898, inlinedAt: !2877)
!2898 = distinct !DILexicalBlock(scope: !2892, file: !2, line: 152, column: 3)
!2899 = !DILocation(line: 153, column: 4, scope: !2898, inlinedAt: !2877)
!2900 = !DILocation(line: 153, column: 10, scope: !2898, inlinedAt: !2877)
!2901 = !DILocation(line: 154, column: 10, scope: !2898, inlinedAt: !2877)
!2902 = !DILocation(line: 156, column: 3, scope: !2892, inlinedAt: !2877)
!2903 = !DILocation(line: 157, column: 3, scope: !2892, inlinedAt: !2877)
!2904 = !DILocation(line: 158, column: 11, scope: !2892, inlinedAt: !2877)
!2905 = !DILocation(line: 158, column: 17, scope: !2892, inlinedAt: !2877)
!2906 = !DILocation(line: 164, column: 33, scope: !2907, inlinedAt: !2908)
!2907 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2908 = !DILocation(line: 160, column: 2, scope: !2885, inlinedAt: !2877)
!2909 = !DILocation(line: 164, column: 2, scope: !2907, inlinedAt: !2908)
!2910 = !DILocation(line: 166, column: 2, scope: !2907, inlinedAt: !2908)
!2911 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg128Random.next_int128", scope: !82, file: !82, line: 40, type: !2912, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2912 = !DISubroutineType(types: !2913)
!2913 = !{!15, !2830}
!2914 = !DILocation(line: 40, column: 56, scope: !2911)
!2915 = !DILocalVariable(name: "self", arg: 1, scope: !2911, file: !82, line: 40, type: !2830)
!2916 = !DILocation(line: 40, column: 37, scope: !2911)
!2917 = !DILocation(line: 40, column: 72, scope: !2918, inlinedAt: !2914)
!2918 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2919 = !DILocation(line: 138, column: 46, scope: !2918, inlinedAt: !2914)
!2920 = !DILocation(line: 138, column: 72, scope: !2918, inlinedAt: !2914)
!2921 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg128Random.next_int", scope: !82, file: !82, line: 41, type: !2922, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2922 = !DISubroutineType(types: !2923)
!2923 = !{!20, !2830}
!2924 = !DILocation(line: 41, column: 50, scope: !2921)
!2925 = !DILocalVariable(name: "self", arg: 1, scope: !2921, file: !82, line: 41, type: !2830)
!2926 = !DILocation(line: 41, column: 31, scope: !2921)
!2927 = !DILocation(line: 41, column: 56, scope: !2921)
!2928 = !DILocation(line: 41, column: 51, scope: !2921)
!2929 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg128Random.next_short", scope: !82, file: !82, line: 42, type: !2930, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2930 = !DISubroutineType(types: !2931)
!2931 = !{!23, !2830}
!2932 = !DILocation(line: 42, column: 54, scope: !2929)
!2933 = !DILocalVariable(name: "self", arg: 1, scope: !2929, file: !82, line: 42, type: !2830)
!2934 = !DILocation(line: 42, column: 35, scope: !2929)
!2935 = !DILocation(line: 42, column: 62, scope: !2929)
!2936 = !DILocation(line: 42, column: 55, scope: !2929)
!2937 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg128Random.next_byte", scope: !82, file: !82, line: 43, type: !2938, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2938 = !DISubroutineType(types: !2939)
!2939 = !{!43, !2830}
!2940 = !DILocation(line: 43, column: 51, scope: !2937)
!2941 = !DILocalVariable(name: "self", arg: 1, scope: !2937, file: !82, line: 43, type: !2830)
!2942 = !DILocation(line: 43, column: 32, scope: !2937)
!2943 = !DILocation(line: 43, column: 57, scope: !2937)
!2944 = !DILocation(line: 43, column: 52, scope: !2937)
!2945 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg64Random.set_seed", scope: !82, file: !82, line: 49, type: !2946, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2946 = !DISubroutineType(types: !2947)
!2947 = !{null, !2948, !260}
!2948 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg64Random*", baseType: !2949, size: 64, align: 64, dwarfAddressSpace: 0)
!2949 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg64Random", scope: !82, file: !82, line: 47, baseType: !6, align: 8)
!2950 = !DILocation(line: 50, column: 1, scope: !2945)
!2951 = !DILocalVariable(name: "self", arg: 1, scope: !2945, file: !82, line: 49, type: !2948)
!2952 = !DILocation(line: 49, column: 30, scope: !2945)
!2953 = !DILocalVariable(name: "input", arg: 2, scope: !2945, file: !82, line: 49, type: !260)
!2954 = !DILocation(line: 49, column: 44, scope: !2945)
!2955 = !DILocation(line: 51, column: 3, scope: !2945)
!2956 = !DILocalVariable(name: "return_value", scope: !2957, file: !82, line: 10, type: !6, align: 8)
!2957 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2958 = !DILocation(line: 10, column: 8, scope: !2957, inlinedAt: !2959)
!2959 = !DILocation(line: 51, column: 11, scope: !2945)
!2960 = !DILocation(line: 342, column: 11, scope: !2961, inlinedAt: !2962)
!2961 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2962 = !DILocation(line: 11, column: 16, scope: !2957, inlinedAt: !2959)
!2963 = !DILocation(line: 11, column: 2, scope: !2957, inlinedAt: !2959)
!2964 = !DILocation(line: 12, column: 9, scope: !2957, inlinedAt: !2959)
!2965 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg64Random.next_int", scope: !82, file: !82, line: 54, type: !2966, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2966 = !DISubroutineType(types: !2967)
!2967 = !{!20, !2948}
!2968 = !DILocation(line: 55, column: 1, scope: !2965)
!2969 = !DILocalVariable(name: "self", arg: 1, scope: !2965, file: !82, line: 54, type: !2948)
!2970 = !DILocation(line: 54, column: 30, scope: !2965)
!2971 = !DILocalVariable(name: "s", scope: !2965, file: !82, line: 57, type: !395, align: 8)
!2972 = !DILocation(line: 57, column: 9, scope: !2965)
!2973 = !DILocation(line: 57, column: 14, scope: !2965)
!2974 = !DILocalVariable(name: "xor", scope: !2965, file: !82, line: 58, type: !6, align: 8)
!2975 = !DILocation(line: 58, column: 8, scope: !2965)
!2976 = !DILocation(line: 58, column: 15, scope: !2965)
!2977 = !DILocation(line: 58, column: 20, scope: !2965)
!2978 = !DILocation(line: 58, column: 19, scope: !2965)
!2979 = !DILocation(line: 58, column: 14, scope: !2965)
!2980 = !DILocalVariable(name: "rot", scope: !2965, file: !82, line: 59, type: !43, align: 1)
!2981 = !DILocation(line: 59, column: 7, scope: !2965)
!2982 = !DILocation(line: 59, column: 21, scope: !2965)
!2983 = !DILocation(line: 59, column: 14, scope: !2965)
!2984 = !DILocation(line: 60, column: 3, scope: !2965)
!2985 = !DILocation(line: 60, column: 8, scope: !2965)
!2986 = !DILocation(line: 60, column: 7, scope: !2965)
!2987 = !DILocation(line: 61, column: 17, scope: !2965)
!2988 = !DILocation(line: 61, column: 11, scope: !2965)
!2989 = !DILocation(line: 61, column: 41, scope: !2965)
!2990 = !DILocation(line: 99, column: 50, scope: !2991, inlinedAt: !2988)
!2991 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2992 = !DILocation(line: 99, column: 56, scope: !2991, inlinedAt: !2988)
!2993 = !DILocation(line: 99, column: 62, scope: !2991, inlinedAt: !2988)
!2994 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg64Random.next_bytes", scope: !82, file: !82, line: 67, type: !2946, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2995 = !DILocation(line: 67, column: 65, scope: !2994)
!2996 = !DILocalVariable(name: "self", arg: 1, scope: !2994, file: !82, line: 67, type: !2948)
!2997 = !DILocation(line: 67, column: 32, scope: !2994)
!2998 = !DILocalVariable(name: "bytes", arg: 2, scope: !2994, file: !82, line: 67, type: !260)
!2999 = !DILocation(line: 67, column: 46, scope: !2994)
!3000 = !DILocation(line: 65, column: 11, scope: !3001)
!3001 = distinct !DILexicalBlock(scope: !2994, file: !82, line: 67, column: 65)
!3002 = !DILocalVariable(name: "len", scope: !3003, file: !82, line: 146, type: !265, align: 8)
!3003 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3004 = !DILocation(line: 146, column: 6, scope: !3003, inlinedAt: !2995)
!3005 = !DILocation(line: 146, column: 12, scope: !3003, inlinedAt: !2995)
!3006 = !DILocation(line: 148, column: 2, scope: !3003, inlinedAt: !2995)
!3007 = !DILocation(line: 148, column: 9, scope: !3008, inlinedAt: !2995)
!3008 = distinct !DILexicalBlock(scope: !3003, file: !2, line: 148, column: 2)
!3009 = !DILocalVariable(name: "value", scope: !3010, file: !82, line: 150, type: !20, align: 4)
!3010 = distinct !DILexicalBlock(scope: !3008, file: !2, line: 149, column: 2)
!3011 = !DILocation(line: 150, column: 7, scope: !3010, inlinedAt: !2995)
!3012 = !DILocation(line: 67, column: 88, scope: !3010, inlinedAt: !2995)
!3013 = !DILocation(line: 150, column: 15, scope: !3010, inlinedAt: !2995)
!3014 = !DILocation(line: 151, column: 7, scope: !3010, inlinedAt: !2995)
!3015 = !DILocation(line: 153, column: 33, scope: !3016, inlinedAt: !2995)
!3016 = distinct !DILexicalBlock(scope: !3010, file: !2, line: 152, column: 3)
!3017 = !DILocation(line: 153, column: 4, scope: !3016, inlinedAt: !2995)
!3018 = !DILocation(line: 153, column: 10, scope: !3016, inlinedAt: !2995)
!3019 = !DILocation(line: 154, column: 10, scope: !3016, inlinedAt: !2995)
!3020 = !DILocation(line: 156, column: 3, scope: !3010, inlinedAt: !2995)
!3021 = !DILocation(line: 157, column: 3, scope: !3010, inlinedAt: !2995)
!3022 = !DILocation(line: 158, column: 11, scope: !3010, inlinedAt: !2995)
!3023 = !DILocation(line: 158, column: 17, scope: !3010, inlinedAt: !2995)
!3024 = !DILocation(line: 164, column: 33, scope: !3025, inlinedAt: !3026)
!3025 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3026 = !DILocation(line: 160, column: 2, scope: !3003, inlinedAt: !2995)
!3027 = !DILocation(line: 164, column: 2, scope: !3025, inlinedAt: !3026)
!3028 = !DILocation(line: 166, column: 2, scope: !3025, inlinedAt: !3026)
!3029 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg64Random.next_int128", scope: !82, file: !82, line: 68, type: !3030, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3030 = !DISubroutineType(types: !3031)
!3031 = !{!15, !2948}
!3032 = !DILocation(line: 68, column: 55, scope: !3029)
!3033 = !DILocalVariable(name: "self", arg: 1, scope: !3029, file: !82, line: 68, type: !2948)
!3034 = !DILocation(line: 68, column: 36, scope: !3029)
!3035 = !DILocation(line: 68, column: 71, scope: !3036, inlinedAt: !3032)
!3036 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3037 = !DILocation(line: 138, column: 46, scope: !3036, inlinedAt: !3032)
!3038 = !DILocation(line: 138, column: 72, scope: !3036, inlinedAt: !3032)
!3039 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg64Random.next_long", scope: !82, file: !82, line: 69, type: !3040, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3040 = !DISubroutineType(types: !3041)
!3041 = !{!6, !2948}
!3042 = !DILocation(line: 69, column: 51, scope: !3039)
!3043 = !DILocalVariable(name: "self", arg: 1, scope: !3039, file: !82, line: 69, type: !2948)
!3044 = !DILocation(line: 69, column: 32, scope: !3039)
!3045 = !DILocation(line: 69, column: 64, scope: !3046, inlinedAt: !3042)
!3046 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3047 = !DILocation(line: 139, column: 41, scope: !3046, inlinedAt: !3042)
!3048 = !DILocation(line: 139, column: 65, scope: !3046, inlinedAt: !3042)
!3049 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg64Random.next_short", scope: !82, file: !82, line: 70, type: !3050, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3050 = !DISubroutineType(types: !3051)
!3051 = !{!23, !2948}
!3052 = !DILocation(line: 70, column: 53, scope: !3049)
!3053 = !DILocalVariable(name: "self", arg: 1, scope: !3049, file: !82, line: 70, type: !2948)
!3054 = !DILocation(line: 70, column: 34, scope: !3049)
!3055 = !DILocation(line: 70, column: 61, scope: !3049)
!3056 = !DILocation(line: 70, column: 54, scope: !3049)
!3057 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg64Random.next_byte", scope: !82, file: !82, line: 71, type: !3058, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3058 = !DISubroutineType(types: !3059)
!3059 = !{!43, !2948}
!3060 = !DILocation(line: 71, column: 50, scope: !3057)
!3061 = !DILocalVariable(name: "self", arg: 1, scope: !3057, file: !82, line: 71, type: !2948)
!3062 = !DILocation(line: 71, column: 31, scope: !3057)
!3063 = !DILocation(line: 71, column: 56, scope: !3057)
!3064 = !DILocation(line: 71, column: 51, scope: !3057)
!3065 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg32Random.set_seed", scope: !82, file: !82, line: 78, type: !3066, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3066 = !DISubroutineType(types: !3067)
!3067 = !{null, !3068, !260}
!3068 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg32Random*", baseType: !3069, size: 64, align: 64, dwarfAddressSpace: 0)
!3069 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg32Random", scope: !82, file: !82, line: 76, baseType: !20, align: 4)
!3070 = !DILocation(line: 79, column: 1, scope: !3065)
!3071 = !DILocalVariable(name: "self", arg: 1, scope: !3065, file: !82, line: 78, type: !3068)
!3072 = !DILocation(line: 78, column: 30, scope: !3065)
!3073 = !DILocalVariable(name: "input", arg: 2, scope: !3065, file: !82, line: 78, type: !260)
!3074 = !DILocation(line: 78, column: 44, scope: !3065)
!3075 = !DILocation(line: 80, column: 3, scope: !3065)
!3076 = !DILocalVariable(name: "return_value", scope: !3077, file: !82, line: 10, type: !20, align: 4)
!3077 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3078 = !DILocation(line: 10, column: 8, scope: !3077, inlinedAt: !3079)
!3079 = !DILocation(line: 80, column: 11, scope: !3065)
!3080 = !DILocation(line: 342, column: 11, scope: !3081, inlinedAt: !3082)
!3081 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3082 = !DILocation(line: 11, column: 16, scope: !3077, inlinedAt: !3079)
!3083 = !DILocation(line: 11, column: 2, scope: !3077, inlinedAt: !3079)
!3084 = !DILocation(line: 12, column: 9, scope: !3077, inlinedAt: !3079)
!3085 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg32Random.next_short", scope: !82, file: !82, line: 83, type: !3086, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3086 = !DISubroutineType(types: !3087)
!3087 = !{!23, !3068}
!3088 = !DILocation(line: 84, column: 1, scope: !3085)
!3089 = !DILocalVariable(name: "self", arg: 1, scope: !3085, file: !82, line: 83, type: !3068)
!3090 = !DILocation(line: 83, column: 34, scope: !3085)
!3091 = !DILocalVariable(name: "s", scope: !3085, file: !82, line: 86, type: !504, align: 8)
!3092 = !DILocation(line: 86, column: 8, scope: !3085)
!3093 = !DILocation(line: 86, column: 13, scope: !3085)
!3094 = !DILocalVariable(name: "xor", scope: !3085, file: !82, line: 87, type: !20, align: 4)
!3095 = !DILocation(line: 87, column: 7, scope: !3085)
!3096 = !DILocation(line: 87, column: 14, scope: !3085)
!3097 = !DILocation(line: 87, column: 19, scope: !3085)
!3098 = !DILocation(line: 87, column: 18, scope: !3085)
!3099 = !DILocation(line: 87, column: 13, scope: !3085)
!3100 = !DILocalVariable(name: "rot", scope: !3085, file: !82, line: 88, type: !43, align: 1)
!3101 = !DILocation(line: 88, column: 7, scope: !3085)
!3102 = !DILocation(line: 88, column: 21, scope: !3085)
!3103 = !DILocation(line: 88, column: 14, scope: !3085)
!3104 = !DILocation(line: 89, column: 3, scope: !3085)
!3105 = !DILocation(line: 89, column: 8, scope: !3085)
!3106 = !DILocation(line: 89, column: 7, scope: !3085)
!3107 = !DILocation(line: 90, column: 19, scope: !3085)
!3108 = !DILocation(line: 90, column: 11, scope: !3085)
!3109 = !DILocation(line: 90, column: 43, scope: !3085)
!3110 = !DILocation(line: 115, column: 56, scope: !3111, inlinedAt: !3108)
!3111 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3112 = !DILocation(line: 115, column: 62, scope: !3111, inlinedAt: !3108)
!3113 = !DILocation(line: 115, column: 68, scope: !3111, inlinedAt: !3108)
!3114 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg32Random.next_bytes", scope: !82, file: !82, line: 96, type: !3066, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3115 = !DILocation(line: 96, column: 65, scope: !3114)
!3116 = !DILocalVariable(name: "self", arg: 1, scope: !3114, file: !82, line: 96, type: !3068)
!3117 = !DILocation(line: 96, column: 32, scope: !3114)
!3118 = !DILocalVariable(name: "bytes", arg: 2, scope: !3114, file: !82, line: 96, type: !260)
!3119 = !DILocation(line: 96, column: 46, scope: !3114)
!3120 = !DILocation(line: 94, column: 11, scope: !3121)
!3121 = distinct !DILexicalBlock(scope: !3114, file: !82, line: 96, column: 65)
!3122 = !DILocalVariable(name: "len", scope: !3123, file: !82, line: 146, type: !265, align: 8)
!3123 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3124 = !DILocation(line: 146, column: 6, scope: !3123, inlinedAt: !3115)
!3125 = !DILocation(line: 146, column: 12, scope: !3123, inlinedAt: !3115)
!3126 = !DILocation(line: 148, column: 2, scope: !3123, inlinedAt: !3115)
!3127 = !DILocation(line: 148, column: 9, scope: !3128, inlinedAt: !3115)
!3128 = distinct !DILexicalBlock(scope: !3123, file: !2, line: 148, column: 2)
!3129 = !DILocalVariable(name: "value", scope: !3130, file: !82, line: 150, type: !23, align: 2)
!3130 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 149, column: 2)
!3131 = !DILocation(line: 150, column: 7, scope: !3130, inlinedAt: !3115)
!3132 = !DILocation(line: 96, column: 88, scope: !3130, inlinedAt: !3115)
!3133 = !DILocation(line: 150, column: 15, scope: !3130, inlinedAt: !3115)
!3134 = !DILocation(line: 151, column: 7, scope: !3130, inlinedAt: !3115)
!3135 = !DILocation(line: 153, column: 33, scope: !3136, inlinedAt: !3115)
!3136 = distinct !DILexicalBlock(scope: !3130, file: !2, line: 152, column: 3)
!3137 = !DILocation(line: 153, column: 4, scope: !3136, inlinedAt: !3115)
!3138 = !DILocation(line: 153, column: 10, scope: !3136, inlinedAt: !3115)
!3139 = !DILocation(line: 154, column: 10, scope: !3136, inlinedAt: !3115)
!3140 = !DILocation(line: 156, column: 3, scope: !3130, inlinedAt: !3115)
!3141 = !DILocation(line: 157, column: 3, scope: !3130, inlinedAt: !3115)
!3142 = !DILocation(line: 158, column: 11, scope: !3130, inlinedAt: !3115)
!3143 = !DILocation(line: 158, column: 17, scope: !3130, inlinedAt: !3115)
!3144 = !DILocation(line: 164, column: 33, scope: !3145, inlinedAt: !3146)
!3145 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3146 = !DILocation(line: 160, column: 2, scope: !3123, inlinedAt: !3115)
!3147 = !DILocation(line: 164, column: 2, scope: !3145, inlinedAt: !3146)
!3148 = !DILocation(line: 166, column: 2, scope: !3145, inlinedAt: !3146)
!3149 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg32Random.next_int128", scope: !82, file: !82, line: 97, type: !3150, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3150 = !DISubroutineType(types: !3151)
!3151 = !{!15, !3068}
!3152 = !DILocation(line: 97, column: 55, scope: !3149)
!3153 = !DILocalVariable(name: "self", arg: 1, scope: !3149, file: !82, line: 97, type: !3068)
!3154 = !DILocation(line: 97, column: 36, scope: !3149)
!3155 = !DILocation(line: 97, column: 71, scope: !3156, inlinedAt: !3152)
!3156 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3157 = !DILocation(line: 138, column: 46, scope: !3156, inlinedAt: !3152)
!3158 = !DILocation(line: 138, column: 72, scope: !3156, inlinedAt: !3152)
!3159 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg32Random.next_long", scope: !82, file: !82, line: 98, type: !3160, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3160 = !DISubroutineType(types: !3161)
!3161 = !{!6, !3068}
!3162 = !DILocation(line: 98, column: 51, scope: !3159)
!3163 = !DILocalVariable(name: "self", arg: 1, scope: !3159, file: !82, line: 98, type: !3068)
!3164 = !DILocation(line: 98, column: 32, scope: !3159)
!3165 = !DILocation(line: 98, column: 64, scope: !3166, inlinedAt: !3162)
!3166 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3167 = !DILocation(line: 139, column: 41, scope: !3166, inlinedAt: !3162)
!3168 = !DILocation(line: 139, column: 65, scope: !3166, inlinedAt: !3162)
!3169 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg32Random.next_int", scope: !82, file: !82, line: 99, type: !3170, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3170 = !DISubroutineType(types: !3171)
!3171 = !{!20, !3068}
!3172 = !DILocation(line: 99, column: 49, scope: !3169)
!3173 = !DILocalVariable(name: "self", arg: 1, scope: !3169, file: !82, line: 99, type: !3068)
!3174 = !DILocation(line: 99, column: 30, scope: !3169)
!3175 = !DILocation(line: 99, column: 63, scope: !3176, inlinedAt: !3172)
!3176 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3177 = !DILocation(line: 140, column: 41, scope: !3176, inlinedAt: !3172)
!3178 = !DILocation(line: 140, column: 64, scope: !3176, inlinedAt: !3172)
!3179 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg32Random.next_byte", scope: !82, file: !82, line: 100, type: !3180, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3180 = !DISubroutineType(types: !3181)
!3181 = !{!43, !3068}
!3182 = !DILocation(line: 100, column: 50, scope: !3179)
!3183 = !DILocalVariable(name: "self", arg: 1, scope: !3179, file: !82, line: 100, type: !3068)
!3184 = !DILocation(line: 100, column: 31, scope: !3179)
!3185 = !DILocation(line: 100, column: 56, scope: !3179)
!3186 = !DILocation(line: 100, column: 51, scope: !3179)
!3187 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg16Random.set_seed", scope: !82, file: !82, line: 106, type: !3188, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3188 = !DISubroutineType(types: !3189)
!3189 = !{null, !3190, !260}
!3190 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg16Random*", baseType: !3191, size: 64, align: 64, dwarfAddressSpace: 0)
!3191 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg16Random", scope: !82, file: !82, line: 104, baseType: !23, align: 2)
!3192 = !DILocation(line: 107, column: 1, scope: !3187)
!3193 = !DILocalVariable(name: "self", arg: 1, scope: !3187, file: !82, line: 106, type: !3190)
!3194 = !DILocation(line: 106, column: 30, scope: !3187)
!3195 = !DILocalVariable(name: "input", arg: 2, scope: !3187, file: !82, line: 106, type: !260)
!3196 = !DILocation(line: 106, column: 44, scope: !3187)
!3197 = !DILocation(line: 108, column: 3, scope: !3187)
!3198 = !DILocalVariable(name: "return_value", scope: !3199, file: !82, line: 10, type: !23, align: 2)
!3199 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !56, file: !56, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3200 = !DILocation(line: 10, column: 8, scope: !3199, inlinedAt: !3201)
!3201 = !DILocation(line: 108, column: 11, scope: !3187)
!3202 = !DILocation(line: 342, column: 11, scope: !3203, inlinedAt: !3204)
!3203 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3204 = !DILocation(line: 11, column: 16, scope: !3199, inlinedAt: !3201)
!3205 = !DILocation(line: 11, column: 2, scope: !3199, inlinedAt: !3201)
!3206 = !DILocation(line: 12, column: 9, scope: !3199, inlinedAt: !3201)
!3207 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg16Random.next_byte", scope: !82, file: !82, line: 111, type: !3208, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3208 = !DISubroutineType(types: !3209)
!3209 = !{!43, !3190}
!3210 = !DILocation(line: 112, column: 1, scope: !3207)
!3211 = !DILocalVariable(name: "self", arg: 1, scope: !3207, file: !82, line: 111, type: !3190)
!3212 = !DILocation(line: 111, column: 31, scope: !3207)
!3213 = !DILocalVariable(name: "s", scope: !3207, file: !82, line: 114, type: !613, align: 8)
!3214 = !DILocation(line: 114, column: 10, scope: !3207)
!3215 = !DILocation(line: 114, column: 15, scope: !3207)
!3216 = !DILocalVariable(name: "xor", scope: !3207, file: !82, line: 115, type: !23, align: 2)
!3217 = !DILocation(line: 115, column: 9, scope: !3207)
!3218 = !DILocation(line: 115, column: 16, scope: !3207)
!3219 = !DILocation(line: 115, column: 21, scope: !3207)
!3220 = !DILocation(line: 115, column: 20, scope: !3207)
!3221 = !DILocation(line: 115, column: 15, scope: !3207)
!3222 = !DILocalVariable(name: "rot", scope: !3207, file: !82, line: 116, type: !43, align: 1)
!3223 = !DILocation(line: 116, column: 7, scope: !3207)
!3224 = !DILocation(line: 116, column: 21, scope: !3207)
!3225 = !DILocation(line: 116, column: 14, scope: !3207)
!3226 = !DILocation(line: 117, column: 3, scope: !3207)
!3227 = !DILocation(line: 117, column: 8, scope: !3207)
!3228 = !DILocation(line: 117, column: 7, scope: !3207)
!3229 = !DILocation(line: 118, column: 17, scope: !3207)
!3230 = !DILocation(line: 118, column: 11, scope: !3207)
!3231 = !DILocation(line: 131, column: 50, scope: !3232, inlinedAt: !3230)
!3232 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !161, file: !161, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3233 = !DILocation(line: 131, column: 56, scope: !3232, inlinedAt: !3230)
!3234 = !DILocation(line: 131, column: 62, scope: !3232, inlinedAt: !3230)
!3235 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg16Random.next_bytes", scope: !82, file: !82, line: 121, type: !3188, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3236 = !DILocation(line: 121, column: 65, scope: !3235)
!3237 = !DILocalVariable(name: "self", arg: 1, scope: !3235, file: !82, line: 121, type: !3190)
!3238 = !DILocation(line: 121, column: 32, scope: !3235)
!3239 = !DILocalVariable(name: "bytes", arg: 2, scope: !3235, file: !82, line: 121, type: !260)
!3240 = !DILocation(line: 121, column: 46, scope: !3235)
!3241 = !DILocalVariable(name: "len", scope: !3242, file: !82, line: 146, type: !265, align: 8)
!3242 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3243 = !DILocation(line: 146, column: 6, scope: !3242, inlinedAt: !3236)
!3244 = !DILocation(line: 146, column: 12, scope: !3242, inlinedAt: !3236)
!3245 = !DILocation(line: 148, column: 2, scope: !3242, inlinedAt: !3236)
!3246 = !DILocation(line: 148, column: 9, scope: !3247, inlinedAt: !3236)
!3247 = distinct !DILexicalBlock(scope: !3242, file: !2, line: 148, column: 2)
!3248 = !DILocalVariable(name: "value", scope: !3249, file: !82, line: 150, type: !43, align: 1)
!3249 = distinct !DILexicalBlock(scope: !3247, file: !2, line: 149, column: 2)
!3250 = !DILocation(line: 150, column: 7, scope: !3249, inlinedAt: !3236)
!3251 = !DILocation(line: 121, column: 88, scope: !3249, inlinedAt: !3236)
!3252 = !DILocation(line: 150, column: 15, scope: !3249, inlinedAt: !3236)
!3253 = !DILocation(line: 151, column: 7, scope: !3249, inlinedAt: !3236)
!3254 = !DILocation(line: 153, column: 33, scope: !3255, inlinedAt: !3236)
!3255 = distinct !DILexicalBlock(scope: !3249, file: !2, line: 152, column: 3)
!3256 = !DILocation(line: 153, column: 4, scope: !3255, inlinedAt: !3236)
!3257 = !DILocation(line: 153, column: 10, scope: !3255, inlinedAt: !3236)
!3258 = !DILocation(line: 154, column: 10, scope: !3255, inlinedAt: !3236)
!3259 = !DILocation(line: 156, column: 3, scope: !3249, inlinedAt: !3236)
!3260 = !DILocation(line: 157, column: 3, scope: !3249, inlinedAt: !3236)
!3261 = !DILocation(line: 158, column: 11, scope: !3249, inlinedAt: !3236)
!3262 = !DILocation(line: 158, column: 17, scope: !3249, inlinedAt: !3236)
!3263 = !DILocation(line: 164, column: 33, scope: !3264, inlinedAt: !3265)
!3264 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3265 = !DILocation(line: 160, column: 2, scope: !3242, inlinedAt: !3236)
!3266 = !DILocation(line: 164, column: 2, scope: !3264, inlinedAt: !3265)
!3267 = !DILocation(line: 166, column: 2, scope: !3264, inlinedAt: !3265)
!3268 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg16Random.next_int128", scope: !82, file: !82, line: 122, type: !3269, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3269 = !DISubroutineType(types: !3270)
!3270 = !{!15, !3190}
!3271 = !DILocation(line: 122, column: 55, scope: !3268)
!3272 = !DILocalVariable(name: "self", arg: 1, scope: !3268, file: !82, line: 122, type: !3190)
!3273 = !DILocation(line: 122, column: 36, scope: !3268)
!3274 = !DILocation(line: 122, column: 71, scope: !3275, inlinedAt: !3271)
!3275 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3276 = !DILocation(line: 138, column: 46, scope: !3275, inlinedAt: !3271)
!3277 = !DILocation(line: 138, column: 72, scope: !3275, inlinedAt: !3271)
!3278 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg16Random.next_long", scope: !82, file: !82, line: 123, type: !3279, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3279 = !DISubroutineType(types: !3280)
!3280 = !{!6, !3190}
!3281 = !DILocation(line: 123, column: 51, scope: !3278)
!3282 = !DILocalVariable(name: "self", arg: 1, scope: !3278, file: !82, line: 123, type: !3190)
!3283 = !DILocation(line: 123, column: 32, scope: !3278)
!3284 = !DILocation(line: 123, column: 64, scope: !3285, inlinedAt: !3281)
!3285 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3286 = !DILocation(line: 139, column: 41, scope: !3285, inlinedAt: !3281)
!3287 = !DILocation(line: 139, column: 65, scope: !3285, inlinedAt: !3281)
!3288 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg16Random.next_int", scope: !82, file: !82, line: 124, type: !3289, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3289 = !DISubroutineType(types: !3290)
!3290 = !{!20, !3190}
!3291 = !DILocation(line: 124, column: 49, scope: !3288)
!3292 = !DILocalVariable(name: "self", arg: 1, scope: !3288, file: !82, line: 124, type: !3190)
!3293 = !DILocation(line: 124, column: 30, scope: !3288)
!3294 = !DILocation(line: 124, column: 63, scope: !3295, inlinedAt: !3291)
!3295 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3296 = !DILocation(line: 140, column: 41, scope: !3295, inlinedAt: !3291)
!3297 = !DILocation(line: 140, column: 64, scope: !3295, inlinedAt: !3291)
!3298 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg16Random.next_short", scope: !82, file: !82, line: 125, type: !3299, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3299 = !DISubroutineType(types: !3300)
!3300 = !{!23, !3190}
!3301 = !DILocation(line: 125, column: 53, scope: !3298)
!3302 = !DILocalVariable(name: "self", arg: 1, scope: !3298, file: !82, line: 125, type: !3190)
!3303 = !DILocation(line: 125, column: 34, scope: !3298)
!3304 = !DILocation(line: 125, column: 68, scope: !3305, inlinedAt: !3301)
!3305 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3306 = !DILocation(line: 141, column: 44, scope: !3305, inlinedAt: !3301)
!3307 = !DILocation(line: 141, column: 68, scope: !3305, inlinedAt: !3301)
