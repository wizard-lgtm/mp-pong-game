; ModuleID = 'std::io'
source_filename = "std::io"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%.fault = type { i64, %"char[]", i64 }
%"char[]" = type { ptr, i64 }
%File = type { ptr }
%any = type { ptr, i64 }
%BitReader = type { %any, i32, i32 }
%"any[]" = type { ptr, i64 }
%BitWriter = type { %any, i32, i32 }
%ByteBuffer = type { %any, i64, %"char[]", i64, i64, i8 }
%LimitReader = type { %any, i64 }
%ByteReader = type { %"char[]", i64 }
%ByteWriter = type { %"char[]", i64, %any }
%Scanner = type { %any, %"char[]", i64, i64 }
%ReadBuffer = type { %any, %"char[]", i64, i64 }
%WriteBuffer = type { %any, %"char[]", i64 }
%Formatter = type { ptr, ptr, %.anon }
%.anon = type { i32, i32, i32, i64, i64 }
%BufferData = type { %"char[]", i64 }
%OnStackAllocator = type { %any, %"char[]", i64, ptr }
%"char[][]" = type { ptr, i64 }

$std.io.BitReader.init = comdat any

$std.io.BitReader.clear = comdat any

$std.io.BitReader.read_bits = comdat any

$std.io.BitWriter.init = comdat any

$std.io.BitWriter.flush = comdat any

$std.io.BitWriter.write_bits = comdat any

$std.io.ByteBuffer.new_init = comdat any

$std.io.ByteBuffer.temp_init = comdat any

$std.io.ByteBuffer.init_with_buffer = comdat any

$std.io.ByteBuffer.free = comdat any

$std.io.ByteBuffer.write = comdat any

$std.io.ByteBuffer.write_byte = comdat any

$std.io.ByteBuffer.read = comdat any

$std.io.ByteBuffer.read_byte = comdat any

$std.io.ByteBuffer.pushback_byte = comdat any

$std.io.ByteBuffer.seek = comdat any

$std.io.ByteBuffer.available = comdat any

$std.io.ByteBuffer.grow = comdat any

$std.io.LimitReader.init = comdat any

$std.io.LimitReader.close = comdat any

$std.io.LimitReader.read = comdat any

$std.io.LimitReader.read_byte = comdat any

$std.io.LimitReader.available = comdat any

$std.io.ByteReader.len = comdat any

$std.io.ByteReader.init = comdat any

$std.io.ByteReader.read = comdat any

$std.io.ByteReader.read_byte = comdat any

$std.io.ByteReader.pushback_byte = comdat any

$std.io.ByteReader.seek = comdat any

$std.io.ByteReader.write_to = comdat any

$std.io.ByteReader.available = comdat any

$std.io.ByteWriter.new_init = comdat any

$std.io.ByteWriter.temp_init = comdat any

$std.io.ByteWriter.init_with_buffer = comdat any

$std.io.ByteWriter.destroy = comdat any

$std.io.ByteWriter.str_view = comdat any

$std.io.ByteWriter.ensure_capacity = comdat any

$std.io.ByteWriter.write = comdat any

$std.io.ByteWriter.write_byte = comdat any

$std.io.ByteWriter.read_from = comdat any

$std.io.Scanner.init = comdat any

$std.io.Scanner.flush = comdat any

$std.io.Scanner.close = comdat any

$std.io.Scanner.scan = comdat any

$std.io.Scanner.read = comdat any

$std.io.Scanner.read_byte = comdat any

$std.io.ReadBuffer.init = comdat any

$std.io.ReadBuffer.str_view = comdat any

$std.io.ReadBuffer.close = comdat any

$std.io.ReadBuffer.read = comdat any

$std.io.ReadBuffer.read_byte = comdat any

$std.io.WriteBuffer.init = comdat any

$std.io.WriteBuffer.str_view = comdat any

$std.io.WriteBuffer.close = comdat any

$std.io.WriteBuffer.flush = comdat any

$std.io.WriteBuffer.write = comdat any

$std.io.WriteBuffer.write_byte = comdat any

$std.io.fprintf = comdat any

$std.io.fprintfn = comdat any

$std.io.printf = comdat any

$std.io.printfn = comdat any

$std.io.eprintf = comdat any

$std.io.eprintfn = comdat any

$std.io.bprintf = comdat any

$std.io.putchar = comdat any

$std.io.stdout = comdat any

$std.io.stderr = comdat any

$std.io.stdin = comdat any

$std.io.Formatter.pad = comdat any

$std.io.Formatter.out_chars = comdat any

$std.io.Formatter.etoa = comdat any

$std.io.Formatter.ftoa = comdat any

$std.io.Formatter.gtoa = comdat any

$std.io.Formatter.atoa = comdat any

$std.io.fmt_u = comdat any

$std.io.available = comdat any

$std.io.copy_to = comdat any

$std.io.wrap_bytes = comdat any

$std.core.ReflectedParam.to_format = comdat any

$std.io.Formatter.printf = comdat any

$std.io.Formatter.init = comdat any

$std.io.Formatter.print_with_function = comdat any

$std.io.Formatter.vprintf = comdat any

$std.io.Formatter.print = comdat any

$.dyn_search = comdat any

$"$ct.std.io.BitReader" = comdat any

$"$ct.std.io.BitWriter" = comdat any

$"$ct.std.io.ByteBuffer" = comdat any

$"$ct.std.io.LimitReader" = comdat any

$"$ct.std.io.ByteReader" = comdat any

$"$ct.std.io.ByteWriter" = comdat any

$"$ct.std.io.Scanner" = comdat any

$"$ct.std.io.ReadBuffer" = comdat any

$"$ct.std.io.WriteBuffer" = comdat any

$"std.io.IoError$ALREADY_EXISTS" = comdat any

$"std.io.IoError$BUSY" = comdat any

$"std.io.IoError$CANNOT_READ_DIR" = comdat any

$"std.io.IoError$DIR_NOT_EMPTY" = comdat any

$"std.io.IoError$EOF" = comdat any

$"std.io.IoError$FILE_CANNOT_DELETE" = comdat any

$"std.io.IoError$FILE_IS_DIR" = comdat any

$"std.io.IoError$FILE_IS_PIPE" = comdat any

$"std.io.IoError$FILE_NOT_DIR" = comdat any

$"std.io.IoError$FILE_NOT_FOUND" = comdat any

$"std.io.IoError$FILE_NOT_VALID" = comdat any

$"std.io.IoError$GENERAL_ERROR" = comdat any

$"std.io.IoError$ILLEGAL_ARGUMENT" = comdat any

$"std.io.IoError$INCOMPLETE_WRITE" = comdat any

$"std.io.IoError$INTERRUPTED" = comdat any

$"std.io.IoError$INVALID_POSITION" = comdat any

$"std.io.IoError$INVALID_PUSHBACK" = comdat any

$"std.io.IoError$NAME_TOO_LONG" = comdat any

$"std.io.IoError$NOT_SEEKABLE" = comdat any

$"std.io.IoError$NO_PERMISSION" = comdat any

$"std.io.IoError$OUT_OF_SPACE" = comdat any

$"std.io.IoError$OVERFLOW" = comdat any

$"std.io.IoError$READ_ONLY" = comdat any

$"std.io.IoError$SYMLINK_FAILED" = comdat any

$"std.io.IoError$TOO_MANY_DESCRIPTORS" = comdat any

$"std.io.IoError$UNEXPECTED_EOF" = comdat any

$"std.io.IoError$UNKNOWN_ERROR" = comdat any

$"std.io.IoError$UNSUPPORTED_OPERATION" = comdat any

$"std.io.IoError$WOULD_BLOCK" = comdat any

$"$ct.std.io.IoError" = comdat any

$"$ct.std.io.BufferData" = comdat any

$"$ct.int" = comdat any

$"$ct.std.io.Seek" = comdat any

$"std.io.FormattingFault$BAD_FORMAT" = comdat any

$"$ct.std.io.FormattingFault" = comdat any

$"$ct.std.io.FloatFormatting" = comdat any

$"$ct.std.io.File" = comdat any

$"std.io.PrintFault$BUFFER_EXCEEDED" = comdat any

$"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" = comdat any

$"std.io.PrintFault$INVALID_FORMAT" = comdat any

$"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" = comdat any

$"std.io.PrintFault$INVALID_ARGUMENT" = comdat any

$"$ct.std.io.PrintFault" = comdat any

$"$ct.std.io.$anon" = comdat any

$"$ct.std.io.Formatter" = comdat any

$"$ct.std.io.PrintFlags" = comdat any

$"$ct.uint" = comdat any

$"$sel.read_byte" = comdat any

$"$ct.ulong" = comdat any

$"$sel.write" = comdat any

$"$ct.std.core.mem.allocator.TempAllocator" = comdat any

$"$sel.release" = comdat any

$"$ct.long" = comdat any

$"$sel.acquire" = comdat any

$"$sel.resize" = comdat any

$"$sel.close" = comdat any

$"$sel.read" = comdat any

$"$ct.void" = comdat any

$"$sel.available" = comdat any

$"std.core.builtin.SearchResult$MISSING" = comdat any

$"$ct.std.core.builtin.SearchResult" = comdat any

$"$sel.flush" = comdat any

$"$sel.write_byte" = comdat any

$std.io.XDIGITS_H = comdat any

$std.io.XDIGITS_L = comdat any

$"$ct.bool" = comdat any

$"$ct.ichar" = comdat any

$"$ct.short" = comdat any

$"$ct.int128" = comdat any

$"$ct.char" = comdat any

$"$ct.ushort" = comdat any

$"$ct.uint128" = comdat any

$"$ct.float" = comdat any

$"$ct.double" = comdat any

$"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" = comdat any

$"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" = comdat any

$"$ct.std.core.types.ConversionResult" = comdat any

$"$ct.anyfault" = comdat any

$"$sel.seek" = comdat any

$"$sel.write_to" = comdat any

$"$sel.read_to" = comdat any

$std.io.PRINTF_NTOA_BUFFER_SIZE = comdat any

$"$ct.String" = comdat any

$"$ct.sa$char" = comdat any

$"$sel.to_format" = comdat any

$"$sel.to_string" = comdat any

$"$ct.std.core.mem.allocator.OnStackAllocator" = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.std.core.dstring.DString" = comdat any

$"$ct.p$void" = comdat any

$"$sel.pushback_byte" = comdat any

$"$sel.len" = comdat any

$"$sel.destroy" = comdat any

$"$sel.read_from" = comdat any

$"$ct.ReflectedParam" = comdat any

@"$ct.std.io.BitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BitWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.LimitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Scanner" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ReadBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.WriteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"std.io.IoError$ALREADY_EXISTS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault, i64 14 }, i64 1 }, comdat, align 8
@.fault = internal constant [15 x i8] c"ALREADY_EXISTS\00", align 1
@"std.io.IoError$BUSY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.1, i64 4 }, i64 2 }, comdat, align 8
@.fault.1 = internal constant [5 x i8] c"BUSY\00", align 1
@"std.io.IoError$CANNOT_READ_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.2, i64 15 }, i64 3 }, comdat, align 8
@.fault.2 = internal constant [16 x i8] c"CANNOT_READ_DIR\00", align 1
@"std.io.IoError$DIR_NOT_EMPTY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.3, i64 13 }, i64 4 }, comdat, align 8
@.fault.3 = internal constant [14 x i8] c"DIR_NOT_EMPTY\00", align 1
@"std.io.IoError$EOF" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.4, i64 3 }, i64 5 }, comdat, align 8
@.fault.4 = internal constant [4 x i8] c"EOF\00", align 1
@"std.io.IoError$FILE_CANNOT_DELETE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.5, i64 18 }, i64 6 }, comdat, align 8
@.fault.5 = internal constant [19 x i8] c"FILE_CANNOT_DELETE\00", align 1
@"std.io.IoError$FILE_IS_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.6, i64 11 }, i64 7 }, comdat, align 8
@.fault.6 = internal constant [12 x i8] c"FILE_IS_DIR\00", align 1
@"std.io.IoError$FILE_IS_PIPE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.7, i64 12 }, i64 8 }, comdat, align 8
@.fault.7 = internal constant [13 x i8] c"FILE_IS_PIPE\00", align 1
@"std.io.IoError$FILE_NOT_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.8, i64 12 }, i64 9 }, comdat, align 8
@.fault.8 = internal constant [13 x i8] c"FILE_NOT_DIR\00", align 1
@"std.io.IoError$FILE_NOT_FOUND" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.9, i64 14 }, i64 10 }, comdat, align 8
@.fault.9 = internal constant [15 x i8] c"FILE_NOT_FOUND\00", align 1
@"std.io.IoError$FILE_NOT_VALID" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.10, i64 14 }, i64 11 }, comdat, align 8
@.fault.10 = internal constant [15 x i8] c"FILE_NOT_VALID\00", align 1
@"std.io.IoError$GENERAL_ERROR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.11, i64 13 }, i64 12 }, comdat, align 8
@.fault.11 = internal constant [14 x i8] c"GENERAL_ERROR\00", align 1
@"std.io.IoError$ILLEGAL_ARGUMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.12, i64 16 }, i64 13 }, comdat, align 8
@.fault.12 = internal constant [17 x i8] c"ILLEGAL_ARGUMENT\00", align 1
@"std.io.IoError$INCOMPLETE_WRITE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.13, i64 16 }, i64 14 }, comdat, align 8
@.fault.13 = internal constant [17 x i8] c"INCOMPLETE_WRITE\00", align 1
@"std.io.IoError$INTERRUPTED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.14, i64 11 }, i64 15 }, comdat, align 8
@.fault.14 = internal constant [12 x i8] c"INTERRUPTED\00", align 1
@"std.io.IoError$INVALID_POSITION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.15, i64 16 }, i64 16 }, comdat, align 8
@.fault.15 = internal constant [17 x i8] c"INVALID_POSITION\00", align 1
@"std.io.IoError$INVALID_PUSHBACK" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.16, i64 16 }, i64 17 }, comdat, align 8
@.fault.16 = internal constant [17 x i8] c"INVALID_PUSHBACK\00", align 1
@"std.io.IoError$NAME_TOO_LONG" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.17, i64 13 }, i64 18 }, comdat, align 8
@.fault.17 = internal constant [14 x i8] c"NAME_TOO_LONG\00", align 1
@"std.io.IoError$NOT_SEEKABLE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.18, i64 12 }, i64 19 }, comdat, align 8
@.fault.18 = internal constant [13 x i8] c"NOT_SEEKABLE\00", align 1
@"std.io.IoError$NO_PERMISSION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.19, i64 13 }, i64 20 }, comdat, align 8
@.fault.19 = internal constant [14 x i8] c"NO_PERMISSION\00", align 1
@"std.io.IoError$OUT_OF_SPACE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.20, i64 12 }, i64 21 }, comdat, align 8
@.fault.20 = internal constant [13 x i8] c"OUT_OF_SPACE\00", align 1
@"std.io.IoError$OVERFLOW" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.21, i64 8 }, i64 22 }, comdat, align 8
@.fault.21 = internal constant [9 x i8] c"OVERFLOW\00", align 1
@"std.io.IoError$READ_ONLY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.22, i64 9 }, i64 23 }, comdat, align 8
@.fault.22 = internal constant [10 x i8] c"READ_ONLY\00", align 1
@"std.io.IoError$SYMLINK_FAILED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.23, i64 14 }, i64 24 }, comdat, align 8
@.fault.23 = internal constant [15 x i8] c"SYMLINK_FAILED\00", align 1
@"std.io.IoError$TOO_MANY_DESCRIPTORS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.24, i64 20 }, i64 25 }, comdat, align 8
@.fault.24 = internal constant [21 x i8] c"TOO_MANY_DESCRIPTORS\00", align 1
@"std.io.IoError$UNEXPECTED_EOF" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.25, i64 14 }, i64 26 }, comdat, align 8
@.fault.25 = internal constant [15 x i8] c"UNEXPECTED_EOF\00", align 1
@"std.io.IoError$UNKNOWN_ERROR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.26, i64 13 }, i64 27 }, comdat, align 8
@.fault.26 = internal constant [14 x i8] c"UNKNOWN_ERROR\00", align 1
@"std.io.IoError$UNSUPPORTED_OPERATION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.27, i64 21 }, i64 28 }, comdat, align 8
@.fault.27 = internal constant [22 x i8] c"UNSUPPORTED_OPERATION\00", align 1
@"std.io.IoError$WOULD_BLOCK" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.28, i64 11 }, i64 29 }, comdat, align 8
@.fault.28 = internal constant [12 x i8] c"WOULD_BLOCK\00", align 1
@"$ct.std.io.IoError" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 29, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BufferData" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.SET = internal constant [4 x i8] c"SET\00", align 1
@.enum.CURSOR = internal constant [7 x i8] c"CURSOR\00", align 1
@.enum.END = internal constant [4 x i8] c"END\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Seek" = linkonce global { i8, i64, ptr, i64, i64, i64, [3 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 3, [3 x %"char[]"] [%"char[]" { ptr @.enum.SET, i64 3 }, %"char[]" { ptr @.enum.CURSOR, i64 6 }, %"char[]" { ptr @.enum.END, i64 3 }] }, comdat, align 8
@"std.io.FormattingFault$BAD_FORMAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.FormattingFault" to i64), %"char[]" { ptr @.fault.29, i64 10 }, i64 1 }, comdat, align 8
@.fault.29 = internal constant [11 x i8] c"BAD_FORMAT\00", align 1
@"$ct.std.io.FormattingFault" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.FLOAT = internal constant [6 x i8] c"FLOAT\00", align 1
@.enum.EXPONENTIAL = internal constant [12 x i8] c"EXPONENTIAL\00", align 1
@.enum.ADAPTIVE = internal constant [9 x i8] c"ADAPTIVE\00", align 1
@.enum.HEX = internal constant [4 x i8] c"HEX\00", align 1
@"$ct.std.io.FloatFormatting" = linkonce global { i8, i64, ptr, i64, i64, i64, [4 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 4, [4 x %"char[]"] [%"char[]" { ptr @.enum.FLOAT, i64 5 }, %"char[]" { ptr @.enum.EXPONENTIAL, i64 11 }, %"char[]" { ptr @.enum.ADAPTIVE, i64 8 }, %"char[]" { ptr @.enum.HEX, i64 3 }] }, comdat, align 8
@"$ct.std.io.File" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"std.io.PrintFault$BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.30, i64 15 }, i64 1 }, comdat, align 8
@.fault.30 = internal constant [16 x i8] c"BUFFER_EXCEEDED\00", align 1
@"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.31, i64 24 }, i64 2 }, comdat, align 8
@.fault.31 = internal constant [25 x i8] c"INTERNAL_BUFFER_EXCEEDED\00", align 1
@"std.io.PrintFault$INVALID_FORMAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.32, i64 14 }, i64 3 }, comdat, align 8
@.fault.32 = internal constant [15 x i8] c"INVALID_FORMAT\00", align 1
@"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.33, i64 20 }, i64 4 }, comdat, align 8
@.fault.33 = internal constant [21 x i8] c"NOT_ENOUGH_ARGUMENTS\00", align 1
@"std.io.PrintFault$INVALID_ARGUMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.34, i64 16 }, i64 5 }, comdat, align 8
@.fault.34 = internal constant [17 x i8] c"INVALID_ARGUMENT\00", align 1
@"$ct.std.io.PrintFault" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.$anon" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Formatter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.PrintFlags" = linkonce global %.introspect { i8 12, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file = internal constant [8 x i8] c"bits.c3\00", align 1
@.func = internal constant [5 x i8] c"init\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.36 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.func.37 = internal constant [6 x i8] c"clear\00", align 1
@.func.38 = internal constant [10 x i8] c"read_bits\00", align 1
@.panic_msg.39 = internal constant [32 x i8] c"@require \22nbits <= 8\22 violated.\00", align 1
@.panic_msg.40 = internal constant [57 x i8] c"@require \22self.len + nbits <= uint.sizeof * 8\22 violated.\00", align 1
@"$sel.read_byte" = linkonce_odr constant [10 x i8] c"read_byte\00", comdat, align 1
@.panic_msg.41 = internal constant [47 x i8] c"No method 'read_byte' could be found on target\00", align 1
@.panic_msg.42 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.func.43 = internal constant [6 x i8] c"flush\00", align 1
@.panic_msg.44 = internal constant [118 x i8] c"@require \22is_arrayptr_or_slice_of_char(bytes)\22 violated: 'argument must be a pointer to an array or a slice of char'.\00", align 1
@.file.45 = internal constant [12 x i8] c"bitorder.c3\00", align 1
@.panic_msg.46 = internal constant [47 x i8] c"Dereference of null pointer, 'bytes' was null.\00", align 1
@.panic_msg.47 = internal constant [59 x i8] c"Dereference of null pointer, '$typeof(x)*)s.ptr' was null.\00", align 1
@.panic_msg.48 = internal constant [54 x i8] c"Dereference of null pointer, '$Type*)&expr' was null.\00", align 1
@.file.49 = internal constant [11 x i8] c"builtin.c3\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.50 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$sel.write" = linkonce_odr constant [6 x i8] c"write\00", comdat, align 1
@.panic_msg.51 = internal constant [43 x i8] c"No method 'write' could be found on target\00", align 1
@.file.52 = internal constant [10 x i8] c"stream.c3\00", align 1
@.func.53 = internal constant [11 x i8] c"write_bits\00", align 1
@.file.54 = internal constant [14 x i8] c"bytebuffer.c3\00", align 1
@.func.55 = internal constant [9 x i8] c"new_init\00", align 1
@.panic_msg.56 = internal constant [72 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Buffer already initialized.'.\00", align 1
@.func.57 = internal constant [10 x i8] c"temp_init\00", align 1
@std.core.mem.allocator.thread_temp_allocator = extern_weak thread_local global ptr, align 8
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@.func.58 = internal constant [17 x i8] c"init_with_buffer\00", align 1
@.panic_msg.59 = internal constant [33 x i8] c"@require \22buf.len > 0\22 violated.\00", align 1
@.func.60 = internal constant [5 x i8] c"free\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.61 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.file.62 = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func.63 = internal constant [6 x i8] c"write\00", align 1
@.panic_msg.64 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.panic_msg.65 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@.func.66 = internal constant [11 x i8] c"write_byte\00", align 1
@.panic_msg.67 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.func.68 = internal constant [5 x i8] c"read\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.69 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.func.70 = internal constant [10 x i8] c"read_byte\00", align 1
@.func.71 = internal constant [14 x i8] c"pushback_byte\00", align 1
@.panic_msg.72 = internal constant [17 x i8] c"Assert violation\00", align 1
@.func.73 = internal constant [5 x i8] c"seek\00", align 1
@.func.74 = internal constant [10 x i8] c"available\00", align 1
@.func.75 = internal constant [5 x i8] c"grow\00", align 1
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg.76 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.77 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.file.78 = internal constant [15 x i8] c"limitreader.c3\00", align 1
@.func.79 = internal constant [6 x i8] c"close\00", align 1
@"$sel.close" = linkonce_odr constant [6 x i8] c"close\00", comdat, align 1
@.panic_msg.80 = internal constant [43 x i8] c"No method 'close' could be found on target\00", align 1
@"$sel.read" = linkonce_odr constant [5 x i8] c"read\00", comdat, align 1
@.panic_msg.81 = internal constant [42 x i8] c"No method 'read' could be found on target\00", align 1
@.file.82 = internal constant [14 x i8] c"bytereader.c3\00", align 1
@.func.83 = internal constant [4 x i8] c"len\00", align 1
@.panic_msg.84 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.85 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.86 = internal constant [9 x i8] c"write_to\00", align 1
@.file.87 = internal constant [14 x i8] c"bytewriter.c3\00", align 1
@.panic_msg.88 = internal constant [89 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.panic_msg.89 = internal constant [53 x i8] c"@ensure \22(bool)allocator, self.index == 0\22 violated.\00", align 1
@.panic_msg.90 = internal constant [36 x i8] c"@ensure \22self.index == 0\22 violated.\00", align 1
@"$ct.void" = linkonce global %.introspect { i8 0, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.91 = internal constant [8 x i8] c"destroy\00", align 1
@.func.92 = internal constant [9 x i8] c"str_view\00", align 1
@.func.93 = internal constant [16 x i8] c"ensure_capacity\00", align 1
@.func.94 = internal constant [10 x i8] c"read_from\00", align 1
@"$sel.available" = linkonce_odr constant [10 x i8] c"available\00", comdat, align 1
@.panic_msg.95 = internal constant [47 x i8] c"No method 'available' could be found on target\00", align 1
@.file.96 = internal constant [11 x i8] c"scanner.c3\00", align 1
@.panic_msg.97 = internal constant [66 x i8] c"@require \22buffer.len > 0\22 violated: 'Non-empty buffer required.'.\00", align 1
@.func.98 = internal constant [5 x i8] c"scan\00", align 1
@.panic_msg.99 = internal constant [68 x i8] c"@require \22pattern.len > 0\22 violated: 'Non-empty pattern required.'.\00", align 1
@.panic_msg.100 = internal constant [70 x i8] c"@require \22self.buf.len > pattern.len\22 violated: 'Pattern too large.'.\00", align 1
@"std.core.builtin.SearchResult$MISSING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.SearchResult" to i64), %"char[]" { ptr @.fault.101, i64 7 }, i64 1 }, comdat, align 8
@.fault.101 = internal constant [8 x i8] c"MISSING\00", align 1
@"$ct.std.core.builtin.SearchResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@.file.102 = internal constant [10 x i8] c"buffer.c3\00", align 1
@.panic_msg.103 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.func.104 = internal constant [7 x i8] c"refill\00", align 1
@.panic_msg.105 = internal constant [64 x i8] c"@require \22bytes.len > 0\22 violated: 'Non-empty buffer required'.\00", align 1
@"$sel.flush" = linkonce_odr constant [6 x i8] c"flush\00", comdat, align 1
@.panic_msg.106 = internal constant [43 x i8] c"No method 'flush' could be found on target\00", align 1
@.func.107 = internal constant [14 x i8] c"write_pending\00", align 1
@"$sel.write_byte" = linkonce_odr constant [11 x i8] c"write_byte\00", comdat, align 1
@.panic_msg.108 = internal constant [48 x i8] c"No method 'write_byte' could be found on target\00", align 1
@.file.109 = internal constant [6 x i8] c"io.c3\00", align 1
@.func.110 = internal constant [9 x i8] c"fprintfn\00", align 1
@.panic_msg.111 = internal constant [48 x i8] c"Dereference of null pointer, 'stream' was null.\00", align 1
@.func.112 = internal constant [17 x i8] c"out_putstream_fn\00", align 1
@.func.113 = internal constant [8 x i8] c"bprintf\00", align 1
@.func.114 = internal constant [14 x i8] c"out_buffer_fn\00", align 1
@stdout.file = internal global %File zeroinitializer, align 8, !dbg !0
@stdout = external global ptr, align 8
@stderr.file = internal global %File zeroinitializer, align 8, !dbg !8
@stderr = external global ptr, align 8
@stdin.file = internal global %File zeroinitializer, align 8, !dbg !10
@stdin = external global ptr, align 8
@std.io.XDIGITS_H = weak constant [16 x i8] c"0123456789ABCDEF", comdat, align 16, !dbg !12
@std.io.XDIGITS_L = weak constant [16 x i8] c"0123456789abcdef", comdat, align 16, !dbg !19
@.panic_msg.116 = internal constant [48 x i8] c"Dereference of null pointer, 'is_neg' was null.\00", align 1
@.file.117 = internal constant [21 x i8] c"formatter_private.c3\00", align 1
@.func.118 = internal constant [13 x i8] c"int_from_any\00", align 1
@.panic_msg.119 = internal constant [56 x i8] c"Dereference of null pointer, 'void**)arg.ptr' was null.\00", align 1
@.panic_msg.120 = internal constant [50 x i8] c"Attempted to access 'inner' on non composite type\00", align 1
@"$ct.bool" = linkonce global %.introspect { i8 1, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.121 = internal constant [45 x i8] c"Dereference of null pointer, 'arg' was null.\00", align 1
@"$ct.ichar" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.short" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.int128" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.float" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.double" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.122 = internal constant [15 x i8] c"float_from_any\00", align 1
@.panic_msg.123 = internal constant [49 x i8] c"Dereference of null pointer, 'len_ptr' was null.\00", align 1
@.func.124 = internal constant [12 x i8] c"simple_atoi\00", align 1
@.panic_msg.125 = internal constant [45 x i8] c"Dereference of null pointer, '--s' was null.\00", align 1
@.func.126 = internal constant [6 x i8] c"fmt_u\00", align 1
@.panic_msg.127 = internal constant [51 x i8] c"Dereference of null pointer, 'index_ptr' was null.\00", align 1
@.func.128 = internal constant [26 x i8] c"printf_parse_format_field\00", align 1
@.panic_msg.129 = internal constant [56 x i8] c"Dereference of null pointer, 'args_index_ptr' was null.\00", align 1
@.panic_msg.130 = internal constant [107 x i8] c"@require \22$Type.kindof.is_int() || $Type.kindof == TypeKind.ENUM\22 violated: 'Argument was not an integer'.\00", align 1
@.file.131 = internal constant [9 x i8] c"types.c3\00", align 1
@.panic_msg.132 = internal constant [53 x i8] c"Dereference of null pointer, 'char*)v.ptr' was null.\00", align 1
@"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.types.ConversionResult" to i64), %"char[]" { ptr @.fault.133, i64 18 }, i64 1 }, comdat, align 8
@.fault.133 = internal constant [19 x i8] c"VALUE_OUT_OF_RANGE\00", align 1
@"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.types.ConversionResult" to i64), %"char[]" { ptr @.fault.134, i64 27 }, i64 2 }, comdat, align 8
@.fault.134 = internal constant [28 x i8] c"VALUE_OUT_OF_UNSIGNED_RANGE\00", align 1
@"$ct.std.core.types.ConversionResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.135 = internal constant [54 x i8] c"Dereference of null pointer, 'short*)v.ptr' was null.\00", align 1
@.panic_msg.136 = internal constant [52 x i8] c"Dereference of null pointer, 'int*)v.ptr' was null.\00", align 1
@.panic_msg.137 = internal constant [53 x i8] c"Dereference of null pointer, 'long*)v.ptr' was null.\00", align 1
@.panic_msg.138 = internal constant [55 x i8] c"Dereference of null pointer, 'int128*)v.ptr' was null.\00", align 1
@.panic_msg.139 = internal constant [55 x i8] c"Dereference of null pointer, 'ushort*)v.ptr' was null.\00", align 1
@.panic_msg.140 = internal constant [53 x i8] c"Dereference of null pointer, 'uint*)v.ptr' was null.\00", align 1
@.panic_msg.141 = internal constant [54 x i8] c"Dereference of null pointer, 'ulong*)v.ptr' was null.\00", align 1
@.panic_msg.142 = internal constant [56 x i8] c"Dereference of null pointer, 'uint128*)v.ptr' was null.\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.143 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.144 = private unnamed_addr constant [26 x i8] c"printf_parse_format_field\00", align 1
@.func.145 = internal constant [7 x i8] c"adjust\00", align 1
@.func.146 = internal constant [11 x i8] c"out_substr\00", align 1
@.func.147 = internal constant [4 x i8] c"pad\00", align 1
@.func.148 = internal constant [10 x i8] c"out_chars\00", align 1
@.func.149 = internal constant [5 x i8] c"etoa\00", align 1
@.func.150 = internal constant [5 x i8] c"ftoa\00", align 1
@.func.151 = internal constant [5 x i8] c"gtoa\00", align 1
@.func.152 = internal constant [5 x i8] c"atoa\00", align 1
@.func.153 = internal constant [12 x i8] c"floatformat\00", align 1
@floatformat.BUF_SIZE = internal unnamed_addr constant i32 126, align 4, !dbg !21
@.str.154 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.155 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.156 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.157 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.158 = internal constant [48 x i8] c"Dereference of null pointer, '--estr' was null.\00", align 1
@.panic_msg.159 = internal constant [45 x i8] c"Dereference of null pointer, 's++' was null.\00", align 1
@.str.160 = private unnamed_addr constant [3 x i8] c"0X\00", align 1
@.str.161 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.162 = internal constant [43 x i8] c"Dereference of null pointer, 'd' was null.\00", align 1
@.panic_msg.163 = internal constant [45 x i8] c"Dereference of null pointer, '--a' was null.\00", align 1
@.panic_msg.164 = internal constant [43 x i8] c"Dereference of null pointer, 'a' was null.\00", align 1
@.panic_msg.165 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.166 = internal constant [18 x i8] c"Division by zero.\00", align 1
@.panic_msg.167 = internal constant [45 x i8] c"Dereference of null pointer, 'd--' was null.\00", align 1
@.func.168 = internal constant [5 x i8] c"ntoa\00", align 1
@.func.169 = internal constant [12 x i8] c"ntoa_format\00", align 1
@.str.170 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.171 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.172 = private unnamed_addr constant [22 x i8] c"Formatter.ntoa_format\00", align 1
@.func.173 = internal constant [9 x i8] c"ntoa_any\00", align 1
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.174 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@.func.175 = internal constant [9 x i8] c"out_char\00", align 1
@.str.176 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.177 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.178 = private unnamed_addr constant [19 x i8] c"Formatter.out_char\00", align 1
@.func.179 = internal constant [12 x i8] c"out_reverse\00", align 1
@std.io.MAX_VARS = internal unnamed_addr constant { [2 x i8], i8, i8, i8, [3 x i8], i8 } { [2 x i8] zeroinitializer, i8 3, i8 0, i8 5, [3 x i8] zeroinitializer, i8 10 }, align 1, !dbg !24
@"$sel.seek" = linkonce_odr constant [5 x i8] c"seek\00", comdat, align 1
@.panic_msg.180 = internal constant [42 x i8] c"No method 'seek' could be found on target\00", align 1
@.func.181 = internal constant [8 x i8] c"copy_to\00", align 1
@"$sel.write_to" = linkonce_odr constant [9 x i8] c"write_to\00", comdat, align 1
@.panic_msg.182 = internal constant [46 x i8] c"No method 'write_to' could be found on target\00", align 1
@"$sel.read_to" = linkonce_odr constant [8 x i8] c"read_to\00", comdat, align 1
@.panic_msg.183 = internal constant [45 x i8] c"No method 'read_to' could be found on target\00", align 1
@std.io.PRINTF_NTOA_BUFFER_SIZE = weak local_unnamed_addr constant i32 256, comdat, align 4, !dbg !30
@.file.184 = internal constant [13 x i8] c"formatter.c3\00", align 1
@.func.185 = internal constant [10 x i8] c"to_format\00", align 1
@.str.186 = private unnamed_addr constant [17 x i8] c"[Parameter '%s']\00", align 1
@"$ct.String" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.sa$char" to i64), ptr null, i64 16, i64 ptrtoint (ptr @"$ct.sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.sa$char" = linkonce global %.introspect { i8 16, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.187 = internal constant [7 x i8] c"printf\00", align 1
@.func.188 = internal constant [4 x i8] c"out\00", align 1
@.panic_msg.189 = internal constant [55 x i8] c"Calling null function pointer, 'self.out_fn' was null.\00", align 1
@.func.190 = internal constant [20 x i8] c"print_with_function\00", align 1
@"$sel.to_format" = linkonce_odr constant [10 x i8] c"to_format\00", comdat, align 1
@.str.191 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.192 = internal constant [47 x i8] c"No method 'to_format' could be found on target\00", align 1
@"$sel.to_string" = linkonce_odr constant [10 x i8] c"to_string\00", comdat, align 1
@.str.193 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@"$ct.std.core.mem.allocator.OnStackAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.194 = internal constant [47 x i8] c"No method 'to_string' could be found on target\00", align 1
@.func.195 = internal constant [8 x i8] c"out_str\00", align 1
@.str.196 = private unnamed_addr constant [7 x i8] c"typeid\00", align 1
@.str.197 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@.panic_msg.198 = internal constant [59 x i8] c"Dereference of null pointer, 'anyfault*)arg.ptr' was null.\00", align 1
@.panic_msg.199 = internal constant [50 x i8] c"Dereference of null pointer, 'any*)arg' was null.\00", align 1
@.str.200 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.201 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.202 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.203 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.204 = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.panic_msg.205 = internal constant [55 x i8] c"Dereference of null pointer, 'bool*)arg.ptr' was null.\00", align 1
@.str.206 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.207 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.208 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.209 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.210 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.panic_msg.211 = internal constant [52 x i8] c"Attempted to access 'names' on non enum/fault type.\00", align 1
@.panic_msg.212 = internal constant [50 x i8] c"Illegal enum value found, numerical value was %d.\00", align 1
@.str.213 = private unnamed_addr constant [9 x i8] c"<struct>\00", align 1
@.str.214 = private unnamed_addr constant [8 x i8] c"<union>\00", align 1
@.str.215 = private unnamed_addr constant [12 x i8] c"<bitstruct>\00", align 1
@.str.216 = private unnamed_addr constant [11 x i8] c"<function>\00", align 1
@.panic_msg.217 = internal constant [53 x i8] c"Dereference of null pointer, 'String*)arg' was null.\00", align 1
@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.218 = internal constant [54 x i8] c"Dereference of null pointer, 'ZString*)arg' was null.\00", align 1
@.panic_msg.219 = internal constant [55 x i8] c"Dereference of null pointer, 'ZString*)arg)' was null.\00", align 1
@.str.220 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@"$ct.std.core.dstring.DString" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$void" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$void" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.void" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.221 = internal constant [54 x i8] c"Dereference of null pointer, 'DString*)arg' was null.\00", align 1
@.panic_msg.222 = internal constant [55 x i8] c"Dereference of null pointer, 'DString*)arg)' was null.\00", align 1
@.str.223 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.224 = internal constant [49 x i8] c"Dereference of null pointer, 'pointer' was null.\00", align 1
@.str.225 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.226 = internal constant [44 x i8] c"Attempted to access 'len' on non array type\00", align 1
@.str.227 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.228 = private unnamed_addr constant [3 x i8] c"[<\00", align 1
@.str.229 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.230 = private unnamed_addr constant [3 x i8] c">]\00", align 1
@.panic_msg.231 = internal constant [46 x i8] c"Dereference of null pointer, 'temp' was null.\00", align 1
@.str.232 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.233 = private unnamed_addr constant [16 x i8] c"Already handled\00", align 1
@.str.234 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.235 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.236 = private unnamed_addr constant [13 x i8] c"Invalid type\00", align 1
@.func.237 = internal constant [8 x i8] c"vprintf\00", align 1
@.str.238 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.239 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.240 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.241 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.242 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.243 = private unnamed_addr constant [10 x i8] c"<MISSING>\00", align 1
@.str.244 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.245 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.246 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.247 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.248 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.249 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.func.250 = internal constant [6 x i8] c"print\00", align 1
@"$ct.dyn.std.io.ByteBuffer.write" = global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteBuffer.write_byte" = global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteBuffer.read" = global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteBuffer.read_byte" = global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteBuffer.pushback_byte" = global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.pushback_byte" = linkonce_odr constant [14 x i8] c"pushback_byte\00", comdat, align 1
@"$ct.dyn.std.io.ByteBuffer.seek" = global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteBuffer.available" = global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.LimitReader.close" = global { ptr, ptr, ptr } { ptr @std.io.LimitReader.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.LimitReader.read" = global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.LimitReader.read_byte" = global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.LimitReader.available" = global { ptr, ptr, ptr } { ptr @std.io.LimitReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteReader.len" = global { ptr, ptr, ptr } { ptr @std.io.ByteReader.len, ptr @"$sel.len", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.len" = linkonce_odr constant [4 x i8] c"len\00", comdat, align 1
@"$ct.dyn.std.io.ByteReader.read" = global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteReader.read_byte" = global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteReader.pushback_byte" = global { ptr, ptr, ptr } { ptr @std.io.ByteReader.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteReader.seek" = global { ptr, ptr, ptr } { ptr @std.io.ByteReader.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteReader.write_to" = global { ptr, ptr, ptr } { ptr @std.io.ByteReader.write_to, ptr @"$sel.write_to", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteReader.available" = global { ptr, ptr, ptr } { ptr @std.io.ByteReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteWriter.destroy" = global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.destroy, ptr @"$sel.destroy", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.destroy" = linkonce_odr constant [8 x i8] c"destroy\00", comdat, align 1
@"$ct.dyn.std.io.ByteWriter.write" = global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteWriter.write_byte" = global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ByteWriter.read_from" = global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.read_from, ptr @"$sel.read_from", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$sel.read_from" = linkonce_odr constant [10 x i8] c"read_from\00", comdat, align 1
@"$ct.dyn.std.io.Scanner.flush" = global { ptr, ptr, ptr } { ptr @std.io.Scanner.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.Scanner.close" = global { ptr, ptr, ptr } { ptr @std.io.Scanner.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.Scanner.read" = global { ptr, ptr, ptr } { ptr @std.io.Scanner.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.Scanner.read_byte" = global { ptr, ptr, ptr } { ptr @std.io.Scanner.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ReadBuffer.close" = global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ReadBuffer.read" = global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.ReadBuffer.read_byte" = global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.WriteBuffer.close" = global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.WriteBuffer.flush" = global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.WriteBuffer.write" = global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.io.WriteBuffer.write_byte" = global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.dyn.std.core.ReflectedParam.to_format" = global { ptr, ptr, ptr } { ptr @std.core.ReflectedParam.to_format, ptr @"$sel.to_format", ptr inttoptr (i64 -1 to ptr) }, align 8
@"$ct.ReflectedParam" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.BitReader.init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !78 {
entry:
  %self = alloca ptr, align 8
  %byte_reader = alloca %any, align 8
  %.assign_list = alloca %BitReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !94
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !94
  br i1 %4, label %panic, label %checkok, !dbg !94

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !95, metadata !DIExpression()), !dbg !96
  store i64 %1, ptr %byte_reader, align 8
  %ptradd = getelementptr inbounds i8, ptr %byte_reader, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %byte_reader, metadata !97, metadata !DIExpression()), !dbg !98
  %5 = load ptr, ptr %self, align 8, !dbg !99
  %checknull = icmp eq ptr %5, null, !dbg !99
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !99
  br i1 %6, label %panic1, label %checkok2, !dbg !99

checkok2:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %byte_reader, i32 16, i1 false), !dbg !100
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !100
  ret void, !dbg !100

panic:                                            ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !96
  call void %7(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func, i64 4, i32 10), !dbg !96
  unreachable, !dbg !96

panic1:                                           ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !99
  call void %8(ptr @.panic_msg.36, i64 45, ptr @.file, i64 7, ptr @.func, i64 4, i32 12), !dbg !99
  unreachable, !dbg !99
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.BitReader.clear(ptr %0) #0 comdat !dbg !101 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !104
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !104
  br i1 %2, label %panic, label %checkok, !dbg !104

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !105, metadata !DIExpression()), !dbg !106
  %3 = load ptr, ptr %self, align 8, !dbg !107
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !107
  store i32 0, ptr %ptradd, align 4, !dbg !108
  ret void, !dbg !108

panic:                                            ; preds = %entry
  %4 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !106
  call void %4(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.37, i64 5, i32 15), !dbg !106
  unreachable, !dbg !106
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.BitReader.read_bits(ptr %0, ptr %1, i32 %2) #0 comdat !dbg !109 {
entry:
  %self = alloca ptr, align 8
  %nbits = alloca i32, align 4
  %bits = alloca i32, align 4
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  %mask = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr16 = alloca i32, align 4
  %varargslots17 = alloca [1 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr26 = alloca i32, align 4
  %varargslots27 = alloca [1 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !115
  %3 = icmp eq ptr %1, null, !dbg !115
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !115
  br i1 %4, label %panic, label %checkok, !dbg !115

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !116, metadata !DIExpression()), !dbg !117
  store i32 %2, ptr %nbits, align 4
  call void @llvm.dbg.declare(metadata ptr %nbits, metadata !118, metadata !DIExpression()), !dbg !119
  %5 = load i32, ptr %nbits, align 4, !dbg !120
  %ge = icmp uge i32 8, %5, !dbg !120
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !120

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !120
  call void %6(ptr @.panic_msg.39, i64 31, ptr @.file, i64 7, ptr @.func.38, i64 9, i32 21), !dbg !120
  unreachable, !dbg !120

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !122
  %ptradd = getelementptr inbounds i8, ptr %7, i64 20, !dbg !122
  %8 = load i32, ptr %ptradd, align 4, !dbg !122
  %9 = load i32, ptr %nbits, align 4, !dbg !123
  %add = add i32 %8, %9, !dbg !122
  %zext = zext i32 %add to i64, !dbg !122
  %ge1 = icmp uge i64 32, %zext, !dbg !122
  br i1 %ge1, label %assert_ok3, label %assert_fail2, !dbg !122

assert_fail2:                                     ; preds = %assert_ok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !122
  call void %10(ptr @.panic_msg.40, i64 56, ptr @.file, i64 7, ptr @.func.38, i64 9, i32 22), !dbg !122
  unreachable, !dbg !122

assert_ok3:                                       ; preds = %assert_ok
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !124, metadata !DIExpression()), !dbg !125
  %11 = load ptr, ptr %self, align 8, !dbg !126
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !126
  %12 = load i32, ptr %ptradd4, align 8, !dbg !126
  store i32 %12, ptr %bits, align 4, !dbg !126
  %13 = load ptr, ptr %self, align 8, !dbg !127
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 20, !dbg !127
  %14 = load i32, ptr %ptradd5, align 4, !dbg !127
  %15 = load i32, ptr %nbits, align 4, !dbg !128
  %lt = icmp ult i32 %14, %15, !dbg !127
  br i1 %lt, label %if.then, label %if.exit, !dbg !127

if.then:                                          ; preds = %assert_ok3
  call void @llvm.dbg.declare(metadata ptr %c, metadata !129, metadata !DIExpression()), !dbg !131
  %16 = load ptr, ptr %self, align 8, !dbg !132
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !132
  %17 = load i64, ptr %ptradd6, align 8, !dbg !132
  %18 = inttoptr i64 %17 to ptr, !dbg !132
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !115
  %19 = icmp eq ptr %18, %type, !dbg !115
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !115

cache_miss:                                       ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !115
  %20 = load ptr, ptr %ptradd7, align 8, !dbg !115
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.read_byte"), !dbg !115
  store ptr %21, ptr %.inlinecache, align 8, !dbg !115
  store ptr %18, ptr %.cachedtype, align 8, !dbg !115
  br label %22, !dbg !115

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !115
  br label %22, !dbg !115

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !115
  %23 = icmp eq ptr %fn_phi, null, !dbg !115
  br i1 %23, label %missing_function, label %match, !dbg !115

missing_function:                                 ; preds = %22
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !132
  call void %24(ptr @.panic_msg.41, i64 46, ptr @.file, i64 7, ptr @.func.38, i64 9, i32 30), !dbg !132
  unreachable, !dbg !132

match:                                            ; preds = %22
  %25 = load ptr, ptr %16, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25), !dbg !132
  %not_err = icmp eq i64 %26, 0, !dbg !132
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !132
  br i1 %27, label %after_check, label %assign_optional, !dbg !132

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !132
  br label %guard_block, !dbg !132

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !132

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !132
  ret i64 %28, !dbg !132

noerr_block:                                      ; preds = %after_check
  %29 = load i8, ptr %retparam, align 1, !dbg !132
  store i8 %29, ptr %c, align 1, !dbg !132
  %30 = load i32, ptr %bits, align 4, !dbg !133
  %shl = shl i32 %30, 8, !dbg !133
  %31 = freeze i32 %shl, !dbg !133
  store i32 %31, ptr %bits, align 4, !dbg !133
  %32 = load i32, ptr %bits, align 4, !dbg !134
  %33 = load i8, ptr %c, align 1, !dbg !135
  %zext8 = zext i8 %33 to i32, !dbg !135
  %or = or i32 %32, %zext8, !dbg !134
  store i32 %or, ptr %bits, align 4, !dbg !134
  %34 = load ptr, ptr %self, align 8, !dbg !136
  %ptradd9 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !136
  %35 = load i32, ptr %bits, align 4, !dbg !137
  store i32 %35, ptr %ptradd9, align 8, !dbg !137
  %36 = load ptr, ptr %self, align 8, !dbg !138
  %ptradd10 = getelementptr inbounds i8, ptr %36, i64 20, !dbg !138
  %37 = load i32, ptr %ptradd10, align 4, !dbg !138
  %add11 = add i32 %37, 8, !dbg !138
  store i32 %add11, ptr %ptradd10, align 4, !dbg !138
  br label %if.exit, !dbg !138

if.exit:                                          ; preds = %noerr_block, %assert_ok3
  %38 = load ptr, ptr %self, align 8, !dbg !139
  %ptradd12 = getelementptr inbounds i8, ptr %38, i64 20, !dbg !139
  %39 = load i32, ptr %ptradd12, align 4, !dbg !139
  %40 = load i32, ptr %nbits, align 4, !dbg !140
  %sub = sub i32 %39, %40, !dbg !139
  store i32 %sub, ptr %ptradd12, align 4, !dbg !139
  call void @llvm.dbg.declare(metadata ptr %mask, metadata !141, metadata !DIExpression()), !dbg !142
  %41 = load i32, ptr %nbits, align 4, !dbg !143
  %shift_underflow = icmp slt i32 %41, 0, !dbg !144
  %42 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !144
  br i1 %42, label %panic13, label %checkok14, !dbg !144

checkok14:                                        ; preds = %if.exit
  %shift_exceeds = icmp sge i32 %41, 32, !dbg !144
  %43 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !144
  br i1 %43, label %panic15, label %checkok20, !dbg !144

checkok20:                                        ; preds = %checkok14
  %shl21 = shl i32 1, %41, !dbg !144
  %44 = freeze i32 %shl21, !dbg !144
  %sub22 = sub i32 %44, 1, !dbg !144
  store i32 %sub22, ptr %mask, align 4, !dbg !144
  %45 = load i32, ptr %bits, align 4, !dbg !145
  %46 = load ptr, ptr %self, align 8, !dbg !146
  %ptradd23 = getelementptr inbounds i8, ptr %46, i64 20, !dbg !146
  %47 = load i32, ptr %ptradd23, align 4, !dbg !146
  %shift_exceeds24 = icmp uge i32 %47, 32, !dbg !145
  %48 = call i1 @llvm.expect.i1(i1 %shift_exceeds24, i1 false), !dbg !145
  br i1 %48, label %panic25, label %checkok30, !dbg !145

checkok30:                                        ; preds = %checkok20
  %lshr = lshr i32 %45, %47, !dbg !145
  %49 = freeze i32 %lshr, !dbg !145
  %50 = load i32, ptr %mask, align 4, !dbg !147
  %and = and i32 %49, %50, !dbg !148
  %trunc = trunc i32 %and to i8, !dbg !148
  store i8 %trunc, ptr %0, align 1, !dbg !148
  ret i64 0, !dbg !148

panic:                                            ; preds = %entry
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !117
  call void %51(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.38, i64 9, i32 24), !dbg !117
  unreachable, !dbg !117

panic13:                                          ; preds = %if.exit
  store i32 %41, ptr %taddr, align 4
  %52 = insertvalue %any undef, ptr %taddr, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.38, i64 9, i32 37, ptr byval(%"any[]") align 8 %indirectarg), !dbg !144
  unreachable, !dbg !144

panic15:                                          ; preds = %checkok14
  store i32 %41, ptr %taddr16, align 4
  %55 = insertvalue %any undef, ptr %taddr16, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %56, ptr %varargslots17, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp18" = insertvalue %"any[]" %57, i64 1, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.38, i64 9, i32 37, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !144
  unreachable, !dbg !144

panic25:                                          ; preds = %checkok20
  store i32 %47, ptr %taddr26, align 4
  %58 = insertvalue %any undef, ptr %taddr26, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %59, ptr %varargslots27, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp28" = insertvalue %"any[]" %60, i64 1, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.38, i64 9, i32 38, ptr byval(%"any[]") align 8 %indirectarg29), !dbg !145
  unreachable, !dbg !145
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.BitWriter.init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !149 {
entry:
  %self = alloca ptr, align 8
  %byte_writer = alloca %any, align 8
  %.assign_list = alloca %BitWriter, align 8
  %3 = icmp eq ptr %0, null, !dbg !162
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !162
  br i1 %4, label %panic, label %checkok, !dbg !162

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !163, metadata !DIExpression()), !dbg !164
  store i64 %1, ptr %byte_writer, align 8
  %ptradd = getelementptr inbounds i8, ptr %byte_writer, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %byte_writer, metadata !165, metadata !DIExpression()), !dbg !166
  %5 = load ptr, ptr %self, align 8, !dbg !167
  %checknull = icmp eq ptr %5, null, !dbg !167
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !167
  br i1 %6, label %panic1, label %checkok2, !dbg !167

checkok2:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %byte_writer, i32 16, i1 false), !dbg !168
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !168
  ret void, !dbg !168

panic:                                            ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !164
  call void %7(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func, i64 4, i32 48), !dbg !164
  unreachable, !dbg !164

panic1:                                           ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !167
  call void %8(ptr @.panic_msg.36, i64 45, ptr @.file, i64 7, ptr @.func, i64 4, i32 50), !dbg !167
  unreachable, !dbg !167
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.BitWriter.flush(ptr %0) #0 comdat !dbg !169 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %bits = alloca i32, align 4
  %taddr = alloca i32, align 4
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %n = alloca i32, align 4
  %buffer = alloca [4 x i8], align 1
  %x = alloca i32, align 4
  %bytes = alloca ptr, align 8
  %bytes9 = alloca ptr, align 8
  %s = alloca %"char[]", align 8
  %expr = alloca i32, align 4
  %error_var = alloca i64, align 8
  %stream = alloca %any, align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %buffer28 = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %n33 = alloca i64, align 8
  %error_var34 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !172
  %1 = icmp eq ptr %0, null, !dbg !172
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !172
  br i1 %2, label %panic, label %checkok, !dbg !172

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !173, metadata !DIExpression()), !dbg !174
  %3 = load ptr, ptr %self, align 8, !dbg !175
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !175
  %4 = load i32, ptr %ptradd, align 4, !dbg !175
  %eq = icmp eq i32 0, %4, !dbg !175
  br i1 %eq, label %if.then, label %if.exit, !dbg !175

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !176, metadata !DIExpression()), !dbg !177
  %5 = load ptr, ptr %self, align 8, !dbg !178
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !178
  %6 = load i32, ptr %ptradd1, align 8, !dbg !178
  %7 = load ptr, ptr %self, align 8, !dbg !179
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 20, !dbg !179
  %8 = load i32, ptr %ptradd2, align 4, !dbg !179
  %sub = sub i32 32, %8, !dbg !180
  %shift_exceeds = icmp uge i32 %sub, 32, !dbg !178
  %9 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !178
  br i1 %9, label %panic3, label %checkok4, !dbg !178

checkok4:                                         ; preds = %if.exit
  %shl = shl i32 %6, %sub, !dbg !178
  %10 = freeze i32 %shl, !dbg !178
  store i32 %10, ptr %bits, align 4, !dbg !178
  call void @llvm.dbg.declare(metadata ptr %n, metadata !181, metadata !DIExpression()), !dbg !182
  %11 = load ptr, ptr %self, align 8, !dbg !183
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 20, !dbg !183
  %12 = load i32, ptr %ptradd5, align 4, !dbg !183
  %add = add i32 %12, 7, !dbg !183
  %sdiv = sdiv i32 %add, 8, !dbg !183
  store i32 %sdiv, ptr %n, align 4, !dbg !183
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !184, metadata !DIExpression()), !dbg !188
  store i8 0, ptr %buffer, align 1, !dbg !188
  %ptradd6 = getelementptr inbounds i8, ptr %buffer, i64 1, !dbg !188
  store i8 0, ptr %ptradd6, align 1, !dbg !188
  %ptradd7 = getelementptr inbounds i8, ptr %buffer, i64 2, !dbg !188
  store i8 0, ptr %ptradd7, align 1, !dbg !188
  %ptradd8 = getelementptr inbounds i8, ptr %buffer, i64 3, !dbg !188
  store i8 0, ptr %ptradd8, align 1, !dbg !188
  %13 = load i32, ptr %bits, align 4
  store i32 %13, ptr %x, align 4
  store ptr %buffer, ptr %bytes, align 8
  %14 = load ptr, ptr %bytes, align 8
  store ptr %14, ptr %bytes9, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !189

assert_fail:                                      ; preds = %checkok4
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !192
  call void %15(ptr @.panic_msg.44, i64 117, ptr @.file.45, i64 11, ptr @.func.43, i64 5, i32 107), !dbg !192
  unreachable, !dbg !192

assert_ok:                                        ; preds = %checkok4
  call void @llvm.dbg.declare(metadata ptr %s, metadata !196, metadata !DIExpression()), !dbg !203
  call void @llvm.memset.p0.i64(ptr align 8 %s, i8 0, i64 16, i1 false), !dbg !203
  %16 = load ptr, ptr %bytes, align 8, !dbg !204
  %checknull = icmp eq ptr %16, null, !dbg !204
  %17 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !204
  br i1 %17, label %panic10, label %checkok11, !dbg !204

checkok11:                                        ; preds = %assert_ok
  %18 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !204
  %19 = insertvalue %"char[]" %18, i64 4, 1, !dbg !204
  store %"char[]" %19, ptr %s, align 8, !dbg !204
  %20 = load ptr, ptr %s, align 8, !dbg !205
  %checknull12 = icmp eq ptr %20, null, !dbg !205
  %21 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !205
  br i1 %21, label %panic13, label %checkok14, !dbg !205

checkok14:                                        ; preds = %checkok11
  %22 = load i32, ptr %x, align 4
  store i32 %22, ptr %expr, align 4
  %checknull15 = icmp eq ptr %expr, null, !dbg !206
  %23 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !206
  br i1 %23, label %panic16, label %checkok17, !dbg !206

checkok17:                                        ; preds = %checkok14
  %24 = load i32, ptr %expr, align 4, !dbg !210
  %25 = call i32 @llvm.bswap.i32(i32 %24), !dbg !210
  store i32 %25, ptr %20, align 4, !dbg !210
  %26 = load ptr, ptr %self, align 8, !dbg !211
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %stream, ptr align 8 %26, i32 16, i1 false)
  %27 = load i32, ptr %n, align 4, !dbg !212
  %zext = zext i32 %27 to i64, !dbg !212
  %add18 = add i64 0, %zext, !dbg !212
  %lt = icmp ult i64 4, %add18, !dbg !212
  %sub19 = sub i64 %add18, 1, !dbg !212
  %28 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !212
  br i1 %28, label %panic20, label %checkok27, !dbg !212

checkok27:                                        ; preds = %checkok17
  %size = sub i64 %add18, 0, !dbg !213
  %29 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !213
  %30 = insertvalue %"char[]" %29, i64 %size, 1, !dbg !213
  store %"char[]" %30, ptr %buffer28, align 8
  %ptradd29 = getelementptr inbounds i8, ptr %buffer28, i64 8, !dbg !214
  %31 = load i64, ptr %ptradd29, align 8, !dbg !214
  %eq30 = icmp eq i64 0, %31, !dbg !214
  br i1 %eq30, label %if.then31, label %if.exit32, !dbg !214

if.then31:                                        ; preds = %checkok27
  store i64 0, ptr %blockret, align 8, !dbg !217
  br label %expr_block.exit, !dbg !217

if.exit32:                                        ; preds = %checkok27
  call void @llvm.dbg.declare(metadata ptr %n33, metadata !218, metadata !DIExpression()), !dbg !219
  %ptradd35 = getelementptr inbounds i8, ptr %stream, i64 8, !dbg !220
  %32 = load i64, ptr %ptradd35, align 8, !dbg !220
  %33 = inttoptr i64 %32 to ptr, !dbg !220
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !172
  %34 = icmp eq ptr %33, %type, !dbg !172
  br i1 %34, label %cache_hit, label %cache_miss, !dbg !172

cache_miss:                                       ; preds = %if.exit32
  %ptradd36 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !172
  %35 = load ptr, ptr %ptradd36, align 8, !dbg !172
  %36 = call ptr @.dyn_search(ptr %35, ptr @"$sel.write"), !dbg !172
  store ptr %36, ptr %.inlinecache, align 8, !dbg !172
  store ptr %33, ptr %.cachedtype, align 8, !dbg !172
  br label %37, !dbg !172

cache_hit:                                        ; preds = %if.exit32
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !172
  br label %37, !dbg !172

37:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %36, %cache_miss ], !dbg !172
  %38 = icmp eq ptr %fn_phi, null, !dbg !172
  br i1 %38, label %missing_function, label %match, !dbg !172

missing_function:                                 ; preds = %37
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !221
  call void %39(ptr @.panic_msg.51, i64 42, ptr @.file.52, i64 9, ptr @.func.43, i64 5, i32 102), !dbg !221
  unreachable, !dbg !221

match:                                            ; preds = %37
  %40 = load ptr, ptr %stream, align 8
  %lo = load ptr, ptr %buffer28, align 8
  %ptradd37 = getelementptr inbounds i8, ptr %buffer28, i64 8
  %hi = load i64, ptr %ptradd37, align 8
  %41 = call i64 %fn_phi(ptr %retparam, ptr %40, ptr %lo, i64 %hi), !dbg !221
  %not_err = icmp eq i64 %41, 0, !dbg !221
  %42 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !221
  br i1 %42, label %after_check, label %assign_optional, !dbg !221

assign_optional:                                  ; preds = %match
  store i64 %41, ptr %error_var34, align 8, !dbg !221
  br label %guard_block, !dbg !221

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !221

guard_block:                                      ; preds = %assign_optional
  %43 = load i64, ptr %error_var34, align 8, !dbg !221
  store i64 %43, ptr %error_var, align 8, !dbg !221
  br label %guard_block41, !dbg !221

noerr_block:                                      ; preds = %after_check
  %44 = load i64, ptr %retparam, align 8, !dbg !221
  store i64 %44, ptr %n33, align 8, !dbg !221
  %45 = load i64, ptr %n33, align 8, !dbg !222
  %ptradd38 = getelementptr inbounds i8, ptr %buffer28, i64 8, !dbg !223
  %46 = load i64, ptr %ptradd38, align 8, !dbg !223
  %neq = icmp ne i64 %45, %46, !dbg !222
  br i1 %neq, label %if.then39, label %if.exit40, !dbg !222

if.then39:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %error_var, align 8, !dbg !224
  br label %guard_block41, !dbg !224

if.exit40:                                        ; preds = %noerr_block
  %47 = load i64, ptr %n33, align 8, !dbg !225
  store i64 %47, ptr %blockret, align 8, !dbg !225
  br label %expr_block.exit, !dbg !225

expr_block.exit:                                  ; preds = %if.exit40, %if.then31
  br label %noerr_block42, !dbg !225

guard_block41:                                    ; preds = %if.then39, %guard_block
  %48 = load i64, ptr %error_var, align 8, !dbg !225
  ret i64 %48, !dbg !225

noerr_block42:                                    ; preds = %expr_block.exit
  %49 = load ptr, ptr %self, align 8, !dbg !226
  %ptradd43 = getelementptr inbounds i8, ptr %49, i64 20, !dbg !226
  store i32 0, ptr %ptradd43, align 4, !dbg !227
  ret i64 0, !dbg !227

panic:                                            ; preds = %entry
  %50 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !174
  call void %50(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.43, i64 5, i32 53), !dbg !174
  unreachable, !dbg !174

panic3:                                           ; preds = %if.exit
  store i32 %sub, ptr %taddr, align 4
  %51 = insertvalue %any undef, ptr %taddr, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %52, ptr %varargslots, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.43, i64 5, i32 56, ptr byval(%"any[]") align 8 %indirectarg), !dbg !178
  unreachable, !dbg !178

panic10:                                          ; preds = %assert_ok
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !204
  call void %54(ptr @.panic_msg.46, i64 46, ptr @.file.45, i64 11, ptr @.func.43, i64 5, i32 115), !dbg !204
  unreachable, !dbg !204

panic13:                                          ; preds = %checkok11
  %55 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !228
  call void %55(ptr @.panic_msg.47, i64 58, ptr @.file.45, i64 11, ptr @.func.43, i64 5, i32 119), !dbg !228
  unreachable, !dbg !228

panic16:                                          ; preds = %checkok14
  %56 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !210
  call void %56(ptr @.panic_msg.48, i64 53, ptr @.file.49, i64 10, ptr @.func.43, i64 5, i32 212), !dbg !210
  unreachable, !dbg !210

panic20:                                          ; preds = %checkok17
  store i64 %sub19, ptr %taddr21, align 8
  %57 = insertvalue %any undef, ptr %taddr21, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr22, align 8
  %59 = insertvalue %any undef, ptr %taddr22, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %58, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %60, ptr %ptradd24, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file, i64 7, ptr @.func.43, i64 5, i32 60, ptr byval(%"any[]") align 8 %indirectarg26), !dbg !213
  unreachable, !dbg !213
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.BitWriter.write_bits(ptr %0, i32 %1, i32 %2) #0 comdat !dbg !229 {
entry:
  %self = alloca ptr, align 8
  %bits = alloca i32, align 4
  %nbits = alloca i32, align 4
  %reterr = alloca i64, align 8
  %n = alloca i32, align 4
  %to_write = alloca i32, align 4
  %left = alloca i32, align 4
  %lbits = alloca i64, align 8
  %taddr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca i32, align 4
  %varargslots14 = alloca [1 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %varargslots25 = alloca [1 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %buffer = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %bytes = alloca ptr, align 8
  %bytes37 = alloca ptr, align 8
  %s = alloca %"char[]", align 8
  %expr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %stream = alloca %any, align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %buffer60 = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %n65 = alloca i64, align 8
  %error_var66 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %taddr79 = alloca i32, align 4
  %varargslots80 = alloca [1 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %taddr87 = alloca i32, align 4
  %varargslots88 = alloca [1 x %any], align 16
  %indirectarg90 = alloca %"any[]", align 8
  %taddr94 = alloca i32, align 4
  %varargslots95 = alloca [1 x %any], align 16
  %indirectarg97 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !232
  %3 = icmp eq ptr %0, null, !dbg !232
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !232
  br i1 %4, label %panic, label %checkok, !dbg !232

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !233, metadata !DIExpression()), !dbg !234
  store i32 %1, ptr %bits, align 4
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !235, metadata !DIExpression()), !dbg !236
  store i32 %2, ptr %nbits, align 4
  call void @llvm.dbg.declare(metadata ptr %nbits, metadata !237, metadata !DIExpression()), !dbg !238
  %5 = load i32, ptr %nbits, align 4, !dbg !239
  %ge = icmp uge i32 8, %5, !dbg !239
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !239

assert_fail:                                      ; preds = %checkok
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !239
  call void %6(ptr @.panic_msg.39, i64 31, ptr @.file, i64 7, ptr @.func.53, i64 10, i32 65), !dbg !239
  unreachable, !dbg !239

assert_ok:                                        ; preds = %checkok
  %7 = load i32, ptr %nbits, align 4, !dbg !241
  %eq = icmp eq i32 0, %7, !dbg !241
  br i1 %eq, label %if.then, label %if.exit, !dbg !241

if.then:                                          ; preds = %assert_ok
  ret i64 0

if.exit:                                          ; preds = %assert_ok
  call void @llvm.dbg.declare(metadata ptr %n, metadata !242, metadata !DIExpression()), !dbg !243
  %8 = load ptr, ptr %self, align 8, !dbg !244
  %ptradd = getelementptr inbounds i8, ptr %8, i64 20, !dbg !244
  %9 = load i32, ptr %ptradd, align 4, !dbg !244
  %10 = load i32, ptr %nbits, align 4, !dbg !245
  %add = add i32 %9, %10, !dbg !244
  store i32 %add, ptr %n, align 4, !dbg !244
  call void @llvm.dbg.declare(metadata ptr %to_write, metadata !246, metadata !DIExpression()), !dbg !247
  %11 = load i32, ptr %n, align 4, !dbg !248
  %sdiv = sdiv i32 %11, 8, !dbg !248
  store i32 %sdiv, ptr %to_write, align 4, !dbg !248
  call void @llvm.dbg.declare(metadata ptr %left, metadata !249, metadata !DIExpression()), !dbg !250
  %12 = load i32, ptr %n, align 4, !dbg !251
  %smod = srem i32 %12, 8, !dbg !251
  store i32 %smod, ptr %left, align 4, !dbg !251
  %13 = load i32, ptr %to_write, align 4, !dbg !252
  %lt = icmp ult i32 0, %13, !dbg !252
  br i1 %lt, label %if.then1, label %if.exit75, !dbg !252

if.then1:                                         ; preds = %if.exit
  call void @llvm.dbg.declare(metadata ptr %lbits, metadata !253, metadata !DIExpression()), !dbg !255
  store i64 0, ptr %lbits, align 8, !dbg !255
  %14 = load ptr, ptr %self, align 8, !dbg !256
  %ptradd2 = getelementptr inbounds i8, ptr %14, i64 20, !dbg !256
  %15 = load i32, ptr %ptradd2, align 4, !dbg !256
  %lt3 = icmp ult i32 0, %15, !dbg !256
  br i1 %lt3, label %if.then4, label %if.exit10, !dbg !256

if.then4:                                         ; preds = %if.then1
  %16 = load ptr, ptr %self, align 8, !dbg !257
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !257
  %17 = load i32, ptr %ptradd5, align 8, !dbg !257
  %zext = zext i32 %17 to i64, !dbg !257
  %18 = load ptr, ptr %self, align 8, !dbg !258
  %ptradd6 = getelementptr inbounds i8, ptr %18, i64 20, !dbg !258
  %19 = load i32, ptr %ptradd6, align 4, !dbg !258
  %sub = sub i32 64, %19, !dbg !259
  %zext7 = zext i32 %sub to i64, !dbg !260
  %shift_exceeds = icmp uge i64 %zext7, 64, !dbg !260
  %20 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !260
  br i1 %20, label %panic8, label %checkok9, !dbg !260

checkok9:                                         ; preds = %if.then4
  %shl = shl i64 %zext, %zext7, !dbg !260
  %21 = freeze i64 %shl, !dbg !260
  store i64 %21, ptr %lbits, align 8, !dbg !260
  br label %if.exit10, !dbg !260

if.exit10:                                        ; preds = %checkok9, %if.then1
  %22 = load i64, ptr %lbits, align 8, !dbg !261
  %23 = load i32, ptr %bits, align 4, !dbg !262
  %24 = load i32, ptr %left, align 4, !dbg !263
  %shift_exceeds11 = icmp uge i32 %24, 32, !dbg !264
  %25 = call i1 @llvm.expect.i1(i1 %shift_exceeds11, i1 false), !dbg !264
  br i1 %25, label %panic12, label %checkok17, !dbg !264

checkok17:                                        ; preds = %if.exit10
  %lshr = lshr i32 %23, %24, !dbg !264
  %26 = freeze i32 %lshr, !dbg !264
  %zext18 = zext i32 %26 to i64, !dbg !264
  %27 = load i32, ptr %n, align 4, !dbg !265
  %28 = load i32, ptr %left, align 4, !dbg !266
  %sub19 = sub i32 %27, %28, !dbg !265
  %sub20 = sub i32 64, %sub19, !dbg !267
  %zext21 = zext i32 %sub20 to i64, !dbg !264
  %shift_exceeds22 = icmp uge i64 %zext21, 64, !dbg !264
  %29 = call i1 @llvm.expect.i1(i1 %shift_exceeds22, i1 false), !dbg !264
  br i1 %29, label %panic23, label %checkok28, !dbg !264

checkok28:                                        ; preds = %checkok17
  %shl29 = shl i64 %zext18, %zext21, !dbg !264
  %30 = freeze i64 %shl29, !dbg !264
  %or = or i64 %22, %30, !dbg !261
  store i64 %or, ptr %lbits, align 8, !dbg !261
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !268, metadata !DIExpression()), !dbg !272
  store i8 0, ptr %buffer, align 1, !dbg !272
  %ptradd30 = getelementptr inbounds i8, ptr %buffer, i64 1, !dbg !272
  store i8 0, ptr %ptradd30, align 1, !dbg !272
  %ptradd31 = getelementptr inbounds i8, ptr %buffer, i64 2, !dbg !272
  store i8 0, ptr %ptradd31, align 1, !dbg !272
  %ptradd32 = getelementptr inbounds i8, ptr %buffer, i64 3, !dbg !272
  store i8 0, ptr %ptradd32, align 1, !dbg !272
  %ptradd33 = getelementptr inbounds i8, ptr %buffer, i64 4, !dbg !272
  store i8 0, ptr %ptradd33, align 1, !dbg !272
  %ptradd34 = getelementptr inbounds i8, ptr %buffer, i64 5, !dbg !272
  store i8 0, ptr %ptradd34, align 1, !dbg !272
  %ptradd35 = getelementptr inbounds i8, ptr %buffer, i64 6, !dbg !272
  store i8 0, ptr %ptradd35, align 1, !dbg !272
  %ptradd36 = getelementptr inbounds i8, ptr %buffer, i64 7, !dbg !272
  store i8 0, ptr %ptradd36, align 1, !dbg !272
  %31 = load i64, ptr %lbits, align 8
  store i64 %31, ptr %x, align 8
  store ptr %buffer, ptr %bytes, align 8
  %32 = load ptr, ptr %bytes, align 8
  store ptr %32, ptr %bytes37, align 8
  br i1 true, label %assert_ok39, label %assert_fail38, !dbg !273

assert_fail38:                                    ; preds = %checkok28
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !275
  call void %33(ptr @.panic_msg.44, i64 117, ptr @.file.45, i64 11, ptr @.func.53, i64 10, i32 107), !dbg !275
  unreachable, !dbg !275

assert_ok39:                                      ; preds = %checkok28
  call void @llvm.dbg.declare(metadata ptr %s, metadata !279, metadata !DIExpression()), !dbg !280
  call void @llvm.memset.p0.i64(ptr align 8 %s, i8 0, i64 16, i1 false), !dbg !280
  %34 = load ptr, ptr %bytes, align 8, !dbg !281
  %checknull = icmp eq ptr %34, null, !dbg !281
  %35 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !281
  br i1 %35, label %panic40, label %checkok41, !dbg !281

checkok41:                                        ; preds = %assert_ok39
  %36 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !281
  %37 = insertvalue %"char[]" %36, i64 8, 1, !dbg !281
  store %"char[]" %37, ptr %s, align 8, !dbg !281
  %38 = load ptr, ptr %s, align 8, !dbg !282
  %checknull42 = icmp eq ptr %38, null, !dbg !282
  %39 = call i1 @llvm.expect.i1(i1 %checknull42, i1 false), !dbg !282
  br i1 %39, label %panic43, label %checkok44, !dbg !282

checkok44:                                        ; preds = %checkok41
  %40 = load i64, ptr %x, align 8
  store i64 %40, ptr %expr, align 8
  %checknull45 = icmp eq ptr %expr, null, !dbg !283
  %41 = call i1 @llvm.expect.i1(i1 %checknull45, i1 false), !dbg !283
  br i1 %41, label %panic46, label %checkok47, !dbg !283

checkok47:                                        ; preds = %checkok44
  %42 = load i64, ptr %expr, align 8, !dbg !286
  %43 = call i64 @llvm.bswap.i64(i64 %42), !dbg !286
  store i64 %43, ptr %38, align 8, !dbg !286
  %44 = load ptr, ptr %self, align 8, !dbg !287
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %stream, ptr align 8 %44, i32 16, i1 false)
  %45 = load i32, ptr %to_write, align 4, !dbg !288
  %zext48 = zext i32 %45 to i64, !dbg !288
  %add49 = add i64 0, %zext48, !dbg !288
  %lt50 = icmp ult i64 8, %add49, !dbg !288
  %sub51 = sub i64 %add49, 1, !dbg !288
  %46 = call i1 @llvm.expect.i1(i1 %lt50, i1 false), !dbg !288
  br i1 %46, label %panic52, label %checkok59, !dbg !288

checkok59:                                        ; preds = %checkok47
  %size = sub i64 %add49, 0, !dbg !289
  %47 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !289
  %48 = insertvalue %"char[]" %47, i64 %size, 1, !dbg !289
  store %"char[]" %48, ptr %buffer60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %buffer60, i64 8, !dbg !290
  %49 = load i64, ptr %ptradd61, align 8, !dbg !290
  %eq62 = icmp eq i64 0, %49, !dbg !290
  br i1 %eq62, label %if.then63, label %if.exit64, !dbg !290

if.then63:                                        ; preds = %checkok59
  store i64 0, ptr %blockret, align 8, !dbg !293
  br label %expr_block.exit, !dbg !293

if.exit64:                                        ; preds = %checkok59
  call void @llvm.dbg.declare(metadata ptr %n65, metadata !294, metadata !DIExpression()), !dbg !295
  %ptradd67 = getelementptr inbounds i8, ptr %stream, i64 8, !dbg !296
  %50 = load i64, ptr %ptradd67, align 8, !dbg !296
  %51 = inttoptr i64 %50 to ptr, !dbg !296
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !232
  %52 = icmp eq ptr %51, %type, !dbg !232
  br i1 %52, label %cache_hit, label %cache_miss, !dbg !232

cache_miss:                                       ; preds = %if.exit64
  %ptradd68 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !232
  %53 = load ptr, ptr %ptradd68, align 8, !dbg !232
  %54 = call ptr @.dyn_search(ptr %53, ptr @"$sel.write"), !dbg !232
  store ptr %54, ptr %.inlinecache, align 8, !dbg !232
  store ptr %51, ptr %.cachedtype, align 8, !dbg !232
  br label %55, !dbg !232

cache_hit:                                        ; preds = %if.exit64
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !232
  br label %55, !dbg !232

55:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %54, %cache_miss ], !dbg !232
  %56 = icmp eq ptr %fn_phi, null, !dbg !232
  br i1 %56, label %missing_function, label %match, !dbg !232

missing_function:                                 ; preds = %55
  %57 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !297
  call void %57(ptr @.panic_msg.51, i64 42, ptr @.file.52, i64 9, ptr @.func.53, i64 10, i32 102), !dbg !297
  unreachable, !dbg !297

match:                                            ; preds = %55
  %58 = load ptr, ptr %stream, align 8
  %lo = load ptr, ptr %buffer60, align 8
  %ptradd69 = getelementptr inbounds i8, ptr %buffer60, i64 8
  %hi = load i64, ptr %ptradd69, align 8
  %59 = call i64 %fn_phi(ptr %retparam, ptr %58, ptr %lo, i64 %hi), !dbg !297
  %not_err = icmp eq i64 %59, 0, !dbg !297
  %60 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !297
  br i1 %60, label %after_check, label %assign_optional, !dbg !297

assign_optional:                                  ; preds = %match
  store i64 %59, ptr %error_var66, align 8, !dbg !297
  br label %guard_block, !dbg !297

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !297

guard_block:                                      ; preds = %assign_optional
  %61 = load i64, ptr %error_var66, align 8, !dbg !297
  store i64 %61, ptr %error_var, align 8, !dbg !297
  br label %guard_block73, !dbg !297

noerr_block:                                      ; preds = %after_check
  %62 = load i64, ptr %retparam, align 8, !dbg !297
  store i64 %62, ptr %n65, align 8, !dbg !297
  %63 = load i64, ptr %n65, align 8, !dbg !298
  %ptradd70 = getelementptr inbounds i8, ptr %buffer60, i64 8, !dbg !299
  %64 = load i64, ptr %ptradd70, align 8, !dbg !299
  %neq = icmp ne i64 %63, %64, !dbg !298
  br i1 %neq, label %if.then71, label %if.exit72, !dbg !298

if.then71:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %error_var, align 8, !dbg !300
  br label %guard_block73, !dbg !300

if.exit72:                                        ; preds = %noerr_block
  %65 = load i64, ptr %n65, align 8, !dbg !301
  store i64 %65, ptr %blockret, align 8, !dbg !301
  br label %expr_block.exit, !dbg !301

expr_block.exit:                                  ; preds = %if.exit72, %if.then63
  br label %noerr_block74, !dbg !301

guard_block73:                                    ; preds = %if.then71, %guard_block
  %66 = load i64, ptr %error_var, align 8, !dbg !301
  ret i64 %66, !dbg !301

noerr_block74:                                    ; preds = %expr_block.exit
  br label %if.exit75, !dbg !301

if.exit75:                                        ; preds = %noerr_block74, %if.exit
  %67 = load ptr, ptr %self, align 8, !dbg !302
  %ptradd76 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !302
  %68 = load i32, ptr %ptradd76, align 8, !dbg !302
  %69 = load i32, ptr %left, align 4, !dbg !303
  %shift_exceeds77 = icmp uge i32 %69, 32, !dbg !302
  %70 = call i1 @llvm.expect.i1(i1 %shift_exceeds77, i1 false), !dbg !302
  br i1 %70, label %panic78, label %checkok83, !dbg !302

checkok83:                                        ; preds = %if.exit75
  %shl84 = shl i32 %68, %69, !dbg !302
  %71 = freeze i32 %shl84, !dbg !302
  store i32 %71, ptr %ptradd76, align 8, !dbg !302
  %72 = load ptr, ptr %self, align 8, !dbg !304
  %ptradd85 = getelementptr inbounds i8, ptr %72, i64 16, !dbg !304
  %73 = load i32, ptr %ptradd85, align 8, !dbg !304
  %74 = load i32, ptr %bits, align 4, !dbg !305
  %75 = load i32, ptr %left, align 4, !dbg !306
  %shift_underflow = icmp slt i32 %75, 0, !dbg !307
  %76 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !307
  br i1 %76, label %panic86, label %checkok91, !dbg !307

checkok91:                                        ; preds = %checkok83
  %shift_exceeds92 = icmp sge i32 %75, 32, !dbg !307
  %77 = call i1 @llvm.expect.i1(i1 %shift_exceeds92, i1 false), !dbg !307
  br i1 %77, label %panic93, label %checkok98, !dbg !307

checkok98:                                        ; preds = %checkok91
  %shl99 = shl i32 1, %75, !dbg !307
  %78 = freeze i32 %shl99, !dbg !307
  %sub100 = sub i32 %78, 1, !dbg !307
  %and = and i32 %74, %sub100, !dbg !305
  %or101 = or i32 %73, %and, !dbg !304
  store i32 %or101, ptr %ptradd85, align 8, !dbg !304
  %79 = load ptr, ptr %self, align 8, !dbg !308
  %ptradd102 = getelementptr inbounds i8, ptr %79, i64 20, !dbg !308
  %80 = load i32, ptr %left, align 4, !dbg !309
  store i32 %80, ptr %ptradd102, align 4, !dbg !309
  ret i64 0, !dbg !309

panic:                                            ; preds = %entry
  %81 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !234
  call void %81(ptr @.panic_msg, i64 62, ptr @.file, i64 7, ptr @.func.53, i64 10, i32 67), !dbg !234
  unreachable, !dbg !234

panic8:                                           ; preds = %if.then4
  store i64 %zext7, ptr %taddr, align 8
  %82 = insertvalue %any undef, ptr %taddr, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %83, ptr %varargslots, align 16
  %84 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %84, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.53, i64 10, i32 76, ptr byval(%"any[]") align 8 %indirectarg), !dbg !260
  unreachable, !dbg !260

panic12:                                          ; preds = %if.exit10
  store i32 %24, ptr %taddr13, align 4
  %85 = insertvalue %any undef, ptr %taddr13, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %86, ptr %varargslots14, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp15" = insertvalue %"any[]" %87, i64 1, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.53, i64 10, i32 77, ptr byval(%"any[]") align 8 %indirectarg16), !dbg !264
  unreachable, !dbg !264

panic23:                                          ; preds = %checkok17
  store i64 %zext21, ptr %taddr24, align 8
  %88 = insertvalue %any undef, ptr %taddr24, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %89, ptr %varargslots25, align 16
  %90 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp26" = insertvalue %"any[]" %90, i64 1, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.53, i64 10, i32 77, ptr byval(%"any[]") align 8 %indirectarg27), !dbg !264
  unreachable, !dbg !264

panic40:                                          ; preds = %assert_ok39
  %91 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !281
  call void %91(ptr @.panic_msg.46, i64 46, ptr @.file.45, i64 11, ptr @.func.53, i64 10, i32 115), !dbg !281
  unreachable, !dbg !281

panic43:                                          ; preds = %checkok41
  %92 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !310
  call void %92(ptr @.panic_msg.47, i64 58, ptr @.file.45, i64 11, ptr @.func.53, i64 10, i32 119), !dbg !310
  unreachable, !dbg !310

panic46:                                          ; preds = %checkok44
  %93 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !286
  call void %93(ptr @.panic_msg.48, i64 53, ptr @.file.49, i64 10, ptr @.func.53, i64 10, i32 212), !dbg !286
  unreachable, !dbg !286

panic52:                                          ; preds = %checkok47
  store i64 %sub51, ptr %taddr53, align 8
  %94 = insertvalue %any undef, ptr %taddr53, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr54, align 8
  %96 = insertvalue %any undef, ptr %taddr54, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %97, ptr %ptradd56, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file, i64 7, ptr @.func.53, i64 10, i32 80, ptr byval(%"any[]") align 8 %indirectarg58), !dbg !289
  unreachable, !dbg !289

panic78:                                          ; preds = %if.exit75
  store i32 %69, ptr %taddr79, align 4
  %99 = insertvalue %any undef, ptr %taddr79, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %100, ptr %varargslots80, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp81" = insertvalue %"any[]" %101, i64 1, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.53, i64 10, i32 82, ptr byval(%"any[]") align 8 %indirectarg82), !dbg !302
  unreachable, !dbg !302

panic86:                                          ; preds = %checkok83
  store i32 %75, ptr %taddr87, align 4
  %102 = insertvalue %any undef, ptr %taddr87, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %103, ptr %varargslots88, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots88, 0
  %"$$temp89" = insertvalue %"any[]" %104, i64 1, 1
  store %"any[]" %"$$temp89", ptr %indirectarg90, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.53, i64 10, i32 83, ptr byval(%"any[]") align 8 %indirectarg90), !dbg !307
  unreachable, !dbg !307

panic93:                                          ; preds = %checkok91
  store i32 %75, ptr %taddr94, align 4
  %105 = insertvalue %any undef, ptr %taddr94, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %106, ptr %varargslots95, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp96" = insertvalue %"any[]" %107, i64 1, 1
  store %"any[]" %"$$temp96", ptr %indirectarg97, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file, i64 7, ptr @.func.53, i64 10, i32 83, ptr byval(%"any[]") align 8 %indirectarg97), !dbg !307
  unreachable, !dbg !307
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.new_init(ptr %0, ptr %1, i64 %2, i64 %3, i64 %4, ptr %5) #0 comdat !dbg !311 {
entry:
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %allocator = alloca %any, align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %x = alloca i64, align 8
  %.anon = alloca i32, align 4
  %a = alloca i64, align 8
  %b = alloca i32, align 4
  %error_var = alloca i64, align 8
  %reterr = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !329
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !329
  br i1 %7, label %panic, label %checkok, !dbg !329

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !330, metadata !DIExpression()), !dbg !331
  store i64 %2, ptr %max_read, align 8
  call void @llvm.dbg.declare(metadata ptr %max_read, metadata !332, metadata !DIExpression()), !dbg !333
  store i64 %3, ptr %initial_capacity, align 8
  call void @llvm.dbg.declare(metadata ptr %initial_capacity, metadata !334, metadata !DIExpression()), !dbg !335
  store i64 %4, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %5, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !336, metadata !DIExpression()), !dbg !337
  %8 = load ptr, ptr %self, align 8, !dbg !338
  %ptradd1 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !338
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !338
  %9 = load i64, ptr %ptradd2, align 8, !dbg !338
  %eq = icmp eq i64 0, %9, !dbg !338
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !338

assert_fail:                                      ; preds = %checkok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !338
  call void %10(ptr @.panic_msg.56, i64 71, ptr @.file.54, i64 13, ptr @.func.55, i64 8, i32 17), !dbg !338
  unreachable, !dbg !338

assert_ok:                                        ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !340
  %checknull = icmp eq ptr %11, null, !dbg !340
  %12 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !340
  br i1 %12, label %panic3, label %checkok4, !dbg !340

checkok4:                                         ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %allocator, i32 16, i1 false), !dbg !341
  %ptradd5 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !341
  %13 = load i64, ptr %max_read, align 8, !dbg !342
  store i64 %13, ptr %ptradd5, align 8, !dbg !342
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %11, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !342
  %14 = load i64, ptr %initial_capacity, align 8
  store i64 %14, ptr %x, align 8
  store i32 16, ptr %.anon, align 4
  %15 = load i64, ptr %x, align 8
  store i64 %15, ptr %a, align 8
  %16 = load i32, ptr %.anon, align 4
  store i32 %16, ptr %b, align 4
  %17 = load i64, ptr %a, align 8, !dbg !343
  %18 = load i32, ptr %b, align 4, !dbg !349
  %sext = sext i32 %18 to i64, !dbg !349
  %lt = icmp slt i64 %sext, %17, !dbg !343
  %check = icmp slt i64 %17, 0, !dbg !343
  %siui-lt = or i1 %check, %lt, !dbg !343
  br i1 %siui-lt, label %cond.lhs, label %cond.rhs, !dbg !343

cond.lhs:                                         ; preds = %checkok4
  %19 = load i64, ptr %x, align 8, !dbg !350
  br label %cond.phi, !dbg !350

cond.rhs:                                         ; preds = %checkok4
  %20 = load i32, ptr %.anon, align 4, !dbg !351
  %sext6 = sext i32 %20 to i64, !dbg !351
  br label %cond.phi, !dbg !351

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %19, %cond.lhs ], [ %sext6, %cond.rhs ], !dbg !351
  store i64 %val, ptr %initial_capacity, align 8, !dbg !351
  %21 = load ptr, ptr %self, align 8, !dbg !352
  %22 = load i64, ptr %initial_capacity, align 8, !dbg !352
  %23 = call i64 @std.io.ByteBuffer.grow(ptr %21, i64 %22), !dbg !353
  %not_err = icmp eq i64 %23, 0, !dbg !353
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !353
  br i1 %24, label %after_check, label %assign_optional, !dbg !353

assign_optional:                                  ; preds = %cond.phi
  store i64 %23, ptr %error_var, align 8, !dbg !353
  br label %guard_block, !dbg !353

after_check:                                      ; preds = %cond.phi
  br label %noerr_block, !dbg !353

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !353
  ret i64 %25, !dbg !353

noerr_block:                                      ; preds = %after_check
  %26 = load ptr, ptr %self, align 8, !dbg !354
  store ptr %26, ptr %0, align 8, !dbg !354
  ret i64 0, !dbg !354

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !331
  call void %27(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.55, i64 8, i32 19), !dbg !331
  unreachable, !dbg !331

panic3:                                           ; preds = %assert_ok
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !340
  call void %28(ptr @.panic_msg.36, i64 45, ptr @.file.54, i64 13, ptr @.func.55, i64 8, i32 21), !dbg !340
  unreachable, !dbg !340
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.temp_init(ptr %0, ptr %1, i64 %2, i64 %3) #0 comdat !dbg !355 {
entry:
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca %any, align 8
  %4 = icmp eq ptr %1, null, !dbg !358
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !358
  br i1 %5, label %panic, label %checkok, !dbg !358

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !359, metadata !DIExpression()), !dbg !360
  store i64 %2, ptr %max_read, align 8
  call void @llvm.dbg.declare(metadata ptr %max_read, metadata !361, metadata !DIExpression()), !dbg !362
  store i64 %3, ptr %initial_capacity, align 8
  call void @llvm.dbg.declare(metadata ptr %initial_capacity, metadata !363, metadata !DIExpression()), !dbg !364
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !365
  %not = icmp eq ptr %6, null, !dbg !365
  br i1 %not, label %if.then, label %if.exit, !dbg !365

if.then:                                          ; preds = %checkok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !369
  br label %if.exit, !dbg !369

if.exit:                                          ; preds = %if.then, %checkok
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !371
  %8 = insertvalue %any undef, ptr %7, 0, !dbg !371
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !371
  %10 = load ptr, ptr %self, align 8
  %11 = load i64, ptr %max_read, align 8
  %12 = load i64, ptr %initial_capacity, align 8
  store %any %9, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd, align 8
  %13 = call i64 @std.io.ByteBuffer.new_init(ptr %retparam, ptr %10, i64 %11, i64 %12, i64 %lo, ptr %hi), !dbg !372
  %not_err = icmp eq i64 %13, 0, !dbg !372
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !372
  br i1 %14, label %after_check, label %assign_optional, !dbg !372

assign_optional:                                  ; preds = %if.exit
  store i64 %13, ptr %reterr, align 8, !dbg !372
  br label %err_retblock, !dbg !372

after_check:                                      ; preds = %if.exit
  %15 = load ptr, ptr %retparam, align 8, !dbg !372
  store ptr %15, ptr %0, align 8, !dbg !372
  ret i64 0, !dbg !372

err_retblock:                                     ; preds = %assign_optional
  %16 = load i64, ptr %reterr, align 8, !dbg !372
  ret i64 %16, !dbg !372

panic:                                            ; preds = %entry
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !360
  call void %17(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.57, i64 9, i32 27), !dbg !360
  unreachable, !dbg !360
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.init_with_buffer(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !373 {
entry:
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !376
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !376
  br i1 %5, label %panic, label %checkok, !dbg !376

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !377, metadata !DIExpression()), !dbg !378
  store ptr %2, ptr %buf, align 8
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !379, metadata !DIExpression()), !dbg !380
  %ptradd1 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !381
  %6 = load i64, ptr %ptradd1, align 8, !dbg !381
  %lt = icmp ult i64 0, %6, !dbg !381
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !381

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !381
  call void %7(ptr @.panic_msg.59, i64 32, ptr @.file.54, i64 13, ptr @.func.58, i64 16, i32 33), !dbg !381
  unreachable, !dbg !381

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !383
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !383
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !383
  %9 = load i64, ptr %ptradd3, align 8, !dbg !383
  %eq = icmp eq i64 0, %9, !dbg !383
  br i1 %eq, label %assert_ok5, label %assert_fail4, !dbg !383

assert_fail4:                                     ; preds = %assert_ok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !383
  call void %10(ptr @.panic_msg.56, i64 71, ptr @.file.54, i64 13, ptr @.func.58, i64 16, i32 34), !dbg !383
  unreachable, !dbg !383

assert_ok5:                                       ; preds = %assert_ok
  %11 = load ptr, ptr %self, align 8, !dbg !384
  %checknull = icmp eq ptr %11, null, !dbg !384
  %12 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !384
  br i1 %12, label %panic6, label %checkok7, !dbg !384

checkok7:                                         ; preds = %assert_ok5
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  %ptradd8 = getelementptr inbounds i8, ptr %.assign_list, i64 16
  %ptradd9 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !385
  %13 = load i64, ptr %ptradd9, align 8, !dbg !385
  store i64 %13, ptr %ptradd8, align 8, !dbg !385
  %ptradd10 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !385
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd10, ptr align 8 %buf, i32 16, i1 false), !dbg !386
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %11, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !386
  %14 = load ptr, ptr %self, align 8, !dbg !387
  store ptr %14, ptr %0, align 8, !dbg !387
  ret i64 0, !dbg !387

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !378
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.58, i64 16, i32 36), !dbg !378
  unreachable, !dbg !378

panic6:                                           ; preds = %assert_ok5
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !384
  call void %16(ptr @.panic_msg.36, i64 45, ptr @.file.54, i64 13, ptr @.func.58, i64 16, i32 38), !dbg !384
  unreachable, !dbg !384
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.ByteBuffer.free(ptr %0) #0 comdat !dbg !388 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !391
  %1 = icmp eq ptr %0, null, !dbg !391
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !391
  br i1 %2, label %panic, label %checkok, !dbg !391

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !392, metadata !DIExpression()), !dbg !393
  %3 = load ptr, ptr %self, align 8, !dbg !394
  %4 = load ptr, ptr %3, align 8, !dbg !394
  %anybool = icmp ne ptr %4, null, !dbg !394
  br i1 %anybool, label %if.then, label %if.exit4, !dbg !394

if.then:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !395
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %5, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !396
  %ptradd = getelementptr inbounds i8, ptr %6, i64 24, !dbg !396
  %7 = load ptr, ptr %ptradd, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !397
  %not = icmp eq ptr %8, null, !dbg !397
  br i1 %not, label %if.then1, label %if.exit, !dbg !397

if.then1:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !400

if.exit:                                          ; preds = %if.then
  %ptradd2 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !401
  %9 = load i64, ptr %ptradd2, align 8, !dbg !401
  %10 = inttoptr i64 %9 to ptr, !dbg !401
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !391
  %11 = icmp eq ptr %10, %type, !dbg !391
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !391

cache_miss:                                       ; preds = %if.exit
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !391
  %12 = load ptr, ptr %ptradd3, align 8, !dbg !391
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !391
  store ptr %13, ptr %.inlinecache, align 8, !dbg !391
  store ptr %10, ptr %.cachedtype, align 8, !dbg !391
  br label %14, !dbg !391

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !391
  br label %14, !dbg !391

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !391
  %15 = icmp eq ptr %fn_phi, null, !dbg !391
  br i1 %15, label %missing_function, label %match, !dbg !391

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !402
  call void %16(ptr @.panic_msg.61, i64 44, ptr @.file.62, i64 16, ptr @.func.60, i64 4, i32 105), !dbg !402
  unreachable, !dbg !402

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator, align 8, !dbg !402
  %18 = load ptr, ptr %ptr, align 8, !dbg !402
  call void %fn_phi(ptr %17, ptr %18, i8 zeroext 0), !dbg !402
  br label %expr_block.exit, !dbg !402

expr_block.exit:                                  ; preds = %match, %if.then1
  br label %if.exit4, !dbg !402

if.exit4:                                         ; preds = %expr_block.exit, %checkok
  %19 = load ptr, ptr %self, align 8, !dbg !403
  %checknull = icmp eq ptr %19, null, !dbg !403
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !403
  br i1 %20, label %panic5, label %checkok6, !dbg !403

checkok6:                                         ; preds = %if.exit4
  call void @llvm.memset.p0.i64(ptr align 8 %19, i8 0, i64 64, i1 false), !dbg !403
  ret void, !dbg !403

panic:                                            ; preds = %entry
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !393
  call void %21(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.60, i64 4, i32 42), !dbg !393
  unreachable, !dbg !393

panic5:                                           ; preds = %if.exit4
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !403
  call void %22(ptr @.panic_msg.36, i64 45, ptr @.file.54, i64 13, ptr @.func.60, i64 4, i32 45), !dbg !403
  unreachable, !dbg !403
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !404 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %cap = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !408
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !408
  br i1 %5, label %panic, label %checkok, !dbg !408

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !409, metadata !DIExpression()), !dbg !410
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !411, metadata !DIExpression()), !dbg !412
  call void @llvm.dbg.declare(metadata ptr %cap, metadata !413, metadata !DIExpression()), !dbg !414
  %6 = load ptr, ptr %self, align 8, !dbg !415
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 24, !dbg !415
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !415
  %7 = load i64, ptr %ptradd2, align 8, !dbg !415
  %8 = load ptr, ptr %self, align 8, !dbg !416
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 48, !dbg !416
  %9 = load i64, ptr %ptradd3, align 8, !dbg !416
  %sub = sub i64 %7, %9, !dbg !415
  store i64 %sub, ptr %cap, align 8, !dbg !415
  %10 = load i64, ptr %cap, align 8, !dbg !417
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !418
  %11 = load i64, ptr %ptradd4, align 8, !dbg !418
  %lt = icmp ult i64 %10, %11, !dbg !417
  br i1 %lt, label %if.then, label %if.exit, !dbg !417

if.then:                                          ; preds = %checkok
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !419
  %12 = load ptr, ptr %self, align 8, !dbg !419
  %13 = load i64, ptr %ptradd5, align 8, !dbg !419
  %14 = call i64 @std.io.ByteBuffer.grow(ptr %12, i64 %13), !dbg !420
  %not_err = icmp eq i64 %14, 0, !dbg !420
  %15 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !420
  br i1 %15, label %after_check, label %assign_optional, !dbg !420

assign_optional:                                  ; preds = %if.then
  store i64 %14, ptr %error_var, align 8, !dbg !420
  br label %guard_block, !dbg !420

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !420

guard_block:                                      ; preds = %assign_optional
  %16 = load i64, ptr %error_var, align 8, !dbg !420
  ret i64 %16, !dbg !420

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !420

if.exit:                                          ; preds = %noerr_block, %checkok
  %17 = load %"char[]", ptr %bytes, align 8, !dbg !421
  %18 = extractvalue %"char[]" %17, 0, !dbg !421
  %19 = extractvalue %"char[]" %17, 1, !dbg !422
  %gt = icmp ugt i64 0, %19, !dbg !422
  %20 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !422
  br i1 %20, label %panic6, label %checkok9, !dbg !422

checkok9:                                         ; preds = %if.exit
  %size = sub i64 %19, 0, !dbg !421
  %21 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !421
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !421
  %23 = load ptr, ptr %self, align 8, !dbg !423
  %ptradd10 = getelementptr inbounds i8, ptr %23, i64 24, !dbg !423
  %24 = load %"char[]", ptr %ptradd10, align 8, !dbg !423
  %25 = extractvalue %"char[]" %24, 0, !dbg !423
  %26 = load ptr, ptr %self, align 8, !dbg !424
  %ptradd11 = getelementptr inbounds i8, ptr %26, i64 48, !dbg !424
  %27 = load i64, ptr %ptradd11, align 8, !dbg !424
  %28 = extractvalue %"char[]" %24, 1, !dbg !424
  %gt12 = icmp ugt i64 %27, %28, !dbg !424
  %29 = call i1 @llvm.expect.i1(i1 %gt12, i1 false), !dbg !424
  br i1 %29, label %panic13, label %checkok20, !dbg !424

checkok20:                                        ; preds = %checkok9
  %ptradd21 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !425
  %30 = load i64, ptr %ptradd21, align 8, !dbg !425
  %add = add i64 %27, %30, !dbg !425
  %lt22 = icmp ult i64 %28, %add, !dbg !425
  %sub23 = sub i64 %add, 1, !dbg !425
  %31 = call i1 @llvm.expect.i1(i1 %lt22, i1 false), !dbg !425
  br i1 %31, label %panic24, label %checkok31, !dbg !425

checkok31:                                        ; preds = %checkok20
  %size32 = sub i64 %add, %27, !dbg !423
  %ptradd33 = getelementptr inbounds i8, ptr %25, i64 %27, !dbg !423
  %32 = insertvalue %"char[]" undef, ptr %ptradd33, 0, !dbg !423
  %33 = insertvalue %"char[]" %32, i64 %size32, 1, !dbg !423
  %34 = extractvalue %"char[]" %33, 0, !dbg !423
  %35 = extractvalue %"char[]" %22, 0, !dbg !423
  store %"char[]" %22, ptr %taddr34, align 8
  %ptradd35 = getelementptr inbounds i8, ptr %taddr34, i64 8
  %36 = load i64, ptr %ptradd35, align 8
  store %"char[]" %33, ptr %taddr36, align 8
  %ptradd37 = getelementptr inbounds i8, ptr %taddr36, i64 8
  %37 = load i64, ptr %ptradd37, align 8
  %neq = icmp ne i64 %37, %36
  %38 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %38, label %panic38, label %checkok45

checkok45:                                        ; preds = %checkok31
  %39 = mul i64 %36, 1, !dbg !423
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %34, ptr align 1 %35, i64 %39, i1 false), !dbg !423
  %40 = load ptr, ptr %self, align 8, !dbg !426
  %ptradd46 = getelementptr inbounds i8, ptr %40, i64 48, !dbg !426
  %41 = load i64, ptr %ptradd46, align 8, !dbg !426
  %ptradd47 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !427
  %42 = load i64, ptr %ptradd47, align 8, !dbg !427
  %add48 = add i64 %41, %42, !dbg !426
  store i64 %add48, ptr %ptradd46, align 8, !dbg !426
  %ptradd49 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !428
  %43 = load i64, ptr %ptradd49, align 8, !dbg !428
  store i64 %43, ptr %0, align 8, !dbg !428
  ret i64 0, !dbg !428

panic:                                            ; preds = %entry
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !410
  call void %44(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.63, i64 5, i32 48), !dbg !410
  unreachable, !dbg !410

panic6:                                           ; preds = %if.exit
  store i64 %19, ptr %taddr, align 8
  %45 = insertvalue %any undef, ptr %taddr, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %47 = insertvalue %any undef, ptr %taddr7, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %46, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %48, ptr %ptradd8, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.54, i64 13, ptr @.func.63, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg), !dbg !421
  unreachable, !dbg !421

panic13:                                          ; preds = %checkok9
  store i64 %28, ptr %taddr14, align 8
  %50 = insertvalue %any undef, ptr %taddr14, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr15, align 8
  %52 = insertvalue %any undef, ptr %taddr15, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %51, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %53, ptr %ptradd17, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.54, i64 13, ptr @.func.63, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !423
  unreachable, !dbg !423

panic24:                                          ; preds = %checkok20
  store i64 %sub23, ptr %taddr25, align 8
  %55 = insertvalue %any undef, ptr %taddr25, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr26, align 8
  %57 = insertvalue %any undef, ptr %taddr26, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %56, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %58, ptr %ptradd28, align 16
  %59 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.54, i64 13, ptr @.func.63, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg30), !dbg !423
  unreachable, !dbg !423

panic38:                                          ; preds = %checkok31
  store i64 %37, ptr %taddr39, align 8
  %60 = insertvalue %any undef, ptr %taddr39, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr40, align 8
  %62 = insertvalue %any undef, ptr %taddr40, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %61, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %63, ptr %ptradd42, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 38, ptr @.file.54, i64 13, ptr @.func.63, i64 5, i32 52, ptr byval(%"any[]") align 8 %indirectarg44), !dbg !423
  unreachable, !dbg !423
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !429 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %cap = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !432
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !432
  br i1 %3, label %panic, label %checkok, !dbg !432

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !433, metadata !DIExpression()), !dbg !434
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !435, metadata !DIExpression()), !dbg !436
  call void @llvm.dbg.declare(metadata ptr %cap, metadata !437, metadata !DIExpression()), !dbg !438
  %4 = load ptr, ptr %self, align 8, !dbg !439
  %ptradd = getelementptr inbounds i8, ptr %4, i64 24, !dbg !439
  %ptradd1 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !439
  %5 = load i64, ptr %ptradd1, align 8, !dbg !439
  %6 = load ptr, ptr %self, align 8, !dbg !440
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 48, !dbg !440
  %7 = load i64, ptr %ptradd2, align 8, !dbg !440
  %sub = sub i64 %5, %7, !dbg !439
  store i64 %sub, ptr %cap, align 8, !dbg !439
  %8 = load i64, ptr %cap, align 8, !dbg !441
  %eq = icmp eq i64 0, %8, !dbg !441
  br i1 %eq, label %if.then, label %if.exit, !dbg !441

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !442
  %10 = call i64 @std.io.ByteBuffer.grow(ptr %9, i64 1), !dbg !443
  %not_err = icmp eq i64 %10, 0, !dbg !443
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !443
  br i1 %11, label %after_check, label %assign_optional, !dbg !443

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %error_var, align 8, !dbg !443
  br label %guard_block, !dbg !443

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !443

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !443
  ret i64 %12, !dbg !443

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !443

if.exit:                                          ; preds = %noerr_block, %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !444
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 24, !dbg !444
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !444
  %14 = load i64, ptr %ptradd4, align 8, !dbg !444
  %15 = load ptr, ptr %ptradd3, align 8, !dbg !444
  %16 = load ptr, ptr %self, align 8, !dbg !445
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 48, !dbg !445
  %17 = load i64, ptr %ptradd5, align 8, !dbg !445
  %ge = icmp uge i64 %17, %14, !dbg !445
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !445
  br i1 %18, label %panic6, label %checkok9, !dbg !445

checkok9:                                         ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !445
  %19 = load i8, ptr %c, align 1, !dbg !446
  store i8 %19, ptr %ptradd10, align 1, !dbg !446
  %20 = load ptr, ptr %self, align 8, !dbg !447
  %ptradd11 = getelementptr inbounds i8, ptr %20, i64 48, !dbg !447
  %21 = load i64, ptr %ptradd11, align 8, !dbg !447
  %add = add i64 %21, 1, !dbg !447
  store i64 %add, ptr %ptradd11, align 8, !dbg !447
  ret i64 0, !dbg !447

panic:                                            ; preds = %entry
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !434
  call void %22(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.66, i64 10, i32 57), !dbg !434
  unreachable, !dbg !434

panic6:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr7, align 8
  %25 = insertvalue %any undef, ptr %taddr7, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %24, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd8, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.54, i64 13, ptr @.func.66, i64 10, i32 61, ptr byval(%"any[]") align 8 %indirectarg), !dbg !445
  unreachable, !dbg !445
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !448 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %readable = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %varargslots16 = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %varargslots50 = alloca [2 x %any], align 16
  %indirectarg53 = alloca %"any[]", align 8
  %self59 = alloca ptr, align 8
  %readable63 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %taddr73 = alloca i64, align 8
  %varargslots74 = alloca [2 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [1 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %varargslots92 = alloca [2 x %any], align 16
  %indirectarg95 = alloca %"any[]", align 8
  %taddr102 = alloca i64, align 8
  %taddr103 = alloca i64, align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr114 = alloca i64, align 8
  %taddr115 = alloca i64, align 8
  %varargslots116 = alloca [2 x %any], align 16
  %indirectarg119 = alloca %"any[]", align 8
  %taddr122 = alloca %"char[]", align 8
  %taddr124 = alloca %"char[]", align 8
  %taddr128 = alloca i64, align 8
  %taddr129 = alloca i64, align 8
  %varargslots130 = alloca [2 x %any], align 16
  %indirectarg133 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !449
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !449
  br i1 %5, label %panic, label %checkok, !dbg !449

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !450, metadata !DIExpression()), !dbg !451
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !452, metadata !DIExpression()), !dbg !453
  call void @llvm.dbg.declare(metadata ptr %readable, metadata !454, metadata !DIExpression()), !dbg !455
  %6 = load ptr, ptr %self, align 8, !dbg !456
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 48, !dbg !456
  %7 = load i64, ptr %ptradd1, align 8, !dbg !456
  %8 = load ptr, ptr %self, align 8, !dbg !457
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !457
  %9 = load i64, ptr %ptradd2, align 8, !dbg !457
  %sub = sub i64 %7, %9, !dbg !456
  store i64 %sub, ptr %readable, align 8, !dbg !456
  %10 = load i64, ptr %readable, align 8, !dbg !458
  %eq = icmp eq i64 0, %10, !dbg !458
  br i1 %eq, label %if.then, label %if.exit, !dbg !458

if.then:                                          ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !459
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 56, !dbg !459
  store i8 0, ptr %ptradd3, align 8, !dbg !461
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !462

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %n, metadata !463, metadata !DIExpression()), !dbg !464
  %12 = load i64, ptr %readable, align 8
  store i64 %12, ptr %x, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !465
  %13 = load i64, ptr %ptradd4, align 8
  store i64 %13, ptr %.anon, align 8
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i64, ptr %.anon, align 8
  store i64 %15, ptr %b, align 8
  %16 = load i64, ptr %a, align 8, !dbg !466
  %17 = load i64, ptr %b, align 8, !dbg !471
  %lt = icmp ult i64 %16, %17, !dbg !466
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !466

cond.lhs:                                         ; preds = %if.exit
  %18 = load i64, ptr %x, align 8, !dbg !472
  br label %cond.phi, !dbg !472

cond.rhs:                                         ; preds = %if.exit
  %19 = load i64, ptr %.anon, align 8, !dbg !473
  br label %cond.phi, !dbg !473

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %19, %cond.rhs ], !dbg !473
  store i64 %val, ptr %n, align 8, !dbg !473
  %20 = load ptr, ptr %self, align 8, !dbg !474
  %ptradd5 = getelementptr inbounds i8, ptr %20, i64 24, !dbg !474
  %21 = load %"char[]", ptr %ptradd5, align 8, !dbg !474
  %22 = extractvalue %"char[]" %21, 0, !dbg !474
  %23 = load ptr, ptr %self, align 8, !dbg !475
  %ptradd6 = getelementptr inbounds i8, ptr %23, i64 40, !dbg !475
  %24 = load i64, ptr %ptradd6, align 8, !dbg !475
  %25 = extractvalue %"char[]" %21, 1, !dbg !475
  %gt = icmp ugt i64 %24, %25, !dbg !475
  %26 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !475
  br i1 %26, label %panic7, label %checkok10, !dbg !475

checkok10:                                        ; preds = %cond.phi
  %27 = load i64, ptr %n, align 8, !dbg !476
  %add = add i64 %24, %27, !dbg !476
  %lt11 = icmp ult i64 %25, %add, !dbg !476
  %sub12 = sub i64 %add, 1, !dbg !476
  %28 = call i1 @llvm.expect.i1(i1 %lt11, i1 false), !dbg !476
  br i1 %28, label %panic13, label %checkok20, !dbg !476

checkok20:                                        ; preds = %checkok10
  %size = sub i64 %add, %24, !dbg !474
  %ptradd21 = getelementptr inbounds i8, ptr %22, i64 %24, !dbg !474
  %29 = insertvalue %"char[]" undef, ptr %ptradd21, 0, !dbg !474
  %30 = insertvalue %"char[]" %29, i64 %size, 1, !dbg !474
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !477
  %32 = extractvalue %"char[]" %31, 0, !dbg !477
  %33 = extractvalue %"char[]" %31, 1, !dbg !478
  %gt22 = icmp ugt i64 0, %33, !dbg !478
  %34 = call i1 @llvm.expect.i1(i1 %gt22, i1 false), !dbg !478
  br i1 %34, label %panic23, label %checkok30, !dbg !478

checkok30:                                        ; preds = %checkok20
  %35 = load i64, ptr %n, align 8, !dbg !479
  %add31 = add i64 0, %35, !dbg !479
  %lt32 = icmp ult i64 %33, %add31, !dbg !479
  %sub33 = sub i64 %add31, 1, !dbg !479
  %36 = call i1 @llvm.expect.i1(i1 %lt32, i1 false), !dbg !479
  br i1 %36, label %panic34, label %checkok41, !dbg !479

checkok41:                                        ; preds = %checkok30
  %size42 = sub i64 %add31, 0, !dbg !477
  %37 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !477
  %38 = insertvalue %"char[]" %37, i64 %size42, 1, !dbg !477
  %39 = extractvalue %"char[]" %38, 0, !dbg !477
  %40 = extractvalue %"char[]" %30, 0, !dbg !477
  store %"char[]" %30, ptr %taddr43, align 8
  %ptradd44 = getelementptr inbounds i8, ptr %taddr43, i64 8
  %41 = load i64, ptr %ptradd44, align 8
  store %"char[]" %38, ptr %taddr45, align 8
  %ptradd46 = getelementptr inbounds i8, ptr %taddr45, i64 8
  %42 = load i64, ptr %ptradd46, align 8
  %neq = icmp ne i64 %42, %41
  %43 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %43, label %panic47, label %checkok54

checkok54:                                        ; preds = %checkok41
  %44 = mul i64 %41, 1, !dbg !477
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !477
  %45 = load ptr, ptr %self, align 8, !dbg !480
  %ptradd55 = getelementptr inbounds i8, ptr %45, i64 40, !dbg !480
  %46 = load i64, ptr %ptradd55, align 8, !dbg !480
  %47 = load i64, ptr %n, align 8, !dbg !481
  %add56 = add i64 %46, %47, !dbg !480
  store i64 %add56, ptr %ptradd55, align 8, !dbg !480
  %48 = load ptr, ptr %self, align 8, !dbg !482
  %ptradd57 = getelementptr inbounds i8, ptr %48, i64 56, !dbg !482
  %49 = load i64, ptr %n, align 8, !dbg !483
  %lt58 = icmp ult i64 0, %49, !dbg !483
  %50 = zext i1 %lt58 to i8, !dbg !483
  store i8 %50, ptr %ptradd57, align 8, !dbg !483
  %51 = load ptr, ptr %self, align 8
  store ptr %51, ptr %self59, align 8
  %52 = load ptr, ptr %self59, align 8, !dbg !484
  %ptradd60 = getelementptr inbounds i8, ptr %52, i64 40, !dbg !484
  %53 = load i64, ptr %ptradd60, align 8, !dbg !484
  %54 = load ptr, ptr %self59, align 8, !dbg !487
  %ptradd61 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !487
  %55 = load i64, ptr %ptradd61, align 8, !dbg !487
  %ge = icmp uge i64 %53, %55, !dbg !484
  br i1 %ge, label %if.then62, label %if.exit138, !dbg !484

if.then62:                                        ; preds = %checkok54
  call void @llvm.dbg.declare(metadata ptr %readable63, metadata !488, metadata !DIExpression()), !dbg !490
  %56 = load ptr, ptr %self59, align 8, !dbg !491
  %ptradd64 = getelementptr inbounds i8, ptr %56, i64 48, !dbg !491
  %57 = load i64, ptr %ptradd64, align 8, !dbg !491
  %58 = load ptr, ptr %self59, align 8, !dbg !492
  %ptradd65 = getelementptr inbounds i8, ptr %58, i64 40, !dbg !492
  %59 = load i64, ptr %ptradd65, align 8, !dbg !492
  %sub66 = sub i64 %57, %59, !dbg !491
  store i64 %sub66, ptr %readable63, align 8, !dbg !491
  %60 = load ptr, ptr %self59, align 8, !dbg !493
  %ptradd67 = getelementptr inbounds i8, ptr %60, i64 24, !dbg !493
  %61 = load %"char[]", ptr %ptradd67, align 8, !dbg !493
  %62 = extractvalue %"char[]" %61, 0, !dbg !493
  %63 = load ptr, ptr %self59, align 8, !dbg !494
  %ptradd68 = getelementptr inbounds i8, ptr %63, i64 40, !dbg !494
  %64 = load i64, ptr %ptradd68, align 8, !dbg !494
  %sub69 = sub i64 %64, 1, !dbg !494
  %65 = extractvalue %"char[]" %61, 1, !dbg !494
  %gt70 = icmp sgt i64 %sub69, %65, !dbg !494
  %66 = call i1 @llvm.expect.i1(i1 %gt70, i1 false), !dbg !494
  br i1 %66, label %panic71, label %checkok78, !dbg !494

checkok78:                                        ; preds = %if.then62
  %underflow = icmp slt i64 %sub69, 0, !dbg !493
  %67 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !493
  br i1 %67, label %panic79, label %checkok84, !dbg !493

checkok84:                                        ; preds = %checkok78
  %68 = load i64, ptr %readable63, align 8, !dbg !495
  %add85 = add i64 1, %68, !dbg !496
  %add86 = add i64 %sub69, %add85, !dbg !496
  %lt87 = icmp slt i64 %65, %add86, !dbg !496
  %sub88 = sub i64 %add86, 1, !dbg !496
  %69 = call i1 @llvm.expect.i1(i1 %lt87, i1 false), !dbg !496
  br i1 %69, label %panic89, label %checkok96, !dbg !496

checkok96:                                        ; preds = %checkok84
  %size97 = sub i64 %add86, %sub69, !dbg !493
  %ptradd98 = getelementptr inbounds i8, ptr %62, i64 %sub69, !dbg !493
  %70 = insertvalue %"char[]" undef, ptr %ptradd98, 0, !dbg !493
  %71 = insertvalue %"char[]" %70, i64 %size97, 1, !dbg !493
  %72 = load ptr, ptr %self59, align 8, !dbg !497
  %ptradd99 = getelementptr inbounds i8, ptr %72, i64 24, !dbg !497
  %73 = load %"char[]", ptr %ptradd99, align 8, !dbg !497
  %74 = extractvalue %"char[]" %73, 0, !dbg !497
  %75 = extractvalue %"char[]" %73, 1, !dbg !498
  %gt100 = icmp sgt i64 0, %75, !dbg !498
  %76 = call i1 @llvm.expect.i1(i1 %gt100, i1 false), !dbg !498
  br i1 %76, label %panic101, label %checkok108, !dbg !498

checkok108:                                       ; preds = %checkok96
  %77 = load i64, ptr %readable63, align 8, !dbg !499
  %add109 = add i64 1, %77, !dbg !500
  %add110 = add i64 0, %add109, !dbg !500
  %lt111 = icmp slt i64 %75, %add110, !dbg !500
  %sub112 = sub i64 %add110, 1, !dbg !500
  %78 = call i1 @llvm.expect.i1(i1 %lt111, i1 false), !dbg !500
  br i1 %78, label %panic113, label %checkok120, !dbg !500

checkok120:                                       ; preds = %checkok108
  %size121 = sub i64 %add110, 0, !dbg !497
  %79 = insertvalue %"char[]" undef, ptr %74, 0, !dbg !497
  %80 = insertvalue %"char[]" %79, i64 %size121, 1, !dbg !497
  %81 = extractvalue %"char[]" %80, 0, !dbg !497
  %82 = extractvalue %"char[]" %71, 0, !dbg !497
  store %"char[]" %71, ptr %taddr122, align 8
  %ptradd123 = getelementptr inbounds i8, ptr %taddr122, i64 8
  %83 = load i64, ptr %ptradd123, align 8
  store %"char[]" %80, ptr %taddr124, align 8
  %ptradd125 = getelementptr inbounds i8, ptr %taddr124, i64 8
  %84 = load i64, ptr %ptradd125, align 8
  %neq126 = icmp ne i64 %84, %83
  %85 = call i1 @llvm.expect.i1(i1 %neq126, i1 false)
  br i1 %85, label %panic127, label %checkok134

checkok134:                                       ; preds = %checkok120
  %86 = mul i64 %83, 1, !dbg !497
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %81, ptr align 1 %82, i64 %86, i1 false), !dbg !497
  %87 = load ptr, ptr %self59, align 8, !dbg !501
  %ptradd135 = getelementptr inbounds i8, ptr %87, i64 48, !dbg !501
  %88 = load i64, ptr %readable63, align 8, !dbg !502
  %add136 = add i64 1, %88, !dbg !503
  store i64 %add136, ptr %ptradd135, align 8, !dbg !503
  %89 = load ptr, ptr %self59, align 8, !dbg !504
  %ptradd137 = getelementptr inbounds i8, ptr %89, i64 40, !dbg !504
  store i64 1, ptr %ptradd137, align 8, !dbg !505
  br label %if.exit138, !dbg !505

if.exit138:                                       ; preds = %checkok134, %checkok54
  %90 = load i64, ptr %n, align 8, !dbg !506
  store i64 %90, ptr %0, align 8, !dbg !506
  ret i64 0, !dbg !506

panic:                                            ; preds = %entry
  %91 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !451
  call void %91(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 65), !dbg !451
  unreachable, !dbg !451

panic7:                                           ; preds = %cond.phi
  store i64 %25, ptr %taddr, align 8
  %92 = insertvalue %any undef, ptr %taddr, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr8, align 8
  %94 = insertvalue %any undef, ptr %taddr8, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %93, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %95, ptr %ptradd9, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg), !dbg !474
  unreachable, !dbg !474

panic13:                                          ; preds = %checkok10
  store i64 %sub12, ptr %taddr14, align 8
  %97 = insertvalue %any undef, ptr %taddr14, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr15, align 8
  %99 = insertvalue %any undef, ptr %taddr15, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %98, ptr %varargslots16, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %100, ptr %ptradd17, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp18", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg19), !dbg !474
  unreachable, !dbg !474

panic23:                                          ; preds = %checkok20
  store i64 %33, ptr %taddr24, align 8
  %102 = insertvalue %any undef, ptr %taddr24, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %104 = insertvalue %any undef, ptr %taddr25, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %103, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %105, ptr %ptradd27, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg29), !dbg !477
  unreachable, !dbg !477

panic34:                                          ; preds = %checkok30
  store i64 %sub33, ptr %taddr35, align 8
  %107 = insertvalue %any undef, ptr %taddr35, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr36, align 8
  %109 = insertvalue %any undef, ptr %taddr36, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %108, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %110, ptr %ptradd38, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg40), !dbg !477
  unreachable, !dbg !477

panic47:                                          ; preds = %checkok41
  store i64 %42, ptr %taddr48, align 8
  %112 = insertvalue %any undef, ptr %taddr48, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr49, align 8
  %114 = insertvalue %any undef, ptr %taddr49, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %113, ptr %varargslots50, align 16
  %ptradd51 = getelementptr inbounds i8, ptr %varargslots50, i64 16
  store %any %115, ptr %ptradd51, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots50, 0
  %"$$temp52" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp52", ptr %indirectarg53, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 38, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg53), !dbg !477
  unreachable, !dbg !477

panic71:                                          ; preds = %if.then62
  store i64 %65, ptr %taddr72, align 8
  %117 = insertvalue %any undef, ptr %taddr72, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub69, ptr %taddr73, align 8
  %119 = insertvalue %any undef, ptr %taddr73, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %118, ptr %varargslots74, align 16
  %ptradd75 = getelementptr inbounds i8, ptr %varargslots74, i64 16
  store %any %120, ptr %ptradd75, align 16
  %121 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp76" = insertvalue %"any[]" %121, i64 2, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg77), !dbg !493
  unreachable, !dbg !493

panic79:                                          ; preds = %checkok78
  store i64 %sub69, ptr %taddr80, align 8
  %122 = insertvalue %any undef, ptr %taddr80, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %123, ptr %varargslots81, align 16
  %124 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp82" = insertvalue %"any[]" %124, i64 1, 1
  store %"any[]" %"$$temp82", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.69, i64 22, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg83), !dbg !494
  unreachable, !dbg !494

panic89:                                          ; preds = %checkok84
  store i64 %sub88, ptr %taddr90, align 8
  %125 = insertvalue %any undef, ptr %taddr90, 0
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %65, ptr %taddr91, align 8
  %127 = insertvalue %any undef, ptr %taddr91, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %126, ptr %varargslots92, align 16
  %ptradd93 = getelementptr inbounds i8, ptr %varargslots92, i64 16
  store %any %128, ptr %ptradd93, align 16
  %129 = insertvalue %"any[]" undef, ptr %varargslots92, 0
  %"$$temp94" = insertvalue %"any[]" %129, i64 2, 1
  store %"any[]" %"$$temp94", ptr %indirectarg95, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg95), !dbg !493
  unreachable, !dbg !493

panic101:                                         ; preds = %checkok96
  store i64 %75, ptr %taddr102, align 8
  %130 = insertvalue %any undef, ptr %taddr102, 0
  %131 = insertvalue %any %130, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr103, align 8
  %132 = insertvalue %any undef, ptr %taddr103, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %131, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %133, ptr %ptradd105, align 16
  %134 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %134, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg107), !dbg !497
  unreachable, !dbg !497

panic113:                                         ; preds = %checkok108
  store i64 %sub112, ptr %taddr114, align 8
  %135 = insertvalue %any undef, ptr %taddr114, 0
  %136 = insertvalue %any %135, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %75, ptr %taddr115, align 8
  %137 = insertvalue %any undef, ptr %taddr115, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %136, ptr %varargslots116, align 16
  %ptradd117 = getelementptr inbounds i8, ptr %varargslots116, i64 16
  store %any %138, ptr %ptradd117, align 16
  %139 = insertvalue %"any[]" undef, ptr %varargslots116, 0
  %"$$temp118" = insertvalue %"any[]" %139, i64 2, 1
  store %"any[]" %"$$temp118", ptr %indirectarg119, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg119), !dbg !497
  unreachable, !dbg !497

panic127:                                         ; preds = %checkok120
  store i64 %84, ptr %taddr128, align 8
  %140 = insertvalue %any undef, ptr %taddr128, 0
  %141 = insertvalue %any %140, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %83, ptr %taddr129, align 8
  %142 = insertvalue %any undef, ptr %taddr129, 0
  %143 = insertvalue %any %142, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %141, ptr %varargslots130, align 16
  %ptradd131 = getelementptr inbounds i8, ptr %varargslots130, i64 16
  store %any %143, ptr %ptradd131, align 16
  %144 = insertvalue %"any[]" undef, ptr %varargslots130, 0
  %"$$temp132" = insertvalue %"any[]" %144, i64 2, 1
  store %"any[]" %"$$temp132", ptr %indirectarg133, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 38, ptr @.file.54, i64 13, ptr @.func.68, i64 4, i32 144, ptr byval(%"any[]") align 8 %indirectarg133), !dbg !497
  unreachable, !dbg !497
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !507 {
entry:
  %self = alloca ptr, align 8
  %readable = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %self13 = alloca ptr, align 8
  %readable18 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %varargslots35 = alloca [1 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %taddr76 = alloca %"char[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !510
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !510
  br i1 %3, label %panic, label %checkok, !dbg !510

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !511, metadata !DIExpression()), !dbg !512
  call void @llvm.dbg.declare(metadata ptr %readable, metadata !513, metadata !DIExpression()), !dbg !514
  %4 = load ptr, ptr %self, align 8, !dbg !515
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !515
  %5 = load i64, ptr %ptradd, align 8, !dbg !515
  %6 = load ptr, ptr %self, align 8, !dbg !516
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !516
  %7 = load i64, ptr %ptradd1, align 8, !dbg !516
  %sub = sub i64 %5, %7, !dbg !515
  store i64 %sub, ptr %readable, align 8, !dbg !515
  %8 = load i64, ptr %readable, align 8, !dbg !517
  %eq = icmp eq i64 0, %8, !dbg !517
  br i1 %eq, label %if.then, label %if.exit, !dbg !517

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !518
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 56, !dbg !518
  store i8 0, ptr %ptradd2, align 8, !dbg !520
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !521

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %c, metadata !522, metadata !DIExpression()), !dbg !523
  %10 = load ptr, ptr %self, align 8, !dbg !524
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !524
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !524
  %11 = load i64, ptr %ptradd4, align 8, !dbg !524
  %12 = load ptr, ptr %ptradd3, align 8, !dbg !524
  %13 = load ptr, ptr %self, align 8, !dbg !525
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 40, !dbg !525
  %14 = load i64, ptr %ptradd5, align 8, !dbg !525
  %ge = icmp uge i64 %14, %11, !dbg !525
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !525
  br i1 %15, label %panic6, label %checkok9, !dbg !525

checkok9:                                         ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !525
  %16 = load i8, ptr %ptradd10, align 1, !dbg !525
  store i8 %16, ptr %c, align 1, !dbg !525
  %17 = load ptr, ptr %self, align 8, !dbg !526
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 40, !dbg !526
  %18 = load i64, ptr %ptradd11, align 8, !dbg !526
  %add = add i64 %18, 1, !dbg !526
  store i64 %add, ptr %ptradd11, align 8, !dbg !526
  %19 = load ptr, ptr %self, align 8, !dbg !527
  %ptradd12 = getelementptr inbounds i8, ptr %19, i64 56, !dbg !527
  store i8 1, ptr %ptradd12, align 8, !dbg !528
  %20 = load ptr, ptr %self, align 8
  store ptr %20, ptr %self13, align 8
  %21 = load ptr, ptr %self13, align 8, !dbg !529
  %ptradd14 = getelementptr inbounds i8, ptr %21, i64 40, !dbg !529
  %22 = load i64, ptr %ptradd14, align 8, !dbg !529
  %23 = load ptr, ptr %self13, align 8, !dbg !532
  %ptradd15 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !532
  %24 = load i64, ptr %ptradd15, align 8, !dbg !532
  %ge16 = icmp uge i64 %22, %24, !dbg !529
  br i1 %ge16, label %if.then17, label %if.exit89, !dbg !529

if.then17:                                        ; preds = %checkok9
  call void @llvm.dbg.declare(metadata ptr %readable18, metadata !533, metadata !DIExpression()), !dbg !535
  %25 = load ptr, ptr %self13, align 8, !dbg !536
  %ptradd19 = getelementptr inbounds i8, ptr %25, i64 48, !dbg !536
  %26 = load i64, ptr %ptradd19, align 8, !dbg !536
  %27 = load ptr, ptr %self13, align 8, !dbg !537
  %ptradd20 = getelementptr inbounds i8, ptr %27, i64 40, !dbg !537
  %28 = load i64, ptr %ptradd20, align 8, !dbg !537
  %sub21 = sub i64 %26, %28, !dbg !536
  store i64 %sub21, ptr %readable18, align 8, !dbg !536
  %29 = load ptr, ptr %self13, align 8, !dbg !538
  %ptradd22 = getelementptr inbounds i8, ptr %29, i64 24, !dbg !538
  %30 = load %"char[]", ptr %ptradd22, align 8, !dbg !538
  %31 = extractvalue %"char[]" %30, 0, !dbg !538
  %32 = load ptr, ptr %self13, align 8, !dbg !539
  %ptradd23 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !539
  %33 = load i64, ptr %ptradd23, align 8, !dbg !539
  %sub24 = sub i64 %33, 1, !dbg !539
  %34 = extractvalue %"char[]" %30, 1, !dbg !539
  %gt = icmp sgt i64 %sub24, %34, !dbg !539
  %35 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !539
  br i1 %35, label %panic25, label %checkok32, !dbg !539

checkok32:                                        ; preds = %if.then17
  %underflow = icmp slt i64 %sub24, 0, !dbg !538
  %36 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !538
  br i1 %36, label %panic33, label %checkok38, !dbg !538

checkok38:                                        ; preds = %checkok32
  %37 = load i64, ptr %readable18, align 8, !dbg !540
  %add39 = add i64 1, %37, !dbg !541
  %add40 = add i64 %sub24, %add39, !dbg !541
  %lt = icmp slt i64 %34, %add40, !dbg !541
  %sub41 = sub i64 %add40, 1, !dbg !541
  %38 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !541
  br i1 %38, label %panic42, label %checkok49, !dbg !541

checkok49:                                        ; preds = %checkok38
  %size = sub i64 %add40, %sub24, !dbg !538
  %ptradd50 = getelementptr inbounds i8, ptr %31, i64 %sub24, !dbg !538
  %39 = insertvalue %"char[]" undef, ptr %ptradd50, 0, !dbg !538
  %40 = insertvalue %"char[]" %39, i64 %size, 1, !dbg !538
  %41 = load ptr, ptr %self13, align 8, !dbg !542
  %ptradd51 = getelementptr inbounds i8, ptr %41, i64 24, !dbg !542
  %42 = load %"char[]", ptr %ptradd51, align 8, !dbg !542
  %43 = extractvalue %"char[]" %42, 0, !dbg !542
  %44 = extractvalue %"char[]" %42, 1, !dbg !543
  %gt52 = icmp sgt i64 0, %44, !dbg !543
  %45 = call i1 @llvm.expect.i1(i1 %gt52, i1 false), !dbg !543
  br i1 %45, label %panic53, label %checkok60, !dbg !543

checkok60:                                        ; preds = %checkok49
  %46 = load i64, ptr %readable18, align 8, !dbg !544
  %add61 = add i64 1, %46, !dbg !545
  %add62 = add i64 0, %add61, !dbg !545
  %lt63 = icmp slt i64 %44, %add62, !dbg !545
  %sub64 = sub i64 %add62, 1, !dbg !545
  %47 = call i1 @llvm.expect.i1(i1 %lt63, i1 false), !dbg !545
  br i1 %47, label %panic65, label %checkok72, !dbg !545

checkok72:                                        ; preds = %checkok60
  %size73 = sub i64 %add62, 0, !dbg !542
  %48 = insertvalue %"char[]" undef, ptr %43, 0, !dbg !542
  %49 = insertvalue %"char[]" %48, i64 %size73, 1, !dbg !542
  %50 = extractvalue %"char[]" %49, 0, !dbg !542
  %51 = extractvalue %"char[]" %40, 0, !dbg !542
  store %"char[]" %40, ptr %taddr74, align 8
  %ptradd75 = getelementptr inbounds i8, ptr %taddr74, i64 8
  %52 = load i64, ptr %ptradd75, align 8
  store %"char[]" %49, ptr %taddr76, align 8
  %ptradd77 = getelementptr inbounds i8, ptr %taddr76, i64 8
  %53 = load i64, ptr %ptradd77, align 8
  %neq = icmp ne i64 %53, %52
  %54 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %54, label %panic78, label %checkok85

checkok85:                                        ; preds = %checkok72
  %55 = mul i64 %52, 1, !dbg !542
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %50, ptr align 1 %51, i64 %55, i1 false), !dbg !542
  %56 = load ptr, ptr %self13, align 8, !dbg !546
  %ptradd86 = getelementptr inbounds i8, ptr %56, i64 48, !dbg !546
  %57 = load i64, ptr %readable18, align 8, !dbg !547
  %add87 = add i64 1, %57, !dbg !548
  store i64 %add87, ptr %ptradd86, align 8, !dbg !548
  %58 = load ptr, ptr %self13, align 8, !dbg !549
  %ptradd88 = getelementptr inbounds i8, ptr %58, i64 40, !dbg !549
  store i64 1, ptr %ptradd88, align 8, !dbg !550
  br label %if.exit89, !dbg !550

if.exit89:                                        ; preds = %checkok85, %checkok9
  %59 = load i8, ptr %c, align 1, !dbg !551
  store i8 %59, ptr %0, align 1, !dbg !551
  ret i64 0, !dbg !551

panic:                                            ; preds = %entry
  %60 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !512
  call void %60(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.70, i64 9, i32 81), !dbg !512
  unreachable, !dbg !512

panic6:                                           ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %61 = insertvalue %any undef, ptr %taddr, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr7, align 8
  %63 = insertvalue %any undef, ptr %taddr7, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %62, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd8, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.54, i64 13, ptr @.func.70, i64 9, i32 89, ptr byval(%"any[]") align 8 %indirectarg), !dbg !525
  unreachable, !dbg !525

panic25:                                          ; preds = %if.then17
  store i64 %34, ptr %taddr26, align 8
  %66 = insertvalue %any undef, ptr %taddr26, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub24, ptr %taddr27, align 8
  %68 = insertvalue %any undef, ptr %taddr27, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %67, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %69, ptr %ptradd29, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.54, i64 13, ptr @.func.70, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !538
  unreachable, !dbg !538

panic33:                                          ; preds = %checkok32
  store i64 %sub24, ptr %taddr34, align 8
  %71 = insertvalue %any undef, ptr %taddr34, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %72, ptr %varargslots35, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp36" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.69, i64 22, ptr @.file.54, i64 13, ptr @.func.70, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg37), !dbg !539
  unreachable, !dbg !539

panic42:                                          ; preds = %checkok38
  store i64 %sub41, ptr %taddr43, align 8
  %74 = insertvalue %any undef, ptr %taddr43, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr44, align 8
  %76 = insertvalue %any undef, ptr %taddr44, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %75, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %77, ptr %ptradd46, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.54, i64 13, ptr @.func.70, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg48), !dbg !538
  unreachable, !dbg !538

panic53:                                          ; preds = %checkok49
  store i64 %44, ptr %taddr54, align 8
  %79 = insertvalue %any undef, ptr %taddr54, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr55, align 8
  %81 = insertvalue %any undef, ptr %taddr55, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %80, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %82, ptr %ptradd57, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.54, i64 13, ptr @.func.70, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg59), !dbg !542
  unreachable, !dbg !542

panic65:                                          ; preds = %checkok60
  store i64 %sub64, ptr %taddr66, align 8
  %84 = insertvalue %any undef, ptr %taddr66, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %44, ptr %taddr67, align 8
  %86 = insertvalue %any undef, ptr %taddr67, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %85, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %87, ptr %ptradd69, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.54, i64 13, ptr @.func.70, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg71), !dbg !542
  unreachable, !dbg !542

panic78:                                          ; preds = %checkok72
  store i64 %53, ptr %taddr79, align 8
  %89 = insertvalue %any undef, ptr %taddr79, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr80, align 8
  %91 = insertvalue %any undef, ptr %taddr80, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %92, ptr %ptradd82, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 38, ptr @.file.54, i64 13, ptr @.func.70, i64 9, i32 144, ptr byval(%"any[]") align 8 %indirectarg84), !dbg !542
  unreachable, !dbg !542
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.pushback_byte(ptr %0) #0 comdat !dbg !552 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !555
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !555
  br i1 %2, label %panic, label %checkok, !dbg !555

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !556, metadata !DIExpression()), !dbg !557
  %3 = load ptr, ptr %self, align 8, !dbg !558
  %ptradd = getelementptr inbounds i8, ptr %3, i64 56, !dbg !558
  %4 = load i8, ptr %ptradd, align 8, !dbg !558
  %5 = trunc i8 %4 to i1, !dbg !558
  %not = xor i1 %5, true, !dbg !558
  br i1 %not, label %if.then, label %if.exit, !dbg !558

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !559

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !560
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !560
  %7 = load i64, ptr %ptradd1, align 8, !dbg !560
  %lt = icmp ult i64 0, %7, !dbg !560
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !560

assert_fail:                                      ; preds = %if.exit
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !560
  call void %8(ptr @.panic_msg.72, i64 16, ptr @.file.54, i64 13, ptr @.func.71, i64 13, i32 102), !dbg !560
  unreachable, !dbg !560

assert_ok:                                        ; preds = %if.exit
  %9 = load ptr, ptr %self, align 8, !dbg !561
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 40, !dbg !561
  %10 = load i64, ptr %ptradd2, align 8, !dbg !561
  %sub = sub i64 %10, 1, !dbg !561
  store i64 %sub, ptr %ptradd2, align 8, !dbg !561
  %11 = load ptr, ptr %self, align 8, !dbg !562
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 56, !dbg !562
  store i8 0, ptr %ptradd3, align 8, !dbg !563
  ret i64 0, !dbg !563

panic:                                            ; preds = %entry
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !557
  call void %12(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.71, i64 13, i32 99), !dbg !557
  unreachable, !dbg !557
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !564 {
entry:
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %reterr38 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !567
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !567
  br i1 %5, label %panic, label %checkok, !dbg !567

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !568, metadata !DIExpression()), !dbg !569
  store i64 %2, ptr %offset, align 8
  call void @llvm.dbg.declare(metadata ptr %offset, metadata !570, metadata !DIExpression()), !dbg !572
  store i32 %3, ptr %seek, align 4
  call void @llvm.dbg.declare(metadata ptr %seek, metadata !573, metadata !DIExpression()), !dbg !574
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case2
    i32 2, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !575
  %lt = icmp slt i64 %8, 0, !dbg !575
  br i1 %lt, label %or.phi, label %or.rhs, !dbg !575

or.rhs:                                           ; preds = %switch.case
  %9 = load i64, ptr %offset, align 8, !dbg !578
  %10 = load ptr, ptr %self, align 8, !dbg !579
  %ptradd = getelementptr inbounds i8, ptr %10, i64 48, !dbg !579
  %11 = load i64, ptr %ptradd, align 8, !dbg !579
  %gt = icmp sgt i64 %9, %11, !dbg !578
  %check = icmp sge i64 %11, 0, !dbg !578
  %siui-gt = and i1 %check, %gt, !dbg !578
  br label %or.phi, !dbg !578

or.phi:                                           ; preds = %or.rhs, %switch.case
  %val = phi i1 [ true, %switch.case ], [ %siui-gt, %or.rhs ], !dbg !578
  br i1 %val, label %if.then, label %if.exit, !dbg !578

if.then:                                          ; preds = %or.phi
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !580

if.exit:                                          ; preds = %or.phi
  %12 = load ptr, ptr %self, align 8, !dbg !581
  %ptradd1 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !581
  %13 = load i64, ptr %offset, align 8, !dbg !582
  store i64 %13, ptr %ptradd1, align 8, !dbg !582
  %14 = load i64, ptr %offset, align 8, !dbg !583
  store i64 %14, ptr %0, align 8, !dbg !583
  ret i64 0, !dbg !583

switch.case2:                                     ; preds = %switch.entry
  %15 = load i64, ptr %offset, align 8, !dbg !584
  %lt3 = icmp slt i64 %15, 0, !dbg !584
  br i1 %lt3, label %and.rhs, label %and.phi, !dbg !584

and.rhs:                                          ; preds = %switch.case2
  %16 = load ptr, ptr %self, align 8, !dbg !586
  %ptradd4 = getelementptr inbounds i8, ptr %16, i64 40, !dbg !586
  %17 = load i64, ptr %ptradd4, align 8, !dbg !586
  %18 = load i64, ptr %offset, align 8, !dbg !587
  %neg = sub i64 0, %18, !dbg !587
  %gt5 = icmp sgt i64 %neg, %17, !dbg !586
  %check6 = icmp sge i64 %17, 0, !dbg !586
  %siui-gt7 = and i1 %check6, %gt5, !dbg !586
  br label %and.phi, !dbg !586

and.phi:                                          ; preds = %and.rhs, %switch.case2
  %val8 = phi i1 [ false, %switch.case2 ], [ %siui-gt7, %and.rhs ], !dbg !586
  br i1 %val8, label %or.phi19, label %or.rhs9, !dbg !586

or.rhs9:                                          ; preds = %and.phi
  %19 = load i64, ptr %offset, align 8, !dbg !588
  %gt10 = icmp sgt i64 %19, 0, !dbg !588
  br i1 %gt10, label %and.rhs11, label %and.phi17, !dbg !588

and.rhs11:                                        ; preds = %or.rhs9
  %20 = load ptr, ptr %self, align 8, !dbg !589
  %ptradd12 = getelementptr inbounds i8, ptr %20, i64 40, !dbg !589
  %21 = load i64, ptr %ptradd12, align 8, !dbg !589
  %22 = load i64, ptr %offset, align 8, !dbg !590
  %add = add i64 %21, %22, !dbg !589
  %23 = load ptr, ptr %self, align 8, !dbg !591
  %ptradd13 = getelementptr inbounds i8, ptr %23, i64 48, !dbg !591
  %24 = load i64, ptr %ptradd13, align 8, !dbg !591
  %gt14 = icmp sgt i64 %add, %24, !dbg !589
  %check15 = icmp sge i64 %24, 0, !dbg !589
  %siui-gt16 = and i1 %check15, %gt14, !dbg !589
  br label %and.phi17, !dbg !589

and.phi17:                                        ; preds = %and.rhs11, %or.rhs9
  %val18 = phi i1 [ false, %or.rhs9 ], [ %siui-gt16, %and.rhs11 ], !dbg !589
  br label %or.phi19, !dbg !589

or.phi19:                                         ; preds = %and.phi17, %and.phi
  %val20 = phi i1 [ true, %and.phi ], [ %val18, %and.phi17 ], !dbg !589
  br i1 %val20, label %if.then21, label %if.exit22, !dbg !589

if.then21:                                        ; preds = %or.phi19
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !592

if.exit22:                                        ; preds = %or.phi19
  %25 = load ptr, ptr %self, align 8, !dbg !593
  %ptradd23 = getelementptr inbounds i8, ptr %25, i64 40, !dbg !593
  %26 = load i64, ptr %ptradd23, align 8, !dbg !593
  %27 = load i64, ptr %offset, align 8, !dbg !594
  %add24 = add i64 %26, %27, !dbg !593
  store i64 %add24, ptr %ptradd23, align 8, !dbg !593
  br label %switch.exit, !dbg !593

switch.case25:                                    ; preds = %switch.entry
  %28 = load i64, ptr %offset, align 8, !dbg !595
  %lt26 = icmp slt i64 %28, 0, !dbg !595
  br i1 %lt26, label %or.phi32, label %or.rhs27, !dbg !595

or.rhs27:                                         ; preds = %switch.case25
  %29 = load i64, ptr %offset, align 8, !dbg !597
  %30 = load ptr, ptr %self, align 8, !dbg !598
  %ptradd28 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !598
  %31 = load i64, ptr %ptradd28, align 8, !dbg !598
  %gt29 = icmp sgt i64 %29, %31, !dbg !597
  %check30 = icmp sge i64 %31, 0, !dbg !597
  %siui-gt31 = and i1 %check30, %gt29, !dbg !597
  br label %or.phi32, !dbg !597

or.phi32:                                         ; preds = %or.rhs27, %switch.case25
  %val33 = phi i1 [ true, %switch.case25 ], [ %siui-gt31, %or.rhs27 ], !dbg !597
  br i1 %val33, label %if.then34, label %if.exit35, !dbg !597

if.then34:                                        ; preds = %or.phi32
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !599

if.exit35:                                        ; preds = %or.phi32
  %32 = load ptr, ptr %self, align 8, !dbg !600
  %ptradd36 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !600
  %33 = load ptr, ptr %self, align 8, !dbg !601
  %ptradd37 = getelementptr inbounds i8, ptr %33, i64 48, !dbg !601
  %34 = load i64, ptr %ptradd37, align 8, !dbg !601
  %35 = load i64, ptr %offset, align 8, !dbg !602
  %sub = sub i64 %34, %35, !dbg !601
  store i64 %sub, ptr %ptradd36, align 8, !dbg !601
  br label %switch.exit, !dbg !601

switch.exit:                                      ; preds = %if.exit35, %if.exit22, %switch.entry
  %36 = load ptr, ptr %self, align 8, !dbg !603
  %ptradd39 = getelementptr inbounds i8, ptr %36, i64 40, !dbg !603
  %37 = load i64, ptr %ptradd39, align 8, !dbg !603
  store i64 %37, ptr %0, align 8, !dbg !603
  ret i64 0, !dbg !603

panic:                                            ; preds = %entry
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !569
  call void %38(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.73, i64 4, i32 107), !dbg !569
  unreachable, !dbg !569
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.available(ptr %0, ptr %1) #0 comdat !dbg !604 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !607
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !607
  br i1 %3, label %panic, label %checkok, !dbg !607

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !608, metadata !DIExpression()), !dbg !609
  %4 = load ptr, ptr %self, align 8, !dbg !610
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !610
  %5 = load i64, ptr %ptradd, align 8, !dbg !610
  %6 = load ptr, ptr %self, align 8, !dbg !611
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !611
  %7 = load i64, ptr %ptradd1, align 8, !dbg !611
  %sub = sub i64 %5, %7, !dbg !610
  store i64 %sub, ptr %0, align 8, !dbg !610
  ret i64 0, !dbg !610

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !609
  call void %8(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.74, i64 9, i32 126), !dbg !609
  unreachable, !dbg !609
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteBuffer.grow(ptr %0, i64 %1) #0 comdat !dbg !612 {
entry:
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %p = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator1 = alloca %any, align 8
  %ptr2 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %allocator10 = alloca %any, align 8
  %size = alloca i64, align 8
  %alignment11 = alloca i64, align 8
  %blockret12 = alloca ptr, align 8
  %.inlinecache17 = alloca ptr, align 8
  %.cachedtype18 = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %.inlinecache30 = alloca ptr, align 8
  %.cachedtype31 = alloca ptr, align 8
  %retparam40 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype31, align 8, !dbg !615
  store ptr null, ptr %.cachedtype18, align 8, !dbg !615
  store ptr null, ptr %.cachedtype, align 8, !dbg !615
  %2 = icmp eq ptr %0, null, !dbg !615
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !615
  br i1 %3, label %panic, label %checkok, !dbg !615

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !616, metadata !DIExpression()), !dbg !617
  store i64 %1, ptr %n, align 8
  call void @llvm.dbg.declare(metadata ptr %n, metadata !618, metadata !DIExpression()), !dbg !619
  %4 = load i64, ptr %n, align 8
  store i64 %4, ptr %x, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !620, metadata !DIExpression()), !dbg !623
  store i64 1, ptr %y, align 8, !dbg !625
  br label %loop.cond, !dbg !626

loop.cond:                                        ; preds = %loop.body, %checkok
  %5 = load i64, ptr %y, align 8, !dbg !627
  %6 = load i64, ptr %x, align 8, !dbg !629
  %lt = icmp ult i64 %5, %6, !dbg !627
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !627

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, ptr %y, align 8, !dbg !630
  %8 = load i64, ptr %y, align 8, !dbg !631
  %add = add i64 %7, %8, !dbg !630
  store i64 %add, ptr %y, align 8, !dbg !630
  br label %loop.cond, !dbg !630

loop.exit:                                        ; preds = %loop.cond
  %9 = load i64, ptr %y, align 8, !dbg !632
  store i64 %9, ptr %n, align 8, !dbg !632
  call void @llvm.dbg.declare(metadata ptr %p, metadata !633, metadata !DIExpression()), !dbg !634
  %10 = load ptr, ptr %self, align 8, !dbg !635
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %10, i32 16, i1 false)
  %11 = load ptr, ptr %self, align 8, !dbg !636
  %ptradd = getelementptr inbounds i8, ptr %11, i64 24, !dbg !636
  %12 = load ptr, ptr %ptradd, align 8
  store ptr %12, ptr %ptr, align 8
  %13 = load i64, ptr %n, align 8
  store i64 %13, ptr %new_size, align 8
  store i64 1, ptr %alignment, align 8
  %14 = load i64, ptr %new_size, align 8, !dbg !637
  %not = icmp eq i64 %14, 0, !dbg !637
  br i1 %not, label %if.then, label %if.exit7, !dbg !637

if.then:                                          ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %15 = load ptr, ptr %ptr, align 8
  store ptr %15, ptr %ptr2, align 8
  %16 = load ptr, ptr %ptr2, align 8, !dbg !640
  %not3 = icmp eq ptr %16, null, !dbg !640
  br i1 %not3, label %if.then4, label %if.exit, !dbg !640

if.then4:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !644

if.exit:                                          ; preds = %if.then
  %ptradd5 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !645
  %17 = load i64, ptr %ptradd5, align 8, !dbg !645
  %18 = inttoptr i64 %17 to ptr, !dbg !645
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !615
  %19 = icmp eq ptr %18, %type, !dbg !615
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !615

cache_miss:                                       ; preds = %if.exit
  %ptradd6 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !615
  %20 = load ptr, ptr %ptradd6, align 8, !dbg !615
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.release"), !dbg !615
  store ptr %21, ptr %.inlinecache, align 8, !dbg !615
  store ptr %18, ptr %.cachedtype, align 8, !dbg !615
  br label %22, !dbg !615

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !615
  br label %22, !dbg !615

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !615
  %23 = icmp eq ptr %fn_phi, null, !dbg !615
  br i1 %23, label %missing_function, label %match, !dbg !615

missing_function:                                 ; preds = %22
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !646
  call void %24(ptr @.panic_msg.61, i64 44, ptr @.file.62, i64 16, ptr @.func.75, i64 4, i32 146), !dbg !646
  unreachable, !dbg !646

match:                                            ; preds = %22
  %25 = load ptr, ptr %allocator1, align 8, !dbg !646
  %26 = load ptr, ptr %ptr2, align 8, !dbg !646
  call void %fn_phi(ptr %25, ptr %26, i8 zeroext 1), !dbg !646
  br label %expr_block.exit, !dbg !646

expr_block.exit:                                  ; preds = %match, %if.then4
  store ptr null, ptr %blockret, align 8, !dbg !647
  br label %expr_block.exit44, !dbg !647

if.exit7:                                         ; preds = %loop.exit
  %27 = load ptr, ptr %ptr, align 8, !dbg !648
  %not8 = icmp eq ptr %27, null, !dbg !648
  br i1 %not8, label %if.then9, label %if.exit28, !dbg !648

if.then9:                                         ; preds = %if.exit7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator10, ptr align 8 %allocator, i32 16, i1 false)
  %28 = load i64, ptr %new_size, align 8
  store i64 %28, ptr %size, align 8
  %29 = load i64, ptr %alignment, align 8
  store i64 %29, ptr %alignment11, align 8
  %30 = load i64, ptr %size, align 8, !dbg !649
  %not13 = icmp eq i64 %30, 0, !dbg !649
  br i1 %not13, label %if.then14, label %if.exit15, !dbg !649

if.then14:                                        ; preds = %if.then9
  store ptr null, ptr %blockret12, align 8, !dbg !653
  br label %expr_block.exit27, !dbg !653

if.exit15:                                        ; preds = %if.then9
  %ptradd16 = getelementptr inbounds i8, ptr %allocator10, i64 8, !dbg !654
  %31 = load i64, ptr %ptradd16, align 8, !dbg !654
  %32 = inttoptr i64 %31 to ptr, !dbg !654
  %type19 = load ptr, ptr %.cachedtype18, align 8, !dbg !615
  %33 = icmp eq ptr %32, %type19, !dbg !615
  br i1 %33, label %cache_hit22, label %cache_miss20, !dbg !615

cache_miss20:                                     ; preds = %if.exit15
  %ptradd21 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !615
  %34 = load ptr, ptr %ptradd21, align 8, !dbg !615
  %35 = call ptr @.dyn_search(ptr %34, ptr @"$sel.acquire"), !dbg !615
  store ptr %35, ptr %.inlinecache17, align 8, !dbg !615
  store ptr %32, ptr %.cachedtype18, align 8, !dbg !615
  br label %36, !dbg !615

cache_hit22:                                      ; preds = %if.exit15
  %cache_hit_fn23 = load ptr, ptr %.inlinecache17, align 8, !dbg !615
  br label %36, !dbg !615

36:                                               ; preds = %cache_hit22, %cache_miss20
  %fn_phi24 = phi ptr [ %cache_hit_fn23, %cache_hit22 ], [ %35, %cache_miss20 ], !dbg !615
  %37 = icmp eq ptr %fn_phi24, null, !dbg !615
  br i1 %37, label %missing_function25, label %match26, !dbg !615

missing_function25:                               ; preds = %36
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !655
  call void %38(ptr @.panic_msg.76, i64 44, ptr @.file.62, i64 16, ptr @.func.75, i64 4, i32 116), !dbg !655
  unreachable, !dbg !655

match26:                                          ; preds = %36
  %39 = load ptr, ptr %allocator10, align 8
  %40 = load i64, ptr %size, align 8
  %41 = load i64, ptr %alignment11, align 8
  %42 = call i64 %fn_phi24(ptr %retparam, ptr %39, i64 %40, i32 0, i64 %41), !dbg !655
  %not_err = icmp eq i64 %42, 0, !dbg !655
  %43 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !655
  br i1 %43, label %after_check, label %assign_optional, !dbg !655

assign_optional:                                  ; preds = %match26
  store i64 %42, ptr %error_var, align 8, !dbg !655
  br label %guard_block, !dbg !655

after_check:                                      ; preds = %match26
  %44 = load ptr, ptr %retparam, align 8, !dbg !655
  store ptr %44, ptr %blockret12, align 8, !dbg !655
  br label %expr_block.exit27, !dbg !655

expr_block.exit27:                                ; preds = %after_check, %if.then14
  %45 = load ptr, ptr %blockret12, align 8, !dbg !655
  store ptr %45, ptr %blockret, align 8, !dbg !655
  br label %expr_block.exit44, !dbg !655

if.exit28:                                        ; preds = %if.exit7
  %ptradd29 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !656
  %46 = load i64, ptr %ptradd29, align 8, !dbg !656
  %47 = inttoptr i64 %46 to ptr, !dbg !656
  %type32 = load ptr, ptr %.cachedtype31, align 8, !dbg !615
  %48 = icmp eq ptr %47, %type32, !dbg !615
  br i1 %48, label %cache_hit35, label %cache_miss33, !dbg !615

cache_miss33:                                     ; preds = %if.exit28
  %ptradd34 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !615
  %49 = load ptr, ptr %ptradd34, align 8, !dbg !615
  %50 = call ptr @.dyn_search(ptr %49, ptr @"$sel.resize"), !dbg !615
  store ptr %50, ptr %.inlinecache30, align 8, !dbg !615
  store ptr %47, ptr %.cachedtype31, align 8, !dbg !615
  br label %51, !dbg !615

cache_hit35:                                      ; preds = %if.exit28
  %cache_hit_fn36 = load ptr, ptr %.inlinecache30, align 8, !dbg !615
  br label %51, !dbg !615

51:                                               ; preds = %cache_hit35, %cache_miss33
  %fn_phi37 = phi ptr [ %cache_hit_fn36, %cache_hit35 ], [ %50, %cache_miss33 ], !dbg !615
  %52 = icmp eq ptr %fn_phi37, null, !dbg !615
  br i1 %52, label %missing_function38, label %match39, !dbg !615

missing_function38:                               ; preds = %51
  %53 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !657
  call void %53(ptr @.panic_msg.77, i64 43, ptr @.file.62, i64 16, ptr @.func.75, i64 4, i32 137), !dbg !657
  unreachable, !dbg !657

match39:                                          ; preds = %51
  %54 = load ptr, ptr %allocator, align 8
  %55 = load ptr, ptr %ptr, align 8
  %56 = load i64, ptr %new_size, align 8
  %57 = load i64, ptr %alignment, align 8
  %58 = call i64 %fn_phi37(ptr %retparam40, ptr %54, ptr %55, i64 %56, i64 %57), !dbg !657
  %not_err41 = icmp eq i64 %58, 0, !dbg !657
  %59 = call i1 @llvm.expect.i1(i1 %not_err41, i1 true), !dbg !657
  br i1 %59, label %after_check43, label %assign_optional42, !dbg !657

assign_optional42:                                ; preds = %match39
  store i64 %58, ptr %error_var, align 8, !dbg !657
  br label %guard_block, !dbg !657

after_check43:                                    ; preds = %match39
  %60 = load ptr, ptr %retparam40, align 8, !dbg !657
  store ptr %60, ptr %blockret, align 8, !dbg !657
  br label %expr_block.exit44, !dbg !657

expr_block.exit44:                                ; preds = %after_check43, %expr_block.exit27, %expr_block.exit
  br label %noerr_block, !dbg !657

guard_block:                                      ; preds = %assign_optional42, %assign_optional
  %61 = load i64, ptr %error_var, align 8, !dbg !657
  ret i64 %61, !dbg !657

noerr_block:                                      ; preds = %expr_block.exit44
  %62 = load ptr, ptr %blockret, align 8, !dbg !657
  store ptr %62, ptr %p, align 8, !dbg !657
  %63 = load ptr, ptr %self, align 8, !dbg !658
  %ptradd45 = getelementptr inbounds i8, ptr %63, i64 24, !dbg !658
  %64 = load ptr, ptr %p, align 8, !dbg !659
  %65 = load i64, ptr %n, align 8, !dbg !660
  %add46 = add i64 0, %65, !dbg !660
  %size47 = sub i64 %add46, 0, !dbg !660
  %66 = insertvalue %"char[]" undef, ptr %64, 0, !dbg !660
  %67 = insertvalue %"char[]" %66, i64 %size47, 1, !dbg !660
  store %"char[]" %67, ptr %ptradd45, align 8, !dbg !660
  ret i64 0, !dbg !660

panic:                                            ; preds = %entry
  %68 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !617
  call void %68(ptr @.panic_msg, i64 62, ptr @.file.54, i64 13, ptr @.func.75, i64 4, i32 131), !dbg !617
  unreachable, !dbg !617
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.LimitReader.init(ptr %0, i64 %1, ptr %2, i64 %3) #0 comdat !dbg !661 {
entry:
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %limit = alloca i64, align 8
  %.assign_list = alloca %LimitReader, align 8
  %4 = icmp eq ptr %0, null, !dbg !670
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !670
  br i1 %5, label %panic, label %checkok, !dbg !670

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !671, metadata !DIExpression()), !dbg !672
  store i64 %1, ptr %wrapped_stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %wrapped_stream, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %wrapped_stream, metadata !673, metadata !DIExpression()), !dbg !674
  store i64 %3, ptr %limit, align 8
  call void @llvm.dbg.declare(metadata ptr %limit, metadata !675, metadata !DIExpression()), !dbg !676
  %6 = load ptr, ptr %self, align 8, !dbg !677
  %checknull = icmp eq ptr %6, null, !dbg !677
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !677
  br i1 %7, label %panic1, label %checkok2, !dbg !677

checkok2:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !678
  %ptradd3 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !678
  %8 = load i64, ptr %limit, align 8, !dbg !679
  store i64 %8, ptr %ptradd3, align 8, !dbg !679
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %6, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !679
  %9 = load ptr, ptr %self, align 8, !dbg !680
  ret ptr %9, !dbg !680

panic:                                            ; preds = %entry
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !672
  call void %10(ptr @.panic_msg, i64 62, ptr @.file.78, i64 14, ptr @.func, i64 4, i32 13), !dbg !672
  unreachable, !dbg !672

panic1:                                           ; preds = %checkok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !677
  call void %11(ptr @.panic_msg.36, i64 45, ptr @.file.78, i64 14, ptr @.func, i64 4, i32 15), !dbg !677
  unreachable, !dbg !677
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.close(ptr %0) #0 comdat !dbg !681 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !684
  store ptr null, ptr %.cachedtype, align 8, !dbg !684
  %1 = icmp eq ptr %0, null, !dbg !684
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !684
  br i1 %2, label %panic, label %checkok, !dbg !684

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !685, metadata !DIExpression()), !dbg !686
  %3 = load ptr, ptr %self, align 8, !dbg !687
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !687
  %4 = load i64, ptr %ptradd, align 8, !dbg !687
  %5 = inttoptr i64 %4 to ptr, !dbg !687
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !684
  %6 = icmp eq ptr %5, %type, !dbg !684
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !684

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !684
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !684
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !684
  store ptr %8, ptr %.inlinecache, align 8, !dbg !684
  store ptr %5, ptr %.cachedtype, align 8, !dbg !684
  br label %9, !dbg !684

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !684
  br label %9, !dbg !684

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !684
  %ptrbool = icmp ne ptr %fn_phi, null, !dbg !684
  br i1 %ptrbool, label %if.then, label %if.exit, !dbg !684

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !688
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !688
  %11 = load i64, ptr %ptradd2, align 8, !dbg !688
  %12 = inttoptr i64 %11 to ptr, !dbg !688
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !684
  %13 = icmp eq ptr %12, %type5, !dbg !684
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !684

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !684
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !684
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !684
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !684
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !684
  br label %16, !dbg !684

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !684
  br label %16, !dbg !684

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !684
  %17 = icmp eq ptr %fn_phi10, null, !dbg !684
  br i1 %17, label %missing_function, label %match, !dbg !684

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !688
  call void %18(ptr @.panic_msg.80, i64 42, ptr @.file.78, i64 14, ptr @.func.79, i64 5, i32 21), !dbg !688
  unreachable, !dbg !688

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !688
  %20 = call i64 %fn_phi10(ptr %19), !dbg !688
  %not_err = icmp eq i64 %20, 0, !dbg !688
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !688
  br i1 %21, label %after_check, label %assign_optional, !dbg !688

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !688
  br label %err_retblock, !dbg !688

after_check:                                      ; preds = %match
  ret i64 0, !dbg !688

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !688
  ret i64 %22, !dbg !688

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !688

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !686
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.78, i64 14, ptr @.func.79, i64 5, i32 19), !dbg !686
  unreachable, !dbg !686
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !689 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %m = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !692
  %4 = icmp eq ptr %1, null, !dbg !692
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !692
  br i1 %5, label %panic, label %checkok, !dbg !692

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !693, metadata !DIExpression()), !dbg !694
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !695, metadata !DIExpression()), !dbg !696
  %6 = load ptr, ptr %self, align 8, !dbg !697
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !697
  %7 = load i64, ptr %ptradd1, align 8, !dbg !697
  %eq = icmp eq i64 0, %7, !dbg !697
  br i1 %eq, label %if.then, label %if.exit, !dbg !697

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !698

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %m, metadata !699, metadata !DIExpression()), !dbg !700
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !701
  %8 = load i64, ptr %ptradd2, align 8
  store i64 %8, ptr %x, align 8
  %9 = load ptr, ptr %self, align 8, !dbg !702
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !702
  %10 = load i64, ptr %ptradd3, align 8
  store i64 %10, ptr %.anon, align 8
  %11 = load i64, ptr %x, align 8
  store i64 %11, ptr %a, align 8
  %12 = load i64, ptr %.anon, align 8
  store i64 %12, ptr %b, align 8
  %13 = load i64, ptr %a, align 8, !dbg !703
  %14 = load i64, ptr %b, align 8, !dbg !708
  %lt = icmp ult i64 %13, %14, !dbg !703
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !703

cond.lhs:                                         ; preds = %if.exit
  %15 = load i64, ptr %x, align 8, !dbg !709
  br label %cond.phi, !dbg !709

cond.rhs:                                         ; preds = %if.exit
  %16 = load i64, ptr %.anon, align 8, !dbg !710
  br label %cond.phi, !dbg !710

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %15, %cond.lhs ], [ %16, %cond.rhs ], !dbg !710
  store i64 %val, ptr %m, align 8, !dbg !710
  call void @llvm.dbg.declare(metadata ptr %n, metadata !711, metadata !DIExpression()), !dbg !712
  %17 = load ptr, ptr %self, align 8, !dbg !713
  %18 = load %"char[]", ptr %bytes, align 8, !dbg !714
  %19 = extractvalue %"char[]" %18, 0, !dbg !714
  %20 = extractvalue %"char[]" %18, 1, !dbg !715
  %gt = icmp ugt i64 0, %20, !dbg !715
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !715
  br i1 %21, label %panic4, label %checkok7, !dbg !715

checkok7:                                         ; preds = %cond.phi
  %22 = load i64, ptr %m, align 8, !dbg !716
  %add = add i64 0, %22, !dbg !716
  %lt8 = icmp ult i64 %20, %add, !dbg !716
  %sub = sub i64 %add, 1, !dbg !716
  %23 = call i1 @llvm.expect.i1(i1 %lt8, i1 false), !dbg !716
  br i1 %23, label %panic9, label %checkok16, !dbg !716

checkok16:                                        ; preds = %checkok7
  %size = sub i64 %add, 0, !dbg !714
  %24 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !714
  %25 = insertvalue %"char[]" %24, i64 %size, 1, !dbg !714
  %ptradd17 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !714
  %26 = load i64, ptr %ptradd17, align 8, !dbg !714
  %27 = inttoptr i64 %26 to ptr, !dbg !714
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !692
  %28 = icmp eq ptr %27, %type, !dbg !692
  br i1 %28, label %cache_hit, label %cache_miss, !dbg !692

cache_miss:                                       ; preds = %checkok16
  %ptradd18 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !692
  %29 = load ptr, ptr %ptradd18, align 8, !dbg !692
  %30 = call ptr @.dyn_search(ptr %29, ptr @"$sel.read"), !dbg !692
  store ptr %30, ptr %.inlinecache, align 8, !dbg !692
  store ptr %27, ptr %.cachedtype, align 8, !dbg !692
  br label %31, !dbg !692

cache_hit:                                        ; preds = %checkok16
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !692
  br label %31, !dbg !692

31:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %30, %cache_miss ], !dbg !692
  %32 = icmp eq ptr %fn_phi, null, !dbg !692
  br i1 %32, label %missing_function, label %match, !dbg !692

missing_function:                                 ; preds = %31
  %33 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !713
  call void %33(ptr @.panic_msg.81, i64 41, ptr @.file.78, i64 14, ptr @.func.68, i64 4, i32 29), !dbg !713
  unreachable, !dbg !713

match:                                            ; preds = %31
  %34 = load ptr, ptr %17, align 8
  %35 = call i64 %fn_phi(ptr %retparam, ptr %34, ptr %19, i64 %size), !dbg !713
  %not_err = icmp eq i64 %35, 0, !dbg !713
  %36 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !713
  br i1 %36, label %after_check, label %assign_optional, !dbg !713

assign_optional:                                  ; preds = %match
  store i64 %35, ptr %error_var, align 8, !dbg !713
  br label %guard_block, !dbg !713

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !713

guard_block:                                      ; preds = %assign_optional
  %37 = load i64, ptr %error_var, align 8, !dbg !713
  ret i64 %37, !dbg !713

noerr_block:                                      ; preds = %after_check
  %38 = load i64, ptr %retparam, align 8, !dbg !713
  store i64 %38, ptr %n, align 8, !dbg !713
  %39 = load ptr, ptr %self, align 8, !dbg !717
  %ptradd19 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !717
  %40 = load i64, ptr %ptradd19, align 8, !dbg !717
  %41 = load i64, ptr %n, align 8, !dbg !718
  %sub20 = sub i64 %40, %41, !dbg !717
  store i64 %sub20, ptr %ptradd19, align 8, !dbg !717
  %42 = load i64, ptr %n, align 8, !dbg !719
  store i64 %42, ptr %0, align 8, !dbg !719
  ret i64 0, !dbg !719

panic:                                            ; preds = %entry
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !694
  call void %43(ptr @.panic_msg, i64 62, ptr @.file.78, i64 14, ptr @.func.68, i64 4, i32 25), !dbg !694
  unreachable, !dbg !694

panic4:                                           ; preds = %cond.phi
  store i64 %20, ptr %taddr, align 8
  %44 = insertvalue %any undef, ptr %taddr, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %46 = insertvalue %any undef, ptr %taddr5, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %45, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %47, ptr %ptradd6, align 16
  %48 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.78, i64 14, ptr @.func.68, i64 4, i32 29, ptr byval(%"any[]") align 8 %indirectarg), !dbg !714
  unreachable, !dbg !714

panic9:                                           ; preds = %checkok7
  store i64 %sub, ptr %taddr10, align 8
  %49 = insertvalue %any undef, ptr %taddr10, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr11, align 8
  %51 = insertvalue %any undef, ptr %taddr11, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %50, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %52, ptr %ptradd13, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.78, i64 14, ptr @.func.68, i64 4, i32 29, ptr byval(%"any[]") align 8 %indirectarg15), !dbg !714
  unreachable, !dbg !714
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !720 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !723
  %2 = icmp eq ptr %1, null, !dbg !723
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !723
  br i1 %3, label %panic, label %checkok, !dbg !723

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !724, metadata !DIExpression()), !dbg !725
  %4 = load ptr, ptr %self, align 8, !dbg !726
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !726
  %5 = load i64, ptr %ptradd, align 8, !dbg !726
  %eq = icmp eq i64 0, %5, !dbg !726
  br i1 %eq, label %if.then, label %if.exit, !dbg !726

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !727

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !728
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !728
  %7 = load i64, ptr %ptradd1, align 8, !dbg !728
  %8 = inttoptr i64 %7 to ptr, !dbg !728
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !723
  %9 = icmp eq ptr %8, %type, !dbg !723
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !723

cache_miss:                                       ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !723
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !723
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read_byte"), !dbg !723
  store ptr %11, ptr %.inlinecache, align 8, !dbg !723
  store ptr %8, ptr %.cachedtype, align 8, !dbg !723
  br label %12, !dbg !723

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !723
  br label %12, !dbg !723

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !723
  %13 = icmp eq ptr %fn_phi, null, !dbg !723
  br i1 %13, label %missing_function, label %match, !dbg !723

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !728
  call void %14(ptr @.panic_msg.41, i64 46, ptr @.file.78, i64 14, ptr @.func.70, i64 9, i32 38), !dbg !728
  unreachable, !dbg !728

match:                                            ; preds = %12
  %15 = load ptr, ptr %6, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15), !dbg !728
  %not_err = icmp eq i64 %16, 0, !dbg !728
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !728
  br i1 %17, label %after_check, label %assign_optional, !dbg !728

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %reterr, align 8, !dbg !728
  br label %err_retblock, !dbg !728

after_check:                                      ; preds = %match
  %18 = load i8, ptr %retparam, align 1, !dbg !728
  %19 = load ptr, ptr %self, align 8, !dbg !729
  %ptradd3 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !729
  %20 = load i64, ptr %ptradd3, align 8, !dbg !729
  %sub = sub i64 %20, 1, !dbg !729
  store i64 %sub, ptr %ptradd3, align 8, !dbg !729
  store i8 %18, ptr %0, align 1, !dbg !729
  ret i64 0, !dbg !729

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !729
  ret i64 %21, !dbg !729

panic:                                            ; preds = %entry
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !725
  call void %22(ptr @.panic_msg, i64 62, ptr @.file.78, i64 14, ptr @.func.70, i64 9, i32 34), !dbg !725
  unreachable, !dbg !725
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.LimitReader.available(ptr %0, ptr %1) #0 comdat !dbg !731 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !734
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !734
  br i1 %3, label %panic, label %checkok, !dbg !734

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !735, metadata !DIExpression()), !dbg !736
  %4 = load ptr, ptr %self, align 8, !dbg !737
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !737
  %5 = load i64, ptr %ptradd, align 8, !dbg !737
  store i64 %5, ptr %0, align 8, !dbg !737
  ret i64 0, !dbg !737

panic:                                            ; preds = %entry
  %6 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !736
  call void %6(ptr @.panic_msg, i64 62, ptr @.file.78, i64 14, ptr @.func.74, i64 9, i32 41), !dbg !736
  unreachable, !dbg !736
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.len(ptr %0) #0 comdat !dbg !738 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !747
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !747
  br i1 %2, label %panic, label %checkok, !dbg !747

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !748, metadata !DIExpression()), !dbg !749
  %3 = load ptr, ptr %self, align 8, !dbg !750
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !750
  %4 = load i64, ptr %ptradd, align 8, !dbg !750
  ret i64 %4, !dbg !750

panic:                                            ; preds = %entry
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !749
  call void %5(ptr @.panic_msg, i64 62, ptr @.file.82, i64 13, ptr @.func.83, i64 3, i32 9), !dbg !749
  unreachable, !dbg !749
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteReader.init(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !751 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %.assign_list = alloca %ByteReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !754
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !754
  br i1 %4, label %panic, label %checkok, !dbg !754

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !755, metadata !DIExpression()), !dbg !756
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !757, metadata !DIExpression()), !dbg !758
  %5 = load ptr, ptr %self, align 8, !dbg !759
  %checknull = icmp eq ptr %5, null, !dbg !759
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !759
  br i1 %6, label %panic1, label %checkok2, !dbg !759

checkok2:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %bytes, i32 16, i1 false), !dbg !760
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !760
  %7 = load ptr, ptr %self, align 8, !dbg !761
  ret ptr %7, !dbg !761

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !756
  call void %8(ptr @.panic_msg, i64 62, ptr @.file.82, i64 13, ptr @.func, i64 4, i32 14), !dbg !756
  unreachable, !dbg !756

panic1:                                           ; preds = %checkok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !759
  call void %9(ptr @.panic_msg.36, i64 45, ptr @.file.82, i64 13, ptr @.func, i64 4, i32 16), !dbg !759
  unreachable, !dbg !759
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !762 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %reterr = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len16 = alloca i64, align 8
  %reterr25 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !765
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !765
  br i1 %5, label %panic, label %checkok, !dbg !765

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !766, metadata !DIExpression()), !dbg !767
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !768, metadata !DIExpression()), !dbg !769
  %6 = load ptr, ptr %self, align 8, !dbg !770
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !770
  %7 = load i64, ptr %ptradd1, align 8, !dbg !770
  %8 = load ptr, ptr %self, align 8, !dbg !771
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !771
  %9 = load i64, ptr %ptradd2, align 8, !dbg !771
  %ge = icmp uge i64 %7, %9, !dbg !770
  br i1 %ge, label %if.then, label %if.exit, !dbg !770

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !772

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %len, metadata !773, metadata !DIExpression()), !dbg !774
  %10 = load ptr, ptr %self, align 8, !dbg !775
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !775
  %11 = load i64, ptr %ptradd3, align 8, !dbg !775
  %12 = load ptr, ptr %self, align 8, !dbg !776
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !776
  %13 = load i64, ptr %ptradd4, align 8, !dbg !776
  %sub = sub i64 %11, %13, !dbg !775
  store i64 %sub, ptr %x, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !777
  %14 = load i64, ptr %ptradd5, align 8
  store i64 %14, ptr %.anon, align 8
  %15 = load i64, ptr %x, align 8
  store i64 %15, ptr %a, align 8
  %16 = load i64, ptr %.anon, align 8
  store i64 %16, ptr %b, align 8
  %17 = load i64, ptr %a, align 8, !dbg !778
  %18 = load i64, ptr %b, align 8, !dbg !783
  %lt = icmp ult i64 %17, %18, !dbg !778
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !778

cond.lhs:                                         ; preds = %if.exit
  %19 = load i64, ptr %x, align 8, !dbg !784
  br label %cond.phi, !dbg !784

cond.rhs:                                         ; preds = %if.exit
  %20 = load i64, ptr %.anon, align 8, !dbg !785
  br label %cond.phi, !dbg !785

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %19, %cond.lhs ], [ %20, %cond.rhs ], !dbg !785
  store i64 %val, ptr %len, align 8, !dbg !785
  %21 = load i64, ptr %len, align 8, !dbg !786
  %eq = icmp eq i64 0, %21, !dbg !786
  br i1 %eq, label %if.then6, label %if.exit7, !dbg !786

if.then6:                                         ; preds = %cond.phi
  store i64 0, ptr %0, align 8, !dbg !787
  ret i64 0, !dbg !787

if.exit7:                                         ; preds = %cond.phi
  %22 = load ptr, ptr %bytes, align 8, !dbg !788
  store ptr %22, ptr %dst, align 8
  %23 = load ptr, ptr %self, align 8, !dbg !789
  %ptradd8 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !789
  %24 = load i64, ptr %ptradd8, align 8, !dbg !789
  %25 = load ptr, ptr %23, align 8, !dbg !789
  %26 = load ptr, ptr %self, align 8, !dbg !790
  %ptradd9 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !790
  %27 = load i64, ptr %ptradd9, align 8, !dbg !790
  %ge10 = icmp uge i64 %27, %24, !dbg !790
  %28 = call i1 @llvm.expect.i1(i1 %ge10, i1 false), !dbg !790
  br i1 %28, label %panic11, label %checkok14, !dbg !790

checkok14:                                        ; preds = %if.exit7
  %ptradd15 = getelementptr inbounds i8, ptr %25, i64 %27, !dbg !790
  store ptr %ptradd15, ptr %src, align 8
  %29 = load i64, ptr %len, align 8
  store i64 %29, ptr %len16, align 8
  %30 = load i64, ptr %len16, align 8, !dbg !791
  %eq17 = icmp eq i64 0, %30, !dbg !791
  br i1 %eq17, label %or.phi, label %or.rhs, !dbg !791

or.rhs:                                           ; preds = %checkok14
  %31 = load ptr, ptr %dst, align 8, !dbg !796
  %32 = load i64, ptr %len16, align 8, !dbg !797
  %ptradd_any = getelementptr i8, ptr %31, i64 %32, !dbg !797
  %33 = load ptr, ptr %src, align 8, !dbg !798
  %le = icmp ule ptr %ptradd_any, %33, !dbg !796
  br label %or.phi, !dbg !796

or.phi:                                           ; preds = %or.rhs, %checkok14
  %val18 = phi i1 [ true, %checkok14 ], [ %le, %or.rhs ], !dbg !796
  br i1 %val18, label %or.phi22, label %or.rhs19, !dbg !796

or.rhs19:                                         ; preds = %or.phi
  %34 = load ptr, ptr %src, align 8, !dbg !799
  %35 = load i64, ptr %len16, align 8, !dbg !800
  %ptradd_any20 = getelementptr i8, ptr %34, i64 %35, !dbg !800
  %36 = load ptr, ptr %dst, align 8, !dbg !801
  %le21 = icmp ule ptr %ptradd_any20, %36, !dbg !799
  br label %or.phi22, !dbg !799

or.phi22:                                         ; preds = %or.rhs19, %or.phi
  %val23 = phi i1 [ true, %or.phi ], [ %le21, %or.rhs19 ], !dbg !799
  br i1 %val23, label %assert_ok, label %assert_fail, !dbg !799

assert_fail:                                      ; preds = %or.phi22
  %37 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !791
  call void %37(ptr @.panic_msg.84, i64 95, ptr @.file.85, i64 6, ptr @.func.68, i64 4, i32 309), !dbg !791
  unreachable, !dbg !791

assert_ok:                                        ; preds = %or.phi22
  %38 = load ptr, ptr %dst, align 8, !dbg !802
  %39 = load ptr, ptr %src, align 8, !dbg !803
  %40 = load i64, ptr %len16, align 8, !dbg !804
  call void @llvm.memcpy.p0.p0.i64(ptr %38, ptr %39, i64 %40, i1 false), !dbg !805
  %41 = load ptr, ptr %self, align 8, !dbg !806
  %ptradd24 = getelementptr inbounds i8, ptr %41, i64 16, !dbg !806
  %42 = load i64, ptr %ptradd24, align 8, !dbg !806
  %43 = load i64, ptr %len, align 8, !dbg !807
  %add = add i64 %42, %43, !dbg !806
  store i64 %add, ptr %ptradd24, align 8, !dbg !806
  %44 = load i64, ptr %len, align 8, !dbg !808
  store i64 %44, ptr %0, align 8, !dbg !808
  ret i64 0, !dbg !808

panic:                                            ; preds = %entry
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !767
  call void %45(ptr @.panic_msg, i64 62, ptr @.file.82, i64 13, ptr @.func.68, i64 4, i32 20), !dbg !767
  unreachable, !dbg !767

panic11:                                          ; preds = %if.exit7
  store i64 %24, ptr %taddr, align 8
  %46 = insertvalue %any undef, ptr %taddr, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr12, align 8
  %48 = insertvalue %any undef, ptr %taddr12, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %47, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %49, ptr %ptradd13, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.82, i64 13, ptr @.func.68, i64 4, i32 25, ptr byval(%"any[]") align 8 %indirectarg), !dbg !790
  unreachable, !dbg !790
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !809 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !812
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !812
  br i1 %3, label %panic, label %checkok, !dbg !812

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !813, metadata !DIExpression()), !dbg !814
  %4 = load ptr, ptr %self, align 8, !dbg !815
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !815
  %5 = load i64, ptr %ptradd, align 8, !dbg !815
  %6 = load ptr, ptr %self, align 8, !dbg !816
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !816
  %7 = load i64, ptr %ptradd1, align 8, !dbg !816
  %ge = icmp uge i64 %5, %7, !dbg !815
  br i1 %ge, label %if.then, label %if.exit, !dbg !815

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !817

if.exit:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !818
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !818
  %9 = load i64, ptr %ptradd2, align 8, !dbg !818
  %10 = load ptr, ptr %8, align 8, !dbg !818
  %11 = load ptr, ptr %self, align 8, !dbg !819
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !819
  %12 = load i64, ptr %ptradd3, align 8, !dbg !819
  %add = add i64 %12, 1, !dbg !819
  store i64 %add, ptr %ptradd3, align 8, !dbg !819
  %ge4 = icmp uge i64 %12, %9, !dbg !819
  %13 = call i1 @llvm.expect.i1(i1 %ge4, i1 false), !dbg !819
  br i1 %13, label %panic5, label %checkok8, !dbg !819

checkok8:                                         ; preds = %if.exit
  %ptradd9 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !819
  %14 = load i8, ptr %ptradd9, align 1, !dbg !819
  store i8 %14, ptr %0, align 1, !dbg !819
  ret i64 0, !dbg !819

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !814
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.82, i64 13, ptr @.func.70, i64 9, i32 30), !dbg !814
  unreachable, !dbg !814

panic5:                                           ; preds = %if.exit
  store i64 %9, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr6, align 8
  %18 = insertvalue %any undef, ptr %taddr6, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %17, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd7, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.82, i64 13, ptr @.func.70, i64 9, i32 33, ptr byval(%"any[]") align 8 %indirectarg), !dbg !819
  unreachable, !dbg !819
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.pushback_byte(ptr %0) #0 comdat !dbg !820 {
entry:
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !823
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !823
  br i1 %2, label %panic, label %checkok, !dbg !823

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !824, metadata !DIExpression()), !dbg !825
  %3 = load ptr, ptr %self, align 8, !dbg !826
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !826
  %4 = load i64, ptr %ptradd, align 8, !dbg !826
  %not = icmp eq i64 %4, 0, !dbg !826
  br i1 %not, label %if.then, label %if.exit, !dbg !826

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_PUSHBACK" to i64), !dbg !827

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !828
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !828
  %6 = load i64, ptr %ptradd1, align 8, !dbg !828
  %sub = sub i64 %6, 1, !dbg !828
  store i64 %sub, ptr %ptradd1, align 8, !dbg !828
  ret i64 0, !dbg !828

panic:                                            ; preds = %entry
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !825
  call void %7(ptr @.panic_msg, i64 62, ptr @.file.82, i64 13, ptr @.func.71, i64 13, i32 36), !dbg !825
  unreachable, !dbg !825
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !829 {
entry:
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %new_index = alloca i64, align 8
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !832
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !832
  br i1 %5, label %panic, label %checkok, !dbg !832

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !833, metadata !DIExpression()), !dbg !834
  store i64 %2, ptr %offset, align 8
  call void @llvm.dbg.declare(metadata ptr %offset, metadata !835, metadata !DIExpression()), !dbg !836
  store i32 %3, ptr %seek, align 4
  call void @llvm.dbg.declare(metadata ptr %seek, metadata !837, metadata !DIExpression()), !dbg !838
  call void @llvm.dbg.declare(metadata ptr %new_index, metadata !839, metadata !DIExpression()), !dbg !840
  store i64 0, ptr %new_index, align 8, !dbg !840
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case1
    i32 2, label %switch.case2
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !841
  store i64 %8, ptr %new_index, align 8, !dbg !841
  br label %switch.exit, !dbg !841

switch.case1:                                     ; preds = %switch.entry
  %9 = load ptr, ptr %self, align 8, !dbg !844
  %ptradd = getelementptr inbounds i8, ptr %9, i64 16, !dbg !844
  %10 = load i64, ptr %ptradd, align 8, !dbg !844
  %11 = load i64, ptr %offset, align 8, !dbg !846
  %add = add i64 %10, %11, !dbg !844
  store i64 %add, ptr %new_index, align 8, !dbg !844
  br label %switch.exit, !dbg !844

switch.case2:                                     ; preds = %switch.entry
  %12 = load ptr, ptr %self, align 8, !dbg !847
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 8, !dbg !847
  %13 = load i64, ptr %ptradd3, align 8, !dbg !847
  %14 = load i64, ptr %offset, align 8, !dbg !849
  %add4 = add i64 %13, %14, !dbg !847
  store i64 %add4, ptr %new_index, align 8, !dbg !847
  br label %switch.exit, !dbg !847

switch.exit:                                      ; preds = %switch.case2, %switch.case1, %switch.case, %switch.entry
  %15 = load i64, ptr %new_index, align 8, !dbg !850
  %lt = icmp slt i64 %15, 0, !dbg !850
  br i1 %lt, label %if.then, label %if.exit, !dbg !850

if.then:                                          ; preds = %switch.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !851

if.exit:                                          ; preds = %switch.exit
  %16 = load ptr, ptr %self, align 8, !dbg !852
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !852
  %17 = load i64, ptr %new_index, align 8, !dbg !853
  store i64 %17, ptr %ptradd5, align 8, !dbg !853
  %18 = load i64, ptr %new_index, align 8, !dbg !854
  store i64 %18, ptr %0, align 8, !dbg !854
  ret i64 0, !dbg !854

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !834
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.82, i64 13, ptr @.func.73, i64 4, i32 42), !dbg !834
  unreachable, !dbg !834
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.write_to(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !855 {
entry:
  %self = alloca ptr, align 8
  %writer = alloca %any, align 8
  %reterr = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr14 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !858
  %4 = icmp eq ptr %1, null, !dbg !858
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !858
  br i1 %5, label %panic, label %checkok, !dbg !858

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !859, metadata !DIExpression()), !dbg !860
  store i64 %2, ptr %writer, align 8
  %ptradd = getelementptr inbounds i8, ptr %writer, i64 8
  store ptr %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %writer, metadata !861, metadata !DIExpression()), !dbg !862
  %6 = load ptr, ptr %self, align 8, !dbg !863
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !863
  %7 = load i64, ptr %ptradd1, align 8, !dbg !863
  %8 = load ptr, ptr %self, align 8, !dbg !864
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !864
  %9 = load i64, ptr %ptradd2, align 8, !dbg !864
  %ge = icmp uge i64 %7, %9, !dbg !863
  br i1 %ge, label %if.then, label %if.exit, !dbg !863

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !865
  ret i64 0, !dbg !865

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %written, metadata !866, metadata !DIExpression()), !dbg !867
  %10 = load ptr, ptr %self, align 8, !dbg !868
  %11 = load %"char[]", ptr %10, align 8, !dbg !868
  %12 = extractvalue %"char[]" %11, 0, !dbg !868
  %13 = load ptr, ptr %self, align 8, !dbg !869
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !869
  %14 = load i64, ptr %ptradd3, align 8, !dbg !869
  %15 = extractvalue %"char[]" %11, 1, !dbg !869
  %gt = icmp ugt i64 %14, %15, !dbg !869
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !869
  br i1 %16, label %panic4, label %checkok7, !dbg !869

checkok7:                                         ; preds = %if.exit
  %size = sub i64 %15, %14, !dbg !868
  %ptradd8 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !868
  %17 = insertvalue %"char[]" undef, ptr %ptradd8, 0, !dbg !868
  %18 = insertvalue %"char[]" %17, i64 %size, 1, !dbg !868
  %ptradd9 = getelementptr inbounds i8, ptr %writer, i64 8, !dbg !868
  %19 = load i64, ptr %ptradd9, align 8, !dbg !868
  %20 = inttoptr i64 %19 to ptr, !dbg !868
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !858
  %21 = icmp eq ptr %20, %type, !dbg !858
  br i1 %21, label %cache_hit, label %cache_miss, !dbg !858

cache_miss:                                       ; preds = %checkok7
  %ptradd10 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !858
  %22 = load ptr, ptr %ptradd10, align 8, !dbg !858
  %23 = call ptr @.dyn_search(ptr %22, ptr @"$sel.write"), !dbg !858
  store ptr %23, ptr %.inlinecache, align 8, !dbg !858
  store ptr %20, ptr %.cachedtype, align 8, !dbg !858
  br label %24, !dbg !858

cache_hit:                                        ; preds = %checkok7
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !858
  br label %24, !dbg !858

24:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %23, %cache_miss ], !dbg !858
  %25 = icmp eq ptr %fn_phi, null, !dbg !858
  br i1 %25, label %missing_function, label %match, !dbg !858

missing_function:                                 ; preds = %24
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !870
  call void %26(ptr @.panic_msg.51, i64 42, ptr @.file.82, i64 13, ptr @.func.86, i64 8, i32 59), !dbg !870
  unreachable, !dbg !870

match:                                            ; preds = %24
  %27 = load ptr, ptr %writer, align 8
  %28 = call i64 %fn_phi(ptr %retparam, ptr %27, ptr %ptradd8, i64 %size), !dbg !870
  %not_err = icmp eq i64 %28, 0, !dbg !870
  %29 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !870
  br i1 %29, label %after_check, label %assign_optional, !dbg !870

assign_optional:                                  ; preds = %match
  store i64 %28, ptr %error_var, align 8, !dbg !870
  br label %guard_block, !dbg !870

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !870

guard_block:                                      ; preds = %assign_optional
  %30 = load i64, ptr %error_var, align 8, !dbg !870
  ret i64 %30, !dbg !870

noerr_block:                                      ; preds = %after_check
  %31 = load i64, ptr %retparam, align 8, !dbg !870
  store i64 %31, ptr %written, align 8, !dbg !870
  %32 = load ptr, ptr %self, align 8, !dbg !871
  %ptradd11 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !871
  %33 = load i64, ptr %ptradd11, align 8, !dbg !871
  %34 = load i64, ptr %written, align 8, !dbg !872
  %add = add i64 %33, %34, !dbg !871
  store i64 %add, ptr %ptradd11, align 8, !dbg !871
  %35 = load ptr, ptr %self, align 8, !dbg !873
  %ptradd12 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !873
  %36 = load i64, ptr %ptradd12, align 8, !dbg !873
  %37 = load ptr, ptr %self, align 8, !dbg !874
  %ptradd13 = getelementptr inbounds i8, ptr %37, i64 8, !dbg !874
  %38 = load i64, ptr %ptradd13, align 8, !dbg !874
  %le = icmp ule i64 %36, %38, !dbg !873
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !873

assert_fail:                                      ; preds = %noerr_block
  %39 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !873
  call void %39(ptr @.panic_msg.72, i64 16, ptr @.file.82, i64 13, ptr @.func.86, i64 8, i32 61), !dbg !873
  unreachable, !dbg !873

assert_ok:                                        ; preds = %noerr_block
  %40 = load i64, ptr %written, align 8, !dbg !875
  store i64 %40, ptr %0, align 8, !dbg !875
  ret i64 0, !dbg !875

panic:                                            ; preds = %entry
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !860
  call void %41(ptr @.panic_msg, i64 62, ptr @.file.82, i64 13, ptr @.func.86, i64 8, i32 56), !dbg !860
  unreachable, !dbg !860

panic4:                                           ; preds = %if.exit
  store i64 %15, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr5, align 8
  %44 = insertvalue %any undef, ptr %taddr5, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %43, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd6, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.82, i64 13, ptr @.func.86, i64 8, i32 59, ptr byval(%"any[]") align 8 %indirectarg), !dbg !868
  unreachable, !dbg !868
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteReader.available(ptr %0, ptr %1) #0 comdat !dbg !876 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !879
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !879
  br i1 %3, label %panic, label %checkok, !dbg !879

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !880, metadata !DIExpression()), !dbg !881
  store i32 0, ptr %x, align 4
  %4 = load ptr, ptr %self, align 8, !dbg !882
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !882
  %5 = load i64, ptr %ptradd, align 8, !dbg !882
  %6 = load ptr, ptr %self, align 8, !dbg !883
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !883
  %7 = load i64, ptr %ptradd1, align 8, !dbg !883
  %sub = sub i64 %5, %7, !dbg !882
  store i64 %sub, ptr %.anon, align 8
  %8 = load i32, ptr %x, align 4
  store i32 %8, ptr %a, align 4
  %9 = load i64, ptr %.anon, align 8
  store i64 %9, ptr %b, align 8
  %10 = load i32, ptr %a, align 4, !dbg !884
  %sext = sext i32 %10 to i64, !dbg !884
  %11 = load i64, ptr %b, align 8, !dbg !889
  %gt = icmp sgt i64 %sext, %11, !dbg !884
  %check = icmp sge i64 %11, 0, !dbg !884
  %siui-gt = and i1 %check, %gt, !dbg !884
  br i1 %siui-gt, label %cond.lhs, label %cond.rhs, !dbg !884

cond.lhs:                                         ; preds = %checkok
  %12 = load i32, ptr %x, align 4, !dbg !890
  %sext2 = sext i32 %12 to i64, !dbg !890
  br label %cond.phi, !dbg !890

cond.rhs:                                         ; preds = %checkok
  %13 = load i64, ptr %.anon, align 8, !dbg !891
  br label %cond.phi, !dbg !891

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext2, %cond.lhs ], [ %13, %cond.rhs ], !dbg !891
  store i64 %val, ptr %0, align 8, !dbg !891
  ret i64 0, !dbg !891

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !881
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.82, i64 13, ptr @.func.74, i64 9, i32 65), !dbg !881
  unreachable, !dbg !881
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteWriter.new_init(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !892 {
entry:
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %.assign_list = alloca %ByteWriter, align 8
  %3 = icmp eq ptr %0, null, !dbg !902
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !902
  br i1 %4, label %panic, label %checkok, !dbg !902

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !903, metadata !DIExpression()), !dbg !904
  store i64 %1, ptr %allocator, align 8
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !905, metadata !DIExpression()), !dbg !906
  %5 = load ptr, ptr %self, align 8, !dbg !907
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !907
  %6 = load i64, ptr %ptradd1, align 8, !dbg !907
  %eq = icmp eq i64 0, %6, !dbg !907
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !907

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !907
  call void %7(ptr @.panic_msg.88, i64 88, ptr @.file.87, i64 13, ptr @.func.55, i64 8, i32 14), !dbg !907
  unreachable, !dbg !907

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !909
  %checknull = icmp eq ptr %8, null, !dbg !909
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !909
  br i1 %9, label %panic2, label %checkok3, !dbg !909

checkok3:                                         ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  store %"char[]" zeroinitializer, ptr %.assign_list, align 8, !dbg !910
  %ptradd4 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !910
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd4, ptr align 8 %allocator, i32 16, i1 false), !dbg !911
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %8, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !911
  %10 = load ptr, ptr %self, align 8, !dbg !912
  %11 = load ptr, ptr %allocator, align 8, !dbg !913
  %anybool = icmp ne ptr %11, null, !dbg !913
  br i1 %anybool, label %assert_ok6, label %assert_fail5, !dbg !913

assert_fail5:                                     ; preds = %checkok3
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !913
  call void %12(ptr @.panic_msg.89, i64 52, ptr @.file.87, i64 13, ptr @.func.55, i64 8, i32 15), !dbg !913
  unreachable, !dbg !913

assert_ok6:                                       ; preds = %checkok3
  %13 = load ptr, ptr %self, align 8, !dbg !914
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !914
  %14 = load i64, ptr %ptradd7, align 8, !dbg !914
  %eq8 = icmp eq i64 0, %14, !dbg !914
  br i1 %eq8, label %assert_ok10, label %assert_fail9, !dbg !914

assert_fail9:                                     ; preds = %assert_ok6
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !914
  call void %15(ptr @.panic_msg.89, i64 52, ptr @.file.87, i64 13, ptr @.func.55, i64 8, i32 15), !dbg !914
  unreachable, !dbg !914

assert_ok10:                                      ; preds = %assert_ok6
  ret ptr %10, !dbg !914

panic:                                            ; preds = %entry
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !904
  call void %16(ptr @.panic_msg, i64 62, ptr @.file.87, i64 13, ptr @.func.55, i64 8, i32 17), !dbg !904
  unreachable, !dbg !904

panic2:                                           ; preds = %assert_ok
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !909
  call void %17(ptr @.panic_msg.36, i64 45, ptr @.file.87, i64 13, ptr @.func.55, i64 8, i32 19), !dbg !909
  unreachable, !dbg !909
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteWriter.temp_init(ptr %0) #0 comdat !dbg !915 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca %any, align 8
  %1 = icmp eq ptr %0, null, !dbg !918
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !918
  br i1 %2, label %panic, label %checkok, !dbg !918

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !919, metadata !DIExpression()), !dbg !920
  %3 = load ptr, ptr %self, align 8, !dbg !921
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !921
  %4 = load i64, ptr %ptradd, align 8, !dbg !921
  %eq = icmp eq i64 0, %4, !dbg !921
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !921

assert_fail:                                      ; preds = %checkok
  %5 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !921
  call void %5(ptr @.panic_msg.88, i64 88, ptr @.file.87, i64 13, ptr @.func.57, i64 9, i32 25), !dbg !921
  unreachable, !dbg !921

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !923
  %not = icmp eq ptr %6, null, !dbg !923
  br i1 %not, label %if.then, label %if.exit, !dbg !923

if.then:                                          ; preds = %assert_ok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !926
  br label %if.exit, !dbg !926

if.exit:                                          ; preds = %if.then, %assert_ok
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !928
  %8 = insertvalue %any undef, ptr %7, 0, !dbg !928
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !928
  %10 = load ptr, ptr %self, align 8, !dbg !928
  store %any %9, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd1, align 8
  %11 = call ptr @std.io.ByteWriter.new_init(ptr %10, i64 %lo, ptr %hi) #5, !dbg !929
  %12 = load ptr, ptr %self, align 8, !dbg !930
  %ptradd2 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !930
  %13 = load i64, ptr %ptradd2, align 8, !dbg !930
  %eq3 = icmp eq i64 0, %13, !dbg !930
  br i1 %eq3, label %assert_ok5, label %assert_fail4, !dbg !930

assert_fail4:                                     ; preds = %if.exit
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !930
  call void %14(ptr @.panic_msg.90, i64 35, ptr @.file.87, i64 13, ptr @.func.57, i64 9, i32 26), !dbg !930
  unreachable, !dbg !930

assert_ok5:                                       ; preds = %if.exit
  ret ptr %11, !dbg !930

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !920
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.87, i64 13, ptr @.func.57, i64 9, i32 28), !dbg !920
  unreachable, !dbg !920
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ByteWriter.init_with_buffer(ptr %0, ptr %1, i64 %2) #0 comdat !dbg !931 {
entry:
  %self = alloca ptr, align 8
  %data = alloca %"char[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %3 = icmp eq ptr %0, null, !dbg !934
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !934
  br i1 %4, label %panic, label %checkok, !dbg !934

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !935, metadata !DIExpression()), !dbg !936
  store ptr %1, ptr %data, align 8
  %ptradd = getelementptr inbounds i8, ptr %data, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !937, metadata !DIExpression()), !dbg !938
  %5 = load ptr, ptr %self, align 8, !dbg !939
  %checknull = icmp eq ptr %5, null, !dbg !939
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !939
  br i1 %6, label %panic1, label %checkok2, !dbg !939

checkok2:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %data, i32 16, i1 false), !dbg !940
  %ptradd3 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !940
  store %any { ptr null, i64 ptrtoint (ptr @"$ct.void" to i64) }, ptr %ptradd3, align 8, !dbg !941
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !941
  %7 = load ptr, ptr %self, align 8, !dbg !942
  ret ptr %7, !dbg !942

panic:                                            ; preds = %entry
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !936
  call void %8(ptr @.panic_msg, i64 62, ptr @.file.87, i64 13, ptr @.func.58, i64 16, i32 33), !dbg !936
  unreachable, !dbg !936

panic1:                                           ; preds = %checkok
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !939
  call void %9(ptr @.panic_msg.36, i64 45, ptr @.file.87, i64 13, ptr @.func.58, i64 16, i32 35), !dbg !939
  unreachable, !dbg !939
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.destroy(ptr %0) #0 comdat !dbg !943 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr3 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !946
  %1 = icmp eq ptr %0, null, !dbg !946
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !946
  br i1 %2, label %panic, label %checkok, !dbg !946

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !947, metadata !DIExpression()), !dbg !948
  %3 = load ptr, ptr %self, align 8, !dbg !949
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !949
  %4 = load ptr, ptr %ptradd, align 8, !dbg !949
  %not = icmp eq ptr %4, null, !dbg !949
  br i1 %not, label %if.then, label %if.exit, !dbg !949

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !950, metadata !DIExpression()), !dbg !951
  %5 = load ptr, ptr %self, align 8, !dbg !952
  %6 = load ptr, ptr %5, align 8, !dbg !952
  store ptr %6, ptr %ptr, align 8, !dbg !952
  %7 = load ptr, ptr %ptr, align 8, !dbg !952
  %ptrbool = icmp ne ptr %7, null, !dbg !952
  br i1 %ptrbool, label %if.then1, label %if.exit9, !dbg !952

if.then1:                                         ; preds = %if.exit
  %8 = load ptr, ptr %self, align 8, !dbg !953
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !953
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd2, i32 16, i1 false)
  %9 = load ptr, ptr %ptr, align 8
  store ptr %9, ptr %ptr3, align 8
  %10 = load ptr, ptr %ptr3, align 8, !dbg !954
  %not4 = icmp eq ptr %10, null, !dbg !954
  br i1 %not4, label %if.then5, label %if.exit6, !dbg !954

if.then5:                                         ; preds = %if.then1
  br label %expr_block.exit, !dbg !957

if.exit6:                                         ; preds = %if.then1
  %ptradd7 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !958
  %11 = load i64, ptr %ptradd7, align 8, !dbg !958
  %12 = inttoptr i64 %11 to ptr, !dbg !958
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !946
  %13 = icmp eq ptr %12, %type, !dbg !946
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !946

cache_miss:                                       ; preds = %if.exit6
  %ptradd8 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !946
  %14 = load ptr, ptr %ptradd8, align 8, !dbg !946
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !946
  store ptr %15, ptr %.inlinecache, align 8, !dbg !946
  store ptr %12, ptr %.cachedtype, align 8, !dbg !946
  br label %16, !dbg !946

cache_hit:                                        ; preds = %if.exit6
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !946
  br label %16, !dbg !946

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !946
  %17 = icmp eq ptr %fn_phi, null, !dbg !946
  br i1 %17, label %missing_function, label %match, !dbg !946

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !959
  call void %18(ptr @.panic_msg.61, i64 44, ptr @.file.62, i64 16, ptr @.func.91, i64 7, i32 105), !dbg !959
  unreachable, !dbg !959

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !959
  %20 = load ptr, ptr %ptr3, align 8, !dbg !959
  call void %fn_phi(ptr %19, ptr %20, i8 zeroext 0), !dbg !959
  br label %expr_block.exit, !dbg !959

expr_block.exit:                                  ; preds = %match, %if.then5
  br label %if.exit9, !dbg !959

if.exit9:                                         ; preds = %expr_block.exit, %if.exit
  %21 = load ptr, ptr %self, align 8, !dbg !960
  %checknull = icmp eq ptr %21, null, !dbg !960
  %22 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !960
  br i1 %22, label %panic10, label %checkok11, !dbg !960

checkok11:                                        ; preds = %if.exit9
  call void @llvm.memset.p0.i64(ptr align 8 %21, i8 0, i64 40, i1 false), !dbg !960
  ret i64 0, !dbg !960

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !948
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.87, i64 13, ptr @.func.91, i64 7, i32 39), !dbg !948
  unreachable, !dbg !948

panic10:                                          ; preds = %if.exit9
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !960
  call void %24(ptr @.panic_msg.36, i64 45, ptr @.file.87, i64 13, ptr @.func.91, i64 7, i32 43), !dbg !960
  unreachable, !dbg !960
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.ByteWriter.str_view(ptr %0) #0 comdat !dbg !961 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots8 = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !965
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !965
  br i1 %2, label %panic, label %checkok, !dbg !965

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !966, metadata !DIExpression()), !dbg !967
  %3 = load ptr, ptr %self, align 8, !dbg !968
  %4 = load %"char[]", ptr %3, align 8, !dbg !968
  %5 = extractvalue %"char[]" %4, 0, !dbg !968
  %6 = extractvalue %"char[]" %4, 1, !dbg !969
  %gt = icmp ugt i64 0, %6, !dbg !969
  %7 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !969
  br i1 %7, label %panic1, label %checkok3, !dbg !969

checkok3:                                         ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !970
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !970
  %9 = load i64, ptr %ptradd4, align 8, !dbg !970
  %add = add i64 0, %9, !dbg !970
  %lt = icmp ult i64 %6, %add, !dbg !970
  %sub = sub i64 %add, 1, !dbg !970
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !970
  br i1 %10, label %panic5, label %checkok12, !dbg !970

checkok12:                                        ; preds = %checkok3
  %size = sub i64 %add, 0, !dbg !971
  %11 = insertvalue %"char[]" undef, ptr %5, 0, !dbg !971
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !971
  store %"char[]" %12, ptr %taddr13, align 8
  %13 = load { ptr, i64 }, ptr %taddr13, align 8
  ret { ptr, i64 } %13

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !967
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.87, i64 13, ptr @.func.92, i64 8, i32 46), !dbg !967
  unreachable, !dbg !967

panic1:                                           ; preds = %checkok
  store i64 %6, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %17 = insertvalue %any undef, ptr %taddr2, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %16, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.87, i64 13, ptr @.func.92, i64 8, i32 48, ptr byval(%"any[]") align 8 %indirectarg), !dbg !971
  unreachable, !dbg !971

panic5:                                           ; preds = %checkok3
  store i64 %sub, ptr %taddr6, align 8
  %20 = insertvalue %any undef, ptr %taddr6, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr7, align 8
  %22 = insertvalue %any undef, ptr %taddr7, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots8, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots8, i64 16
  store %any %23, ptr %ptradd9, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots8, 0
  %"$$temp10" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp10", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.87, i64 13, ptr @.func.92, i64 8, i32 48, ptr byval(%"any[]") align 8 %indirectarg11), !dbg !971
  unreachable, !dbg !971
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.ensure_capacity(ptr %0, i64 %1) #0 comdat !dbg !972 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %new_capacity = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %new_ptr = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator10 = alloca %any, align 8
  %ptr11 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %.inlinecache21 = alloca ptr, align 8
  %.cachedtype22 = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %.inlinecache33 = alloca ptr, align 8
  %.cachedtype34 = alloca ptr, align 8
  %retparam43 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype34, align 8, !dbg !975
  store ptr null, ptr %.cachedtype22, align 8, !dbg !975
  store ptr null, ptr %.cachedtype, align 8, !dbg !975
  %2 = icmp eq ptr %0, null, !dbg !975
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !975
  br i1 %3, label %panic, label %checkok, !dbg !975

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !976, metadata !DIExpression()), !dbg !977
  store i64 %1, ptr %len, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !978, metadata !DIExpression()), !dbg !979
  %4 = load ptr, ptr %self, align 8, !dbg !980
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !980
  %5 = load i64, ptr %ptradd, align 8, !dbg !980
  %6 = load i64, ptr %len, align 8, !dbg !981
  %gt = icmp ugt i64 %5, %6, !dbg !980
  br i1 %gt, label %if.then, label %if.exit, !dbg !980

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !982
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !982
  %8 = load ptr, ptr %ptradd1, align 8, !dbg !982
  %not = icmp eq ptr %8, null, !dbg !982
  br i1 %not, label %if.then2, label %if.exit3, !dbg !982

if.then2:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$OUT_OF_SPACE" to i64), !dbg !983

if.exit3:                                         ; preds = %if.exit
  %9 = load i64, ptr %len, align 8, !dbg !984
  %gt4 = icmp ugt i64 16, %9, !dbg !984
  br i1 %gt4, label %if.then5, label %if.exit6, !dbg !984

if.then5:                                         ; preds = %if.exit3
  store i64 16, ptr %len, align 8, !dbg !985
  br label %if.exit6, !dbg !985

if.exit6:                                         ; preds = %if.then5, %if.exit3
  call void @llvm.dbg.declare(metadata ptr %new_capacity, metadata !986, metadata !DIExpression()), !dbg !987
  %10 = load i64, ptr %len, align 8
  store i64 %10, ptr %x, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !988, metadata !DIExpression()), !dbg !990
  store i64 1, ptr %y, align 8, !dbg !992
  br label %loop.cond, !dbg !993

loop.cond:                                        ; preds = %loop.body, %if.exit6
  %11 = load i64, ptr %y, align 8, !dbg !994
  %12 = load i64, ptr %x, align 8, !dbg !996
  %lt = icmp ult i64 %11, %12, !dbg !994
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !994

loop.body:                                        ; preds = %loop.cond
  %13 = load i64, ptr %y, align 8, !dbg !997
  %14 = load i64, ptr %y, align 8, !dbg !998
  %add = add i64 %13, %14, !dbg !997
  store i64 %add, ptr %y, align 8, !dbg !997
  br label %loop.cond, !dbg !997

loop.exit:                                        ; preds = %loop.cond
  %15 = load i64, ptr %y, align 8, !dbg !999
  store i64 %15, ptr %new_capacity, align 8, !dbg !999
  call void @llvm.dbg.declare(metadata ptr %new_ptr, metadata !1000, metadata !DIExpression()), !dbg !1001
  %16 = load ptr, ptr %self, align 8, !dbg !1002
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 24, !dbg !1002
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd7, i32 16, i1 false)
  %17 = load ptr, ptr %self, align 8, !dbg !1003
  %18 = load ptr, ptr %17, align 8, !dbg !1003
  store ptr %18, ptr %ptr, align 8
  %19 = load i64, ptr %new_capacity, align 8
  store i64 %19, ptr %new_size, align 8
  %20 = load i64, ptr %new_size, align 8, !dbg !1004
  %not8 = icmp eq i64 %20, 0, !dbg !1004
  br i1 %not8, label %if.then9, label %if.exit17, !dbg !1004

if.then9:                                         ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator10, ptr align 8 %allocator, i32 16, i1 false)
  %21 = load ptr, ptr %ptr, align 8
  store ptr %21, ptr %ptr11, align 8
  %22 = load ptr, ptr %ptr11, align 8, !dbg !1007
  %not12 = icmp eq ptr %22, null, !dbg !1007
  br i1 %not12, label %if.then13, label %if.exit14, !dbg !1007

if.then13:                                        ; preds = %if.then9
  br label %expr_block.exit, !dbg !1011

if.exit14:                                        ; preds = %if.then9
  %ptradd15 = getelementptr inbounds i8, ptr %allocator10, i64 8, !dbg !1012
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1012
  %24 = inttoptr i64 %23 to ptr, !dbg !1012
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !975
  %25 = icmp eq ptr %24, %type, !dbg !975
  br i1 %25, label %cache_hit, label %cache_miss, !dbg !975

cache_miss:                                       ; preds = %if.exit14
  %ptradd16 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !975
  %26 = load ptr, ptr %ptradd16, align 8, !dbg !975
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.release"), !dbg !975
  store ptr %27, ptr %.inlinecache, align 8, !dbg !975
  store ptr %24, ptr %.cachedtype, align 8, !dbg !975
  br label %28, !dbg !975

cache_hit:                                        ; preds = %if.exit14
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !975
  br label %28, !dbg !975

28:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %27, %cache_miss ], !dbg !975
  %29 = icmp eq ptr %fn_phi, null, !dbg !975
  br i1 %29, label %missing_function, label %match, !dbg !975

missing_function:                                 ; preds = %28
  %30 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1013
  call void %30(ptr @.panic_msg.61, i64 44, ptr @.file.62, i64 16, ptr @.func.93, i64 15, i32 105), !dbg !1013
  unreachable, !dbg !1013

match:                                            ; preds = %28
  %31 = load ptr, ptr %allocator10, align 8, !dbg !1013
  %32 = load ptr, ptr %ptr11, align 8, !dbg !1013
  call void %fn_phi(ptr %31, ptr %32, i8 zeroext 0), !dbg !1013
  br label %expr_block.exit, !dbg !1013

expr_block.exit:                                  ; preds = %match, %if.then13
  store ptr null, ptr %blockret, align 8, !dbg !1014
  br label %expr_block.exit47, !dbg !1014

if.exit17:                                        ; preds = %loop.exit
  %33 = load ptr, ptr %ptr, align 8, !dbg !1015
  %not18 = icmp eq ptr %33, null, !dbg !1015
  br i1 %not18, label %if.then19, label %if.exit31, !dbg !1015

if.then19:                                        ; preds = %if.exit17
  %ptradd20 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1016
  %34 = load i64, ptr %ptradd20, align 8, !dbg !1016
  %35 = inttoptr i64 %34 to ptr, !dbg !1016
  %type23 = load ptr, ptr %.cachedtype22, align 8, !dbg !975
  %36 = icmp eq ptr %35, %type23, !dbg !975
  br i1 %36, label %cache_hit26, label %cache_miss24, !dbg !975

cache_miss24:                                     ; preds = %if.then19
  %ptradd25 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !975
  %37 = load ptr, ptr %ptradd25, align 8, !dbg !975
  %38 = call ptr @.dyn_search(ptr %37, ptr @"$sel.acquire"), !dbg !975
  store ptr %38, ptr %.inlinecache21, align 8, !dbg !975
  store ptr %35, ptr %.cachedtype22, align 8, !dbg !975
  br label %39, !dbg !975

cache_hit26:                                      ; preds = %if.then19
  %cache_hit_fn27 = load ptr, ptr %.inlinecache21, align 8, !dbg !975
  br label %39, !dbg !975

39:                                               ; preds = %cache_hit26, %cache_miss24
  %fn_phi28 = phi ptr [ %cache_hit_fn27, %cache_hit26 ], [ %38, %cache_miss24 ], !dbg !975
  %40 = icmp eq ptr %fn_phi28, null, !dbg !975
  br i1 %40, label %missing_function29, label %match30, !dbg !975

missing_function29:                               ; preds = %39
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1018
  call void %41(ptr @.panic_msg.76, i64 44, ptr @.file.62, i64 16, ptr @.func.93, i64 15, i32 95), !dbg !1018
  unreachable, !dbg !1018

match30:                                          ; preds = %39
  %42 = load ptr, ptr %allocator, align 8
  %43 = load i64, ptr %new_size, align 8
  %44 = call i64 %fn_phi28(ptr %retparam, ptr %42, i64 %43, i32 0, i64 0), !dbg !1018
  %not_err = icmp eq i64 %44, 0, !dbg !1018
  %45 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1018
  br i1 %45, label %after_check, label %assign_optional, !dbg !1018

assign_optional:                                  ; preds = %match30
  store i64 %44, ptr %error_var, align 8, !dbg !1018
  br label %guard_block, !dbg !1018

after_check:                                      ; preds = %match30
  %46 = load ptr, ptr %retparam, align 8, !dbg !1018
  store ptr %46, ptr %blockret, align 8, !dbg !1018
  br label %expr_block.exit47, !dbg !1018

if.exit31:                                        ; preds = %if.exit17
  %ptradd32 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1019
  %47 = load i64, ptr %ptradd32, align 8, !dbg !1019
  %48 = inttoptr i64 %47 to ptr, !dbg !1019
  %type35 = load ptr, ptr %.cachedtype34, align 8, !dbg !975
  %49 = icmp eq ptr %48, %type35, !dbg !975
  br i1 %49, label %cache_hit38, label %cache_miss36, !dbg !975

cache_miss36:                                     ; preds = %if.exit31
  %ptradd37 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !975
  %50 = load ptr, ptr %ptradd37, align 8, !dbg !975
  %51 = call ptr @.dyn_search(ptr %50, ptr @"$sel.resize"), !dbg !975
  store ptr %51, ptr %.inlinecache33, align 8, !dbg !975
  store ptr %48, ptr %.cachedtype34, align 8, !dbg !975
  br label %52, !dbg !975

cache_hit38:                                      ; preds = %if.exit31
  %cache_hit_fn39 = load ptr, ptr %.inlinecache33, align 8, !dbg !975
  br label %52, !dbg !975

52:                                               ; preds = %cache_hit38, %cache_miss36
  %fn_phi40 = phi ptr [ %cache_hit_fn39, %cache_hit38 ], [ %51, %cache_miss36 ], !dbg !975
  %53 = icmp eq ptr %fn_phi40, null, !dbg !975
  br i1 %53, label %missing_function41, label %match42, !dbg !975

missing_function41:                               ; preds = %52
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1021
  call void %54(ptr @.panic_msg.77, i64 43, ptr @.file.62, i64 16, ptr @.func.93, i64 15, i32 96), !dbg !1021
  unreachable, !dbg !1021

match42:                                          ; preds = %52
  %55 = load ptr, ptr %allocator, align 8
  %56 = load ptr, ptr %ptr, align 8
  %57 = load i64, ptr %new_size, align 8
  %58 = call i64 %fn_phi40(ptr %retparam43, ptr %55, ptr %56, i64 %57, i64 0), !dbg !1021
  %not_err44 = icmp eq i64 %58, 0, !dbg !1021
  %59 = call i1 @llvm.expect.i1(i1 %not_err44, i1 true), !dbg !1021
  br i1 %59, label %after_check46, label %assign_optional45, !dbg !1021

assign_optional45:                                ; preds = %match42
  store i64 %58, ptr %error_var, align 8, !dbg !1021
  br label %guard_block, !dbg !1021

after_check46:                                    ; preds = %match42
  %60 = load ptr, ptr %retparam43, align 8, !dbg !1021
  store ptr %60, ptr %blockret, align 8, !dbg !1021
  br label %expr_block.exit47, !dbg !1021

expr_block.exit47:                                ; preds = %after_check46, %after_check, %expr_block.exit
  br label %noerr_block, !dbg !1021

guard_block:                                      ; preds = %assign_optional45, %assign_optional
  %61 = load i64, ptr %error_var, align 8, !dbg !1021
  ret i64 %61, !dbg !1021

noerr_block:                                      ; preds = %expr_block.exit47
  %62 = load ptr, ptr %blockret, align 8, !dbg !1021
  store ptr %62, ptr %new_ptr, align 8, !dbg !1021
  %63 = load ptr, ptr %self, align 8, !dbg !1022
  %64 = load ptr, ptr %new_ptr, align 8, !dbg !1023
  %65 = load i64, ptr %new_capacity, align 8, !dbg !1024
  %add48 = add i64 0, %65, !dbg !1024
  %size = sub i64 %add48, 0, !dbg !1024
  %66 = insertvalue %"char[]" undef, ptr %64, 0, !dbg !1024
  %67 = insertvalue %"char[]" %66, i64 %size, 1, !dbg !1024
  store %"char[]" %67, ptr %63, align 8, !dbg !1024
  ret i64 0, !dbg !1024

panic:                                            ; preds = %entry
  %68 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !977
  call void %68(ptr @.panic_msg, i64 62, ptr @.file.87, i64 13, ptr @.func.93, i64 15, i32 51), !dbg !977
  unreachable, !dbg !977
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1025 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1028
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1028
  br i1 %5, label %panic, label %checkok, !dbg !1028

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1029, metadata !DIExpression()), !dbg !1030
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1031, metadata !DIExpression()), !dbg !1032
  %6 = load ptr, ptr %self, align 8, !dbg !1033
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1033
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1033
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1034
  %8 = load i64, ptr %ptradd2, align 8, !dbg !1034
  %add = add i64 %7, %8, !dbg !1033
  %9 = load ptr, ptr %self, align 8, !dbg !1033
  %10 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %9, i64 %add) #5, !dbg !1035
  %not_err = icmp eq i64 %10, 0, !dbg !1035
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1035
  br i1 %11, label %after_check, label %assign_optional, !dbg !1035

assign_optional:                                  ; preds = %checkok
  store i64 %10, ptr %error_var, align 8, !dbg !1035
  br label %guard_block, !dbg !1035

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1035

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !1035
  ret i64 %12, !dbg !1035

noerr_block:                                      ; preds = %after_check
  %13 = load ptr, ptr %self, align 8, !dbg !1036
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !1036
  %14 = load i64, ptr %ptradd3, align 8, !dbg !1036
  %15 = load ptr, ptr %13, align 8, !dbg !1036
  %16 = load ptr, ptr %self, align 8, !dbg !1037
  %ptradd4 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1037
  %17 = load i64, ptr %ptradd4, align 8, !dbg !1037
  %ge = icmp uge i64 %17, %14, !dbg !1037
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1037
  br i1 %18, label %panic5, label %checkok8, !dbg !1037

checkok8:                                         ; preds = %noerr_block
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !1037
  store ptr %ptradd9, ptr %dst, align 8
  %19 = load ptr, ptr %bytes, align 8, !dbg !1038
  store ptr %19, ptr %src, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1039
  %20 = load i64, ptr %ptradd10, align 8
  store i64 %20, ptr %len, align 8
  %21 = load i64, ptr %len, align 8, !dbg !1040
  %eq = icmp eq i64 0, %21, !dbg !1040
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !1040

or.rhs:                                           ; preds = %checkok8
  %22 = load ptr, ptr %dst, align 8, !dbg !1044
  %23 = load i64, ptr %len, align 8, !dbg !1045
  %ptradd_any = getelementptr i8, ptr %22, i64 %23, !dbg !1045
  %24 = load ptr, ptr %src, align 8, !dbg !1046
  %le = icmp ule ptr %ptradd_any, %24, !dbg !1044
  br label %or.phi, !dbg !1044

or.phi:                                           ; preds = %or.rhs, %checkok8
  %val = phi i1 [ true, %checkok8 ], [ %le, %or.rhs ], !dbg !1044
  br i1 %val, label %or.phi14, label %or.rhs11, !dbg !1044

or.rhs11:                                         ; preds = %or.phi
  %25 = load ptr, ptr %src, align 8, !dbg !1047
  %26 = load i64, ptr %len, align 8, !dbg !1048
  %ptradd_any12 = getelementptr i8, ptr %25, i64 %26, !dbg !1048
  %27 = load ptr, ptr %dst, align 8, !dbg !1049
  %le13 = icmp ule ptr %ptradd_any12, %27, !dbg !1047
  br label %or.phi14, !dbg !1047

or.phi14:                                         ; preds = %or.rhs11, %or.phi
  %val15 = phi i1 [ true, %or.phi ], [ %le13, %or.rhs11 ], !dbg !1047
  br i1 %val15, label %assert_ok, label %assert_fail, !dbg !1047

assert_fail:                                      ; preds = %or.phi14
  %28 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1040
  call void %28(ptr @.panic_msg.84, i64 95, ptr @.file.85, i64 6, ptr @.func.63, i64 5, i32 309), !dbg !1040
  unreachable, !dbg !1040

assert_ok:                                        ; preds = %or.phi14
  %29 = load ptr, ptr %dst, align 8, !dbg !1050
  %30 = load ptr, ptr %src, align 8, !dbg !1051
  %31 = load i64, ptr %len, align 8, !dbg !1052
  call void @llvm.memcpy.p0.p0.i64(ptr %29, ptr %30, i64 %31, i1 false), !dbg !1053
  %32 = load ptr, ptr %self, align 8, !dbg !1054
  %ptradd16 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !1054
  %33 = load i64, ptr %ptradd16, align 8, !dbg !1054
  %ptradd17 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1055
  %34 = load i64, ptr %ptradd17, align 8, !dbg !1055
  %add18 = add i64 %33, %34, !dbg !1054
  store i64 %add18, ptr %ptradd16, align 8, !dbg !1054
  %ptradd19 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1056
  %35 = load i64, ptr %ptradd19, align 8, !dbg !1056
  store i64 %35, ptr %0, align 8, !dbg !1056
  ret i64 0, !dbg !1056

panic:                                            ; preds = %entry
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1030
  call void %36(ptr @.panic_msg, i64 62, ptr @.file.87, i64 13, ptr @.func.63, i64 5, i32 61), !dbg !1030
  unreachable, !dbg !1030

panic5:                                           ; preds = %noerr_block
  store i64 %14, ptr %taddr, align 8
  %37 = insertvalue %any undef, ptr %taddr, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr6, align 8
  %39 = insertvalue %any undef, ptr %taddr6, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %38, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %40, ptr %ptradd7, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.87, i64 13, ptr @.func.63, i64 5, i32 64, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1037
  unreachable, !dbg !1037
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !1057 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1060
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1060
  br i1 %3, label %panic, label %checkok, !dbg !1060

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1061, metadata !DIExpression()), !dbg !1062
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1063, metadata !DIExpression()), !dbg !1064
  %4 = load ptr, ptr %self, align 8, !dbg !1065
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !1065
  %5 = load i64, ptr %ptradd, align 8, !dbg !1065
  %add = add i64 %5, 1, !dbg !1065
  %6 = load ptr, ptr %self, align 8, !dbg !1065
  %7 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %6, i64 %add) #5, !dbg !1066
  %not_err = icmp eq i64 %7, 0, !dbg !1066
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1066
  br i1 %8, label %after_check, label %assign_optional, !dbg !1066

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !1066
  br label %guard_block, !dbg !1066

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1066

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !1066
  ret i64 %9, !dbg !1066

noerr_block:                                      ; preds = %after_check
  %10 = load ptr, ptr %self, align 8, !dbg !1067
  %ptradd1 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1067
  %11 = load i64, ptr %ptradd1, align 8, !dbg !1067
  %12 = load ptr, ptr %10, align 8, !dbg !1067
  %13 = load ptr, ptr %self, align 8, !dbg !1068
  %ptradd2 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1068
  %14 = load i64, ptr %ptradd2, align 8, !dbg !1068
  %add3 = add i64 %14, 1, !dbg !1068
  store i64 %add3, ptr %ptradd2, align 8, !dbg !1068
  %ge = icmp uge i64 %14, %11, !dbg !1068
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1068
  br i1 %15, label %panic4, label %checkok7, !dbg !1068

checkok7:                                         ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !1068
  %16 = load i8, ptr %c, align 1, !dbg !1069
  store i8 %16, ptr %ptradd8, align 1, !dbg !1069
  ret i64 0, !dbg !1069

panic:                                            ; preds = %entry
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1062
  call void %17(ptr @.panic_msg, i64 62, ptr @.file.87, i64 13, ptr @.func.66, i64 10, i32 69), !dbg !1062
  unreachable, !dbg !1062

panic4:                                           ; preds = %noerr_block
  store i64 %11, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr5, align 8
  %20 = insertvalue %any undef, ptr %taddr5, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %19, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd6, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.87, i64 13, ptr @.func.66, i64 10, i32 72, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1068
  unreachable, !dbg !1068
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ByteWriter.read_from(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !1070 {
entry:
  %self = alloca ptr, align 8
  %reader = alloca %any, align 8
  %start_index = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %available = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %error_var13 = alloca i64, align 8
  %read = alloca i64, align 8
  %error_var20 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %.inlinecache28 = alloca ptr, align 8
  %.cachedtype29 = alloca ptr, align 8
  %retparam38 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %error_var49 = alloca i64, align 8
  %len_to_read = alloca i64, align 8
  %error_var62 = alloca i64, align 8
  %read73 = alloca i64, align 8
  %error_var74 = alloca i64, align 8
  %taddr78 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %varargslots80 = alloca [2 x %any], align 16
  %indirectarg83 = alloca %"any[]", align 8
  %.inlinecache88 = alloca ptr, align 8
  %.cachedtype89 = alloca ptr, align 8
  %retparam98 = alloca i64, align 8
  %reterr107 = alloca i64, align 8
  store ptr null, ptr %.cachedtype89, align 8, !dbg !1073
  store ptr null, ptr %.cachedtype29, align 8, !dbg !1073
  store ptr null, ptr %.cachedtype6, align 8, !dbg !1073
  store ptr null, ptr %.cachedtype, align 8, !dbg !1073
  %4 = icmp eq ptr %1, null, !dbg !1073
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1073
  br i1 %5, label %panic, label %checkok, !dbg !1073

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1074, metadata !DIExpression()), !dbg !1075
  store i64 %2, ptr %reader, align 8
  %ptradd = getelementptr inbounds i8, ptr %reader, i64 8
  store ptr %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %reader, metadata !1076, metadata !DIExpression()), !dbg !1077
  call void @llvm.dbg.declare(metadata ptr %start_index, metadata !1078, metadata !DIExpression()), !dbg !1079
  %6 = load ptr, ptr %self, align 8, !dbg !1080
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1080
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1080
  store i64 %7, ptr %start_index, align 8, !dbg !1080
  %ptradd2 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !1081
  %8 = load i64, ptr %ptradd2, align 8, !dbg !1081
  %9 = inttoptr i64 %8 to ptr, !dbg !1081
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1073
  %10 = icmp eq ptr %9, %type, !dbg !1073
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !1073

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1073
  %11 = load ptr, ptr %ptradd3, align 8, !dbg !1073
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.available"), !dbg !1073
  store ptr %12, ptr %.inlinecache, align 8, !dbg !1073
  store ptr %9, ptr %.cachedtype, align 8, !dbg !1073
  br label %13, !dbg !1073

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1073
  br label %13, !dbg !1073

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !1073
  %ptrbool = icmp ne ptr %fn_phi, null, !dbg !1073
  br i1 %ptrbool, label %if.then, label %if.exit, !dbg !1073

if.then:                                          ; preds = %13
  br label %loop.cond, !dbg !1082

loop.cond:                                        ; preds = %noerr_block43, %if.then
  call void @llvm.dbg.declare(metadata ptr %available, metadata !1084, metadata !DIExpression()), !dbg !1086
  %ptradd4 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !1087
  %14 = load i64, ptr %ptradd4, align 8, !dbg !1087
  %15 = inttoptr i64 %14 to ptr, !dbg !1087
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !1073
  %16 = icmp eq ptr %15, %type7, !dbg !1073
  br i1 %16, label %cache_hit10, label %cache_miss8, !dbg !1073

cache_miss8:                                      ; preds = %loop.cond
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1073
  %17 = load ptr, ptr %ptradd9, align 8, !dbg !1073
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.available"), !dbg !1073
  store ptr %18, ptr %.inlinecache5, align 8, !dbg !1073
  store ptr %15, ptr %.cachedtype6, align 8, !dbg !1073
  br label %19, !dbg !1073

cache_hit10:                                      ; preds = %loop.cond
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !1073
  br label %19, !dbg !1073

19:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %18, %cache_miss8 ], !dbg !1073
  %20 = icmp eq ptr %fn_phi12, null, !dbg !1073
  br i1 %20, label %missing_function, label %match, !dbg !1073

missing_function:                                 ; preds = %19
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1087
  call void %21(ptr @.panic_msg.95, i64 46, ptr @.file.87, i64 13, ptr @.func.94, i64 9, i32 84), !dbg !1087
  unreachable, !dbg !1087

match:                                            ; preds = %19
  %22 = load ptr, ptr %reader, align 8
  %23 = call i64 %fn_phi12(ptr %retparam, ptr %22), !dbg !1087
  %not_err = icmp eq i64 %23, 0, !dbg !1087
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1087
  br i1 %24, label %after_check, label %assign_optional, !dbg !1087

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !1087
  br label %guard_block, !dbg !1087

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1087

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !1087
  ret i64 %25, !dbg !1087

noerr_block:                                      ; preds = %after_check
  %26 = load i64, ptr %retparam, align 8, !dbg !1087
  store i64 %26, ptr %available, align 8, !dbg !1087
  %27 = load i64, ptr %available, align 8, !dbg !1087
  %intbool = icmp ne i64 %27, 0, !dbg !1087
  br i1 %intbool, label %loop.body, label %loop.exit, !dbg !1087

loop.body:                                        ; preds = %noerr_block
  %28 = load ptr, ptr %self, align 8, !dbg !1088
  %ptradd14 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !1088
  %29 = load i64, ptr %ptradd14, align 8, !dbg !1088
  %30 = load i64, ptr %available, align 8, !dbg !1090
  %add = add i64 %29, %30, !dbg !1088
  %31 = load ptr, ptr %self, align 8, !dbg !1088
  %32 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %31, i64 %add) #5, !dbg !1091
  %not_err15 = icmp eq i64 %32, 0, !dbg !1091
  %33 = call i1 @llvm.expect.i1(i1 %not_err15, i1 true), !dbg !1091
  br i1 %33, label %after_check17, label %assign_optional16, !dbg !1091

assign_optional16:                                ; preds = %loop.body
  store i64 %32, ptr %error_var13, align 8, !dbg !1091
  br label %guard_block18, !dbg !1091

after_check17:                                    ; preds = %loop.body
  br label %noerr_block19, !dbg !1091

guard_block18:                                    ; preds = %assign_optional16
  %34 = load i64, ptr %error_var13, align 8, !dbg !1091
  ret i64 %34, !dbg !1091

noerr_block19:                                    ; preds = %after_check17
  call void @llvm.dbg.declare(metadata ptr %read, metadata !1092, metadata !DIExpression()), !dbg !1093
  %35 = load ptr, ptr %self, align 8, !dbg !1094
  %36 = load %"char[]", ptr %35, align 8, !dbg !1094
  %37 = extractvalue %"char[]" %36, 0, !dbg !1094
  %38 = load ptr, ptr %self, align 8, !dbg !1095
  %ptradd21 = getelementptr inbounds i8, ptr %38, i64 16, !dbg !1095
  %39 = load i64, ptr %ptradd21, align 8, !dbg !1095
  %40 = extractvalue %"char[]" %36, 1, !dbg !1095
  %gt = icmp ugt i64 %39, %40, !dbg !1095
  %41 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1095
  br i1 %41, label %panic22, label %checkok25, !dbg !1095

checkok25:                                        ; preds = %noerr_block19
  %size = sub i64 %40, %39, !dbg !1094
  %ptradd26 = getelementptr inbounds i8, ptr %37, i64 %39, !dbg !1094
  %42 = insertvalue %"char[]" undef, ptr %ptradd26, 0, !dbg !1094
  %43 = insertvalue %"char[]" %42, i64 %size, 1, !dbg !1094
  %ptradd27 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !1094
  %44 = load i64, ptr %ptradd27, align 8, !dbg !1094
  %45 = inttoptr i64 %44 to ptr, !dbg !1094
  %type30 = load ptr, ptr %.cachedtype29, align 8, !dbg !1073
  %46 = icmp eq ptr %45, %type30, !dbg !1073
  br i1 %46, label %cache_hit33, label %cache_miss31, !dbg !1073

cache_miss31:                                     ; preds = %checkok25
  %ptradd32 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !1073
  %47 = load ptr, ptr %ptradd32, align 8, !dbg !1073
  %48 = call ptr @.dyn_search(ptr %47, ptr @"$sel.read"), !dbg !1073
  store ptr %48, ptr %.inlinecache28, align 8, !dbg !1073
  store ptr %45, ptr %.cachedtype29, align 8, !dbg !1073
  br label %49, !dbg !1073

cache_hit33:                                      ; preds = %checkok25
  %cache_hit_fn34 = load ptr, ptr %.inlinecache28, align 8, !dbg !1073
  br label %49, !dbg !1073

49:                                               ; preds = %cache_hit33, %cache_miss31
  %fn_phi35 = phi ptr [ %cache_hit_fn34, %cache_hit33 ], [ %48, %cache_miss31 ], !dbg !1073
  %50 = icmp eq ptr %fn_phi35, null, !dbg !1073
  br i1 %50, label %missing_function36, label %match37, !dbg !1073

missing_function36:                               ; preds = %49
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1096
  call void %51(ptr @.panic_msg.81, i64 41, ptr @.file.87, i64 13, ptr @.func.94, i64 9, i32 87), !dbg !1096
  unreachable, !dbg !1096

match37:                                          ; preds = %49
  %52 = load ptr, ptr %reader, align 8
  %53 = call i64 %fn_phi35(ptr %retparam38, ptr %52, ptr %ptradd26, i64 %size), !dbg !1096
  %not_err39 = icmp eq i64 %53, 0, !dbg !1096
  %54 = call i1 @llvm.expect.i1(i1 %not_err39, i1 true), !dbg !1096
  br i1 %54, label %after_check41, label %assign_optional40, !dbg !1096

assign_optional40:                                ; preds = %match37
  store i64 %53, ptr %error_var20, align 8, !dbg !1096
  br label %guard_block42, !dbg !1096

after_check41:                                    ; preds = %match37
  br label %noerr_block43, !dbg !1096

guard_block42:                                    ; preds = %assign_optional40
  %55 = load i64, ptr %error_var20, align 8, !dbg !1096
  ret i64 %55, !dbg !1096

noerr_block43:                                    ; preds = %after_check41
  %56 = load i64, ptr %retparam38, align 8, !dbg !1096
  store i64 %56, ptr %read, align 8, !dbg !1096
  %57 = load ptr, ptr %self, align 8, !dbg !1097
  %ptradd44 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !1097
  %58 = load i64, ptr %ptradd44, align 8, !dbg !1097
  %59 = load i64, ptr %read, align 8, !dbg !1098
  %add45 = add i64 %58, %59, !dbg !1097
  store i64 %add45, ptr %ptradd44, align 8, !dbg !1097
  br label %loop.cond, !dbg !1097

loop.exit:                                        ; preds = %noerr_block
  %60 = load ptr, ptr %self, align 8, !dbg !1099
  %ptradd46 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !1099
  %61 = load i64, ptr %ptradd46, align 8, !dbg !1099
  %62 = load i64, ptr %start_index, align 8, !dbg !1100
  %sub = sub i64 %61, %62, !dbg !1099
  store i64 %sub, ptr %0, align 8, !dbg !1099
  ret i64 0, !dbg !1099

if.exit:                                          ; preds = %13
  %63 = load ptr, ptr %self, align 8, !dbg !1101
  %ptradd47 = getelementptr inbounds i8, ptr %63, i64 8, !dbg !1101
  %64 = load i64, ptr %ptradd47, align 8, !dbg !1101
  %eq = icmp eq i64 0, %64, !dbg !1101
  br i1 %eq, label %if.then48, label %if.exit55, !dbg !1101

if.then48:                                        ; preds = %if.exit
  %65 = load ptr, ptr %self, align 8, !dbg !1102
  %66 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %65, i64 16) #5, !dbg !1104
  %not_err50 = icmp eq i64 %66, 0, !dbg !1104
  %67 = call i1 @llvm.expect.i1(i1 %not_err50, i1 true), !dbg !1104
  br i1 %67, label %after_check52, label %assign_optional51, !dbg !1104

assign_optional51:                                ; preds = %if.then48
  store i64 %66, ptr %error_var49, align 8, !dbg !1104
  br label %guard_block53, !dbg !1104

after_check52:                                    ; preds = %if.then48
  br label %noerr_block54, !dbg !1104

guard_block53:                                    ; preds = %assign_optional51
  %68 = load i64, ptr %error_var49, align 8, !dbg !1104
  ret i64 %68, !dbg !1104

noerr_block54:                                    ; preds = %after_check52
  br label %if.exit55, !dbg !1104

if.exit55:                                        ; preds = %noerr_block54, %if.exit
  br label %loop.body56, !dbg !1105

loop.body56:                                      ; preds = %if.exit110, %if.exit55
  call void @llvm.dbg.declare(metadata ptr %len_to_read, metadata !1106, metadata !DIExpression()), !dbg !1109
  %69 = load ptr, ptr %self, align 8, !dbg !1110
  %ptradd57 = getelementptr inbounds i8, ptr %69, i64 8, !dbg !1110
  %70 = load i64, ptr %ptradd57, align 8, !dbg !1110
  %71 = load ptr, ptr %self, align 8, !dbg !1111
  %ptradd58 = getelementptr inbounds i8, ptr %71, i64 16, !dbg !1111
  %72 = load i64, ptr %ptradd58, align 8, !dbg !1111
  %sub59 = sub i64 %70, %72, !dbg !1110
  store i64 %sub59, ptr %len_to_read, align 8, !dbg !1110
  %73 = load i64, ptr %len_to_read, align 8, !dbg !1112
  %gt60 = icmp ugt i64 16, %73, !dbg !1112
  br i1 %gt60, label %if.then61, label %if.exit72, !dbg !1112

if.then61:                                        ; preds = %loop.body56
  %74 = load ptr, ptr %self, align 8, !dbg !1113
  %ptradd63 = getelementptr inbounds i8, ptr %74, i64 8, !dbg !1113
  %75 = load i64, ptr %ptradd63, align 8, !dbg !1113
  %mul = mul i64 %75, 2, !dbg !1113
  %76 = load ptr, ptr %self, align 8, !dbg !1113
  %77 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %76, i64 %mul) #5, !dbg !1115
  %not_err64 = icmp eq i64 %77, 0, !dbg !1115
  %78 = call i1 @llvm.expect.i1(i1 %not_err64, i1 true), !dbg !1115
  br i1 %78, label %after_check66, label %assign_optional65, !dbg !1115

assign_optional65:                                ; preds = %if.then61
  store i64 %77, ptr %error_var62, align 8, !dbg !1115
  br label %guard_block67, !dbg !1115

after_check66:                                    ; preds = %if.then61
  br label %noerr_block68, !dbg !1115

guard_block67:                                    ; preds = %assign_optional65
  %79 = load i64, ptr %error_var62, align 8, !dbg !1115
  ret i64 %79, !dbg !1115

noerr_block68:                                    ; preds = %after_check66
  %80 = load ptr, ptr %self, align 8, !dbg !1116
  %ptradd69 = getelementptr inbounds i8, ptr %80, i64 8, !dbg !1116
  %81 = load i64, ptr %ptradd69, align 8, !dbg !1116
  %82 = load ptr, ptr %self, align 8, !dbg !1117
  %ptradd70 = getelementptr inbounds i8, ptr %82, i64 16, !dbg !1117
  %83 = load i64, ptr %ptradd70, align 8, !dbg !1117
  %sub71 = sub i64 %81, %83, !dbg !1116
  store i64 %sub71, ptr %len_to_read, align 8, !dbg !1116
  br label %if.exit72, !dbg !1116

if.exit72:                                        ; preds = %noerr_block68, %loop.body56
  call void @llvm.dbg.declare(metadata ptr %read73, metadata !1118, metadata !DIExpression()), !dbg !1119
  %84 = load ptr, ptr %self, align 8, !dbg !1120
  %85 = load %"char[]", ptr %84, align 8, !dbg !1120
  %86 = extractvalue %"char[]" %85, 0, !dbg !1120
  %87 = load ptr, ptr %self, align 8, !dbg !1121
  %ptradd75 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !1121
  %88 = load i64, ptr %ptradd75, align 8, !dbg !1121
  %89 = extractvalue %"char[]" %85, 1, !dbg !1121
  %gt76 = icmp ugt i64 %88, %89, !dbg !1121
  %90 = call i1 @llvm.expect.i1(i1 %gt76, i1 false), !dbg !1121
  br i1 %90, label %panic77, label %checkok84, !dbg !1121

checkok84:                                        ; preds = %if.exit72
  %size85 = sub i64 %89, %88, !dbg !1120
  %ptradd86 = getelementptr inbounds i8, ptr %86, i64 %88, !dbg !1120
  %91 = insertvalue %"char[]" undef, ptr %ptradd86, 0, !dbg !1120
  %92 = insertvalue %"char[]" %91, i64 %size85, 1, !dbg !1120
  %ptradd87 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !1120
  %93 = load i64, ptr %ptradd87, align 8, !dbg !1120
  %94 = inttoptr i64 %93 to ptr, !dbg !1120
  %type90 = load ptr, ptr %.cachedtype89, align 8, !dbg !1073
  %95 = icmp eq ptr %94, %type90, !dbg !1073
  br i1 %95, label %cache_hit93, label %cache_miss91, !dbg !1073

cache_miss91:                                     ; preds = %checkok84
  %ptradd92 = getelementptr inbounds i8, ptr %94, i64 16, !dbg !1073
  %96 = load ptr, ptr %ptradd92, align 8, !dbg !1073
  %97 = call ptr @.dyn_search(ptr %96, ptr @"$sel.read"), !dbg !1073
  store ptr %97, ptr %.inlinecache88, align 8, !dbg !1073
  store ptr %94, ptr %.cachedtype89, align 8, !dbg !1073
  br label %98, !dbg !1073

cache_hit93:                                      ; preds = %checkok84
  %cache_hit_fn94 = load ptr, ptr %.inlinecache88, align 8, !dbg !1073
  br label %98, !dbg !1073

98:                                               ; preds = %cache_hit93, %cache_miss91
  %fn_phi95 = phi ptr [ %cache_hit_fn94, %cache_hit93 ], [ %97, %cache_miss91 ], !dbg !1073
  %99 = icmp eq ptr %fn_phi95, null, !dbg !1073
  br i1 %99, label %missing_function96, label %match97, !dbg !1073

missing_function96:                               ; preds = %98
  %100 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1122
  call void %100(ptr @.panic_msg.81, i64 41, ptr @.file.87, i64 13, ptr @.func.94, i64 9, i32 107), !dbg !1122
  unreachable, !dbg !1122

match97:                                          ; preds = %98
  %101 = load ptr, ptr %reader, align 8
  %102 = call i64 %fn_phi95(ptr %retparam98, ptr %101, ptr %ptradd86, i64 %size85), !dbg !1122
  %not_err99 = icmp eq i64 %102, 0, !dbg !1122
  %103 = call i1 @llvm.expect.i1(i1 %not_err99, i1 true), !dbg !1122
  br i1 %103, label %after_check101, label %assign_optional100, !dbg !1122

assign_optional100:                               ; preds = %match97
  store i64 %102, ptr %error_var74, align 8, !dbg !1122
  br label %guard_block102, !dbg !1122

after_check101:                                   ; preds = %match97
  br label %noerr_block103, !dbg !1122

guard_block102:                                   ; preds = %assign_optional100
  %104 = load i64, ptr %error_var74, align 8, !dbg !1122
  ret i64 %104, !dbg !1122

noerr_block103:                                   ; preds = %after_check101
  %105 = load i64, ptr %retparam98, align 8, !dbg !1122
  store i64 %105, ptr %read73, align 8, !dbg !1122
  %106 = load ptr, ptr %self, align 8, !dbg !1123
  %ptradd104 = getelementptr inbounds i8, ptr %106, i64 16, !dbg !1123
  %107 = load i64, ptr %ptradd104, align 8, !dbg !1123
  %108 = load i64, ptr %read73, align 8, !dbg !1124
  %add105 = add i64 %107, %108, !dbg !1123
  store i64 %add105, ptr %ptradd104, align 8, !dbg !1123
  %109 = load i64, ptr %read73, align 8, !dbg !1125
  %110 = load i64, ptr %len_to_read, align 8, !dbg !1126
  %lt = icmp ult i64 %109, %110, !dbg !1125
  br i1 %lt, label %if.then106, label %if.exit110, !dbg !1125

if.then106:                                       ; preds = %noerr_block103
  %111 = load ptr, ptr %self, align 8, !dbg !1127
  %ptradd108 = getelementptr inbounds i8, ptr %111, i64 16, !dbg !1127
  %112 = load i64, ptr %ptradd108, align 8, !dbg !1127
  %113 = load i64, ptr %start_index, align 8, !dbg !1128
  %sub109 = sub i64 %112, %113, !dbg !1127
  store i64 %sub109, ptr %0, align 8, !dbg !1127
  ret i64 0, !dbg !1127

if.exit110:                                       ; preds = %noerr_block103
  br label %loop.body56, !dbg !1127

panic:                                            ; preds = %entry
  %114 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1075
  call void %114(ptr @.panic_msg, i64 62, ptr @.file.87, i64 13, ptr @.func.94, i64 9, i32 79), !dbg !1075
  unreachable, !dbg !1075

panic22:                                          ; preds = %noerr_block19
  store i64 %40, ptr %taddr, align 8
  %115 = insertvalue %any undef, ptr %taddr, 0
  %116 = insertvalue %any %115, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr23, align 8
  %117 = insertvalue %any undef, ptr %taddr23, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %116, ptr %varargslots, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %118, ptr %ptradd24, align 16
  %119 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %119, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.87, i64 13, ptr @.func.94, i64 9, i32 87, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1094
  unreachable, !dbg !1094

panic77:                                          ; preds = %if.exit72
  store i64 %89, ptr %taddr78, align 8
  %120 = insertvalue %any undef, ptr %taddr78, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %88, ptr %taddr79, align 8
  %122 = insertvalue %any undef, ptr %taddr79, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %121, ptr %varargslots80, align 16
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %123, ptr %ptradd81, align 16
  %124 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %124, i64 2, 1
  store %"any[]" %"$$temp82", ptr %indirectarg83, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.87, i64 13, ptr @.func.94, i64 9, i32 107, ptr byval(%"any[]") align 8 %indirectarg83), !dbg !1120
  unreachable, !dbg !1120
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.Scanner.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !1129 {
entry:
  %self = alloca ptr, align 8
  %stream = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %.assign_list = alloca %Scanner, align 8
  %5 = icmp eq ptr %0, null, !dbg !1140
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1140
  br i1 %6, label %panic, label %checkok, !dbg !1140

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1141, metadata !DIExpression()), !dbg !1142
  store i64 %1, ptr %stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %stream, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %stream, metadata !1143, metadata !DIExpression()), !dbg !1144
  store ptr %3, ptr %buffer, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %buffer, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !1145, metadata !DIExpression()), !dbg !1146
  %ptradd2 = getelementptr inbounds i8, ptr %buffer, i64 8, !dbg !1147
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1147
  %lt = icmp ult i64 0, %7, !dbg !1147
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1147

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1147
  call void %8(ptr @.panic_msg.97, i64 65, ptr @.file.96, i64 10, ptr @.func, i64 4, i32 17), !dbg !1147
  unreachable, !dbg !1147

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1149
  %checknull = icmp eq ptr %9, null, !dbg !1149
  %10 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1149
  br i1 %10, label %panic3, label %checkok4, !dbg !1149

checkok4:                                         ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %stream, i32 16, i1 false), !dbg !1150
  %ptradd5 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !1150
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd5, ptr align 8 %buffer, i32 16, i1 false), !dbg !1151
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %9, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !1151
  ret void, !dbg !1151

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1142
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.96, i64 10, ptr @.func, i64 4, i32 19), !dbg !1142
  unreachable, !dbg !1142

panic3:                                           ; preds = %assert_ok
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1149
  call void %12(ptr @.panic_msg.36, i64 45, ptr @.file.96, i64 10, ptr @.func, i64 4, i32 21), !dbg !1149
  unreachable, !dbg !1149
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.Scanner.flush(ptr %0) #0 comdat !dbg !1152 {
entry:
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %buf = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1155
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1155
  br i1 %2, label %panic, label %checkok, !dbg !1155

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1156, metadata !DIExpression()), !dbg !1157
  %3 = load ptr, ptr %self, align 8, !dbg !1158
  %ptradd = getelementptr inbounds i8, ptr %3, i64 40, !dbg !1158
  %4 = load i64, ptr %ptradd, align 8, !dbg !1158
  %5 = load ptr, ptr %self, align 8, !dbg !1159
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 32, !dbg !1159
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1159
  %ge = icmp uge i64 %4, %6, !dbg !1158
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !1158

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1158
  call void %7(ptr @.panic_msg.72, i64 16, ptr @.file.96, i64 10, ptr @.func.43, i64 5, i32 30), !dbg !1158
  unreachable, !dbg !1158

assert_ok:                                        ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1160, metadata !DIExpression()), !dbg !1161
  %8 = load ptr, ptr %self, align 8, !dbg !1162
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !1162
  %9 = load i64, ptr %ptradd2, align 8, !dbg !1162
  %10 = load ptr, ptr %self, align 8, !dbg !1163
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 32, !dbg !1163
  %11 = load i64, ptr %ptradd3, align 8, !dbg !1163
  %sub = sub i64 %9, %11, !dbg !1162
  store i64 %sub, ptr %n, align 8, !dbg !1162
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !1164, metadata !DIExpression()), !dbg !1165
  %12 = load ptr, ptr %self, align 8, !dbg !1166
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1166
  %13 = load %"char[]", ptr %ptradd4, align 8, !dbg !1166
  %14 = extractvalue %"char[]" %13, 0, !dbg !1166
  %15 = load ptr, ptr %self, align 8, !dbg !1167
  %ptradd5 = getelementptr inbounds i8, ptr %15, i64 32, !dbg !1167
  %16 = load i64, ptr %ptradd5, align 8, !dbg !1167
  %17 = extractvalue %"char[]" %13, 1, !dbg !1167
  %gt = icmp ugt i64 %16, %17, !dbg !1167
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1167
  br i1 %18, label %panic6, label %checkok9, !dbg !1167

checkok9:                                         ; preds = %assert_ok
  %19 = load i64, ptr %n, align 8, !dbg !1168
  %add = add i64 %16, %19, !dbg !1168
  %lt = icmp ult i64 %17, %add, !dbg !1168
  %sub10 = sub i64 %add, 1, !dbg !1168
  %20 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1168
  br i1 %20, label %panic11, label %checkok18, !dbg !1168

checkok18:                                        ; preds = %checkok9
  %size = sub i64 %add, %16, !dbg !1166
  %ptradd19 = getelementptr inbounds i8, ptr %14, i64 %16, !dbg !1166
  %21 = insertvalue %"char[]" undef, ptr %ptradd19, 0, !dbg !1166
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !1166
  store %"char[]" %22, ptr %buf, align 8, !dbg !1166
  %23 = load ptr, ptr %self, align 8, !dbg !1169
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !1169
  store i64 0, ptr %ptradd20, align 8, !dbg !1170
  %24 = load ptr, ptr %self, align 8, !dbg !1171
  %ptradd21 = getelementptr inbounds i8, ptr %24, i64 40, !dbg !1171
  store i64 0, ptr %ptradd21, align 8, !dbg !1172
  %25 = load { ptr, i64 }, ptr %buf, align 8, !dbg !1173
  ret { ptr, i64 } %25, !dbg !1173

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1157
  call void %26(ptr @.panic_msg, i64 62, ptr @.file.96, i64 10, ptr @.func.43, i64 5, i32 28), !dbg !1157
  unreachable, !dbg !1157

panic6:                                           ; preds = %assert_ok
  store i64 %17, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr7, align 8
  %29 = insertvalue %any undef, ptr %taddr7, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd8, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.43, i64 5, i32 32, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1166
  unreachable, !dbg !1166

panic11:                                          ; preds = %checkok9
  store i64 %sub10, ptr %taddr12, align 8
  %32 = insertvalue %any undef, ptr %taddr12, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr13, align 8
  %34 = insertvalue %any undef, ptr %taddr13, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %33, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %35, ptr %ptradd15, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %36, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.96, i64 10, ptr @.func.43, i64 5, i32 32, ptr byval(%"any[]") align 8 %indirectarg17), !dbg !1166
  unreachable, !dbg !1166
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.close(ptr %0) #0 comdat !dbg !1174 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !1177
  store ptr null, ptr %.cachedtype, align 8, !dbg !1177
  %1 = icmp eq ptr %0, null, !dbg !1177
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1177
  br i1 %2, label %panic, label %checkok, !dbg !1177

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1178, metadata !DIExpression()), !dbg !1179
  %3 = load ptr, ptr %self, align 8, !dbg !1180
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !1180
  %4 = load i64, ptr %ptradd, align 8, !dbg !1180
  %5 = inttoptr i64 %4 to ptr, !dbg !1180
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1177
  %6 = icmp eq ptr %5, %type, !dbg !1177
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !1177

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1177
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !1177
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !1177
  store ptr %8, ptr %.inlinecache, align 8, !dbg !1177
  store ptr %5, ptr %.cachedtype, align 8, !dbg !1177
  br label %9, !dbg !1177

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1177
  br label %9, !dbg !1177

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !1177
  %ptrbool = icmp ne ptr %fn_phi, null, !dbg !1177
  br i1 %ptrbool, label %if.then, label %if.exit, !dbg !1177

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !1181
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1181
  %11 = load i64, ptr %ptradd2, align 8, !dbg !1181
  %12 = inttoptr i64 %11 to ptr, !dbg !1181
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !1177
  %13 = icmp eq ptr %12, %type5, !dbg !1177
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !1177

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1177
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !1177
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !1177
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !1177
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !1177
  br label %16, !dbg !1177

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !1177
  br label %16, !dbg !1177

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !1177
  %17 = icmp eq ptr %fn_phi10, null, !dbg !1177
  br i1 %17, label %missing_function, label %match, !dbg !1177

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1181
  call void %18(ptr @.panic_msg.80, i64 42, ptr @.file.96, i64 10, ptr @.func.79, i64 5, i32 40), !dbg !1181
  unreachable, !dbg !1181

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !1181
  %20 = call i64 %fn_phi10(ptr %19), !dbg !1181
  %not_err = icmp eq i64 %20, 0, !dbg !1181
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1181
  br i1 %21, label %after_check, label %assign_optional, !dbg !1181

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !1181
  br label %err_retblock, !dbg !1181

after_check:                                      ; preds = %match
  ret i64 0, !dbg !1181

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !1181
  ret i64 %22, !dbg !1181

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !1181

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1179
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.96, i64 10, ptr @.func.79, i64 5, i32 38), !dbg !1179
  unreachable, !dbg !1179
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.scan(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1182 {
entry:
  %self = alloca ptr, align 8
  %pattern = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %self9 = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %n25 = alloca i64, align 8
  %buf28 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %i = alloca i64, align 8
  %self47 = alloca ptr, align 8
  %buf48 = alloca %"char[]", align 8
  %pattern49 = alloca %"char[]", align 8
  %retparam50 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %taddr77 = alloca i64, align 8
  %taddr78 = alloca i64, align 8
  %varargslots79 = alloca [2 x %any], align 16
  %indirectarg82 = alloca %"any[]", align 8
  %taddr97 = alloca i64, align 8
  %taddr98 = alloca i64, align 8
  %varargslots99 = alloca [2 x %any], align 16
  %indirectarg102 = alloca %"any[]", align 8
  %taddr108 = alloca i64, align 8
  %taddr109 = alloca i64, align 8
  %varargslots110 = alloca [2 x %any], align 16
  %indirectarg113 = alloca %"any[]", align 8
  %taddr119 = alloca i64, align 8
  %taddr120 = alloca i64, align 8
  %varargslots121 = alloca [2 x %any], align 16
  %indirectarg124 = alloca %"any[]", align 8
  %taddr127 = alloca %"char[]", align 8
  %taddr129 = alloca %"char[]", align 8
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %varargslots135 = alloca [2 x %any], align 16
  %indirectarg138 = alloca %"any[]", align 8
  %taddr144 = alloca i64, align 8
  %taddr145 = alloca i64, align 8
  %varargslots146 = alloca [2 x %any], align 16
  %indirectarg149 = alloca %"any[]", align 8
  %p = alloca i64, align 8
  %error_var153 = alloca i64, align 8
  %self154 = alloca ptr, align 8
  %buf155 = alloca %"char[]", align 8
  %n156 = alloca i64, align 8
  %n.f157 = alloca i64, align 8
  %.inlinecache159 = alloca ptr, align 8
  %.cachedtype160 = alloca ptr, align 8
  %retparam169 = alloca i64, align 8
  %err177 = alloca i64, align 8
  %switch186 = alloca i64, align 8
  %taddr199 = alloca i64, align 8
  %taddr200 = alloca i64, align 8
  %varargslots201 = alloca [2 x %any], align 16
  %indirectarg204 = alloca %"any[]", align 8
  %taddr210 = alloca i64, align 8
  %taddr211 = alloca i64, align 8
  %varargslots212 = alloca [2 x %any], align 16
  %indirectarg215 = alloca %"any[]", align 8
  %i218 = alloca i64, align 8
  %error_var219 = alloca i64, align 8
  %self220 = alloca ptr, align 8
  %buf221 = alloca %"char[]", align 8
  %pattern222 = alloca %"char[]", align 8
  %retparam223 = alloca i64, align 8
  %reterr239 = alloca i64, align 8
  %taddr243 = alloca i64, align 8
  %taddr244 = alloca i64, align 8
  %varargslots245 = alloca [2 x %any], align 16
  %indirectarg248 = alloca %"any[]", align 8
  %taddr255 = alloca i64, align 8
  %taddr256 = alloca i64, align 8
  %varargslots257 = alloca [2 x %any], align 16
  %indirectarg260 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype160, align 8, !dbg !1186
  store ptr null, ptr %.cachedtype, align 8, !dbg !1186
  %4 = icmp eq ptr %1, null, !dbg !1186
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1186
  br i1 %5, label %panic, label %checkok, !dbg !1186

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1187, metadata !DIExpression()), !dbg !1188
  store ptr %2, ptr %pattern, align 8
  %ptradd = getelementptr inbounds i8, ptr %pattern, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %pattern, metadata !1189, metadata !DIExpression()), !dbg !1190
  %ptradd1 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1191
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1191
  %lt = icmp ult i64 0, %6, !dbg !1191
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1191

assert_fail:                                      ; preds = %checkok
  %7 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1191
  call void %7(ptr @.panic_msg.99, i64 67, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 45), !dbg !1191
  unreachable, !dbg !1191

assert_ok:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1193
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1193
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !1193
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1193
  %ptradd4 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1194
  %10 = load i64, ptr %ptradd4, align 8, !dbg !1194
  %gt = icmp ugt i64 %9, %10, !dbg !1193
  br i1 %gt, label %assert_ok6, label %assert_fail5, !dbg !1193

assert_fail5:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1193
  call void %11(ptr @.panic_msg.100, i64 69, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 46), !dbg !1193
  unreachable, !dbg !1193

assert_ok6:                                       ; preds = %assert_ok
  %12 = load ptr, ptr %self, align 8, !dbg !1195
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !1195
  %13 = load i64, ptr %ptradd7, align 8, !dbg !1195
  %eq = icmp eq i64 0, %13, !dbg !1195
  br i1 %eq, label %if.then, label %if.exit20, !dbg !1195

if.then:                                          ; preds = %assert_ok6
  %14 = load ptr, ptr %self, align 8, !dbg !1196
  %ptradd8 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !1196
  %15 = load ptr, ptr %self, align 8
  store ptr %15, ptr %self9, align 8
  %16 = load ptr, ptr %self, align 8, !dbg !1198
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1198
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf, ptr align 8 %ptradd10, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1199, metadata !DIExpression()), !dbg !1201
  %17 = load ptr, ptr %self9, align 8, !dbg !1203
  %ptradd11 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !1204
  %18 = load i64, ptr %ptradd11, align 8, !dbg !1204
  %19 = inttoptr i64 %18 to ptr, !dbg !1204
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1186
  %20 = icmp eq ptr %19, %type, !dbg !1186
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !1186

cache_miss:                                       ; preds = %if.then
  %ptradd12 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1186
  %21 = load ptr, ptr %ptradd12, align 8, !dbg !1186
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.read"), !dbg !1186
  store ptr %22, ptr %.inlinecache, align 8, !dbg !1186
  store ptr %19, ptr %.cachedtype, align 8, !dbg !1186
  br label %23, !dbg !1186

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1186
  br label %23, !dbg !1186

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !1186
  %24 = icmp eq ptr %fn_phi, null, !dbg !1186
  br i1 %24, label %missing_function, label %match, !dbg !1186

missing_function:                                 ; preds = %23
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1203
  call void %25(ptr @.panic_msg.81, i64 41, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 92), !dbg !1203
  unreachable, !dbg !1203

match:                                            ; preds = %23
  %26 = load ptr, ptr %17, align 8
  %lo = load ptr, ptr %buf, align 8
  %ptradd13 = getelementptr inbounds i8, ptr %buf, i64 8
  %hi = load i64, ptr %ptradd13, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %26, ptr %lo, i64 %hi), !dbg !1203
  %not_err = icmp eq i64 %27, 0, !dbg !1203
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1203
  br i1 %28, label %after_check, label %assign_optional, !dbg !1203

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %n.f, align 8, !dbg !1203
  br label %after_assign, !dbg !1203

after_check:                                      ; preds = %match
  %29 = load i64, ptr %retparam, align 8, !dbg !1203
  store i64 %29, ptr %n, align 8, !dbg !1203
  store i64 0, ptr %n.f, align 8, !dbg !1203
  br label %after_assign, !dbg !1203

after_assign:                                     ; preds = %after_check, %assign_optional
  call void @llvm.dbg.declare(metadata ptr %err, metadata !1205, metadata !DIExpression()), !dbg !1206
  br label %testblock, !dbg !1206

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !1207
  %not_err14 = icmp eq i64 %optval, 0, !dbg !1207
  %30 = call i1 @llvm.expect.i1(i1 %not_err14, i1 true), !dbg !1207
  br i1 %30, label %after_check16, label %assign_optional15, !dbg !1207

assign_optional15:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !1207
  br label %end_block, !dbg !1207

after_check16:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !1207
  br label %end_block, !dbg !1207

end_block:                                        ; preds = %after_check16, %assign_optional15
  %31 = load i64, ptr %err, align 8, !dbg !1207
  %neq = icmp ne i64 %31, 0, !dbg !1207
  br i1 %neq, label %if.then17, label %if.exit, !dbg !1207

if.then17:                                        ; preds = %end_block
  store i64 %31, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then17
  %32 = load i64, ptr %switch, align 8
  %eq18 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %32, !dbg !1208
  br i1 %eq18, label %switch.case, label %next_if, !dbg !1208

switch.case:                                      ; preds = %switch.entry
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %error_var, align 8, !dbg !1209
  br label %guard_block, !dbg !1209

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !1209

switch.default:                                   ; preds = %next_if
  %33 = load i64, ptr %err, align 8, !dbg !1211
  store i64 %33, ptr %error_var, align 8, !dbg !1211
  br label %guard_block, !dbg !1211

if.exit:                                          ; preds = %end_block
  br label %noerr_block, !dbg !1213

guard_block:                                      ; preds = %switch.default, %switch.case
  %34 = load i64, ptr %error_var, align 8, !dbg !1213
  ret i64 %34, !dbg !1213

noerr_block:                                      ; preds = %if.exit
  %35 = load i64, ptr %n, align 8, !dbg !1213
  store i64 %35, ptr %ptradd8, align 8, !dbg !1213
  %36 = load ptr, ptr %self, align 8, !dbg !1214
  %ptradd19 = getelementptr inbounds i8, ptr %36, i64 32, !dbg !1214
  store i64 0, ptr %ptradd19, align 8, !dbg !1215
  br label %if.exit20, !dbg !1215

if.exit20:                                        ; preds = %noerr_block, %assert_ok6
  %37 = load ptr, ptr %self, align 8, !dbg !1216
  %ptradd21 = getelementptr inbounds i8, ptr %37, i64 40, !dbg !1216
  %38 = load i64, ptr %ptradd21, align 8, !dbg !1216
  %39 = load ptr, ptr %self, align 8, !dbg !1217
  %ptradd22 = getelementptr inbounds i8, ptr %39, i64 32, !dbg !1217
  %40 = load i64, ptr %ptradd22, align 8, !dbg !1217
  %ge = icmp uge i64 %38, %40, !dbg !1216
  br i1 %ge, label %assert_ok24, label %assert_fail23, !dbg !1216

assert_fail23:                                    ; preds = %if.exit20
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1216
  call void %41(ptr @.panic_msg.72, i64 16, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 56), !dbg !1216
  unreachable, !dbg !1216

assert_ok24:                                      ; preds = %if.exit20
  call void @llvm.dbg.declare(metadata ptr %n25, metadata !1218, metadata !DIExpression()), !dbg !1219
  %42 = load ptr, ptr %self, align 8, !dbg !1220
  %ptradd26 = getelementptr inbounds i8, ptr %42, i64 40, !dbg !1220
  %43 = load i64, ptr %ptradd26, align 8, !dbg !1220
  %44 = load ptr, ptr %self, align 8, !dbg !1221
  %ptradd27 = getelementptr inbounds i8, ptr %44, i64 32, !dbg !1221
  %45 = load i64, ptr %ptradd27, align 8, !dbg !1221
  %sub = sub i64 %43, %45, !dbg !1220
  store i64 %sub, ptr %n25, align 8, !dbg !1220
  call void @llvm.dbg.declare(metadata ptr %buf28, metadata !1222, metadata !DIExpression()), !dbg !1223
  %46 = load ptr, ptr %self, align 8, !dbg !1224
  %ptradd29 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !1224
  %47 = load %"char[]", ptr %ptradd29, align 8, !dbg !1224
  %48 = extractvalue %"char[]" %47, 0, !dbg !1224
  %49 = load ptr, ptr %self, align 8, !dbg !1225
  %ptradd30 = getelementptr inbounds i8, ptr %49, i64 32, !dbg !1225
  %50 = load i64, ptr %ptradd30, align 8, !dbg !1225
  %51 = extractvalue %"char[]" %47, 1, !dbg !1225
  %gt31 = icmp ugt i64 %50, %51, !dbg !1225
  %52 = call i1 @llvm.expect.i1(i1 %gt31, i1 false), !dbg !1225
  br i1 %52, label %panic32, label %checkok35, !dbg !1225

checkok35:                                        ; preds = %assert_ok24
  %53 = load i64, ptr %n25, align 8, !dbg !1226
  %add = add i64 %50, %53, !dbg !1226
  %lt36 = icmp ult i64 %51, %add, !dbg !1226
  %sub37 = sub i64 %add, 1, !dbg !1226
  %54 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1226
  br i1 %54, label %panic38, label %checkok45, !dbg !1226

checkok45:                                        ; preds = %checkok35
  %size = sub i64 %add, %50, !dbg !1224
  %ptradd46 = getelementptr inbounds i8, ptr %48, i64 %50, !dbg !1224
  %55 = insertvalue %"char[]" undef, ptr %ptradd46, 0, !dbg !1224
  %56 = insertvalue %"char[]" %55, i64 %size, 1, !dbg !1224
  store %"char[]" %56, ptr %buf28, align 8, !dbg !1224
  call void @llvm.dbg.declare(metadata ptr %i, metadata !1227, metadata !DIExpression()), !dbg !1228
  store i64 0, ptr %i, align 8, !dbg !1228
  %57 = load ptr, ptr %self, align 8
  store ptr %57, ptr %self47, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf48, ptr align 8 %buf28, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern49, ptr align 8 %pattern, i32 16, i1 false)
  %lo51 = load ptr, ptr %buf48, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %buf48, i64 8
  %hi53 = load i64, ptr %ptradd52, align 8
  %lo54 = load ptr, ptr %pattern49, align 8
  %ptradd55 = getelementptr inbounds i8, ptr %pattern49, i64 8
  %hi56 = load i64, ptr %ptradd55, align 8
  %58 = call i64 @std.core.String.index_of(ptr %retparam50, ptr %lo51, i64 %hi53, ptr %lo54, i64 %hi56), !dbg !1229
  %not_err57 = icmp eq i64 %58, 0, !dbg !1229
  %59 = call i1 @llvm.expect.i1(i1 %not_err57, i1 true), !dbg !1229
  br i1 %59, label %after_check58, label %catch_landing, !dbg !1229

after_check58:                                    ; preds = %checkok45
  %60 = load i64, ptr %retparam50, align 8, !dbg !1229
  store i64 %60, ptr %i, align 8, !dbg !1229
  br label %phi_try_catch, !dbg !1229

catch_landing:                                    ; preds = %checkok45
  br label %phi_try_catch, !dbg !1229

phi_try_catch:                                    ; preds = %catch_landing, %after_check58
  %val = phi i1 [ true, %after_check58 ], [ false, %catch_landing ], !dbg !1229
  br i1 %val, label %if.then59, label %if.exit85, !dbg !1229

if.then59:                                        ; preds = %phi_try_catch
  %61 = load ptr, ptr %self, align 8, !dbg !1232
  %ptradd60 = getelementptr inbounds i8, ptr %61, i64 32, !dbg !1232
  %62 = load i64, ptr %ptradd60, align 8, !dbg !1232
  %63 = load i64, ptr %i, align 8, !dbg !1234
  %ptradd61 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1235
  %64 = load i64, ptr %ptradd61, align 8, !dbg !1235
  %add62 = add i64 %63, %64, !dbg !1234
  %add63 = add i64 %62, %add62, !dbg !1232
  store i64 %add63, ptr %ptradd60, align 8, !dbg !1232
  %65 = load %"char[]", ptr %buf28, align 8, !dbg !1236
  %66 = extractvalue %"char[]" %65, 0, !dbg !1236
  %67 = extractvalue %"char[]" %65, 1, !dbg !1237
  %gt64 = icmp ugt i64 0, %67, !dbg !1237
  %68 = call i1 @llvm.expect.i1(i1 %gt64, i1 false), !dbg !1237
  br i1 %68, label %panic65, label %checkok72, !dbg !1237

checkok72:                                        ; preds = %if.then59
  %69 = load i64, ptr %i, align 8, !dbg !1238
  %add73 = add i64 0, %69, !dbg !1238
  %lt74 = icmp ult i64 %67, %add73, !dbg !1238
  %sub75 = sub i64 %add73, 1, !dbg !1238
  %70 = call i1 @llvm.expect.i1(i1 %lt74, i1 false), !dbg !1238
  br i1 %70, label %panic76, label %checkok83, !dbg !1238

checkok83:                                        ; preds = %checkok72
  %size84 = sub i64 %add73, 0, !dbg !1236
  %71 = insertvalue %"char[]" undef, ptr %66, 0, !dbg !1236
  %72 = insertvalue %"char[]" %71, i64 %size84, 1, !dbg !1236
  store %"char[]" %72, ptr %0, align 8, !dbg !1236
  ret i64 0, !dbg !1236

if.exit85:                                        ; preds = %phi_try_catch
  %73 = load ptr, ptr %self, align 8, !dbg !1239
  %ptradd86 = getelementptr inbounds i8, ptr %73, i64 32, !dbg !1239
  %74 = load i64, ptr %ptradd86, align 8, !dbg !1239
  %eq87 = icmp eq i64 0, %74, !dbg !1239
  br i1 %eq87, label %or.phi, label %or.rhs, !dbg !1239

or.rhs:                                           ; preds = %if.exit85
  %75 = load ptr, ptr %self, align 8, !dbg !1240
  %ptradd88 = getelementptr inbounds i8, ptr %75, i64 40, !dbg !1240
  %76 = load i64, ptr %ptradd88, align 8, !dbg !1240
  %77 = load ptr, ptr %self, align 8, !dbg !1241
  %ptradd89 = getelementptr inbounds i8, ptr %77, i64 16, !dbg !1241
  %ptradd90 = getelementptr inbounds i8, ptr %ptradd89, i64 8, !dbg !1241
  %78 = load i64, ptr %ptradd90, align 8, !dbg !1241
  %lt91 = icmp ult i64 %76, %78, !dbg !1240
  br label %or.phi, !dbg !1240

or.phi:                                           ; preds = %or.rhs, %if.exit85
  %val92 = phi i1 [ true, %if.exit85 ], [ %lt91, %or.rhs ], !dbg !1240
  br i1 %val92, label %if.then93, label %if.exit94, !dbg !1240

if.then93:                                        ; preds = %or.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !1242

if.exit94:                                        ; preds = %or.phi
  %79 = load %"char[]", ptr %buf28, align 8, !dbg !1244
  %80 = extractvalue %"char[]" %79, 0, !dbg !1244
  %81 = extractvalue %"char[]" %79, 1, !dbg !1245
  %gt95 = icmp ugt i64 0, %81, !dbg !1245
  %82 = call i1 @llvm.expect.i1(i1 %gt95, i1 false), !dbg !1245
  br i1 %82, label %panic96, label %checkok103, !dbg !1245

checkok103:                                       ; preds = %if.exit94
  %size104 = sub i64 %81, 0, !dbg !1244
  %83 = insertvalue %"char[]" undef, ptr %80, 0, !dbg !1244
  %84 = insertvalue %"char[]" %83, i64 %size104, 1, !dbg !1244
  %85 = load ptr, ptr %self, align 8, !dbg !1246
  %ptradd105 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !1246
  %86 = load %"char[]", ptr %ptradd105, align 8, !dbg !1246
  %87 = extractvalue %"char[]" %86, 0, !dbg !1246
  %88 = extractvalue %"char[]" %86, 1, !dbg !1247
  %gt106 = icmp ugt i64 0, %88, !dbg !1247
  %89 = call i1 @llvm.expect.i1(i1 %gt106, i1 false), !dbg !1247
  br i1 %89, label %panic107, label %checkok114, !dbg !1247

checkok114:                                       ; preds = %checkok103
  %90 = load i64, ptr %n25, align 8, !dbg !1248
  %add115 = add i64 0, %90, !dbg !1248
  %lt116 = icmp ult i64 %88, %add115, !dbg !1248
  %sub117 = sub i64 %add115, 1, !dbg !1248
  %91 = call i1 @llvm.expect.i1(i1 %lt116, i1 false), !dbg !1248
  br i1 %91, label %panic118, label %checkok125, !dbg !1248

checkok125:                                       ; preds = %checkok114
  %size126 = sub i64 %add115, 0, !dbg !1246
  %92 = insertvalue %"char[]" undef, ptr %87, 0, !dbg !1246
  %93 = insertvalue %"char[]" %92, i64 %size126, 1, !dbg !1246
  %94 = extractvalue %"char[]" %93, 0, !dbg !1246
  %95 = extractvalue %"char[]" %84, 0, !dbg !1246
  store %"char[]" %84, ptr %taddr127, align 8
  %ptradd128 = getelementptr inbounds i8, ptr %taddr127, i64 8
  %96 = load i64, ptr %ptradd128, align 8
  store %"char[]" %93, ptr %taddr129, align 8
  %ptradd130 = getelementptr inbounds i8, ptr %taddr129, i64 8
  %97 = load i64, ptr %ptradd130, align 8
  %neq131 = icmp ne i64 %97, %96
  %98 = call i1 @llvm.expect.i1(i1 %neq131, i1 false)
  br i1 %98, label %panic132, label %checkok139

checkok139:                                       ; preds = %checkok125
  %99 = mul i64 %96, 1, !dbg !1246
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %94, ptr align 1 %95, i64 %99, i1 false), !dbg !1246
  %100 = load ptr, ptr %self, align 8, !dbg !1249
  %ptradd140 = getelementptr inbounds i8, ptr %100, i64 32, !dbg !1249
  store i64 0, ptr %ptradd140, align 8, !dbg !1250
  %101 = load ptr, ptr %self, align 8, !dbg !1251
  %ptradd141 = getelementptr inbounds i8, ptr %101, i64 16, !dbg !1251
  %102 = load %"char[]", ptr %ptradd141, align 8, !dbg !1251
  %103 = extractvalue %"char[]" %102, 0, !dbg !1251
  %104 = load i64, ptr %n25, align 8, !dbg !1252
  %105 = extractvalue %"char[]" %102, 1, !dbg !1252
  %gt142 = icmp ugt i64 %104, %105, !dbg !1252
  %106 = call i1 @llvm.expect.i1(i1 %gt142, i1 false), !dbg !1252
  br i1 %106, label %panic143, label %checkok150, !dbg !1252

checkok150:                                       ; preds = %checkok139
  %size151 = sub i64 %105, %104, !dbg !1251
  %ptradd152 = getelementptr inbounds i8, ptr %103, i64 %104, !dbg !1251
  %107 = insertvalue %"char[]" undef, ptr %ptradd152, 0, !dbg !1251
  %108 = insertvalue %"char[]" %107, i64 %size151, 1, !dbg !1251
  store %"char[]" %108, ptr %buf28, align 8, !dbg !1251
  call void @llvm.dbg.declare(metadata ptr %p, metadata !1253, metadata !DIExpression()), !dbg !1254
  %109 = load ptr, ptr %self, align 8
  store ptr %109, ptr %self154, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf155, ptr align 8 %buf28, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %n156, metadata !1255, metadata !DIExpression()), !dbg !1257
  %110 = load ptr, ptr %self154, align 8, !dbg !1259
  %ptradd158 = getelementptr inbounds i8, ptr %110, i64 8, !dbg !1260
  %111 = load i64, ptr %ptradd158, align 8, !dbg !1260
  %112 = inttoptr i64 %111 to ptr, !dbg !1260
  %type161 = load ptr, ptr %.cachedtype160, align 8, !dbg !1186
  %113 = icmp eq ptr %112, %type161, !dbg !1186
  br i1 %113, label %cache_hit164, label %cache_miss162, !dbg !1186

cache_miss162:                                    ; preds = %checkok150
  %ptradd163 = getelementptr inbounds i8, ptr %112, i64 16, !dbg !1186
  %114 = load ptr, ptr %ptradd163, align 8, !dbg !1186
  %115 = call ptr @.dyn_search(ptr %114, ptr @"$sel.read"), !dbg !1186
  store ptr %115, ptr %.inlinecache159, align 8, !dbg !1186
  store ptr %112, ptr %.cachedtype160, align 8, !dbg !1186
  br label %116, !dbg !1186

cache_hit164:                                     ; preds = %checkok150
  %cache_hit_fn165 = load ptr, ptr %.inlinecache159, align 8, !dbg !1186
  br label %116, !dbg !1186

116:                                              ; preds = %cache_hit164, %cache_miss162
  %fn_phi166 = phi ptr [ %cache_hit_fn165, %cache_hit164 ], [ %115, %cache_miss162 ], !dbg !1186
  %117 = icmp eq ptr %fn_phi166, null, !dbg !1186
  br i1 %117, label %missing_function167, label %match168, !dbg !1186

missing_function167:                              ; preds = %116
  %118 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1259
  call void %118(ptr @.panic_msg.81, i64 41, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 92), !dbg !1259
  unreachable, !dbg !1259

match168:                                         ; preds = %116
  %119 = load ptr, ptr %110, align 8
  %lo170 = load ptr, ptr %buf155, align 8
  %ptradd171 = getelementptr inbounds i8, ptr %buf155, i64 8
  %hi172 = load i64, ptr %ptradd171, align 8
  %120 = call i64 %fn_phi166(ptr %retparam169, ptr %119, ptr %lo170, i64 %hi172), !dbg !1259
  %not_err173 = icmp eq i64 %120, 0, !dbg !1259
  %121 = call i1 @llvm.expect.i1(i1 %not_err173, i1 true), !dbg !1259
  br i1 %121, label %after_check175, label %assign_optional174, !dbg !1259

assign_optional174:                               ; preds = %match168
  store i64 %120, ptr %n.f157, align 8, !dbg !1259
  br label %after_assign176, !dbg !1259

after_check175:                                   ; preds = %match168
  %122 = load i64, ptr %retparam169, align 8, !dbg !1259
  store i64 %122, ptr %n156, align 8, !dbg !1259
  store i64 0, ptr %n.f157, align 8, !dbg !1259
  br label %after_assign176, !dbg !1259

after_assign176:                                  ; preds = %after_check175, %assign_optional174
  call void @llvm.dbg.declare(metadata ptr %err177, metadata !1261, metadata !DIExpression()), !dbg !1262
  br label %testblock178, !dbg !1262

testblock178:                                     ; preds = %after_assign176
  %optval179 = load i64, ptr %n.f157, align 8, !dbg !1263
  %not_err180 = icmp eq i64 %optval179, 0, !dbg !1263
  %123 = call i1 @llvm.expect.i1(i1 %not_err180, i1 true), !dbg !1263
  br i1 %123, label %after_check182, label %assign_optional181, !dbg !1263

assign_optional181:                               ; preds = %testblock178
  store i64 %optval179, ptr %err177, align 8, !dbg !1263
  br label %end_block183, !dbg !1263

after_check182:                                   ; preds = %testblock178
  store i64 0, ptr %err177, align 8, !dbg !1263
  br label %end_block183, !dbg !1263

end_block183:                                     ; preds = %after_check182, %assign_optional181
  %124 = load i64, ptr %err177, align 8, !dbg !1263
  %neq184 = icmp ne i64 %124, 0, !dbg !1263
  br i1 %neq184, label %if.then185, label %if.exit192, !dbg !1263

if.then185:                                       ; preds = %end_block183
  store i64 %124, ptr %switch186, align 8
  br label %switch.entry187

switch.entry187:                                  ; preds = %if.then185
  %125 = load i64, ptr %switch186, align 8
  %eq188 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %125, !dbg !1264
  br i1 %eq188, label %switch.case189, label %next_if190, !dbg !1264

switch.case189:                                   ; preds = %switch.entry187
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %error_var153, align 8, !dbg !1265
  br label %guard_block193, !dbg !1265

next_if190:                                       ; preds = %switch.entry187
  br label %switch.default191, !dbg !1265

switch.default191:                                ; preds = %next_if190
  %126 = load i64, ptr %err177, align 8, !dbg !1267
  store i64 %126, ptr %error_var153, align 8, !dbg !1267
  br label %guard_block193, !dbg !1267

if.exit192:                                       ; preds = %end_block183
  br label %noerr_block194, !dbg !1269

guard_block193:                                   ; preds = %switch.default191, %switch.case189
  %127 = load i64, ptr %error_var153, align 8, !dbg !1269
  ret i64 %127, !dbg !1269

noerr_block194:                                   ; preds = %if.exit192
  %128 = load i64, ptr %n156, align 8, !dbg !1269
  store i64 %128, ptr %p, align 8, !dbg !1269
  %129 = load ptr, ptr %self, align 8, !dbg !1270
  %ptradd195 = getelementptr inbounds i8, ptr %129, i64 40, !dbg !1270
  %130 = load i64, ptr %n25, align 8, !dbg !1271
  %131 = load i64, ptr %p, align 8, !dbg !1272
  %add196 = add i64 %130, %131, !dbg !1271
  store i64 %add196, ptr %ptradd195, align 8, !dbg !1271
  %132 = load %"char[]", ptr %buf28, align 8, !dbg !1273
  %133 = extractvalue %"char[]" %132, 0, !dbg !1273
  %134 = extractvalue %"char[]" %132, 1, !dbg !1274
  %gt197 = icmp ugt i64 0, %134, !dbg !1274
  %135 = call i1 @llvm.expect.i1(i1 %gt197, i1 false), !dbg !1274
  br i1 %135, label %panic198, label %checkok205, !dbg !1274

checkok205:                                       ; preds = %noerr_block194
  %136 = load i64, ptr %p, align 8, !dbg !1275
  %add206 = add i64 0, %136, !dbg !1275
  %lt207 = icmp ult i64 %134, %add206, !dbg !1275
  %sub208 = sub i64 %add206, 1, !dbg !1275
  %137 = call i1 @llvm.expect.i1(i1 %lt207, i1 false), !dbg !1275
  br i1 %137, label %panic209, label %checkok216, !dbg !1275

checkok216:                                       ; preds = %checkok205
  %size217 = sub i64 %add206, 0, !dbg !1273
  %138 = insertvalue %"char[]" undef, ptr %133, 0, !dbg !1273
  %139 = insertvalue %"char[]" %138, i64 %size217, 1, !dbg !1273
  store %"char[]" %139, ptr %buf28, align 8, !dbg !1273
  call void @llvm.dbg.declare(metadata ptr %i218, metadata !1276, metadata !DIExpression()), !dbg !1277
  %140 = load ptr, ptr %self, align 8
  store ptr %140, ptr %self220, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf221, ptr align 8 %buf28, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern222, ptr align 8 %pattern, i32 16, i1 false)
  %lo224 = load ptr, ptr %buf221, align 8
  %ptradd225 = getelementptr inbounds i8, ptr %buf221, i64 8
  %hi226 = load i64, ptr %ptradd225, align 8
  %lo227 = load ptr, ptr %pattern222, align 8
  %ptradd228 = getelementptr inbounds i8, ptr %pattern222, i64 8
  %hi229 = load i64, ptr %ptradd228, align 8
  %141 = call i64 @std.core.String.index_of(ptr %retparam223, ptr %lo224, i64 %hi226, ptr %lo227, i64 %hi229), !dbg !1278
  %not_err230 = icmp eq i64 %141, 0, !dbg !1278
  %142 = call i1 @llvm.expect.i1(i1 %not_err230, i1 true), !dbg !1278
  br i1 %142, label %after_check232, label %assign_optional231, !dbg !1278

assign_optional231:                               ; preds = %checkok216
  store i64 %141, ptr %error_var219, align 8, !dbg !1278
  br label %guard_block233, !dbg !1278

after_check232:                                   ; preds = %checkok216
  br label %noerr_block234, !dbg !1278

guard_block233:                                   ; preds = %assign_optional231
  %143 = load i64, ptr %error_var219, align 8, !dbg !1278
  ret i64 %143, !dbg !1278

noerr_block234:                                   ; preds = %after_check232
  %144 = load i64, ptr %retparam223, align 8, !dbg !1278
  store i64 %144, ptr %i218, align 8, !dbg !1278
  %145 = load ptr, ptr %self, align 8, !dbg !1281
  %ptradd235 = getelementptr inbounds i8, ptr %145, i64 32, !dbg !1281
  %146 = load i64, ptr %n25, align 8, !dbg !1282
  %147 = load i64, ptr %i218, align 8, !dbg !1283
  %add236 = add i64 %146, %147, !dbg !1282
  %ptradd237 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1284
  %148 = load i64, ptr %ptradd237, align 8, !dbg !1284
  %add238 = add i64 %add236, %148, !dbg !1282
  store i64 %add238, ptr %ptradd235, align 8, !dbg !1282
  %149 = load ptr, ptr %self, align 8, !dbg !1285
  %ptradd240 = getelementptr inbounds i8, ptr %149, i64 16, !dbg !1285
  %150 = load %"char[]", ptr %ptradd240, align 8, !dbg !1285
  %151 = extractvalue %"char[]" %150, 0, !dbg !1285
  %152 = extractvalue %"char[]" %150, 1, !dbg !1286
  %gt241 = icmp ugt i64 0, %152, !dbg !1286
  %153 = call i1 @llvm.expect.i1(i1 %gt241, i1 false), !dbg !1286
  br i1 %153, label %panic242, label %checkok249, !dbg !1286

checkok249:                                       ; preds = %noerr_block234
  %154 = load i64, ptr %n25, align 8, !dbg !1287
  %155 = load i64, ptr %i218, align 8, !dbg !1288
  %add250 = add i64 %154, %155, !dbg !1287
  %add251 = add i64 0, %add250, !dbg !1287
  %lt252 = icmp ult i64 %152, %add251, !dbg !1287
  %sub253 = sub i64 %add251, 1, !dbg !1287
  %156 = call i1 @llvm.expect.i1(i1 %lt252, i1 false), !dbg !1287
  br i1 %156, label %panic254, label %checkok261, !dbg !1287

checkok261:                                       ; preds = %checkok249
  %size262 = sub i64 %add251, 0, !dbg !1285
  %157 = insertvalue %"char[]" undef, ptr %151, 0, !dbg !1285
  %158 = insertvalue %"char[]" %157, i64 %size262, 1, !dbg !1285
  store %"char[]" %158, ptr %0, align 8, !dbg !1285
  ret i64 0, !dbg !1285

panic:                                            ; preds = %entry
  %159 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1188
  call void %159(ptr @.panic_msg, i64 62, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 48), !dbg !1188
  unreachable, !dbg !1188

panic32:                                          ; preds = %assert_ok24
  store i64 %51, ptr %taddr, align 8
  %160 = insertvalue %any undef, ptr %taddr, 0
  %161 = insertvalue %any %160, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %50, ptr %taddr33, align 8
  %162 = insertvalue %any undef, ptr %taddr33, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %161, ptr %varargslots, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %163, ptr %ptradd34, align 16
  %164 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %164, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 58, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1224
  unreachable, !dbg !1224

panic38:                                          ; preds = %checkok35
  store i64 %sub37, ptr %taddr39, align 8
  %165 = insertvalue %any undef, ptr %taddr39, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr40, align 8
  %167 = insertvalue %any undef, ptr %taddr40, 0
  %168 = insertvalue %any %167, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %166, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %168, ptr %ptradd42, align 16
  %169 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %169, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 58, ptr byval(%"any[]") align 8 %indirectarg44), !dbg !1224
  unreachable, !dbg !1224

panic65:                                          ; preds = %if.then59
  store i64 %67, ptr %taddr66, align 8
  %170 = insertvalue %any undef, ptr %taddr66, 0
  %171 = insertvalue %any %170, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr67, align 8
  %172 = insertvalue %any undef, ptr %taddr67, 0
  %173 = insertvalue %any %172, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %171, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %173, ptr %ptradd69, align 16
  %174 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %174, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 62, ptr byval(%"any[]") align 8 %indirectarg71), !dbg !1236
  unreachable, !dbg !1236

panic76:                                          ; preds = %checkok72
  store i64 %sub75, ptr %taddr77, align 8
  %175 = insertvalue %any undef, ptr %taddr77, 0
  %176 = insertvalue %any %175, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %67, ptr %taddr78, align 8
  %177 = insertvalue %any undef, ptr %taddr78, 0
  %178 = insertvalue %any %177, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %176, ptr %varargslots79, align 16
  %ptradd80 = getelementptr inbounds i8, ptr %varargslots79, i64 16
  store %any %178, ptr %ptradd80, align 16
  %179 = insertvalue %"any[]" undef, ptr %varargslots79, 0
  %"$$temp81" = insertvalue %"any[]" %179, i64 2, 1
  store %"any[]" %"$$temp81", ptr %indirectarg82, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 62, ptr byval(%"any[]") align 8 %indirectarg82), !dbg !1236
  unreachable, !dbg !1236

panic96:                                          ; preds = %if.exit94
  store i64 %81, ptr %taddr97, align 8
  %180 = insertvalue %any undef, ptr %taddr97, 0
  %181 = insertvalue %any %180, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr98, align 8
  %182 = insertvalue %any undef, ptr %taddr98, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %181, ptr %varargslots99, align 16
  %ptradd100 = getelementptr inbounds i8, ptr %varargslots99, i64 16
  store %any %183, ptr %ptradd100, align 16
  %184 = insertvalue %"any[]" undef, ptr %varargslots99, 0
  %"$$temp101" = insertvalue %"any[]" %184, i64 2, 1
  store %"any[]" %"$$temp101", ptr %indirectarg102, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg102), !dbg !1244
  unreachable, !dbg !1244

panic107:                                         ; preds = %checkok103
  store i64 %88, ptr %taddr108, align 8
  %185 = insertvalue %any undef, ptr %taddr108, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr109, align 8
  %187 = insertvalue %any undef, ptr %taddr109, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %186, ptr %varargslots110, align 16
  %ptradd111 = getelementptr inbounds i8, ptr %varargslots110, i64 16
  store %any %188, ptr %ptradd111, align 16
  %189 = insertvalue %"any[]" undef, ptr %varargslots110, 0
  %"$$temp112" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp112", ptr %indirectarg113, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg113), !dbg !1246
  unreachable, !dbg !1246

panic118:                                         ; preds = %checkok114
  store i64 %sub117, ptr %taddr119, align 8
  %190 = insertvalue %any undef, ptr %taddr119, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %88, ptr %taddr120, align 8
  %192 = insertvalue %any undef, ptr %taddr120, 0
  %193 = insertvalue %any %192, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %191, ptr %varargslots121, align 16
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots121, i64 16
  store %any %193, ptr %ptradd122, align 16
  %194 = insertvalue %"any[]" undef, ptr %varargslots121, 0
  %"$$temp123" = insertvalue %"any[]" %194, i64 2, 1
  store %"any[]" %"$$temp123", ptr %indirectarg124, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg124), !dbg !1246
  unreachable, !dbg !1246

panic132:                                         ; preds = %checkok125
  store i64 %97, ptr %taddr133, align 8
  %195 = insertvalue %any undef, ptr %taddr133, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %96, ptr %taddr134, align 8
  %197 = insertvalue %any undef, ptr %taddr134, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %196, ptr %varargslots135, align 16
  %ptradd136 = getelementptr inbounds i8, ptr %varargslots135, i64 16
  store %any %198, ptr %ptradd136, align 16
  %199 = insertvalue %"any[]" undef, ptr %varargslots135, 0
  %"$$temp137" = insertvalue %"any[]" %199, i64 2, 1
  store %"any[]" %"$$temp137", ptr %indirectarg138, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 38, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 71, ptr byval(%"any[]") align 8 %indirectarg138), !dbg !1246
  unreachable, !dbg !1246

panic143:                                         ; preds = %checkok139
  store i64 %105, ptr %taddr144, align 8
  %200 = insertvalue %any undef, ptr %taddr144, 0
  %201 = insertvalue %any %200, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %104, ptr %taddr145, align 8
  %202 = insertvalue %any undef, ptr %taddr145, 0
  %203 = insertvalue %any %202, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %201, ptr %varargslots146, align 16
  %ptradd147 = getelementptr inbounds i8, ptr %varargslots146, i64 16
  store %any %203, ptr %ptradd147, align 16
  %204 = insertvalue %"any[]" undef, ptr %varargslots146, 0
  %"$$temp148" = insertvalue %"any[]" %204, i64 2, 1
  store %"any[]" %"$$temp148", ptr %indirectarg149, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 74, ptr byval(%"any[]") align 8 %indirectarg149), !dbg !1251
  unreachable, !dbg !1251

panic198:                                         ; preds = %noerr_block194
  store i64 %134, ptr %taddr199, align 8
  %205 = insertvalue %any undef, ptr %taddr199, 0
  %206 = insertvalue %any %205, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr200, align 8
  %207 = insertvalue %any undef, ptr %taddr200, 0
  %208 = insertvalue %any %207, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %206, ptr %varargslots201, align 16
  %ptradd202 = getelementptr inbounds i8, ptr %varargslots201, i64 16
  store %any %208, ptr %ptradd202, align 16
  %209 = insertvalue %"any[]" undef, ptr %varargslots201, 0
  %"$$temp203" = insertvalue %"any[]" %209, i64 2, 1
  store %"any[]" %"$$temp203", ptr %indirectarg204, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 78, ptr byval(%"any[]") align 8 %indirectarg204), !dbg !1273
  unreachable, !dbg !1273

panic209:                                         ; preds = %checkok205
  store i64 %sub208, ptr %taddr210, align 8
  %210 = insertvalue %any undef, ptr %taddr210, 0
  %211 = insertvalue %any %210, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %134, ptr %taddr211, align 8
  %212 = insertvalue %any undef, ptr %taddr211, 0
  %213 = insertvalue %any %212, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %211, ptr %varargslots212, align 16
  %ptradd213 = getelementptr inbounds i8, ptr %varargslots212, i64 16
  store %any %213, ptr %ptradd213, align 16
  %214 = insertvalue %"any[]" undef, ptr %varargslots212, 0
  %"$$temp214" = insertvalue %"any[]" %214, i64 2, 1
  store %"any[]" %"$$temp214", ptr %indirectarg215, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 78, ptr byval(%"any[]") align 8 %indirectarg215), !dbg !1273
  unreachable, !dbg !1273

panic242:                                         ; preds = %noerr_block234
  store i64 %152, ptr %taddr243, align 8
  %215 = insertvalue %any undef, ptr %taddr243, 0
  %216 = insertvalue %any %215, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr244, align 8
  %217 = insertvalue %any undef, ptr %taddr244, 0
  %218 = insertvalue %any %217, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %216, ptr %varargslots245, align 16
  %ptradd246 = getelementptr inbounds i8, ptr %varargslots245, i64 16
  store %any %218, ptr %ptradd246, align 16
  %219 = insertvalue %"any[]" undef, ptr %varargslots245, 0
  %"$$temp247" = insertvalue %"any[]" %219, i64 2, 1
  store %"any[]" %"$$temp247", ptr %indirectarg248, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 82, ptr byval(%"any[]") align 8 %indirectarg248), !dbg !1285
  unreachable, !dbg !1285

panic254:                                         ; preds = %checkok249
  store i64 %sub253, ptr %taddr255, align 8
  %220 = insertvalue %any undef, ptr %taddr255, 0
  %221 = insertvalue %any %220, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %152, ptr %taddr256, align 8
  %222 = insertvalue %any undef, ptr %taddr256, 0
  %223 = insertvalue %any %222, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %221, ptr %varargslots257, align 16
  %ptradd258 = getelementptr inbounds i8, ptr %varargslots257, i64 16
  store %any %223, ptr %ptradd258, align 16
  %224 = insertvalue %"any[]" undef, ptr %varargslots257, 0
  %"$$temp259" = insertvalue %"any[]" %224, i64 2, 1
  store %"any[]" %"$$temp259", ptr %indirectarg260, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.96, i64 10, ptr @.func.98, i64 4, i32 82, ptr byval(%"any[]") align 8 %indirectarg260), !dbg !1285
  unreachable, !dbg !1285
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1289 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %taddr47 = alloca %"char[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %varargslots52 = alloca [2 x %any], align 16
  %indirectarg55 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1292
  %4 = icmp eq ptr %1, null, !dbg !1292
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1292
  br i1 %5, label %panic, label %checkok, !dbg !1292

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1293, metadata !DIExpression()), !dbg !1294
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1295, metadata !DIExpression()), !dbg !1296
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1297, metadata !DIExpression()), !dbg !1298
  store i64 0, ptr %n, align 8, !dbg !1298
  %6 = load ptr, ptr %self, align 8, !dbg !1299
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !1299
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1299
  %8 = load ptr, ptr %self, align 8, !dbg !1300
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !1300
  %9 = load i64, ptr %ptradd2, align 8, !dbg !1300
  %lt = icmp ult i64 %7, %9, !dbg !1299
  br i1 %lt, label %if.then, label %if.exit, !dbg !1299

if.then:                                          ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1301
  %10 = load i64, ptr %ptradd3, align 8
  store i64 %10, ptr %x, align 8
  %11 = load ptr, ptr %self, align 8, !dbg !1303
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 40, !dbg !1303
  %12 = load i64, ptr %ptradd4, align 8, !dbg !1303
  %13 = load ptr, ptr %self, align 8, !dbg !1304
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 32, !dbg !1304
  %14 = load i64, ptr %ptradd5, align 8, !dbg !1304
  %sub = sub i64 %12, %14, !dbg !1303
  store i64 %sub, ptr %.anon, align 8
  %15 = load i64, ptr %x, align 8
  store i64 %15, ptr %a, align 8
  %16 = load i64, ptr %.anon, align 8
  store i64 %16, ptr %b, align 8
  %17 = load i64, ptr %a, align 8, !dbg !1305
  %18 = load i64, ptr %b, align 8, !dbg !1310
  %lt6 = icmp ult i64 %17, %18, !dbg !1305
  br i1 %lt6, label %cond.lhs, label %cond.rhs, !dbg !1305

cond.lhs:                                         ; preds = %if.then
  %19 = load i64, ptr %x, align 8, !dbg !1311
  br label %cond.phi, !dbg !1311

cond.rhs:                                         ; preds = %if.then
  %20 = load i64, ptr %.anon, align 8, !dbg !1312
  br label %cond.phi, !dbg !1312

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %19, %cond.lhs ], [ %20, %cond.rhs ], !dbg !1312
  store i64 %val, ptr %n, align 8, !dbg !1312
  %21 = load ptr, ptr %self, align 8, !dbg !1313
  %ptradd7 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !1313
  %22 = load %"char[]", ptr %ptradd7, align 8, !dbg !1313
  %23 = extractvalue %"char[]" %22, 0, !dbg !1313
  %24 = load ptr, ptr %self, align 8, !dbg !1314
  %ptradd8 = getelementptr inbounds i8, ptr %24, i64 32, !dbg !1314
  %25 = load i64, ptr %ptradd8, align 8, !dbg !1314
  %26 = extractvalue %"char[]" %22, 1, !dbg !1314
  %gt = icmp ugt i64 %25, %26, !dbg !1314
  %27 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1314
  br i1 %27, label %panic9, label %checkok12, !dbg !1314

checkok12:                                        ; preds = %cond.phi
  %28 = load i64, ptr %n, align 8, !dbg !1315
  %add = add i64 %25, %28, !dbg !1315
  %lt13 = icmp ult i64 %26, %add, !dbg !1315
  %sub14 = sub i64 %add, 1, !dbg !1315
  %29 = call i1 @llvm.expect.i1(i1 %lt13, i1 false), !dbg !1315
  br i1 %29, label %panic15, label %checkok22, !dbg !1315

checkok22:                                        ; preds = %checkok12
  %size = sub i64 %add, %25, !dbg !1313
  %ptradd23 = getelementptr inbounds i8, ptr %23, i64 %25, !dbg !1313
  %30 = insertvalue %"char[]" undef, ptr %ptradd23, 0, !dbg !1313
  %31 = insertvalue %"char[]" %30, i64 %size, 1, !dbg !1313
  %32 = load %"char[]", ptr %bytes, align 8, !dbg !1316
  %33 = extractvalue %"char[]" %32, 0, !dbg !1316
  %34 = extractvalue %"char[]" %32, 1, !dbg !1317
  %gt24 = icmp ugt i64 0, %34, !dbg !1317
  %35 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !1317
  br i1 %35, label %panic25, label %checkok32, !dbg !1317

checkok32:                                        ; preds = %checkok22
  %36 = load i64, ptr %n, align 8, !dbg !1318
  %add33 = add i64 0, %36, !dbg !1318
  %lt34 = icmp ult i64 %34, %add33, !dbg !1318
  %sub35 = sub i64 %add33, 1, !dbg !1318
  %37 = call i1 @llvm.expect.i1(i1 %lt34, i1 false), !dbg !1318
  br i1 %37, label %panic36, label %checkok43, !dbg !1318

checkok43:                                        ; preds = %checkok32
  %size44 = sub i64 %add33, 0, !dbg !1316
  %38 = insertvalue %"char[]" undef, ptr %33, 0, !dbg !1316
  %39 = insertvalue %"char[]" %38, i64 %size44, 1, !dbg !1316
  %40 = extractvalue %"char[]" %39, 0, !dbg !1316
  %41 = extractvalue %"char[]" %31, 0, !dbg !1316
  store %"char[]" %31, ptr %taddr45, align 8
  %ptradd46 = getelementptr inbounds i8, ptr %taddr45, i64 8
  %42 = load i64, ptr %ptradd46, align 8
  store %"char[]" %39, ptr %taddr47, align 8
  %ptradd48 = getelementptr inbounds i8, ptr %taddr47, i64 8
  %43 = load i64, ptr %ptradd48, align 8
  %neq = icmp ne i64 %43, %42
  %44 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %44, label %panic49, label %checkok56

checkok56:                                        ; preds = %checkok43
  %45 = mul i64 %42, 1, !dbg !1316
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1316
  %46 = load ptr, ptr %self, align 8, !dbg !1319
  %ptradd57 = getelementptr inbounds i8, ptr %46, i64 32, !dbg !1319
  %47 = load i64, ptr %ptradd57, align 8, !dbg !1319
  %48 = load i64, ptr %n, align 8, !dbg !1320
  %add58 = add i64 %47, %48, !dbg !1319
  store i64 %add58, ptr %ptradd57, align 8, !dbg !1319
  %49 = load %"char[]", ptr %bytes, align 8, !dbg !1321
  %50 = extractvalue %"char[]" %49, 0, !dbg !1321
  %51 = load i64, ptr %n, align 8, !dbg !1322
  %52 = extractvalue %"char[]" %49, 1, !dbg !1322
  %gt59 = icmp ugt i64 %51, %52, !dbg !1322
  %53 = call i1 @llvm.expect.i1(i1 %gt59, i1 false), !dbg !1322
  br i1 %53, label %panic60, label %checkok67, !dbg !1322

checkok67:                                        ; preds = %checkok56
  %size68 = sub i64 %52, %51, !dbg !1321
  %ptradd69 = getelementptr inbounds i8, ptr %50, i64 %51, !dbg !1321
  %54 = insertvalue %"char[]" undef, ptr %ptradd69, 0, !dbg !1321
  %55 = insertvalue %"char[]" %54, i64 %size68, 1, !dbg !1321
  store %"char[]" %55, ptr %bytes, align 8, !dbg !1321
  br label %if.exit, !dbg !1321

if.exit:                                          ; preds = %checkok67, %checkok
  %56 = load i64, ptr %n, align 8, !dbg !1323
  %57 = load ptr, ptr %self, align 8, !dbg !1324
  %ptradd70 = getelementptr inbounds i8, ptr %57, i64 8, !dbg !1325
  %58 = load i64, ptr %ptradd70, align 8, !dbg !1325
  %59 = inttoptr i64 %58 to ptr, !dbg !1325
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1292
  %60 = icmp eq ptr %59, %type, !dbg !1292
  br i1 %60, label %cache_hit, label %cache_miss, !dbg !1292

cache_miss:                                       ; preds = %if.exit
  %ptradd71 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !1292
  %61 = load ptr, ptr %ptradd71, align 8, !dbg !1292
  %62 = call ptr @.dyn_search(ptr %61, ptr @"$sel.read"), !dbg !1292
  store ptr %62, ptr %.inlinecache, align 8, !dbg !1292
  store ptr %59, ptr %.cachedtype, align 8, !dbg !1292
  br label %63, !dbg !1292

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1292
  br label %63, !dbg !1292

63:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %62, %cache_miss ], !dbg !1292
  %64 = icmp eq ptr %fn_phi, null, !dbg !1292
  br i1 %64, label %missing_function, label %match, !dbg !1292

missing_function:                                 ; preds = %63
  %65 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1324
  call void %65(ptr @.panic_msg.81, i64 41, ptr @.file.96, i64 10, ptr @.func.68, i64 4, i32 113), !dbg !1324
  unreachable, !dbg !1324

match:                                            ; preds = %63
  %66 = load ptr, ptr %57, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd72 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd72, align 8
  %67 = call i64 %fn_phi(ptr %retparam, ptr %66, ptr %lo, i64 %hi), !dbg !1324
  %not_err = icmp eq i64 %67, 0, !dbg !1324
  %68 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1324
  br i1 %68, label %after_check, label %assign_optional, !dbg !1324

assign_optional:                                  ; preds = %match
  store i64 %67, ptr %error_var, align 8, !dbg !1324
  br label %guard_block, !dbg !1324

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1324

guard_block:                                      ; preds = %assign_optional
  %69 = load i64, ptr %error_var, align 8, !dbg !1324
  ret i64 %69, !dbg !1324

noerr_block:                                      ; preds = %after_check
  %70 = load i64, ptr %retparam, align 8, !dbg !1324
  %add73 = add i64 %56, %70, !dbg !1323
  store i64 %add73, ptr %n, align 8, !dbg !1323
  %71 = load i64, ptr %n, align 8, !dbg !1326
  store i64 %71, ptr %0, align 8, !dbg !1326
  ret i64 0, !dbg !1326

panic:                                            ; preds = %entry
  %72 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1294
  call void %72(ptr @.panic_msg, i64 62, ptr @.file.96, i64 10, ptr @.func.68, i64 4, i32 103), !dbg !1294
  unreachable, !dbg !1294

panic9:                                           ; preds = %cond.phi
  store i64 %26, ptr %taddr, align 8
  %73 = insertvalue %any undef, ptr %taddr, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr10, align 8
  %75 = insertvalue %any undef, ptr %taddr10, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %74, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %76, ptr %ptradd11, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.68, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1313
  unreachable, !dbg !1313

panic15:                                          ; preds = %checkok12
  store i64 %sub14, ptr %taddr16, align 8
  %78 = insertvalue %any undef, ptr %taddr16, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr17, align 8
  %80 = insertvalue %any undef, ptr %taddr17, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %79, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %81, ptr %ptradd19, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.96, i64 10, ptr @.func.68, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg21), !dbg !1313
  unreachable, !dbg !1313

panic25:                                          ; preds = %checkok22
  store i64 %34, ptr %taddr26, align 8
  %83 = insertvalue %any undef, ptr %taddr26, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %85 = insertvalue %any undef, ptr %taddr27, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %84, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %86, ptr %ptradd29, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.68, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg31), !dbg !1316
  unreachable, !dbg !1316

panic36:                                          ; preds = %checkok32
  store i64 %sub35, ptr %taddr37, align 8
  %88 = insertvalue %any undef, ptr %taddr37, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr38, align 8
  %90 = insertvalue %any undef, ptr %taddr38, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %89, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %91, ptr %ptradd40, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.96, i64 10, ptr @.func.68, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg42), !dbg !1316
  unreachable, !dbg !1316

panic49:                                          ; preds = %checkok43
  store i64 %43, ptr %taddr50, align 8
  %93 = insertvalue %any undef, ptr %taddr50, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr51, align 8
  %95 = insertvalue %any undef, ptr %taddr51, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %94, ptr %varargslots52, align 16
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %96, ptr %ptradd53, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp54", ptr %indirectarg55, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 38, ptr @.file.96, i64 10, ptr @.func.68, i64 4, i32 109, ptr byval(%"any[]") align 8 %indirectarg55), !dbg !1316
  unreachable, !dbg !1316

panic60:                                          ; preds = %checkok56
  store i64 %52, ptr %taddr61, align 8
  %98 = insertvalue %any undef, ptr %taddr61, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr62, align 8
  %100 = insertvalue %any undef, ptr %taddr62, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.96, i64 10, ptr @.func.68, i64 4, i32 111, ptr byval(%"any[]") align 8 %indirectarg66), !dbg !1321
  unreachable, !dbg !1321
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Scanner.read_byte(ptr %0, ptr %1) #0 comdat !dbg !1327 {
entry:
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr10 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !1330
  %2 = icmp eq ptr %1, null, !dbg !1330
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1330
  br i1 %3, label %panic, label %checkok, !dbg !1330

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1331, metadata !DIExpression()), !dbg !1332
  %4 = load ptr, ptr %self, align 8, !dbg !1333
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !1333
  %5 = load i64, ptr %ptradd, align 8, !dbg !1333
  %6 = load ptr, ptr %self, align 8, !dbg !1334
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !1334
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1334
  %lt = icmp ult i64 %5, %7, !dbg !1333
  br i1 %lt, label %if.then, label %if.exit, !dbg !1333

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1335
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1335
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !1335
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1335
  %10 = load ptr, ptr %ptradd2, align 8, !dbg !1335
  %11 = load ptr, ptr %self, align 8, !dbg !1337
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !1337
  %12 = load i64, ptr %ptradd4, align 8, !dbg !1337
  %add = add i64 %12, 1, !dbg !1337
  store i64 %add, ptr %ptradd4, align 8, !dbg !1337
  %ge = icmp uge i64 %12, %9, !dbg !1337
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1337
  br i1 %13, label %panic5, label %checkok8, !dbg !1337

checkok8:                                         ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !1337
  %14 = load i8, ptr %ptradd9, align 1, !dbg !1337
  store i8 %14, ptr %0, align 1, !dbg !1337
  ret i64 0, !dbg !1337

if.exit:                                          ; preds = %checkok
  %15 = load ptr, ptr %self, align 8, !dbg !1338
  %ptradd11 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !1338
  %16 = load i64, ptr %ptradd11, align 8, !dbg !1338
  %17 = inttoptr i64 %16 to ptr, !dbg !1338
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1330
  %18 = icmp eq ptr %17, %type, !dbg !1330
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !1330

cache_miss:                                       ; preds = %if.exit
  %ptradd12 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1330
  %19 = load ptr, ptr %ptradd12, align 8, !dbg !1330
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.read_byte"), !dbg !1330
  store ptr %20, ptr %.inlinecache, align 8, !dbg !1330
  store ptr %17, ptr %.cachedtype, align 8, !dbg !1330
  br label %21, !dbg !1330

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1330
  br label %21, !dbg !1330

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !1330
  %22 = icmp eq ptr %fn_phi, null, !dbg !1330
  br i1 %22, label %missing_function, label %match, !dbg !1330

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1338
  call void %23(ptr @.panic_msg.41, i64 46, ptr @.file.96, i64 10, ptr @.func.70, i64 9, i32 123), !dbg !1338
  unreachable, !dbg !1338

match:                                            ; preds = %21
  %24 = load ptr, ptr %15, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24), !dbg !1338
  %not_err = icmp eq i64 %25, 0, !dbg !1338
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1338
  br i1 %26, label %after_check, label %assign_optional, !dbg !1338

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %reterr10, align 8, !dbg !1338
  br label %err_retblock, !dbg !1338

after_check:                                      ; preds = %match
  %27 = load i8, ptr %retparam, align 1, !dbg !1338
  store i8 %27, ptr %0, align 1, !dbg !1338
  ret i64 0, !dbg !1338

err_retblock:                                     ; preds = %assign_optional
  %28 = load i64, ptr %reterr10, align 8, !dbg !1338
  ret i64 %28, !dbg !1338

panic:                                            ; preds = %entry
  %29 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1332
  call void %29(ptr @.panic_msg, i64 62, ptr @.file.96, i64 10, ptr @.func.70, i64 9, i32 117), !dbg !1332
  unreachable, !dbg !1332

panic5:                                           ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %30 = insertvalue %any undef, ptr %taddr, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr6, align 8
  %32 = insertvalue %any undef, ptr %taddr6, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %31, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %33, ptr %ptradd7, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.96, i64 10, ptr @.func.70, i64 9, i32 121, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1337
  unreachable, !dbg !1337
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.ReadBuffer.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !1339 {
entry:
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %bytes = alloca %"char[]", align 8
  %.assign_list = alloca %ReadBuffer, align 8
  %5 = icmp eq ptr %0, null, !dbg !1350
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1350
  br i1 %6, label %panic, label %checkok, !dbg !1350

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1351, metadata !DIExpression()), !dbg !1352
  store i64 %1, ptr %wrapped_stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %wrapped_stream, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %wrapped_stream, metadata !1353, metadata !DIExpression()), !dbg !1354
  store ptr %3, ptr %bytes, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1355, metadata !DIExpression()), !dbg !1356
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1357
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1357
  %lt = icmp ult i64 0, %7, !dbg !1357
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1357

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1357
  call void %8(ptr @.panic_msg.103, i64 34, ptr @.file.102, i64 9, ptr @.func, i64 4, i32 14), !dbg !1357
  unreachable, !dbg !1357

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1359
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1359
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !1359
  %10 = load i64, ptr %ptradd4, align 8, !dbg !1359
  %eq = icmp eq i64 0, %10, !dbg !1359
  br i1 %eq, label %assert_ok6, label %assert_fail5, !dbg !1359

assert_fail5:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1359
  call void %11(ptr @.panic_msg.88, i64 88, ptr @.file.102, i64 9, ptr @.func, i64 4, i32 15), !dbg !1359
  unreachable, !dbg !1359

assert_ok6:                                       ; preds = %assert_ok
  %12 = load ptr, ptr %self, align 8, !dbg !1360
  %checknull = icmp eq ptr %12, null, !dbg !1360
  %13 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1360
  br i1 %13, label %panic7, label %checkok8, !dbg !1360

checkok8:                                         ; preds = %assert_ok6
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !1361
  %ptradd9 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !1361
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd9, ptr align 8 %bytes, i32 16, i1 false), !dbg !1362
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %12, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !1362
  %14 = load ptr, ptr %self, align 8, !dbg !1363
  ret ptr %14, !dbg !1363

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1352
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func, i64 4, i32 17), !dbg !1352
  unreachable, !dbg !1352

panic7:                                           ; preds = %assert_ok6
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1360
  call void %16(ptr @.panic_msg.36, i64 45, ptr @.file.102, i64 9, ptr @.func, i64 4, i32 19), !dbg !1360
  unreachable, !dbg !1360
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.ReadBuffer.str_view(ptr %0) #0 comdat !dbg !1364 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1367
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1367
  br i1 %2, label %panic, label %checkok, !dbg !1367

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1368, metadata !DIExpression()), !dbg !1369
  %3 = load ptr, ptr %self, align 8, !dbg !1370
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1370
  %4 = load %"char[]", ptr %ptradd, align 8, !dbg !1370
  %5 = extractvalue %"char[]" %4, 0, !dbg !1370
  %6 = load ptr, ptr %self, align 8, !dbg !1371
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !1371
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1371
  %8 = extractvalue %"char[]" %4, 1, !dbg !1371
  %gt = icmp ugt i64 %7, %8, !dbg !1371
  %9 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1371
  br i1 %9, label %panic2, label %checkok5, !dbg !1371

checkok5:                                         ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1372
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 40, !dbg !1372
  %11 = load i64, ptr %ptradd6, align 8, !dbg !1372
  %12 = load ptr, ptr %self, align 8, !dbg !1373
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !1373
  %13 = load i64, ptr %ptradd7, align 8, !dbg !1373
  %sub = sub i64 %11, %13, !dbg !1372
  %add = add i64 %7, %sub, !dbg !1372
  %lt = icmp ult i64 %8, %add, !dbg !1372
  %sub8 = sub i64 %add, 1, !dbg !1372
  %14 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1372
  br i1 %14, label %panic9, label %checkok16, !dbg !1372

checkok16:                                        ; preds = %checkok5
  %size = sub i64 %add, %7, !dbg !1374
  %ptradd17 = getelementptr inbounds i8, ptr %5, i64 %7, !dbg !1374
  %15 = insertvalue %"char[]" undef, ptr %ptradd17, 0, !dbg !1374
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !1374
  store %"char[]" %16, ptr %taddr18, align 8
  %17 = load { ptr, i64 }, ptr %taddr18, align 8
  ret { ptr, i64 } %17

panic:                                            ; preds = %entry
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1369
  call void %18(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.92, i64 8, i32 22), !dbg !1369
  unreachable, !dbg !1369

panic2:                                           ; preds = %checkok
  store i64 %8, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr3, align 8
  %21 = insertvalue %any undef, ptr %taddr3, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %20, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd4, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.102, i64 9, ptr @.func.92, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1374
  unreachable, !dbg !1374

panic9:                                           ; preds = %checkok5
  store i64 %sub8, ptr %taddr10, align 8
  %24 = insertvalue %any undef, ptr %taddr10, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr11, align 8
  %26 = insertvalue %any undef, ptr %taddr11, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %25, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %27, ptr %ptradd13, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.102, i64 9, ptr @.func.92, i64 8, i32 24, ptr byval(%"any[]") align 8 %indirectarg15), !dbg !1374
  unreachable, !dbg !1374
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ReadBuffer.close(ptr %0) #0 comdat !dbg !1375 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !1378
  store ptr null, ptr %.cachedtype, align 8, !dbg !1378
  %1 = icmp eq ptr %0, null, !dbg !1378
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1378
  br i1 %2, label %panic, label %checkok, !dbg !1378

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1379, metadata !DIExpression()), !dbg !1380
  %3 = load ptr, ptr %self, align 8, !dbg !1381
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !1381
  %4 = load i64, ptr %ptradd, align 8, !dbg !1381
  %5 = inttoptr i64 %4 to ptr, !dbg !1381
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1378
  %6 = icmp eq ptr %5, %type, !dbg !1378
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !1378

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1378
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !1378
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !1378
  store ptr %8, ptr %.inlinecache, align 8, !dbg !1378
  store ptr %5, ptr %.cachedtype, align 8, !dbg !1378
  br label %9, !dbg !1378

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1378
  br label %9, !dbg !1378

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !1378
  %ptrbool = icmp ne ptr %fn_phi, null, !dbg !1378
  br i1 %ptrbool, label %if.then, label %if.exit, !dbg !1378

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !1382
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1382
  %11 = load i64, ptr %ptradd2, align 8, !dbg !1382
  %12 = inttoptr i64 %11 to ptr, !dbg !1382
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !1378
  %13 = icmp eq ptr %12, %type5, !dbg !1378
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !1378

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1378
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !1378
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !1378
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !1378
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !1378
  br label %16, !dbg !1378

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !1378
  br label %16, !dbg !1378

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !1378
  %17 = icmp eq ptr %fn_phi10, null, !dbg !1378
  br i1 %17, label %missing_function, label %match, !dbg !1378

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1382
  call void %18(ptr @.panic_msg.80, i64 42, ptr @.file.102, i64 9, ptr @.func.79, i64 5, i32 29), !dbg !1382
  unreachable, !dbg !1382

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !1382
  %20 = call i64 %fn_phi10(ptr %19), !dbg !1382
  %not_err = icmp eq i64 %20, 0, !dbg !1382
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1382
  br i1 %21, label %after_check, label %assign_optional, !dbg !1382

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !1382
  br label %guard_block, !dbg !1382

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1382

guard_block:                                      ; preds = %assign_optional
  %22 = load i64, ptr %error_var, align 8, !dbg !1382
  ret i64 %22, !dbg !1382

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !1382

if.exit:                                          ; preds = %noerr_block, %9
  ret i64 0, !dbg !1382

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1380
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.79, i64 5, i32 27), !dbg !1380
  unreachable, !dbg !1380
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ReadBuffer.read(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1383 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %error_var12 = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %varargslots44 = alloca [2 x %any], align 16
  %indirectarg47 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %varargslots68 = alloca [2 x %any], align 16
  %indirectarg71 = alloca %"any[]", align 8
  %reterr75 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1386
  %4 = icmp eq ptr %1, null, !dbg !1386
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1386
  br i1 %5, label %panic, label %checkok, !dbg !1386

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1387, metadata !DIExpression()), !dbg !1388
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1389, metadata !DIExpression()), !dbg !1390
  %6 = load ptr, ptr %self, align 8, !dbg !1391
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !1391
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1391
  %8 = load ptr, ptr %self, align 8, !dbg !1392
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 40, !dbg !1392
  %9 = load i64, ptr %ptradd2, align 8, !dbg !1392
  %eq = icmp eq i64 %7, %9, !dbg !1391
  br i1 %eq, label %if.then, label %if.exit18, !dbg !1391

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1393
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 32, !dbg !1393
  %11 = load i64, ptr %ptradd3, align 8, !dbg !1393
  %eq4 = icmp eq i64 0, %11, !dbg !1393
  br i1 %eq4, label %and.rhs, label %and.phi, !dbg !1393

and.rhs:                                          ; preds = %if.then
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1395
  %12 = load i64, ptr %ptradd5, align 8, !dbg !1395
  %13 = load ptr, ptr %self, align 8, !dbg !1396
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1396
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !1396
  %14 = load i64, ptr %ptradd7, align 8, !dbg !1396
  %ge = icmp uge i64 %12, %14, !dbg !1395
  br label %and.phi, !dbg !1395

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %ge, %and.rhs ], !dbg !1395
  br i1 %val, label %if.then8, label %if.exit, !dbg !1395

if.then8:                                         ; preds = %and.phi
  %15 = load ptr, ptr %self, align 8, !dbg !1397
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !1399
  %16 = load i64, ptr %ptradd9, align 8, !dbg !1399
  %17 = inttoptr i64 %16 to ptr, !dbg !1399
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1386
  %18 = icmp eq ptr %17, %type, !dbg !1386
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !1386

cache_miss:                                       ; preds = %if.then8
  %ptradd10 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1386
  %19 = load ptr, ptr %ptradd10, align 8, !dbg !1386
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.read"), !dbg !1386
  store ptr %20, ptr %.inlinecache, align 8, !dbg !1386
  store ptr %17, ptr %.cachedtype, align 8, !dbg !1386
  br label %21, !dbg !1386

cache_hit:                                        ; preds = %if.then8
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1386
  br label %21, !dbg !1386

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !1386
  %22 = icmp eq ptr %fn_phi, null, !dbg !1386
  br i1 %22, label %missing_function, label %match, !dbg !1386

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1397
  call void %23(ptr @.panic_msg.81, i64 41, ptr @.file.102, i64 9, ptr @.func.68, i64 4, i32 39), !dbg !1397
  unreachable, !dbg !1397

match:                                            ; preds = %21
  %24 = load ptr, ptr %15, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd11, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, ptr %lo, i64 %hi), !dbg !1397
  %not_err = icmp eq i64 %25, 0, !dbg !1397
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1397
  br i1 %26, label %after_check, label %assign_optional, !dbg !1397

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !1397
  br label %guard_block, !dbg !1397

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1397

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !1397
  ret i64 %27, !dbg !1397

noerr_block:                                      ; preds = %after_check
  %28 = load i64, ptr %retparam, align 8, !dbg !1397
  store i64 %28, ptr %0, align 8, !dbg !1397
  ret i64 0, !dbg !1397

if.exit:                                          ; preds = %and.phi
  %29 = load ptr, ptr %self, align 8, !dbg !1400
  %30 = call i64 @std.io.ReadBuffer.refill(ptr %29) #5, !dbg !1400
  %not_err13 = icmp eq i64 %30, 0, !dbg !1400
  %31 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true), !dbg !1400
  br i1 %31, label %after_check15, label %assign_optional14, !dbg !1400

assign_optional14:                                ; preds = %if.exit
  store i64 %30, ptr %error_var12, align 8, !dbg !1400
  br label %guard_block16, !dbg !1400

after_check15:                                    ; preds = %if.exit
  br label %noerr_block17, !dbg !1400

guard_block16:                                    ; preds = %assign_optional14
  %32 = load i64, ptr %error_var12, align 8, !dbg !1400
  ret i64 %32, !dbg !1400

noerr_block17:                                    ; preds = %after_check15
  br label %if.exit18, !dbg !1400

if.exit18:                                        ; preds = %noerr_block17, %checkok
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1401, metadata !DIExpression()), !dbg !1402
  %33 = load ptr, ptr %self, align 8, !dbg !1403
  %ptradd19 = getelementptr inbounds i8, ptr %33, i64 40, !dbg !1403
  %34 = load i64, ptr %ptradd19, align 8, !dbg !1403
  %35 = load ptr, ptr %self, align 8, !dbg !1404
  %ptradd20 = getelementptr inbounds i8, ptr %35, i64 32, !dbg !1404
  %36 = load i64, ptr %ptradd20, align 8, !dbg !1404
  %sub = sub i64 %34, %36, !dbg !1403
  store i64 %sub, ptr %x, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1405
  %37 = load i64, ptr %ptradd21, align 8
  store i64 %37, ptr %.anon, align 8
  %38 = load i64, ptr %x, align 8
  store i64 %38, ptr %a, align 8
  %39 = load i64, ptr %.anon, align 8
  store i64 %39, ptr %b, align 8
  %40 = load i64, ptr %a, align 8, !dbg !1406
  %41 = load i64, ptr %b, align 8, !dbg !1411
  %lt = icmp ult i64 %40, %41, !dbg !1406
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !1406

cond.lhs:                                         ; preds = %if.exit18
  %42 = load i64, ptr %x, align 8, !dbg !1412
  br label %cond.phi, !dbg !1412

cond.rhs:                                         ; preds = %if.exit18
  %43 = load i64, ptr %.anon, align 8, !dbg !1413
  br label %cond.phi, !dbg !1413

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val22 = phi i64 [ %42, %cond.lhs ], [ %43, %cond.rhs ], !dbg !1413
  store i64 %val22, ptr %n, align 8, !dbg !1413
  %44 = load ptr, ptr %self, align 8, !dbg !1414
  %ptradd23 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !1414
  %45 = load %"char[]", ptr %ptradd23, align 8, !dbg !1414
  %46 = extractvalue %"char[]" %45, 0, !dbg !1414
  %47 = load ptr, ptr %self, align 8, !dbg !1415
  %ptradd24 = getelementptr inbounds i8, ptr %47, i64 32, !dbg !1415
  %48 = load i64, ptr %ptradd24, align 8, !dbg !1415
  %49 = extractvalue %"char[]" %45, 1, !dbg !1415
  %gt = icmp ugt i64 %48, %49, !dbg !1415
  %50 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1415
  br i1 %50, label %panic25, label %checkok28, !dbg !1415

checkok28:                                        ; preds = %cond.phi
  %51 = load i64, ptr %n, align 8, !dbg !1416
  %add = add i64 %48, %51, !dbg !1416
  %lt29 = icmp ult i64 %49, %add, !dbg !1416
  %sub30 = sub i64 %add, 1, !dbg !1416
  %52 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !1416
  br i1 %52, label %panic31, label %checkok38, !dbg !1416

checkok38:                                        ; preds = %checkok28
  %size = sub i64 %add, %48, !dbg !1414
  %ptradd39 = getelementptr inbounds i8, ptr %46, i64 %48, !dbg !1414
  %53 = insertvalue %"char[]" undef, ptr %ptradd39, 0, !dbg !1414
  %54 = insertvalue %"char[]" %53, i64 %size, 1, !dbg !1414
  %55 = load %"char[]", ptr %bytes, align 8, !dbg !1417
  %56 = extractvalue %"char[]" %55, 0, !dbg !1417
  %57 = extractvalue %"char[]" %55, 1, !dbg !1418
  %gt40 = icmp ugt i64 0, %57, !dbg !1418
  %58 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1418
  br i1 %58, label %panic41, label %checkok48, !dbg !1418

checkok48:                                        ; preds = %checkok38
  %59 = load i64, ptr %n, align 8, !dbg !1419
  %add49 = add i64 0, %59, !dbg !1419
  %lt50 = icmp ult i64 %57, %add49, !dbg !1419
  %sub51 = sub i64 %add49, 1, !dbg !1419
  %60 = call i1 @llvm.expect.i1(i1 %lt50, i1 false), !dbg !1419
  br i1 %60, label %panic52, label %checkok59, !dbg !1419

checkok59:                                        ; preds = %checkok48
  %size60 = sub i64 %add49, 0, !dbg !1417
  %61 = insertvalue %"char[]" undef, ptr %56, 0, !dbg !1417
  %62 = insertvalue %"char[]" %61, i64 %size60, 1, !dbg !1417
  %63 = extractvalue %"char[]" %62, 0, !dbg !1417
  %64 = extractvalue %"char[]" %54, 0, !dbg !1417
  store %"char[]" %54, ptr %taddr61, align 8
  %ptradd62 = getelementptr inbounds i8, ptr %taddr61, i64 8
  %65 = load i64, ptr %ptradd62, align 8
  store %"char[]" %62, ptr %taddr63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %taddr63, i64 8
  %66 = load i64, ptr %ptradd64, align 8
  %neq = icmp ne i64 %66, %65
  %67 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %67, label %panic65, label %checkok72

checkok72:                                        ; preds = %checkok59
  %68 = mul i64 %65, 1, !dbg !1417
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %63, ptr align 1 %64, i64 %68, i1 false), !dbg !1417
  %69 = load ptr, ptr %self, align 8, !dbg !1420
  %ptradd73 = getelementptr inbounds i8, ptr %69, i64 32, !dbg !1420
  %70 = load i64, ptr %ptradd73, align 8, !dbg !1420
  %71 = load i64, ptr %n, align 8, !dbg !1421
  %add74 = add i64 %70, %71, !dbg !1420
  store i64 %add74, ptr %ptradd73, align 8, !dbg !1420
  %72 = load i64, ptr %n, align 8, !dbg !1422
  store i64 %72, ptr %0, align 8, !dbg !1422
  ret i64 0, !dbg !1422

panic:                                            ; preds = %entry
  %73 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1388
  call void %73(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.68, i64 4, i32 32), !dbg !1388
  unreachable, !dbg !1388

panic25:                                          ; preds = %cond.phi
  store i64 %49, ptr %taddr, align 8
  %74 = insertvalue %any undef, ptr %taddr, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr26, align 8
  %76 = insertvalue %any undef, ptr %taddr26, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %75, ptr %varargslots, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %77, ptr %ptradd27, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.102, i64 9, ptr @.func.68, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1414
  unreachable, !dbg !1414

panic31:                                          ; preds = %checkok28
  store i64 %sub30, ptr %taddr32, align 8
  %79 = insertvalue %any undef, ptr %taddr32, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr33, align 8
  %81 = insertvalue %any undef, ptr %taddr33, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %80, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %82, ptr %ptradd35, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.102, i64 9, ptr @.func.68, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg37), !dbg !1414
  unreachable, !dbg !1414

panic41:                                          ; preds = %checkok38
  store i64 %57, ptr %taddr42, align 8
  %84 = insertvalue %any undef, ptr %taddr42, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %86 = insertvalue %any undef, ptr %taddr43, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %85, ptr %varargslots44, align 16
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %87, ptr %ptradd45, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp46", ptr %indirectarg47, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.102, i64 9, ptr @.func.68, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg47), !dbg !1417
  unreachable, !dbg !1417

panic52:                                          ; preds = %checkok48
  store i64 %sub51, ptr %taddr53, align 8
  %89 = insertvalue %any undef, ptr %taddr53, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr54, align 8
  %91 = insertvalue %any undef, ptr %taddr54, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %90, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %92, ptr %ptradd56, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.102, i64 9, ptr @.func.68, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg58), !dbg !1417
  unreachable, !dbg !1417

panic65:                                          ; preds = %checkok59
  store i64 %66, ptr %taddr66, align 8
  %94 = insertvalue %any undef, ptr %taddr66, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %65, ptr %taddr67, align 8
  %96 = insertvalue %any undef, ptr %taddr67, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %95, ptr %varargslots68, align 16
  %ptradd69 = getelementptr inbounds i8, ptr %varargslots68, i64 16
  store %any %97, ptr %ptradd69, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots68, 0
  %"$$temp70" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp70", ptr %indirectarg71, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 38, ptr @.file.102, i64 9, ptr @.func.68, i64 4, i32 44, ptr byval(%"any[]") align 8 %indirectarg71), !dbg !1417
  unreachable, !dbg !1417
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.ReadBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !1423 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !1426
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1426
  br i1 %3, label %panic, label %checkok, !dbg !1426

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1427, metadata !DIExpression()), !dbg !1428
  %4 = load ptr, ptr %self, align 8, !dbg !1429
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !1429
  %5 = load i64, ptr %ptradd, align 8, !dbg !1429
  %6 = load ptr, ptr %self, align 8, !dbg !1430
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !1430
  %7 = load i64, ptr %ptradd1, align 8, !dbg !1430
  %eq = icmp eq i64 %5, %7, !dbg !1429
  br i1 %eq, label %if.then, label %if.exit, !dbg !1429

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1431
  %9 = call i64 @std.io.ReadBuffer.refill(ptr %8) #5, !dbg !1431
  %not_err = icmp eq i64 %9, 0, !dbg !1431
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1431
  br i1 %10, label %after_check, label %assign_optional, !dbg !1431

assign_optional:                                  ; preds = %if.then
  store i64 %9, ptr %error_var, align 8, !dbg !1431
  br label %guard_block, !dbg !1431

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !1431

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !1431
  ret i64 %11, !dbg !1431

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !1431

if.exit:                                          ; preds = %noerr_block, %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !1432
  %ptradd2 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !1432
  %13 = load i64, ptr %ptradd2, align 8, !dbg !1432
  %14 = load ptr, ptr %self, align 8, !dbg !1433
  %ptradd3 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !1433
  %15 = load i64, ptr %ptradd3, align 8, !dbg !1433
  %eq4 = icmp eq i64 %13, %15, !dbg !1432
  br i1 %eq4, label %if.then5, label %if.exit6, !dbg !1432

if.then5:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1434

if.exit6:                                         ; preds = %if.exit
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1435, metadata !DIExpression()), !dbg !1436
  %16 = load ptr, ptr %self, align 8, !dbg !1437
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1437
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 8, !dbg !1437
  %17 = load i64, ptr %ptradd8, align 8, !dbg !1437
  %18 = load ptr, ptr %ptradd7, align 8, !dbg !1437
  %19 = load ptr, ptr %self, align 8, !dbg !1438
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !1438
  %20 = load i64, ptr %ptradd9, align 8, !dbg !1438
  %ge = icmp uge i64 %20, %17, !dbg !1438
  %21 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1438
  br i1 %21, label %panic10, label %checkok13, !dbg !1438

checkok13:                                        ; preds = %if.exit6
  %ptradd14 = getelementptr inbounds i8, ptr %18, i64 %20, !dbg !1438
  %22 = load i8, ptr %ptradd14, align 1, !dbg !1438
  store i8 %22, ptr %c, align 1, !dbg !1438
  %23 = load ptr, ptr %self, align 8, !dbg !1439
  %ptradd15 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !1439
  %24 = load i64, ptr %ptradd15, align 8, !dbg !1439
  %add = add i64 %24, 1, !dbg !1439
  store i64 %add, ptr %ptradd15, align 8, !dbg !1439
  %25 = load i8, ptr %c, align 1, !dbg !1440
  store i8 %25, ptr %0, align 1, !dbg !1440
  ret i64 0, !dbg !1440

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1428
  call void %26(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.70, i64 9, i32 49), !dbg !1428
  unreachable, !dbg !1428

panic10:                                          ; preds = %if.exit6
  store i64 %17, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr11, align 8
  %29 = insertvalue %any undef, ptr %taddr11, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %28, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd12, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.102, i64 9, ptr @.func.70, i64 9, i32 53, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1438
  unreachable, !dbg !1438
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.ReadBuffer.refill(ptr %0) #0 !dbg !1441 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1442
  %1 = icmp eq ptr %0, null, !dbg !1442
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1442
  br i1 %2, label %panic, label %checkok, !dbg !1442

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1443, metadata !DIExpression()), !dbg !1444
  %3 = load ptr, ptr %self, align 8, !dbg !1445
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !1445
  store i64 0, ptr %ptradd, align 8, !dbg !1446
  %4 = load ptr, ptr %self, align 8, !dbg !1447
  %ptradd1 = getelementptr inbounds i8, ptr %4, i64 40, !dbg !1447
  %5 = load ptr, ptr %self, align 8, !dbg !1448
  %6 = load ptr, ptr %self, align 8, !dbg !1449
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1449
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1449
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1449
  %8 = inttoptr i64 %7 to ptr, !dbg !1449
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1442
  %9 = icmp eq ptr %8, %type, !dbg !1442
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !1442

cache_miss:                                       ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1442
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !1442
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read"), !dbg !1442
  store ptr %11, ptr %.inlinecache, align 8, !dbg !1442
  store ptr %8, ptr %.cachedtype, align 8, !dbg !1442
  br label %12, !dbg !1442

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1442
  br label %12, !dbg !1442

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !1442
  %13 = icmp eq ptr %fn_phi, null, !dbg !1442
  br i1 %13, label %missing_function, label %match, !dbg !1442

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1448
  call void %14(ptr @.panic_msg.81, i64 41, ptr @.file.102, i64 9, ptr @.func.104, i64 6, i32 61), !dbg !1448
  unreachable, !dbg !1448

match:                                            ; preds = %12
  %15 = load ptr, ptr %5, align 8
  %lo = load ptr, ptr %ptradd2, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd2, i64 8
  %hi = load i64, ptr %ptradd5, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15, ptr %lo, i64 %hi), !dbg !1448
  %not_err = icmp eq i64 %16, 0, !dbg !1448
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1448
  br i1 %17, label %after_check, label %assign_optional, !dbg !1448

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !1448
  br label %guard_block, !dbg !1448

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1448

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !1448
  ret i64 %18, !dbg !1448

noerr_block:                                      ; preds = %after_check
  %19 = load i64, ptr %retparam, align 8, !dbg !1448
  store i64 %19, ptr %ptradd1, align 8, !dbg !1448
  ret i64 0, !dbg !1448

panic:                                            ; preds = %entry
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1444
  call void %20(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.104, i64 6, i32 58), !dbg !1444
  unreachable, !dbg !1444
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.WriteBuffer.init(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4) #0 comdat !dbg !1450 {
entry:
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %bytes = alloca %"char[]", align 8
  %.assign_list = alloca %WriteBuffer, align 8
  %5 = icmp eq ptr %0, null, !dbg !1459
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1459
  br i1 %6, label %panic, label %checkok, !dbg !1459

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1460, metadata !DIExpression()), !dbg !1461
  store i64 %1, ptr %wrapped_stream, align 8
  %ptradd = getelementptr inbounds i8, ptr %wrapped_stream, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %wrapped_stream, metadata !1462, metadata !DIExpression()), !dbg !1463
  store ptr %3, ptr %bytes, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1464, metadata !DIExpression()), !dbg !1465
  %ptradd2 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1466
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1466
  %lt = icmp ult i64 0, %7, !dbg !1466
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1466

assert_fail:                                      ; preds = %checkok
  %8 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1466
  call void %8(ptr @.panic_msg.105, i64 63, ptr @.file.102, i64 9, ptr @.func, i64 4, i32 74), !dbg !1466
  unreachable, !dbg !1466

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1468
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1468
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !1468
  %10 = load i64, ptr %ptradd4, align 8, !dbg !1468
  %eq = icmp eq i64 0, %10, !dbg !1468
  br i1 %eq, label %assert_ok6, label %assert_fail5, !dbg !1468

assert_fail5:                                     ; preds = %assert_ok
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1468
  call void %11(ptr @.panic_msg.88, i64 88, ptr @.file.102, i64 9, ptr @.func, i64 4, i32 75), !dbg !1468
  unreachable, !dbg !1468

assert_ok6:                                       ; preds = %assert_ok
  %12 = load ptr, ptr %self, align 8, !dbg !1469
  %checknull = icmp eq ptr %12, null, !dbg !1469
  %13 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1469
  br i1 %13, label %panic7, label %checkok8, !dbg !1469

checkok8:                                         ; preds = %assert_ok6
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !1470
  %ptradd9 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !1470
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd9, ptr align 8 %bytes, i32 16, i1 false), !dbg !1471
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %12, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !1471
  %14 = load ptr, ptr %self, align 8, !dbg !1472
  ret ptr %14, !dbg !1472

panic:                                            ; preds = %entry
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1461
  call void %15(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func, i64 4, i32 77), !dbg !1461
  unreachable, !dbg !1461

panic7:                                           ; preds = %assert_ok6
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1469
  call void %16(ptr @.panic_msg.36, i64 45, ptr @.file.102, i64 9, ptr @.func, i64 4, i32 79), !dbg !1469
  unreachable, !dbg !1469
}

; Function Attrs: nounwind ssp uwtable
define weak { ptr, i64 } @std.io.WriteBuffer.str_view(ptr %0) #0 comdat !dbg !1473 {
entry:
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %varargslots9 = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1476
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1476
  br i1 %2, label %panic, label %checkok, !dbg !1476

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1477, metadata !DIExpression()), !dbg !1478
  %3 = load ptr, ptr %self, align 8, !dbg !1479
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1479
  %4 = load %"char[]", ptr %ptradd, align 8, !dbg !1479
  %5 = extractvalue %"char[]" %4, 0, !dbg !1479
  %6 = extractvalue %"char[]" %4, 1, !dbg !1480
  %gt = icmp ugt i64 0, %6, !dbg !1480
  %7 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1480
  br i1 %7, label %panic1, label %checkok4, !dbg !1480

checkok4:                                         ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1481
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 32, !dbg !1481
  %9 = load i64, ptr %ptradd5, align 8, !dbg !1481
  %add = add i64 0, %9, !dbg !1481
  %lt = icmp ult i64 %6, %add, !dbg !1481
  %sub = sub i64 %add, 1, !dbg !1481
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1481
  br i1 %10, label %panic6, label %checkok13, !dbg !1481

checkok13:                                        ; preds = %checkok4
  %size = sub i64 %add, 0, !dbg !1482
  %11 = insertvalue %"char[]" undef, ptr %5, 0, !dbg !1482
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !1482
  store %"char[]" %12, ptr %taddr14, align 8
  %13 = load { ptr, i64 }, ptr %taddr14, align 8
  ret { ptr, i64 } %13

panic:                                            ; preds = %entry
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1478
  call void %14(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.92, i64 8, i32 83), !dbg !1478
  unreachable, !dbg !1478

panic1:                                           ; preds = %checkok
  store i64 %6, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %17 = insertvalue %any undef, ptr %taddr2, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %16, ptr %varargslots, align 16
  %ptradd3 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd3, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.102, i64 9, ptr @.func.92, i64 8, i32 85, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1482
  unreachable, !dbg !1482

panic6:                                           ; preds = %checkok4
  store i64 %sub, ptr %taddr7, align 8
  %20 = insertvalue %any undef, ptr %taddr7, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr8, align 8
  %22 = insertvalue %any undef, ptr %taddr8, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots9, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots9, i64 16
  store %any %23, ptr %ptradd10, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots9, 0
  %"$$temp11" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp11", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.102, i64 9, ptr @.func.92, i64 8, i32 85, ptr byval(%"any[]") align 8 %indirectarg12), !dbg !1482
  unreachable, !dbg !1482
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.close(ptr %0) #0 comdat !dbg !1483 {
entry:
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype4, align 8, !dbg !1486
  store ptr null, ptr %.cachedtype, align 8, !dbg !1486
  %1 = icmp eq ptr %0, null, !dbg !1486
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1486
  br i1 %2, label %panic, label %checkok, !dbg !1486

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1487, metadata !DIExpression()), !dbg !1488
  %3 = load ptr, ptr %self, align 8, !dbg !1489
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !1489
  %4 = load i64, ptr %ptradd, align 8, !dbg !1489
  %5 = inttoptr i64 %4 to ptr, !dbg !1489
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1486
  %6 = icmp eq ptr %5, %type, !dbg !1486
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !1486

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1486
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !1486
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !1486
  store ptr %8, ptr %.inlinecache, align 8, !dbg !1486
  store ptr %5, ptr %.cachedtype, align 8, !dbg !1486
  br label %9, !dbg !1486

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1486
  br label %9, !dbg !1486

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !1486
  %ptrbool = icmp ne ptr %fn_phi, null, !dbg !1486
  br i1 %ptrbool, label %if.then, label %if.exit, !dbg !1486

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !1490
  %ptradd2 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1490
  %11 = load i64, ptr %ptradd2, align 8, !dbg !1490
  %12 = inttoptr i64 %11 to ptr, !dbg !1490
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !1486
  %13 = icmp eq ptr %12, %type5, !dbg !1486
  br i1 %13, label %cache_hit8, label %cache_miss6, !dbg !1486

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1486
  %14 = load ptr, ptr %ptradd7, align 8, !dbg !1486
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !1486
  store ptr %15, ptr %.inlinecache3, align 8, !dbg !1486
  store ptr %12, ptr %.cachedtype4, align 8, !dbg !1486
  br label %16, !dbg !1486

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !1486
  br label %16, !dbg !1486

16:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %15, %cache_miss6 ], !dbg !1486
  %17 = icmp eq ptr %fn_phi10, null, !dbg !1486
  br i1 %17, label %missing_function, label %match, !dbg !1486

missing_function:                                 ; preds = %16
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1490
  call void %18(ptr @.panic_msg.80, i64 42, ptr @.file.102, i64 9, ptr @.func.79, i64 5, i32 90), !dbg !1490
  unreachable, !dbg !1490

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !1490
  %20 = call i64 %fn_phi10(ptr %19), !dbg !1490
  %not_err = icmp eq i64 %20, 0, !dbg !1490
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1490
  br i1 %21, label %after_check, label %assign_optional, !dbg !1490

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !1490
  br label %err_retblock, !dbg !1490

after_check:                                      ; preds = %match
  ret i64 0, !dbg !1490

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !1490
  ret i64 %22, !dbg !1490

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !1490

panic:                                            ; preds = %entry
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1488
  call void %23(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.79, i64 5, i32 88), !dbg !1488
  unreachable, !dbg !1488
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.flush(ptr %0) #0 comdat !dbg !1491 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var2 = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype5, align 8, !dbg !1492
  store ptr null, ptr %.cachedtype, align 8, !dbg !1492
  %1 = icmp eq ptr %0, null, !dbg !1492
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1492
  br i1 %2, label %panic, label %checkok, !dbg !1492

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1493, metadata !DIExpression()), !dbg !1494
  %3 = load ptr, ptr %self, align 8, !dbg !1495
  %4 = call i64 @std.io.WriteBuffer.write_pending(ptr %3), !dbg !1495
  %not_err = icmp eq i64 %4, 0, !dbg !1495
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1495
  br i1 %5, label %after_check, label %assign_optional, !dbg !1495

assign_optional:                                  ; preds = %checkok
  store i64 %4, ptr %error_var, align 8, !dbg !1495
  br label %guard_block, !dbg !1495

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1495

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !1495
  ret i64 %6, !dbg !1495

noerr_block:                                      ; preds = %after_check
  %7 = load ptr, ptr %self, align 8, !dbg !1496
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1496
  %8 = load i64, ptr %ptradd, align 8, !dbg !1496
  %9 = inttoptr i64 %8 to ptr, !dbg !1496
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1492
  %10 = icmp eq ptr %9, %type, !dbg !1492
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !1492

cache_miss:                                       ; preds = %noerr_block
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1492
  %11 = load ptr, ptr %ptradd1, align 8, !dbg !1492
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.flush"), !dbg !1492
  store ptr %12, ptr %.inlinecache, align 8, !dbg !1492
  store ptr %9, ptr %.cachedtype, align 8, !dbg !1492
  br label %13, !dbg !1492

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1492
  br label %13, !dbg !1492

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !1492
  %ptrbool = icmp ne ptr %fn_phi, null, !dbg !1492
  br i1 %ptrbool, label %if.then, label %if.exit, !dbg !1492

if.then:                                          ; preds = %13
  %14 = load ptr, ptr %self, align 8, !dbg !1497
  %ptradd3 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !1497
  %15 = load i64, ptr %ptradd3, align 8, !dbg !1497
  %16 = inttoptr i64 %15 to ptr, !dbg !1497
  %type6 = load ptr, ptr %.cachedtype5, align 8, !dbg !1492
  %17 = icmp eq ptr %16, %type6, !dbg !1492
  br i1 %17, label %cache_hit9, label %cache_miss7, !dbg !1492

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1492
  %18 = load ptr, ptr %ptradd8, align 8, !dbg !1492
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.flush"), !dbg !1492
  store ptr %19, ptr %.inlinecache4, align 8, !dbg !1492
  store ptr %16, ptr %.cachedtype5, align 8, !dbg !1492
  br label %20, !dbg !1492

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8, !dbg !1492
  br label %20, !dbg !1492

20:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %19, %cache_miss7 ], !dbg !1492
  %21 = icmp eq ptr %fn_phi11, null, !dbg !1492
  br i1 %21, label %missing_function, label %match, !dbg !1492

missing_function:                                 ; preds = %20
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1497
  call void %22(ptr @.panic_msg.106, i64 42, ptr @.file.102, i64 9, ptr @.func.43, i64 5, i32 96), !dbg !1497
  unreachable, !dbg !1497

match:                                            ; preds = %20
  %23 = load ptr, ptr %14, align 8, !dbg !1497
  %24 = call i64 %fn_phi11(ptr %23), !dbg !1497
  %not_err12 = icmp eq i64 %24, 0, !dbg !1497
  %25 = call i1 @llvm.expect.i1(i1 %not_err12, i1 true), !dbg !1497
  br i1 %25, label %after_check14, label %assign_optional13, !dbg !1497

assign_optional13:                                ; preds = %match
  store i64 %24, ptr %error_var2, align 8, !dbg !1497
  br label %guard_block15, !dbg !1497

after_check14:                                    ; preds = %match
  br label %noerr_block16, !dbg !1497

guard_block15:                                    ; preds = %assign_optional13
  %26 = load i64, ptr %error_var2, align 8, !dbg !1497
  ret i64 %26, !dbg !1497

noerr_block16:                                    ; preds = %after_check14
  br label %if.exit, !dbg !1497

if.exit:                                          ; preds = %noerr_block16, %13
  ret i64 0, !dbg !1497

panic:                                            ; preds = %entry
  %27 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1494
  call void %27(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.43, i64 5, i32 93), !dbg !1494
  unreachable, !dbg !1494
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.write(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1498 {
entry:
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots15 = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %reterr53 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %taddr64 = alloca i64, align 8
  %varargslots65 = alloca [2 x %any], align 16
  %indirectarg68 = alloca %"any[]", align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca i64, align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %taddr86 = alloca i64, align 8
  %taddr87 = alloca i64, align 8
  %varargslots88 = alloca [2 x %any], align 16
  %indirectarg91 = alloca %"any[]", align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %taddr100 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %varargslots102 = alloca [2 x %any], align 16
  %indirectarg105 = alloca %"any[]", align 8
  %reterr109 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1501
  %4 = icmp eq ptr %1, null, !dbg !1501
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1501
  br i1 %5, label %panic, label %checkok, !dbg !1501

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1502, metadata !DIExpression()), !dbg !1503
  store ptr %2, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1504, metadata !DIExpression()), !dbg !1505
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1506, metadata !DIExpression()), !dbg !1507
  %6 = load ptr, ptr %self, align 8, !dbg !1508
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1508
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 8, !dbg !1508
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1508
  %8 = load ptr, ptr %self, align 8, !dbg !1509
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 32, !dbg !1509
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1509
  %sub = sub i64 %7, %9, !dbg !1508
  store i64 %sub, ptr %n, align 8, !dbg !1508
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1510
  %10 = load i64, ptr %ptradd4, align 8, !dbg !1510
  %11 = load i64, ptr %n, align 8, !dbg !1511
  %lt = icmp ult i64 %10, %11, !dbg !1510
  br i1 %lt, label %if.then, label %if.exit, !dbg !1510

if.then:                                          ; preds = %checkok
  %12 = load %"char[]", ptr %bytes, align 8, !dbg !1512
  %13 = extractvalue %"char[]" %12, 0, !dbg !1512
  %14 = extractvalue %"char[]" %12, 1, !dbg !1514
  %gt = icmp ugt i64 0, %14, !dbg !1514
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1514
  br i1 %15, label %panic5, label %checkok8, !dbg !1514

checkok8:                                         ; preds = %if.then
  %size = sub i64 %14, 0, !dbg !1512
  %16 = insertvalue %"char[]" undef, ptr %13, 0, !dbg !1512
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1512
  %18 = load ptr, ptr %self, align 8, !dbg !1515
  %ptradd9 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !1515
  %19 = load %"char[]", ptr %ptradd9, align 8, !dbg !1515
  %20 = extractvalue %"char[]" %19, 0, !dbg !1515
  %21 = load ptr, ptr %self, align 8, !dbg !1516
  %ptradd10 = getelementptr inbounds i8, ptr %21, i64 32, !dbg !1516
  %22 = load i64, ptr %ptradd10, align 8, !dbg !1516
  %23 = extractvalue %"char[]" %19, 1, !dbg !1516
  %gt11 = icmp ugt i64 %22, %23, !dbg !1516
  %24 = call i1 @llvm.expect.i1(i1 %gt11, i1 false), !dbg !1516
  br i1 %24, label %panic12, label %checkok19, !dbg !1516

checkok19:                                        ; preds = %checkok8
  %ptradd20 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1517
  %25 = load i64, ptr %ptradd20, align 8, !dbg !1517
  %add = add i64 %22, %25, !dbg !1517
  %lt21 = icmp ult i64 %23, %add, !dbg !1517
  %sub22 = sub i64 %add, 1, !dbg !1517
  %26 = call i1 @llvm.expect.i1(i1 %lt21, i1 false), !dbg !1517
  br i1 %26, label %panic23, label %checkok30, !dbg !1517

checkok30:                                        ; preds = %checkok19
  %size31 = sub i64 %add, %22, !dbg !1515
  %ptradd32 = getelementptr inbounds i8, ptr %20, i64 %22, !dbg !1515
  %27 = insertvalue %"char[]" undef, ptr %ptradd32, 0, !dbg !1515
  %28 = insertvalue %"char[]" %27, i64 %size31, 1, !dbg !1515
  %29 = extractvalue %"char[]" %28, 0, !dbg !1515
  %30 = extractvalue %"char[]" %17, 0, !dbg !1515
  store %"char[]" %17, ptr %taddr33, align 8
  %ptradd34 = getelementptr inbounds i8, ptr %taddr33, i64 8
  %31 = load i64, ptr %ptradd34, align 8
  store %"char[]" %28, ptr %taddr35, align 8
  %ptradd36 = getelementptr inbounds i8, ptr %taddr35, i64 8
  %32 = load i64, ptr %ptradd36, align 8
  %neq = icmp ne i64 %32, %31
  %33 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %33, label %panic37, label %checkok44

checkok44:                                        ; preds = %checkok30
  %34 = mul i64 %31, 1, !dbg !1515
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %29, ptr align 1 %30, i64 %34, i1 false), !dbg !1515
  %35 = load ptr, ptr %self, align 8, !dbg !1518
  %ptradd45 = getelementptr inbounds i8, ptr %35, i64 32, !dbg !1518
  %36 = load i64, ptr %ptradd45, align 8, !dbg !1518
  %ptradd46 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1519
  %37 = load i64, ptr %ptradd46, align 8, !dbg !1519
  %add47 = add i64 %36, %37, !dbg !1518
  store i64 %add47, ptr %ptradd45, align 8, !dbg !1518
  %ptradd48 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1520
  %38 = load i64, ptr %ptradd48, align 8, !dbg !1520
  store i64 %38, ptr %0, align 8, !dbg !1520
  ret i64 0, !dbg !1520

if.exit:                                          ; preds = %checkok
  %39 = load ptr, ptr %self, align 8, !dbg !1521
  %40 = call i64 @std.io.WriteBuffer.write_pending(ptr %39), !dbg !1521
  %not_err = icmp eq i64 %40, 0, !dbg !1521
  %41 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1521
  br i1 %41, label %after_check, label %assign_optional, !dbg !1521

assign_optional:                                  ; preds = %if.exit
  store i64 %40, ptr %error_var, align 8, !dbg !1521
  br label %guard_block, !dbg !1521

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !1521

guard_block:                                      ; preds = %assign_optional
  %42 = load i64, ptr %error_var, align 8, !dbg !1521
  ret i64 %42, !dbg !1521

noerr_block:                                      ; preds = %after_check
  %ptradd49 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1522
  %43 = load i64, ptr %ptradd49, align 8, !dbg !1522
  %44 = load ptr, ptr %self, align 8, !dbg !1523
  %ptradd50 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !1523
  %ptradd51 = getelementptr inbounds i8, ptr %ptradd50, i64 8, !dbg !1523
  %45 = load i64, ptr %ptradd51, align 8, !dbg !1523
  %ge = icmp uge i64 %43, %45, !dbg !1522
  br i1 %ge, label %if.then52, label %if.exit60, !dbg !1522

if.then52:                                        ; preds = %noerr_block
  %46 = load ptr, ptr %self, align 8, !dbg !1524
  %ptradd54 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !1526
  %47 = load i64, ptr %ptradd54, align 8, !dbg !1526
  %48 = inttoptr i64 %47 to ptr, !dbg !1526
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1501
  %49 = icmp eq ptr %48, %type, !dbg !1501
  br i1 %49, label %cache_hit, label %cache_miss, !dbg !1501

cache_miss:                                       ; preds = %if.then52
  %ptradd55 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !1501
  %50 = load ptr, ptr %ptradd55, align 8, !dbg !1501
  %51 = call ptr @.dyn_search(ptr %50, ptr @"$sel.write"), !dbg !1501
  store ptr %51, ptr %.inlinecache, align 8, !dbg !1501
  store ptr %48, ptr %.cachedtype, align 8, !dbg !1501
  br label %52, !dbg !1501

cache_hit:                                        ; preds = %if.then52
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1501
  br label %52, !dbg !1501

52:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %51, %cache_miss ], !dbg !1501
  %53 = icmp eq ptr %fn_phi, null, !dbg !1501
  br i1 %53, label %missing_function, label %match, !dbg !1501

missing_function:                                 ; preds = %52
  %54 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1524
  call void %54(ptr @.panic_msg.51, i64 42, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 113), !dbg !1524
  unreachable, !dbg !1524

match:                                            ; preds = %52
  %55 = load ptr, ptr %46, align 8
  %lo = load ptr, ptr %bytes, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %bytes, i64 8
  %hi = load i64, ptr %ptradd56, align 8
  %56 = call i64 %fn_phi(ptr %retparam, ptr %55, ptr %lo, i64 %hi), !dbg !1524
  %not_err57 = icmp eq i64 %56, 0, !dbg !1524
  %57 = call i1 @llvm.expect.i1(i1 %not_err57, i1 true), !dbg !1524
  br i1 %57, label %after_check59, label %assign_optional58, !dbg !1524

assign_optional58:                                ; preds = %match
  store i64 %56, ptr %reterr53, align 8, !dbg !1524
  br label %err_retblock, !dbg !1524

after_check59:                                    ; preds = %match
  %58 = load i64, ptr %retparam, align 8, !dbg !1524
  store i64 %58, ptr %0, align 8, !dbg !1524
  ret i64 0, !dbg !1524

err_retblock:                                     ; preds = %assign_optional58
  %59 = load i64, ptr %reterr53, align 8, !dbg !1524
  ret i64 %59, !dbg !1524

if.exit60:                                        ; preds = %noerr_block
  %60 = load %"char[]", ptr %bytes, align 8, !dbg !1527
  %61 = extractvalue %"char[]" %60, 0, !dbg !1527
  %62 = extractvalue %"char[]" %60, 1, !dbg !1528
  %gt61 = icmp ugt i64 0, %62, !dbg !1528
  %63 = call i1 @llvm.expect.i1(i1 %gt61, i1 false), !dbg !1528
  br i1 %63, label %panic62, label %checkok69, !dbg !1528

checkok69:                                        ; preds = %if.exit60
  %size70 = sub i64 %62, 0, !dbg !1527
  %64 = insertvalue %"char[]" undef, ptr %61, 0, !dbg !1527
  %65 = insertvalue %"char[]" %64, i64 %size70, 1, !dbg !1527
  %66 = load ptr, ptr %self, align 8, !dbg !1529
  %ptradd71 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !1529
  %67 = load %"char[]", ptr %ptradd71, align 8, !dbg !1529
  %68 = extractvalue %"char[]" %67, 0, !dbg !1529
  %69 = extractvalue %"char[]" %67, 1, !dbg !1530
  %gt72 = icmp ugt i64 0, %69, !dbg !1530
  %70 = call i1 @llvm.expect.i1(i1 %gt72, i1 false), !dbg !1530
  br i1 %70, label %panic73, label %checkok80, !dbg !1530

checkok80:                                        ; preds = %checkok69
  %ptradd81 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1531
  %71 = load i64, ptr %ptradd81, align 8, !dbg !1531
  %add82 = add i64 0, %71, !dbg !1531
  %lt83 = icmp ult i64 %69, %add82, !dbg !1531
  %sub84 = sub i64 %add82, 1, !dbg !1531
  %72 = call i1 @llvm.expect.i1(i1 %lt83, i1 false), !dbg !1531
  br i1 %72, label %panic85, label %checkok92, !dbg !1531

checkok92:                                        ; preds = %checkok80
  %size93 = sub i64 %add82, 0, !dbg !1529
  %73 = insertvalue %"char[]" undef, ptr %68, 0, !dbg !1529
  %74 = insertvalue %"char[]" %73, i64 %size93, 1, !dbg !1529
  %75 = extractvalue %"char[]" %74, 0, !dbg !1529
  %76 = extractvalue %"char[]" %65, 0, !dbg !1529
  store %"char[]" %65, ptr %taddr94, align 8
  %ptradd95 = getelementptr inbounds i8, ptr %taddr94, i64 8
  %77 = load i64, ptr %ptradd95, align 8
  store %"char[]" %74, ptr %taddr96, align 8
  %ptradd97 = getelementptr inbounds i8, ptr %taddr96, i64 8
  %78 = load i64, ptr %ptradd97, align 8
  %neq98 = icmp ne i64 %78, %77
  %79 = call i1 @llvm.expect.i1(i1 %neq98, i1 false)
  br i1 %79, label %panic99, label %checkok106

checkok106:                                       ; preds = %checkok92
  %80 = mul i64 %77, 1, !dbg !1529
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %75, ptr align 1 %76, i64 %80, i1 false), !dbg !1529
  %81 = load ptr, ptr %self, align 8, !dbg !1532
  %ptradd107 = getelementptr inbounds i8, ptr %81, i64 32, !dbg !1532
  %ptradd108 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1533
  %82 = load i64, ptr %ptradd108, align 8, !dbg !1533
  store i64 %82, ptr %ptradd107, align 8, !dbg !1533
  %ptradd110 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1534
  %83 = load i64, ptr %ptradd110, align 8, !dbg !1534
  store i64 %83, ptr %0, align 8, !dbg !1534
  ret i64 0, !dbg !1534

panic:                                            ; preds = %entry
  %84 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1503
  call void %84(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 99), !dbg !1503
  unreachable, !dbg !1503

panic5:                                           ; preds = %if.then
  store i64 %14, ptr %taddr, align 8
  %85 = insertvalue %any undef, ptr %taddr, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %87 = insertvalue %any undef, ptr %taddr6, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %86, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %88, ptr %ptradd7, align 16
  %89 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %89, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1512
  unreachable, !dbg !1512

panic12:                                          ; preds = %checkok8
  store i64 %23, ptr %taddr13, align 8
  %90 = insertvalue %any undef, ptr %taddr13, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr14, align 8
  %92 = insertvalue %any undef, ptr %taddr14, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %91, ptr %varargslots15, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots15, i64 16
  store %any %93, ptr %ptradd16, align 16
  %94 = insertvalue %"any[]" undef, ptr %varargslots15, 0
  %"$$temp17" = insertvalue %"any[]" %94, i64 2, 1
  store %"any[]" %"$$temp17", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg18), !dbg !1515
  unreachable, !dbg !1515

panic23:                                          ; preds = %checkok19
  store i64 %sub22, ptr %taddr24, align 8
  %95 = insertvalue %any undef, ptr %taddr24, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr25, align 8
  %97 = insertvalue %any undef, ptr %taddr25, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %96, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %98, ptr %ptradd27, align 16
  %99 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg29), !dbg !1515
  unreachable, !dbg !1515

panic37:                                          ; preds = %checkok30
  store i64 %32, ptr %taddr38, align 8
  %100 = insertvalue %any undef, ptr %taddr38, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %31, ptr %taddr39, align 8
  %102 = insertvalue %any undef, ptr %taddr39, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %101, ptr %varargslots40, align 16
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %103, ptr %ptradd41, align 16
  %104 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 38, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 105, ptr byval(%"any[]") align 8 %indirectarg43), !dbg !1515
  unreachable, !dbg !1515

panic62:                                          ; preds = %if.exit60
  store i64 %62, ptr %taddr63, align 8
  %105 = insertvalue %any undef, ptr %taddr63, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr64, align 8
  %107 = insertvalue %any undef, ptr %taddr64, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %106, ptr %varargslots65, align 16
  %ptradd66 = getelementptr inbounds i8, ptr %varargslots65, i64 16
  store %any %108, ptr %ptradd66, align 16
  %109 = insertvalue %"any[]" undef, ptr %varargslots65, 0
  %"$$temp67" = insertvalue %"any[]" %109, i64 2, 1
  store %"any[]" %"$$temp67", ptr %indirectarg68, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg68), !dbg !1527
  unreachable, !dbg !1527

panic73:                                          ; preds = %checkok69
  store i64 %69, ptr %taddr74, align 8
  %110 = insertvalue %any undef, ptr %taddr74, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr75, align 8
  %112 = insertvalue %any undef, ptr %taddr75, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %111, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %113, ptr %ptradd77, align 16
  %114 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg79), !dbg !1529
  unreachable, !dbg !1529

panic85:                                          ; preds = %checkok80
  store i64 %sub84, ptr %taddr86, align 8
  %115 = insertvalue %any undef, ptr %taddr86, 0
  %116 = insertvalue %any %115, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %69, ptr %taddr87, align 8
  %117 = insertvalue %any undef, ptr %taddr87, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %116, ptr %varargslots88, align 16
  %ptradd89 = getelementptr inbounds i8, ptr %varargslots88, i64 16
  store %any %118, ptr %ptradd89, align 16
  %119 = insertvalue %"any[]" undef, ptr %varargslots88, 0
  %"$$temp90" = insertvalue %"any[]" %119, i64 2, 1
  store %"any[]" %"$$temp90", ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg91), !dbg !1529
  unreachable, !dbg !1529

panic99:                                          ; preds = %checkok92
  store i64 %78, ptr %taddr100, align 8
  %120 = insertvalue %any undef, ptr %taddr100, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %77, ptr %taddr101, align 8
  %122 = insertvalue %any undef, ptr %taddr101, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %121, ptr %varargslots102, align 16
  %ptradd103 = getelementptr inbounds i8, ptr %varargslots102, i64 16
  store %any %123, ptr %ptradd103, align 16
  %124 = insertvalue %"any[]" undef, ptr %varargslots102, 0
  %"$$temp104" = insertvalue %"any[]" %124, i64 2, 1
  store %"any[]" %"$$temp104", ptr %indirectarg105, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.65, i64 38, ptr @.file.102, i64 9, ptr @.func.63, i64 5, i32 116, ptr byval(%"any[]") align 8 %indirectarg105), !dbg !1529
  unreachable, !dbg !1529
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.WriteBuffer.write_byte(ptr %0, i8 zeroext %1) #0 comdat !dbg !1535 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1538
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1538
  br i1 %3, label %panic, label %checkok, !dbg !1538

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1539, metadata !DIExpression()), !dbg !1540
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1541, metadata !DIExpression()), !dbg !1542
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1543, metadata !DIExpression()), !dbg !1544
  %4 = load ptr, ptr %self, align 8, !dbg !1545
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !1545
  %ptradd1 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !1545
  %5 = load i64, ptr %ptradd1, align 8, !dbg !1545
  %6 = load ptr, ptr %self, align 8, !dbg !1546
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !1546
  %7 = load i64, ptr %ptradd2, align 8, !dbg !1546
  %sub = sub i64 %5, %7, !dbg !1545
  store i64 %sub, ptr %n, align 8, !dbg !1545
  %8 = load i64, ptr %n, align 8, !dbg !1547
  %eq = icmp eq i64 0, %8, !dbg !1547
  br i1 %eq, label %if.then, label %if.exit, !dbg !1547

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1548
  %10 = call i64 @std.io.WriteBuffer.write_pending(ptr %9), !dbg !1548
  %not_err = icmp eq i64 %10, 0, !dbg !1548
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1548
  br i1 %11, label %after_check, label %assign_optional, !dbg !1548

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %error_var, align 8, !dbg !1548
  br label %guard_block, !dbg !1548

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !1548

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !1548
  ret i64 %12, !dbg !1548

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !1548

if.exit:                                          ; preds = %noerr_block, %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !1549
  %ptradd3 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1549
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 8, !dbg !1549
  %14 = load i64, ptr %ptradd4, align 8, !dbg !1549
  %15 = load ptr, ptr %ptradd3, align 8, !dbg !1549
  %ge = icmp sge i64 0, %14, !dbg !1550
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1550
  br i1 %16, label %panic5, label %checkok8, !dbg !1550

checkok8:                                         ; preds = %if.exit
  %17 = load i8, ptr %c, align 1, !dbg !1551
  store i8 %17, ptr %15, align 1, !dbg !1551
  %18 = load ptr, ptr %self, align 8, !dbg !1552
  %ptradd9 = getelementptr inbounds i8, ptr %18, i64 32, !dbg !1552
  store i64 1, ptr %ptradd9, align 8, !dbg !1553
  ret i64 0, !dbg !1553

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1540
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.66, i64 10, i32 121), !dbg !1540
  unreachable, !dbg !1540

panic5:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %20 = insertvalue %any undef, ptr %taddr, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %22 = insertvalue %any undef, ptr %taddr6, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %21, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %23, ptr %ptradd7, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.102, i64 9, ptr @.func.66, i64 10, i32 125, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1550
  unreachable, !dbg !1550
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.WriteBuffer.write_pending(ptr %0) #0 !dbg !1554 {
entry:
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots10 = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1555
  %1 = icmp eq ptr %0, null, !dbg !1555
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1555
  br i1 %2, label %panic, label %checkok, !dbg !1555

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1556, metadata !DIExpression()), !dbg !1557
  %3 = load ptr, ptr %self, align 8, !dbg !1558
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !1558
  %4 = load i64, ptr %ptradd, align 8, !dbg !1558
  %5 = load ptr, ptr %self, align 8, !dbg !1559
  %6 = load ptr, ptr %self, align 8, !dbg !1560
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1560
  %7 = load %"char[]", ptr %ptradd1, align 8, !dbg !1560
  %8 = extractvalue %"char[]" %7, 0, !dbg !1560
  %9 = extractvalue %"char[]" %7, 1, !dbg !1561
  %gt = icmp ugt i64 0, %9, !dbg !1561
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1561
  br i1 %10, label %panic2, label %checkok5, !dbg !1561

checkok5:                                         ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !1562
  %ptradd6 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !1562
  %12 = load i64, ptr %ptradd6, align 8, !dbg !1562
  %add = add i64 0, %12, !dbg !1562
  %lt = icmp ult i64 %9, %add, !dbg !1562
  %sub = sub i64 %add, 1, !dbg !1562
  %13 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1562
  br i1 %13, label %panic7, label %checkok14, !dbg !1562

checkok14:                                        ; preds = %checkok5
  %size = sub i64 %add, 0, !dbg !1560
  %14 = insertvalue %"char[]" undef, ptr %8, 0, !dbg !1560
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1560
  %ptradd15 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1560
  %16 = load i64, ptr %ptradd15, align 8, !dbg !1560
  %17 = inttoptr i64 %16 to ptr, !dbg !1560
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1555
  %18 = icmp eq ptr %17, %type, !dbg !1555
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !1555

cache_miss:                                       ; preds = %checkok14
  %ptradd16 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1555
  %19 = load ptr, ptr %ptradd16, align 8, !dbg !1555
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.write"), !dbg !1555
  store ptr %20, ptr %.inlinecache, align 8, !dbg !1555
  store ptr %17, ptr %.cachedtype, align 8, !dbg !1555
  br label %21, !dbg !1555

cache_hit:                                        ; preds = %checkok14
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1555
  br label %21, !dbg !1555

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !1555
  %22 = icmp eq ptr %fn_phi, null, !dbg !1555
  br i1 %22, label %missing_function, label %match, !dbg !1555

missing_function:                                 ; preds = %21
  %23 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1559
  call void %23(ptr @.panic_msg.51, i64 42, ptr @.file.102, i64 9, ptr @.func.107, i64 13, i32 131), !dbg !1559
  unreachable, !dbg !1559

match:                                            ; preds = %21
  %24 = load ptr, ptr %5, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, ptr %8, i64 %size), !dbg !1559
  %not_err = icmp eq i64 %25, 0, !dbg !1559
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1559
  br i1 %26, label %after_check, label %assign_optional, !dbg !1559

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !1559
  br label %guard_block, !dbg !1559

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1559

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !1559
  ret i64 %27, !dbg !1559

noerr_block:                                      ; preds = %after_check
  %28 = load i64, ptr %retparam, align 8, !dbg !1559
  %sub17 = sub i64 %4, %28, !dbg !1558
  store i64 %sub17, ptr %ptradd, align 8, !dbg !1558
  %29 = load ptr, ptr %self, align 8, !dbg !1563
  %ptradd18 = getelementptr inbounds i8, ptr %29, i64 32, !dbg !1563
  %30 = load i64, ptr %ptradd18, align 8, !dbg !1563
  %neq = icmp ne i64 0, %30, !dbg !1563
  br i1 %neq, label %if.then, label %if.exit, !dbg !1563

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), !dbg !1564

if.exit:                                          ; preds = %noerr_block
  ret i64 0, !dbg !1564

panic:                                            ; preds = %entry
  %31 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1557
  call void %31(ptr @.panic_msg, i64 62, ptr @.file.102, i64 9, ptr @.func.107, i64 13, i32 129), !dbg !1557
  unreachable, !dbg !1557

panic2:                                           ; preds = %checkok
  store i64 %9, ptr %taddr, align 8
  %32 = insertvalue %any undef, ptr %taddr, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr3, align 8
  %34 = insertvalue %any undef, ptr %taddr3, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %33, ptr %varargslots, align 16
  %ptradd4 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %35, ptr %ptradd4, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %36, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.102, i64 9, ptr @.func.107, i64 13, i32 131, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1560
  unreachable, !dbg !1560

panic7:                                           ; preds = %checkok5
  store i64 %sub, ptr %taddr8, align 8
  %37 = insertvalue %any undef, ptr %taddr8, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr9, align 8
  %39 = insertvalue %any undef, ptr %taddr9, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %38, ptr %varargslots10, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots10, i64 16
  store %any %40, ptr %ptradd11, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots10, 0
  %"$$temp12" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp12", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.102, i64 9, ptr @.func.107, i64 13, i32 131, ptr byval(%"any[]") align 8 %indirectarg13), !dbg !1560
  unreachable, !dbg !1560
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.fprintf(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4, ptr byval(%"any[]") align 8 %5) #0 comdat !dbg !1565 {
entry:
  %out = alloca %any, align 8
  %format = alloca %"char[]", align 8
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store i64 %1, ptr %out, align 8
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %out, metadata !1577, metadata !DIExpression()), !dbg !1578
  store ptr %3, ptr %format, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !1579, metadata !DIExpression()), !dbg !1580
  call void @llvm.dbg.declare(metadata ptr %5, metadata !1581, metadata !DIExpression()), !dbg !1582
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !1583, metadata !DIExpression()), !dbg !1600
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !1600
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %out), !dbg !1601
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %5, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %5, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !1602
  %not_err = icmp eq i64 %6, 0, !dbg !1602
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1602
  br i1 %7, label %after_check, label %assign_optional, !dbg !1602

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %reterr, align 8, !dbg !1602
  br label %err_retblock, !dbg !1602

after_check:                                      ; preds = %entry
  %8 = load i64, ptr %retparam, align 8, !dbg !1602
  store i64 %8, ptr %0, align 8, !dbg !1602
  ret i64 0, !dbg !1602

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !1602
  ret i64 %9, !dbg !1602
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.fprintfn(ptr %0, i64 %1, ptr %2, ptr %3, i64 %4, ptr byval(%"any[]") align 8 %5) #0 comdat !dbg !1603 {
entry:
  %out = alloca %any, align 8
  %format = alloca %"char[]", align 8
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var6 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %.inlinecache15 = alloca ptr, align 8
  %.cachedtype16 = alloca ptr, align 8
  %error_var23 = alloca i64, align 8
  %.inlinecache25 = alloca ptr, align 8
  %.cachedtype26 = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype26, align 8
  store ptr null, ptr %.cachedtype16, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %out, align 8
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %out, metadata !1604, metadata !DIExpression()), !dbg !1605
  store ptr %3, ptr %format, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !1606, metadata !DIExpression()), !dbg !1607
  call void @llvm.dbg.declare(metadata ptr %5, metadata !1608, metadata !DIExpression()), !dbg !1609
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !1610, metadata !DIExpression()), !dbg !1611
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !1611
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %out), !dbg !1612
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1613, metadata !DIExpression()), !dbg !1614
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %5, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %5, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !1615
  %not_err = icmp eq i64 %6, 0, !dbg !1615
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1615
  br i1 %7, label %after_check, label %assign_optional, !dbg !1615

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %error_var, align 8, !dbg !1615
  br label %guard_block, !dbg !1615

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !1615

guard_block:                                      ; preds = %assign_optional
  %8 = load i64, ptr %error_var, align 8, !dbg !1615
  ret i64 %8, !dbg !1615

noerr_block:                                      ; preds = %after_check
  %9 = load i64, ptr %retparam, align 8, !dbg !1615
  store i64 %9, ptr %len, align 8, !dbg !1615
  %ptradd7 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !1616
  %10 = load i64, ptr %ptradd7, align 8, !dbg !1616
  %11 = inttoptr i64 %10 to ptr, !dbg !1616
  %type = load ptr, ptr %.cachedtype, align 8
  %12 = icmp eq ptr %11, %type
  br i1 %12, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 16
  %13 = load ptr, ptr %ptradd8, align 8
  %14 = call ptr @.dyn_search(ptr %13, ptr @"$sel.write_byte")
  store ptr %14, ptr %.inlinecache, align 8
  store ptr %11, ptr %.cachedtype, align 8
  br label %15

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %15

15:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %14, %cache_miss ]
  %16 = icmp eq ptr %fn_phi, null
  br i1 %16, label %missing_function, label %match

missing_function:                                 ; preds = %15
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1617
  call void %17(ptr @.panic_msg.108, i64 47, ptr @.file.109, i64 5, ptr @.func.110, i64 8, i32 164), !dbg !1617
  unreachable, !dbg !1617

match:                                            ; preds = %15
  %18 = load ptr, ptr %out, align 8, !dbg !1617
  %19 = call i64 %fn_phi(ptr %18, i8 zeroext 10), !dbg !1617
  %not_err9 = icmp eq i64 %19, 0, !dbg !1617
  %20 = call i1 @llvm.expect.i1(i1 %not_err9, i1 true), !dbg !1617
  br i1 %20, label %after_check11, label %assign_optional10, !dbg !1617

assign_optional10:                                ; preds = %match
  store i64 %19, ptr %error_var6, align 8, !dbg !1617
  br label %guard_block12, !dbg !1617

after_check11:                                    ; preds = %match
  br label %noerr_block13, !dbg !1617

guard_block12:                                    ; preds = %assign_optional10
  %21 = load i64, ptr %error_var6, align 8, !dbg !1617
  ret i64 %21, !dbg !1617

noerr_block13:                                    ; preds = %after_check11
  %ptradd14 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !1618
  %22 = load i64, ptr %ptradd14, align 8, !dbg !1618
  %23 = inttoptr i64 %22 to ptr, !dbg !1618
  %type17 = load ptr, ptr %.cachedtype16, align 8
  %24 = icmp eq ptr %23, %type17
  br i1 %24, label %cache_hit20, label %cache_miss18

cache_miss18:                                     ; preds = %noerr_block13
  %ptradd19 = getelementptr inbounds i8, ptr %23, i64 16
  %25 = load ptr, ptr %ptradd19, align 8
  %26 = call ptr @.dyn_search(ptr %25, ptr @"$sel.flush")
  store ptr %26, ptr %.inlinecache15, align 8
  store ptr %23, ptr %.cachedtype16, align 8
  br label %27

cache_hit20:                                      ; preds = %noerr_block13
  %cache_hit_fn21 = load ptr, ptr %.inlinecache15, align 8
  br label %27

27:                                               ; preds = %cache_hit20, %cache_miss18
  %fn_phi22 = phi ptr [ %cache_hit_fn21, %cache_hit20 ], [ %26, %cache_miss18 ]
  %ptrbool = icmp ne ptr %fn_phi22, null
  br i1 %ptrbool, label %if.then, label %if.exit

if.then:                                          ; preds = %27
  %ptradd24 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !1619
  %28 = load i64, ptr %ptradd24, align 8, !dbg !1619
  %29 = inttoptr i64 %28 to ptr, !dbg !1619
  %type27 = load ptr, ptr %.cachedtype26, align 8
  %30 = icmp eq ptr %29, %type27
  br i1 %30, label %cache_hit30, label %cache_miss28

cache_miss28:                                     ; preds = %if.then
  %ptradd29 = getelementptr inbounds i8, ptr %29, i64 16
  %31 = load ptr, ptr %ptradd29, align 8
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.flush")
  store ptr %32, ptr %.inlinecache25, align 8
  store ptr %29, ptr %.cachedtype26, align 8
  br label %33

cache_hit30:                                      ; preds = %if.then
  %cache_hit_fn31 = load ptr, ptr %.inlinecache25, align 8
  br label %33

33:                                               ; preds = %cache_hit30, %cache_miss28
  %fn_phi32 = phi ptr [ %cache_hit_fn31, %cache_hit30 ], [ %32, %cache_miss28 ]
  %34 = icmp eq ptr %fn_phi32, null
  br i1 %34, label %missing_function33, label %match34

missing_function33:                               ; preds = %33
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1619
  call void %35(ptr @.panic_msg.106, i64 42, ptr @.file.109, i64 5, ptr @.func.110, i64 8, i32 165), !dbg !1619
  unreachable, !dbg !1619

match34:                                          ; preds = %33
  %36 = load ptr, ptr %out, align 8, !dbg !1619
  %37 = call i64 %fn_phi32(ptr %36), !dbg !1619
  %not_err35 = icmp eq i64 %37, 0, !dbg !1619
  %38 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !1619
  br i1 %38, label %after_check37, label %assign_optional36, !dbg !1619

assign_optional36:                                ; preds = %match34
  store i64 %37, ptr %error_var23, align 8, !dbg !1619
  br label %guard_block38, !dbg !1619

after_check37:                                    ; preds = %match34
  br label %noerr_block39, !dbg !1619

guard_block38:                                    ; preds = %assign_optional36
  %39 = load i64, ptr %error_var23, align 8, !dbg !1619
  ret i64 %39, !dbg !1619

noerr_block39:                                    ; preds = %after_check37
  br label %if.exit, !dbg !1619

if.exit:                                          ; preds = %noerr_block39, %27
  %40 = load i64, ptr %len, align 8, !dbg !1620
  %add = add i64 %40, 1, !dbg !1620
  store i64 %add, ptr %0, align 8, !dbg !1620
  ret i64 0, !dbg !1620
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putstream_fn(ptr %0, i8 zeroext %1) #0 !dbg !1621 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %stream = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !1622, metadata !DIExpression()), !dbg !1623
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1624, metadata !DIExpression()), !dbg !1625
  call void @llvm.dbg.declare(metadata ptr %stream, metadata !1626, metadata !DIExpression()), !dbg !1628
  %2 = load ptr, ptr %data, align 8, !dbg !1629
  store ptr %2, ptr %stream, align 8, !dbg !1629
  %3 = load ptr, ptr %stream, align 8, !dbg !1630
  %checknull = icmp eq ptr %3, null, !dbg !1630
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1630
  br i1 %4, label %panic, label %checkok, !dbg !1630

checkok:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !1631
  %5 = load i64, ptr %ptradd, align 8, !dbg !1631
  %6 = inttoptr i64 %5 to ptr, !dbg !1631
  %type = load ptr, ptr %.cachedtype, align 8
  %7 = icmp eq ptr %6, %type
  br i1 %7, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %checkok
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16
  %8 = load ptr, ptr %ptradd1, align 8
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.write_byte")
  store ptr %9, ptr %.inlinecache, align 8
  store ptr %6, ptr %.cachedtype, align 8
  br label %10

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %10

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ]
  %11 = icmp eq ptr %fn_phi, null
  br i1 %11, label %missing_function, label %match

missing_function:                                 ; preds = %10
  %12 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1632
  call void %12(ptr @.panic_msg.108, i64 47, ptr @.file.109, i64 5, ptr @.func.112, i64 16, i32 225), !dbg !1632
  unreachable, !dbg !1632

match:                                            ; preds = %10
  %13 = load ptr, ptr %3, align 8, !dbg !1632
  %14 = load i8, ptr %c, align 1, !dbg !1632
  %15 = call i64 %fn_phi(ptr %13, i8 zeroext %14), !dbg !1632
  %not_err = icmp eq i64 %15, 0, !dbg !1632
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1632
  br i1 %16, label %after_check, label %assign_optional, !dbg !1632

assign_optional:                                  ; preds = %match
  store i64 %15, ptr %reterr, align 8, !dbg !1632
  br label %err_retblock, !dbg !1632

after_check:                                      ; preds = %match
  ret i64 0, !dbg !1632

err_retblock:                                     ; preds = %assign_optional
  %17 = load i64, ptr %reterr, align 8, !dbg !1632
  ret i64 %17, !dbg !1632

panic:                                            ; preds = %entry
  %18 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1630
  call void %18(ptr @.panic_msg.111, i64 47, ptr @.file.109, i64 5, ptr @.func.112, i64 16, i32 225), !dbg !1630
  unreachable, !dbg !1630
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putchar_fn(ptr %0, i8 zeroext %1) #0 !dbg !1633 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !1634, metadata !DIExpression()), !dbg !1635
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1636, metadata !DIExpression()), !dbg !1637
  %2 = load i8, ptr %c, align 1, !dbg !1638
  %zext = zext i8 %2 to i32, !dbg !1638
  %3 = call i32 @putchar(i32 %zext), !dbg !1639
  ret i64 0, !dbg !1639
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.printf(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !1640 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !1643, metadata !DIExpression()), !dbg !1644
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !1645, metadata !DIExpression()), !dbg !1646
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !1647, metadata !DIExpression()), !dbg !1648
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !1648
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !1649
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %5 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !1650
  %not_err = icmp eq i64 %5, 0, !dbg !1650
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1650
  br i1 %6, label %after_check, label %assign_optional, !dbg !1650

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8, !dbg !1650
  br label %err_retblock, !dbg !1650

after_check:                                      ; preds = %entry
  %7 = load i64, ptr %retparam, align 8, !dbg !1650
  store i64 %7, ptr %0, align 8, !dbg !1650
  ret i64 0, !dbg !1650

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !1650
  ret i64 %8, !dbg !1650
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.printfn(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !1651 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !1652, metadata !DIExpression()), !dbg !1653
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !1654, metadata !DIExpression()), !dbg !1655
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !1656, metadata !DIExpression()), !dbg !1657
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !1657
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !1658
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1659, metadata !DIExpression()), !dbg !1660
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %5 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !1661
  %not_err = icmp eq i64 %5, 0, !dbg !1661
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1661
  br i1 %6, label %after_check, label %assign_optional, !dbg !1661

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %len.f, align 8, !dbg !1661
  br label %after_assign, !dbg !1661

after_check:                                      ; preds = %entry
  %7 = load i64, ptr %retparam, align 8, !dbg !1661
  store i64 %7, ptr %len, align 8, !dbg !1661
  store i64 0, ptr %len.f, align 8, !dbg !1661
  br label %after_assign, !dbg !1661

after_assign:                                     ; preds = %after_check, %assign_optional
  call void @std.io.putchar(i8 zeroext 10) #5, !dbg !1662
  %8 = call ptr @std.io.stdout(), !dbg !1663
  %9 = call i64 @std.io.File.flush(ptr %8), !dbg !1663
  %not_err6 = icmp eq i64 %9, 0, !dbg !1663
  %10 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !1663
  br i1 %10, label %after_check8, label %assign_optional7, !dbg !1663

assign_optional7:                                 ; preds = %after_assign
  store i64 %9, ptr %error_var, align 8, !dbg !1663
  br label %guard_block, !dbg !1663

after_check8:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !1663

guard_block:                                      ; preds = %assign_optional7
  %11 = load i64, ptr %error_var, align 8, !dbg !1663
  ret i64 %11, !dbg !1663

noerr_block:                                      ; preds = %after_check8
  %optval = load i64, ptr %len.f, align 8, !dbg !1664
  %not_err9 = icmp eq i64 %optval, 0, !dbg !1664
  %12 = call i1 @llvm.expect.i1(i1 %not_err9, i1 true), !dbg !1664
  br i1 %12, label %after_check11, label %assign_optional10, !dbg !1664

assign_optional10:                                ; preds = %noerr_block
  store i64 %optval, ptr %reterr, align 8, !dbg !1664
  br label %err_retblock, !dbg !1664

after_check11:                                    ; preds = %noerr_block
  %13 = load i64, ptr %len, align 8, !dbg !1664
  %add = add i64 %13, 1, !dbg !1664
  store i64 %add, ptr %0, align 8, !dbg !1664
  ret i64 0, !dbg !1664

err_retblock:                                     ; preds = %assign_optional10
  %14 = load i64, ptr %reterr, align 8, !dbg !1664
  ret i64 %14, !dbg !1664
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.eprintf(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !1665 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !1666, metadata !DIExpression()), !dbg !1667
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !1668, metadata !DIExpression()), !dbg !1669
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !1670, metadata !DIExpression()), !dbg !1671
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !1671
  call void @llvm.dbg.declare(metadata ptr %stream, metadata !1672, metadata !DIExpression()), !dbg !1673
  %5 = call ptr @std.io.stderr(), !dbg !1674
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !1674
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !1674
  store %any %7, ptr %stream, align 8, !dbg !1674
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !1675
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %8 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !1676
  %not_err = icmp eq i64 %8, 0, !dbg !1676
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1676
  br i1 %9, label %after_check, label %assign_optional, !dbg !1676

assign_optional:                                  ; preds = %entry
  store i64 %8, ptr %reterr, align 8, !dbg !1676
  br label %err_retblock, !dbg !1676

after_check:                                      ; preds = %entry
  %10 = load i64, ptr %retparam, align 8, !dbg !1676
  store i64 %10, ptr %0, align 8, !dbg !1676
  ret i64 0, !dbg !1676

err_retblock:                                     ; preds = %assign_optional
  %11 = load i64, ptr %reterr, align 8, !dbg !1676
  ret i64 %11, !dbg !1676
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.eprintfn(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4) #0 comdat !dbg !1677 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !1678, metadata !DIExpression()), !dbg !1679
  store ptr %3, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !1680, metadata !DIExpression()), !dbg !1681
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !1682, metadata !DIExpression()), !dbg !1683
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !1683
  call void @llvm.dbg.declare(metadata ptr %stream, metadata !1684, metadata !DIExpression()), !dbg !1685
  %5 = call ptr @std.io.stderr(), !dbg !1686
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !1686
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !1686
  store %any %7, ptr %stream, align 8, !dbg !1686
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !1687
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1688, metadata !DIExpression()), !dbg !1689
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %8 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !1690
  %not_err = icmp eq i64 %8, 0, !dbg !1690
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1690
  br i1 %9, label %after_check, label %assign_optional, !dbg !1690

assign_optional:                                  ; preds = %entry
  store i64 %8, ptr %len.f, align 8, !dbg !1690
  br label %after_assign, !dbg !1690

after_check:                                      ; preds = %entry
  %10 = load i64, ptr %retparam, align 8, !dbg !1690
  store i64 %10, ptr %len, align 8, !dbg !1690
  store i64 0, ptr %len.f, align 8, !dbg !1690
  br label %after_assign, !dbg !1690

after_assign:                                     ; preds = %after_check, %assign_optional
  %11 = call ptr @std.io.stderr(), !dbg !1691
  %12 = call i64 @std.io.File.write_byte(ptr %11, i8 zeroext 10), !dbg !1691
  %not_err6 = icmp eq i64 %12, 0, !dbg !1691
  %13 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !1691
  br i1 %13, label %after_check8, label %assign_optional7, !dbg !1691

assign_optional7:                                 ; preds = %after_assign
  store i64 %12, ptr %error_var, align 8, !dbg !1691
  br label %guard_block, !dbg !1691

after_check8:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !1691

guard_block:                                      ; preds = %assign_optional7
  %14 = load i64, ptr %error_var, align 8, !dbg !1691
  ret i64 %14, !dbg !1691

noerr_block:                                      ; preds = %after_check8
  %15 = call ptr @std.io.stderr(), !dbg !1692
  %16 = call i64 @std.io.File.flush(ptr %15), !dbg !1692
  %not_err10 = icmp eq i64 %16, 0, !dbg !1692
  %17 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !1692
  br i1 %17, label %after_check12, label %assign_optional11, !dbg !1692

assign_optional11:                                ; preds = %noerr_block
  store i64 %16, ptr %error_var9, align 8, !dbg !1692
  br label %guard_block13, !dbg !1692

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block14, !dbg !1692

guard_block13:                                    ; preds = %assign_optional11
  %18 = load i64, ptr %error_var9, align 8, !dbg !1692
  ret i64 %18, !dbg !1692

noerr_block14:                                    ; preds = %after_check12
  %optval = load i64, ptr %len.f, align 8, !dbg !1693
  %not_err15 = icmp eq i64 %optval, 0, !dbg !1693
  %19 = call i1 @llvm.expect.i1(i1 %not_err15, i1 true), !dbg !1693
  br i1 %19, label %after_check17, label %assign_optional16, !dbg !1693

assign_optional16:                                ; preds = %noerr_block14
  store i64 %optval, ptr %reterr, align 8, !dbg !1693
  br label %err_retblock, !dbg !1693

after_check17:                                    ; preds = %noerr_block14
  %20 = load i64, ptr %len, align 8, !dbg !1693
  %add = add i64 %20, 1, !dbg !1693
  store i64 %add, ptr %0, align 8, !dbg !1693
  ret i64 0, !dbg !1693

err_retblock:                                     ; preds = %assign_optional16
  %21 = load i64, ptr %reterr, align 8, !dbg !1693
  ret i64 %21, !dbg !1693
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.bprintf(ptr %0, ptr %1, i64 %2, ptr %3, i64 %4, ptr byval(%"any[]") align 8 %5) #0 comdat !dbg !1694 {
entry:
  %buffer = alloca %"char[]", align 8
  %format = alloca %"char[]", align 8
  %formatter = alloca %Formatter, align 8
  %data = alloca %BufferData, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %varargslots12 = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  store ptr %1, ptr %buffer, align 8
  %ptradd = getelementptr inbounds i8, ptr %buffer, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !1697, metadata !DIExpression()), !dbg !1698
  store ptr %3, ptr %format, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !1699, metadata !DIExpression()), !dbg !1700
  call void @llvm.dbg.declare(metadata ptr %5, metadata !1701, metadata !DIExpression()), !dbg !1702
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !1703, metadata !DIExpression()), !dbg !1704
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !1704
  call void @llvm.dbg.declare(metadata ptr %data, metadata !1705, metadata !DIExpression()), !dbg !1710
  call void @llvm.memset.p0.i64(ptr align 8 %data, i8 0, i64 24, i1 false), !dbg !1710
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %data, ptr align 8 %buffer, i32 16, i1 false), !dbg !1711
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_buffer_fn, ptr %data), !dbg !1712
  call void @llvm.dbg.declare(metadata ptr %size, metadata !1713, metadata !DIExpression()), !dbg !1714
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %5, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %5, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5), !dbg !1715
  %not_err = icmp eq i64 %6, 0, !dbg !1715
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1715
  br i1 %7, label %after_check, label %assign_optional, !dbg !1715

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %error_var, align 8, !dbg !1715
  br label %guard_block, !dbg !1715

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !1715

guard_block:                                      ; preds = %assign_optional
  %8 = load i64, ptr %error_var, align 8, !dbg !1715
  ret i64 %8, !dbg !1715

noerr_block:                                      ; preds = %after_check
  %9 = load i64, ptr %retparam, align 8, !dbg !1715
  store i64 %9, ptr %size, align 8, !dbg !1715
  %10 = load %"char[]", ptr %buffer, align 8, !dbg !1716
  %11 = extractvalue %"char[]" %10, 0, !dbg !1716
  %12 = extractvalue %"char[]" %10, 1, !dbg !1717
  %gt = icmp ugt i64 0, %12, !dbg !1717
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1717
  br i1 %13, label %panic, label %checkok, !dbg !1717

checkok:                                          ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %data, i64 16, !dbg !1718
  %14 = load i64, ptr %ptradd8, align 8, !dbg !1718
  %add = add i64 0, %14, !dbg !1718
  %lt = icmp ult i64 %12, %add, !dbg !1718
  %sub = sub i64 %add, 1, !dbg !1718
  %15 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1718
  br i1 %15, label %panic9, label %checkok16, !dbg !1718

checkok16:                                        ; preds = %checkok
  %size17 = sub i64 %add, 0, !dbg !1716
  %16 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1716
  %17 = insertvalue %"char[]" %16, i64 %size17, 1, !dbg !1716
  store %"char[]" %17, ptr %0, align 8, !dbg !1716
  ret i64 0, !dbg !1716

panic:                                            ; preds = %noerr_block
  store i64 %12, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %20 = insertvalue %any undef, ptr %taddr6, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %19, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd7, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.109, i64 5, ptr @.func.113, i64 7, i32 319, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1716
  unreachable, !dbg !1716

panic9:                                           ; preds = %checkok
  store i64 %sub, ptr %taddr10, align 8
  %23 = insertvalue %any undef, ptr %taddr10, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr11, align 8
  %25 = insertvalue %any undef, ptr %taddr11, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %24, ptr %varargslots12, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots12, i64 16
  store %any %26, ptr %ptradd13, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots12, 0
  %"$$temp14" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp14", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.109, i64 5, ptr @.func.113, i64 7, i32 319, ptr byval(%"any[]") align 8 %indirectarg15), !dbg !1716
  unreachable, !dbg !1716
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_buffer_fn(ptr %0, i8 zeroext %1) #0 !dbg !1719 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %buffer_data = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  store ptr %0, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !1720, metadata !DIExpression()), !dbg !1721
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1722, metadata !DIExpression()), !dbg !1723
  call void @llvm.dbg.declare(metadata ptr %buffer_data, metadata !1724, metadata !DIExpression()), !dbg !1726
  %2 = load ptr, ptr %data, align 8, !dbg !1727
  store ptr %2, ptr %buffer_data, align 8, !dbg !1727
  %3 = load ptr, ptr %buffer_data, align 8, !dbg !1728
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1728
  %4 = load i64, ptr %ptradd, align 8, !dbg !1728
  %5 = load ptr, ptr %buffer_data, align 8, !dbg !1729
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1729
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1729
  %ge = icmp uge i64 %4, %6, !dbg !1728
  br i1 %ge, label %if.then, label %if.exit, !dbg !1728

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), !dbg !1730

if.exit:                                          ; preds = %entry
  %7 = load ptr, ptr %buffer_data, align 8, !dbg !1731
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1731
  %8 = load i64, ptr %ptradd2, align 8, !dbg !1731
  %9 = load ptr, ptr %7, align 8, !dbg !1731
  %10 = load ptr, ptr %buffer_data, align 8, !dbg !1732
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1732
  %11 = load i64, ptr %ptradd3, align 8, !dbg !1732
  %add = add i64 %11, 1, !dbg !1732
  store i64 %add, ptr %ptradd3, align 8, !dbg !1732
  %ge4 = icmp uge i64 %11, %8, !dbg !1732
  %12 = call i1 @llvm.expect.i1(i1 %ge4, i1 false), !dbg !1732
  br i1 %12, label %panic, label %checkok, !dbg !1732

checkok:                                          ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 %11, !dbg !1732
  %13 = load i8, ptr %c, align 1, !dbg !1733
  store i8 %13, ptr %ptradd7, align 1, !dbg !1733
  ret i64 0, !dbg !1733

panic:                                            ; preds = %if.exit
  store i64 %8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr5, align 8
  %16 = insertvalue %any undef, ptr %taddr5, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %15, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd6, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.109, i64 5, ptr @.func.114, i64 13, i32 327, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1732
  unreachable, !dbg !1732
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.putchar(i8 zeroext %0) #0 comdat !dbg !1734 {
entry:
  %c = alloca i8, align 1
  store i8 %0, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1737, metadata !DIExpression()), !dbg !1738
  %1 = load i8, ptr %c, align 1, !dbg !1739
  %zext = zext i8 %1 to i32, !dbg !1739
  %2 = call i32 @putchar(i32 %zext), !dbg !1740
  ret void, !dbg !1740
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.stdout() #0 comdat !dbg !1741 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdout.file, align 8, !dbg !1745
  %not = icmp eq ptr %0, null, !dbg !1745
  br i1 %not, label %if.then, label %if.exit, !dbg !1745

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stdout, align 8, !dbg !1746
  %2 = call ptr @std.io.file.from_handle(ptr %1), !dbg !1750
  store ptr %2, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdout.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdout.file, !dbg !1751
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.stderr() #0 comdat !dbg !1752 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stderr.file, align 8, !dbg !1753
  %not = icmp eq ptr %0, null, !dbg !1753
  br i1 %not, label %if.then, label %if.exit, !dbg !1753

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stderr, align 8, !dbg !1754
  %2 = call ptr @std.io.file.from_handle(ptr %1), !dbg !1757
  store ptr %2, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stderr.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stderr.file, !dbg !1758
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.stdin() #0 comdat !dbg !1759 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdin.file, align 8, !dbg !1760
  %not = icmp eq ptr %0, null, !dbg !1760
  br i1 %not, label %if.then, label %if.exit, !dbg !1760

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stdin, align 8, !dbg !1761
  %2 = call ptr @std.io.file.from_handle(ptr %1), !dbg !1764
  store ptr %2, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdin.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdin.file, !dbg !1765
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.adjust(ptr %0, ptr %1, i64 %2) #0 !dbg !1766 {
entry:
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %reterr1 = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1770
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1770
  br i1 %4, label %panic, label %checkok, !dbg !1770

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1771, metadata !DIExpression()), !dbg !1772
  store i64 %2, ptr %len, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1773, metadata !DIExpression()), !dbg !1774
  %5 = load ptr, ptr %self, align 8, !dbg !1775
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1775
  %6 = load i32, ptr %ptradd, align 8, !dbg !1775
  %lshrl = lshr i32 %6, 1, !dbg !1775
  %7 = and i32 1, %lshrl, !dbg !1775
  %trunc = trunc i32 %7 to i8, !dbg !1775
  %8 = trunc i8 %trunc to i1, !dbg !1775
  %not = xor i1 %8, true, !dbg !1775
  br i1 %not, label %if.then, label %if.exit, !dbg !1775

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !1776
  ret i64 0, !dbg !1776

if.exit:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1777
  %ptradd2 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1777
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 4, !dbg !1777
  %10 = load i32, ptr %ptradd3, align 4, !dbg !1777
  %zext = zext i32 %10 to i64, !dbg !1777
  %11 = load ptr, ptr %self, align 8
  %12 = load i64, ptr %len, align 8
  %13 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %11, i8 zeroext 32, i64 %zext, i64 %12) #5, !dbg !1778
  %not_err = icmp eq i64 %13, 0, !dbg !1778
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1778
  br i1 %14, label %after_check, label %assign_optional, !dbg !1778

assign_optional:                                  ; preds = %if.exit
  store i64 %13, ptr %reterr1, align 8, !dbg !1778
  br label %err_retblock, !dbg !1778

after_check:                                      ; preds = %if.exit
  %15 = load i64, ptr %retparam, align 8, !dbg !1778
  store i64 %15, ptr %0, align 8, !dbg !1778
  ret i64 0, !dbg !1778

err_retblock:                                     ; preds = %assign_optional
  %16 = load i64, ptr %reterr1, align 8, !dbg !1778
  ret i64 %16, !dbg !1778

panic:                                            ; preds = %entry
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1772
  call void %17(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.145, i64 6, i32 19), !dbg !1772
  unreachable, !dbg !1772
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_substr(ptr %0, ptr %1, ptr %2, i64 %3) #0 !dbg !1779 {
entry:
  %self = alloca ptr, align 8
  %str = alloca %"char[]", align 8
  %l = alloca i64, align 8
  %prec = alloca i32, align 4
  %index = alloca i64, align 8
  %chars = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1782
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1782
  br i1 %5, label %panic, label %checkok, !dbg !1782

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1783, metadata !DIExpression()), !dbg !1784
  store ptr %2, ptr %str, align 8
  %ptradd = getelementptr inbounds i8, ptr %str, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !1785, metadata !DIExpression()), !dbg !1786
  call void @llvm.dbg.declare(metadata ptr %l, metadata !1787, metadata !DIExpression()), !dbg !1788
  %lo = load ptr, ptr %str, align 8, !dbg !1789
  %ptradd1 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !1789
  %hi = load i64, ptr %ptradd1, align 8, !dbg !1789
  %6 = call i64 @std.core.string.conv.utf8_codepoints(ptr %lo, i64 %hi), !dbg !1790
  store i64 %6, ptr %l, align 8, !dbg !1790
  call void @llvm.dbg.declare(metadata ptr %prec, metadata !1791, metadata !DIExpression()), !dbg !1792
  %7 = load ptr, ptr %self, align 8, !dbg !1793
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !1793
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 8, !dbg !1793
  %8 = load i32, ptr %ptradd3, align 8, !dbg !1793
  store i32 %8, ptr %prec, align 4, !dbg !1793
  %9 = load ptr, ptr %self, align 8, !dbg !1794
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1794
  %10 = load i32, ptr %ptradd4, align 8, !dbg !1794
  %lshrl = lshr i32 %10, 6, !dbg !1794
  %11 = and i32 1, %lshrl, !dbg !1794
  %trunc = trunc i32 %11 to i8, !dbg !1794
  %12 = trunc i8 %trunc to i1, !dbg !1794
  br i1 %12, label %and.rhs, label %and.phi, !dbg !1794

and.rhs:                                          ; preds = %checkok
  %13 = load i64, ptr %l, align 8, !dbg !1795
  %14 = load i32, ptr %prec, align 4, !dbg !1796
  %zext = zext i32 %14 to i64, !dbg !1796
  %lt = icmp ult i64 %13, %zext, !dbg !1795
  br label %and.phi, !dbg !1795

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %lt, %and.rhs ], !dbg !1795
  br i1 %val, label %if.then, label %if.exit, !dbg !1795

if.then:                                          ; preds = %and.phi
  %15 = load i32, ptr %prec, align 4, !dbg !1797
  %zext5 = zext i32 %15 to i64, !dbg !1797
  store i64 %zext5, ptr %l, align 8, !dbg !1797
  br label %if.exit, !dbg !1797

if.exit:                                          ; preds = %if.then, %and.phi
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1798, metadata !DIExpression()), !dbg !1799
  store i64 0, ptr %index, align 8, !dbg !1800
  call void @llvm.dbg.declare(metadata ptr %chars, metadata !1801, metadata !DIExpression()), !dbg !1802
  %ptradd6 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !1803
  %16 = load i64, ptr %ptradd6, align 8, !dbg !1803
  store i64 %16, ptr %chars, align 8, !dbg !1803
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1804, metadata !DIExpression()), !dbg !1805
  %17 = load ptr, ptr %str, align 8, !dbg !1806
  store ptr %17, ptr %ptr, align 8, !dbg !1806
  br label %loop.cond, !dbg !1807

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %18 = load i64, ptr %index, align 8, !dbg !1808
  %19 = load i64, ptr %chars, align 8, !dbg !1810
  %lt7 = icmp ult i64 %18, %19, !dbg !1808
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1808

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1811, metadata !DIExpression()), !dbg !1813
  %20 = load ptr, ptr %ptr, align 8, !dbg !1814
  %21 = load i64, ptr %index, align 8, !dbg !1815
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 %21, !dbg !1815
  %22 = load i8, ptr %ptradd8, align 1, !dbg !1815
  store i8 %22, ptr %c, align 1, !dbg !1815
  %23 = load i8, ptr %c, align 1, !dbg !1816
  %zext9 = zext i8 %23 to i32, !dbg !1816
  %and = and i32 %zext9, 192, !dbg !1816
  %neq = icmp ne i32 %and, 128, !dbg !1816
  br i1 %neq, label %and.rhs10, label %and.phi14, !dbg !1816

and.rhs10:                                        ; preds = %loop.body
  %24 = load ptr, ptr %self, align 8, !dbg !1817
  %ptradd11 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !1817
  %25 = load i32, ptr %ptradd11, align 8, !dbg !1817
  %lshrl12 = lshr i32 %25, 6, !dbg !1817
  %26 = and i32 1, %lshrl12, !dbg !1817
  %trunc13 = trunc i32 %26 to i8, !dbg !1817
  %27 = trunc i8 %trunc13 to i1, !dbg !1817
  br label %and.phi14, !dbg !1817

and.phi14:                                        ; preds = %and.rhs10, %loop.body
  %val15 = phi i1 [ false, %loop.body ], [ %27, %and.rhs10 ], !dbg !1817
  br i1 %val15, label %and.rhs16, label %and.phi17, !dbg !1817

and.rhs16:                                        ; preds = %and.phi14
  %28 = load i32, ptr %prec, align 4, !dbg !1818
  %sub = sub i32 %28, 1, !dbg !1818
  store i32 %sub, ptr %prec, align 4, !dbg !1818
  %not = icmp eq i32 %28, 0, !dbg !1818
  br label %and.phi17, !dbg !1818

and.phi17:                                        ; preds = %and.rhs16, %and.phi14
  %val18 = phi i1 [ false, %and.phi14 ], [ %not, %and.rhs16 ], !dbg !1818
  br i1 %val18, label %if.then19, label %if.exit20, !dbg !1818

if.then19:                                        ; preds = %and.phi17
  br label %loop.exit, !dbg !1819

if.exit20:                                        ; preds = %and.phi17
  %29 = load ptr, ptr %self, align 8
  %30 = load i8, ptr %c, align 1
  %31 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %29, i8 zeroext %30), !dbg !1820
  %not_err = icmp eq i64 %31, 0, !dbg !1820
  %32 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1820
  br i1 %32, label %after_check, label %assign_optional, !dbg !1820

assign_optional:                                  ; preds = %if.exit20
  store i64 %31, ptr %error_var, align 8, !dbg !1820
  br label %guard_block, !dbg !1820

after_check:                                      ; preds = %if.exit20
  br label %noerr_block, !dbg !1820

guard_block:                                      ; preds = %assign_optional
  %33 = load i64, ptr %error_var, align 8, !dbg !1820
  ret i64 %33, !dbg !1820

noerr_block:                                      ; preds = %after_check
  %34 = load i64, ptr %index, align 8, !dbg !1821
  %add = add i64 %34, 1, !dbg !1821
  store i64 %add, ptr %index, align 8, !dbg !1821
  br label %loop.cond, !dbg !1821

loop.exit:                                        ; preds = %if.then19, %loop.cond
  %35 = load i64, ptr %index, align 8, !dbg !1822
  store i64 %35, ptr %0, align 8, !dbg !1822
  ret i64 0, !dbg !1822

panic:                                            ; preds = %entry
  %36 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1784
  call void %36(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.146, i64 10, i32 145), !dbg !1784
  unreachable, !dbg !1784
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.pad(ptr %0, ptr %1, i8 zeroext %2, i64 %3, i64 %4) #0 comdat !dbg !1823 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %width = alloca i64, align 8
  %len = alloca i64, align 8
  %delta = alloca i64, align 8
  %i = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1826
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1826
  br i1 %6, label %panic, label %checkok, !dbg !1826

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1827, metadata !DIExpression()), !dbg !1828
  store i8 %2, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1829, metadata !DIExpression()), !dbg !1830
  store i64 %3, ptr %width, align 8
  call void @llvm.dbg.declare(metadata ptr %width, metadata !1831, metadata !DIExpression()), !dbg !1832
  store i64 %4, ptr %len, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1833, metadata !DIExpression()), !dbg !1834
  call void @llvm.dbg.declare(metadata ptr %delta, metadata !1835, metadata !DIExpression()), !dbg !1836
  %7 = load i64, ptr %width, align 8, !dbg !1837
  %8 = load i64, ptr %len, align 8, !dbg !1838
  %sub = sub i64 %7, %8, !dbg !1837
  store i64 %sub, ptr %delta, align 8, !dbg !1837
  call void @llvm.dbg.declare(metadata ptr %i, metadata !1839, metadata !DIExpression()), !dbg !1841
  store i64 0, ptr %i, align 8, !dbg !1842
  br label %loop.cond, !dbg !1842

loop.cond:                                        ; preds = %noerr_block, %checkok
  %9 = load i64, ptr %i, align 8, !dbg !1843
  %10 = load i64, ptr %delta, align 8, !dbg !1844
  %lt = icmp slt i64 %9, %10, !dbg !1843
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1843

loop.body:                                        ; preds = %loop.cond
  %11 = load ptr, ptr %self, align 8
  %12 = load i8, ptr %c, align 1
  %13 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %11, i8 zeroext %12), !dbg !1845
  %not_err = icmp eq i64 %13, 0, !dbg !1845
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1845
  br i1 %14, label %after_check, label %assign_optional, !dbg !1845

assign_optional:                                  ; preds = %loop.body
  store i64 %13, ptr %error_var, align 8, !dbg !1845
  br label %guard_block, !dbg !1845

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !1845

guard_block:                                      ; preds = %assign_optional
  %15 = load i64, ptr %error_var, align 8, !dbg !1845
  ret i64 %15, !dbg !1845

noerr_block:                                      ; preds = %after_check
  %16 = load i64, ptr %i, align 8, !dbg !1846
  %add = add i64 %16, 1, !dbg !1846
  store i64 %add, ptr %i, align 8, !dbg !1846
  br label %loop.cond, !dbg !1846

loop.exit:                                        ; preds = %loop.cond
  store i32 0, ptr %x, align 4
  %17 = load i64, ptr %delta, align 8
  store i64 %17, ptr %.anon, align 8
  %18 = load i32, ptr %x, align 4
  store i32 %18, ptr %a, align 4
  %19 = load i64, ptr %.anon, align 8
  store i64 %19, ptr %b, align 8
  %20 = load i32, ptr %a, align 4, !dbg !1847
  %sext = sext i32 %20 to i64, !dbg !1847
  %21 = load i64, ptr %b, align 8, !dbg !1852
  %gt = icmp sgt i64 %sext, %21, !dbg !1847
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !1847

cond.lhs:                                         ; preds = %loop.exit
  %22 = load i32, ptr %x, align 4, !dbg !1853
  %sext1 = sext i32 %22 to i64, !dbg !1853
  br label %cond.phi, !dbg !1853

cond.rhs:                                         ; preds = %loop.exit
  %23 = load i64, ptr %.anon, align 8, !dbg !1854
  br label %cond.phi, !dbg !1854

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext1, %cond.lhs ], [ %23, %cond.rhs ], !dbg !1854
  store i64 %val, ptr %0, align 8, !dbg !1854
  ret i64 0, !dbg !1854

panic:                                            ; preds = %entry
  %24 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1828
  call void %24(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.147, i64 3, i32 164), !dbg !1828
  unreachable, !dbg !1828
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.out_chars(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !1855 {
entry:
  %self = alloca ptr, align 8
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %.anon2 = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1858
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1858
  br i1 %5, label %panic, label %checkok, !dbg !1858

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1859, metadata !DIExpression()), !dbg !1860
  store ptr %2, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1861, metadata !DIExpression()), !dbg !1862
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !1863, metadata !DIExpression()), !dbg !1865
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1865
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1865
  store i64 %6, ptr %.anon, align 8, !dbg !1865
  call void @llvm.dbg.declare(metadata ptr %.anon2, metadata !1863, metadata !DIExpression()), !dbg !1865
  store i64 0, ptr %.anon2, align 8, !dbg !1865
  br label %loop.cond, !dbg !1865

loop.cond:                                        ; preds = %noerr_block, %checkok
  %7 = load i64, ptr %.anon2, align 8, !dbg !1865
  %8 = load i64, ptr %.anon, align 8, !dbg !1865
  %lt = icmp ult i64 %7, %8, !dbg !1865
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1865

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1866, metadata !DIExpression()), !dbg !1868
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1869
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1869
  %10 = load ptr, ptr %s, align 8, !dbg !1869
  %11 = load i64, ptr %.anon2, align 8, !dbg !1869
  %ge = icmp uge i64 %11, %9, !dbg !1869
  %12 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1869
  br i1 %12, label %panic4, label %checkok7, !dbg !1869

checkok7:                                         ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 %11, !dbg !1869
  %13 = load i8, ptr %ptradd8, align 1, !dbg !1869
  store i8 %13, ptr %c, align 1, !dbg !1869
  %14 = load ptr, ptr %self, align 8
  %15 = load i8, ptr %c, align 1
  %16 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %14, i8 zeroext %15), !dbg !1870
  %not_err = icmp eq i64 %16, 0, !dbg !1870
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1870
  br i1 %17, label %after_check, label %assign_optional, !dbg !1870

assign_optional:                                  ; preds = %checkok7
  store i64 %16, ptr %error_var, align 8, !dbg !1870
  br label %guard_block, !dbg !1870

after_check:                                      ; preds = %checkok7
  br label %noerr_block, !dbg !1870

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !1870
  ret i64 %18, !dbg !1870

noerr_block:                                      ; preds = %after_check
  %19 = load i64, ptr %.anon2, align 8, !dbg !1865
  %addnuw = add nuw i64 %19, 1, !dbg !1865
  store i64 %addnuw, ptr %.anon2, align 8, !dbg !1865
  br label %loop.cond, !dbg !1865

loop.exit:                                        ; preds = %loop.cond
  %ptradd9 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1871
  %20 = load i64, ptr %ptradd9, align 8, !dbg !1871
  store i64 %20, ptr %0, align 8, !dbg !1871
  ret i64 0, !dbg !1871

panic:                                            ; preds = %entry
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1860
  call void %21(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.148, i64 9, i32 178), !dbg !1860
  unreachable, !dbg !1860

panic4:                                           ; preds = %loop.body
  store i64 %9, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr5, align 8
  %24 = insertvalue %any undef, ptr %taddr5, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %23, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd6, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.148, i64 9, i32 180, ptr byval(%"any[]") align 8 %indirectarg), !dbg !1869
  unreachable, !dbg !1869
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.etoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1872 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1876
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1876
  br i1 %4, label %panic, label %checkok, !dbg !1876

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1877, metadata !DIExpression()), !dbg !1878
  store double %2, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1879, metadata !DIExpression()), !dbg !1880
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 1, double %6), !dbg !1876
  %not_err = icmp eq i64 %7, 0, !dbg !1876
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1876
  br i1 %8, label %after_check, label %assign_optional, !dbg !1876

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1876
  br label %err_retblock, !dbg !1876

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1876
  store i64 %9, ptr %0, align 8, !dbg !1876
  ret i64 0, !dbg !1876

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1876
  ret i64 %10, !dbg !1876

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1878
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.149, i64 4, i32 192), !dbg !1878
  unreachable, !dbg !1878
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.ftoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1881 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1882
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1882
  br i1 %4, label %panic, label %checkok, !dbg !1882

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1883, metadata !DIExpression()), !dbg !1884
  store double %2, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1885, metadata !DIExpression()), !dbg !1886
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 0, double %6), !dbg !1882
  %not_err = icmp eq i64 %7, 0, !dbg !1882
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1882
  br i1 %8, label %after_check, label %assign_optional, !dbg !1882

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1882
  br label %err_retblock, !dbg !1882

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1882
  store i64 %9, ptr %0, align 8, !dbg !1882
  ret i64 0, !dbg !1882

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1882
  ret i64 %10, !dbg !1882

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1884
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.150, i64 4, i32 193), !dbg !1884
  unreachable, !dbg !1884
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.gtoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1887 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1888
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1888
  br i1 %4, label %panic, label %checkok, !dbg !1888

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1889, metadata !DIExpression()), !dbg !1890
  store double %2, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1891, metadata !DIExpression()), !dbg !1892
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 2, double %6), !dbg !1888
  %not_err = icmp eq i64 %7, 0, !dbg !1888
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1888
  br i1 %8, label %after_check, label %assign_optional, !dbg !1888

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1888
  br label %err_retblock, !dbg !1888

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1888
  store i64 %9, ptr %0, align 8, !dbg !1888
  ret i64 0, !dbg !1888

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1888
  ret i64 %10, !dbg !1888

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1890
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.151, i64 4, i32 194), !dbg !1890
  unreachable, !dbg !1890
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.atoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1893 {
entry:
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1894
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1894
  br i1 %4, label %panic, label %checkok, !dbg !1894

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1895, metadata !DIExpression()), !dbg !1896
  store double %2, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1897, metadata !DIExpression()), !dbg !1898
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 3, double %6), !dbg !1894
  %not_err = icmp eq i64 %7, 0, !dbg !1894
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1894
  br i1 %8, label %after_check, label %assign_optional, !dbg !1894

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1894
  br label %err_retblock, !dbg !1894

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1894
  store i64 %9, ptr %0, align 8, !dbg !1894
  ret i64 0, !dbg !1894

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1894
  ret i64 %10, !dbg !1894

panic:                                            ; preds = %entry
  %11 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1896
  call void %11(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.152, i64 4, i32 195), !dbg !1896
  unreachable, !dbg !1896
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.floatformat(ptr %0, ptr %1, i32 %2, double %3) #0 !dbg !1899 {
entry:
  %self = alloca ptr, align 8
  %formatting = alloca i32, align 4
  %y = alloca double, align 8
  %big = alloca [126 x i32], align 16
  %is_neg = alloca i8, align 1
  %x = alloca double, align 8
  %expr = alloca double, align 8
  %pl = alloca i64, align 8
  %x4 = alloca double, align 8
  %expr5 = alloca double, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %s = alloca %"char[]", align 8
  %error_var33 = alloca i64, align 8
  %retparam35 = alloca i64, align 8
  %error_var43 = alloca i64, align 8
  %retparam44 = alloca i64, align 8
  %error_var56 = alloca i64, align 8
  %retparam61 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %e2 = alloca i32, align 4
  %x70 = alloca double, align 8
  %e = alloca ptr, align 8
  %ebuf0 = alloca [12 x i8], align 1
  %ebuf = alloca ptr, align 8
  %buf_array = alloca [22 x i8], align 16
  %buf = alloca ptr, align 8
  %p = alloca i64, align 8
  %round = alloca double, align 8
  %re = alloca i32, align 4
  %estr = alloca ptr, align 8
  %taddr = alloca i128, align 8
  %s139 = alloca ptr, align 8
  %xdigits = alloca ptr, align 8
  %x147 = alloca i32, align 4
  %outlen = alloca i64, align 8
  %explen = alloca i64, align 8
  %len183 = alloca i64, align 8
  %l = alloca i64, align 8
  %error_var208 = alloca i64, align 8
  %retparam213 = alloca i64, align 8
  %error_var228 = alloca i64, align 8
  %retparam230 = alloca i64, align 8
  %error_var238 = alloca i64, align 8
  %retparam243 = alloca i64, align 8
  %error_var253 = alloca i64, align 8
  %retparam258 = alloca i64, align 8
  %error_var266 = alloca i64, align 8
  %retparam268 = alloca i64, align 8
  %error_var275 = alloca i64, align 8
  %retparam278 = alloca i64, align 8
  %error_var285 = alloca i64, align 8
  %retparam288 = alloca i64, align 8
  %error_var299 = alloca i64, align 8
  %retparam304 = alloca i64, align 8
  %reterr312 = alloca i64, align 8
  %a = alloca ptr, align 8
  %z = alloca ptr, align 8
  %r = alloca ptr, align 8
  %v = alloca i32, align 4
  %carry = alloca i32, align 4
  %sh = alloca i32, align 4
  %x337 = alloca i32, align 4
  %y338 = alloca i32, align 4
  %d = alloca ptr, align 8
  %x342 = alloca i64, align 8
  %taddr349 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %carry382 = alloca i32, align 4
  %b = alloca ptr, align 8
  %sh383 = alloca i32, align 4
  %x384 = alloca i32, align 4
  %y386 = alloca i32, align 4
  %need = alloca i32, align 4
  %d392 = alloca ptr, align 8
  %rm = alloca i32, align 4
  %taddr400 = alloca i32, align 4
  %varargslots401 = alloca [1 x %any], align 16
  %indirectarg403 = alloca %"any[]", align 8
  %taddr407 = alloca i32, align 4
  %varargslots408 = alloca [1 x %any], align 16
  %indirectarg410 = alloca %"any[]", align 8
  %taddr423 = alloca i32, align 4
  %varargslots424 = alloca [1 x %any], align 16
  %indirectarg426 = alloca %"any[]", align 8
  %taddr432 = alloca i32, align 4
  %varargslots433 = alloca [1 x %any], align 16
  %indirectarg435 = alloca %"any[]", align 8
  %taddr439 = alloca i32, align 4
  %varargslots440 = alloca [1 x %any], align 16
  %indirectarg442 = alloca %"any[]", align 8
  %e466 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x499 = alloca i32, align 4
  %d500 = alloca ptr, align 8
  %i509 = alloca i32, align 4
  %round530 = alloca double, align 8
  %small = alloca double, align 8
  %switch = alloca i8, align 1
  %i678 = alloca i32, align 4
  %x694 = alloca i64, align 8
  %x695 = alloca i64, align 8
  %y700 = alloca i64, align 8
  %y701 = alloca i64, align 8
  %x703 = alloca i64, align 8
  %x704 = alloca i64, align 8
  %y711 = alloca i64, align 8
  %y712 = alloca i64, align 8
  %l728 = alloca i32, align 4
  %estr740 = alloca ptr, align 8
  %taddr759 = alloca i128, align 8
  %len795 = alloca i64, align 8
  %error_var807 = alloca i64, align 8
  %retparam813 = alloca i64, align 8
  %error_var828 = alloca i64, align 8
  %retparam830 = alloca i64, align 8
  %error_var841 = alloca i64, align 8
  %retparam847 = alloca i64, align 8
  %d860 = alloca ptr, align 8
  %s864 = alloca ptr, align 8
  %taddr870 = alloca i128, align 8
  %switch874 = alloca i8, align 1
  %error_var895 = alloca i64, align 8
  %retparam899 = alloca i64, align 8
  %error_var916 = alloca i64, align 8
  %retparam917 = alloca i64, align 8
  %s932 = alloca ptr, align 8
  %taddr938 = alloca i128, align 8
  %error_var950 = alloca i64, align 8
  %x951 = alloca i64, align 8
  %y952 = alloca i64, align 8
  %retparam955 = alloca i64, align 8
  %error_var965 = alloca i64, align 8
  %retparam967 = alloca i64, align 8
  %d979 = alloca ptr, align 8
  %s987 = alloca ptr, align 8
  %taddr993 = alloca i128, align 8
  %error_var1010 = alloca i64, align 8
  %retparam1012 = alloca i64, align 8
  %error_var1027 = alloca i64, align 8
  %retparam1028 = alloca i64, align 8
  %error_var1037 = alloca i64, align 8
  %x1039 = alloca i64, align 8
  %y1040 = alloca i64, align 8
  %retparam1043 = alloca i64, align 8
  %error_var1054 = alloca i64, align 8
  %retparam1056 = alloca i64, align 8
  %error_var1063 = alloca i64, align 8
  %retparam1066 = alloca i64, align 8
  %error_var1078 = alloca i64, align 8
  %retparam1084 = alloca i64, align 8
  %reterr1092 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1902
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1902
  br i1 %5, label %panic, label %checkok, !dbg !1902

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1903, metadata !DIExpression()), !dbg !1904
  store i32 %2, ptr %formatting, align 4
  call void @llvm.dbg.declare(metadata ptr %formatting, metadata !1905, metadata !DIExpression()), !dbg !1906
  store double %3, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1907, metadata !DIExpression()), !dbg !1908
  call void @llvm.dbg.declare(metadata ptr %big, metadata !1909, metadata !DIExpression()), !dbg !1913
  call void @llvm.memset.p0.i64(ptr align 16 %big, i8 0, i64 504, i1 false), !dbg !1913
  call void @llvm.dbg.declare(metadata ptr %is_neg, metadata !1914, metadata !DIExpression()), !dbg !1915
  store i8 0, ptr %is_neg, align 1, !dbg !1916
  %6 = load double, ptr %y, align 8
  store double %6, ptr %x, align 8
  %7 = load double, ptr %x, align 8
  store double %7, ptr %expr, align 8
  %checknull = icmp eq ptr %expr, null, !dbg !1917
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1917
  br i1 %8, label %panic1, label %checkok2, !dbg !1917

checkok2:                                         ; preds = %checkok
  %9 = load i64, ptr %expr, align 8, !dbg !1922
  %lshr = lshr i64 %9, 63, !dbg !1923
  %10 = freeze i64 %lshr, !dbg !1923
  %trunc = trunc i64 %10 to i32, !dbg !1923
  %intbool = icmp ne i32 %trunc, 0, !dbg !1923
  br i1 %intbool, label %if.then, label %if.exit, !dbg !1923

if.then:                                          ; preds = %checkok2
  store i8 1, ptr %is_neg, align 1, !dbg !1924
  %11 = load double, ptr %y, align 8, !dbg !1926
  %fneg = fneg double %11, !dbg !1926
  store double %fneg, ptr %y, align 8, !dbg !1926
  br label %if.exit, !dbg !1926

if.exit:                                          ; preds = %if.then, %checkok2
  call void @llvm.dbg.declare(metadata ptr %pl, metadata !1927, metadata !DIExpression()), !dbg !1928
  %12 = load i8, ptr %is_neg, align 1, !dbg !1929
  %13 = trunc i8 %12 to i1, !dbg !1929
  br i1 %13, label %or.phi, label %or.rhs, !dbg !1929

or.rhs:                                           ; preds = %if.exit
  %14 = load ptr, ptr %self, align 8, !dbg !1930
  %ptradd = getelementptr inbounds i8, ptr %14, i64 16, !dbg !1930
  %15 = load i32, ptr %ptradd, align 8, !dbg !1930
  %lshrl = lshr i32 %15, 2, !dbg !1930
  %16 = and i32 1, %lshrl, !dbg !1930
  %trunc3 = trunc i32 %16 to i8, !dbg !1930
  %17 = trunc i8 %trunc3 to i1, !dbg !1930
  br label %or.phi, !dbg !1930

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %17, %or.rhs ], !dbg !1930
  %ternary = select i1 %val, i64 1, i64 0, !dbg !1931
  store i64 %ternary, ptr %pl, align 8, !dbg !1931
  %18 = load double, ptr %y, align 8
  store double %18, ptr %x4, align 8
  %19 = load double, ptr %x4, align 8
  store double %19, ptr %expr5, align 8
  %checknull6 = icmp eq ptr %expr5, null, !dbg !1932
  %20 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1932
  br i1 %20, label %panic7, label %checkok8, !dbg !1932

checkok8:                                         ; preds = %or.phi
  %21 = load i64, ptr %expr5, align 8, !dbg !1937
  %and = and i64 %21, 9223372036854775807, !dbg !1934
  %lt = icmp ult i64 %and, 9218868437227405312, !dbg !1934
  %not = xor i1 %lt, true, !dbg !1934
  br i1 %not, label %if.then9, label %if.exit69, !dbg !1934

if.then9:                                         ; preds = %checkok8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1938, metadata !DIExpression()), !dbg !1940
  store i64 0, ptr %len, align 8, !dbg !1940
  %22 = load ptr, ptr %self, align 8, !dbg !1941
  %ptradd10 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1941
  %23 = load i32, ptr %ptradd10, align 8, !dbg !1941
  %lshrl11 = lshr i32 %23, 1, !dbg !1941
  %24 = and i32 1, %lshrl11, !dbg !1941
  %trunc12 = trunc i32 %24 to i8, !dbg !1941
  %25 = trunc i8 %trunc12 to i1, !dbg !1941
  %not13 = xor i1 %25, true, !dbg !1941
  br i1 %not13, label %if.then14, label %if.exit18, !dbg !1941

if.then14:                                        ; preds = %if.then9
  %26 = load i64, ptr %len, align 8, !dbg !1942
  %27 = load ptr, ptr %self, align 8, !dbg !1943
  %ptradd15 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !1943
  %ptradd16 = getelementptr inbounds i8, ptr %ptradd15, i64 4, !dbg !1943
  %28 = load i32, ptr %ptradd16, align 4, !dbg !1943
  %zext = zext i32 %28 to i64, !dbg !1943
  %29 = load i64, ptr %pl, align 8, !dbg !1944
  %add = add i64 3, %29, !dbg !1945
  %30 = load ptr, ptr %self, align 8
  %31 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %30, i8 zeroext 32, i64 %zext, i64 %add) #5, !dbg !1946
  %not_err = icmp eq i64 %31, 0, !dbg !1946
  %32 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1946
  br i1 %32, label %after_check, label %assign_optional, !dbg !1946

assign_optional:                                  ; preds = %if.then14
  store i64 %31, ptr %error_var, align 8, !dbg !1946
  br label %guard_block, !dbg !1946

after_check:                                      ; preds = %if.then14
  br label %noerr_block, !dbg !1946

guard_block:                                      ; preds = %assign_optional
  %33 = load i64, ptr %error_var, align 8, !dbg !1946
  ret i64 %33, !dbg !1946

noerr_block:                                      ; preds = %after_check
  %34 = load i64, ptr %retparam, align 8, !dbg !1946
  %add17 = add i64 %26, %34, !dbg !1942
  store i64 %add17, ptr %len, align 8, !dbg !1942
  br label %if.exit18, !dbg !1942

if.exit18:                                        ; preds = %noerr_block, %if.then9
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1947, metadata !DIExpression()), !dbg !1948
  %35 = load ptr, ptr %self, align 8, !dbg !1949
  %ptradd19 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !1949
  %36 = load i32, ptr %ptradd19, align 8, !dbg !1949
  %lshrl20 = lshr i32 %36, 5, !dbg !1949
  %37 = and i32 1, %lshrl20, !dbg !1949
  %trunc21 = trunc i32 %37 to i8, !dbg !1949
  %38 = trunc i8 %trunc21 to i1, !dbg !1949
  %ternary22 = select i1 %38, %"char[]" { ptr @.str.154, i64 3 }, %"char[]" { ptr @.str.155, i64 3 }, !dbg !1950
  store %"char[]" %ternary22, ptr %s, align 8, !dbg !1950
  %39 = load double, ptr %y, align 8, !dbg !1951
  %40 = load double, ptr %y, align 8, !dbg !1952
  %neq = fcmp one double %39, %40, !dbg !1951
  br i1 %neq, label %if.then23, label %if.exit28, !dbg !1951

if.then23:                                        ; preds = %if.exit18
  %41 = load ptr, ptr %self, align 8, !dbg !1953
  %ptradd24 = getelementptr inbounds i8, ptr %41, i64 16, !dbg !1953
  %42 = load i32, ptr %ptradd24, align 8, !dbg !1953
  %lshrl25 = lshr i32 %42, 5, !dbg !1953
  %43 = and i32 1, %lshrl25, !dbg !1953
  %trunc26 = trunc i32 %43 to i8, !dbg !1953
  %44 = trunc i8 %trunc26 to i1, !dbg !1953
  %ternary27 = select i1 %44, %"char[]" { ptr @.str.156, i64 3 }, %"char[]" { ptr @.str.157, i64 3 }, !dbg !1954
  store %"char[]" %ternary27, ptr %s, align 8, !dbg !1954
  br label %if.exit28, !dbg !1954

if.exit28:                                        ; preds = %if.then23, %if.exit18
  %45 = load i64, ptr %len, align 8, !dbg !1955
  %ptradd29 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1956
  %46 = load i64, ptr %ptradd29, align 8, !dbg !1956
  %add30 = add i64 %45, %46, !dbg !1955
  store i64 %add30, ptr %len, align 8, !dbg !1955
  %47 = load i64, ptr %pl, align 8, !dbg !1957
  %intbool31 = icmp ne i64 %47, 0, !dbg !1957
  br i1 %intbool31, label %if.then32, label %if.exit42, !dbg !1957

if.then32:                                        ; preds = %if.exit28
  %48 = load i64, ptr %len, align 8, !dbg !1958
  %49 = load i8, ptr %is_neg, align 1, !dbg !1959
  %50 = trunc i8 %49 to i1, !dbg !1959
  %ternary34 = select i1 %50, i8 45, i8 43, !dbg !1960
  %51 = load ptr, ptr %self, align 8
  %52 = call i64 @std.io.Formatter.out(ptr %retparam35, ptr %51, i8 zeroext %ternary34), !dbg !1961
  %not_err36 = icmp eq i64 %52, 0, !dbg !1961
  %53 = call i1 @llvm.expect.i1(i1 %not_err36, i1 true), !dbg !1961
  br i1 %53, label %after_check38, label %assign_optional37, !dbg !1961

assign_optional37:                                ; preds = %if.then32
  store i64 %52, ptr %error_var33, align 8, !dbg !1961
  br label %guard_block39, !dbg !1961

after_check38:                                    ; preds = %if.then32
  br label %noerr_block40, !dbg !1961

guard_block39:                                    ; preds = %assign_optional37
  %54 = load i64, ptr %error_var33, align 8, !dbg !1961
  ret i64 %54, !dbg !1961

noerr_block40:                                    ; preds = %after_check38
  %55 = load i64, ptr %retparam35, align 8, !dbg !1961
  %add41 = add i64 %48, %55, !dbg !1958
  store i64 %add41, ptr %len, align 8, !dbg !1958
  br label %if.exit42, !dbg !1958

if.exit42:                                        ; preds = %noerr_block40, %if.exit28
  %56 = load i64, ptr %len, align 8, !dbg !1962
  %57 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %s, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %s, i64 8
  %hi = load i64, ptr %ptradd45, align 8
  %58 = call i64 @std.io.Formatter.out_chars(ptr %retparam44, ptr %57, ptr %lo, i64 %hi), !dbg !1963
  %not_err46 = icmp eq i64 %58, 0, !dbg !1963
  %59 = call i1 @llvm.expect.i1(i1 %not_err46, i1 true), !dbg !1963
  br i1 %59, label %after_check48, label %assign_optional47, !dbg !1963

assign_optional47:                                ; preds = %if.exit42
  store i64 %58, ptr %error_var43, align 8, !dbg !1963
  br label %guard_block49, !dbg !1963

after_check48:                                    ; preds = %if.exit42
  br label %noerr_block50, !dbg !1963

guard_block49:                                    ; preds = %assign_optional47
  %60 = load i64, ptr %error_var43, align 8, !dbg !1963
  ret i64 %60, !dbg !1963

noerr_block50:                                    ; preds = %after_check48
  %61 = load i64, ptr %retparam44, align 8, !dbg !1963
  %add51 = add i64 %56, %61, !dbg !1962
  store i64 %add51, ptr %len, align 8, !dbg !1962
  %62 = load ptr, ptr %self, align 8, !dbg !1964
  %ptradd52 = getelementptr inbounds i8, ptr %62, i64 16, !dbg !1964
  %63 = load i32, ptr %ptradd52, align 8, !dbg !1964
  %lshrl53 = lshr i32 %63, 1, !dbg !1964
  %64 = and i32 1, %lshrl53, !dbg !1964
  %trunc54 = trunc i32 %64 to i8, !dbg !1964
  %65 = trunc i8 %trunc54 to i1, !dbg !1964
  br i1 %65, label %if.then55, label %if.exit68, !dbg !1964

if.then55:                                        ; preds = %noerr_block50
  %66 = load i64, ptr %len, align 8, !dbg !1965
  %67 = load ptr, ptr %self, align 8, !dbg !1966
  %ptradd57 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !1966
  %ptradd58 = getelementptr inbounds i8, ptr %ptradd57, i64 4, !dbg !1966
  %68 = load i32, ptr %ptradd58, align 4, !dbg !1966
  %zext59 = zext i32 %68 to i64, !dbg !1966
  %69 = load i64, ptr %pl, align 8, !dbg !1967
  %add60 = add i64 3, %69, !dbg !1968
  %70 = load ptr, ptr %self, align 8
  %71 = call i64 @std.io.Formatter.pad(ptr %retparam61, ptr %70, i8 zeroext 32, i64 %zext59, i64 %add60) #5, !dbg !1969
  %not_err62 = icmp eq i64 %71, 0, !dbg !1969
  %72 = call i1 @llvm.expect.i1(i1 %not_err62, i1 true), !dbg !1969
  br i1 %72, label %after_check64, label %assign_optional63, !dbg !1969

assign_optional63:                                ; preds = %if.then55
  store i64 %71, ptr %error_var56, align 8, !dbg !1969
  br label %guard_block65, !dbg !1969

after_check64:                                    ; preds = %if.then55
  br label %noerr_block66, !dbg !1969

guard_block65:                                    ; preds = %assign_optional63
  %73 = load i64, ptr %error_var56, align 8, !dbg !1969
  ret i64 %73, !dbg !1969

noerr_block66:                                    ; preds = %after_check64
  %74 = load i64, ptr %retparam61, align 8, !dbg !1969
  %add67 = add i64 %66, %74, !dbg !1965
  store i64 %add67, ptr %len, align 8, !dbg !1965
  br label %if.exit68, !dbg !1965

if.exit68:                                        ; preds = %noerr_block66, %noerr_block50
  %75 = load i64, ptr %len, align 8, !dbg !1970
  store i64 %75, ptr %0, align 8, !dbg !1970
  ret i64 0, !dbg !1970

if.exit69:                                        ; preds = %checkok8
  call void @llvm.dbg.declare(metadata ptr %e2, metadata !1971, metadata !DIExpression()), !dbg !1972
  store i32 0, ptr %e2, align 4, !dbg !1972
  %76 = load double, ptr %y, align 8
  store double %76, ptr %x70, align 8
  store ptr %e2, ptr %e, align 8
  %77 = load double, ptr %x70, align 8, !dbg !1973
  %78 = load ptr, ptr %e, align 8, !dbg !1973
  %79 = call double @std.math._frexp(double %77, ptr %78), !dbg !1976
  %fmul = fmul double %79, 2.000000e+00, !dbg !1975
  store double %fmul, ptr %y, align 8, !dbg !1975
  %80 = load double, ptr %y, align 8, !dbg !1977
  %fpbool = fcmp une double %80, 0.000000e+00, !dbg !1977
  br i1 %fpbool, label %if.then71, label %if.exit72, !dbg !1977

if.then71:                                        ; preds = %if.exit69
  %81 = load i32, ptr %e2, align 4, !dbg !1978
  %sub = sub i32 %81, 1, !dbg !1978
  store i32 %sub, ptr %e2, align 4, !dbg !1978
  br label %if.exit72, !dbg !1978

if.exit72:                                        ; preds = %if.then71, %if.exit69
  call void @llvm.dbg.declare(metadata ptr %ebuf0, metadata !1979, metadata !DIExpression()), !dbg !1983
  store i8 0, ptr %ebuf0, align 1, !dbg !1983
  %ptradd73 = getelementptr inbounds i8, ptr %ebuf0, i64 1, !dbg !1983
  store i8 0, ptr %ptradd73, align 1, !dbg !1983
  %ptradd74 = getelementptr inbounds i8, ptr %ebuf0, i64 2, !dbg !1983
  store i8 0, ptr %ptradd74, align 1, !dbg !1983
  %ptradd75 = getelementptr inbounds i8, ptr %ebuf0, i64 3, !dbg !1983
  store i8 0, ptr %ptradd75, align 1, !dbg !1983
  %ptradd76 = getelementptr inbounds i8, ptr %ebuf0, i64 4, !dbg !1983
  store i8 0, ptr %ptradd76, align 1, !dbg !1983
  %ptradd77 = getelementptr inbounds i8, ptr %ebuf0, i64 5, !dbg !1983
  store i8 0, ptr %ptradd77, align 1, !dbg !1983
  %ptradd78 = getelementptr inbounds i8, ptr %ebuf0, i64 6, !dbg !1983
  store i8 0, ptr %ptradd78, align 1, !dbg !1983
  %ptradd79 = getelementptr inbounds i8, ptr %ebuf0, i64 7, !dbg !1983
  store i8 0, ptr %ptradd79, align 1, !dbg !1983
  %ptradd80 = getelementptr inbounds i8, ptr %ebuf0, i64 8, !dbg !1983
  store i8 0, ptr %ptradd80, align 1, !dbg !1983
  %ptradd81 = getelementptr inbounds i8, ptr %ebuf0, i64 9, !dbg !1983
  store i8 0, ptr %ptradd81, align 1, !dbg !1983
  %ptradd82 = getelementptr inbounds i8, ptr %ebuf0, i64 10, !dbg !1983
  store i8 0, ptr %ptradd82, align 1, !dbg !1983
  %ptradd83 = getelementptr inbounds i8, ptr %ebuf0, i64 11, !dbg !1983
  store i8 0, ptr %ptradd83, align 1, !dbg !1983
  call void @llvm.dbg.declare(metadata ptr %ebuf, metadata !1984, metadata !DIExpression()), !dbg !1985
  %ptradd_any = getelementptr i8, ptr %ebuf0, i64 12, !dbg !1986
  store ptr %ptradd_any, ptr %ebuf, align 8, !dbg !1986
  call void @llvm.dbg.declare(metadata ptr %buf_array, metadata !1987, metadata !DIExpression()), !dbg !1991
  call void @llvm.memset.p0.i64(ptr align 16 %buf_array, i8 0, i64 22, i1 false), !dbg !1991
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !1992, metadata !DIExpression()), !dbg !1993
  store ptr %buf_array, ptr %buf, align 8, !dbg !1994
  call void @llvm.dbg.declare(metadata ptr %p, metadata !1995, metadata !DIExpression()), !dbg !1996
  %82 = load ptr, ptr %self, align 8, !dbg !1997
  %ptradd84 = getelementptr inbounds i8, ptr %82, i64 16, !dbg !1997
  %83 = load i32, ptr %ptradd84, align 8, !dbg !1997
  %lshrl85 = lshr i32 %83, 6, !dbg !1997
  %84 = and i32 1, %lshrl85, !dbg !1997
  %trunc86 = trunc i32 %84 to i8, !dbg !1997
  %85 = trunc i8 %trunc86 to i1, !dbg !1997
  br i1 %85, label %cond.lhs, label %cond.rhs, !dbg !1997

cond.lhs:                                         ; preds = %if.exit72
  %86 = load ptr, ptr %self, align 8, !dbg !1998
  %ptradd87 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !1998
  %ptradd88 = getelementptr inbounds i8, ptr %ptradd87, i64 8, !dbg !1998
  %87 = load i32, ptr %ptradd88, align 8, !dbg !1998
  br label %cond.phi, !dbg !1998

cond.rhs:                                         ; preds = %if.exit72
  br label %cond.phi, !dbg !1999

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val89 = phi i32 [ %87, %cond.lhs ], [ -1, %cond.rhs ], !dbg !1999
  %sext = sext i32 %val89 to i64, !dbg !1999
  store i64 %sext, ptr %p, align 8, !dbg !1999
  %88 = load i32, ptr %formatting, align 4, !dbg !2000
  %eq = icmp eq i32 %88, 3, !dbg !2000
  br i1 %eq, label %if.then90, label %if.exit313, !dbg !2000

if.then90:                                        ; preds = %cond.phi
  call void @llvm.dbg.declare(metadata ptr %round, metadata !2001, metadata !DIExpression()), !dbg !2003
  store double 8.000000e+00, ptr %round, align 8, !dbg !2004
  %89 = load i64, ptr %pl, align 8, !dbg !2005
  %add91 = add i64 %89, 2, !dbg !2005
  store i64 %add91, ptr %pl, align 8, !dbg !2005
  %90 = load i64, ptr %p, align 8, !dbg !2006
  %gt = icmp sgt i64 %90, 0, !dbg !2006
  br i1 %gt, label %and.rhs, label %and.phi, !dbg !2006

and.rhs:                                          ; preds = %if.then90
  %91 = load i64, ptr %p, align 8, !dbg !2007
  %lt92 = icmp slt i64 %91, 12, !dbg !2007
  br label %and.phi, !dbg !2007

and.phi:                                          ; preds = %and.rhs, %if.then90
  %val93 = phi i1 [ false, %if.then90 ], [ %lt92, %and.rhs ], !dbg !2007
  br i1 %val93, label %if.then94, label %if.exit107, !dbg !2007

if.then94:                                        ; preds = %and.phi
  call void @llvm.dbg.declare(metadata ptr %re, metadata !2008, metadata !DIExpression()), !dbg !2010
  %92 = load i64, ptr %p, align 8, !dbg !2011
  %trunc95 = trunc i64 %92 to i32, !dbg !2011
  %sub96 = sub i32 12, %trunc95, !dbg !2012
  store i32 %sub96, ptr %re, align 4, !dbg !2012
  %93 = load double, ptr %round, align 8, !dbg !2013
  %fmul97 = fmul double %93, 2.000000e+00, !dbg !2013
  store double %fmul97, ptr %round, align 8, !dbg !2013
  br label %loop.cond, !dbg !2014

loop.cond:                                        ; preds = %loop.body, %if.then94
  %94 = load i32, ptr %re, align 4, !dbg !2015
  %sub98 = sub i32 %94, 1, !dbg !2015
  store i32 %sub98, ptr %re, align 4, !dbg !2015
  %intbool99 = icmp ne i32 %94, 0, !dbg !2015
  br i1 %intbool99, label %loop.body, label %loop.exit, !dbg !2015

loop.body:                                        ; preds = %loop.cond
  %95 = load double, ptr %round, align 8, !dbg !2017
  %fmul100 = fmul double %95, 1.600000e+01, !dbg !2017
  store double %fmul100, ptr %round, align 8, !dbg !2017
  br label %loop.cond, !dbg !2017

loop.exit:                                        ; preds = %loop.cond
  %96 = load i8, ptr %is_neg, align 1, !dbg !2018
  %97 = trunc i8 %96 to i1, !dbg !2018
  br i1 %97, label %if.then101, label %if.else, !dbg !2018

if.then101:                                       ; preds = %loop.exit
  %98 = load double, ptr %y, align 8, !dbg !2019
  %fneg102 = fneg double %98, !dbg !2019
  store double %fneg102, ptr %y, align 8, !dbg !2019
  %99 = load double, ptr %y, align 8, !dbg !2021
  %100 = load double, ptr %round, align 8, !dbg !2022
  %fsub = fsub double %99, %100, !dbg !2021
  store double %fsub, ptr %y, align 8, !dbg !2021
  %101 = load double, ptr %y, align 8, !dbg !2023
  %102 = load double, ptr %round, align 8, !dbg !2024
  %fadd = fadd double %101, %102, !dbg !2023
  store double %fadd, ptr %y, align 8, !dbg !2023
  %103 = load double, ptr %y, align 8, !dbg !2025
  %fneg103 = fneg double %103, !dbg !2025
  store double %fneg103, ptr %y, align 8, !dbg !2025
  br label %if.exit106, !dbg !2025

if.else:                                          ; preds = %loop.exit
  %104 = load double, ptr %y, align 8, !dbg !2026
  %105 = load double, ptr %round, align 8, !dbg !2028
  %fadd104 = fadd double %104, %105, !dbg !2026
  store double %fadd104, ptr %y, align 8, !dbg !2026
  %106 = load double, ptr %y, align 8, !dbg !2029
  %107 = load double, ptr %round, align 8, !dbg !2030
  %fsub105 = fsub double %106, %107, !dbg !2029
  store double %fsub105, ptr %y, align 8, !dbg !2029
  br label %if.exit106, !dbg !2029

if.exit106:                                       ; preds = %if.else, %if.then101
  br label %if.exit107, !dbg !2029

if.exit107:                                       ; preds = %if.exit106, %and.phi
  call void @llvm.dbg.declare(metadata ptr %estr, metadata !2031, metadata !DIExpression()), !dbg !2032
  %108 = load i32, ptr %e2, align 4, !dbg !2033
  %lt108 = icmp slt i32 %108, 0, !dbg !2033
  br i1 %lt108, label %cond.lhs109, label %cond.rhs111, !dbg !2033

cond.lhs109:                                      ; preds = %if.exit107
  %109 = load i32, ptr %e2, align 4, !dbg !2034
  %neg = sub i32 0, %109, !dbg !2034
  %sext110 = sext i32 %neg to i128, !dbg !2034
  br label %cond.phi113, !dbg !2034

cond.rhs111:                                      ; preds = %if.exit107
  %110 = load i32, ptr %e2, align 4, !dbg !2035
  %sext112 = sext i32 %110 to i128, !dbg !2035
  br label %cond.phi113, !dbg !2035

cond.phi113:                                      ; preds = %cond.rhs111, %cond.lhs109
  %val114 = phi i128 [ %sext110, %cond.lhs109 ], [ %sext112, %cond.rhs111 ], !dbg !2035
  store i128 %val114, ptr %taddr, align 8
  %lo115 = load i64, ptr %taddr, align 8
  %ptradd116 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi117 = load i64, ptr %ptradd116, align 8
  %111 = load ptr, ptr %ebuf, align 8
  %112 = call ptr @std.io.fmt_u(i64 %lo115, i64 %hi117, ptr %111), !dbg !2036
  store ptr %112, ptr %estr, align 8, !dbg !2036
  %113 = load ptr, ptr %estr, align 8, !dbg !2037
  %114 = load ptr, ptr %ebuf, align 8, !dbg !2038
  %eq118 = icmp eq ptr %113, %114, !dbg !2037
  br i1 %eq118, label %if.then119, label %if.exit124, !dbg !2037

if.then119:                                       ; preds = %cond.phi113
  %115 = load ptr, ptr %estr, align 8, !dbg !2039
  %ptradd_any120 = getelementptr i8, ptr %115, i8 -1, !dbg !2039
  store ptr %ptradd_any120, ptr %estr, align 8, !dbg !2039
  %checknull121 = icmp eq ptr %ptradd_any120, null, !dbg !2039
  %116 = call i1 @llvm.expect.i1(i1 %checknull121, i1 false), !dbg !2039
  br i1 %116, label %panic122, label %checkok123, !dbg !2039

checkok123:                                       ; preds = %if.then119
  store i8 48, ptr %ptradd_any120, align 1, !dbg !2040
  br label %if.exit124, !dbg !2040

if.exit124:                                       ; preds = %checkok123, %cond.phi113
  %117 = load ptr, ptr %estr, align 8, !dbg !2041
  %ptradd_any125 = getelementptr i8, ptr %117, i8 -1, !dbg !2041
  store ptr %ptradd_any125, ptr %estr, align 8, !dbg !2041
  %checknull126 = icmp eq ptr %ptradd_any125, null, !dbg !2041
  %118 = call i1 @llvm.expect.i1(i1 %checknull126, i1 false), !dbg !2041
  br i1 %118, label %panic127, label %checkok128, !dbg !2041

checkok128:                                       ; preds = %if.exit124
  %119 = load i32, ptr %e2, align 4, !dbg !2042
  %lt129 = icmp slt i32 %119, 0, !dbg !2042
  %ternary130 = select i1 %lt129, i8 45, i8 43, !dbg !2043
  store i8 %ternary130, ptr %ptradd_any125, align 1, !dbg !2043
  %120 = load ptr, ptr %estr, align 8, !dbg !2044
  %ptradd_any131 = getelementptr i8, ptr %120, i8 -1, !dbg !2044
  store ptr %ptradd_any131, ptr %estr, align 8, !dbg !2044
  %checknull132 = icmp eq ptr %ptradd_any131, null, !dbg !2044
  %121 = call i1 @llvm.expect.i1(i1 %checknull132, i1 false), !dbg !2044
  br i1 %121, label %panic133, label %checkok134, !dbg !2044

checkok134:                                       ; preds = %checkok128
  %122 = load ptr, ptr %self, align 8, !dbg !2045
  %ptradd135 = getelementptr inbounds i8, ptr %122, i64 16, !dbg !2045
  %123 = load i32, ptr %ptradd135, align 8, !dbg !2045
  %lshrl136 = lshr i32 %123, 5, !dbg !2045
  %124 = and i32 1, %lshrl136, !dbg !2045
  %trunc137 = trunc i32 %124 to i8, !dbg !2045
  %125 = trunc i8 %trunc137 to i1, !dbg !2045
  %ternary138 = select i1 %125, i8 80, i8 112, !dbg !2046
  store i8 %ternary138, ptr %ptradd_any131, align 1, !dbg !2046
  call void @llvm.dbg.declare(metadata ptr %s139, metadata !2047, metadata !DIExpression()), !dbg !2048
  %126 = load ptr, ptr %buf, align 8, !dbg !2049
  store ptr %126, ptr %s139, align 8, !dbg !2049
  call void @llvm.dbg.declare(metadata ptr %xdigits, metadata !2050, metadata !DIExpression()), !dbg !2051
  %127 = load ptr, ptr %self, align 8, !dbg !2052
  %ptradd140 = getelementptr inbounds i8, ptr %127, i64 16, !dbg !2052
  %128 = load i32, ptr %ptradd140, align 8, !dbg !2052
  %lshrl141 = lshr i32 %128, 5, !dbg !2052
  %129 = and i32 1, %lshrl141, !dbg !2052
  %trunc142 = trunc i32 %129 to i8, !dbg !2052
  %130 = trunc i8 %trunc142 to i1, !dbg !2052
  %ternary143 = select i1 %130, ptr @std.io.XDIGITS_H, ptr @std.io.XDIGITS_L, !dbg !2053
  store ptr %ternary143, ptr %xdigits, align 8, !dbg !2053
  br label %loop.body146, !dbg !2054

loop.cond144:                                     ; preds = %if.exit176
  %131 = load double, ptr %y, align 8, !dbg !2055
  %fpbool145 = fcmp une double %131, 0.000000e+00, !dbg !2055
  br i1 %fpbool145, label %loop.body146, label %loop.exit177, !dbg !2055

loop.body146:                                     ; preds = %loop.cond144, %checkok134
  call void @llvm.dbg.declare(metadata ptr %x147, metadata !2057, metadata !DIExpression()), !dbg !2059
  %132 = load double, ptr %y, align 8, !dbg !2060
  %fpsi = fptosi double %132 to i32, !dbg !2060
  store i32 %fpsi, ptr %x147, align 4, !dbg !2060
  %133 = load ptr, ptr %s139, align 8, !dbg !2061
  %ptradd_any148 = getelementptr i8, ptr %133, i8 1, !dbg !2061
  store ptr %ptradd_any148, ptr %s139, align 8, !dbg !2061
  %checknull149 = icmp eq ptr %133, null, !dbg !2061
  %134 = call i1 @llvm.expect.i1(i1 %checknull149, i1 false), !dbg !2061
  br i1 %134, label %panic150, label %checkok151, !dbg !2061

checkok151:                                       ; preds = %loop.body146
  %135 = load ptr, ptr %xdigits, align 8, !dbg !2062
  %136 = load i32, ptr %x147, align 4, !dbg !2063
  %sext152 = sext i32 %136 to i64, !dbg !2063
  %ptradd153 = getelementptr inbounds i8, ptr %135, i64 %sext152, !dbg !2063
  %137 = load i8, ptr %ptradd153, align 1, !dbg !2063
  store i8 %137, ptr %133, align 1, !dbg !2063
  %138 = load double, ptr %y, align 8, !dbg !2064
  %139 = load i32, ptr %x147, align 4, !dbg !2065
  %sifp = sitofp i32 %139 to double, !dbg !2065
  %fsub154 = fsub double %138, %sifp, !dbg !2064
  %fmul155 = fmul double 1.600000e+01, %fsub154, !dbg !2066
  store double %fmul155, ptr %y, align 8, !dbg !2066
  %140 = load ptr, ptr %s139, align 8, !dbg !2067
  %141 = load ptr, ptr %buf, align 8, !dbg !2068
  %142 = ptrtoint ptr %140 to i64, !dbg !2067
  %143 = ptrtoint ptr %141 to i64, !dbg !2067
  %144 = sub i64 %142, %143, !dbg !2067
  %145 = sdiv exact i64 %144, 1, !dbg !2067
  %eq156 = icmp eq i64 %145, 1, !dbg !2067
  br i1 %eq156, label %and.rhs157, label %and.phi169, !dbg !2067

and.rhs157:                                       ; preds = %checkok151
  %146 = load double, ptr %y, align 8, !dbg !2069
  %fpbool158 = fcmp une double %146, 0.000000e+00, !dbg !2069
  br i1 %fpbool158, label %or.phi161, label %or.rhs159, !dbg !2069

or.rhs159:                                        ; preds = %and.rhs157
  %147 = load i64, ptr %p, align 8, !dbg !2070
  %gt160 = icmp sgt i64 %147, 0, !dbg !2070
  br label %or.phi161, !dbg !2070

or.phi161:                                        ; preds = %or.rhs159, %and.rhs157
  %val162 = phi i1 [ true, %and.rhs157 ], [ %gt160, %or.rhs159 ], !dbg !2070
  br i1 %val162, label %or.phi167, label %or.rhs163, !dbg !2070

or.rhs163:                                        ; preds = %or.phi161
  %148 = load ptr, ptr %self, align 8, !dbg !2071
  %ptradd164 = getelementptr inbounds i8, ptr %148, i64 16, !dbg !2071
  %149 = load i32, ptr %ptradd164, align 8, !dbg !2071
  %lshrl165 = lshr i32 %149, 4, !dbg !2071
  %150 = and i32 1, %lshrl165, !dbg !2071
  %trunc166 = trunc i32 %150 to i8, !dbg !2071
  %151 = trunc i8 %trunc166 to i1, !dbg !2071
  br label %or.phi167, !dbg !2071

or.phi167:                                        ; preds = %or.rhs163, %or.phi161
  %val168 = phi i1 [ true, %or.phi161 ], [ %151, %or.rhs163 ], !dbg !2071
  br label %and.phi169, !dbg !2071

and.phi169:                                       ; preds = %or.phi167, %checkok151
  %val170 = phi i1 [ false, %checkok151 ], [ %val168, %or.phi167 ], !dbg !2071
  br i1 %val170, label %if.then171, label %if.exit176, !dbg !2071

if.then171:                                       ; preds = %and.phi169
  %152 = load ptr, ptr %s139, align 8, !dbg !2072
  %ptradd_any172 = getelementptr i8, ptr %152, i8 1, !dbg !2072
  store ptr %ptradd_any172, ptr %s139, align 8, !dbg !2072
  %checknull173 = icmp eq ptr %152, null, !dbg !2072
  %153 = call i1 @llvm.expect.i1(i1 %checknull173, i1 false), !dbg !2072
  br i1 %153, label %panic174, label %checkok175, !dbg !2072

checkok175:                                       ; preds = %if.then171
  store i8 46, ptr %152, align 1, !dbg !2073
  br label %if.exit176, !dbg !2073

if.exit176:                                       ; preds = %checkok175, %and.phi169
  br label %loop.cond144, !dbg !2073

loop.exit177:                                     ; preds = %loop.cond144
  call void @llvm.dbg.declare(metadata ptr %outlen, metadata !2074, metadata !DIExpression()), !dbg !2075
  %154 = load ptr, ptr %s139, align 8, !dbg !2076
  %155 = load ptr, ptr %buf, align 8, !dbg !2077
  %156 = ptrtoint ptr %154 to i64, !dbg !2076
  %157 = ptrtoint ptr %155 to i64, !dbg !2076
  %158 = sub i64 %156, %157, !dbg !2076
  %159 = sdiv exact i64 %158, 1, !dbg !2076
  store i64 %159, ptr %outlen, align 8, !dbg !2076
  call void @llvm.dbg.declare(metadata ptr %explen, metadata !2078, metadata !DIExpression()), !dbg !2079
  %160 = load ptr, ptr %ebuf, align 8, !dbg !2080
  %161 = load ptr, ptr %estr, align 8, !dbg !2081
  %162 = ptrtoint ptr %160 to i64, !dbg !2080
  %163 = ptrtoint ptr %161 to i64, !dbg !2080
  %164 = sub i64 %162, %163, !dbg !2080
  %165 = sdiv exact i64 %164, 1, !dbg !2080
  store i64 %165, ptr %explen, align 8, !dbg !2080
  %166 = load i64, ptr %p, align 8, !dbg !2082
  %167 = load i64, ptr %explen, align 8, !dbg !2083
  %sub178 = sub i64 2147483645, %167, !dbg !2084
  %168 = load i64, ptr %pl, align 8, !dbg !2085
  %sub179 = sub i64 %sub178, %168, !dbg !2084
  %gt180 = icmp sgt i64 %166, %sub179, !dbg !2082
  br i1 %gt180, label %if.then181, label %if.exit182, !dbg !2082

if.then181:                                       ; preds = %loop.exit177
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2086

if.exit182:                                       ; preds = %loop.exit177
  call void @llvm.dbg.declare(metadata ptr %len183, metadata !2087, metadata !DIExpression()), !dbg !2088
  store i64 0, ptr %len183, align 8, !dbg !2088
  call void @llvm.dbg.declare(metadata ptr %l, metadata !2089, metadata !DIExpression()), !dbg !2090
  %169 = load i64, ptr %p, align 8, !dbg !2091
  %intbool184 = icmp ne i64 %169, 0, !dbg !2091
  br i1 %intbool184, label %and.rhs185, label %and.phi188, !dbg !2091

and.rhs185:                                       ; preds = %if.exit182
  %170 = load i64, ptr %outlen, align 8, !dbg !2092
  %sub186 = sub i64 %170, 2, !dbg !2092
  %171 = load i64, ptr %p, align 8, !dbg !2093
  %lt187 = icmp slt i64 %sub186, %171, !dbg !2092
  br label %and.phi188, !dbg !2092

and.phi188:                                       ; preds = %and.rhs185, %if.exit182
  %val189 = phi i1 [ false, %if.exit182 ], [ %lt187, %and.rhs185 ], !dbg !2092
  br i1 %val189, label %cond.lhs190, label %cond.rhs193, !dbg !2092

cond.lhs190:                                      ; preds = %and.phi188
  %172 = load i64, ptr %p, align 8, !dbg !2094
  %add191 = add i64 %172, 2, !dbg !2094
  %173 = load i64, ptr %explen, align 8, !dbg !2095
  %add192 = add i64 %add191, %173, !dbg !2094
  br label %cond.phi195, !dbg !2094

cond.rhs193:                                      ; preds = %and.phi188
  %174 = load i64, ptr %outlen, align 8, !dbg !2096
  %175 = load i64, ptr %explen, align 8, !dbg !2097
  %add194 = add i64 %174, %175, !dbg !2096
  br label %cond.phi195, !dbg !2096

cond.phi195:                                      ; preds = %cond.rhs193, %cond.lhs190
  %val196 = phi i64 [ %add192, %cond.lhs190 ], [ %add194, %cond.rhs193 ], !dbg !2096
  store i64 %val196, ptr %l, align 8, !dbg !2096
  %176 = load ptr, ptr %self, align 8, !dbg !2098
  %ptradd197 = getelementptr inbounds i8, ptr %176, i64 16, !dbg !2098
  %177 = load i32, ptr %ptradd197, align 8, !dbg !2098
  %lshrl198 = lshr i32 %177, 1, !dbg !2098
  %178 = and i32 1, %lshrl198, !dbg !2098
  %trunc199 = trunc i32 %178 to i8, !dbg !2098
  %179 = trunc i8 %trunc199 to i1, !dbg !2098
  %not200 = xor i1 %179, true, !dbg !2098
  br i1 %not200, label %and.rhs201, label %and.phi205, !dbg !2098

and.rhs201:                                       ; preds = %cond.phi195
  %180 = load ptr, ptr %self, align 8, !dbg !2099
  %ptradd202 = getelementptr inbounds i8, ptr %180, i64 16, !dbg !2099
  %181 = load i32, ptr %ptradd202, align 8, !dbg !2099
  %182 = and i32 1, %181, !dbg !2099
  %trunc203 = trunc i32 %182 to i8, !dbg !2099
  %183 = trunc i8 %trunc203 to i1, !dbg !2099
  %not204 = xor i1 %183, true, !dbg !2099
  br label %and.phi205, !dbg !2099

and.phi205:                                       ; preds = %and.rhs201, %cond.phi195
  %val206 = phi i1 [ false, %cond.phi195 ], [ %not204, %and.rhs201 ], !dbg !2099
  br i1 %val206, label %if.then207, label %if.exit220, !dbg !2099

if.then207:                                       ; preds = %and.phi205
  %184 = load i64, ptr %len183, align 8, !dbg !2100
  %185 = load ptr, ptr %self, align 8, !dbg !2101
  %ptradd209 = getelementptr inbounds i8, ptr %185, i64 16, !dbg !2101
  %ptradd210 = getelementptr inbounds i8, ptr %ptradd209, i64 4, !dbg !2101
  %186 = load i32, ptr %ptradd210, align 4, !dbg !2101
  %zext211 = zext i32 %186 to i64, !dbg !2101
  %187 = load i64, ptr %pl, align 8, !dbg !2102
  %188 = load i64, ptr %l, align 8, !dbg !2103
  %add212 = add i64 %187, %188, !dbg !2102
  %189 = load ptr, ptr %self, align 8
  %190 = call i64 @std.io.Formatter.pad(ptr %retparam213, ptr %189, i8 zeroext 32, i64 %zext211, i64 %add212) #5, !dbg !2104
  %not_err214 = icmp eq i64 %190, 0, !dbg !2104
  %191 = call i1 @llvm.expect.i1(i1 %not_err214, i1 true), !dbg !2104
  br i1 %191, label %after_check216, label %assign_optional215, !dbg !2104

assign_optional215:                               ; preds = %if.then207
  store i64 %190, ptr %error_var208, align 8, !dbg !2104
  br label %guard_block217, !dbg !2104

after_check216:                                   ; preds = %if.then207
  br label %noerr_block218, !dbg !2104

guard_block217:                                   ; preds = %assign_optional215
  %192 = load i64, ptr %error_var208, align 8, !dbg !2104
  ret i64 %192, !dbg !2104

noerr_block218:                                   ; preds = %after_check216
  %193 = load i64, ptr %retparam213, align 8, !dbg !2104
  %add219 = add i64 %184, %193, !dbg !2100
  store i64 %add219, ptr %len183, align 8, !dbg !2100
  br label %if.exit220, !dbg !2100

if.exit220:                                       ; preds = %noerr_block218, %and.phi205
  %194 = load i8, ptr %is_neg, align 1, !dbg !2105
  %195 = trunc i8 %194 to i1, !dbg !2105
  br i1 %195, label %or.phi225, label %or.rhs221, !dbg !2105

or.rhs221:                                        ; preds = %if.exit220
  %196 = load ptr, ptr %self, align 8, !dbg !2106
  %ptradd222 = getelementptr inbounds i8, ptr %196, i64 16, !dbg !2106
  %197 = load i32, ptr %ptradd222, align 8, !dbg !2106
  %lshrl223 = lshr i32 %197, 2, !dbg !2106
  %198 = and i32 1, %lshrl223, !dbg !2106
  %trunc224 = trunc i32 %198 to i8, !dbg !2106
  %199 = trunc i8 %trunc224 to i1, !dbg !2106
  br label %or.phi225, !dbg !2106

or.phi225:                                        ; preds = %or.rhs221, %if.exit220
  %val226 = phi i1 [ true, %if.exit220 ], [ %199, %or.rhs221 ], !dbg !2106
  br i1 %val226, label %if.then227, label %if.exit237, !dbg !2106

if.then227:                                       ; preds = %or.phi225
  %200 = load i64, ptr %len183, align 8, !dbg !2107
  %201 = load i8, ptr %is_neg, align 1, !dbg !2108
  %202 = trunc i8 %201 to i1, !dbg !2108
  %ternary229 = select i1 %202, i8 45, i8 43, !dbg !2109
  %203 = load ptr, ptr %self, align 8
  %204 = call i64 @std.io.Formatter.out(ptr %retparam230, ptr %203, i8 zeroext %ternary229), !dbg !2110
  %not_err231 = icmp eq i64 %204, 0, !dbg !2110
  %205 = call i1 @llvm.expect.i1(i1 %not_err231, i1 true), !dbg !2110
  br i1 %205, label %after_check233, label %assign_optional232, !dbg !2110

assign_optional232:                               ; preds = %if.then227
  store i64 %204, ptr %error_var228, align 8, !dbg !2110
  br label %guard_block234, !dbg !2110

after_check233:                                   ; preds = %if.then227
  br label %noerr_block235, !dbg !2110

guard_block234:                                   ; preds = %assign_optional232
  %206 = load i64, ptr %error_var228, align 8, !dbg !2110
  ret i64 %206, !dbg !2110

noerr_block235:                                   ; preds = %after_check233
  %207 = load i64, ptr %retparam230, align 8, !dbg !2110
  %add236 = add i64 %200, %207, !dbg !2107
  store i64 %add236, ptr %len183, align 8, !dbg !2107
  br label %if.exit237, !dbg !2107

if.exit237:                                       ; preds = %noerr_block235, %or.phi225
  %208 = load i64, ptr %len183, align 8, !dbg !2111
  %209 = load ptr, ptr %self, align 8, !dbg !2112
  %ptradd239 = getelementptr inbounds i8, ptr %209, i64 16, !dbg !2112
  %210 = load i32, ptr %ptradd239, align 8, !dbg !2112
  %lshrl240 = lshr i32 %210, 5, !dbg !2112
  %211 = and i32 1, %lshrl240, !dbg !2112
  %trunc241 = trunc i32 %211 to i8, !dbg !2112
  %212 = trunc i8 %trunc241 to i1, !dbg !2112
  %ternary242 = select i1 %212, %"char[]" { ptr @.str.160, i64 2 }, %"char[]" { ptr @.str.161, i64 2 }, !dbg !2113
  %213 = load ptr, ptr %self, align 8
  %214 = extractvalue %"char[]" %ternary242, 0
  %215 = extractvalue %"char[]" %ternary242, 1
  %216 = call i64 @std.io.Formatter.out_chars(ptr %retparam243, ptr %213, ptr %214, i64 %215), !dbg !2114
  %not_err244 = icmp eq i64 %216, 0, !dbg !2114
  %217 = call i1 @llvm.expect.i1(i1 %not_err244, i1 true), !dbg !2114
  br i1 %217, label %after_check246, label %assign_optional245, !dbg !2114

assign_optional245:                               ; preds = %if.exit237
  store i64 %216, ptr %error_var238, align 8, !dbg !2114
  br label %guard_block247, !dbg !2114

after_check246:                                   ; preds = %if.exit237
  br label %noerr_block248, !dbg !2114

guard_block247:                                   ; preds = %assign_optional245
  %218 = load i64, ptr %error_var238, align 8, !dbg !2114
  ret i64 %218, !dbg !2114

noerr_block248:                                   ; preds = %after_check246
  %219 = load i64, ptr %retparam243, align 8, !dbg !2114
  %add249 = add i64 %208, %219, !dbg !2111
  store i64 %add249, ptr %len183, align 8, !dbg !2111
  %220 = load ptr, ptr %self, align 8, !dbg !2115
  %ptradd250 = getelementptr inbounds i8, ptr %220, i64 16, !dbg !2115
  %221 = load i32, ptr %ptradd250, align 8, !dbg !2115
  %222 = and i32 1, %221, !dbg !2115
  %trunc251 = trunc i32 %222 to i8, !dbg !2115
  %223 = trunc i8 %trunc251 to i1, !dbg !2115
  br i1 %223, label %if.then252, label %if.exit265, !dbg !2115

if.then252:                                       ; preds = %noerr_block248
  %224 = load i64, ptr %len183, align 8, !dbg !2116
  %225 = load ptr, ptr %self, align 8, !dbg !2117
  %ptradd254 = getelementptr inbounds i8, ptr %225, i64 16, !dbg !2117
  %ptradd255 = getelementptr inbounds i8, ptr %ptradd254, i64 4, !dbg !2117
  %226 = load i32, ptr %ptradd255, align 4, !dbg !2117
  %zext256 = zext i32 %226 to i64, !dbg !2117
  %227 = load i64, ptr %pl, align 8, !dbg !2118
  %228 = load i64, ptr %l, align 8, !dbg !2119
  %add257 = add i64 %227, %228, !dbg !2118
  %229 = load ptr, ptr %self, align 8
  %230 = call i64 @std.io.Formatter.pad(ptr %retparam258, ptr %229, i8 zeroext 48, i64 %zext256, i64 %add257) #5, !dbg !2120
  %not_err259 = icmp eq i64 %230, 0, !dbg !2120
  %231 = call i1 @llvm.expect.i1(i1 %not_err259, i1 true), !dbg !2120
  br i1 %231, label %after_check261, label %assign_optional260, !dbg !2120

assign_optional260:                               ; preds = %if.then252
  store i64 %230, ptr %error_var253, align 8, !dbg !2120
  br label %guard_block262, !dbg !2120

after_check261:                                   ; preds = %if.then252
  br label %noerr_block263, !dbg !2120

guard_block262:                                   ; preds = %assign_optional260
  %232 = load i64, ptr %error_var253, align 8, !dbg !2120
  ret i64 %232, !dbg !2120

noerr_block263:                                   ; preds = %after_check261
  %233 = load i64, ptr %retparam258, align 8, !dbg !2120
  %add264 = add i64 %224, %233, !dbg !2116
  store i64 %add264, ptr %len183, align 8, !dbg !2116
  br label %if.exit265, !dbg !2116

if.exit265:                                       ; preds = %noerr_block263, %noerr_block248
  %234 = load i64, ptr %len183, align 8, !dbg !2121
  %235 = load ptr, ptr %buf, align 8, !dbg !2122
  %236 = load i64, ptr %outlen, align 8, !dbg !2123
  %add267 = add i64 0, %236, !dbg !2123
  %size = sub i64 %add267, 0, !dbg !2123
  %237 = insertvalue %"char[]" undef, ptr %235, 0, !dbg !2123
  %238 = insertvalue %"char[]" %237, i64 %size, 1, !dbg !2123
  %239 = load ptr, ptr %self, align 8
  %240 = call i64 @std.io.Formatter.out_chars(ptr %retparam268, ptr %239, ptr %235, i64 %size), !dbg !2124
  %not_err269 = icmp eq i64 %240, 0, !dbg !2124
  %241 = call i1 @llvm.expect.i1(i1 %not_err269, i1 true), !dbg !2124
  br i1 %241, label %after_check271, label %assign_optional270, !dbg !2124

assign_optional270:                               ; preds = %if.exit265
  store i64 %240, ptr %error_var266, align 8, !dbg !2124
  br label %guard_block272, !dbg !2124

after_check271:                                   ; preds = %if.exit265
  br label %noerr_block273, !dbg !2124

guard_block272:                                   ; preds = %assign_optional270
  %242 = load i64, ptr %error_var266, align 8, !dbg !2124
  ret i64 %242, !dbg !2124

noerr_block273:                                   ; preds = %after_check271
  %243 = load i64, ptr %retparam268, align 8, !dbg !2124
  %add274 = add i64 %234, %243, !dbg !2121
  store i64 %add274, ptr %len183, align 8, !dbg !2121
  %244 = load i64, ptr %len183, align 8, !dbg !2125
  %245 = load i64, ptr %l, align 8, !dbg !2126
  %246 = load i64, ptr %outlen, align 8, !dbg !2127
  %sub276 = sub i64 %245, %246, !dbg !2126
  %247 = load i64, ptr %explen, align 8, !dbg !2128
  %sub277 = sub i64 %sub276, %247, !dbg !2126
  %248 = load ptr, ptr %self, align 8
  %249 = call i64 @std.io.Formatter.pad(ptr %retparam278, ptr %248, i8 zeroext 48, i64 %sub277, i64 0) #5, !dbg !2129
  %not_err279 = icmp eq i64 %249, 0, !dbg !2129
  %250 = call i1 @llvm.expect.i1(i1 %not_err279, i1 true), !dbg !2129
  br i1 %250, label %after_check281, label %assign_optional280, !dbg !2129

assign_optional280:                               ; preds = %noerr_block273
  store i64 %249, ptr %error_var275, align 8, !dbg !2129
  br label %guard_block282, !dbg !2129

after_check281:                                   ; preds = %noerr_block273
  br label %noerr_block283, !dbg !2129

guard_block282:                                   ; preds = %assign_optional280
  %251 = load i64, ptr %error_var275, align 8, !dbg !2129
  ret i64 %251, !dbg !2129

noerr_block283:                                   ; preds = %after_check281
  %252 = load i64, ptr %retparam278, align 8, !dbg !2129
  %add284 = add i64 %244, %252, !dbg !2125
  store i64 %add284, ptr %len183, align 8, !dbg !2125
  %253 = load i64, ptr %len183, align 8, !dbg !2130
  %254 = load ptr, ptr %estr, align 8, !dbg !2131
  %255 = load i64, ptr %explen, align 8, !dbg !2132
  %add286 = add i64 0, %255, !dbg !2132
  %size287 = sub i64 %add286, 0, !dbg !2132
  %256 = insertvalue %"char[]" undef, ptr %254, 0, !dbg !2132
  %257 = insertvalue %"char[]" %256, i64 %size287, 1, !dbg !2132
  %258 = load ptr, ptr %self, align 8
  %259 = call i64 @std.io.Formatter.out_chars(ptr %retparam288, ptr %258, ptr %254, i64 %size287), !dbg !2133
  %not_err289 = icmp eq i64 %259, 0, !dbg !2133
  %260 = call i1 @llvm.expect.i1(i1 %not_err289, i1 true), !dbg !2133
  br i1 %260, label %after_check291, label %assign_optional290, !dbg !2133

assign_optional290:                               ; preds = %noerr_block283
  store i64 %259, ptr %error_var285, align 8, !dbg !2133
  br label %guard_block292, !dbg !2133

after_check291:                                   ; preds = %noerr_block283
  br label %noerr_block293, !dbg !2133

guard_block292:                                   ; preds = %assign_optional290
  %261 = load i64, ptr %error_var285, align 8, !dbg !2133
  ret i64 %261, !dbg !2133

noerr_block293:                                   ; preds = %after_check291
  %262 = load i64, ptr %retparam288, align 8, !dbg !2133
  %add294 = add i64 %253, %262, !dbg !2130
  store i64 %add294, ptr %len183, align 8, !dbg !2130
  %263 = load ptr, ptr %self, align 8, !dbg !2134
  %ptradd295 = getelementptr inbounds i8, ptr %263, i64 16, !dbg !2134
  %264 = load i32, ptr %ptradd295, align 8, !dbg !2134
  %lshrl296 = lshr i32 %264, 1, !dbg !2134
  %265 = and i32 1, %lshrl296, !dbg !2134
  %trunc297 = trunc i32 %265 to i8, !dbg !2134
  %266 = trunc i8 %trunc297 to i1, !dbg !2134
  br i1 %266, label %if.then298, label %if.exit311, !dbg !2134

if.then298:                                       ; preds = %noerr_block293
  %267 = load i64, ptr %len183, align 8, !dbg !2135
  %268 = load ptr, ptr %self, align 8, !dbg !2136
  %ptradd300 = getelementptr inbounds i8, ptr %268, i64 16, !dbg !2136
  %ptradd301 = getelementptr inbounds i8, ptr %ptradd300, i64 4, !dbg !2136
  %269 = load i32, ptr %ptradd301, align 4, !dbg !2136
  %zext302 = zext i32 %269 to i64, !dbg !2136
  %270 = load i64, ptr %pl, align 8, !dbg !2137
  %271 = load i64, ptr %l, align 8, !dbg !2138
  %add303 = add i64 %270, %271, !dbg !2137
  %272 = load ptr, ptr %self, align 8
  %273 = call i64 @std.io.Formatter.pad(ptr %retparam304, ptr %272, i8 zeroext 32, i64 %zext302, i64 %add303) #5, !dbg !2139
  %not_err305 = icmp eq i64 %273, 0, !dbg !2139
  %274 = call i1 @llvm.expect.i1(i1 %not_err305, i1 true), !dbg !2139
  br i1 %274, label %after_check307, label %assign_optional306, !dbg !2139

assign_optional306:                               ; preds = %if.then298
  store i64 %273, ptr %error_var299, align 8, !dbg !2139
  br label %guard_block308, !dbg !2139

after_check307:                                   ; preds = %if.then298
  br label %noerr_block309, !dbg !2139

guard_block308:                                   ; preds = %assign_optional306
  %275 = load i64, ptr %error_var299, align 8, !dbg !2139
  ret i64 %275, !dbg !2139

noerr_block309:                                   ; preds = %after_check307
  %276 = load i64, ptr %retparam304, align 8, !dbg !2139
  %add310 = add i64 %267, %276, !dbg !2135
  store i64 %add310, ptr %len183, align 8, !dbg !2135
  br label %if.exit311, !dbg !2135

if.exit311:                                       ; preds = %noerr_block309, %noerr_block293
  %277 = load i64, ptr %len183, align 8, !dbg !2140
  store i64 %277, ptr %0, align 8, !dbg !2140
  ret i64 0, !dbg !2140

if.exit313:                                       ; preds = %cond.phi
  %278 = load i64, ptr %p, align 8, !dbg !2141
  %lt314 = icmp slt i64 %278, 0, !dbg !2141
  br i1 %lt314, label %if.then315, label %if.exit316, !dbg !2141

if.then315:                                       ; preds = %if.exit313
  store i64 6, ptr %p, align 8, !dbg !2142
  br label %if.exit316, !dbg !2142

if.exit316:                                       ; preds = %if.then315, %if.exit313
  %279 = load double, ptr %y, align 8, !dbg !2143
  %fpbool317 = fcmp une double %279, 0.000000e+00, !dbg !2143
  br i1 %fpbool317, label %if.then318, label %if.exit321, !dbg !2143

if.then318:                                       ; preds = %if.exit316
  %280 = load double, ptr %y, align 8, !dbg !2144
  %fmul319 = fmul double %280, 0x41B0000000000000, !dbg !2144
  store double %fmul319, ptr %y, align 8, !dbg !2144
  %281 = load i32, ptr %e2, align 4, !dbg !2146
  %sub320 = sub i32 %281, 28, !dbg !2146
  store i32 %sub320, ptr %e2, align 4, !dbg !2146
  br label %if.exit321, !dbg !2146

if.exit321:                                       ; preds = %if.then318, %if.exit316
  call void @llvm.dbg.declare(metadata ptr %a, metadata !2147, metadata !DIExpression()), !dbg !2149
  store ptr null, ptr %a, align 8, !dbg !2149
  call void @llvm.dbg.declare(metadata ptr %z, metadata !2150, metadata !DIExpression()), !dbg !2151
  store ptr null, ptr %z, align 8, !dbg !2151
  call void @llvm.dbg.declare(metadata ptr %r, metadata !2152, metadata !DIExpression()), !dbg !2153
  store ptr null, ptr %r, align 8, !dbg !2153
  %282 = load i32, ptr %e2, align 4, !dbg !2154
  %lt322 = icmp slt i32 %282, 0, !dbg !2154
  br i1 %lt322, label %if.then323, label %if.else324, !dbg !2154

if.then323:                                       ; preds = %if.exit321
  store ptr %big, ptr %z, align 8, !dbg !2155
  store ptr %big, ptr %r, align 8, !dbg !2155
  store ptr %big, ptr %a, align 8, !dbg !2155
  br label %if.exit326, !dbg !2155

if.else324:                                       ; preds = %if.exit321
  %ptradd_any325 = getelementptr i8, ptr %big, i64 288, !dbg !2157
  store ptr %ptradd_any325, ptr %z, align 8, !dbg !2157
  store ptr %ptradd_any325, ptr %r, align 8, !dbg !2157
  store ptr %ptradd_any325, ptr %a, align 8, !dbg !2157
  br label %if.exit326, !dbg !2157

if.exit326:                                       ; preds = %if.else324, %if.then323
  br label %loop.body329, !dbg !2159

loop.cond327:                                     ; preds = %loop.body329
  %283 = load double, ptr %y, align 8, !dbg !2160
  %fpbool328 = fcmp une double %283, 0.000000e+00, !dbg !2160
  br i1 %fpbool328, label %loop.body329, label %loop.exit333, !dbg !2160

loop.body329:                                     ; preds = %loop.cond327, %if.exit326
  call void @llvm.dbg.declare(metadata ptr %v, metadata !2162, metadata !DIExpression()), !dbg !2164
  %284 = load ptr, ptr %z, align 8, !dbg !2165
  %ptradd_any330 = getelementptr i8, ptr %284, i8 4, !dbg !2165
  store ptr %ptradd_any330, ptr %z, align 8, !dbg !2165
  %285 = load double, ptr %y, align 8, !dbg !2166
  %fpui = fptoui double %285 to i32, !dbg !2166
  store i32 %fpui, ptr %284, align 4, !dbg !2166
  store i32 %fpui, ptr %v, align 4, !dbg !2166
  %286 = load double, ptr %y, align 8, !dbg !2167
  %287 = load i32, ptr %v, align 4, !dbg !2168
  %uifp = uitofp i32 %287 to double, !dbg !2168
  %fsub331 = fsub double %286, %uifp, !dbg !2167
  %fmul332 = fmul double 1.000000e+09, %fsub331, !dbg !2169
  store double %fmul332, ptr %y, align 8, !dbg !2169
  br label %loop.cond327, !dbg !2169

loop.exit333:                                     ; preds = %loop.cond327
  br label %loop.cond334, !dbg !2170

loop.cond334:                                     ; preds = %loop.exit376, %loop.exit333
  %288 = load i32, ptr %e2, align 4, !dbg !2171
  %gt335 = icmp sgt i32 %288, 0, !dbg !2171
  br i1 %gt335, label %loop.body336, label %loop.exit378, !dbg !2171

loop.body336:                                     ; preds = %loop.cond334
  call void @llvm.dbg.declare(metadata ptr %carry, metadata !2173, metadata !DIExpression()), !dbg !2175
  store i32 0, ptr %carry, align 4, !dbg !2176
  call void @llvm.dbg.declare(metadata ptr %sh, metadata !2177, metadata !DIExpression()), !dbg !2178
  store i32 29, ptr %x337, align 4
  %289 = load i32, ptr %e2, align 4
  store i32 %289, ptr %y338, align 4
  %290 = load i32, ptr %x337, align 4, !dbg !2179
  %291 = load i32, ptr %y338, align 4, !dbg !2182
  %292 = call i32 @llvm.smin.i32(i32 %290, i32 %291), !dbg !2182
  store i32 %292, ptr %sh, align 4, !dbg !2182
  call void @llvm.dbg.declare(metadata ptr %d, metadata !2183, metadata !DIExpression()), !dbg !2185
  %293 = load ptr, ptr %z, align 8, !dbg !2186
  %ptradd_any339 = getelementptr i8, ptr %293, i64 -4, !dbg !2187
  store ptr %ptradd_any339, ptr %d, align 8, !dbg !2187
  br label %loop.cond340, !dbg !2187

loop.cond340:                                     ; preds = %checkok355, %loop.body336
  %294 = load ptr, ptr %d, align 8, !dbg !2188
  %295 = load ptr, ptr %a, align 8, !dbg !2189
  %ge = icmp uge ptr %294, %295, !dbg !2188
  br i1 %ge, label %loop.body341, label %loop.exit359, !dbg !2188

loop.body341:                                     ; preds = %loop.cond340
  call void @llvm.dbg.declare(metadata ptr %x342, metadata !2190, metadata !DIExpression()), !dbg !2192
  %296 = load ptr, ptr %d, align 8, !dbg !2193
  %checknull343 = icmp eq ptr %296, null, !dbg !2193
  %297 = call i1 @llvm.expect.i1(i1 %checknull343, i1 false), !dbg !2193
  br i1 %297, label %panic344, label %checkok345, !dbg !2193

checkok345:                                       ; preds = %loop.body341
  %298 = load i32, ptr %296, align 4, !dbg !2193
  %zext346 = zext i32 %298 to i64, !dbg !2193
  %299 = load i32, ptr %sh, align 4, !dbg !2194
  %zext347 = zext i32 %299 to i64, !dbg !2195
  %shift_exceeds = icmp uge i64 %zext347, 64, !dbg !2195
  %300 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2195
  br i1 %300, label %panic348, label %checkok350, !dbg !2195

checkok350:                                       ; preds = %checkok345
  %shl = shl i64 %zext346, %zext347, !dbg !2195
  %301 = freeze i64 %shl, !dbg !2195
  %302 = load i32, ptr %carry, align 4, !dbg !2196
  %zext351 = zext i32 %302 to i64, !dbg !2196
  %add352 = add i64 %301, %zext351, !dbg !2195
  store i64 %add352, ptr %x342, align 8, !dbg !2195
  %303 = load ptr, ptr %d, align 8, !dbg !2197
  %checknull353 = icmp eq ptr %303, null, !dbg !2197
  %304 = call i1 @llvm.expect.i1(i1 %checknull353, i1 false), !dbg !2197
  br i1 %304, label %panic354, label %checkok355, !dbg !2197

checkok355:                                       ; preds = %checkok350
  %305 = load i64, ptr %x342, align 8, !dbg !2198
  %smod = srem i64 %305, 1000000000, !dbg !2199
  %trunc356 = trunc i64 %smod to i32, !dbg !2199
  store i32 %trunc356, ptr %303, align 4, !dbg !2199
  %306 = load i64, ptr %x342, align 8, !dbg !2200
  %sdiv = sdiv i64 %306, 1000000000, !dbg !2201
  %trunc357 = trunc i64 %sdiv to i32, !dbg !2201
  store i32 %trunc357, ptr %carry, align 4, !dbg !2201
  %307 = load ptr, ptr %d, align 8, !dbg !2202
  %ptradd_any358 = getelementptr i8, ptr %307, i8 -4, !dbg !2202
  store ptr %ptradd_any358, ptr %d, align 8, !dbg !2202
  br label %loop.cond340, !dbg !2202

loop.exit359:                                     ; preds = %loop.cond340
  %308 = load i32, ptr %carry, align 4, !dbg !2203
  %intbool360 = icmp ne i32 %308, 0, !dbg !2203
  br i1 %intbool360, label %if.then361, label %if.exit366, !dbg !2203

if.then361:                                       ; preds = %loop.exit359
  %309 = load ptr, ptr %a, align 8, !dbg !2204
  %ptradd_any362 = getelementptr i8, ptr %309, i8 -4, !dbg !2204
  store ptr %ptradd_any362, ptr %a, align 8, !dbg !2204
  %checknull363 = icmp eq ptr %ptradd_any362, null, !dbg !2204
  %310 = call i1 @llvm.expect.i1(i1 %checknull363, i1 false), !dbg !2204
  br i1 %310, label %panic364, label %checkok365, !dbg !2204

checkok365:                                       ; preds = %if.then361
  %311 = load i32, ptr %carry, align 4, !dbg !2205
  store i32 %311, ptr %ptradd_any362, align 4, !dbg !2205
  br label %if.exit366, !dbg !2205

if.exit366:                                       ; preds = %checkok365, %loop.exit359
  br label %loop.cond367, !dbg !2206

loop.cond367:                                     ; preds = %loop.body374, %if.exit366
  %312 = load ptr, ptr %z, align 8, !dbg !2207
  %313 = load ptr, ptr %a, align 8, !dbg !2209
  %gt368 = icmp ugt ptr %312, %313, !dbg !2207
  br i1 %gt368, label %and.rhs369, label %and.phi372, !dbg !2207

and.rhs369:                                       ; preds = %loop.cond367
  %314 = load ptr, ptr %z, align 8, !dbg !2210
  %ptradd370 = getelementptr inbounds i8, ptr %314, i64 -4, !dbg !2211
  %315 = load i32, ptr %ptradd370, align 4, !dbg !2211
  %not371 = icmp eq i32 %315, 0, !dbg !2211
  br label %and.phi372, !dbg !2211

and.phi372:                                       ; preds = %and.rhs369, %loop.cond367
  %val373 = phi i1 [ false, %loop.cond367 ], [ %not371, %and.rhs369 ], !dbg !2211
  br i1 %val373, label %loop.body374, label %loop.exit376, !dbg !2211

loop.body374:                                     ; preds = %and.phi372
  %316 = load ptr, ptr %z, align 8, !dbg !2212
  %ptradd_any375 = getelementptr i8, ptr %316, i8 -4, !dbg !2212
  store ptr %ptradd_any375, ptr %z, align 8, !dbg !2212
  br label %loop.cond367, !dbg !2212

loop.exit376:                                     ; preds = %and.phi372
  %317 = load i32, ptr %e2, align 4, !dbg !2213
  %318 = load i32, ptr %sh, align 4, !dbg !2214
  %sub377 = sub i32 %317, %318, !dbg !2213
  store i32 %sub377, ptr %e2, align 4, !dbg !2213
  br label %loop.cond334, !dbg !2213

loop.exit378:                                     ; preds = %loop.cond334
  br label %loop.cond379, !dbg !2215

loop.cond379:                                     ; preds = %if.exit463, %loop.exit378
  %319 = load i32, ptr %e2, align 4, !dbg !2216
  %lt380 = icmp slt i32 %319, 0, !dbg !2216
  br i1 %lt380, label %loop.body381, label %loop.exit465, !dbg !2216

loop.body381:                                     ; preds = %loop.cond379
  call void @llvm.dbg.declare(metadata ptr %carry382, metadata !2218, metadata !DIExpression()), !dbg !2220
  store i32 0, ptr %carry382, align 4, !dbg !2221
  call void @llvm.dbg.declare(metadata ptr %b, metadata !2222, metadata !DIExpression()), !dbg !2223
  store ptr null, ptr %b, align 8, !dbg !2223
  call void @llvm.dbg.declare(metadata ptr %sh383, metadata !2224, metadata !DIExpression()), !dbg !2225
  store i32 9, ptr %x384, align 4
  %320 = load i32, ptr %e2, align 4, !dbg !2226
  %neg385 = sub i32 0, %320, !dbg !2226
  store i32 %neg385, ptr %y386, align 4
  %321 = load i32, ptr %x384, align 4, !dbg !2227
  %322 = load i32, ptr %y386, align 4, !dbg !2230
  %323 = call i32 @llvm.smin.i32(i32 %321, i32 %322), !dbg !2230
  store i32 %323, ptr %sh383, align 4, !dbg !2230
  call void @llvm.dbg.declare(metadata ptr %need, metadata !2231, metadata !DIExpression()), !dbg !2232
  %324 = load i64, ptr %p, align 8, !dbg !2233
  %add387 = add i64 %324, 17, !dbg !2233
  %add388 = add i64 %add387, 8, !dbg !2233
  %sdiv389 = sdiv i64 %add388, 9, !dbg !2233
  %add390 = add i64 1, %sdiv389, !dbg !2234
  %trunc391 = trunc i64 %add390 to i32, !dbg !2234
  store i32 %trunc391, ptr %need, align 4, !dbg !2234
  call void @llvm.dbg.declare(metadata ptr %d392, metadata !2235, metadata !DIExpression()), !dbg !2237
  %325 = load ptr, ptr %a, align 8, !dbg !2238
  store ptr %325, ptr %d392, align 8, !dbg !2238
  br label %loop.cond393, !dbg !2238

loop.cond393:                                     ; preds = %checkok443, %loop.body381
  %326 = load ptr, ptr %d392, align 8, !dbg !2239
  %327 = load ptr, ptr %z, align 8, !dbg !2240
  %lt394 = icmp ult ptr %326, %327, !dbg !2239
  br i1 %lt394, label %loop.body395, label %loop.exit445, !dbg !2239

loop.body395:                                     ; preds = %loop.cond393
  call void @llvm.dbg.declare(metadata ptr %rm, metadata !2241, metadata !DIExpression()), !dbg !2243
  %328 = load ptr, ptr %d392, align 8, !dbg !2244
  %checknull396 = icmp eq ptr %328, null, !dbg !2244
  %329 = call i1 @llvm.expect.i1(i1 %checknull396, i1 false), !dbg !2244
  br i1 %329, label %panic397, label %checkok398, !dbg !2244

checkok398:                                       ; preds = %loop.body395
  %330 = load i32, ptr %328, align 4, !dbg !2244
  %331 = load i32, ptr %sh383, align 4, !dbg !2245
  %shift_underflow = icmp slt i32 %331, 0, !dbg !2246
  %332 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2246
  br i1 %332, label %panic399, label %checkok404, !dbg !2246

checkok404:                                       ; preds = %checkok398
  %shift_exceeds405 = icmp sge i32 %331, 32, !dbg !2246
  %333 = call i1 @llvm.expect.i1(i1 %shift_exceeds405, i1 false), !dbg !2246
  br i1 %333, label %panic406, label %checkok411, !dbg !2246

checkok411:                                       ; preds = %checkok404
  %shl412 = shl i32 1, %331, !dbg !2246
  %334 = freeze i32 %shl412, !dbg !2246
  %sub413 = sub i32 %334, 1, !dbg !2246
  %and414 = and i32 %330, %sub413, !dbg !2247
  store i32 %and414, ptr %rm, align 4, !dbg !2247
  %335 = load ptr, ptr %d392, align 8, !dbg !2248
  %checknull415 = icmp eq ptr %335, null, !dbg !2248
  %336 = call i1 @llvm.expect.i1(i1 %checknull415, i1 false), !dbg !2248
  br i1 %336, label %panic416, label %checkok417, !dbg !2248

checkok417:                                       ; preds = %checkok411
  %337 = load ptr, ptr %d392, align 8, !dbg !2249
  %checknull418 = icmp eq ptr %337, null, !dbg !2249
  %338 = call i1 @llvm.expect.i1(i1 %checknull418, i1 false), !dbg !2249
  br i1 %338, label %panic419, label %checkok420, !dbg !2249

checkok420:                                       ; preds = %checkok417
  %339 = load i32, ptr %337, align 4, !dbg !2249
  %340 = load i32, ptr %sh383, align 4, !dbg !2250
  %shift_exceeds421 = icmp uge i32 %340, 32, !dbg !2251
  %341 = call i1 @llvm.expect.i1(i1 %shift_exceeds421, i1 false), !dbg !2251
  br i1 %341, label %panic422, label %checkok427, !dbg !2251

checkok427:                                       ; preds = %checkok420
  %lshr428 = lshr i32 %339, %340, !dbg !2251
  %342 = freeze i32 %lshr428, !dbg !2251
  %343 = load i32, ptr %carry382, align 4, !dbg !2252
  %add429 = add i32 %342, %343, !dbg !2251
  store i32 %add429, ptr %335, align 4, !dbg !2251
  %344 = load i32, ptr %sh383, align 4, !dbg !2253
  %shift_underflow430 = icmp slt i32 %344, 0, !dbg !2254
  %345 = call i1 @llvm.expect.i1(i1 %shift_underflow430, i1 false), !dbg !2254
  br i1 %345, label %panic431, label %checkok436, !dbg !2254

checkok436:                                       ; preds = %checkok427
  %shift_exceeds437 = icmp sge i32 %344, 32, !dbg !2254
  %346 = call i1 @llvm.expect.i1(i1 %shift_exceeds437, i1 false), !dbg !2254
  br i1 %346, label %panic438, label %checkok443, !dbg !2254

checkok443:                                       ; preds = %checkok436
  %ashr = ashr i32 1000000000, %344, !dbg !2254
  %347 = freeze i32 %ashr, !dbg !2254
  %348 = load i32, ptr %rm, align 4, !dbg !2255
  %mul = mul i32 %347, %348, !dbg !2254
  store i32 %mul, ptr %carry382, align 4, !dbg !2254
  %349 = load ptr, ptr %d392, align 8, !dbg !2256
  %ptradd_any444 = getelementptr i8, ptr %349, i8 4, !dbg !2256
  store ptr %ptradd_any444, ptr %d392, align 8, !dbg !2256
  br label %loop.cond393, !dbg !2256

loop.exit445:                                     ; preds = %loop.cond393
  %350 = load ptr, ptr %a, align 8, !dbg !2257
  %351 = load i32, ptr %350, align 4, !dbg !2258
  %not446 = icmp eq i32 %351, 0, !dbg !2258
  br i1 %not446, label %if.then447, label %if.exit449, !dbg !2258

if.then447:                                       ; preds = %loop.exit445
  %352 = load ptr, ptr %a, align 8, !dbg !2259
  %ptradd_any448 = getelementptr i8, ptr %352, i8 4, !dbg !2259
  store ptr %ptradd_any448, ptr %a, align 8, !dbg !2259
  br label %if.exit449, !dbg !2259

if.exit449:                                       ; preds = %if.then447, %loop.exit445
  %353 = load i32, ptr %carry382, align 4, !dbg !2260
  %intbool450 = icmp ne i32 %353, 0, !dbg !2260
  br i1 %intbool450, label %if.then451, label %if.exit453, !dbg !2260

if.then451:                                       ; preds = %if.exit449
  %354 = load ptr, ptr %z, align 8, !dbg !2261
  %ptradd_any452 = getelementptr i8, ptr %354, i8 4, !dbg !2261
  store ptr %ptradd_any452, ptr %z, align 8, !dbg !2261
  %355 = load i32, ptr %carry382, align 4, !dbg !2262
  store i32 %355, ptr %354, align 4, !dbg !2262
  br label %if.exit453, !dbg !2262

if.exit453:                                       ; preds = %if.then451, %if.exit449
  %356 = load i32, ptr %formatting, align 4, !dbg !2263
  %eq454 = icmp eq i32 %356, 0, !dbg !2263
  br i1 %eq454, label %cond.lhs455, label %cond.rhs456, !dbg !2263

cond.lhs455:                                      ; preds = %if.exit453
  %357 = load ptr, ptr %r, align 8, !dbg !2264
  br label %cond.phi457, !dbg !2264

cond.rhs456:                                      ; preds = %if.exit453
  %358 = load ptr, ptr %a, align 8, !dbg !2265
  br label %cond.phi457, !dbg !2265

cond.phi457:                                      ; preds = %cond.rhs456, %cond.lhs455
  %val458 = phi ptr [ %357, %cond.lhs455 ], [ %358, %cond.rhs456 ], !dbg !2265
  store ptr %val458, ptr %b, align 8, !dbg !2265
  %359 = load ptr, ptr %z, align 8, !dbg !2266
  %360 = load ptr, ptr %b, align 8, !dbg !2267
  %361 = ptrtoint ptr %359 to i64, !dbg !2266
  %362 = ptrtoint ptr %360 to i64, !dbg !2266
  %363 = sub i64 %361, %362, !dbg !2266
  %364 = sdiv exact i64 %363, 4, !dbg !2266
  %365 = load i32, ptr %need, align 4, !dbg !2268
  %sext459 = sext i32 %365 to i64, !dbg !2268
  %gt460 = icmp sgt i64 %364, %sext459, !dbg !2266
  br i1 %gt460, label %if.then461, label %if.exit463, !dbg !2266

if.then461:                                       ; preds = %cond.phi457
  %366 = load ptr, ptr %b, align 8, !dbg !2269
  %367 = load i32, ptr %need, align 4, !dbg !2270
  %sext462 = sext i32 %367 to i64, !dbg !2270
  %ptroffset_any = getelementptr [4 x i8], ptr %366, i64 %sext462, !dbg !2270
  store ptr %ptroffset_any, ptr %z, align 8, !dbg !2270
  br label %if.exit463, !dbg !2270

if.exit463:                                       ; preds = %if.then461, %cond.phi457
  %368 = load i32, ptr %e2, align 4, !dbg !2271
  %369 = load i32, ptr %sh383, align 4, !dbg !2272
  %add464 = add i32 %368, %369, !dbg !2271
  store i32 %add464, ptr %e2, align 4, !dbg !2271
  br label %loop.cond379, !dbg !2271

loop.exit465:                                     ; preds = %loop.cond379
  call void @llvm.dbg.declare(metadata ptr %e466, metadata !2273, metadata !DIExpression()), !dbg !2274
  store i32 0, ptr %e466, align 4, !dbg !2274
  %370 = load ptr, ptr %a, align 8, !dbg !2275
  %371 = load ptr, ptr %z, align 8, !dbg !2276
  %lt467 = icmp ult ptr %370, %371, !dbg !2275
  br i1 %lt467, label %if.then468, label %if.exit479, !dbg !2275

if.then468:                                       ; preds = %loop.exit465
  call void @llvm.dbg.declare(metadata ptr %i, metadata !2277, metadata !DIExpression()), !dbg !2280
  store i32 10, ptr %i, align 4, !dbg !2281
  %372 = load ptr, ptr %r, align 8, !dbg !2282
  %373 = load ptr, ptr %a, align 8, !dbg !2283
  %374 = ptrtoint ptr %372 to i64, !dbg !2282
  %375 = ptrtoint ptr %373 to i64, !dbg !2282
  %376 = sub i64 %374, %375, !dbg !2282
  %377 = sdiv exact i64 %376, 4, !dbg !2282
  %mul469 = mul i64 9, %377, !dbg !2284
  %trunc470 = trunc i64 %mul469 to i32, !dbg !2284
  store i32 %trunc470, ptr %e466, align 4, !dbg !2284
  br label %loop.cond471, !dbg !2284

loop.cond471:                                     ; preds = %loop.body475, %if.then468
  %378 = load ptr, ptr %a, align 8, !dbg !2285
  %checknull472 = icmp eq ptr %378, null, !dbg !2285
  %379 = call i1 @llvm.expect.i1(i1 %checknull472, i1 false), !dbg !2285
  br i1 %379, label %panic473, label %checkok474, !dbg !2285

checkok474:                                       ; preds = %loop.cond471
  %380 = load i32, ptr %378, align 4, !dbg !2285
  %381 = load i32, ptr %i, align 4, !dbg !2286
  %le = icmp sle i32 %381, %380, !dbg !2287
  %check = icmp slt i32 %380, 0, !dbg !2287
  %siui-le = or i1 %check, %le, !dbg !2287
  br i1 %siui-le, label %loop.body475, label %loop.exit478, !dbg !2287

loop.body475:                                     ; preds = %checkok474
  %382 = load i32, ptr %i, align 4, !dbg !2288
  %mul476 = mul i32 %382, 10, !dbg !2288
  store i32 %mul476, ptr %i, align 4, !dbg !2288
  %383 = load i32, ptr %e466, align 4, !dbg !2289
  %add477 = add i32 %383, 1, !dbg !2289
  store i32 %add477, ptr %e466, align 4, !dbg !2289
  br label %loop.cond471, !dbg !2289

loop.exit478:                                     ; preds = %checkok474
  br label %if.exit479, !dbg !2289

if.exit479:                                       ; preds = %loop.exit478, %loop.exit465
  call void @llvm.dbg.declare(metadata ptr %j, metadata !2290, metadata !DIExpression()), !dbg !2291
  %384 = load i64, ptr %p, align 8, !dbg !2292
  %385 = load i32, ptr %formatting, align 4, !dbg !2293
  %eq480 = icmp eq i32 %385, 0, !dbg !2293
  br i1 %eq480, label %cond.lhs481, label %cond.rhs482, !dbg !2293

cond.lhs481:                                      ; preds = %if.exit479
  br label %cond.phi489, !dbg !2294

cond.rhs482:                                      ; preds = %if.exit479
  %386 = load i32, ptr %e466, align 4, !dbg !2295
  %387 = load i32, ptr %formatting, align 4, !dbg !2296
  %eq483 = icmp eq i32 %387, 2, !dbg !2296
  br i1 %eq483, label %and.rhs484, label %and.phi486, !dbg !2296

and.rhs484:                                       ; preds = %cond.rhs482
  %388 = load i64, ptr %p, align 8, !dbg !2297
  %intbool485 = icmp ne i64 %388, 0, !dbg !2297
  br label %and.phi486, !dbg !2297

and.phi486:                                       ; preds = %and.rhs484, %cond.rhs482
  %val487 = phi i1 [ false, %cond.rhs482 ], [ %intbool485, %and.rhs484 ], !dbg !2297
  %boolsi = zext i1 %val487 to i32, !dbg !2297
  %sub488 = sub i32 %386, %boolsi, !dbg !2295
  br label %cond.phi489, !dbg !2295

cond.phi489:                                      ; preds = %and.phi486, %cond.lhs481
  %val490 = phi i32 [ 0, %cond.lhs481 ], [ %sub488, %and.phi486 ], !dbg !2295
  %sext491 = sext i32 %val490 to i64, !dbg !2295
  %sub492 = sub i64 %384, %sext491, !dbg !2298
  %trunc493 = trunc i64 %sub492 to i32, !dbg !2298
  store i32 %trunc493, ptr %j, align 4, !dbg !2298
  %389 = load i32, ptr %j, align 4, !dbg !2299
  %sext494 = sext i32 %389 to i64, !dbg !2299
  %390 = load ptr, ptr %z, align 8, !dbg !2300
  %391 = load ptr, ptr %r, align 8, !dbg !2301
  %392 = ptrtoint ptr %390 to i64, !dbg !2300
  %393 = ptrtoint ptr %391 to i64, !dbg !2300
  %394 = sub i64 %392, %393, !dbg !2300
  %395 = sdiv exact i64 %394, 4, !dbg !2300
  %sub495 = sub i64 %395, 1, !dbg !2300
  %mul496 = mul i64 9, %sub495, !dbg !2302
  %lt497 = icmp slt i64 %sext494, %mul496, !dbg !2299
  br i1 %lt497, label %if.then498, label %if.exit636, !dbg !2299

if.then498:                                       ; preds = %cond.phi489
  call void @llvm.dbg.declare(metadata ptr %x499, metadata !2303, metadata !DIExpression()), !dbg !2305
  store i32 0, ptr %x499, align 4, !dbg !2305
  call void @llvm.dbg.declare(metadata ptr %d500, metadata !2306, metadata !DIExpression()), !dbg !2307
  %396 = load ptr, ptr %r, align 8, !dbg !2308
  %397 = load i32, ptr %j, align 4, !dbg !2309
  %add501 = add i32 %397, 9216, !dbg !2309
  %sdiv502 = sdiv i32 %add501, 9, !dbg !2309
  %sub503 = sub i32 %sdiv502, 1024, !dbg !2309
  %sext504 = sext i32 %sub503 to i64, !dbg !2309
  %add505 = add i64 1, %sext504, !dbg !2308
  %ptroffset_any506 = getelementptr [4 x i8], ptr %396, i64 %add505, !dbg !2308
  store ptr %ptroffset_any506, ptr %d500, align 8, !dbg !2308
  %398 = load i32, ptr %j, align 4, !dbg !2310
  %add507 = add i32 %398, 9216, !dbg !2310
  store i32 %add507, ptr %j, align 4, !dbg !2310
  %399 = load i32, ptr %j, align 4, !dbg !2311
  %smod508 = srem i32 %399, 9, !dbg !2311
  store i32 %smod508, ptr %j, align 4, !dbg !2311
  call void @llvm.dbg.declare(metadata ptr %i509, metadata !2312, metadata !DIExpression()), !dbg !2313
  store i32 0, ptr %i509, align 4, !dbg !2313
  store i32 10, ptr %i509, align 4, !dbg !2314
  %400 = load i32, ptr %j, align 4, !dbg !2316
  %add510 = add i32 %400, 1, !dbg !2316
  store i32 %add510, ptr %j, align 4, !dbg !2316
  br label %loop.cond511, !dbg !2316

loop.cond511:                                     ; preds = %loop.body513, %if.then498
  %401 = load i32, ptr %j, align 4, !dbg !2317
  %lt512 = icmp slt i32 %401, 9, !dbg !2317
  br i1 %lt512, label %loop.body513, label %loop.exit516, !dbg !2317

loop.body513:                                     ; preds = %loop.cond511
  %402 = load i32, ptr %i509, align 4, !dbg !2318
  %mul514 = mul i32 %402, 10, !dbg !2318
  store i32 %mul514, ptr %i509, align 4, !dbg !2318
  %403 = load i32, ptr %j, align 4, !dbg !2319
  %add515 = add i32 %403, 1, !dbg !2319
  store i32 %add515, ptr %j, align 4, !dbg !2319
  br label %loop.cond511, !dbg !2319

loop.exit516:                                     ; preds = %loop.cond511
  %404 = load ptr, ptr %d500, align 8, !dbg !2320
  %checknull517 = icmp eq ptr %404, null, !dbg !2320
  %405 = call i1 @llvm.expect.i1(i1 %checknull517, i1 false), !dbg !2320
  br i1 %405, label %panic518, label %checkok519, !dbg !2320

checkok519:                                       ; preds = %loop.exit516
  %406 = load i32, ptr %404, align 4, !dbg !2320
  %407 = load i32, ptr %i509, align 4, !dbg !2321
  %zero = icmp eq i32 %407, 0, !dbg !2322
  %408 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2322
  br i1 %408, label %panic520, label %checkok521, !dbg !2322

checkok521:                                       ; preds = %checkok519
  %smod522 = srem i32 %406, %407, !dbg !2322
  store i32 %smod522, ptr %x499, align 4, !dbg !2322
  %409 = load i32, ptr %x499, align 4, !dbg !2323
  %intbool523 = icmp ne i32 %409, 0, !dbg !2323
  br i1 %intbool523, label %or.phi527, label %or.rhs524, !dbg !2323

or.rhs524:                                        ; preds = %checkok521
  %410 = load ptr, ptr %d500, align 8, !dbg !2324
  %ptradd_any525 = getelementptr i8, ptr %410, i64 4, !dbg !2325
  %411 = load ptr, ptr %z, align 8, !dbg !2326
  %neq526 = icmp ne ptr %ptradd_any525, %411, !dbg !2324
  br label %or.phi527, !dbg !2324

or.phi527:                                        ; preds = %or.rhs524, %checkok521
  %val528 = phi i1 [ true, %checkok521 ], [ %neq526, %or.rhs524 ], !dbg !2324
  br i1 %val528, label %if.then529, label %if.exit630, !dbg !2324

if.then529:                                       ; preds = %or.phi527
  call void @llvm.dbg.declare(metadata ptr %round530, metadata !2327, metadata !DIExpression()), !dbg !2329
  store double 0x4340000000000000, ptr %round530, align 8, !dbg !2330
  call void @llvm.dbg.declare(metadata ptr %small, metadata !2331, metadata !DIExpression()), !dbg !2332
  store double 0.000000e+00, ptr %small, align 8, !dbg !2332
  %412 = load ptr, ptr %d500, align 8, !dbg !2333
  %checknull531 = icmp eq ptr %412, null, !dbg !2333
  %413 = call i1 @llvm.expect.i1(i1 %checknull531, i1 false), !dbg !2333
  br i1 %413, label %panic532, label %checkok533, !dbg !2333

checkok533:                                       ; preds = %if.then529
  %414 = load i32, ptr %412, align 4, !dbg !2333
  %415 = load i32, ptr %i509, align 4, !dbg !2334
  %zero534 = icmp eq i32 %415, 0, !dbg !2335
  %416 = call i1 @llvm.expect.i1(i1 %zero534, i1 false), !dbg !2335
  br i1 %416, label %panic535, label %checkok536, !dbg !2335

checkok536:                                       ; preds = %checkok533
  %sdiv537 = sdiv i32 %414, %415, !dbg !2335
  %and538 = and i32 %sdiv537, 1, !dbg !2335
  %intbool539 = icmp ne i32 %and538, 0, !dbg !2335
  br i1 %intbool539, label %or.phi552, label %or.rhs540, !dbg !2335

or.rhs540:                                        ; preds = %checkok536
  %417 = load i32, ptr %i509, align 4, !dbg !2336
  %eq541 = icmp eq i32 %417, 1000000000, !dbg !2336
  br i1 %eq541, label %and.rhs542, label %and.phi544, !dbg !2336

and.rhs542:                                       ; preds = %or.rhs540
  %418 = load ptr, ptr %d500, align 8, !dbg !2337
  %419 = load ptr, ptr %a, align 8, !dbg !2338
  %gt543 = icmp ugt ptr %418, %419, !dbg !2337
  br label %and.phi544, !dbg !2337

and.phi544:                                       ; preds = %and.rhs542, %or.rhs540
  %val545 = phi i1 [ false, %or.rhs540 ], [ %gt543, %and.rhs542 ], !dbg !2337
  br i1 %val545, label %and.rhs546, label %and.phi550, !dbg !2337

and.rhs546:                                       ; preds = %and.phi544
  %420 = load ptr, ptr %d500, align 8, !dbg !2339
  %ptradd547 = getelementptr inbounds i8, ptr %420, i64 -4, !dbg !2340
  %421 = load i32, ptr %ptradd547, align 4, !dbg !2340
  %and548 = and i32 %421, 1, !dbg !2339
  %intbool549 = icmp ne i32 %and548, 0, !dbg !2339
  br label %and.phi550, !dbg !2339

and.phi550:                                       ; preds = %and.rhs546, %and.phi544
  %val551 = phi i1 [ false, %and.phi544 ], [ %intbool549, %and.rhs546 ], !dbg !2339
  br label %or.phi552, !dbg !2339

or.phi552:                                        ; preds = %and.phi550, %checkok536
  %val553 = phi i1 [ true, %checkok536 ], [ %val551, %and.phi550 ], !dbg !2339
  br i1 %val553, label %if.then554, label %if.exit556, !dbg !2339

if.then554:                                       ; preds = %or.phi552
  %422 = load double, ptr %round530, align 8, !dbg !2341
  %fadd555 = fadd double %422, 2.000000e+00, !dbg !2341
  store double %fadd555, ptr %round530, align 8, !dbg !2341
  br label %if.exit556, !dbg !2341

if.exit556:                                       ; preds = %if.then554, %or.phi552
  store i8 1, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit556
  %423 = load i8, ptr %switch, align 1
  %424 = trunc i8 %423 to i1
  %425 = load i32, ptr %x499, align 4, !dbg !2343
  %426 = load i32, ptr %i509, align 4, !dbg !2345
  %sdiv557 = sdiv i32 %426, 2, !dbg !2345
  %gt558 = icmp sgt i32 %sdiv557, %425, !dbg !2343
  %check559 = icmp sge i32 %425, 0, !dbg !2343
  %siui-gt = and i1 %check559, %gt558, !dbg !2343
  %eq560 = icmp eq i1 %siui-gt, %424, !dbg !2343
  br i1 %eq560, label %switch.case, label %next_if, !dbg !2343

switch.case:                                      ; preds = %switch.entry
  store double 5.000000e-01, ptr %small, align 8, !dbg !2346
  br label %switch.exit, !dbg !2346

next_if:                                          ; preds = %switch.entry
  %427 = load i32, ptr %x499, align 4, !dbg !2348
  %428 = load i32, ptr %i509, align 4, !dbg !2349
  %sdiv561 = sdiv i32 %428, 2, !dbg !2349
  %eq562 = icmp eq i32 %sdiv561, %427, !dbg !2348
  %check563 = icmp sge i32 %sdiv561, 0, !dbg !2348
  %siui-eq = and i1 %check563, %eq562, !dbg !2348
  br i1 %siui-eq, label %and.rhs564, label %and.phi567, !dbg !2348

and.rhs564:                                       ; preds = %next_if
  %429 = load ptr, ptr %d500, align 8, !dbg !2350
  %ptradd_any565 = getelementptr i8, ptr %429, i64 4, !dbg !2351
  %430 = load ptr, ptr %z, align 8, !dbg !2352
  %eq566 = icmp eq ptr %ptradd_any565, %430, !dbg !2350
  br label %and.phi567, !dbg !2350

and.phi567:                                       ; preds = %and.rhs564, %next_if
  %val568 = phi i1 [ false, %next_if ], [ %eq566, %and.rhs564 ], !dbg !2350
  %eq569 = icmp eq i1 %val568, %424, !dbg !2350
  br i1 %eq569, label %switch.case570, label %next_if571, !dbg !2350

switch.case570:                                   ; preds = %and.phi567
  store double 1.000000e+00, ptr %small, align 8, !dbg !2353
  br label %switch.exit, !dbg !2353

next_if571:                                       ; preds = %and.phi567
  br label %switch.default, !dbg !2353

switch.default:                                   ; preds = %next_if571
  store double 1.500000e+00, ptr %small, align 8, !dbg !2355
  br label %switch.exit, !dbg !2355

switch.exit:                                      ; preds = %switch.default, %switch.case570, %switch.case
  %431 = load i64, ptr %pl, align 8, !dbg !2357
  %intbool572 = icmp ne i64 %431, 0, !dbg !2357
  br i1 %intbool572, label %and.rhs573, label %and.phi574, !dbg !2357

and.rhs573:                                       ; preds = %switch.exit
  %432 = load i8, ptr %is_neg, align 1, !dbg !2358
  %433 = trunc i8 %432 to i1, !dbg !2358
  br label %and.phi574, !dbg !2358

and.phi574:                                       ; preds = %and.rhs573, %switch.exit
  %val575 = phi i1 [ false, %switch.exit ], [ %433, %and.rhs573 ], !dbg !2358
  br i1 %val575, label %if.then576, label %if.exit579, !dbg !2358

if.then576:                                       ; preds = %and.phi574
  %434 = load double, ptr %round530, align 8, !dbg !2359
  %fmul577 = fmul double %434, -1.000000e+00, !dbg !2359
  store double %fmul577, ptr %round530, align 8, !dbg !2359
  %435 = load double, ptr %small, align 8, !dbg !2361
  %fmul578 = fmul double %435, -1.000000e+00, !dbg !2361
  store double %fmul578, ptr %small, align 8, !dbg !2361
  br label %if.exit579, !dbg !2361

if.exit579:                                       ; preds = %if.then576, %and.phi574
  %436 = load ptr, ptr %d500, align 8, !dbg !2362
  %checknull580 = icmp eq ptr %436, null, !dbg !2362
  %437 = call i1 @llvm.expect.i1(i1 %checknull580, i1 false), !dbg !2362
  br i1 %437, label %panic581, label %checkok582, !dbg !2362

checkok582:                                       ; preds = %if.exit579
  %438 = load i32, ptr %436, align 4, !dbg !2362
  %439 = load i32, ptr %x499, align 4, !dbg !2363
  %sub583 = sub i32 %438, %439, !dbg !2364
  store i32 %sub583, ptr %436, align 4, !dbg !2364
  %440 = load double, ptr %round530, align 8, !dbg !2365
  %441 = load double, ptr %small, align 8, !dbg !2366
  %fadd584 = fadd double %440, %441, !dbg !2365
  %442 = load double, ptr %round530, align 8, !dbg !2367
  %neq585 = fcmp one double %fadd584, %442, !dbg !2365
  br i1 %neq585, label %if.then586, label %if.exit629, !dbg !2365

if.then586:                                       ; preds = %checkok582
  %443 = load ptr, ptr %d500, align 8, !dbg !2368
  %checknull587 = icmp eq ptr %443, null, !dbg !2368
  %444 = call i1 @llvm.expect.i1(i1 %checknull587, i1 false), !dbg !2368
  br i1 %444, label %panic588, label %checkok589, !dbg !2368

checkok589:                                       ; preds = %if.then586
  %445 = load ptr, ptr %d500, align 8, !dbg !2370
  %checknull590 = icmp eq ptr %445, null, !dbg !2370
  %446 = call i1 @llvm.expect.i1(i1 %checknull590, i1 false), !dbg !2370
  br i1 %446, label %panic591, label %checkok592, !dbg !2370

checkok592:                                       ; preds = %checkok589
  %447 = load i32, ptr %445, align 4, !dbg !2370
  %448 = load i32, ptr %i509, align 4, !dbg !2371
  %add593 = add i32 %447, %448, !dbg !2372
  store i32 %add593, ptr %443, align 4, !dbg !2372
  br label %loop.cond594, !dbg !2373

loop.cond594:                                     ; preds = %checkok613, %checkok592
  %449 = load ptr, ptr %d500, align 8, !dbg !2374
  %checknull595 = icmp eq ptr %449, null, !dbg !2374
  %450 = call i1 @llvm.expect.i1(i1 %checknull595, i1 false), !dbg !2374
  br i1 %450, label %panic596, label %checkok597, !dbg !2374

checkok597:                                       ; preds = %loop.cond594
  %451 = load i32, ptr %449, align 4, !dbg !2374
  %lt598 = icmp ult i32 999999999, %451, !dbg !2376
  br i1 %lt598, label %loop.body599, label %loop.exit615, !dbg !2376

loop.body599:                                     ; preds = %checkok597
  %452 = load ptr, ptr %d500, align 8, !dbg !2377
  %ptradd_any600 = getelementptr i8, ptr %452, i8 -4, !dbg !2377
  store ptr %ptradd_any600, ptr %d500, align 8, !dbg !2377
  %checknull601 = icmp eq ptr %452, null, !dbg !2377
  %453 = call i1 @llvm.expect.i1(i1 %checknull601, i1 false), !dbg !2377
  br i1 %453, label %panic602, label %checkok603, !dbg !2377

checkok603:                                       ; preds = %loop.body599
  store i32 0, ptr %452, align 4, !dbg !2379
  %454 = load ptr, ptr %d500, align 8, !dbg !2380
  %455 = load ptr, ptr %a, align 8, !dbg !2381
  %lt604 = icmp ult ptr %454, %455, !dbg !2380
  br i1 %lt604, label %if.then605, label %if.exit610, !dbg !2380

if.then605:                                       ; preds = %checkok603
  %456 = load ptr, ptr %a, align 8, !dbg !2382
  %ptradd_any606 = getelementptr i8, ptr %456, i8 -4, !dbg !2382
  store ptr %ptradd_any606, ptr %a, align 8, !dbg !2382
  %checknull607 = icmp eq ptr %ptradd_any606, null, !dbg !2382
  %457 = call i1 @llvm.expect.i1(i1 %checknull607, i1 false), !dbg !2382
  br i1 %457, label %panic608, label %checkok609, !dbg !2382

checkok609:                                       ; preds = %if.then605
  store i32 0, ptr %ptradd_any606, align 4, !dbg !2383
  br label %if.exit610, !dbg !2383

if.exit610:                                       ; preds = %checkok609, %checkok603
  %458 = load ptr, ptr %d500, align 8, !dbg !2384
  %checknull611 = icmp eq ptr %458, null, !dbg !2384
  %459 = call i1 @llvm.expect.i1(i1 %checknull611, i1 false), !dbg !2384
  br i1 %459, label %panic612, label %checkok613, !dbg !2384

checkok613:                                       ; preds = %if.exit610
  %460 = load i32, ptr %458, align 4, !dbg !2385
  %add614 = add i32 %460, 1, !dbg !2385
  store i32 %add614, ptr %458, align 4, !dbg !2385
  br label %loop.cond594, !dbg !2385

loop.exit615:                                     ; preds = %checkok597
  store i32 10, ptr %i509, align 4, !dbg !2386
  %461 = load ptr, ptr %r, align 8, !dbg !2388
  %462 = load ptr, ptr %a, align 8, !dbg !2389
  %463 = ptrtoint ptr %461 to i64, !dbg !2388
  %464 = ptrtoint ptr %462 to i64, !dbg !2388
  %465 = sub i64 %463, %464, !dbg !2388
  %466 = sdiv exact i64 %465, 4, !dbg !2388
  %mul616 = mul i64 9, %466, !dbg !2390
  %trunc617 = trunc i64 %mul616 to i32, !dbg !2390
  store i32 %trunc617, ptr %e466, align 4, !dbg !2390
  br label %loop.cond618, !dbg !2390

loop.cond618:                                     ; preds = %loop.body625, %loop.exit615
  %467 = load ptr, ptr %a, align 8, !dbg !2391
  %checknull619 = icmp eq ptr %467, null, !dbg !2391
  %468 = call i1 @llvm.expect.i1(i1 %checknull619, i1 false), !dbg !2391
  br i1 %468, label %panic620, label %checkok621, !dbg !2391

checkok621:                                       ; preds = %loop.cond618
  %469 = load i32, ptr %467, align 4, !dbg !2391
  %470 = load i32, ptr %i509, align 4, !dbg !2392
  %le622 = icmp sle i32 %470, %469, !dbg !2393
  %check623 = icmp slt i32 %469, 0, !dbg !2393
  %siui-le624 = or i1 %check623, %le622, !dbg !2393
  br i1 %siui-le624, label %loop.body625, label %loop.exit628, !dbg !2393

loop.body625:                                     ; preds = %checkok621
  %471 = load i32, ptr %i509, align 4, !dbg !2394
  %mul626 = mul i32 %471, 10, !dbg !2394
  store i32 %mul626, ptr %i509, align 4, !dbg !2394
  %472 = load i32, ptr %e466, align 4, !dbg !2395
  %add627 = add i32 %472, 1, !dbg !2395
  store i32 %add627, ptr %e466, align 4, !dbg !2395
  br label %loop.cond618, !dbg !2395

loop.exit628:                                     ; preds = %checkok621
  br label %if.exit629, !dbg !2395

if.exit629:                                       ; preds = %loop.exit628, %checkok582
  br label %if.exit630, !dbg !2395

if.exit630:                                       ; preds = %if.exit629, %or.phi527
  %473 = load ptr, ptr %z, align 8, !dbg !2396
  %474 = load ptr, ptr %d500, align 8, !dbg !2397
  %ptradd_any631 = getelementptr i8, ptr %474, i64 4, !dbg !2398
  %gt632 = icmp ugt ptr %473, %ptradd_any631, !dbg !2396
  br i1 %gt632, label %if.then633, label %if.exit635, !dbg !2396

if.then633:                                       ; preds = %if.exit630
  %475 = load ptr, ptr %d500, align 8, !dbg !2399
  %ptradd_any634 = getelementptr i8, ptr %475, i64 4, !dbg !2400
  store ptr %ptradd_any634, ptr %z, align 8, !dbg !2400
  br label %if.exit635, !dbg !2400

if.exit635:                                       ; preds = %if.then633, %if.exit630
  br label %if.exit636, !dbg !2400

if.exit636:                                       ; preds = %if.exit635, %cond.phi489
  br label %loop.cond637, !dbg !2401

loop.cond637:                                     ; preds = %loop.body644, %if.exit636
  %476 = load ptr, ptr %z, align 8, !dbg !2402
  %477 = load ptr, ptr %a, align 8, !dbg !2404
  %gt638 = icmp ugt ptr %476, %477, !dbg !2402
  br i1 %gt638, label %and.rhs639, label %and.phi642, !dbg !2402

and.rhs639:                                       ; preds = %loop.cond637
  %478 = load ptr, ptr %z, align 8, !dbg !2405
  %ptradd640 = getelementptr inbounds i8, ptr %478, i64 -4, !dbg !2406
  %479 = load i32, ptr %ptradd640, align 4, !dbg !2406
  %not641 = icmp eq i32 %479, 0, !dbg !2406
  br label %and.phi642, !dbg !2406

and.phi642:                                       ; preds = %and.rhs639, %loop.cond637
  %val643 = phi i1 [ false, %loop.cond637 ], [ %not641, %and.rhs639 ], !dbg !2406
  br i1 %val643, label %loop.body644, label %loop.exit646, !dbg !2406

loop.body644:                                     ; preds = %and.phi642
  %480 = load ptr, ptr %z, align 8, !dbg !2407
  %ptradd_any645 = getelementptr i8, ptr %480, i8 -4, !dbg !2407
  store ptr %ptradd_any645, ptr %z, align 8, !dbg !2407
  br label %loop.cond637, !dbg !2407

loop.exit646:                                     ; preds = %and.phi642
  %481 = load i32, ptr %formatting, align 4, !dbg !2408
  %eq647 = icmp eq i32 %481, 2, !dbg !2408
  br i1 %eq647, label %if.then648, label %if.exit715, !dbg !2408

if.then648:                                       ; preds = %loop.exit646
  %482 = load i64, ptr %p, align 8, !dbg !2409
  %not649 = icmp eq i64 %482, 0, !dbg !2409
  br i1 %not649, label %if.then650, label %if.exit652, !dbg !2409

if.then650:                                       ; preds = %if.then648
  %483 = load i64, ptr %p, align 8, !dbg !2411
  %add651 = add i64 %483, 1, !dbg !2411
  store i64 %add651, ptr %p, align 8, !dbg !2411
  br label %if.exit652, !dbg !2411

if.exit652:                                       ; preds = %if.then650, %if.then648
  %484 = load i64, ptr %p, align 8, !dbg !2412
  %485 = load i32, ptr %e466, align 4, !dbg !2413
  %sext653 = sext i32 %485 to i64, !dbg !2413
  %gt654 = icmp sgt i64 %484, %sext653, !dbg !2412
  br i1 %gt654, label %and.rhs655, label %and.phi657, !dbg !2412

and.rhs655:                                       ; preds = %if.exit652
  %486 = load i32, ptr %e466, align 4, !dbg !2414
  %ge656 = icmp sge i32 %486, -4, !dbg !2414
  br label %and.phi657, !dbg !2414

and.phi657:                                       ; preds = %and.rhs655, %if.exit652
  %val658 = phi i1 [ false, %if.exit652 ], [ %ge656, %and.rhs655 ], !dbg !2414
  br i1 %val658, label %if.then659, label %if.else663, !dbg !2414

if.then659:                                       ; preds = %and.phi657
  store i32 0, ptr %formatting, align 4, !dbg !2415
  %487 = load i64, ptr %p, align 8, !dbg !2417
  %488 = load i32, ptr %e466, align 4, !dbg !2418
  %sext660 = sext i32 %488 to i64, !dbg !2418
  %add661 = add i64 %sext660, 1, !dbg !2418
  %sub662 = sub i64 %487, %add661, !dbg !2417
  store i64 %sub662, ptr %p, align 8, !dbg !2417
  br label %if.exit665, !dbg !2417

if.else663:                                       ; preds = %and.phi657
  store i32 1, ptr %formatting, align 4, !dbg !2419
  %489 = load i64, ptr %p, align 8, !dbg !2421
  %sub664 = sub i64 %489, 1, !dbg !2421
  store i64 %sub664, ptr %p, align 8, !dbg !2421
  br label %if.exit665, !dbg !2421

if.exit665:                                       ; preds = %if.else663, %if.then659
  %490 = load ptr, ptr %self, align 8, !dbg !2422
  %ptradd666 = getelementptr inbounds i8, ptr %490, i64 16, !dbg !2422
  %491 = load i32, ptr %ptradd666, align 8, !dbg !2422
  %lshrl667 = lshr i32 %491, 4, !dbg !2422
  %492 = and i32 1, %lshrl667, !dbg !2422
  %trunc668 = trunc i32 %492 to i8, !dbg !2422
  %493 = trunc i8 %trunc668 to i1, !dbg !2422
  %not669 = xor i1 %493, true, !dbg !2422
  br i1 %not669, label %if.then670, label %if.exit714, !dbg !2422

if.then670:                                       ; preds = %if.exit665
  %494 = load ptr, ptr %z, align 8, !dbg !2423
  %495 = load ptr, ptr %a, align 8, !dbg !2425
  %gt671 = icmp ugt ptr %494, %495, !dbg !2423
  br i1 %gt671, label %and.rhs672, label %and.phi675, !dbg !2423

and.rhs672:                                       ; preds = %if.then670
  %496 = load ptr, ptr %z, align 8, !dbg !2426
  %ptradd673 = getelementptr inbounds i8, ptr %496, i64 -4, !dbg !2427
  %497 = load i32, ptr %ptradd673, align 4, !dbg !2427
  %intbool674 = icmp ne i32 %497, 0, !dbg !2427
  br label %and.phi675, !dbg !2427

and.phi675:                                       ; preds = %and.rhs672, %if.then670
  %val676 = phi i1 [ false, %if.then670 ], [ %intbool674, %and.rhs672 ], !dbg !2427
  br i1 %val676, label %if.then677, label %if.else690, !dbg !2427

if.then677:                                       ; preds = %and.phi675
  call void @llvm.dbg.declare(metadata ptr %i678, metadata !2428, metadata !DIExpression()), !dbg !2431
  store i32 10, ptr %i678, align 4, !dbg !2432
  store i32 0, ptr %j, align 4, !dbg !2433
  br label %loop.cond679, !dbg !2433

loop.cond679:                                     ; preds = %loop.body686, %if.then677
  %498 = load ptr, ptr %z, align 8, !dbg !2434
  %ptradd680 = getelementptr inbounds i8, ptr %498, i64 -4, !dbg !2435
  %499 = load i32, ptr %ptradd680, align 4, !dbg !2435
  %500 = load i32, ptr %i678, align 4, !dbg !2436
  %zero681 = icmp eq i32 %500, 0, !dbg !2434
  %501 = call i1 @llvm.expect.i1(i1 %zero681, i1 false), !dbg !2434
  br i1 %501, label %panic682, label %checkok683, !dbg !2434

checkok683:                                       ; preds = %loop.cond679
  %smod684 = srem i32 %499, %500, !dbg !2434
  %eq685 = icmp eq i32 %smod684, 0, !dbg !2434
  br i1 %eq685, label %loop.body686, label %loop.exit689, !dbg !2434

loop.body686:                                     ; preds = %checkok683
  %502 = load i32, ptr %i678, align 4, !dbg !2437
  %mul687 = mul i32 %502, 10, !dbg !2437
  store i32 %mul687, ptr %i678, align 4, !dbg !2437
  %503 = load i32, ptr %j, align 4, !dbg !2438
  %add688 = add i32 %503, 1, !dbg !2438
  store i32 %add688, ptr %j, align 4, !dbg !2438
  br label %loop.cond679, !dbg !2438

loop.exit689:                                     ; preds = %checkok683
  br label %if.exit691, !dbg !2438

if.else690:                                       ; preds = %and.phi675
  store i32 9, ptr %j, align 4, !dbg !2439
  br label %if.exit691, !dbg !2439

if.exit691:                                       ; preds = %if.else690, %loop.exit689
  %504 = load i32, ptr %formatting, align 4, !dbg !2441
  %eq692 = icmp eq i32 %504, 0, !dbg !2441
  br i1 %eq692, label %if.then693, label %if.else702, !dbg !2441

if.then693:                                       ; preds = %if.exit691
  %505 = load i64, ptr %p, align 8
  store i64 %505, ptr %x694, align 8
  store i64 0, ptr %x695, align 8
  %506 = load ptr, ptr %z, align 8, !dbg !2442
  %507 = load ptr, ptr %r, align 8, !dbg !2444
  %508 = ptrtoint ptr %506 to i64, !dbg !2442
  %509 = ptrtoint ptr %507 to i64, !dbg !2442
  %510 = sub i64 %508, %509, !dbg !2442
  %511 = sdiv exact i64 %510, 4, !dbg !2442
  %sub696 = sub i64 %511, 1, !dbg !2442
  %mul697 = mul i64 9, %sub696, !dbg !2445
  %512 = load i32, ptr %j, align 4, !dbg !2446
  %sext698 = sext i32 %512 to i64, !dbg !2446
  %sub699 = sub i64 %mul697, %sext698, !dbg !2445
  store i64 %sub699, ptr %y700, align 8
  %513 = load i64, ptr %x695, align 8, !dbg !2447
  %514 = load i64, ptr %y700, align 8, !dbg !2450
  %515 = call i64 @llvm.smax.i64(i64 %513, i64 %514), !dbg !2450
  store i64 %515, ptr %y701, align 8
  %516 = load i64, ptr %x694, align 8, !dbg !2451
  %517 = load i64, ptr %y701, align 8, !dbg !2454
  %518 = call i64 @llvm.smin.i64(i64 %516, i64 %517), !dbg !2454
  store i64 %518, ptr %p, align 8, !dbg !2454
  br label %if.exit713, !dbg !2454

if.else702:                                       ; preds = %if.exit691
  %519 = load i64, ptr %p, align 8
  store i64 %519, ptr %x703, align 8
  store i64 0, ptr %x704, align 8
  %520 = load ptr, ptr %z, align 8, !dbg !2455
  %521 = load ptr, ptr %r, align 8, !dbg !2457
  %522 = ptrtoint ptr %520 to i64, !dbg !2455
  %523 = ptrtoint ptr %521 to i64, !dbg !2455
  %524 = sub i64 %522, %523, !dbg !2455
  %525 = sdiv exact i64 %524, 4, !dbg !2455
  %sub705 = sub i64 %525, 1, !dbg !2455
  %mul706 = mul i64 9, %sub705, !dbg !2458
  %526 = load i32, ptr %e466, align 4, !dbg !2459
  %sext707 = sext i32 %526 to i64, !dbg !2459
  %add708 = add i64 %mul706, %sext707, !dbg !2458
  %527 = load i32, ptr %j, align 4, !dbg !2460
  %sext709 = sext i32 %527 to i64, !dbg !2460
  %sub710 = sub i64 %add708, %sext709, !dbg !2458
  store i64 %sub710, ptr %y711, align 8
  %528 = load i64, ptr %x704, align 8, !dbg !2461
  %529 = load i64, ptr %y711, align 8, !dbg !2464
  %530 = call i64 @llvm.smax.i64(i64 %528, i64 %529), !dbg !2464
  store i64 %530, ptr %y712, align 8
  %531 = load i64, ptr %x703, align 8, !dbg !2465
  %532 = load i64, ptr %y712, align 8, !dbg !2468
  %533 = call i64 @llvm.smin.i64(i64 %531, i64 %532), !dbg !2468
  store i64 %533, ptr %p, align 8, !dbg !2468
  br label %if.exit713, !dbg !2468

if.exit713:                                       ; preds = %if.else702, %if.then693
  br label %if.exit714, !dbg !2468

if.exit714:                                       ; preds = %if.exit713, %if.exit665
  br label %if.exit715, !dbg !2468

if.exit715:                                       ; preds = %if.exit714, %loop.exit646
  %534 = load i64, ptr %p, align 8, !dbg !2469
  %535 = load i64, ptr %p, align 8, !dbg !2470
  %intbool716 = icmp ne i64 %535, 0, !dbg !2470
  br i1 %intbool716, label %or.phi721, label %or.rhs717, !dbg !2470

or.rhs717:                                        ; preds = %if.exit715
  %536 = load ptr, ptr %self, align 8, !dbg !2471
  %ptradd718 = getelementptr inbounds i8, ptr %536, i64 16, !dbg !2471
  %537 = load i32, ptr %ptradd718, align 8, !dbg !2471
  %lshrl719 = lshr i32 %537, 4, !dbg !2471
  %538 = and i32 1, %lshrl719, !dbg !2471
  %trunc720 = trunc i32 %538 to i8, !dbg !2471
  %539 = trunc i8 %trunc720 to i1, !dbg !2471
  br label %or.phi721, !dbg !2471

or.phi721:                                        ; preds = %or.rhs717, %if.exit715
  %val722 = phi i1 [ true, %if.exit715 ], [ %539, %or.rhs717 ], !dbg !2471
  %boolsi723 = zext i1 %val722 to i64, !dbg !2471
  %sub724 = sub i64 2147483646, %boolsi723, !dbg !2472
  %gt725 = icmp sgt i64 %534, %sub724, !dbg !2469
  br i1 %gt725, label %if.then726, label %if.exit727, !dbg !2469

if.then726:                                       ; preds = %or.phi721
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2473

if.exit727:                                       ; preds = %or.phi721
  call void @llvm.dbg.declare(metadata ptr %l728, metadata !2474, metadata !DIExpression()), !dbg !2475
  %540 = load i64, ptr %p, align 8, !dbg !2476
  %add729 = add i64 1, %540, !dbg !2477
  %541 = load i64, ptr %p, align 8, !dbg !2478
  %intbool730 = icmp ne i64 %541, 0, !dbg !2478
  br i1 %intbool730, label %or.phi735, label %or.rhs731, !dbg !2478

or.rhs731:                                        ; preds = %if.exit727
  %542 = load ptr, ptr %self, align 8, !dbg !2479
  %ptradd732 = getelementptr inbounds i8, ptr %542, i64 16, !dbg !2479
  %543 = load i32, ptr %ptradd732, align 8, !dbg !2479
  %lshrl733 = lshr i32 %543, 4, !dbg !2479
  %544 = and i32 1, %lshrl733, !dbg !2479
  %trunc734 = trunc i32 %544 to i8, !dbg !2479
  %545 = trunc i8 %trunc734 to i1, !dbg !2479
  br label %or.phi735, !dbg !2479

or.phi735:                                        ; preds = %or.rhs731, %if.exit727
  %val736 = phi i1 [ true, %if.exit727 ], [ %545, %or.rhs731 ], !dbg !2479
  %boolsi737 = zext i1 %val736 to i64, !dbg !2479
  %add738 = add i64 %add729, %boolsi737, !dbg !2480
  %trunc739 = trunc i64 %add738 to i32, !dbg !2480
  store i32 %trunc739, ptr %l728, align 4, !dbg !2480
  call void @llvm.dbg.declare(metadata ptr %estr740, metadata !2481, metadata !DIExpression()), !dbg !2482
  %546 = load i32, ptr %formatting, align 4, !dbg !2483
  %eq741 = icmp eq i32 %546, 0, !dbg !2483
  br i1 %eq741, label %if.then742, label %if.else751, !dbg !2483

if.then742:                                       ; preds = %or.phi735
  %547 = load i32, ptr %e466, align 4, !dbg !2484
  %548 = load i32, ptr %l728, align 4, !dbg !2486
  %sub743 = sub i32 2147483647, %548, !dbg !2487
  %gt744 = icmp sgt i32 %547, %sub743, !dbg !2484
  br i1 %gt744, label %if.then745, label %if.exit746, !dbg !2484

if.then745:                                       ; preds = %if.then742
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2488

if.exit746:                                       ; preds = %if.then742
  %549 = load i32, ptr %e466, align 4, !dbg !2489
  %gt747 = icmp sgt i32 %549, 0, !dbg !2489
  br i1 %gt747, label %if.then748, label %if.exit750, !dbg !2489

if.then748:                                       ; preds = %if.exit746
  %550 = load i32, ptr %l728, align 4, !dbg !2490
  %551 = load i32, ptr %e466, align 4, !dbg !2491
  %add749 = add i32 %550, %551, !dbg !2490
  store i32 %add749, ptr %l728, align 4, !dbg !2490
  br label %if.exit750, !dbg !2490

if.exit750:                                       ; preds = %if.then748, %if.exit746
  br label %if.exit789, !dbg !2490

if.else751:                                       ; preds = %or.phi735
  %552 = load i32, ptr %e466, align 4, !dbg !2492
  %lt752 = icmp slt i32 %552, 0, !dbg !2492
  br i1 %lt752, label %cond.lhs753, label %cond.rhs755, !dbg !2492

cond.lhs753:                                      ; preds = %if.else751
  %553 = load i32, ptr %e466, align 4, !dbg !2494
  %neg754 = sub i32 0, %553, !dbg !2494
  br label %cond.phi756, !dbg !2494

cond.rhs755:                                      ; preds = %if.else751
  %554 = load i32, ptr %e466, align 4, !dbg !2495
  br label %cond.phi756, !dbg !2495

cond.phi756:                                      ; preds = %cond.rhs755, %cond.lhs753
  %val757 = phi i32 [ %neg754, %cond.lhs753 ], [ %554, %cond.rhs755 ], !dbg !2495
  %sext758 = sext i32 %val757 to i128, !dbg !2495
  store i128 %sext758, ptr %taddr759, align 8
  %lo760 = load i64, ptr %taddr759, align 8
  %ptradd761 = getelementptr inbounds i8, ptr %taddr759, i64 8
  %hi762 = load i64, ptr %ptradd761, align 8
  %555 = load ptr, ptr %ebuf, align 8
  %556 = call ptr @std.io.fmt_u(i64 %lo760, i64 %hi762, ptr %555), !dbg !2496
  store ptr %556, ptr %estr740, align 8, !dbg !2496
  br label %loop.cond763, !dbg !2497

loop.cond763:                                     ; preds = %loop.body765, %cond.phi756
  %557 = load ptr, ptr %ebuf, align 8, !dbg !2498
  %558 = load ptr, ptr %estr740, align 8, !dbg !2500
  %559 = ptrtoint ptr %557 to i64, !dbg !2498
  %560 = ptrtoint ptr %558 to i64, !dbg !2498
  %561 = sub i64 %559, %560, !dbg !2498
  %562 = sdiv exact i64 %561, 1, !dbg !2498
  %lt764 = icmp slt i64 %562, 2, !dbg !2498
  br i1 %lt764, label %loop.body765, label %loop.exit767, !dbg !2498

loop.body765:                                     ; preds = %loop.cond763
  %563 = load ptr, ptr %estr740, align 8, !dbg !2501
  %ptradd_any766 = getelementptr i8, ptr %563, i8 -1, !dbg !2501
  store ptr %ptradd_any766, ptr %estr740, align 8, !dbg !2501
  store i8 48, ptr %ptradd_any766, align 1, !dbg !2502
  br label %loop.cond763, !dbg !2502

loop.exit767:                                     ; preds = %loop.cond763
  %564 = load ptr, ptr %estr740, align 8, !dbg !2503
  %ptradd_any768 = getelementptr i8, ptr %564, i8 -1, !dbg !2503
  store ptr %ptradd_any768, ptr %estr740, align 8, !dbg !2503
  %checknull769 = icmp eq ptr %ptradd_any768, null, !dbg !2503
  %565 = call i1 @llvm.expect.i1(i1 %checknull769, i1 false), !dbg !2503
  br i1 %565, label %panic770, label %checkok771, !dbg !2503

checkok771:                                       ; preds = %loop.exit767
  %566 = load i32, ptr %e466, align 4, !dbg !2504
  %lt772 = icmp slt i32 %566, 0, !dbg !2504
  %ternary773 = select i1 %lt772, i8 45, i8 43, !dbg !2505
  store i8 %ternary773, ptr %ptradd_any768, align 1, !dbg !2505
  %567 = load ptr, ptr %estr740, align 8, !dbg !2506
  %ptradd_any774 = getelementptr i8, ptr %567, i8 -1, !dbg !2506
  store ptr %ptradd_any774, ptr %estr740, align 8, !dbg !2506
  %checknull775 = icmp eq ptr %ptradd_any774, null, !dbg !2506
  %568 = call i1 @llvm.expect.i1(i1 %checknull775, i1 false), !dbg !2506
  br i1 %568, label %panic776, label %checkok777, !dbg !2506

checkok777:                                       ; preds = %checkok771
  %569 = load ptr, ptr %self, align 8, !dbg !2507
  %ptradd778 = getelementptr inbounds i8, ptr %569, i64 16, !dbg !2507
  %570 = load i32, ptr %ptradd778, align 8, !dbg !2507
  %lshrl779 = lshr i32 %570, 5, !dbg !2507
  %571 = and i32 1, %lshrl779, !dbg !2507
  %trunc780 = trunc i32 %571 to i8, !dbg !2507
  %572 = trunc i8 %trunc780 to i1, !dbg !2507
  %ternary781 = select i1 %572, i8 69, i8 101, !dbg !2508
  store i8 %ternary781, ptr %ptradd_any774, align 1, !dbg !2508
  %573 = load ptr, ptr %ebuf, align 8, !dbg !2509
  %574 = load ptr, ptr %estr740, align 8, !dbg !2510
  %575 = ptrtoint ptr %573 to i64, !dbg !2509
  %576 = ptrtoint ptr %574 to i64, !dbg !2509
  %577 = sub i64 %575, %576, !dbg !2509
  %578 = sdiv exact i64 %577, 1, !dbg !2509
  %579 = load i32, ptr %l728, align 4, !dbg !2511
  %sext782 = sext i32 %579 to i64, !dbg !2511
  %sub783 = sub i64 2147483647, %sext782, !dbg !2512
  %gt784 = icmp sgt i64 %578, %sub783, !dbg !2509
  br i1 %gt784, label %if.then785, label %if.exit786, !dbg !2509

if.then785:                                       ; preds = %checkok777
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2513

if.exit786:                                       ; preds = %checkok777
  %580 = load i32, ptr %l728, align 4, !dbg !2514
  %581 = load ptr, ptr %ebuf, align 8, !dbg !2515
  %582 = load ptr, ptr %estr740, align 8, !dbg !2516
  %583 = ptrtoint ptr %581 to i64, !dbg !2517
  %584 = ptrtoint ptr %582 to i64, !dbg !2517
  %585 = sub i64 %583, %584, !dbg !2517
  %586 = sdiv exact i64 %585, 1, !dbg !2517
  %trunc787 = trunc i64 %586 to i32, !dbg !2517
  %add788 = add i32 %580, %trunc787, !dbg !2514
  store i32 %add788, ptr %l728, align 4, !dbg !2514
  br label %if.exit789, !dbg !2514

if.exit789:                                       ; preds = %if.exit786, %if.exit750
  %587 = load i32, ptr %l728, align 4, !dbg !2518
  %sext790 = sext i32 %587 to i64, !dbg !2518
  %588 = load i64, ptr %pl, align 8, !dbg !2519
  %sub791 = sub i64 2147483647, %588, !dbg !2520
  %gt792 = icmp sgt i64 %sext790, %sub791, !dbg !2518
  br i1 %gt792, label %if.then793, label %if.exit794, !dbg !2518

if.then793:                                       ; preds = %if.exit789
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2521

if.exit794:                                       ; preds = %if.exit789
  call void @llvm.dbg.declare(metadata ptr %len795, metadata !2522, metadata !DIExpression()), !dbg !2523
  store i64 0, ptr %len795, align 8, !dbg !2523
  %589 = load ptr, ptr %self, align 8, !dbg !2524
  %ptradd796 = getelementptr inbounds i8, ptr %589, i64 16, !dbg !2524
  %590 = load i32, ptr %ptradd796, align 8, !dbg !2524
  %lshrl797 = lshr i32 %590, 1, !dbg !2524
  %591 = and i32 1, %lshrl797, !dbg !2524
  %trunc798 = trunc i32 %591 to i8, !dbg !2524
  %592 = trunc i8 %trunc798 to i1, !dbg !2524
  %not799 = xor i1 %592, true, !dbg !2524
  br i1 %not799, label %and.rhs800, label %and.phi804, !dbg !2524

and.rhs800:                                       ; preds = %if.exit794
  %593 = load ptr, ptr %self, align 8, !dbg !2525
  %ptradd801 = getelementptr inbounds i8, ptr %593, i64 16, !dbg !2525
  %594 = load i32, ptr %ptradd801, align 8, !dbg !2525
  %595 = and i32 1, %594, !dbg !2525
  %trunc802 = trunc i32 %595 to i8, !dbg !2525
  %596 = trunc i8 %trunc802 to i1, !dbg !2525
  %not803 = xor i1 %596, true, !dbg !2525
  br label %and.phi804, !dbg !2525

and.phi804:                                       ; preds = %and.rhs800, %if.exit794
  %val805 = phi i1 [ false, %if.exit794 ], [ %not803, %and.rhs800 ], !dbg !2525
  br i1 %val805, label %if.then806, label %if.exit820, !dbg !2525

if.then806:                                       ; preds = %and.phi804
  %597 = load i64, ptr %len795, align 8, !dbg !2526
  %598 = load ptr, ptr %self, align 8, !dbg !2527
  %ptradd808 = getelementptr inbounds i8, ptr %598, i64 16, !dbg !2527
  %ptradd809 = getelementptr inbounds i8, ptr %ptradd808, i64 4, !dbg !2527
  %599 = load i32, ptr %ptradd809, align 4, !dbg !2527
  %zext810 = zext i32 %599 to i64, !dbg !2527
  %600 = load i64, ptr %pl, align 8, !dbg !2528
  %601 = load i32, ptr %l728, align 4, !dbg !2529
  %sext811 = sext i32 %601 to i64, !dbg !2529
  %add812 = add i64 %600, %sext811, !dbg !2528
  %602 = load ptr, ptr %self, align 8
  %603 = call i64 @std.io.Formatter.pad(ptr %retparam813, ptr %602, i8 zeroext 32, i64 %zext810, i64 %add812) #5, !dbg !2530
  %not_err814 = icmp eq i64 %603, 0, !dbg !2530
  %604 = call i1 @llvm.expect.i1(i1 %not_err814, i1 true), !dbg !2530
  br i1 %604, label %after_check816, label %assign_optional815, !dbg !2530

assign_optional815:                               ; preds = %if.then806
  store i64 %603, ptr %error_var807, align 8, !dbg !2530
  br label %guard_block817, !dbg !2530

after_check816:                                   ; preds = %if.then806
  br label %noerr_block818, !dbg !2530

guard_block817:                                   ; preds = %assign_optional815
  %605 = load i64, ptr %error_var807, align 8, !dbg !2530
  ret i64 %605, !dbg !2530

noerr_block818:                                   ; preds = %after_check816
  %606 = load i64, ptr %retparam813, align 8, !dbg !2530
  %add819 = add i64 %597, %606, !dbg !2526
  store i64 %add819, ptr %len795, align 8, !dbg !2526
  br label %if.exit820, !dbg !2526

if.exit820:                                       ; preds = %noerr_block818, %and.phi804
  %607 = load i8, ptr %is_neg, align 1, !dbg !2531
  %608 = trunc i8 %607 to i1, !dbg !2531
  br i1 %608, label %or.phi825, label %or.rhs821, !dbg !2531

or.rhs821:                                        ; preds = %if.exit820
  %609 = load ptr, ptr %self, align 8, !dbg !2532
  %ptradd822 = getelementptr inbounds i8, ptr %609, i64 16, !dbg !2532
  %610 = load i32, ptr %ptradd822, align 8, !dbg !2532
  %lshrl823 = lshr i32 %610, 2, !dbg !2532
  %611 = and i32 1, %lshrl823, !dbg !2532
  %trunc824 = trunc i32 %611 to i8, !dbg !2532
  %612 = trunc i8 %trunc824 to i1, !dbg !2532
  br label %or.phi825, !dbg !2532

or.phi825:                                        ; preds = %or.rhs821, %if.exit820
  %val826 = phi i1 [ true, %if.exit820 ], [ %612, %or.rhs821 ], !dbg !2532
  br i1 %val826, label %if.then827, label %if.exit837, !dbg !2532

if.then827:                                       ; preds = %or.phi825
  %613 = load i64, ptr %len795, align 8, !dbg !2533
  %614 = load i8, ptr %is_neg, align 1, !dbg !2534
  %615 = trunc i8 %614 to i1, !dbg !2534
  %ternary829 = select i1 %615, i8 45, i8 43, !dbg !2535
  %616 = load ptr, ptr %self, align 8
  %617 = call i64 @std.io.Formatter.out(ptr %retparam830, ptr %616, i8 zeroext %ternary829), !dbg !2536
  %not_err831 = icmp eq i64 %617, 0, !dbg !2536
  %618 = call i1 @llvm.expect.i1(i1 %not_err831, i1 true), !dbg !2536
  br i1 %618, label %after_check833, label %assign_optional832, !dbg !2536

assign_optional832:                               ; preds = %if.then827
  store i64 %617, ptr %error_var828, align 8, !dbg !2536
  br label %guard_block834, !dbg !2536

after_check833:                                   ; preds = %if.then827
  br label %noerr_block835, !dbg !2536

guard_block834:                                   ; preds = %assign_optional832
  %619 = load i64, ptr %error_var828, align 8, !dbg !2536
  ret i64 %619, !dbg !2536

noerr_block835:                                   ; preds = %after_check833
  %620 = load i64, ptr %retparam830, align 8, !dbg !2536
  %add836 = add i64 %613, %620, !dbg !2533
  store i64 %add836, ptr %len795, align 8, !dbg !2533
  br label %if.exit837, !dbg !2533

if.exit837:                                       ; preds = %noerr_block835, %or.phi825
  %621 = load ptr, ptr %self, align 8, !dbg !2537
  %ptradd838 = getelementptr inbounds i8, ptr %621, i64 16, !dbg !2537
  %622 = load i32, ptr %ptradd838, align 8, !dbg !2537
  %623 = and i32 1, %622, !dbg !2537
  %trunc839 = trunc i32 %623 to i8, !dbg !2537
  %624 = trunc i8 %trunc839 to i1, !dbg !2537
  br i1 %624, label %if.then840, label %if.exit854, !dbg !2537

if.then840:                                       ; preds = %if.exit837
  %625 = load i64, ptr %len795, align 8, !dbg !2538
  %626 = load ptr, ptr %self, align 8, !dbg !2539
  %ptradd842 = getelementptr inbounds i8, ptr %626, i64 16, !dbg !2539
  %ptradd843 = getelementptr inbounds i8, ptr %ptradd842, i64 4, !dbg !2539
  %627 = load i32, ptr %ptradd843, align 4, !dbg !2539
  %zext844 = zext i32 %627 to i64, !dbg !2539
  %628 = load i64, ptr %pl, align 8, !dbg !2540
  %629 = load i32, ptr %l728, align 4, !dbg !2541
  %sext845 = sext i32 %629 to i64, !dbg !2541
  %add846 = add i64 %628, %sext845, !dbg !2540
  %630 = load ptr, ptr %self, align 8
  %631 = call i64 @std.io.Formatter.pad(ptr %retparam847, ptr %630, i8 zeroext 48, i64 %zext844, i64 %add846) #5, !dbg !2542
  %not_err848 = icmp eq i64 %631, 0, !dbg !2542
  %632 = call i1 @llvm.expect.i1(i1 %not_err848, i1 true), !dbg !2542
  br i1 %632, label %after_check850, label %assign_optional849, !dbg !2542

assign_optional849:                               ; preds = %if.then840
  store i64 %631, ptr %error_var841, align 8, !dbg !2542
  br label %guard_block851, !dbg !2542

after_check850:                                   ; preds = %if.then840
  br label %noerr_block852, !dbg !2542

guard_block851:                                   ; preds = %assign_optional849
  %633 = load i64, ptr %error_var841, align 8, !dbg !2542
  ret i64 %633, !dbg !2542

noerr_block852:                                   ; preds = %after_check850
  %634 = load i64, ptr %retparam847, align 8, !dbg !2542
  %add853 = add i64 %625, %634, !dbg !2538
  store i64 %add853, ptr %len795, align 8, !dbg !2538
  br label %if.exit854, !dbg !2538

if.exit854:                                       ; preds = %noerr_block852, %if.exit837
  %635 = load i32, ptr %formatting, align 4, !dbg !2543
  %eq855 = icmp eq i32 %635, 0, !dbg !2543
  br i1 %eq855, label %if.then856, label %if.else974, !dbg !2543

if.then856:                                       ; preds = %if.exit854
  %636 = load ptr, ptr %a, align 8, !dbg !2544
  %637 = load ptr, ptr %r, align 8, !dbg !2546
  %gt857 = icmp ugt ptr %636, %637, !dbg !2544
  br i1 %gt857, label %if.then858, label %if.exit859, !dbg !2544

if.then858:                                       ; preds = %if.then856
  %638 = load ptr, ptr %r, align 8, !dbg !2547
  store ptr %638, ptr %a, align 8, !dbg !2547
  br label %if.exit859, !dbg !2547

if.exit859:                                       ; preds = %if.then858, %if.then856
  call void @llvm.dbg.declare(metadata ptr %d860, metadata !2548, metadata !DIExpression()), !dbg !2549
  %639 = load ptr, ptr %a, align 8, !dbg !2550
  store ptr %639, ptr %d860, align 8, !dbg !2550
  br label %loop.cond861, !dbg !2551

loop.cond861:                                     ; preds = %noerr_block904, %if.exit859
  %640 = load ptr, ptr %d860, align 8, !dbg !2552
  %641 = load ptr, ptr %r, align 8, !dbg !2554
  %le862 = icmp ule ptr %640, %641, !dbg !2552
  br i1 %le862, label %loop.body863, label %loop.exit907, !dbg !2552

loop.body863:                                     ; preds = %loop.cond861
  call void @llvm.dbg.declare(metadata ptr %s864, metadata !2555, metadata !DIExpression()), !dbg !2557
  %642 = load ptr, ptr %d860, align 8, !dbg !2558
  %checknull865 = icmp eq ptr %642, null, !dbg !2558
  %643 = call i1 @llvm.expect.i1(i1 %checknull865, i1 false), !dbg !2558
  br i1 %643, label %panic866, label %checkok867, !dbg !2558

checkok867:                                       ; preds = %loop.body863
  %644 = load i32, ptr %642, align 4, !dbg !2558
  %zext868 = zext i32 %644 to i128, !dbg !2558
  %645 = load ptr, ptr %buf, align 8, !dbg !2559
  %ptradd_any869 = getelementptr i8, ptr %645, i64 9, !dbg !2560
  store i128 %zext868, ptr %taddr870, align 8
  %lo871 = load i64, ptr %taddr870, align 8
  %ptradd872 = getelementptr inbounds i8, ptr %taddr870, i64 8
  %hi873 = load i64, ptr %ptradd872, align 8
  %646 = call ptr @std.io.fmt_u(i64 %lo871, i64 %hi873, ptr %ptradd_any869), !dbg !2561
  store ptr %646, ptr %s864, align 8, !dbg !2561
  store i8 1, ptr %switch874, align 1
  br label %switch.entry875

switch.entry875:                                  ; preds = %checkok867
  %647 = load i8, ptr %switch874, align 1
  %648 = trunc i8 %647 to i1
  %649 = load ptr, ptr %d860, align 8, !dbg !2562
  %650 = load ptr, ptr %a, align 8, !dbg !2564
  %neq876 = icmp ne ptr %649, %650, !dbg !2562
  %eq877 = icmp eq i1 %neq876, %648, !dbg !2562
  br i1 %eq877, label %switch.case878, label %next_if884, !dbg !2562

switch.case878:                                   ; preds = %switch.entry875
  br label %loop.cond879, !dbg !2565

loop.cond879:                                     ; preds = %loop.body881, %switch.case878
  %651 = load ptr, ptr %s864, align 8, !dbg !2567
  %652 = load ptr, ptr %buf, align 8, !dbg !2569
  %gt880 = icmp ugt ptr %651, %652, !dbg !2567
  br i1 %gt880, label %loop.body881, label %loop.exit883, !dbg !2567

loop.body881:                                     ; preds = %loop.cond879
  %653 = load ptr, ptr %s864, align 8, !dbg !2570
  %ptradd_any882 = getelementptr i8, ptr %653, i8 -1, !dbg !2570
  store ptr %ptradd_any882, ptr %s864, align 8, !dbg !2570
  store i8 48, ptr %ptradd_any882, align 1, !dbg !2571
  br label %loop.cond879, !dbg !2571

loop.exit883:                                     ; preds = %loop.cond879
  br label %switch.exit894, !dbg !2571

next_if884:                                       ; preds = %switch.entry875
  %654 = load ptr, ptr %s864, align 8, !dbg !2572
  %655 = load ptr, ptr %buf, align 8, !dbg !2573
  %ptradd_any885 = getelementptr i8, ptr %655, i64 9, !dbg !2574
  %eq886 = icmp eq ptr %654, %ptradd_any885, !dbg !2572
  %eq887 = icmp eq i1 %eq886, %648, !dbg !2572
  br i1 %eq887, label %switch.case888, label %next_if893, !dbg !2572

switch.case888:                                   ; preds = %next_if884
  %656 = load ptr, ptr %s864, align 8, !dbg !2575
  %ptradd_any889 = getelementptr i8, ptr %656, i8 -1, !dbg !2575
  store ptr %ptradd_any889, ptr %s864, align 8, !dbg !2575
  %checknull890 = icmp eq ptr %ptradd_any889, null, !dbg !2575
  %657 = call i1 @llvm.expect.i1(i1 %checknull890, i1 false), !dbg !2575
  br i1 %657, label %panic891, label %checkok892, !dbg !2575

checkok892:                                       ; preds = %switch.case888
  store i8 48, ptr %ptradd_any889, align 1, !dbg !2577
  br label %switch.exit894, !dbg !2577

next_if893:                                       ; preds = %next_if884
  br label %switch.exit894, !dbg !2577

switch.exit894:                                   ; preds = %next_if893, %checkok892, %loop.exit883
  %658 = load i64, ptr %len795, align 8, !dbg !2578
  %659 = load ptr, ptr %s864, align 8, !dbg !2579
  %660 = load ptr, ptr %buf, align 8, !dbg !2580
  %ptradd_any896 = getelementptr i8, ptr %660, i64 9, !dbg !2581
  %661 = load ptr, ptr %s864, align 8, !dbg !2582
  %662 = ptrtoint ptr %ptradd_any896 to i64, !dbg !2580
  %663 = ptrtoint ptr %661 to i64, !dbg !2580
  %664 = sub i64 %662, %663, !dbg !2580
  %665 = sdiv exact i64 %664, 1, !dbg !2580
  %add897 = add i64 0, %665, !dbg !2580
  %size898 = sub i64 %add897, 0, !dbg !2580
  %666 = insertvalue %"char[]" undef, ptr %659, 0, !dbg !2580
  %667 = insertvalue %"char[]" %666, i64 %size898, 1, !dbg !2580
  %668 = load ptr, ptr %self, align 8
  %669 = call i64 @std.io.Formatter.out_chars(ptr %retparam899, ptr %668, ptr %659, i64 %size898), !dbg !2583
  %not_err900 = icmp eq i64 %669, 0, !dbg !2583
  %670 = call i1 @llvm.expect.i1(i1 %not_err900, i1 true), !dbg !2583
  br i1 %670, label %after_check902, label %assign_optional901, !dbg !2583

assign_optional901:                               ; preds = %switch.exit894
  store i64 %669, ptr %error_var895, align 8, !dbg !2583
  br label %guard_block903, !dbg !2583

after_check902:                                   ; preds = %switch.exit894
  br label %noerr_block904, !dbg !2583

guard_block903:                                   ; preds = %assign_optional901
  %671 = load i64, ptr %error_var895, align 8, !dbg !2583
  ret i64 %671, !dbg !2583

noerr_block904:                                   ; preds = %after_check902
  %672 = load i64, ptr %retparam899, align 8, !dbg !2583
  %add905 = add i64 %658, %672, !dbg !2578
  store i64 %add905, ptr %len795, align 8, !dbg !2578
  %673 = load ptr, ptr %d860, align 8, !dbg !2584
  %ptradd_any906 = getelementptr i8, ptr %673, i8 4, !dbg !2584
  store ptr %ptradd_any906, ptr %d860, align 8, !dbg !2584
  br label %loop.cond861, !dbg !2584

loop.exit907:                                     ; preds = %loop.cond861
  %674 = load i64, ptr %p, align 8, !dbg !2585
  %intbool908 = icmp ne i64 %674, 0, !dbg !2585
  br i1 %intbool908, label %or.phi913, label %or.rhs909, !dbg !2585

or.rhs909:                                        ; preds = %loop.exit907
  %675 = load ptr, ptr %self, align 8, !dbg !2586
  %ptradd910 = getelementptr inbounds i8, ptr %675, i64 16, !dbg !2586
  %676 = load i32, ptr %ptradd910, align 8, !dbg !2586
  %lshrl911 = lshr i32 %676, 4, !dbg !2586
  %677 = and i32 1, %lshrl911, !dbg !2586
  %trunc912 = trunc i32 %677 to i8, !dbg !2586
  %678 = trunc i8 %trunc912 to i1, !dbg !2586
  br label %or.phi913, !dbg !2586

or.phi913:                                        ; preds = %or.rhs909, %loop.exit907
  %val914 = phi i1 [ true, %loop.exit907 ], [ %678, %or.rhs909 ], !dbg !2586
  br i1 %val914, label %if.then915, label %if.exit924, !dbg !2586

if.then915:                                       ; preds = %or.phi913
  %679 = load i64, ptr %len795, align 8, !dbg !2587
  %680 = load ptr, ptr %self, align 8
  %681 = call i64 @std.io.Formatter.out(ptr %retparam917, ptr %680, i8 zeroext 46), !dbg !2588
  %not_err918 = icmp eq i64 %681, 0, !dbg !2588
  %682 = call i1 @llvm.expect.i1(i1 %not_err918, i1 true), !dbg !2588
  br i1 %682, label %after_check920, label %assign_optional919, !dbg !2588

assign_optional919:                               ; preds = %if.then915
  store i64 %681, ptr %error_var916, align 8, !dbg !2588
  br label %guard_block921, !dbg !2588

after_check920:                                   ; preds = %if.then915
  br label %noerr_block922, !dbg !2588

guard_block921:                                   ; preds = %assign_optional919
  %683 = load i64, ptr %error_var916, align 8, !dbg !2588
  ret i64 %683, !dbg !2588

noerr_block922:                                   ; preds = %after_check920
  %684 = load i64, ptr %retparam917, align 8, !dbg !2588
  %add923 = add i64 %679, %684, !dbg !2587
  store i64 %add923, ptr %len795, align 8, !dbg !2587
  br label %if.exit924, !dbg !2587

if.exit924:                                       ; preds = %noerr_block922, %or.phi913
  br label %loop.cond925, !dbg !2589

loop.cond925:                                     ; preds = %noerr_block960, %if.exit924
  %685 = load ptr, ptr %d860, align 8, !dbg !2590
  %686 = load ptr, ptr %z, align 8, !dbg !2592
  %lt926 = icmp ult ptr %685, %686, !dbg !2590
  br i1 %lt926, label %and.rhs927, label %and.phi929, !dbg !2590

and.rhs927:                                       ; preds = %loop.cond925
  %687 = load i64, ptr %p, align 8, !dbg !2593
  %gt928 = icmp sgt i64 %687, 0, !dbg !2593
  br label %and.phi929, !dbg !2593

and.phi929:                                       ; preds = %and.rhs927, %loop.cond925
  %val930 = phi i1 [ false, %loop.cond925 ], [ %gt928, %and.rhs927 ], !dbg !2593
  br i1 %val930, label %loop.body931, label %loop.exit964, !dbg !2593

loop.body931:                                     ; preds = %and.phi929
  call void @llvm.dbg.declare(metadata ptr %s932, metadata !2594, metadata !DIExpression()), !dbg !2596
  %688 = load ptr, ptr %d860, align 8, !dbg !2597
  %checknull933 = icmp eq ptr %688, null, !dbg !2597
  %689 = call i1 @llvm.expect.i1(i1 %checknull933, i1 false), !dbg !2597
  br i1 %689, label %panic934, label %checkok935, !dbg !2597

checkok935:                                       ; preds = %loop.body931
  %690 = load i32, ptr %688, align 4, !dbg !2597
  %zext936 = zext i32 %690 to i128, !dbg !2597
  %691 = load ptr, ptr %buf, align 8, !dbg !2598
  %ptradd_any937 = getelementptr i8, ptr %691, i64 9, !dbg !2599
  store i128 %zext936, ptr %taddr938, align 8
  %lo939 = load i64, ptr %taddr938, align 8
  %ptradd940 = getelementptr inbounds i8, ptr %taddr938, i64 8
  %hi941 = load i64, ptr %ptradd940, align 8
  %692 = call ptr @std.io.fmt_u(i64 %lo939, i64 %hi941, ptr %ptradd_any937), !dbg !2600
  store ptr %692, ptr %s932, align 8, !dbg !2600
  br label %loop.cond942, !dbg !2601

loop.cond942:                                     ; preds = %checkok948, %checkok935
  %693 = load ptr, ptr %s932, align 8, !dbg !2602
  %694 = load ptr, ptr %buf, align 8, !dbg !2604
  %gt943 = icmp ugt ptr %693, %694, !dbg !2602
  br i1 %gt943, label %loop.body944, label %loop.exit949, !dbg !2602

loop.body944:                                     ; preds = %loop.cond942
  %695 = load ptr, ptr %s932, align 8, !dbg !2605
  %ptradd_any945 = getelementptr i8, ptr %695, i8 -1, !dbg !2605
  store ptr %ptradd_any945, ptr %s932, align 8, !dbg !2605
  %checknull946 = icmp eq ptr %ptradd_any945, null, !dbg !2605
  %696 = call i1 @llvm.expect.i1(i1 %checknull946, i1 false), !dbg !2605
  br i1 %696, label %panic947, label %checkok948, !dbg !2605

checkok948:                                       ; preds = %loop.body944
  store i8 48, ptr %ptradd_any945, align 1, !dbg !2606
  br label %loop.cond942, !dbg !2606

loop.exit949:                                     ; preds = %loop.cond942
  %697 = load i64, ptr %len795, align 8, !dbg !2607
  %698 = load ptr, ptr %s932, align 8, !dbg !2608
  store i64 9, ptr %x951, align 8
  %699 = load i64, ptr %p, align 8
  store i64 %699, ptr %y952, align 8
  %700 = load i64, ptr %x951, align 8, !dbg !2609
  %701 = load i64, ptr %y952, align 8, !dbg !2612
  %702 = call i64 @llvm.smin.i64(i64 %700, i64 %701), !dbg !2612
  %add953 = add i64 0, %702, !dbg !2612
  %size954 = sub i64 %add953, 0, !dbg !2612
  %703 = insertvalue %"char[]" undef, ptr %698, 0, !dbg !2612
  %704 = insertvalue %"char[]" %703, i64 %size954, 1, !dbg !2612
  %705 = load ptr, ptr %self, align 8
  %706 = call i64 @std.io.Formatter.out_chars(ptr %retparam955, ptr %705, ptr %698, i64 %size954), !dbg !2613
  %not_err956 = icmp eq i64 %706, 0, !dbg !2613
  %707 = call i1 @llvm.expect.i1(i1 %not_err956, i1 true), !dbg !2613
  br i1 %707, label %after_check958, label %assign_optional957, !dbg !2613

assign_optional957:                               ; preds = %loop.exit949
  store i64 %706, ptr %error_var950, align 8, !dbg !2613
  br label %guard_block959, !dbg !2613

after_check958:                                   ; preds = %loop.exit949
  br label %noerr_block960, !dbg !2613

guard_block959:                                   ; preds = %assign_optional957
  %708 = load i64, ptr %error_var950, align 8, !dbg !2613
  ret i64 %708, !dbg !2613

noerr_block960:                                   ; preds = %after_check958
  %709 = load i64, ptr %retparam955, align 8, !dbg !2613
  %add961 = add i64 %697, %709, !dbg !2607
  store i64 %add961, ptr %len795, align 8, !dbg !2607
  %710 = load ptr, ptr %d860, align 8, !dbg !2614
  %ptradd_any962 = getelementptr i8, ptr %710, i8 4, !dbg !2614
  store ptr %ptradd_any962, ptr %d860, align 8, !dbg !2614
  %711 = load i64, ptr %p, align 8, !dbg !2615
  %sub963 = sub i64 %711, 9, !dbg !2615
  store i64 %sub963, ptr %p, align 8, !dbg !2615
  br label %loop.cond925, !dbg !2615

loop.exit964:                                     ; preds = %and.phi929
  %712 = load i64, ptr %len795, align 8, !dbg !2616
  %713 = load i64, ptr %p, align 8, !dbg !2617
  %add966 = add i64 %713, 9, !dbg !2617
  %714 = load ptr, ptr %self, align 8
  %715 = call i64 @std.io.Formatter.pad(ptr %retparam967, ptr %714, i8 zeroext 48, i64 %add966, i64 9) #5, !dbg !2618
  %not_err968 = icmp eq i64 %715, 0, !dbg !2618
  %716 = call i1 @llvm.expect.i1(i1 %not_err968, i1 true), !dbg !2618
  br i1 %716, label %after_check970, label %assign_optional969, !dbg !2618

assign_optional969:                               ; preds = %loop.exit964
  store i64 %715, ptr %error_var965, align 8, !dbg !2618
  br label %guard_block971, !dbg !2618

after_check970:                                   ; preds = %loop.exit964
  br label %noerr_block972, !dbg !2618

guard_block971:                                   ; preds = %assign_optional969
  %717 = load i64, ptr %error_var965, align 8, !dbg !2618
  ret i64 %717, !dbg !2618

noerr_block972:                                   ; preds = %after_check970
  %718 = load i64, ptr %retparam967, align 8, !dbg !2618
  %add973 = add i64 %712, %718, !dbg !2616
  store i64 %add973, ptr %len795, align 8, !dbg !2616
  br label %if.exit1073, !dbg !2616

if.else974:                                       ; preds = %if.exit854
  %719 = load ptr, ptr %z, align 8, !dbg !2619
  %720 = load ptr, ptr %a, align 8, !dbg !2621
  %le975 = icmp ule ptr %719, %720, !dbg !2619
  br i1 %le975, label %if.then976, label %if.exit978, !dbg !2619

if.then976:                                       ; preds = %if.else974
  %721 = load ptr, ptr %a, align 8, !dbg !2622
  %ptradd_any977 = getelementptr i8, ptr %721, i64 4, !dbg !2623
  store ptr %ptradd_any977, ptr %z, align 8, !dbg !2623
  br label %if.exit978, !dbg !2623

if.exit978:                                       ; preds = %if.then976, %if.else974
  call void @llvm.dbg.declare(metadata ptr %d979, metadata !2624, metadata !DIExpression()), !dbg !2626
  %722 = load ptr, ptr %a, align 8, !dbg !2627
  store ptr %722, ptr %d979, align 8, !dbg !2627
  br label %loop.cond980, !dbg !2627

loop.cond980:                                     ; preds = %noerr_block1048, %if.exit978
  %723 = load ptr, ptr %d979, align 8, !dbg !2628
  %724 = load ptr, ptr %z, align 8, !dbg !2629
  %lt981 = icmp ult ptr %723, %724, !dbg !2628
  br i1 %lt981, label %and.rhs982, label %and.phi984, !dbg !2628

and.rhs982:                                       ; preds = %loop.cond980
  %725 = load i64, ptr %p, align 8, !dbg !2630
  %ge983 = icmp sge i64 %725, 0, !dbg !2630
  br label %and.phi984, !dbg !2630

and.phi984:                                       ; preds = %and.rhs982, %loop.cond980
  %val985 = phi i1 [ false, %loop.cond980 ], [ %ge983, %and.rhs982 ], !dbg !2630
  br i1 %val985, label %loop.body986, label %loop.exit1053, !dbg !2630

loop.body986:                                     ; preds = %and.phi984
  call void @llvm.dbg.declare(metadata ptr %s987, metadata !2631, metadata !DIExpression()), !dbg !2633
  %726 = load ptr, ptr %d979, align 8, !dbg !2634
  %checknull988 = icmp eq ptr %726, null, !dbg !2634
  %727 = call i1 @llvm.expect.i1(i1 %checknull988, i1 false), !dbg !2634
  br i1 %727, label %panic989, label %checkok990, !dbg !2634

checkok990:                                       ; preds = %loop.body986
  %728 = load i32, ptr %726, align 4, !dbg !2634
  %zext991 = zext i32 %728 to i128, !dbg !2634
  %729 = load ptr, ptr %buf, align 8, !dbg !2635
  %ptradd_any992 = getelementptr i8, ptr %729, i64 9, !dbg !2636
  store i128 %zext991, ptr %taddr993, align 8
  %lo994 = load i64, ptr %taddr993, align 8
  %ptradd995 = getelementptr inbounds i8, ptr %taddr993, i64 8
  %hi996 = load i64, ptr %ptradd995, align 8
  %730 = call ptr @std.io.fmt_u(i64 %lo994, i64 %hi996, ptr %ptradd_any992), !dbg !2637
  store ptr %730, ptr %s987, align 8, !dbg !2637
  %731 = load ptr, ptr %s987, align 8, !dbg !2638
  %732 = load ptr, ptr %buf, align 8, !dbg !2639
  %ptradd_any997 = getelementptr i8, ptr %732, i64 9, !dbg !2640
  %eq998 = icmp eq ptr %731, %ptradd_any997, !dbg !2638
  br i1 %eq998, label %if.then999, label %if.exit1001, !dbg !2638

if.then999:                                       ; preds = %checkok990
  %733 = load ptr, ptr %s987, align 8, !dbg !2641
  %ptradd_any1000 = getelementptr i8, ptr %733, i8 -1, !dbg !2641
  store ptr %ptradd_any1000, ptr %s987, align 8, !dbg !2641
  store i8 48, ptr %ptradd_any1000, align 1, !dbg !2642
  br label %if.exit1001, !dbg !2642

if.exit1001:                                      ; preds = %if.then999, %checkok990
  %734 = load ptr, ptr %d979, align 8, !dbg !2643
  %735 = load ptr, ptr %a, align 8, !dbg !2644
  %neq1002 = icmp ne ptr %734, %735, !dbg !2643
  br i1 %neq1002, label %if.then1003, label %if.else1009, !dbg !2643

if.then1003:                                      ; preds = %if.exit1001
  br label %loop.cond1004, !dbg !2645

loop.cond1004:                                    ; preds = %loop.body1006, %if.then1003
  %736 = load ptr, ptr %s987, align 8, !dbg !2647
  %737 = load ptr, ptr %buf, align 8, !dbg !2649
  %gt1005 = icmp ugt ptr %736, %737, !dbg !2647
  br i1 %gt1005, label %loop.body1006, label %loop.exit1008, !dbg !2647

loop.body1006:                                    ; preds = %loop.cond1004
  %738 = load ptr, ptr %s987, align 8, !dbg !2650
  %ptradd_any1007 = getelementptr i8, ptr %738, i8 -1, !dbg !2650
  store ptr %ptradd_any1007, ptr %s987, align 8, !dbg !2650
  store i8 48, ptr %ptradd_any1007, align 1, !dbg !2651
  br label %loop.cond1004, !dbg !2651

loop.exit1008:                                    ; preds = %loop.cond1004
  br label %if.exit1036, !dbg !2651

if.else1009:                                      ; preds = %if.exit1001
  %739 = load i64, ptr %len795, align 8, !dbg !2652
  %740 = load ptr, ptr %s987, align 8, !dbg !2654
  %ptradd_any1011 = getelementptr i8, ptr %740, i8 1, !dbg !2654
  store ptr %ptradd_any1011, ptr %s987, align 8, !dbg !2654
  %741 = load ptr, ptr %self, align 8
  %742 = load i8, ptr %740, align 1
  %743 = call i64 @std.io.Formatter.out(ptr %retparam1012, ptr %741, i8 zeroext %742), !dbg !2655
  %not_err1013 = icmp eq i64 %743, 0, !dbg !2655
  %744 = call i1 @llvm.expect.i1(i1 %not_err1013, i1 true), !dbg !2655
  br i1 %744, label %after_check1015, label %assign_optional1014, !dbg !2655

assign_optional1014:                              ; preds = %if.else1009
  store i64 %743, ptr %error_var1010, align 8, !dbg !2655
  br label %guard_block1016, !dbg !2655

after_check1015:                                  ; preds = %if.else1009
  br label %noerr_block1017, !dbg !2655

guard_block1016:                                  ; preds = %assign_optional1014
  %745 = load i64, ptr %error_var1010, align 8, !dbg !2655
  ret i64 %745, !dbg !2655

noerr_block1017:                                  ; preds = %after_check1015
  %746 = load i64, ptr %retparam1012, align 8, !dbg !2655
  %add1018 = add i64 %739, %746, !dbg !2652
  store i64 %add1018, ptr %len795, align 8, !dbg !2652
  %747 = load i64, ptr %p, align 8, !dbg !2656
  %gt1019 = icmp sgt i64 %747, 0, !dbg !2656
  br i1 %gt1019, label %or.phi1024, label %or.rhs1020, !dbg !2656

or.rhs1020:                                       ; preds = %noerr_block1017
  %748 = load ptr, ptr %self, align 8, !dbg !2657
  %ptradd1021 = getelementptr inbounds i8, ptr %748, i64 16, !dbg !2657
  %749 = load i32, ptr %ptradd1021, align 8, !dbg !2657
  %lshrl1022 = lshr i32 %749, 4, !dbg !2657
  %750 = and i32 1, %lshrl1022, !dbg !2657
  %trunc1023 = trunc i32 %750 to i8, !dbg !2657
  %751 = trunc i8 %trunc1023 to i1, !dbg !2657
  br label %or.phi1024, !dbg !2657

or.phi1024:                                       ; preds = %or.rhs1020, %noerr_block1017
  %val1025 = phi i1 [ true, %noerr_block1017 ], [ %751, %or.rhs1020 ], !dbg !2657
  br i1 %val1025, label %if.then1026, label %if.exit1035, !dbg !2657

if.then1026:                                      ; preds = %or.phi1024
  %752 = load i64, ptr %len795, align 8, !dbg !2658
  %753 = load ptr, ptr %self, align 8
  %754 = call i64 @std.io.Formatter.out(ptr %retparam1028, ptr %753, i8 zeroext 46), !dbg !2659
  %not_err1029 = icmp eq i64 %754, 0, !dbg !2659
  %755 = call i1 @llvm.expect.i1(i1 %not_err1029, i1 true), !dbg !2659
  br i1 %755, label %after_check1031, label %assign_optional1030, !dbg !2659

assign_optional1030:                              ; preds = %if.then1026
  store i64 %754, ptr %error_var1027, align 8, !dbg !2659
  br label %guard_block1032, !dbg !2659

after_check1031:                                  ; preds = %if.then1026
  br label %noerr_block1033, !dbg !2659

guard_block1032:                                  ; preds = %assign_optional1030
  %756 = load i64, ptr %error_var1027, align 8, !dbg !2659
  ret i64 %756, !dbg !2659

noerr_block1033:                                  ; preds = %after_check1031
  %757 = load i64, ptr %retparam1028, align 8, !dbg !2659
  %add1034 = add i64 %752, %757, !dbg !2658
  store i64 %add1034, ptr %len795, align 8, !dbg !2658
  br label %if.exit1035, !dbg !2658

if.exit1035:                                      ; preds = %noerr_block1033, %or.phi1024
  br label %if.exit1036, !dbg !2658

if.exit1036:                                      ; preds = %if.exit1035, %loop.exit1008
  %758 = load i64, ptr %len795, align 8, !dbg !2660
  %759 = load ptr, ptr %s987, align 8, !dbg !2661
  %760 = load ptr, ptr %buf, align 8, !dbg !2662
  %ptradd_any1038 = getelementptr i8, ptr %760, i64 9, !dbg !2663
  %761 = load ptr, ptr %s987, align 8, !dbg !2664
  %762 = ptrtoint ptr %ptradd_any1038 to i64, !dbg !2662
  %763 = ptrtoint ptr %761 to i64, !dbg !2662
  %764 = sub i64 %762, %763, !dbg !2662
  %765 = sdiv exact i64 %764, 1, !dbg !2662
  store i64 %765, ptr %x1039, align 8
  %766 = load i64, ptr %p, align 8
  store i64 %766, ptr %y1040, align 8
  %767 = load i64, ptr %x1039, align 8, !dbg !2665
  %768 = load i64, ptr %y1040, align 8, !dbg !2668
  %769 = call i64 @llvm.smin.i64(i64 %767, i64 %768), !dbg !2668
  %add1041 = add i64 0, %769, !dbg !2668
  %size1042 = sub i64 %add1041, 0, !dbg !2668
  %770 = insertvalue %"char[]" undef, ptr %759, 0, !dbg !2668
  %771 = insertvalue %"char[]" %770, i64 %size1042, 1, !dbg !2668
  %772 = load ptr, ptr %self, align 8
  %773 = call i64 @std.io.Formatter.out_chars(ptr %retparam1043, ptr %772, ptr %759, i64 %size1042), !dbg !2669
  %not_err1044 = icmp eq i64 %773, 0, !dbg !2669
  %774 = call i1 @llvm.expect.i1(i1 %not_err1044, i1 true), !dbg !2669
  br i1 %774, label %after_check1046, label %assign_optional1045, !dbg !2669

assign_optional1045:                              ; preds = %if.exit1036
  store i64 %773, ptr %error_var1037, align 8, !dbg !2669
  br label %guard_block1047, !dbg !2669

after_check1046:                                  ; preds = %if.exit1036
  br label %noerr_block1048, !dbg !2669

guard_block1047:                                  ; preds = %assign_optional1045
  %775 = load i64, ptr %error_var1037, align 8, !dbg !2669
  ret i64 %775, !dbg !2669

noerr_block1048:                                  ; preds = %after_check1046
  %776 = load i64, ptr %retparam1043, align 8, !dbg !2669
  %add1049 = add i64 %758, %776, !dbg !2660
  store i64 %add1049, ptr %len795, align 8, !dbg !2660
  %777 = load i64, ptr %p, align 8, !dbg !2670
  %778 = load ptr, ptr %buf, align 8, !dbg !2671
  %ptradd_any1050 = getelementptr i8, ptr %778, i64 9, !dbg !2672
  %779 = load ptr, ptr %s987, align 8, !dbg !2673
  %780 = ptrtoint ptr %ptradd_any1050 to i64, !dbg !2671
  %781 = ptrtoint ptr %779 to i64, !dbg !2671
  %782 = sub i64 %780, %781, !dbg !2671
  %783 = sdiv exact i64 %782, 1, !dbg !2671
  %sub1051 = sub i64 %777, %783, !dbg !2670
  store i64 %sub1051, ptr %p, align 8, !dbg !2670
  %784 = load ptr, ptr %d979, align 8, !dbg !2674
  %ptradd_any1052 = getelementptr i8, ptr %784, i8 4, !dbg !2674
  store ptr %ptradd_any1052, ptr %d979, align 8, !dbg !2674
  br label %loop.cond980, !dbg !2674

loop.exit1053:                                    ; preds = %and.phi984
  %785 = load i64, ptr %len795, align 8, !dbg !2675
  %786 = load i64, ptr %p, align 8, !dbg !2676
  %add1055 = add i64 %786, 18, !dbg !2676
  %787 = load ptr, ptr %self, align 8
  %788 = call i64 @std.io.Formatter.pad(ptr %retparam1056, ptr %787, i8 zeroext 48, i64 %add1055, i64 18) #5, !dbg !2677
  %not_err1057 = icmp eq i64 %788, 0, !dbg !2677
  %789 = call i1 @llvm.expect.i1(i1 %not_err1057, i1 true), !dbg !2677
  br i1 %789, label %after_check1059, label %assign_optional1058, !dbg !2677

assign_optional1058:                              ; preds = %loop.exit1053
  store i64 %788, ptr %error_var1054, align 8, !dbg !2677
  br label %guard_block1060, !dbg !2677

after_check1059:                                  ; preds = %loop.exit1053
  br label %noerr_block1061, !dbg !2677

guard_block1060:                                  ; preds = %assign_optional1058
  %790 = load i64, ptr %error_var1054, align 8, !dbg !2677
  ret i64 %790, !dbg !2677

noerr_block1061:                                  ; preds = %after_check1059
  %791 = load i64, ptr %retparam1056, align 8, !dbg !2677
  %add1062 = add i64 %785, %791, !dbg !2675
  store i64 %add1062, ptr %len795, align 8, !dbg !2675
  %792 = load i64, ptr %len795, align 8, !dbg !2678
  %793 = load ptr, ptr %estr740, align 8, !dbg !2679
  %794 = load ptr, ptr %ebuf, align 8, !dbg !2680
  %795 = load ptr, ptr %estr740, align 8, !dbg !2681
  %796 = ptrtoint ptr %794 to i64, !dbg !2680
  %797 = ptrtoint ptr %795 to i64, !dbg !2680
  %798 = sub i64 %796, %797, !dbg !2680
  %799 = sdiv exact i64 %798, 1, !dbg !2680
  %add1064 = add i64 0, %799, !dbg !2680
  %size1065 = sub i64 %add1064, 0, !dbg !2680
  %800 = insertvalue %"char[]" undef, ptr %793, 0, !dbg !2680
  %801 = insertvalue %"char[]" %800, i64 %size1065, 1, !dbg !2680
  %802 = load ptr, ptr %self, align 8
  %803 = call i64 @std.io.Formatter.out_chars(ptr %retparam1066, ptr %802, ptr %793, i64 %size1065), !dbg !2682
  %not_err1067 = icmp eq i64 %803, 0, !dbg !2682
  %804 = call i1 @llvm.expect.i1(i1 %not_err1067, i1 true), !dbg !2682
  br i1 %804, label %after_check1069, label %assign_optional1068, !dbg !2682

assign_optional1068:                              ; preds = %noerr_block1061
  store i64 %803, ptr %error_var1063, align 8, !dbg !2682
  br label %guard_block1070, !dbg !2682

after_check1069:                                  ; preds = %noerr_block1061
  br label %noerr_block1071, !dbg !2682

guard_block1070:                                  ; preds = %assign_optional1068
  %805 = load i64, ptr %error_var1063, align 8, !dbg !2682
  ret i64 %805, !dbg !2682

noerr_block1071:                                  ; preds = %after_check1069
  %806 = load i64, ptr %retparam1066, align 8, !dbg !2682
  %add1072 = add i64 %792, %806, !dbg !2678
  store i64 %add1072, ptr %len795, align 8, !dbg !2678
  br label %if.exit1073, !dbg !2678

if.exit1073:                                      ; preds = %noerr_block1071, %noerr_block972
  %807 = load ptr, ptr %self, align 8, !dbg !2683
  %ptradd1074 = getelementptr inbounds i8, ptr %807, i64 16, !dbg !2683
  %808 = load i32, ptr %ptradd1074, align 8, !dbg !2683
  %lshrl1075 = lshr i32 %808, 1, !dbg !2683
  %809 = and i32 1, %lshrl1075, !dbg !2683
  %trunc1076 = trunc i32 %809 to i8, !dbg !2683
  %810 = trunc i8 %trunc1076 to i1, !dbg !2683
  br i1 %810, label %if.then1077, label %if.exit1091, !dbg !2683

if.then1077:                                      ; preds = %if.exit1073
  %811 = load i64, ptr %len795, align 8, !dbg !2684
  %812 = load ptr, ptr %self, align 8, !dbg !2685
  %ptradd1079 = getelementptr inbounds i8, ptr %812, i64 16, !dbg !2685
  %ptradd1080 = getelementptr inbounds i8, ptr %ptradd1079, i64 4, !dbg !2685
  %813 = load i32, ptr %ptradd1080, align 4, !dbg !2685
  %zext1081 = zext i32 %813 to i64, !dbg !2685
  %814 = load i64, ptr %pl, align 8, !dbg !2686
  %815 = load i32, ptr %l728, align 4, !dbg !2687
  %sext1082 = sext i32 %815 to i64, !dbg !2687
  %add1083 = add i64 %814, %sext1082, !dbg !2686
  %816 = load ptr, ptr %self, align 8
  %817 = call i64 @std.io.Formatter.pad(ptr %retparam1084, ptr %816, i8 zeroext 32, i64 %zext1081, i64 %add1083) #5, !dbg !2688
  %not_err1085 = icmp eq i64 %817, 0, !dbg !2688
  %818 = call i1 @llvm.expect.i1(i1 %not_err1085, i1 true), !dbg !2688
  br i1 %818, label %after_check1087, label %assign_optional1086, !dbg !2688

assign_optional1086:                              ; preds = %if.then1077
  store i64 %817, ptr %error_var1078, align 8, !dbg !2688
  br label %guard_block1088, !dbg !2688

after_check1087:                                  ; preds = %if.then1077
  br label %noerr_block1089, !dbg !2688

guard_block1088:                                  ; preds = %assign_optional1086
  %819 = load i64, ptr %error_var1078, align 8, !dbg !2688
  ret i64 %819, !dbg !2688

noerr_block1089:                                  ; preds = %after_check1087
  %820 = load i64, ptr %retparam1084, align 8, !dbg !2688
  %add1090 = add i64 %811, %820, !dbg !2684
  store i64 %add1090, ptr %len795, align 8, !dbg !2684
  br label %if.exit1091, !dbg !2684

if.exit1091:                                      ; preds = %noerr_block1089, %if.exit1073
  %821 = load i64, ptr %len795, align 8, !dbg !2689
  store i64 %821, ptr %0, align 8, !dbg !2689
  ret i64 0, !dbg !2689

panic:                                            ; preds = %entry
  %822 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1904
  call void %822(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 197), !dbg !1904
  unreachable, !dbg !1904

panic1:                                           ; preds = %checkok
  %823 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1922
  call void %823(ptr @.panic_msg.48, i64 53, ptr @.file.49, i64 10, ptr @.func.153, i64 11, i32 212), !dbg !1922
  unreachable, !dbg !1922

panic7:                                           ; preds = %or.phi
  %824 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !1937
  call void %824(ptr @.panic_msg.48, i64 53, ptr @.file.49, i64 10, ptr @.func.153, i64 11, i32 212), !dbg !1937
  unreachable, !dbg !1937

panic122:                                         ; preds = %if.then119
  %825 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2690
  call void %825(ptr @.panic_msg.158, i64 47, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 259), !dbg !2690
  unreachable, !dbg !2690

panic127:                                         ; preds = %if.exit124
  %826 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2691
  call void %826(ptr @.panic_msg.158, i64 47, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 260), !dbg !2691
  unreachable, !dbg !2691

panic133:                                         ; preds = %checkok128
  %827 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2692
  call void %827(ptr @.panic_msg.158, i64 47, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 261), !dbg !2692
  unreachable, !dbg !2692

panic150:                                         ; preds = %loop.body146
  %828 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2061
  call void %828(ptr @.panic_msg.159, i64 44, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 267), !dbg !2061
  unreachable, !dbg !2061

panic174:                                         ; preds = %if.then171
  %829 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2072
  call void %829(ptr @.panic_msg.159, i64 44, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 269), !dbg !2072
  unreachable, !dbg !2072

panic344:                                         ; preds = %loop.body341
  %830 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2193
  call void %830(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 317), !dbg !2193
  unreachable, !dbg !2193

panic348:                                         ; preds = %checkok345
  store i64 %zext347, ptr %taddr349, align 8
  %831 = insertvalue %any undef, ptr %taddr349, 0
  %832 = insertvalue %any %831, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %832, ptr %varargslots, align 16
  %833 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %833, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 317, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2195
  unreachable, !dbg !2195

panic354:                                         ; preds = %checkok350
  %834 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2197
  call void %834(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 318), !dbg !2197
  unreachable, !dbg !2197

panic364:                                         ; preds = %if.then361
  %835 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2693
  call void %835(ptr @.panic_msg.163, i64 44, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 321), !dbg !2693
  unreachable, !dbg !2693

panic397:                                         ; preds = %loop.body395
  %836 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2244
  call void %836(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 335), !dbg !2244
  unreachable, !dbg !2244

panic399:                                         ; preds = %checkok398
  store i32 %331, ptr %taddr400, align 4
  %837 = insertvalue %any undef, ptr %taddr400, 0
  %838 = insertvalue %any %837, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %838, ptr %varargslots401, align 16
  %839 = insertvalue %"any[]" undef, ptr %varargslots401, 0
  %"$$temp402" = insertvalue %"any[]" %839, i64 1, 1
  store %"any[]" %"$$temp402", ptr %indirectarg403, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 335, ptr byval(%"any[]") align 8 %indirectarg403), !dbg !2246
  unreachable, !dbg !2246

panic406:                                         ; preds = %checkok404
  store i32 %331, ptr %taddr407, align 4
  %840 = insertvalue %any undef, ptr %taddr407, 0
  %841 = insertvalue %any %840, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %841, ptr %varargslots408, align 16
  %842 = insertvalue %"any[]" undef, ptr %varargslots408, 0
  %"$$temp409" = insertvalue %"any[]" %842, i64 1, 1
  store %"any[]" %"$$temp409", ptr %indirectarg410, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 335, ptr byval(%"any[]") align 8 %indirectarg410), !dbg !2246
  unreachable, !dbg !2246

panic416:                                         ; preds = %checkok411
  %843 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2248
  call void %843(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 336), !dbg !2248
  unreachable, !dbg !2248

panic419:                                         ; preds = %checkok417
  %844 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2249
  call void %844(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 336), !dbg !2249
  unreachable, !dbg !2249

panic422:                                         ; preds = %checkok420
  store i32 %340, ptr %taddr423, align 4
  %845 = insertvalue %any undef, ptr %taddr423, 0
  %846 = insertvalue %any %845, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %846, ptr %varargslots424, align 16
  %847 = insertvalue %"any[]" undef, ptr %varargslots424, 0
  %"$$temp425" = insertvalue %"any[]" %847, i64 1, 1
  store %"any[]" %"$$temp425", ptr %indirectarg426, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 336, ptr byval(%"any[]") align 8 %indirectarg426), !dbg !2251
  unreachable, !dbg !2251

panic431:                                         ; preds = %checkok427
  store i32 %344, ptr %taddr432, align 4
  %848 = insertvalue %any undef, ptr %taddr432, 0
  %849 = insertvalue %any %848, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %849, ptr %varargslots433, align 16
  %850 = insertvalue %"any[]" undef, ptr %varargslots433, 0
  %"$$temp434" = insertvalue %"any[]" %850, i64 1, 1
  store %"any[]" %"$$temp434", ptr %indirectarg435, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 337, ptr byval(%"any[]") align 8 %indirectarg435), !dbg !2254
  unreachable, !dbg !2254

panic438:                                         ; preds = %checkok436
  store i32 %344, ptr %taddr439, align 4
  %851 = insertvalue %any undef, ptr %taddr439, 0
  %852 = insertvalue %any %851, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %any %852, ptr %varargslots440, align 16
  %853 = insertvalue %"any[]" undef, ptr %varargslots440, 0
  %"$$temp441" = insertvalue %"any[]" %853, i64 1, 1
  store %"any[]" %"$$temp441", ptr %indirectarg442, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.42, i64 35, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 337, ptr byval(%"any[]") align 8 %indirectarg442), !dbg !2254
  unreachable, !dbg !2254

panic473:                                         ; preds = %loop.cond471
  %854 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2285
  call void %854(ptr @.panic_msg.164, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 350), !dbg !2285
  unreachable, !dbg !2285

panic518:                                         ; preds = %loop.exit516
  %855 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2320
  call void %855(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 364), !dbg !2320
  unreachable, !dbg !2320

panic520:                                         ; preds = %checkok519
  %856 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2322
  call void %856(ptr @.panic_msg.165, i64 10, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 364), !dbg !2322
  unreachable, !dbg !2322

panic532:                                         ; preds = %if.then529
  %857 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2333
  call void %857(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 370), !dbg !2333
  unreachable, !dbg !2333

panic535:                                         ; preds = %checkok533
  %858 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2335
  call void %858(ptr @.panic_msg.166, i64 17, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 370), !dbg !2335
  unreachable, !dbg !2335

panic581:                                         ; preds = %if.exit579
  %859 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2362
  call void %859(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 388), !dbg !2362
  unreachable, !dbg !2362

panic588:                                         ; preds = %if.then586
  %860 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2368
  call void %860(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 392), !dbg !2368
  unreachable, !dbg !2368

panic591:                                         ; preds = %checkok589
  %861 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2370
  call void %861(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 392), !dbg !2370
  unreachable, !dbg !2370

panic596:                                         ; preds = %loop.cond594
  %862 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2374
  call void %862(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 393), !dbg !2374
  unreachable, !dbg !2374

panic602:                                         ; preds = %loop.body599
  %863 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2377
  call void %863(ptr @.panic_msg.167, i64 44, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 395), !dbg !2377
  unreachable, !dbg !2377

panic608:                                         ; preds = %if.then605
  %864 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2694
  call void %864(ptr @.panic_msg.163, i64 44, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 396), !dbg !2694
  unreachable, !dbg !2694

panic612:                                         ; preds = %if.exit610
  %865 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2384
  call void %865(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 397), !dbg !2384
  unreachable, !dbg !2384

panic620:                                         ; preds = %loop.cond618
  %866 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2391
  call void %866(ptr @.panic_msg.164, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 399), !dbg !2391
  unreachable, !dbg !2391

panic682:                                         ; preds = %loop.cond679
  %867 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2434
  call void %867(ptr @.panic_msg.165, i64 10, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 424), !dbg !2434
  unreachable, !dbg !2434

panic770:                                         ; preds = %loop.exit767
  %868 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2695
  call void %868(ptr @.panic_msg.158, i64 47, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 453), !dbg !2695
  unreachable, !dbg !2695

panic776:                                         ; preds = %checkok771
  %869 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2696
  call void %869(ptr @.panic_msg.158, i64 47, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 454), !dbg !2696
  unreachable, !dbg !2696

panic866:                                         ; preds = %loop.body863
  %870 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2558
  call void %870(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 469), !dbg !2558
  unreachable, !dbg !2558

panic891:                                         ; preds = %switch.case888
  %871 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2697
  call void %871(ptr @.panic_msg.125, i64 44, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 475), !dbg !2697
  unreachable, !dbg !2697

panic934:                                         ; preds = %loop.body931
  %872 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2597
  call void %872(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 482), !dbg !2597
  unreachable, !dbg !2597

panic947:                                         ; preds = %loop.body944
  %873 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2698
  call void %873(ptr @.panic_msg.125, i64 44, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 483), !dbg !2698
  unreachable, !dbg !2698

panic989:                                         ; preds = %loop.body986
  %874 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2634
  call void %874(ptr @.panic_msg.162, i64 42, ptr @.file.117, i64 20, ptr @.func.153, i64 11, i32 493), !dbg !2634
  unreachable, !dbg !2634
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa(ptr %0, ptr %1, i64 %2, i64 %3, i8 zeroext %4, i32 %5) #0 !dbg !2699 {
entry:
  %self = alloca ptr, align 8
  %value = alloca i128, align 8
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i64, align 8
  %past_10 = alloca i8, align 1
  %digit = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !2703
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !2703
  br i1 %7, label %panic, label %checkok, !dbg !2703

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2704, metadata !DIExpression()), !dbg !2705
  store i64 %2, ptr %value, align 8
  %ptradd = getelementptr inbounds i8, ptr %value, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2706, metadata !DIExpression()), !dbg !2707
  store i8 %4, ptr %negative, align 1
  call void @llvm.dbg.declare(metadata ptr %negative, metadata !2708, metadata !DIExpression()), !dbg !2709
  store i32 %5, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2710, metadata !DIExpression()), !dbg !2711
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !2712, metadata !DIExpression()), !dbg !2716
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2717, metadata !DIExpression()), !dbg !2718
  store i64 0, ptr %len, align 8, !dbg !2718
  %8 = load i128, ptr %value, align 8, !dbg !2719
  %not = icmp eq i128 %8, 0, !dbg !2719
  br i1 %not, label %if.then, label %if.exit, !dbg !2719

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2720
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2720
  %10 = load i32, ptr %ptradd1, align 8, !dbg !2721
  %11 = and i32 %10, -17, !dbg !2721
  store i32 %11, ptr %ptradd1, align 8, !dbg !2721
  br label %if.exit, !dbg !2721

if.exit:                                          ; preds = %if.then, %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !2722
  %ptradd2 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2722
  %13 = load i32, ptr %ptradd2, align 8, !dbg !2722
  %lshrl = lshr i32 %13, 6, !dbg !2722
  %14 = and i32 1, %lshrl, !dbg !2722
  %trunc = trunc i32 %14 to i8, !dbg !2722
  %15 = trunc i8 %trunc to i1, !dbg !2722
  %not3 = xor i1 %15, true, !dbg !2722
  br i1 %not3, label %or.phi, label %or.rhs, !dbg !2722

or.rhs:                                           ; preds = %if.exit
  %16 = load i128, ptr %value, align 8, !dbg !2723
  %intbool = icmp ne i128 %16, 0, !dbg !2723
  br label %or.phi, !dbg !2723

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %intbool, %or.rhs ], !dbg !2723
  br i1 %val, label %if.then4, label %if.exit31, !dbg !2723

if.then4:                                         ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %past_10, metadata !2724, metadata !DIExpression()), !dbg !2726
  %17 = load ptr, ptr %self, align 8, !dbg !2727
  %ptradd5 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2727
  %18 = load i32, ptr %ptradd5, align 8, !dbg !2727
  %lshrl6 = lshr i32 %18, 5, !dbg !2727
  %19 = and i32 1, %lshrl6, !dbg !2727
  %trunc7 = trunc i32 %19 to i8, !dbg !2727
  %20 = trunc i8 %trunc7 to i1, !dbg !2727
  %ternary = select i1 %20, i8 65, i8 97, !dbg !2728
  %zext = zext i8 %ternary to i32, !dbg !2728
  %sub = sub i32 %zext, 10, !dbg !2727
  %trunc8 = trunc i32 %sub to i8, !dbg !2727
  store i8 %trunc8, ptr %past_10, align 1, !dbg !2727
  br label %loop.body, !dbg !2729

loop.cond:                                        ; preds = %checkok30
  %21 = load i128, ptr %value, align 8, !dbg !2730
  %intbool9 = icmp ne i128 %21, 0, !dbg !2730
  br i1 %intbool9, label %loop.body, label %loop.exit, !dbg !2730

loop.body:                                        ; preds = %loop.cond, %if.then4
  %22 = load i64, ptr %len, align 8, !dbg !2732
  %le = icmp ule i64 256, %22, !dbg !2732
  br i1 %le, label %if.then10, label %if.exit11, !dbg !2732

if.then10:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2734

if.exit11:                                        ; preds = %loop.body
  call void @llvm.dbg.declare(metadata ptr %digit, metadata !2735, metadata !DIExpression()), !dbg !2736
  %23 = load i128, ptr %value, align 8, !dbg !2737
  %24 = load i32, ptr %base, align 4, !dbg !2738
  %zext12 = zext i32 %24 to i128, !dbg !2738
  %zero = icmp eq i128 %zext12, 0, !dbg !2739
  %25 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2739
  br i1 %25, label %panic13, label %checkok14, !dbg !2739

checkok14:                                        ; preds = %if.exit11
  %umod = urem i128 %23, %zext12, !dbg !2739
  %trunc15 = trunc i128 %umod to i8, !dbg !2739
  store i8 %trunc15, ptr %digit, align 1, !dbg !2739
  %26 = load i64, ptr %len, align 8, !dbg !2740
  %add = add i64 %26, 1, !dbg !2740
  store i64 %add, ptr %len, align 8, !dbg !2740
  %ge = icmp uge i64 %26, 256, !dbg !2740
  %27 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2740
  br i1 %27, label %panic16, label %checkok19, !dbg !2740

checkok19:                                        ; preds = %checkok14
  %ptradd20 = getelementptr inbounds i8, ptr %buf, i64 %26, !dbg !2740
  %28 = load i8, ptr %digit, align 1, !dbg !2741
  %zext21 = zext i8 %28 to i32, !dbg !2741
  %29 = load i8, ptr %digit, align 1, !dbg !2742
  %zext22 = zext i8 %29 to i32, !dbg !2742
  %gt = icmp ugt i32 10, %zext22, !dbg !2742
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !2742

cond.lhs:                                         ; preds = %checkok19
  br label %cond.phi, !dbg !2743

cond.rhs:                                         ; preds = %checkok19
  %30 = load i8, ptr %past_10, align 1, !dbg !2744
  br label %cond.phi, !dbg !2744

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val23 = phi i8 [ 48, %cond.lhs ], [ %30, %cond.rhs ], !dbg !2744
  %zext24 = zext i8 %val23 to i32, !dbg !2744
  %add25 = add i32 %zext21, %zext24, !dbg !2741
  %trunc26 = trunc i32 %add25 to i8, !dbg !2741
  store i8 %trunc26, ptr %ptradd20, align 1, !dbg !2741
  %31 = load i128, ptr %value, align 8, !dbg !2745
  %32 = load i32, ptr %base, align 4, !dbg !2746
  %zext27 = zext i32 %32 to i128, !dbg !2746
  %zero28 = icmp eq i128 %zext27, 0, !dbg !2745
  %33 = call i1 @llvm.expect.i1(i1 %zero28, i1 false), !dbg !2745
  br i1 %33, label %panic29, label %checkok30, !dbg !2745

checkok30:                                        ; preds = %cond.phi
  %udiv = udiv i128 %31, %zext27, !dbg !2745
  store i128 %udiv, ptr %value, align 8, !dbg !2745
  br label %loop.cond, !dbg !2745

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit31, !dbg !2745

if.exit31:                                        ; preds = %loop.exit, %or.phi
  %34 = insertvalue %"char[]" undef, ptr %buf, 0, !dbg !2747
  %35 = insertvalue %"char[]" %34, i64 256, 1, !dbg !2747
  %36 = load ptr, ptr %self, align 8
  %37 = load i64, ptr %len, align 8
  %38 = load i8, ptr %negative, align 1
  %39 = load i32, ptr %base, align 4
  %40 = call i64 @std.io.Formatter.ntoa_format(ptr %retparam, ptr %36, ptr %buf, i64 256, i64 %37, i8 zeroext %38, i32 %39), !dbg !2748
  %not_err = icmp eq i64 %40, 0, !dbg !2748
  %41 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2748
  br i1 %41, label %after_check, label %assign_optional, !dbg !2748

assign_optional:                                  ; preds = %if.exit31
  store i64 %40, ptr %reterr, align 8, !dbg !2748
  br label %err_retblock, !dbg !2748

after_check:                                      ; preds = %if.exit31
  %42 = load i64, ptr %retparam, align 8, !dbg !2748
  store i64 %42, ptr %0, align 8, !dbg !2748
  ret i64 0, !dbg !2748

err_retblock:                                     ; preds = %assign_optional
  %43 = load i64, ptr %reterr, align 8, !dbg !2748
  ret i64 %43, !dbg !2748

panic:                                            ; preds = %entry
  %44 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2705
  call void %44(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.168, i64 4, i32 516), !dbg !2705
  unreachable, !dbg !2705

panic13:                                          ; preds = %if.exit11
  %45 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2739
  call void %45(ptr @.panic_msg.165, i64 10, ptr @.file.117, i64 20, ptr @.func.168, i64 4, i32 531), !dbg !2739
  unreachable, !dbg !2739

panic16:                                          ; preds = %checkok14
  store i64 256, ptr %taddr, align 8
  %46 = insertvalue %any undef, ptr %taddr, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr17, align 8
  %48 = insertvalue %any undef, ptr %taddr17, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %47, ptr %varargslots, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %49, ptr %ptradd18, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.168, i64 4, i32 532, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2740
  unreachable, !dbg !2740

panic29:                                          ; preds = %cond.phi
  %51 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2745
  call void %51(ptr @.panic_msg.166, i64 17, ptr @.file.117, i64 20, ptr @.func.168, i64 4, i32 533), !dbg !2745
  unreachable, !dbg !2745
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_format(ptr %0, ptr %1, ptr %2, i64 %3, i64 %4, i8 zeroext %5, i32 %6) #0 !dbg !2749 {
entry:
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %switch = alloca i32, align 4
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %varargslots111 = alloca [2 x %any], align 16
  %indirectarg114 = alloca %"any[]", align 8
  %taddr125 = alloca i64, align 8
  %taddr126 = alloca i64, align 8
  %varargslots127 = alloca [2 x %any], align 16
  %indirectarg130 = alloca %"any[]", align 8
  %taddr142 = alloca i64, align 8
  %taddr143 = alloca i64, align 8
  %varargslots144 = alloca [2 x %any], align 16
  %indirectarg147 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg155 = alloca %"any[]", align 8
  %taddr160 = alloca i64, align 8
  %taddr161 = alloca i64, align 8
  %varargslots162 = alloca [2 x %any], align 16
  %indirectarg165 = alloca %"any[]", align 8
  %switch170 = alloca i8, align 1
  %taddr182 = alloca i64, align 8
  %taddr183 = alloca i64, align 8
  %varargslots184 = alloca [2 x %any], align 16
  %indirectarg187 = alloca %"any[]", align 8
  %taddr203 = alloca i64, align 8
  %taddr204 = alloca i64, align 8
  %varargslots205 = alloca [2 x %any], align 16
  %indirectarg208 = alloca %"any[]", align 8
  %taddr225 = alloca i64, align 8
  %taddr226 = alloca i64, align 8
  %varargslots227 = alloca [2 x %any], align 16
  %indirectarg230 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %taddr238 = alloca i64, align 8
  %taddr239 = alloca i64, align 8
  %varargslots240 = alloca [2 x %any], align 16
  %indirectarg243 = alloca %"any[]", align 8
  %taddr249 = alloca i64, align 8
  %taddr250 = alloca i64, align 8
  %varargslots251 = alloca [2 x %any], align 16
  %indirectarg254 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %7 = icmp eq ptr %1, null, !dbg !2752
  %8 = call i1 @llvm.expect.i1(i1 %7, i1 false), !dbg !2752
  br i1 %8, label %panic, label %checkok, !dbg !2752

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2753, metadata !DIExpression()), !dbg !2754
  store ptr %2, ptr %buf, align 8
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !2755, metadata !DIExpression()), !dbg !2756
  store i64 %4, ptr %len, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2757, metadata !DIExpression()), !dbg !2758
  store i8 %5, ptr %negative, align 1
  call void @llvm.dbg.declare(metadata ptr %negative, metadata !2759, metadata !DIExpression()), !dbg !2760
  store i32 %6, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2761, metadata !DIExpression()), !dbg !2762
  %9 = load ptr, ptr %self, align 8, !dbg !2763
  %ptradd1 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2763
  %10 = load i32, ptr %ptradd1, align 8, !dbg !2763
  %lshrl = lshr i32 %10, 1, !dbg !2763
  %11 = and i32 1, %lshrl, !dbg !2763
  %trunc = trunc i32 %11 to i8, !dbg !2763
  %12 = trunc i8 %trunc to i1, !dbg !2763
  %not = xor i1 %12, true, !dbg !2763
  br i1 %not, label %if.then, label %if.exit62, !dbg !2763

if.then:                                          ; preds = %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !2764
  %ptradd2 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2764
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 4, !dbg !2764
  %14 = load i32, ptr %ptradd3, align 4, !dbg !2764
  %intbool = icmp ne i32 %14, 0, !dbg !2764
  br i1 %intbool, label %and.rhs, label %and.phi, !dbg !2764

and.rhs:                                          ; preds = %if.then
  %15 = load ptr, ptr %self, align 8, !dbg !2766
  %ptradd4 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !2766
  %16 = load i32, ptr %ptradd4, align 8, !dbg !2766
  %17 = and i32 1, %16, !dbg !2766
  %trunc5 = trunc i32 %17 to i8, !dbg !2766
  %18 = trunc i8 %trunc5 to i1, !dbg !2766
  br label %and.phi, !dbg !2766

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %18, %and.rhs ], !dbg !2766
  br i1 %val, label %and.rhs6, label %and.phi17, !dbg !2766

and.rhs6:                                         ; preds = %and.phi
  %19 = load i8, ptr %negative, align 1, !dbg !2767
  %20 = trunc i8 %19 to i1, !dbg !2767
  br i1 %20, label %or.phi, label %or.rhs, !dbg !2767

or.rhs:                                           ; preds = %and.rhs6
  %21 = load ptr, ptr %self, align 8, !dbg !2768
  %ptradd7 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !2768
  %22 = load i32, ptr %ptradd7, align 8, !dbg !2768
  %lshrl8 = lshr i32 %22, 2, !dbg !2768
  %23 = and i32 1, %lshrl8, !dbg !2768
  %trunc9 = trunc i32 %23 to i8, !dbg !2768
  %24 = trunc i8 %trunc9 to i1, !dbg !2768
  br label %or.phi, !dbg !2768

or.phi:                                           ; preds = %or.rhs, %and.rhs6
  %val10 = phi i1 [ true, %and.rhs6 ], [ %24, %or.rhs ], !dbg !2768
  br i1 %val10, label %or.phi15, label %or.rhs11, !dbg !2768

or.rhs11:                                         ; preds = %or.phi
  %25 = load ptr, ptr %self, align 8, !dbg !2769
  %ptradd12 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !2769
  %26 = load i32, ptr %ptradd12, align 8, !dbg !2769
  %lshrl13 = lshr i32 %26, 3, !dbg !2769
  %27 = and i32 1, %lshrl13, !dbg !2769
  %trunc14 = trunc i32 %27 to i8, !dbg !2769
  %28 = trunc i8 %trunc14 to i1, !dbg !2769
  br label %or.phi15, !dbg !2769

or.phi15:                                         ; preds = %or.rhs11, %or.phi
  %val16 = phi i1 [ true, %or.phi ], [ %28, %or.rhs11 ], !dbg !2769
  br label %and.phi17, !dbg !2769

and.phi17:                                        ; preds = %or.phi15, %and.phi
  %val18 = phi i1 [ false, %and.phi ], [ %val16, %or.phi15 ], !dbg !2769
  br i1 %val18, label %if.then19, label %if.exit, !dbg !2769

if.then19:                                        ; preds = %and.phi17
  %29 = load ptr, ptr %self, align 8, !dbg !2770
  %ptradd20 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !2770
  %ptradd21 = getelementptr inbounds i8, ptr %ptradd20, i64 4, !dbg !2770
  %30 = load i32, ptr %ptradd21, align 4, !dbg !2770
  %sub = sub i32 %30, 1, !dbg !2770
  store i32 %sub, ptr %ptradd21, align 4, !dbg !2770
  br label %if.exit, !dbg !2770

if.exit:                                          ; preds = %if.then19, %and.phi17
  br label %loop.cond, !dbg !2771

loop.cond:                                        ; preds = %checkok32, %if.exit
  %31 = load i64, ptr %len, align 8, !dbg !2772
  %32 = load ptr, ptr %self, align 8, !dbg !2774
  %ptradd22 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !2774
  %ptradd23 = getelementptr inbounds i8, ptr %ptradd22, i64 8, !dbg !2774
  %33 = load i32, ptr %ptradd23, align 8, !dbg !2774
  %zext = zext i32 %33 to i64, !dbg !2774
  %lt = icmp ult i64 %31, %zext, !dbg !2772
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2772

loop.body:                                        ; preds = %loop.cond
  %34 = load i64, ptr %len, align 8, !dbg !2775
  %ptradd24 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2777
  %35 = load i64, ptr %ptradd24, align 8, !dbg !2777
  %ge = icmp uge i64 %34, %35, !dbg !2775
  br i1 %ge, label %if.then25, label %if.exit26, !dbg !2775

if.then25:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2778

if.exit26:                                        ; preds = %loop.body
  %ptradd27 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2779
  %36 = load i64, ptr %ptradd27, align 8, !dbg !2779
  %37 = load ptr, ptr %buf, align 8, !dbg !2779
  %38 = load i64, ptr %len, align 8, !dbg !2780
  %add = add i64 %38, 1, !dbg !2780
  store i64 %add, ptr %len, align 8, !dbg !2780
  %ge28 = icmp uge i64 %38, %36, !dbg !2780
  %39 = call i1 @llvm.expect.i1(i1 %ge28, i1 false), !dbg !2780
  br i1 %39, label %panic29, label %checkok32, !dbg !2780

checkok32:                                        ; preds = %if.exit26
  %ptradd33 = getelementptr inbounds i8, ptr %37, i64 %38, !dbg !2780
  store i8 48, ptr %ptradd33, align 1, !dbg !2781
  br label %loop.cond, !dbg !2781

loop.exit:                                        ; preds = %loop.cond
  br label %loop.cond34, !dbg !2782

loop.cond34:                                      ; preds = %checkok59, %loop.exit
  %40 = load ptr, ptr %self, align 8, !dbg !2783
  %ptradd35 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !2783
  %41 = load i32, ptr %ptradd35, align 8, !dbg !2783
  %42 = and i32 1, %41, !dbg !2783
  %trunc36 = trunc i32 %42 to i8, !dbg !2783
  %43 = trunc i8 %trunc36 to i1, !dbg !2783
  br i1 %43, label %and.rhs37, label %and.phi42, !dbg !2783

and.rhs37:                                        ; preds = %loop.cond34
  %44 = load i64, ptr %len, align 8, !dbg !2785
  %45 = load ptr, ptr %self, align 8, !dbg !2786
  %ptradd38 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !2786
  %ptradd39 = getelementptr inbounds i8, ptr %ptradd38, i64 4, !dbg !2786
  %46 = load i32, ptr %ptradd39, align 4, !dbg !2786
  %zext40 = zext i32 %46 to i64, !dbg !2786
  %lt41 = icmp ult i64 %44, %zext40, !dbg !2785
  br label %and.phi42, !dbg !2785

and.phi42:                                        ; preds = %and.rhs37, %loop.cond34
  %val43 = phi i1 [ false, %loop.cond34 ], [ %lt41, %and.rhs37 ], !dbg !2785
  br i1 %val43, label %loop.body44, label %loop.exit61, !dbg !2785

loop.body44:                                      ; preds = %and.phi42
  %47 = load i64, ptr %len, align 8, !dbg !2787
  %ptradd45 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2789
  %48 = load i64, ptr %ptradd45, align 8, !dbg !2789
  %ge46 = icmp uge i64 %47, %48, !dbg !2787
  br i1 %ge46, label %if.then47, label %if.exit48, !dbg !2787

if.then47:                                        ; preds = %loop.body44
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2790

if.exit48:                                        ; preds = %loop.body44
  %ptradd49 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2791
  %49 = load i64, ptr %ptradd49, align 8, !dbg !2791
  %50 = load ptr, ptr %buf, align 8, !dbg !2791
  %51 = load i64, ptr %len, align 8, !dbg !2792
  %add50 = add i64 %51, 1, !dbg !2792
  store i64 %add50, ptr %len, align 8, !dbg !2792
  %ge51 = icmp uge i64 %51, %49, !dbg !2792
  %52 = call i1 @llvm.expect.i1(i1 %ge51, i1 false), !dbg !2792
  br i1 %52, label %panic52, label %checkok59, !dbg !2792

checkok59:                                        ; preds = %if.exit48
  %ptradd60 = getelementptr inbounds i8, ptr %50, i64 %51, !dbg !2792
  store i8 48, ptr %ptradd60, align 1, !dbg !2793
  br label %loop.cond34, !dbg !2793

loop.exit61:                                      ; preds = %and.phi42
  br label %if.exit62, !dbg !2793

if.exit62:                                        ; preds = %loop.exit61, %checkok
  %53 = load ptr, ptr %self, align 8, !dbg !2794
  %ptradd63 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !2794
  %54 = load i32, ptr %ptradd63, align 8, !dbg !2794
  %lshrl64 = lshr i32 %54, 4, !dbg !2794
  %55 = and i32 1, %lshrl64, !dbg !2794
  %trunc65 = trunc i32 %55 to i8, !dbg !2794
  %56 = trunc i8 %trunc65 to i1, !dbg !2794
  br i1 %56, label %and.rhs66, label %and.phi67, !dbg !2794

and.rhs66:                                        ; preds = %if.exit62
  %57 = load i32, ptr %base, align 4, !dbg !2795
  %neq = icmp ne i32 10, %57, !dbg !2795
  br label %and.phi67, !dbg !2795

and.phi67:                                        ; preds = %and.rhs66, %if.exit62
  %val68 = phi i1 [ false, %if.exit62 ], [ %neq, %and.rhs66 ], !dbg !2795
  br i1 %val68, label %if.then69, label %if.exit169, !dbg !2795

if.then69:                                        ; preds = %and.phi67
  %58 = load ptr, ptr %self, align 8, !dbg !2796
  %ptradd70 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !2796
  %59 = load i32, ptr %ptradd70, align 8, !dbg !2796
  %lshrl71 = lshr i32 %59, 6, !dbg !2796
  %60 = and i32 1, %lshrl71, !dbg !2796
  %trunc72 = trunc i32 %60 to i8, !dbg !2796
  %61 = trunc i8 %trunc72 to i1, !dbg !2796
  %not73 = xor i1 %61, true, !dbg !2796
  br i1 %not73, label %and.rhs74, label %and.phi76, !dbg !2796

and.rhs74:                                        ; preds = %if.then69
  %62 = load i64, ptr %len, align 8, !dbg !2798
  %intbool75 = icmp ne i64 %62, 0, !dbg !2798
  br label %and.phi76, !dbg !2798

and.phi76:                                        ; preds = %and.rhs74, %if.then69
  %val77 = phi i1 [ false, %if.then69 ], [ %intbool75, %and.rhs74 ], !dbg !2798
  br i1 %val77, label %and.rhs78, label %and.phi82, !dbg !2798

and.rhs78:                                        ; preds = %and.phi76
  %63 = load i64, ptr %len, align 8, !dbg !2799
  %64 = load ptr, ptr %self, align 8, !dbg !2800
  %ptradd79 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !2800
  %ptradd80 = getelementptr inbounds i8, ptr %ptradd79, i64 8, !dbg !2800
  %65 = load i32, ptr %ptradd80, align 8, !dbg !2800
  %zext81 = zext i32 %65 to i64, !dbg !2800
  %eq = icmp eq i64 %63, %zext81, !dbg !2799
  br label %and.phi82, !dbg !2799

and.phi82:                                        ; preds = %and.rhs78, %and.phi76
  %val83 = phi i1 [ false, %and.phi76 ], [ %eq, %and.rhs78 ], !dbg !2799
  br i1 %val83, label %and.rhs84, label %and.phi89, !dbg !2799

and.rhs84:                                        ; preds = %and.phi82
  %66 = load i64, ptr %len, align 8, !dbg !2801
  %67 = load ptr, ptr %self, align 8, !dbg !2802
  %ptradd85 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !2802
  %ptradd86 = getelementptr inbounds i8, ptr %ptradd85, i64 4, !dbg !2802
  %68 = load i32, ptr %ptradd86, align 4, !dbg !2802
  %zext87 = zext i32 %68 to i64, !dbg !2802
  %eq88 = icmp eq i64 %66, %zext87, !dbg !2801
  br label %and.phi89, !dbg !2801

and.phi89:                                        ; preds = %and.rhs84, %and.phi82
  %val90 = phi i1 [ false, %and.phi82 ], [ %eq88, %and.rhs84 ], !dbg !2801
  br i1 %val90, label %if.then91, label %if.exit97, !dbg !2801

if.then91:                                        ; preds = %and.phi89
  %69 = load i64, ptr %len, align 8, !dbg !2803
  %sub92 = sub i64 %69, 1, !dbg !2803
  store i64 %sub92, ptr %len, align 8, !dbg !2803
  %70 = load i64, ptr %len, align 8, !dbg !2805
  %intbool93 = icmp ne i64 %70, 0, !dbg !2805
  br i1 %intbool93, label %if.then94, label %if.exit96, !dbg !2805

if.then94:                                        ; preds = %if.then91
  %71 = load i64, ptr %len, align 8, !dbg !2806
  %sub95 = sub i64 %71, 1, !dbg !2806
  store i64 %sub95, ptr %len, align 8, !dbg !2806
  br label %if.exit96, !dbg !2806

if.exit96:                                        ; preds = %if.then94, %if.then91
  br label %if.exit97, !dbg !2806

if.exit97:                                        ; preds = %if.exit96, %and.phi89
  %72 = load i32, ptr %base, align 4, !dbg !2807
  %neq98 = icmp ne i32 10, %72, !dbg !2807
  br i1 %neq98, label %if.then99, label %if.exit168, !dbg !2807

if.then99:                                        ; preds = %if.exit97
  %73 = load i64, ptr %len, align 8, !dbg !2808
  %add100 = add i64 %73, 1, !dbg !2808
  %ptradd101 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2810
  %74 = load i64, ptr %ptradd101, align 8, !dbg !2810
  %ge102 = icmp sge i64 %add100, %74, !dbg !2808
  %check = icmp sge i64 %74, 0, !dbg !2808
  %siui-ge = and i1 %check, %ge102, !dbg !2808
  br i1 %siui-ge, label %if.then103, label %if.exit104, !dbg !2808

if.then103:                                       ; preds = %if.then99
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2811

if.exit104:                                       ; preds = %if.then99
  %75 = load i32, ptr %base, align 4
  store i32 %75, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit104
  %76 = load i32, ptr %switch, align 4
  switch i32 %76, label %switch.default [
    i32 16, label %switch.case
    i32 8, label %switch.case120
    i32 2, label %switch.case137
  ]

switch.case:                                      ; preds = %switch.entry
  %ptradd105 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2812
  %77 = load i64, ptr %ptradd105, align 8, !dbg !2812
  %78 = load ptr, ptr %buf, align 8, !dbg !2812
  %79 = load i64, ptr %len, align 8, !dbg !2815
  %add106 = add i64 %79, 1, !dbg !2815
  store i64 %add106, ptr %len, align 8, !dbg !2815
  %ge107 = icmp uge i64 %79, %77, !dbg !2815
  %80 = call i1 @llvm.expect.i1(i1 %ge107, i1 false), !dbg !2815
  br i1 %80, label %panic108, label %checkok115, !dbg !2815

checkok115:                                       ; preds = %switch.case
  %ptradd116 = getelementptr inbounds i8, ptr %78, i64 %79, !dbg !2815
  %81 = load ptr, ptr %self, align 8, !dbg !2816
  %ptradd117 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !2816
  %82 = load i32, ptr %ptradd117, align 8, !dbg !2816
  %lshrl118 = lshr i32 %82, 5, !dbg !2816
  %83 = and i32 1, %lshrl118, !dbg !2816
  %trunc119 = trunc i32 %83 to i8, !dbg !2816
  %84 = trunc i8 %trunc119 to i1, !dbg !2816
  %ternary = select i1 %84, i8 88, i8 120, !dbg !2817
  store i8 %ternary, ptr %ptradd116, align 1, !dbg !2817
  br label %switch.exit, !dbg !2817

switch.case120:                                   ; preds = %switch.entry
  %ptradd121 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2818
  %85 = load i64, ptr %ptradd121, align 8, !dbg !2818
  %86 = load ptr, ptr %buf, align 8, !dbg !2818
  %87 = load i64, ptr %len, align 8, !dbg !2820
  %add122 = add i64 %87, 1, !dbg !2820
  store i64 %add122, ptr %len, align 8, !dbg !2820
  %ge123 = icmp uge i64 %87, %85, !dbg !2820
  %88 = call i1 @llvm.expect.i1(i1 %ge123, i1 false), !dbg !2820
  br i1 %88, label %panic124, label %checkok131, !dbg !2820

checkok131:                                       ; preds = %switch.case120
  %ptradd132 = getelementptr inbounds i8, ptr %86, i64 %87, !dbg !2820
  %89 = load ptr, ptr %self, align 8, !dbg !2821
  %ptradd133 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !2821
  %90 = load i32, ptr %ptradd133, align 8, !dbg !2821
  %lshrl134 = lshr i32 %90, 5, !dbg !2821
  %91 = and i32 1, %lshrl134, !dbg !2821
  %trunc135 = trunc i32 %91 to i8, !dbg !2821
  %92 = trunc i8 %trunc135 to i1, !dbg !2821
  %ternary136 = select i1 %92, i8 79, i8 111, !dbg !2822
  store i8 %ternary136, ptr %ptradd132, align 1, !dbg !2822
  br label %switch.exit, !dbg !2822

switch.case137:                                   ; preds = %switch.entry
  %ptradd138 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2823
  %93 = load i64, ptr %ptradd138, align 8, !dbg !2823
  %94 = load ptr, ptr %buf, align 8, !dbg !2823
  %95 = load i64, ptr %len, align 8, !dbg !2825
  %add139 = add i64 %95, 1, !dbg !2825
  store i64 %add139, ptr %len, align 8, !dbg !2825
  %ge140 = icmp uge i64 %95, %93, !dbg !2825
  %96 = call i1 @llvm.expect.i1(i1 %ge140, i1 false), !dbg !2825
  br i1 %96, label %panic141, label %checkok148, !dbg !2825

checkok148:                                       ; preds = %switch.case137
  %ptradd149 = getelementptr inbounds i8, ptr %94, i64 %95, !dbg !2825
  %97 = load ptr, ptr %self, align 8, !dbg !2826
  %ptradd150 = getelementptr inbounds i8, ptr %97, i64 16, !dbg !2826
  %98 = load i32, ptr %ptradd150, align 8, !dbg !2826
  %lshrl151 = lshr i32 %98, 5, !dbg !2826
  %99 = and i32 1, %lshrl151, !dbg !2826
  %trunc152 = trunc i32 %99 to i8, !dbg !2826
  %100 = trunc i8 %trunc152 to i1, !dbg !2826
  %ternary153 = select i1 %100, i8 66, i8 98, !dbg !2827
  store i8 %ternary153, ptr %ptradd149, align 1, !dbg !2827
  br label %switch.exit, !dbg !2827

switch.default:                                   ; preds = %switch.entry
  store %"char[]" { ptr @.str.170, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !2828
  %ptradd154 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2828
  %hi = load i64, ptr %ptradd154, align 8, !dbg !2828
  store %"any[]" zeroinitializer, ptr %indirectarg155, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.171, i64 20, ptr @.str.172, i64 21, i32 578, ptr byval(%"any[]") align 8 %indirectarg155), !dbg !2832
  unreachable, !dbg !2833

switch.exit:                                      ; preds = %checkok148, %checkok131, %checkok115
  %ptradd156 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2834
  %101 = load i64, ptr %ptradd156, align 8, !dbg !2834
  %102 = load ptr, ptr %buf, align 8, !dbg !2834
  %103 = load i64, ptr %len, align 8, !dbg !2835
  %add157 = add i64 %103, 1, !dbg !2835
  store i64 %add157, ptr %len, align 8, !dbg !2835
  %ge158 = icmp uge i64 %103, %101, !dbg !2835
  %104 = call i1 @llvm.expect.i1(i1 %ge158, i1 false), !dbg !2835
  br i1 %104, label %panic159, label %checkok166, !dbg !2835

checkok166:                                       ; preds = %switch.exit
  %ptradd167 = getelementptr inbounds i8, ptr %102, i64 %103, !dbg !2835
  store i8 48, ptr %ptradd167, align 1, !dbg !2836
  br label %if.exit168, !dbg !2836

if.exit168:                                       ; preds = %checkok166, %if.exit97
  br label %if.exit169, !dbg !2836

if.exit169:                                       ; preds = %if.exit168, %and.phi67
  store i8 1, ptr %switch170, align 1
  br label %switch.entry171

switch.entry171:                                  ; preds = %if.exit169
  %105 = load i8, ptr %switch170, align 1
  %106 = trunc i8 %105 to i1
  %107 = load i8, ptr %negative, align 1, !dbg !2837
  %108 = trunc i8 %107 to i1, !dbg !2837
  %eq172 = icmp eq i1 %108, %106, !dbg !2837
  br i1 %eq172, label %switch.case173, label %next_if, !dbg !2837

switch.case173:                                   ; preds = %switch.entry171
  %109 = load i64, ptr %len, align 8, !dbg !2839
  %ptradd174 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2841
  %110 = load i64, ptr %ptradd174, align 8, !dbg !2841
  %ge175 = icmp uge i64 %109, %110, !dbg !2839
  br i1 %ge175, label %if.then176, label %if.exit177, !dbg !2839

if.then176:                                       ; preds = %switch.case173
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2842

if.exit177:                                       ; preds = %switch.case173
  %ptradd178 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2843
  %111 = load i64, ptr %ptradd178, align 8, !dbg !2843
  %112 = load ptr, ptr %buf, align 8, !dbg !2843
  %113 = load i64, ptr %len, align 8, !dbg !2844
  %add179 = add i64 %113, 1, !dbg !2844
  store i64 %add179, ptr %len, align 8, !dbg !2844
  %ge180 = icmp uge i64 %113, %111, !dbg !2844
  %114 = call i1 @llvm.expect.i1(i1 %ge180, i1 false), !dbg !2844
  br i1 %114, label %panic181, label %checkok188, !dbg !2844

checkok188:                                       ; preds = %if.exit177
  %ptradd189 = getelementptr inbounds i8, ptr %112, i64 %113, !dbg !2844
  store i8 45, ptr %ptradd189, align 1, !dbg !2845
  br label %switch.exit234, !dbg !2845

next_if:                                          ; preds = %switch.entry171
  %115 = load ptr, ptr %self, align 8, !dbg !2846
  %ptradd190 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !2846
  %116 = load i32, ptr %ptradd190, align 8, !dbg !2846
  %lshrl191 = lshr i32 %116, 2, !dbg !2846
  %117 = and i32 1, %lshrl191, !dbg !2846
  %trunc192 = trunc i32 %117 to i8, !dbg !2846
  %118 = trunc i8 %trunc192 to i1, !dbg !2846
  %eq193 = icmp eq i1 %118, %106, !dbg !2846
  br i1 %eq193, label %switch.case194, label %next_if211, !dbg !2846

switch.case194:                                   ; preds = %next_if
  %119 = load i64, ptr %len, align 8, !dbg !2847
  %ptradd195 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2849
  %120 = load i64, ptr %ptradd195, align 8, !dbg !2849
  %ge196 = icmp uge i64 %119, %120, !dbg !2847
  br i1 %ge196, label %if.then197, label %if.exit198, !dbg !2847

if.then197:                                       ; preds = %switch.case194
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2850

if.exit198:                                       ; preds = %switch.case194
  %ptradd199 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2851
  %121 = load i64, ptr %ptradd199, align 8, !dbg !2851
  %122 = load ptr, ptr %buf, align 8, !dbg !2851
  %123 = load i64, ptr %len, align 8, !dbg !2852
  %add200 = add i64 %123, 1, !dbg !2852
  store i64 %add200, ptr %len, align 8, !dbg !2852
  %ge201 = icmp uge i64 %123, %121, !dbg !2852
  %124 = call i1 @llvm.expect.i1(i1 %ge201, i1 false), !dbg !2852
  br i1 %124, label %panic202, label %checkok209, !dbg !2852

checkok209:                                       ; preds = %if.exit198
  %ptradd210 = getelementptr inbounds i8, ptr %122, i64 %123, !dbg !2852
  store i8 43, ptr %ptradd210, align 1, !dbg !2853
  br label %switch.exit234, !dbg !2853

next_if211:                                       ; preds = %next_if
  %125 = load ptr, ptr %self, align 8, !dbg !2854
  %ptradd212 = getelementptr inbounds i8, ptr %125, i64 16, !dbg !2854
  %126 = load i32, ptr %ptradd212, align 8, !dbg !2854
  %lshrl213 = lshr i32 %126, 3, !dbg !2854
  %127 = and i32 1, %lshrl213, !dbg !2854
  %trunc214 = trunc i32 %127 to i8, !dbg !2854
  %128 = trunc i8 %trunc214 to i1, !dbg !2854
  %eq215 = icmp eq i1 %128, %106, !dbg !2854
  br i1 %eq215, label %switch.case216, label %next_if233, !dbg !2854

switch.case216:                                   ; preds = %next_if211
  %129 = load i64, ptr %len, align 8, !dbg !2855
  %ptradd217 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2857
  %130 = load i64, ptr %ptradd217, align 8, !dbg !2857
  %ge218 = icmp uge i64 %129, %130, !dbg !2855
  br i1 %ge218, label %if.then219, label %if.exit220, !dbg !2855

if.then219:                                       ; preds = %switch.case216
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2858

if.exit220:                                       ; preds = %switch.case216
  %ptradd221 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2859
  %131 = load i64, ptr %ptradd221, align 8, !dbg !2859
  %132 = load ptr, ptr %buf, align 8, !dbg !2859
  %133 = load i64, ptr %len, align 8, !dbg !2860
  %add222 = add i64 %133, 1, !dbg !2860
  store i64 %add222, ptr %len, align 8, !dbg !2860
  %ge223 = icmp uge i64 %133, %131, !dbg !2860
  %134 = call i1 @llvm.expect.i1(i1 %ge223, i1 false), !dbg !2860
  br i1 %134, label %panic224, label %checkok231, !dbg !2860

checkok231:                                       ; preds = %if.exit220
  %ptradd232 = getelementptr inbounds i8, ptr %132, i64 %133, !dbg !2860
  store i8 32, ptr %ptradd232, align 1, !dbg !2861
  br label %switch.exit234, !dbg !2861

next_if233:                                       ; preds = %next_if211
  br label %switch.exit234, !dbg !2861

switch.exit234:                                   ; preds = %next_if233, %checkok231, %checkok209, %checkok188
  %135 = load i64, ptr %len, align 8, !dbg !2862
  %intbool235 = icmp ne i64 %135, 0, !dbg !2862
  br i1 %intbool235, label %if.then236, label %if.exit256, !dbg !2862

if.then236:                                       ; preds = %switch.exit234
  %136 = load %"char[]", ptr %buf, align 8, !dbg !2863
  %137 = extractvalue %"char[]" %136, 0, !dbg !2863
  %138 = extractvalue %"char[]" %136, 1, !dbg !2864
  %gt = icmp ugt i64 0, %138, !dbg !2864
  %139 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2864
  br i1 %139, label %panic237, label %checkok244, !dbg !2864

checkok244:                                       ; preds = %if.then236
  %140 = load i64, ptr %len, align 8, !dbg !2865
  %add245 = add i64 0, %140, !dbg !2865
  %lt246 = icmp ult i64 %138, %add245, !dbg !2865
  %sub247 = sub i64 %add245, 1, !dbg !2865
  %141 = call i1 @llvm.expect.i1(i1 %lt246, i1 false), !dbg !2865
  br i1 %141, label %panic248, label %checkok255, !dbg !2865

checkok255:                                       ; preds = %checkok244
  %size = sub i64 %add245, 0, !dbg !2863
  %142 = insertvalue %"char[]" undef, ptr %137, 0, !dbg !2863
  %143 = insertvalue %"char[]" %142, i64 %size, 1, !dbg !2863
  %144 = load ptr, ptr %self, align 8
  %145 = call i64 @std.io.Formatter.out_reverse(ptr %retparam, ptr %144, ptr %137, i64 %size), !dbg !2866
  %not_err = icmp eq i64 %145, 0, !dbg !2866
  %146 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2866
  br i1 %146, label %after_check, label %assign_optional, !dbg !2866

assign_optional:                                  ; preds = %checkok255
  store i64 %145, ptr %error_var, align 8, !dbg !2866
  br label %guard_block, !dbg !2866

after_check:                                      ; preds = %checkok255
  br label %noerr_block, !dbg !2866

guard_block:                                      ; preds = %assign_optional
  %147 = load i64, ptr %error_var, align 8, !dbg !2866
  ret i64 %147, !dbg !2866

noerr_block:                                      ; preds = %after_check
  br label %if.exit256, !dbg !2866

if.exit256:                                       ; preds = %noerr_block, %switch.exit234
  %148 = load i64, ptr %len, align 8, !dbg !2867
  store i64 %148, ptr %0, align 8, !dbg !2867
  ret i64 0, !dbg !2867

panic:                                            ; preds = %entry
  %149 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2754
  call void %149(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 540), !dbg !2754
  unreachable, !dbg !2754

panic29:                                          ; preds = %if.exit26
  store i64 %36, ptr %taddr, align 8
  %150 = insertvalue %any undef, ptr %taddr, 0
  %151 = insertvalue %any %150, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr30, align 8
  %152 = insertvalue %any undef, ptr %taddr30, 0
  %153 = insertvalue %any %152, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %151, ptr %varargslots, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %153, ptr %ptradd31, align 16
  %154 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %154, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 549, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2780
  unreachable, !dbg !2780

panic52:                                          ; preds = %if.exit48
  store i64 %49, ptr %taddr53, align 8
  %155 = insertvalue %any undef, ptr %taddr53, 0
  %156 = insertvalue %any %155, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr54, align 8
  %157 = insertvalue %any undef, ptr %taddr54, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %156, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %158, ptr %ptradd56, align 16
  %159 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %159, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 554, ptr byval(%"any[]") align 8 %indirectarg58), !dbg !2792
  unreachable, !dbg !2792

panic108:                                         ; preds = %switch.case
  store i64 %77, ptr %taddr109, align 8
  %160 = insertvalue %any undef, ptr %taddr109, 0
  %161 = insertvalue %any %160, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr110, align 8
  %162 = insertvalue %any undef, ptr %taddr110, 0
  %163 = insertvalue %any %162, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %161, ptr %varargslots111, align 16
  %ptradd112 = getelementptr inbounds i8, ptr %varargslots111, i64 16
  store %any %163, ptr %ptradd112, align 16
  %164 = insertvalue %"any[]" undef, ptr %varargslots111, 0
  %"$$temp113" = insertvalue %"any[]" %164, i64 2, 1
  store %"any[]" %"$$temp113", ptr %indirectarg114, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 572, ptr byval(%"any[]") align 8 %indirectarg114), !dbg !2815
  unreachable, !dbg !2815

panic124:                                         ; preds = %switch.case120
  store i64 %85, ptr %taddr125, align 8
  %165 = insertvalue %any undef, ptr %taddr125, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr126, align 8
  %167 = insertvalue %any undef, ptr %taddr126, 0
  %168 = insertvalue %any %167, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %166, ptr %varargslots127, align 16
  %ptradd128 = getelementptr inbounds i8, ptr %varargslots127, i64 16
  store %any %168, ptr %ptradd128, align 16
  %169 = insertvalue %"any[]" undef, ptr %varargslots127, 0
  %"$$temp129" = insertvalue %"any[]" %169, i64 2, 1
  store %"any[]" %"$$temp129", ptr %indirectarg130, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 574, ptr byval(%"any[]") align 8 %indirectarg130), !dbg !2820
  unreachable, !dbg !2820

panic141:                                         ; preds = %switch.case137
  store i64 %93, ptr %taddr142, align 8
  %170 = insertvalue %any undef, ptr %taddr142, 0
  %171 = insertvalue %any %170, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %95, ptr %taddr143, align 8
  %172 = insertvalue %any undef, ptr %taddr143, 0
  %173 = insertvalue %any %172, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %171, ptr %varargslots144, align 16
  %ptradd145 = getelementptr inbounds i8, ptr %varargslots144, i64 16
  store %any %173, ptr %ptradd145, align 16
  %174 = insertvalue %"any[]" undef, ptr %varargslots144, 0
  %"$$temp146" = insertvalue %"any[]" %174, i64 2, 1
  store %"any[]" %"$$temp146", ptr %indirectarg147, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 576, ptr byval(%"any[]") align 8 %indirectarg147), !dbg !2825
  unreachable, !dbg !2825

panic159:                                         ; preds = %switch.exit
  store i64 %101, ptr %taddr160, align 8
  %175 = insertvalue %any undef, ptr %taddr160, 0
  %176 = insertvalue %any %175, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %103, ptr %taddr161, align 8
  %177 = insertvalue %any undef, ptr %taddr161, 0
  %178 = insertvalue %any %177, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %176, ptr %varargslots162, align 16
  %ptradd163 = getelementptr inbounds i8, ptr %varargslots162, i64 16
  store %any %178, ptr %ptradd163, align 16
  %179 = insertvalue %"any[]" undef, ptr %varargslots162, 0
  %"$$temp164" = insertvalue %"any[]" %179, i64 2, 1
  store %"any[]" %"$$temp164", ptr %indirectarg165, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 580, ptr byval(%"any[]") align 8 %indirectarg165), !dbg !2835
  unreachable, !dbg !2835

panic181:                                         ; preds = %if.exit177
  store i64 %111, ptr %taddr182, align 8
  %180 = insertvalue %any undef, ptr %taddr182, 0
  %181 = insertvalue %any %180, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %113, ptr %taddr183, align 8
  %182 = insertvalue %any undef, ptr %taddr183, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %181, ptr %varargslots184, align 16
  %ptradd185 = getelementptr inbounds i8, ptr %varargslots184, i64 16
  store %any %183, ptr %ptradd185, align 16
  %184 = insertvalue %"any[]" undef, ptr %varargslots184, 0
  %"$$temp186" = insertvalue %"any[]" %184, i64 2, 1
  store %"any[]" %"$$temp186", ptr %indirectarg187, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 588, ptr byval(%"any[]") align 8 %indirectarg187), !dbg !2844
  unreachable, !dbg !2844

panic202:                                         ; preds = %if.exit198
  store i64 %121, ptr %taddr203, align 8
  %185 = insertvalue %any undef, ptr %taddr203, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %123, ptr %taddr204, align 8
  %187 = insertvalue %any undef, ptr %taddr204, 0
  %188 = insertvalue %any %187, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %186, ptr %varargslots205, align 16
  %ptradd206 = getelementptr inbounds i8, ptr %varargslots205, i64 16
  store %any %188, ptr %ptradd206, align 16
  %189 = insertvalue %"any[]" undef, ptr %varargslots205, 0
  %"$$temp207" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp207", ptr %indirectarg208, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 591, ptr byval(%"any[]") align 8 %indirectarg208), !dbg !2852
  unreachable, !dbg !2852

panic224:                                         ; preds = %if.exit220
  store i64 %131, ptr %taddr225, align 8
  %190 = insertvalue %any undef, ptr %taddr225, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %133, ptr %taddr226, align 8
  %192 = insertvalue %any undef, ptr %taddr226, 0
  %193 = insertvalue %any %192, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %191, ptr %varargslots227, align 16
  %ptradd228 = getelementptr inbounds i8, ptr %varargslots227, i64 16
  store %any %193, ptr %ptradd228, align 16
  %194 = insertvalue %"any[]" undef, ptr %varargslots227, 0
  %"$$temp229" = insertvalue %"any[]" %194, i64 2, 1
  store %"any[]" %"$$temp229", ptr %indirectarg230, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 594, ptr byval(%"any[]") align 8 %indirectarg230), !dbg !2860
  unreachable, !dbg !2860

panic237:                                         ; preds = %if.then236
  store i64 %138, ptr %taddr238, align 8
  %195 = insertvalue %any undef, ptr %taddr238, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr239, align 8
  %197 = insertvalue %any undef, ptr %taddr239, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %196, ptr %varargslots240, align 16
  %ptradd241 = getelementptr inbounds i8, ptr %varargslots240, i64 16
  store %any %198, ptr %ptradd241, align 16
  %199 = insertvalue %"any[]" undef, ptr %varargslots240, 0
  %"$$temp242" = insertvalue %"any[]" %199, i64 2, 1
  store %"any[]" %"$$temp242", ptr %indirectarg243, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 596, ptr byval(%"any[]") align 8 %indirectarg243), !dbg !2863
  unreachable, !dbg !2863

panic248:                                         ; preds = %checkok244
  store i64 %sub247, ptr %taddr249, align 8
  %200 = insertvalue %any undef, ptr %taddr249, 0
  %201 = insertvalue %any %200, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %138, ptr %taddr250, align 8
  %202 = insertvalue %any undef, ptr %taddr250, 0
  %203 = insertvalue %any %202, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %201, ptr %varargslots251, align 16
  %ptradd252 = getelementptr inbounds i8, ptr %varargslots251, i64 16
  store %any %203, ptr %ptradd252, align 16
  %204 = insertvalue %"any[]" undef, ptr %varargslots251, 0
  %"$$temp253" = insertvalue %"any[]" %204, i64 2, 1
  store %"any[]" %"$$temp253", ptr %indirectarg254, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.117, i64 20, ptr @.func.169, i64 11, i32 596, ptr byval(%"any[]") align 8 %indirectarg254), !dbg !2863
  unreachable, !dbg !2863
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_any(ptr %0, ptr %1, i64 %2, ptr %3, i32 %4) #0 !dbg !2868 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %base = alloca i32, align 4
  %is_neg = alloca i8, align 1
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i128, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %retparam2 = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2871
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2871
  br i1 %6, label %panic, label %checkok, !dbg !2871

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2872, metadata !DIExpression()), !dbg !2873
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !2874, metadata !DIExpression()), !dbg !2875
  store i32 %4, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2876, metadata !DIExpression()), !dbg !2877
  call void @llvm.dbg.declare(metadata ptr %is_neg, metadata !2878, metadata !DIExpression()), !dbg !2879
  store i8 0, ptr %is_neg, align 1, !dbg !2879
  %lo = load i64, ptr %arg, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi = load ptr, ptr %ptradd1, align 8
  %7 = call i64 @std.io.int_from_any(ptr %retparam, i64 %lo, ptr %hi, ptr %is_neg), !dbg !2880
  %not_err = icmp eq i64 %7, 0, !dbg !2880
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2880
  br i1 %8, label %after_check, label %assign_optional, !dbg !2880

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !2880
  br label %panic_block, !dbg !2880

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2880

panic_block:                                      ; preds = %assign_optional
  %9 = insertvalue %any undef, ptr %error_var, 0, !dbg !2880
  %10 = insertvalue %any %9, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !2880
  store %any %10, ptr %varargslots, align 16
  %11 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %11, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.174, i64 36, ptr @.file.117, i64 20, ptr @.func.173, i64 8, i32 604, ptr byval(%"any[]") align 8 %indirectarg), !dbg !2880
  unreachable, !dbg !2880

noerr_block:                                      ; preds = %after_check
  %12 = load ptr, ptr %self, align 8
  %lo3 = load i64, ptr %retparam, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %retparam, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %13 = load i8, ptr %is_neg, align 1
  %14 = load i32, ptr %base, align 4
  %15 = call i64 @std.io.Formatter.ntoa(ptr %retparam2, ptr %12, i64 %lo3, i64 %hi5, i8 zeroext %13, i32 %14) #5, !dbg !2881
  %not_err6 = icmp eq i64 %15, 0, !dbg !2881
  %16 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !2881
  br i1 %16, label %after_check8, label %assign_optional7, !dbg !2881

assign_optional7:                                 ; preds = %noerr_block
  store i64 %15, ptr %reterr, align 8, !dbg !2881
  br label %err_retblock, !dbg !2881

after_check8:                                     ; preds = %noerr_block
  %17 = load i64, ptr %retparam2, align 8, !dbg !2881
  store i64 %17, ptr %0, align 8, !dbg !2881
  ret i64 0, !dbg !2881

err_retblock:                                     ; preds = %assign_optional7
  %18 = load i64, ptr %reterr, align 8, !dbg !2881
  ret i64 %18, !dbg !2881

panic:                                            ; preds = %entry
  %19 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2873
  call void %19(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.173, i64 8, i32 601), !dbg !2873
  unreachable, !dbg !2873
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_char(ptr %0, ptr %1, i64 %2, ptr %3) #0 !dbg !2882 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %len = alloca i64, align 8
  %l = alloca i32, align 4
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %c = alloca i32, align 4
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c26 = alloca i8, align 1
  %s = alloca i16, align 2
  %i = alloca i32, align 4
  %l96 = alloca i64, align 8
  %i127 = alloca i128, align 8
  %c159 = alloca i8, align 1
  %s176 = alloca i16, align 2
  %i198 = alloca i32, align 4
  %l217 = alloca i64, align 8
  %i239 = alloca i128, align 8
  %string = alloca %"char[]", align 8
  %indirectarg = alloca %"any[]", align 8
  %switch256 = alloca i8, align 1
  %error_var261 = alloca i64, align 8
  %retparam263 = alloca i64, align 8
  %error_var273 = alloca i64, align 8
  %retparam275 = alloca i64, align 8
  %error_var281 = alloca i64, align 8
  %retparam284 = alloca i64, align 8
  %error_var294 = alloca i64, align 8
  %retparam298 = alloca i64, align 8
  %error_var304 = alloca i64, align 8
  %retparam309 = alloca i64, align 8
  %error_var315 = alloca i64, align 8
  %retparam319 = alloca i64, align 8
  %error_var327 = alloca i64, align 8
  %retparam331 = alloca i64, align 8
  %error_var337 = alloca i64, align 8
  %retparam342 = alloca i64, align 8
  %error_var348 = alloca i64, align 8
  %retparam353 = alloca i64, align 8
  %error_var359 = alloca i64, align 8
  %retparam363 = alloca i64, align 8
  %error_var369 = alloca i64, align 8
  %retparam371 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !2885
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2885
  br i1 %5, label %panic, label %checkok, !dbg !2885

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2886, metadata !DIExpression()), !dbg !2887
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !2888, metadata !DIExpression()), !dbg !2889
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2890, metadata !DIExpression()), !dbg !2891
  store i64 1, ptr %len, align 8, !dbg !2892
  call void @llvm.dbg.declare(metadata ptr %l, metadata !2893, metadata !DIExpression()), !dbg !2894
  store i32 1, ptr %l, align 4, !dbg !2895
  %6 = load i64, ptr %len, align 8, !dbg !2896
  %7 = load i32, ptr %l, align 4, !dbg !2897
  %zext = zext i32 %7 to i64, !dbg !2897
  %8 = load ptr, ptr %self, align 8
  %9 = call i64 @std.io.Formatter.adjust(ptr %retparam, ptr %8, i64 %zext), !dbg !2898
  %not_err = icmp eq i64 %9, 0, !dbg !2898
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2898
  br i1 %10, label %after_check, label %assign_optional, !dbg !2898

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %error_var, align 8, !dbg !2898
  br label %guard_block, !dbg !2898

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2898

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !2898
  ret i64 %11, !dbg !2898

noerr_block:                                      ; preds = %after_check
  %12 = load i64, ptr %retparam, align 8, !dbg !2898
  %add = add i64 %6, %12, !dbg !2896
  store i64 %add, ptr %len, align 8, !dbg !2896
  call void @llvm.dbg.declare(metadata ptr %c, metadata !2899, metadata !DIExpression()), !dbg !2901
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %arg, i32 16, i1 false)
  %13 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 3) #5, !dbg !2902
  %14 = trunc i8 %13 to i1, !dbg !2902
  br i1 %14, label %or.phi, label %or.rhs, !dbg !2902

or.rhs:                                           ; preds = %noerr_block
  br label %or.phi, !dbg !2907

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ false, %or.rhs ], !dbg !2907
  br i1 %val, label %assert_ok, label %assert_fail, !dbg !2907

assert_fail:                                      ; preds = %or.phi
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2902
  call void %15(ptr @.panic_msg.130, i64 106, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 12), !dbg !2902
  unreachable, !dbg !2902

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %any_type, metadata !2908, metadata !DIExpression()), !dbg !2909
  %ptradd1 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2910
  %16 = load i64, ptr %ptradd1, align 8, !dbg !2910
  store i64 %16, ptr %any_type, align 8, !dbg !2910
  call void @llvm.dbg.declare(metadata ptr %kind, metadata !2911, metadata !DIExpression()), !dbg !2912
  %17 = load i64, ptr %any_type, align 8, !dbg !2913
  %"introspect*" = inttoptr i64 %17 to ptr, !dbg !2913
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2913
  store i8 %typeid.kind, ptr %kind, align 1, !dbg !2913
  %18 = load i8, ptr %kind, align 1, !dbg !2914
  %eq = icmp eq i8 %18, 8, !dbg !2914
  br i1 %eq, label %if.then, label %if.exit, !dbg !2914

if.then:                                          ; preds = %assert_ok
  %19 = load i64, ptr %any_type, align 8, !dbg !2915
  %"introspect*2" = inttoptr i64 %19 to ptr, !dbg !2915
  %typeid.kind3 = load i8, ptr %"introspect*2", align 8, !dbg !2915
  %eq4 = icmp eq i8 %typeid.kind3, 15, !dbg !2915
  br i1 %eq4, label %check_type_ok, label %check_next, !dbg !2915

check_next:                                       ; preds = %if.then
  %eq5 = icmp eq i8 %typeid.kind3, 19, !dbg !2915
  br i1 %eq5, label %check_type_ok, label %check_next6, !dbg !2915

check_next6:                                      ; preds = %check_next
  %eq7 = icmp eq i8 %typeid.kind3, 17, !dbg !2915
  br i1 %eq7, label %check_type_ok, label %check_next8, !dbg !2915

check_next8:                                      ; preds = %check_next6
  %eq9 = icmp eq i8 %typeid.kind3, 8, !dbg !2915
  br i1 %eq9, label %check_type_ok, label %check_next10, !dbg !2915

check_next10:                                     ; preds = %check_next8
  %eq11 = icmp eq i8 %typeid.kind3, 16, !dbg !2915
  br i1 %eq11, label %check_type_ok, label %check_next12, !dbg !2915

check_next12:                                     ; preds = %check_next10
  %eq13 = icmp eq i8 %typeid.kind3, 18, !dbg !2915
  br i1 %eq13, label %check_type_ok, label %check_next14, !dbg !2915

check_next14:                                     ; preds = %check_next12
  %eq15 = icmp eq i8 %typeid.kind3, 14, !dbg !2915
  br i1 %eq15, label %check_type_ok, label %check_next16, !dbg !2915

check_next16:                                     ; preds = %check_next14
  %eq17 = icmp eq i8 %typeid.kind3, 12, !dbg !2915
  br i1 %eq17, label %check_type_ok, label %check_next18, !dbg !2915

check_next18:                                     ; preds = %check_next16
  %20 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2915
  call void %20(ptr @.panic_msg.120, i64 49, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 20), !dbg !2915
  unreachable, !dbg !2915

check_type_ok:                                    ; preds = %check_next16, %check_next14, %check_next12, %check_next10, %check_next8, %check_next6, %check_next, %if.then
  %ptradd19 = getelementptr inbounds i8, ptr %"introspect*2", i64 32, !dbg !2915
  %typeid.inner = load i64, ptr %ptradd19, align 8, !dbg !2915
  store i64 %typeid.inner, ptr %any_type, align 8, !dbg !2915
  %21 = load i64, ptr %any_type, align 8, !dbg !2917
  %"introspect*20" = inttoptr i64 %21 to ptr, !dbg !2917
  %typeid.kind21 = load i8, ptr %"introspect*20", align 8, !dbg !2917
  store i8 %typeid.kind21, ptr %kind, align 1, !dbg !2917
  br label %if.exit, !dbg !2917

if.exit:                                          ; preds = %check_type_ok, %assert_ok
  call void @llvm.dbg.declare(metadata ptr %is_mixed_signed, metadata !2918, metadata !DIExpression()), !dbg !2919
  %22 = load i64, ptr %any_type, align 8, !dbg !2920
  %"introspect*22" = inttoptr i64 %22 to ptr, !dbg !2920
  %typeid.kind23 = load i8, ptr %"introspect*22", align 8, !dbg !2920
  %neq = icmp ne i8 3, %typeid.kind23, !dbg !2921
  %23 = zext i1 %neq to i8, !dbg !2921
  store i8 %23, ptr %is_mixed_signed, align 1, !dbg !2921
  call void @llvm.dbg.declare(metadata ptr %max, metadata !2922, metadata !DIExpression()), !dbg !2923
  store i32 -1, ptr %max, align 4, !dbg !2924
  call void @llvm.dbg.declare(metadata ptr %min, metadata !2925, metadata !DIExpression()), !dbg !2926
  store i32 0, ptr %min, align 4, !dbg !2927
  %24 = load i64, ptr %any_type, align 8
  store i64 %24, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit
  %25 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !2928

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %26 = phi i64 [ %25, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !2928
  %eq24 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %26, !dbg !2928
  br i1 %eq24, label %result_block, label %parent_type_block, !dbg !2928

parent_type_block:                                ; preds = %check_subtype
  %27 = inttoptr i64 %26 to ptr, !dbg !2928
  %ptradd25 = getelementptr inbounds i8, ptr %27, i64 8, !dbg !2928
  %typeid.parent = load i64, ptr %ptradd25, align 8, !dbg !2928
  %28 = icmp eq i64 %typeid.parent, 0, !dbg !2928
  br i1 %28, label %result_block, label %check_subtype, !dbg !2928

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %29 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !2928
  br i1 %29, label %switch.case, label %next_if, !dbg !2928

switch.case:                                      ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %c26, metadata !2930, metadata !DIExpression()), !dbg !2933
  %30 = load ptr, ptr %v, align 8, !dbg !2934
  %checknull = icmp eq ptr %30, null, !dbg !2934
  %31 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2934
  br i1 %31, label %panic27, label %checkok28, !dbg !2934

checkok28:                                        ; preds = %switch.case
  %32 = load i8, ptr %30, align 1, !dbg !2935
  store i8 %32, ptr %c26, align 1, !dbg !2935
  %33 = load i8, ptr %is_mixed_signed, align 1, !dbg !2936
  %34 = trunc i8 %33 to i1, !dbg !2936
  br i1 %34, label %and.rhs, label %and.phi, !dbg !2936

and.rhs:                                          ; preds = %checkok28
  %35 = load i8, ptr %c26, align 1, !dbg !2937
  %sext = sext i8 %35 to i32, !dbg !2937
  %lt = icmp slt i32 %sext, 0, !dbg !2937
  br label %and.phi, !dbg !2937

and.phi:                                          ; preds = %and.rhs, %checkok28
  %val29 = phi i1 [ false, %checkok28 ], [ %lt, %and.rhs ], !dbg !2937
  br i1 %val29, label %if.then30, label %if.exit31, !dbg !2937

if.then30:                                        ; preds = %and.phi
  br label %else_block, !dbg !2938

if.exit31:                                        ; preds = %and.phi
  %36 = load i8, ptr %c26, align 1, !dbg !2939
  %sext32 = sext i8 %36 to i32, !dbg !2939
  store i32 %sext32, ptr %blockret, align 4, !dbg !2939
  br label %expr_block.exit, !dbg !2939

next_if:                                          ; preds = %result_block
  br label %check_subtype33, !dbg !2940

check_subtype33:                                  ; preds = %parent_type_block35, %next_if
  %37 = phi i64 [ %25, %next_if ], [ %typeid.parent37, %parent_type_block35 ], !dbg !2940
  %eq34 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %37, !dbg !2940
  br i1 %eq34, label %result_block38, label %parent_type_block35, !dbg !2940

parent_type_block35:                              ; preds = %check_subtype33
  %38 = inttoptr i64 %37 to ptr, !dbg !2940
  %ptradd36 = getelementptr inbounds i8, ptr %38, i64 8, !dbg !2940
  %typeid.parent37 = load i64, ptr %ptradd36, align 8, !dbg !2940
  %39 = icmp eq i64 %typeid.parent37, 0, !dbg !2940
  br i1 %39, label %result_block38, label %check_subtype33, !dbg !2940

result_block38:                                   ; preds = %parent_type_block35, %check_subtype33
  %40 = phi i1 [ false, %parent_type_block35 ], [ true, %check_subtype33 ], !dbg !2940
  br i1 %40, label %switch.case39, label %next_if60, !dbg !2940

switch.case39:                                    ; preds = %result_block38
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2941, metadata !DIExpression()), !dbg !2944
  %41 = load ptr, ptr %v, align 8, !dbg !2945
  %checknull40 = icmp eq ptr %41, null, !dbg !2945
  %42 = call i1 @llvm.expect.i1(i1 %checknull40, i1 false), !dbg !2945
  br i1 %42, label %panic41, label %checkok42, !dbg !2945

checkok42:                                        ; preds = %switch.case39
  %43 = load i16, ptr %41, align 2, !dbg !2946
  store i16 %43, ptr %s, align 2, !dbg !2946
  %44 = load i8, ptr %is_mixed_signed, align 1, !dbg !2947
  %45 = trunc i8 %44 to i1, !dbg !2947
  br i1 %45, label %and.rhs43, label %and.phi46, !dbg !2947

and.rhs43:                                        ; preds = %checkok42
  %46 = load i16, ptr %s, align 2, !dbg !2948
  %sext44 = sext i16 %46 to i32, !dbg !2948
  %lt45 = icmp slt i32 %sext44, 0, !dbg !2948
  br label %and.phi46, !dbg !2948

and.phi46:                                        ; preds = %and.rhs43, %checkok42
  %val47 = phi i1 [ false, %checkok42 ], [ %lt45, %and.rhs43 ], !dbg !2948
  br i1 %val47, label %if.then48, label %if.exit49, !dbg !2948

if.then48:                                        ; preds = %and.phi46
  br label %else_block, !dbg !2949

if.exit49:                                        ; preds = %and.phi46
  %47 = load i16, ptr %s, align 2, !dbg !2950
  %sext50 = sext i16 %47 to i32, !dbg !2950
  %48 = load i32, ptr %max, align 4, !dbg !2951
  %gt = icmp sgt i32 %sext50, %48, !dbg !2950
  %check = icmp sge i32 %48, 0, !dbg !2950
  %siui-gt = and i1 %check, %gt, !dbg !2950
  br i1 %siui-gt, label %or.phi55, label %or.rhs51, !dbg !2950

or.rhs51:                                         ; preds = %if.exit49
  %49 = load i16, ptr %s, align 2, !dbg !2952
  %sext52 = sext i16 %49 to i32, !dbg !2952
  %50 = load i32, ptr %min, align 4, !dbg !2953
  %lt53 = icmp slt i32 %sext52, %50, !dbg !2952
  %check54 = icmp slt i32 %50, 0, !dbg !2952
  %siui-lt = or i1 %check54, %lt53, !dbg !2952
  br label %or.phi55, !dbg !2952

or.phi55:                                         ; preds = %or.rhs51, %if.exit49
  %val56 = phi i1 [ true, %if.exit49 ], [ %siui-lt, %or.rhs51 ], !dbg !2952
  br i1 %val56, label %if.then57, label %if.exit58, !dbg !2952

if.then57:                                        ; preds = %or.phi55
  br label %else_block, !dbg !2954

if.exit58:                                        ; preds = %or.phi55
  %51 = load i16, ptr %s, align 2, !dbg !2955
  %sext59 = sext i16 %51 to i32, !dbg !2955
  store i32 %sext59, ptr %blockret, align 4, !dbg !2955
  br label %expr_block.exit, !dbg !2955

next_if60:                                        ; preds = %result_block38
  br label %check_subtype61, !dbg !2956

check_subtype61:                                  ; preds = %parent_type_block63, %next_if60
  %52 = phi i64 [ %25, %next_if60 ], [ %typeid.parent65, %parent_type_block63 ], !dbg !2956
  %eq62 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %52, !dbg !2956
  br i1 %eq62, label %result_block66, label %parent_type_block63, !dbg !2956

parent_type_block63:                              ; preds = %check_subtype61
  %53 = inttoptr i64 %52 to ptr, !dbg !2956
  %ptradd64 = getelementptr inbounds i8, ptr %53, i64 8, !dbg !2956
  %typeid.parent65 = load i64, ptr %ptradd64, align 8, !dbg !2956
  %54 = icmp eq i64 %typeid.parent65, 0, !dbg !2956
  br i1 %54, label %result_block66, label %check_subtype61, !dbg !2956

result_block66:                                   ; preds = %parent_type_block63, %check_subtype61
  %55 = phi i1 [ false, %parent_type_block63 ], [ true, %check_subtype61 ], !dbg !2956
  br i1 %55, label %switch.case67, label %next_if88, !dbg !2956

switch.case67:                                    ; preds = %result_block66
  call void @llvm.dbg.declare(metadata ptr %i, metadata !2957, metadata !DIExpression()), !dbg !2959
  %56 = load ptr, ptr %v, align 8, !dbg !2960
  %checknull68 = icmp eq ptr %56, null, !dbg !2960
  %57 = call i1 @llvm.expect.i1(i1 %checknull68, i1 false), !dbg !2960
  br i1 %57, label %panic69, label %checkok70, !dbg !2960

checkok70:                                        ; preds = %switch.case67
  %58 = load i32, ptr %56, align 4, !dbg !2961
  store i32 %58, ptr %i, align 4, !dbg !2961
  %59 = load i8, ptr %is_mixed_signed, align 1, !dbg !2962
  %60 = trunc i8 %59 to i1, !dbg !2962
  br i1 %60, label %and.rhs71, label %and.phi73, !dbg !2962

and.rhs71:                                        ; preds = %checkok70
  %61 = load i32, ptr %i, align 4, !dbg !2963
  %lt72 = icmp slt i32 %61, 0, !dbg !2963
  br label %and.phi73, !dbg !2963

and.phi73:                                        ; preds = %and.rhs71, %checkok70
  %val74 = phi i1 [ false, %checkok70 ], [ %lt72, %and.rhs71 ], !dbg !2963
  br i1 %val74, label %if.then75, label %if.exit76, !dbg !2963

if.then75:                                        ; preds = %and.phi73
  br label %else_block, !dbg !2964

if.exit76:                                        ; preds = %and.phi73
  %62 = load i32, ptr %i, align 4, !dbg !2965
  %63 = load i32, ptr %max, align 4, !dbg !2966
  %gt77 = icmp sgt i32 %62, %63, !dbg !2965
  %check78 = icmp sge i32 %63, 0, !dbg !2965
  %siui-gt79 = and i1 %check78, %gt77, !dbg !2965
  br i1 %siui-gt79, label %or.phi84, label %or.rhs80, !dbg !2965

or.rhs80:                                         ; preds = %if.exit76
  %64 = load i32, ptr %i, align 4, !dbg !2967
  %65 = load i32, ptr %min, align 4, !dbg !2968
  %lt81 = icmp slt i32 %64, %65, !dbg !2967
  %check82 = icmp slt i32 %65, 0, !dbg !2967
  %siui-lt83 = or i1 %check82, %lt81, !dbg !2967
  br label %or.phi84, !dbg !2967

or.phi84:                                         ; preds = %or.rhs80, %if.exit76
  %val85 = phi i1 [ true, %if.exit76 ], [ %siui-lt83, %or.rhs80 ], !dbg !2967
  br i1 %val85, label %if.then86, label %if.exit87, !dbg !2967

if.then86:                                        ; preds = %or.phi84
  br label %else_block, !dbg !2969

if.exit87:                                        ; preds = %or.phi84
  %66 = load i32, ptr %i, align 4, !dbg !2970
  store i32 %66, ptr %blockret, align 4, !dbg !2970
  br label %expr_block.exit, !dbg !2970

next_if88:                                        ; preds = %result_block66
  br label %check_subtype89, !dbg !2971

check_subtype89:                                  ; preds = %parent_type_block91, %next_if88
  %67 = phi i64 [ %25, %next_if88 ], [ %typeid.parent93, %parent_type_block91 ], !dbg !2971
  %eq90 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %67, !dbg !2971
  br i1 %eq90, label %result_block94, label %parent_type_block91, !dbg !2971

parent_type_block91:                              ; preds = %check_subtype89
  %68 = inttoptr i64 %67 to ptr, !dbg !2971
  %ptradd92 = getelementptr inbounds i8, ptr %68, i64 8, !dbg !2971
  %typeid.parent93 = load i64, ptr %ptradd92, align 8, !dbg !2971
  %69 = icmp eq i64 %typeid.parent93, 0, !dbg !2971
  br i1 %69, label %result_block94, label %check_subtype89, !dbg !2971

result_block94:                                   ; preds = %parent_type_block91, %check_subtype89
  %70 = phi i1 [ false, %parent_type_block91 ], [ true, %check_subtype89 ], !dbg !2971
  br i1 %70, label %switch.case95, label %next_if119, !dbg !2971

switch.case95:                                    ; preds = %result_block94
  call void @llvm.dbg.declare(metadata ptr %l96, metadata !2972, metadata !DIExpression()), !dbg !2974
  %71 = load ptr, ptr %v, align 8, !dbg !2975
  %checknull97 = icmp eq ptr %71, null, !dbg !2975
  %72 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !2975
  br i1 %72, label %panic98, label %checkok99, !dbg !2975

checkok99:                                        ; preds = %switch.case95
  %73 = load i64, ptr %71, align 8, !dbg !2976
  store i64 %73, ptr %l96, align 8, !dbg !2976
  %74 = load i8, ptr %is_mixed_signed, align 1, !dbg !2977
  %75 = trunc i8 %74 to i1, !dbg !2977
  br i1 %75, label %and.rhs100, label %and.phi102, !dbg !2977

and.rhs100:                                       ; preds = %checkok99
  %76 = load i64, ptr %l96, align 8, !dbg !2978
  %lt101 = icmp slt i64 %76, 0, !dbg !2978
  br label %and.phi102, !dbg !2978

and.phi102:                                       ; preds = %and.rhs100, %checkok99
  %val103 = phi i1 [ false, %checkok99 ], [ %lt101, %and.rhs100 ], !dbg !2978
  br i1 %val103, label %if.then104, label %if.exit105, !dbg !2978

if.then104:                                       ; preds = %and.phi102
  br label %else_block, !dbg !2979

if.exit105:                                       ; preds = %and.phi102
  %77 = load i64, ptr %l96, align 8, !dbg !2980
  %78 = load i32, ptr %max, align 4, !dbg !2981
  %zext106 = zext i32 %78 to i64, !dbg !2981
  %gt107 = icmp sgt i64 %77, %zext106, !dbg !2980
  %check108 = icmp sge i64 %zext106, 0, !dbg !2980
  %siui-gt109 = and i1 %check108, %gt107, !dbg !2980
  br i1 %siui-gt109, label %or.phi115, label %or.rhs110, !dbg !2980

or.rhs110:                                        ; preds = %if.exit105
  %79 = load i64, ptr %l96, align 8, !dbg !2982
  %80 = load i32, ptr %min, align 4, !dbg !2983
  %zext111 = zext i32 %80 to i64, !dbg !2983
  %lt112 = icmp slt i64 %79, %zext111, !dbg !2982
  %check113 = icmp slt i64 %zext111, 0, !dbg !2982
  %siui-lt114 = or i1 %check113, %lt112, !dbg !2982
  br label %or.phi115, !dbg !2982

or.phi115:                                        ; preds = %or.rhs110, %if.exit105
  %val116 = phi i1 [ true, %if.exit105 ], [ %siui-lt114, %or.rhs110 ], !dbg !2982
  br i1 %val116, label %if.then117, label %if.exit118, !dbg !2982

if.then117:                                       ; preds = %or.phi115
  br label %else_block, !dbg !2984

if.exit118:                                       ; preds = %or.phi115
  %81 = load i64, ptr %l96, align 8, !dbg !2985
  %trunc = trunc i64 %81 to i32, !dbg !2985
  store i32 %trunc, ptr %blockret, align 4, !dbg !2985
  br label %expr_block.exit, !dbg !2985

next_if119:                                       ; preds = %result_block94
  br label %check_subtype120, !dbg !2986

check_subtype120:                                 ; preds = %parent_type_block122, %next_if119
  %82 = phi i64 [ %25, %next_if119 ], [ %typeid.parent124, %parent_type_block122 ], !dbg !2986
  %eq121 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %82, !dbg !2986
  br i1 %eq121, label %result_block125, label %parent_type_block122, !dbg !2986

parent_type_block122:                             ; preds = %check_subtype120
  %83 = inttoptr i64 %82 to ptr, !dbg !2986
  %ptradd123 = getelementptr inbounds i8, ptr %83, i64 8, !dbg !2986
  %typeid.parent124 = load i64, ptr %ptradd123, align 8, !dbg !2986
  %84 = icmp eq i64 %typeid.parent124, 0, !dbg !2986
  br i1 %84, label %result_block125, label %check_subtype120, !dbg !2986

result_block125:                                  ; preds = %parent_type_block122, %check_subtype120
  %85 = phi i1 [ false, %parent_type_block122 ], [ true, %check_subtype120 ], !dbg !2986
  br i1 %85, label %switch.case126, label %next_if151, !dbg !2986

switch.case126:                                   ; preds = %result_block125
  call void @llvm.dbg.declare(metadata ptr %i127, metadata !2987, metadata !DIExpression()), !dbg !2990
  %86 = load ptr, ptr %v, align 8, !dbg !2991
  %checknull128 = icmp eq ptr %86, null, !dbg !2991
  %87 = call i1 @llvm.expect.i1(i1 %checknull128, i1 false), !dbg !2991
  br i1 %87, label %panic129, label %checkok130, !dbg !2991

checkok130:                                       ; preds = %switch.case126
  %88 = load i128, ptr %86, align 8, !dbg !2992
  store i128 %88, ptr %i127, align 8, !dbg !2992
  %89 = load i8, ptr %is_mixed_signed, align 1, !dbg !2993
  %90 = trunc i8 %89 to i1, !dbg !2993
  br i1 %90, label %and.rhs131, label %and.phi133, !dbg !2993

and.rhs131:                                       ; preds = %checkok130
  %91 = load i128, ptr %i127, align 8, !dbg !2994
  %lt132 = icmp slt i128 %91, 0, !dbg !2994
  br label %and.phi133, !dbg !2994

and.phi133:                                       ; preds = %and.rhs131, %checkok130
  %val134 = phi i1 [ false, %checkok130 ], [ %lt132, %and.rhs131 ], !dbg !2994
  br i1 %val134, label %if.then135, label %if.exit136, !dbg !2994

if.then135:                                       ; preds = %and.phi133
  br label %else_block, !dbg !2995

if.exit136:                                       ; preds = %and.phi133
  %92 = load i128, ptr %i127, align 8, !dbg !2996
  %93 = load i32, ptr %max, align 4, !dbg !2997
  %zext137 = zext i32 %93 to i128, !dbg !2997
  %gt138 = icmp sgt i128 %92, %zext137, !dbg !2996
  %check139 = icmp sge i128 %zext137, 0, !dbg !2996
  %siui-gt140 = and i1 %check139, %gt138, !dbg !2996
  br i1 %siui-gt140, label %or.phi146, label %or.rhs141, !dbg !2996

or.rhs141:                                        ; preds = %if.exit136
  %94 = load i128, ptr %i127, align 8, !dbg !2998
  %95 = load i32, ptr %min, align 4, !dbg !2999
  %zext142 = zext i32 %95 to i128, !dbg !2999
  %lt143 = icmp slt i128 %94, %zext142, !dbg !2998
  %check144 = icmp slt i128 %zext142, 0, !dbg !2998
  %siui-lt145 = or i1 %check144, %lt143, !dbg !2998
  br label %or.phi146, !dbg !2998

or.phi146:                                        ; preds = %or.rhs141, %if.exit136
  %val147 = phi i1 [ true, %if.exit136 ], [ %siui-lt145, %or.rhs141 ], !dbg !2998
  br i1 %val147, label %if.then148, label %if.exit149, !dbg !2998

if.then148:                                       ; preds = %or.phi146
  br label %else_block, !dbg !3000

if.exit149:                                       ; preds = %or.phi146
  %96 = load i128, ptr %i127, align 8, !dbg !3001
  %trunc150 = trunc i128 %96 to i32, !dbg !3001
  store i32 %trunc150, ptr %blockret, align 4, !dbg !3001
  br label %expr_block.exit, !dbg !3001

next_if151:                                       ; preds = %result_block125
  br label %check_subtype152, !dbg !3002

check_subtype152:                                 ; preds = %parent_type_block154, %next_if151
  %97 = phi i64 [ %25, %next_if151 ], [ %typeid.parent156, %parent_type_block154 ], !dbg !3002
  %eq153 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %97, !dbg !3002
  br i1 %eq153, label %result_block157, label %parent_type_block154, !dbg !3002

parent_type_block154:                             ; preds = %check_subtype152
  %98 = inttoptr i64 %97 to ptr, !dbg !3002
  %ptradd155 = getelementptr inbounds i8, ptr %98, i64 8, !dbg !3002
  %typeid.parent156 = load i64, ptr %ptradd155, align 8, !dbg !3002
  %99 = icmp eq i64 %typeid.parent156, 0, !dbg !3002
  br i1 %99, label %result_block157, label %check_subtype152, !dbg !3002

result_block157:                                  ; preds = %parent_type_block154, %check_subtype152
  %100 = phi i1 [ false, %parent_type_block154 ], [ true, %check_subtype152 ], !dbg !3002
  br i1 %100, label %switch.case158, label %next_if168, !dbg !3002

switch.case158:                                   ; preds = %result_block157
  call void @llvm.dbg.declare(metadata ptr %c159, metadata !3003, metadata !DIExpression()), !dbg !3005
  %101 = load ptr, ptr %v, align 8, !dbg !3006
  %checknull160 = icmp eq ptr %101, null, !dbg !3006
  %102 = call i1 @llvm.expect.i1(i1 %checknull160, i1 false), !dbg !3006
  br i1 %102, label %panic161, label %checkok162, !dbg !3006

checkok162:                                       ; preds = %switch.case158
  %103 = load i8, ptr %101, align 1, !dbg !3007
  store i8 %103, ptr %c159, align 1, !dbg !3007
  %104 = load i8, ptr %c159, align 1, !dbg !3008
  %zext163 = zext i8 %104 to i32, !dbg !3008
  %105 = load i32, ptr %max, align 4, !dbg !3009
  %gt164 = icmp ugt i32 %zext163, %105, !dbg !3008
  br i1 %gt164, label %if.then165, label %if.exit166, !dbg !3008

if.then165:                                       ; preds = %checkok162
  br label %else_block, !dbg !3010

if.exit166:                                       ; preds = %checkok162
  %106 = load i8, ptr %c159, align 1, !dbg !3011
  %zext167 = zext i8 %106 to i32, !dbg !3011
  store i32 %zext167, ptr %blockret, align 4, !dbg !3011
  br label %expr_block.exit, !dbg !3011

next_if168:                                       ; preds = %result_block157
  br label %check_subtype169, !dbg !3012

check_subtype169:                                 ; preds = %parent_type_block171, %next_if168
  %107 = phi i64 [ %25, %next_if168 ], [ %typeid.parent173, %parent_type_block171 ], !dbg !3012
  %eq170 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %107, !dbg !3012
  br i1 %eq170, label %result_block174, label %parent_type_block171, !dbg !3012

parent_type_block171:                             ; preds = %check_subtype169
  %108 = inttoptr i64 %107 to ptr, !dbg !3012
  %ptradd172 = getelementptr inbounds i8, ptr %108, i64 8, !dbg !3012
  %typeid.parent173 = load i64, ptr %ptradd172, align 8, !dbg !3012
  %109 = icmp eq i64 %typeid.parent173, 0, !dbg !3012
  br i1 %109, label %result_block174, label %check_subtype169, !dbg !3012

result_block174:                                  ; preds = %parent_type_block171, %check_subtype169
  %110 = phi i1 [ false, %parent_type_block171 ], [ true, %check_subtype169 ], !dbg !3012
  br i1 %110, label %switch.case175, label %next_if190, !dbg !3012

switch.case175:                                   ; preds = %result_block174
  call void @llvm.dbg.declare(metadata ptr %s176, metadata !3013, metadata !DIExpression()), !dbg !3016
  %111 = load ptr, ptr %v, align 8, !dbg !3017
  %checknull177 = icmp eq ptr %111, null, !dbg !3017
  %112 = call i1 @llvm.expect.i1(i1 %checknull177, i1 false), !dbg !3017
  br i1 %112, label %panic178, label %checkok179, !dbg !3017

checkok179:                                       ; preds = %switch.case175
  %113 = load i16, ptr %111, align 2, !dbg !3018
  store i16 %113, ptr %s176, align 2, !dbg !3018
  %114 = load i16, ptr %s176, align 2, !dbg !3019
  %zext180 = zext i16 %114 to i32, !dbg !3019
  %115 = load i32, ptr %max, align 4, !dbg !3020
  %gt181 = icmp ugt i32 %zext180, %115, !dbg !3019
  br i1 %gt181, label %or.phi185, label %or.rhs182, !dbg !3019

or.rhs182:                                        ; preds = %checkok179
  %116 = load i16, ptr %s176, align 2, !dbg !3021
  %zext183 = zext i16 %116 to i32, !dbg !3021
  %117 = load i32, ptr %min, align 4, !dbg !3022
  %lt184 = icmp ult i32 %zext183, %117, !dbg !3021
  br label %or.phi185, !dbg !3021

or.phi185:                                        ; preds = %or.rhs182, %checkok179
  %val186 = phi i1 [ true, %checkok179 ], [ %lt184, %or.rhs182 ], !dbg !3021
  br i1 %val186, label %if.then187, label %if.exit188, !dbg !3021

if.then187:                                       ; preds = %or.phi185
  br label %else_block, !dbg !3023

if.exit188:                                       ; preds = %or.phi185
  %118 = load i16, ptr %s176, align 2, !dbg !3024
  %zext189 = zext i16 %118 to i32, !dbg !3024
  store i32 %zext189, ptr %blockret, align 4, !dbg !3024
  br label %expr_block.exit, !dbg !3024

next_if190:                                       ; preds = %result_block174
  br label %check_subtype191, !dbg !3025

check_subtype191:                                 ; preds = %parent_type_block193, %next_if190
  %119 = phi i64 [ %25, %next_if190 ], [ %typeid.parent195, %parent_type_block193 ], !dbg !3025
  %eq192 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %119, !dbg !3025
  br i1 %eq192, label %result_block196, label %parent_type_block193, !dbg !3025

parent_type_block193:                             ; preds = %check_subtype191
  %120 = inttoptr i64 %119 to ptr, !dbg !3025
  %ptradd194 = getelementptr inbounds i8, ptr %120, i64 8, !dbg !3025
  %typeid.parent195 = load i64, ptr %ptradd194, align 8, !dbg !3025
  %121 = icmp eq i64 %typeid.parent195, 0, !dbg !3025
  br i1 %121, label %result_block196, label %check_subtype191, !dbg !3025

result_block196:                                  ; preds = %parent_type_block193, %check_subtype191
  %122 = phi i1 [ false, %parent_type_block193 ], [ true, %check_subtype191 ], !dbg !3025
  br i1 %122, label %switch.case197, label %next_if209, !dbg !3025

switch.case197:                                   ; preds = %result_block196
  call void @llvm.dbg.declare(metadata ptr %i198, metadata !3026, metadata !DIExpression()), !dbg !3028
  %123 = load ptr, ptr %v, align 8, !dbg !3029
  %checknull199 = icmp eq ptr %123, null, !dbg !3029
  %124 = call i1 @llvm.expect.i1(i1 %checknull199, i1 false), !dbg !3029
  br i1 %124, label %panic200, label %checkok201, !dbg !3029

checkok201:                                       ; preds = %switch.case197
  %125 = load i32, ptr %123, align 4, !dbg !3030
  store i32 %125, ptr %i198, align 4, !dbg !3030
  %126 = load i32, ptr %i198, align 4, !dbg !3031
  %127 = load i32, ptr %max, align 4, !dbg !3032
  %gt202 = icmp ugt i32 %126, %127, !dbg !3031
  br i1 %gt202, label %or.phi205, label %or.rhs203, !dbg !3031

or.rhs203:                                        ; preds = %checkok201
  %128 = load i32, ptr %i198, align 4, !dbg !3033
  %129 = load i32, ptr %min, align 4, !dbg !3034
  %lt204 = icmp ult i32 %128, %129, !dbg !3033
  br label %or.phi205, !dbg !3033

or.phi205:                                        ; preds = %or.rhs203, %checkok201
  %val206 = phi i1 [ true, %checkok201 ], [ %lt204, %or.rhs203 ], !dbg !3033
  br i1 %val206, label %if.then207, label %if.exit208, !dbg !3033

if.then207:                                       ; preds = %or.phi205
  br label %else_block, !dbg !3035

if.exit208:                                       ; preds = %or.phi205
  %130 = load i32, ptr %i198, align 4, !dbg !3036
  store i32 %130, ptr %blockret, align 4, !dbg !3036
  br label %expr_block.exit, !dbg !3036

next_if209:                                       ; preds = %result_block196
  br label %check_subtype210, !dbg !3037

check_subtype210:                                 ; preds = %parent_type_block212, %next_if209
  %131 = phi i64 [ %25, %next_if209 ], [ %typeid.parent214, %parent_type_block212 ], !dbg !3037
  %eq211 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %131, !dbg !3037
  br i1 %eq211, label %result_block215, label %parent_type_block212, !dbg !3037

parent_type_block212:                             ; preds = %check_subtype210
  %132 = inttoptr i64 %131 to ptr, !dbg !3037
  %ptradd213 = getelementptr inbounds i8, ptr %132, i64 8, !dbg !3037
  %typeid.parent214 = load i64, ptr %ptradd213, align 8, !dbg !3037
  %133 = icmp eq i64 %typeid.parent214, 0, !dbg !3037
  br i1 %133, label %result_block215, label %check_subtype210, !dbg !3037

result_block215:                                  ; preds = %parent_type_block212, %check_subtype210
  %134 = phi i1 [ false, %parent_type_block212 ], [ true, %check_subtype210 ], !dbg !3037
  br i1 %134, label %switch.case216, label %next_if231, !dbg !3037

switch.case216:                                   ; preds = %result_block215
  call void @llvm.dbg.declare(metadata ptr %l217, metadata !3038, metadata !DIExpression()), !dbg !3040
  %135 = load ptr, ptr %v, align 8, !dbg !3041
  %checknull218 = icmp eq ptr %135, null, !dbg !3041
  %136 = call i1 @llvm.expect.i1(i1 %checknull218, i1 false), !dbg !3041
  br i1 %136, label %panic219, label %checkok220, !dbg !3041

checkok220:                                       ; preds = %switch.case216
  %137 = load i64, ptr %135, align 8, !dbg !3042
  store i64 %137, ptr %l217, align 8, !dbg !3042
  %138 = load i64, ptr %l217, align 8, !dbg !3043
  %139 = load i32, ptr %max, align 4, !dbg !3044
  %zext221 = zext i32 %139 to i64, !dbg !3044
  %gt222 = icmp ugt i64 %138, %zext221, !dbg !3043
  br i1 %gt222, label %or.phi226, label %or.rhs223, !dbg !3043

or.rhs223:                                        ; preds = %checkok220
  %140 = load i64, ptr %l217, align 8, !dbg !3045
  %141 = load i32, ptr %min, align 4, !dbg !3046
  %zext224 = zext i32 %141 to i64, !dbg !3046
  %lt225 = icmp ult i64 %140, %zext224, !dbg !3045
  br label %or.phi226, !dbg !3045

or.phi226:                                        ; preds = %or.rhs223, %checkok220
  %val227 = phi i1 [ true, %checkok220 ], [ %lt225, %or.rhs223 ], !dbg !3045
  br i1 %val227, label %if.then228, label %if.exit229, !dbg !3045

if.then228:                                       ; preds = %or.phi226
  br label %else_block, !dbg !3047

if.exit229:                                       ; preds = %or.phi226
  %142 = load i64, ptr %l217, align 8, !dbg !3048
  %trunc230 = trunc i64 %142 to i32, !dbg !3048
  store i32 %trunc230, ptr %blockret, align 4, !dbg !3048
  br label %expr_block.exit, !dbg !3048

next_if231:                                       ; preds = %result_block215
  br label %check_subtype232, !dbg !3049

check_subtype232:                                 ; preds = %parent_type_block234, %next_if231
  %143 = phi i64 [ %25, %next_if231 ], [ %typeid.parent236, %parent_type_block234 ], !dbg !3049
  %eq233 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %143, !dbg !3049
  br i1 %eq233, label %result_block237, label %parent_type_block234, !dbg !3049

parent_type_block234:                             ; preds = %check_subtype232
  %144 = inttoptr i64 %143 to ptr, !dbg !3049
  %ptradd235 = getelementptr inbounds i8, ptr %144, i64 8, !dbg !3049
  %typeid.parent236 = load i64, ptr %ptradd235, align 8, !dbg !3049
  %145 = icmp eq i64 %typeid.parent236, 0, !dbg !3049
  br i1 %145, label %result_block237, label %check_subtype232, !dbg !3049

result_block237:                                  ; preds = %parent_type_block234, %check_subtype232
  %146 = phi i1 [ false, %parent_type_block234 ], [ true, %check_subtype232 ], !dbg !3049
  br i1 %146, label %switch.case238, label %next_if253, !dbg !3049

switch.case238:                                   ; preds = %result_block237
  call void @llvm.dbg.declare(metadata ptr %i239, metadata !3050, metadata !DIExpression()), !dbg !3052
  %147 = load ptr, ptr %v, align 8, !dbg !3053
  %checknull240 = icmp eq ptr %147, null, !dbg !3053
  %148 = call i1 @llvm.expect.i1(i1 %checknull240, i1 false), !dbg !3053
  br i1 %148, label %panic241, label %checkok242, !dbg !3053

checkok242:                                       ; preds = %switch.case238
  %149 = load i128, ptr %147, align 8, !dbg !3054
  store i128 %149, ptr %i239, align 8, !dbg !3054
  %150 = load i128, ptr %i239, align 8, !dbg !3055
  %151 = load i32, ptr %max, align 4, !dbg !3056
  %zext243 = zext i32 %151 to i128, !dbg !3056
  %gt244 = icmp ugt i128 %150, %zext243, !dbg !3055
  br i1 %gt244, label %or.phi248, label %or.rhs245, !dbg !3055

or.rhs245:                                        ; preds = %checkok242
  %152 = load i128, ptr %i239, align 8, !dbg !3057
  %153 = load i32, ptr %min, align 4, !dbg !3058
  %zext246 = zext i32 %153 to i128, !dbg !3058
  %lt247 = icmp ult i128 %152, %zext246, !dbg !3057
  br label %or.phi248, !dbg !3057

or.phi248:                                        ; preds = %or.rhs245, %checkok242
  %val249 = phi i1 [ true, %checkok242 ], [ %lt247, %or.rhs245 ], !dbg !3057
  br i1 %val249, label %if.then250, label %if.exit251, !dbg !3057

if.then250:                                       ; preds = %or.phi248
  br label %else_block, !dbg !3059

if.exit251:                                       ; preds = %or.phi248
  %154 = load i128, ptr %i239, align 8, !dbg !3060
  %trunc252 = trunc i128 %154 to i32, !dbg !3060
  store i32 %trunc252, ptr %blockret, align 4, !dbg !3060
  br label %expr_block.exit, !dbg !3060

next_if253:                                       ; preds = %result_block237
  br label %switch.default, !dbg !3060

switch.default:                                   ; preds = %next_if253
  store %"char[]" { ptr @.str.176, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3061
  %ptradd254 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3061
  %hi = load i64, ptr %ptradd254, align 8, !dbg !3061
  store %"any[]" zeroinitializer, ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.177, i64 20, ptr @.str.178, i64 18, i32 614, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3065
  unreachable, !dbg !3066

expr_block.exit:                                  ; preds = %if.exit251, %if.exit229, %if.exit208, %if.exit188, %if.exit166, %if.exit149, %if.exit118, %if.exit87, %if.exit58, %if.exit31
  %155 = load i32, ptr %blockret, align 4, !dbg !3066
  br label %phi_block, !dbg !3066

else_block:                                       ; preds = %if.then250, %if.then228, %if.then207, %if.then187, %if.then165, %if.then148, %if.then135, %if.then117, %if.then104, %if.then86, %if.then75, %if.then57, %if.then48, %if.then30
  br label %phi_block, !dbg !3067

phi_block:                                        ; preds = %else_block, %expr_block.exit
  %val255 = phi i32 [ %155, %expr_block.exit ], [ 65533, %else_block ], !dbg !3067
  store i32 %val255, ptr %c, align 4, !dbg !3067
  store i8 1, ptr %switch256, align 1
  br label %switch.entry257

switch.entry257:                                  ; preds = %phi_block
  %156 = load i8, ptr %switch256, align 1
  %157 = trunc i8 %156 to i1
  %158 = load i32, ptr %c, align 4, !dbg !3068
  %lt258 = icmp ult i32 %158, 127, !dbg !3068
  %eq259 = icmp eq i1 %lt258, %157, !dbg !3068
  br i1 %eq259, label %switch.case260, label %next_if269, !dbg !3068

switch.case260:                                   ; preds = %switch.entry257
  %159 = load i32, ptr %c, align 4, !dbg !3070
  %trunc262 = trunc i32 %159 to i8, !dbg !3070
  %160 = load ptr, ptr %self, align 8
  %161 = call i64 @std.io.Formatter.out(ptr %retparam263, ptr %160, i8 zeroext %trunc262), !dbg !3072
  %not_err264 = icmp eq i64 %161, 0, !dbg !3072
  %162 = call i1 @llvm.expect.i1(i1 %not_err264, i1 true), !dbg !3072
  br i1 %162, label %after_check266, label %assign_optional265, !dbg !3072

assign_optional265:                               ; preds = %switch.case260
  store i64 %161, ptr %error_var261, align 8, !dbg !3072
  br label %guard_block267, !dbg !3072

after_check266:                                   ; preds = %switch.case260
  br label %noerr_block268, !dbg !3072

guard_block267:                                   ; preds = %assign_optional265
  %163 = load i64, ptr %error_var261, align 8, !dbg !3072
  ret i64 %163, !dbg !3072

noerr_block268:                                   ; preds = %after_check266
  br label %switch.exit, !dbg !3072

next_if269:                                       ; preds = %switch.entry257
  %164 = load i32, ptr %c, align 4, !dbg !3073
  %lt270 = icmp ult i32 %164, 2047, !dbg !3073
  %eq271 = icmp eq i1 %lt270, %157, !dbg !3073
  br i1 %eq271, label %switch.case272, label %next_if290, !dbg !3073

switch.case272:                                   ; preds = %next_if269
  %165 = load i32, ptr %c, align 4, !dbg !3074
  %lshr = lshr i32 %165, 6, !dbg !3074
  %166 = freeze i32 %lshr, !dbg !3074
  %or = or i32 192, %166, !dbg !3076
  %trunc274 = trunc i32 %or to i8, !dbg !3076
  %167 = load ptr, ptr %self, align 8
  %168 = call i64 @std.io.Formatter.out(ptr %retparam275, ptr %167, i8 zeroext %trunc274), !dbg !3077
  %not_err276 = icmp eq i64 %168, 0, !dbg !3077
  %169 = call i1 @llvm.expect.i1(i1 %not_err276, i1 true), !dbg !3077
  br i1 %169, label %after_check278, label %assign_optional277, !dbg !3077

assign_optional277:                               ; preds = %switch.case272
  store i64 %168, ptr %error_var273, align 8, !dbg !3077
  br label %guard_block279, !dbg !3077

after_check278:                                   ; preds = %switch.case272
  br label %noerr_block280, !dbg !3077

guard_block279:                                   ; preds = %assign_optional277
  %170 = load i64, ptr %error_var273, align 8, !dbg !3077
  ret i64 %170, !dbg !3077

noerr_block280:                                   ; preds = %after_check278
  %171 = load i32, ptr %c, align 4, !dbg !3078
  %and = and i32 %171, 63, !dbg !3078
  %or282 = or i32 128, %and, !dbg !3079
  %trunc283 = trunc i32 %or282 to i8, !dbg !3079
  %172 = load ptr, ptr %self, align 8
  %173 = call i64 @std.io.Formatter.out(ptr %retparam284, ptr %172, i8 zeroext %trunc283), !dbg !3080
  %not_err285 = icmp eq i64 %173, 0, !dbg !3080
  %174 = call i1 @llvm.expect.i1(i1 %not_err285, i1 true), !dbg !3080
  br i1 %174, label %after_check287, label %assign_optional286, !dbg !3080

assign_optional286:                               ; preds = %noerr_block280
  store i64 %173, ptr %error_var281, align 8, !dbg !3080
  br label %guard_block288, !dbg !3080

after_check287:                                   ; preds = %noerr_block280
  br label %noerr_block289, !dbg !3080

guard_block288:                                   ; preds = %assign_optional286
  %175 = load i64, ptr %error_var281, align 8, !dbg !3080
  ret i64 %175, !dbg !3080

noerr_block289:                                   ; preds = %after_check287
  br label %switch.exit, !dbg !3080

next_if290:                                       ; preds = %next_if269
  %176 = load i32, ptr %c, align 4, !dbg !3081
  %lt291 = icmp ult i32 %176, 65535, !dbg !3081
  %eq292 = icmp eq i1 %lt291, %157, !dbg !3081
  br i1 %eq292, label %switch.case293, label %next_if325, !dbg !3081

switch.case293:                                   ; preds = %next_if290
  %177 = load i32, ptr %c, align 4, !dbg !3082
  %lshr295 = lshr i32 %177, 12, !dbg !3082
  %178 = freeze i32 %lshr295, !dbg !3082
  %or296 = or i32 224, %178, !dbg !3084
  %trunc297 = trunc i32 %or296 to i8, !dbg !3084
  %179 = load ptr, ptr %self, align 8
  %180 = call i64 @std.io.Formatter.out(ptr %retparam298, ptr %179, i8 zeroext %trunc297), !dbg !3085
  %not_err299 = icmp eq i64 %180, 0, !dbg !3085
  %181 = call i1 @llvm.expect.i1(i1 %not_err299, i1 true), !dbg !3085
  br i1 %181, label %after_check301, label %assign_optional300, !dbg !3085

assign_optional300:                               ; preds = %switch.case293
  store i64 %180, ptr %error_var294, align 8, !dbg !3085
  br label %guard_block302, !dbg !3085

after_check301:                                   ; preds = %switch.case293
  br label %noerr_block303, !dbg !3085

guard_block302:                                   ; preds = %assign_optional300
  %182 = load i64, ptr %error_var294, align 8, !dbg !3085
  ret i64 %182, !dbg !3085

noerr_block303:                                   ; preds = %after_check301
  %183 = load i32, ptr %c, align 4, !dbg !3086
  %lshr305 = lshr i32 %183, 6, !dbg !3086
  %184 = freeze i32 %lshr305, !dbg !3086
  %and306 = and i32 %184, 63, !dbg !3086
  %or307 = or i32 128, %and306, !dbg !3087
  %trunc308 = trunc i32 %or307 to i8, !dbg !3087
  %185 = load ptr, ptr %self, align 8
  %186 = call i64 @std.io.Formatter.out(ptr %retparam309, ptr %185, i8 zeroext %trunc308), !dbg !3088
  %not_err310 = icmp eq i64 %186, 0, !dbg !3088
  %187 = call i1 @llvm.expect.i1(i1 %not_err310, i1 true), !dbg !3088
  br i1 %187, label %after_check312, label %assign_optional311, !dbg !3088

assign_optional311:                               ; preds = %noerr_block303
  store i64 %186, ptr %error_var304, align 8, !dbg !3088
  br label %guard_block313, !dbg !3088

after_check312:                                   ; preds = %noerr_block303
  br label %noerr_block314, !dbg !3088

guard_block313:                                   ; preds = %assign_optional311
  %188 = load i64, ptr %error_var304, align 8, !dbg !3088
  ret i64 %188, !dbg !3088

noerr_block314:                                   ; preds = %after_check312
  %189 = load i32, ptr %c, align 4, !dbg !3089
  %and316 = and i32 %189, 63, !dbg !3089
  %or317 = or i32 128, %and316, !dbg !3090
  %trunc318 = trunc i32 %or317 to i8, !dbg !3090
  %190 = load ptr, ptr %self, align 8
  %191 = call i64 @std.io.Formatter.out(ptr %retparam319, ptr %190, i8 zeroext %trunc318), !dbg !3091
  %not_err320 = icmp eq i64 %191, 0, !dbg !3091
  %192 = call i1 @llvm.expect.i1(i1 %not_err320, i1 true), !dbg !3091
  br i1 %192, label %after_check322, label %assign_optional321, !dbg !3091

assign_optional321:                               ; preds = %noerr_block314
  store i64 %191, ptr %error_var315, align 8, !dbg !3091
  br label %guard_block323, !dbg !3091

after_check322:                                   ; preds = %noerr_block314
  br label %noerr_block324, !dbg !3091

guard_block323:                                   ; preds = %assign_optional321
  %193 = load i64, ptr %error_var315, align 8, !dbg !3091
  ret i64 %193, !dbg !3091

noerr_block324:                                   ; preds = %after_check322
  br label %switch.exit, !dbg !3091

next_if325:                                       ; preds = %next_if290
  br label %switch.default326, !dbg !3091

switch.default326:                                ; preds = %next_if325
  %194 = load i32, ptr %c, align 4, !dbg !3092
  %lshr328 = lshr i32 %194, 18, !dbg !3092
  %195 = freeze i32 %lshr328, !dbg !3092
  %or329 = or i32 240, %195, !dbg !3094
  %trunc330 = trunc i32 %or329 to i8, !dbg !3094
  %196 = load ptr, ptr %self, align 8
  %197 = call i64 @std.io.Formatter.out(ptr %retparam331, ptr %196, i8 zeroext %trunc330), !dbg !3095
  %not_err332 = icmp eq i64 %197, 0, !dbg !3095
  %198 = call i1 @llvm.expect.i1(i1 %not_err332, i1 true), !dbg !3095
  br i1 %198, label %after_check334, label %assign_optional333, !dbg !3095

assign_optional333:                               ; preds = %switch.default326
  store i64 %197, ptr %error_var327, align 8, !dbg !3095
  br label %guard_block335, !dbg !3095

after_check334:                                   ; preds = %switch.default326
  br label %noerr_block336, !dbg !3095

guard_block335:                                   ; preds = %assign_optional333
  %199 = load i64, ptr %error_var327, align 8, !dbg !3095
  ret i64 %199, !dbg !3095

noerr_block336:                                   ; preds = %after_check334
  %200 = load i32, ptr %c, align 4, !dbg !3096
  %lshr338 = lshr i32 %200, 12, !dbg !3096
  %201 = freeze i32 %lshr338, !dbg !3096
  %and339 = and i32 %201, 63, !dbg !3096
  %or340 = or i32 128, %and339, !dbg !3097
  %trunc341 = trunc i32 %or340 to i8, !dbg !3097
  %202 = load ptr, ptr %self, align 8
  %203 = call i64 @std.io.Formatter.out(ptr %retparam342, ptr %202, i8 zeroext %trunc341), !dbg !3098
  %not_err343 = icmp eq i64 %203, 0, !dbg !3098
  %204 = call i1 @llvm.expect.i1(i1 %not_err343, i1 true), !dbg !3098
  br i1 %204, label %after_check345, label %assign_optional344, !dbg !3098

assign_optional344:                               ; preds = %noerr_block336
  store i64 %203, ptr %error_var337, align 8, !dbg !3098
  br label %guard_block346, !dbg !3098

after_check345:                                   ; preds = %noerr_block336
  br label %noerr_block347, !dbg !3098

guard_block346:                                   ; preds = %assign_optional344
  %205 = load i64, ptr %error_var337, align 8, !dbg !3098
  ret i64 %205, !dbg !3098

noerr_block347:                                   ; preds = %after_check345
  %206 = load i32, ptr %c, align 4, !dbg !3099
  %lshr349 = lshr i32 %206, 6, !dbg !3099
  %207 = freeze i32 %lshr349, !dbg !3099
  %and350 = and i32 %207, 63, !dbg !3099
  %or351 = or i32 128, %and350, !dbg !3100
  %trunc352 = trunc i32 %or351 to i8, !dbg !3100
  %208 = load ptr, ptr %self, align 8
  %209 = call i64 @std.io.Formatter.out(ptr %retparam353, ptr %208, i8 zeroext %trunc352), !dbg !3101
  %not_err354 = icmp eq i64 %209, 0, !dbg !3101
  %210 = call i1 @llvm.expect.i1(i1 %not_err354, i1 true), !dbg !3101
  br i1 %210, label %after_check356, label %assign_optional355, !dbg !3101

assign_optional355:                               ; preds = %noerr_block347
  store i64 %209, ptr %error_var348, align 8, !dbg !3101
  br label %guard_block357, !dbg !3101

after_check356:                                   ; preds = %noerr_block347
  br label %noerr_block358, !dbg !3101

guard_block357:                                   ; preds = %assign_optional355
  %211 = load i64, ptr %error_var348, align 8, !dbg !3101
  ret i64 %211, !dbg !3101

noerr_block358:                                   ; preds = %after_check356
  %212 = load i32, ptr %c, align 4, !dbg !3102
  %and360 = and i32 %212, 63, !dbg !3102
  %or361 = or i32 128, %and360, !dbg !3103
  %trunc362 = trunc i32 %or361 to i8, !dbg !3103
  %213 = load ptr, ptr %self, align 8
  %214 = call i64 @std.io.Formatter.out(ptr %retparam363, ptr %213, i8 zeroext %trunc362), !dbg !3104
  %not_err364 = icmp eq i64 %214, 0, !dbg !3104
  %215 = call i1 @llvm.expect.i1(i1 %not_err364, i1 true), !dbg !3104
  br i1 %215, label %after_check366, label %assign_optional365, !dbg !3104

assign_optional365:                               ; preds = %noerr_block358
  store i64 %214, ptr %error_var359, align 8, !dbg !3104
  br label %guard_block367, !dbg !3104

after_check366:                                   ; preds = %noerr_block358
  br label %noerr_block368, !dbg !3104

guard_block367:                                   ; preds = %assign_optional365
  %216 = load i64, ptr %error_var359, align 8, !dbg !3104
  ret i64 %216, !dbg !3104

noerr_block368:                                   ; preds = %after_check366
  br label %switch.exit, !dbg !3104

switch.exit:                                      ; preds = %noerr_block368, %noerr_block324, %noerr_block289, %noerr_block268
  %217 = load i64, ptr %len, align 8, !dbg !3105
  %218 = load i32, ptr %l, align 4, !dbg !3106
  %zext370 = zext i32 %218 to i64, !dbg !3106
  %219 = load ptr, ptr %self, align 8
  %220 = call i64 @std.io.Formatter.adjust(ptr %retparam371, ptr %219, i64 %zext370), !dbg !3107
  %not_err372 = icmp eq i64 %220, 0, !dbg !3107
  %221 = call i1 @llvm.expect.i1(i1 %not_err372, i1 true), !dbg !3107
  br i1 %221, label %after_check374, label %assign_optional373, !dbg !3107

assign_optional373:                               ; preds = %switch.exit
  store i64 %220, ptr %error_var369, align 8, !dbg !3107
  br label %guard_block375, !dbg !3107

after_check374:                                   ; preds = %switch.exit
  br label %noerr_block376, !dbg !3107

guard_block375:                                   ; preds = %assign_optional373
  %222 = load i64, ptr %error_var369, align 8, !dbg !3107
  ret i64 %222, !dbg !3107

noerr_block376:                                   ; preds = %after_check374
  %223 = load i64, ptr %retparam371, align 8, !dbg !3107
  %add377 = add i64 %217, %223, !dbg !3105
  store i64 %add377, ptr %len, align 8, !dbg !3105
  %224 = load i64, ptr %len, align 8, !dbg !3108
  store i64 %224, ptr %0, align 8, !dbg !3108
  ret i64 0, !dbg !3108

panic:                                            ; preds = %entry
  %225 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2887
  call void %225(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.175, i64 8, i32 607), !dbg !2887
  unreachable, !dbg !2887

panic27:                                          ; preds = %switch.case
  %226 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2935
  call void %226(ptr @.panic_msg.132, i64 52, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 29), !dbg !2935
  unreachable, !dbg !2935

panic41:                                          ; preds = %switch.case39
  %227 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2946
  call void %227(ptr @.panic_msg.135, i64 53, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 33), !dbg !2946
  unreachable, !dbg !2946

panic69:                                          ; preds = %switch.case67
  %228 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2961
  call void %228(ptr @.panic_msg.136, i64 51, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 38), !dbg !2961
  unreachable, !dbg !2961

panic98:                                          ; preds = %switch.case95
  %229 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2976
  call void %229(ptr @.panic_msg.137, i64 52, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 43), !dbg !2976
  unreachable, !dbg !2976

panic129:                                         ; preds = %switch.case126
  %230 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !2992
  call void %230(ptr @.panic_msg.138, i64 54, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 48), !dbg !2992
  unreachable, !dbg !2992

panic161:                                         ; preds = %switch.case158
  %231 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3007
  call void %231(ptr @.panic_msg.132, i64 52, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 53), !dbg !3007
  unreachable, !dbg !3007

panic178:                                         ; preds = %switch.case175
  %232 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3018
  call void %232(ptr @.panic_msg.139, i64 54, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 57), !dbg !3018
  unreachable, !dbg !3018

panic200:                                         ; preds = %switch.case197
  %233 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3030
  call void %233(ptr @.panic_msg.140, i64 52, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 61), !dbg !3030
  unreachable, !dbg !3030

panic219:                                         ; preds = %switch.case216
  %234 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3042
  call void %234(ptr @.panic_msg.141, i64 53, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 65), !dbg !3042
  unreachable, !dbg !3042

panic241:                                         ; preds = %switch.case238
  %235 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3054
  call void %235(ptr @.panic_msg.142, i64 55, ptr @.file.131, i64 8, ptr @.func.175, i64 8, i32 69), !dbg !3054
  unreachable, !dbg !3054
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_reverse(ptr %0, ptr %1, ptr %2, i64 %3) #0 !dbg !3109 {
entry:
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %buffer_start_idx = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var10 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %retparam17 = alloca i64, align 8
  %error_var24 = alloca i64, align 8
  %retparam25 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3110
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3110
  br i1 %5, label %panic, label %checkok, !dbg !3110

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3111, metadata !DIExpression()), !dbg !3112
  store ptr %2, ptr %buf, align 8
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !3113, metadata !DIExpression()), !dbg !3114
  call void @llvm.dbg.declare(metadata ptr %n, metadata !3115, metadata !DIExpression()), !dbg !3116
  store i64 0, ptr %n, align 8, !dbg !3116
  call void @llvm.dbg.declare(metadata ptr %buffer_start_idx, metadata !3117, metadata !DIExpression()), !dbg !3118
  %6 = load ptr, ptr %self, align 8, !dbg !3119
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3119
  %ptradd2 = getelementptr inbounds i8, ptr %ptradd1, i64 16, !dbg !3119
  %7 = load i64, ptr %ptradd2, align 8, !dbg !3119
  store i64 %7, ptr %buffer_start_idx, align 8, !dbg !3119
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3120, metadata !DIExpression()), !dbg !3121
  %ptradd3 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !3122
  %8 = load i64, ptr %ptradd3, align 8, !dbg !3122
  store i64 %8, ptr %len, align 8, !dbg !3122
  %9 = load ptr, ptr %self, align 8, !dbg !3123
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !3123
  %10 = load i32, ptr %ptradd4, align 8, !dbg !3123
  %11 = and i32 1, %10, !dbg !3123
  %trunc = trunc i32 %11 to i8, !dbg !3123
  %12 = trunc i8 %trunc to i1, !dbg !3123
  %not = xor i1 %12, true, !dbg !3123
  br i1 %not, label %and.rhs, label %and.phi, !dbg !3123

and.rhs:                                          ; preds = %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !3124
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !3124
  %14 = load i32, ptr %ptradd5, align 8, !dbg !3124
  %lshrl = lshr i32 %14, 1, !dbg !3124
  %15 = and i32 1, %lshrl, !dbg !3124
  %trunc6 = trunc i32 %15 to i8, !dbg !3124
  %16 = trunc i8 %trunc6 to i1, !dbg !3124
  %not7 = xor i1 %16, true, !dbg !3124
  br label %and.phi, !dbg !3124

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %not7, %and.rhs ], !dbg !3124
  br i1 %val, label %if.then, label %if.exit, !dbg !3124

if.then:                                          ; preds = %and.phi
  %17 = load i64, ptr %n, align 8, !dbg !3125
  %18 = load ptr, ptr %self, align 8, !dbg !3127
  %ptradd8 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !3127
  %ptradd9 = getelementptr inbounds i8, ptr %ptradd8, i64 4, !dbg !3127
  %19 = load i32, ptr %ptradd9, align 4, !dbg !3127
  %zext = zext i32 %19 to i64, !dbg !3127
  %20 = load ptr, ptr %self, align 8
  %21 = load i64, ptr %len, align 8
  %22 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %20, i8 zeroext 32, i64 %zext, i64 %21) #5, !dbg !3128
  %not_err = icmp eq i64 %22, 0, !dbg !3128
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3128
  br i1 %23, label %after_check, label %assign_optional, !dbg !3128

assign_optional:                                  ; preds = %if.then
  store i64 %22, ptr %error_var, align 8, !dbg !3128
  br label %guard_block, !dbg !3128

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !3128

guard_block:                                      ; preds = %assign_optional
  %24 = load i64, ptr %error_var, align 8, !dbg !3128
  ret i64 %24, !dbg !3128

noerr_block:                                      ; preds = %after_check
  %25 = load i64, ptr %retparam, align 8, !dbg !3128
  %add = add i64 %17, %25, !dbg !3125
  store i64 %add, ptr %n, align 8, !dbg !3125
  br label %if.exit, !dbg !3125

if.exit:                                          ; preds = %noerr_block, %and.phi
  br label %loop.cond, !dbg !3129

loop.cond:                                        ; preds = %noerr_block22, %if.exit
  %26 = load i64, ptr %len, align 8, !dbg !3130
  %intbool = icmp ne i64 %26, 0, !dbg !3130
  br i1 %intbool, label %loop.body, label %loop.exit, !dbg !3130

loop.body:                                        ; preds = %loop.cond
  %27 = load i64, ptr %n, align 8, !dbg !3132
  %ptradd11 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !3133
  %28 = load i64, ptr %ptradd11, align 8, !dbg !3133
  %29 = load ptr, ptr %buf, align 8, !dbg !3133
  %30 = load i64, ptr %len, align 8, !dbg !3134
  %sub = sub i64 %30, 1, !dbg !3134
  store i64 %sub, ptr %len, align 8, !dbg !3134
  %ge = icmp uge i64 %sub, %28, !dbg !3134
  %31 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3134
  br i1 %31, label %panic12, label %checkok15, !dbg !3134

checkok15:                                        ; preds = %loop.body
  %ptradd16 = getelementptr inbounds i8, ptr %29, i64 %sub, !dbg !3135
  %32 = load ptr, ptr %self, align 8
  %33 = load i8, ptr %ptradd16, align 1
  %34 = call i64 @std.io.Formatter.out(ptr %retparam17, ptr %32, i8 zeroext %33), !dbg !3136
  %not_err18 = icmp eq i64 %34, 0, !dbg !3136
  %35 = call i1 @llvm.expect.i1(i1 %not_err18, i1 true), !dbg !3136
  br i1 %35, label %after_check20, label %assign_optional19, !dbg !3136

assign_optional19:                                ; preds = %checkok15
  store i64 %34, ptr %error_var10, align 8, !dbg !3136
  br label %guard_block21, !dbg !3136

after_check20:                                    ; preds = %checkok15
  br label %noerr_block22, !dbg !3136

guard_block21:                                    ; preds = %assign_optional19
  %36 = load i64, ptr %error_var10, align 8, !dbg !3136
  ret i64 %36, !dbg !3136

noerr_block22:                                    ; preds = %after_check20
  %37 = load i64, ptr %retparam17, align 8, !dbg !3136
  %add23 = add i64 %27, %37, !dbg !3132
  store i64 %add23, ptr %n, align 8, !dbg !3132
  br label %loop.cond, !dbg !3132

loop.exit:                                        ; preds = %loop.cond
  %38 = load i64, ptr %n, align 8, !dbg !3137
  %39 = load ptr, ptr %self, align 8
  %40 = load i64, ptr %n, align 8
  %41 = call i64 @std.io.Formatter.adjust(ptr %retparam25, ptr %39, i64 %40), !dbg !3138
  %not_err26 = icmp eq i64 %41, 0, !dbg !3138
  %42 = call i1 @llvm.expect.i1(i1 %not_err26, i1 true), !dbg !3138
  br i1 %42, label %after_check28, label %assign_optional27, !dbg !3138

assign_optional27:                                ; preds = %loop.exit
  store i64 %41, ptr %error_var24, align 8, !dbg !3138
  br label %guard_block29, !dbg !3138

after_check28:                                    ; preds = %loop.exit
  br label %noerr_block30, !dbg !3138

guard_block29:                                    ; preds = %assign_optional27
  %43 = load i64, ptr %error_var24, align 8, !dbg !3138
  ret i64 %43, !dbg !3138

noerr_block30:                                    ; preds = %after_check28
  %44 = load i64, ptr %retparam25, align 8, !dbg !3138
  %add31 = add i64 %38, %44, !dbg !3137
  store i64 %add31, ptr %n, align 8, !dbg !3137
  %45 = load i64, ptr %n, align 8, !dbg !3139
  store i64 %45, ptr %0, align 8, !dbg !3139
  ret i64 0, !dbg !3139

panic:                                            ; preds = %entry
  %46 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3112
  call void %46(ptr @.panic_msg, i64 62, ptr @.file.117, i64 20, ptr @.func.179, i64 11, i32 637), !dbg !3112
  unreachable, !dbg !3112

panic12:                                          ; preds = %loop.body
  store i64 %28, ptr %taddr, align 8
  %47 = insertvalue %any undef, ptr %taddr, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr13, align 8
  %49 = insertvalue %any undef, ptr %taddr13, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %48, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %50, ptr %ptradd14, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %51, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.117, i64 20, ptr @.func.179, i64 11, i32 648, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3135
  unreachable, !dbg !3135
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.int_from_any(ptr %0, i64 %1, ptr %2, ptr %3) #0 !dbg !3140 {
entry:
  %arg = alloca %any, align 8
  %is_neg = alloca ptr, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %reterr6 = alloca i64, align 8
  %self = alloca ptr, align 8
  %retparam = alloca i128, align 8
  %taddr = alloca %any, align 8
  %switch36 = alloca i64, align 8
  %arg41 = alloca ptr, align 8
  %reterr42 = alloca i64, align 8
  %arg53 = alloca ptr, align 8
  %val = alloca i32, align 4
  %reterr57 = alloca i64, align 8
  %arg72 = alloca ptr, align 8
  %val73 = alloca i32, align 4
  %reterr78 = alloca i64, align 8
  %arg99 = alloca ptr, align 8
  %val100 = alloca i32, align 4
  %reterr104 = alloca i64, align 8
  %arg125 = alloca ptr, align 8
  %val126 = alloca i64, align 8
  %reterr130 = alloca i64, align 8
  %arg151 = alloca ptr, align 8
  %val152 = alloca i128, align 8
  %reterr156 = alloca i64, align 8
  %arg175 = alloca ptr, align 8
  %reterr176 = alloca i64, align 8
  %arg189 = alloca ptr, align 8
  %reterr190 = alloca i64, align 8
  %arg203 = alloca ptr, align 8
  %reterr204 = alloca i64, align 8
  %arg217 = alloca ptr, align 8
  %reterr218 = alloca i64, align 8
  %arg231 = alloca ptr, align 8
  %reterr232 = alloca i64, align 8
  %arg244 = alloca ptr, align 8
  %f = alloca float, align 4
  %reterr248 = alloca i64, align 8
  %arg265 = alloca ptr, align 8
  %d = alloca double, align 8
  %reterr269 = alloca i64, align 8
  store i64 %1, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !3145, metadata !DIExpression()), !dbg !3146
  store ptr %3, ptr %is_neg, align 8
  call void @llvm.dbg.declare(metadata ptr %is_neg, metadata !3147, metadata !DIExpression()), !dbg !3148
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3149
  %4 = load i64, ptr %ptradd1, align 8, !dbg !3149
  %"introspect*" = inttoptr i64 %4 to ptr, !dbg !3149
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !3149
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %5 = load i8, ptr %switch, align 1
  switch i8 %5, label %switch.default [
    i8 19, label %switch.case
    i8 18, label %switch.case5
    i8 8, label %switch.case5
  ]

switch.case:                                      ; preds = %switch.entry
  %6 = load ptr, ptr %is_neg, align 8, !dbg !3151
  %checknull = icmp eq ptr %6, null, !dbg !3151
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3151
  br i1 %7, label %panic, label %checkok, !dbg !3151

checkok:                                          ; preds = %switch.case
  store i8 0, ptr %6, align 1, !dbg !3153
  %8 = load ptr, ptr %arg, align 8, !dbg !3154
  %checknull2 = icmp eq ptr %8, null, !dbg !3154
  %9 = call i1 @llvm.expect.i1(i1 %checknull2, i1 false), !dbg !3154
  br i1 %9, label %panic3, label %checkok4, !dbg !3154

checkok4:                                         ; preds = %checkok
  %10 = load ptr, ptr %8, align 8, !dbg !3155
  %ptrxi = ptrtoint ptr %10 to i64, !dbg !3155
  %zext = zext i64 %ptrxi to i128, !dbg !3155
  store i128 %zext, ptr %0, align 8, !dbg !3155
  ret i64 0, !dbg !3155

switch.case5:                                     ; preds = %switch.entry, %switch.entry
  store ptr %arg, ptr %self, align 8
  %11 = load ptr, ptr %self, align 8, !dbg !3156
  %checknull7 = icmp eq ptr %11, null, !dbg !3156
  %12 = call i1 @llvm.expect.i1(i1 %checknull7, i1 false), !dbg !3156
  br i1 %12, label %panic8, label %checkok9, !dbg !3156

checkok9:                                         ; preds = %switch.case5
  %13 = load ptr, ptr %11, align 8, !dbg !3156
  %14 = load ptr, ptr %self, align 8, !dbg !3160
  %checknull10 = icmp eq ptr %14, null, !dbg !3160
  %15 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !3160
  br i1 %15, label %panic11, label %checkok12, !dbg !3160

checkok12:                                        ; preds = %checkok9
  %ptradd13 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !3160
  %16 = load i64, ptr %ptradd13, align 8, !dbg !3160
  %"introspect*14" = inttoptr i64 %16 to ptr, !dbg !3160
  %typeid.kind15 = load i8, ptr %"introspect*14", align 8, !dbg !3160
  %eq = icmp eq i8 %typeid.kind15, 15, !dbg !3160
  br i1 %eq, label %check_type_ok, label %check_next, !dbg !3160

check_next:                                       ; preds = %checkok12
  %eq16 = icmp eq i8 %typeid.kind15, 19, !dbg !3160
  br i1 %eq16, label %check_type_ok, label %check_next17, !dbg !3160

check_next17:                                     ; preds = %check_next
  %eq18 = icmp eq i8 %typeid.kind15, 17, !dbg !3160
  br i1 %eq18, label %check_type_ok, label %check_next19, !dbg !3160

check_next19:                                     ; preds = %check_next17
  %eq20 = icmp eq i8 %typeid.kind15, 8, !dbg !3160
  br i1 %eq20, label %check_type_ok, label %check_next21, !dbg !3160

check_next21:                                     ; preds = %check_next19
  %eq22 = icmp eq i8 %typeid.kind15, 16, !dbg !3160
  br i1 %eq22, label %check_type_ok, label %check_next23, !dbg !3160

check_next23:                                     ; preds = %check_next21
  %eq24 = icmp eq i8 %typeid.kind15, 18, !dbg !3160
  br i1 %eq24, label %check_type_ok, label %check_next25, !dbg !3160

check_next25:                                     ; preds = %check_next23
  %eq26 = icmp eq i8 %typeid.kind15, 14, !dbg !3160
  br i1 %eq26, label %check_type_ok, label %check_next27, !dbg !3160

check_next27:                                     ; preds = %check_next25
  %eq28 = icmp eq i8 %typeid.kind15, 12, !dbg !3160
  br i1 %eq28, label %check_type_ok, label %check_next29, !dbg !3160

check_next29:                                     ; preds = %check_next27
  %17 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3160
  call void %17(ptr @.panic_msg.120, i64 49, ptr @.file.49, i64 10, ptr @.func.118, i64 12, i32 199), !dbg !3160
  unreachable, !dbg !3160

check_type_ok:                                    ; preds = %check_next27, %check_next25, %check_next23, %check_next21, %check_next19, %check_next17, %check_next, %checkok12
  %ptradd30 = getelementptr inbounds i8, ptr %"introspect*14", i64 32, !dbg !3160
  %typeid.inner = load i64, ptr %ptradd30, align 8, !dbg !3160
  %18 = insertvalue %any undef, ptr %13, 0, !dbg !3160
  %19 = insertvalue %any %18, i64 %typeid.inner, 1, !dbg !3160
  store %any %19, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd31 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd31, align 8
  %20 = load ptr, ptr %is_neg, align 8
  %21 = call i64 @std.io.int_from_any(ptr %retparam, i64 %lo, ptr %hi, ptr %20), !dbg !3161
  %not_err = icmp eq i64 %21, 0, !dbg !3161
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3161
  br i1 %22, label %after_check, label %assign_optional, !dbg !3161

assign_optional:                                  ; preds = %check_type_ok
  store i64 %21, ptr %reterr6, align 8, !dbg !3161
  br label %err_retblock, !dbg !3161

after_check:                                      ; preds = %check_type_ok
  %23 = load i128, ptr %retparam, align 8, !dbg !3161
  store i128 %23, ptr %0, align 8, !dbg !3161
  ret i64 0, !dbg !3161

err_retblock:                                     ; preds = %assign_optional
  %24 = load i64, ptr %reterr6, align 8, !dbg !3161
  ret i64 %24, !dbg !3161

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !3162

switch.exit:                                      ; preds = %switch.default
  %25 = load ptr, ptr %is_neg, align 8, !dbg !3164
  %checknull32 = icmp eq ptr %25, null, !dbg !3164
  %26 = call i1 @llvm.expect.i1(i1 %checknull32, i1 false), !dbg !3164
  br i1 %26, label %panic33, label %checkok34, !dbg !3164

checkok34:                                        ; preds = %switch.exit
  store i8 0, ptr %25, align 1, !dbg !3165
  %ptradd35 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3166
  %27 = load i64, ptr %ptradd35, align 8
  store i64 %27, ptr %switch36, align 8
  br label %switch.entry37

switch.entry37:                                   ; preds = %checkok34
  %28 = load i64, ptr %switch36, align 8
  br label %check_subtype, !dbg !3168

check_subtype:                                    ; preds = %parent_type_block, %switch.entry37
  %29 = phi i64 [ %28, %switch.entry37 ], [ %typeid.parent, %parent_type_block ], !dbg !3168
  %eq38 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %29, !dbg !3168
  br i1 %eq38, label %result_block, label %parent_type_block, !dbg !3168

parent_type_block:                                ; preds = %check_subtype
  %30 = inttoptr i64 %29 to ptr, !dbg !3168
  %ptradd39 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !3168
  %typeid.parent = load i64, ptr %ptradd39, align 8, !dbg !3168
  %31 = icmp eq i64 %typeid.parent, 0, !dbg !3168
  br i1 %31, label %result_block, label %check_subtype, !dbg !3168

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %32 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !3168
  br i1 %32, label %switch.case40, label %next_if, !dbg !3168

switch.case40:                                    ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %arg41, metadata !3169, metadata !DIExpression()), !dbg !3171
  %33 = load ptr, ptr %arg, align 8, !dbg !3171
  store ptr %33, ptr %arg41, align 8, !dbg !3171
  %34 = load ptr, ptr %arg41, align 8, !dbg !3172
  %checknull43 = icmp eq ptr %34, null, !dbg !3172
  %35 = call i1 @llvm.expect.i1(i1 %checknull43, i1 false), !dbg !3172
  br i1 %35, label %panic44, label %checkok45, !dbg !3172

checkok45:                                        ; preds = %switch.case40
  %36 = load i8, ptr %34, align 1, !dbg !3172
  %37 = trunc i8 %36 to i1, !dbg !3172
  %boolsi = zext i1 %37 to i128, !dbg !3172
  store i128 %boolsi, ptr %0, align 8, !dbg !3172
  ret i64 0, !dbg !3172

next_if:                                          ; preds = %result_block
  br label %check_subtype46, !dbg !3173

check_subtype46:                                  ; preds = %parent_type_block48, %next_if
  %38 = phi i64 [ %28, %next_if ], [ %typeid.parent50, %parent_type_block48 ], !dbg !3173
  %eq47 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %38, !dbg !3173
  br i1 %eq47, label %result_block51, label %parent_type_block48, !dbg !3173

parent_type_block48:                              ; preds = %check_subtype46
  %39 = inttoptr i64 %38 to ptr, !dbg !3173
  %ptradd49 = getelementptr inbounds i8, ptr %39, i64 8, !dbg !3173
  %typeid.parent50 = load i64, ptr %ptradd49, align 8, !dbg !3173
  %40 = icmp eq i64 %typeid.parent50, 0, !dbg !3173
  br i1 %40, label %result_block51, label %check_subtype46, !dbg !3173

result_block51:                                   ; preds = %parent_type_block48, %check_subtype46
  %41 = phi i1 [ false, %parent_type_block48 ], [ true, %check_subtype46 ], !dbg !3173
  br i1 %41, label %switch.case52, label %next_if64, !dbg !3173

switch.case52:                                    ; preds = %result_block51
  call void @llvm.dbg.declare(metadata ptr %arg53, metadata !3174, metadata !DIExpression()), !dbg !3177
  %42 = load ptr, ptr %arg, align 8, !dbg !3177
  store ptr %42, ptr %arg53, align 8, !dbg !3177
  call void @llvm.dbg.declare(metadata ptr %val, metadata !3178, metadata !DIExpression()), !dbg !3179
  %43 = load ptr, ptr %arg53, align 8, !dbg !3180
  %checknull54 = icmp eq ptr %43, null, !dbg !3180
  %44 = call i1 @llvm.expect.i1(i1 %checknull54, i1 false), !dbg !3180
  br i1 %44, label %panic55, label %checkok56, !dbg !3180

checkok56:                                        ; preds = %switch.case52
  %45 = load i8, ptr %43, align 1, !dbg !3180
  %sext = sext i8 %45 to i32, !dbg !3180
  store i32 %sext, ptr %val, align 4, !dbg !3180
  %46 = load ptr, ptr %is_neg, align 8, !dbg !3181
  %checknull58 = icmp eq ptr %46, null, !dbg !3181
  %47 = call i1 @llvm.expect.i1(i1 %checknull58, i1 false), !dbg !3181
  br i1 %47, label %panic59, label %checkok60, !dbg !3181

checkok60:                                        ; preds = %checkok56
  %48 = load i32, ptr %val, align 4, !dbg !3182
  %lt = icmp slt i32 %48, 0, !dbg !3182
  %49 = zext i1 %lt to i8, !dbg !3182
  store i8 %49, ptr %46, align 1, !dbg !3182
  %50 = trunc i8 %49 to i1, !dbg !3182
  br i1 %50, label %cond.lhs, label %cond.rhs, !dbg !3182

cond.lhs:                                         ; preds = %checkok60
  %51 = load i32, ptr %val, align 4, !dbg !3183
  %sext61 = sext i32 %51 to i128, !dbg !3183
  %bnot = xor i128 %sext61, -1, !dbg !3183
  %add = add i128 %bnot, 1, !dbg !3184
  br label %cond.phi, !dbg !3184

cond.rhs:                                         ; preds = %checkok60
  %52 = load i32, ptr %val, align 4, !dbg !3185
  %sext62 = sext i32 %52 to i128, !dbg !3185
  br label %cond.phi, !dbg !3185

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val63 = phi i128 [ %add, %cond.lhs ], [ %sext62, %cond.rhs ], !dbg !3185
  store i128 %val63, ptr %0, align 8, !dbg !3185
  ret i64 0, !dbg !3185

next_if64:                                        ; preds = %result_block51
  br label %check_subtype65, !dbg !3186

check_subtype65:                                  ; preds = %parent_type_block67, %next_if64
  %53 = phi i64 [ %28, %next_if64 ], [ %typeid.parent69, %parent_type_block67 ], !dbg !3186
  %eq66 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %53, !dbg !3186
  br i1 %eq66, label %result_block70, label %parent_type_block67, !dbg !3186

parent_type_block67:                              ; preds = %check_subtype65
  %54 = inttoptr i64 %53 to ptr, !dbg !3186
  %ptradd68 = getelementptr inbounds i8, ptr %54, i64 8, !dbg !3186
  %typeid.parent69 = load i64, ptr %ptradd68, align 8, !dbg !3186
  %55 = icmp eq i64 %typeid.parent69, 0, !dbg !3186
  br i1 %55, label %result_block70, label %check_subtype65, !dbg !3186

result_block70:                                   ; preds = %parent_type_block67, %check_subtype65
  %56 = phi i1 [ false, %parent_type_block67 ], [ true, %check_subtype65 ], !dbg !3186
  br i1 %56, label %switch.case71, label %next_if91, !dbg !3186

switch.case71:                                    ; preds = %result_block70
  call void @llvm.dbg.declare(metadata ptr %arg72, metadata !3187, metadata !DIExpression()), !dbg !3190
  %57 = load ptr, ptr %arg, align 8, !dbg !3190
  store ptr %57, ptr %arg72, align 8, !dbg !3190
  call void @llvm.dbg.declare(metadata ptr %val73, metadata !3191, metadata !DIExpression()), !dbg !3192
  %58 = load ptr, ptr %arg72, align 8, !dbg !3193
  %checknull74 = icmp eq ptr %58, null, !dbg !3193
  %59 = call i1 @llvm.expect.i1(i1 %checknull74, i1 false), !dbg !3193
  br i1 %59, label %panic75, label %checkok76, !dbg !3193

checkok76:                                        ; preds = %switch.case71
  %60 = load i16, ptr %58, align 2, !dbg !3193
  %sext77 = sext i16 %60 to i32, !dbg !3193
  store i32 %sext77, ptr %val73, align 4, !dbg !3193
  %61 = load ptr, ptr %is_neg, align 8, !dbg !3194
  %checknull79 = icmp eq ptr %61, null, !dbg !3194
  %62 = call i1 @llvm.expect.i1(i1 %checknull79, i1 false), !dbg !3194
  br i1 %62, label %panic80, label %checkok81, !dbg !3194

checkok81:                                        ; preds = %checkok76
  %63 = load i32, ptr %val73, align 4, !dbg !3195
  %lt82 = icmp slt i32 %63, 0, !dbg !3195
  %64 = zext i1 %lt82 to i8, !dbg !3195
  store i8 %64, ptr %61, align 1, !dbg !3195
  %65 = trunc i8 %64 to i1, !dbg !3195
  br i1 %65, label %cond.lhs83, label %cond.rhs87, !dbg !3195

cond.lhs83:                                       ; preds = %checkok81
  %66 = load i32, ptr %val73, align 4, !dbg !3196
  %sext84 = sext i32 %66 to i128, !dbg !3196
  %bnot85 = xor i128 %sext84, -1, !dbg !3196
  %add86 = add i128 %bnot85, 1, !dbg !3197
  br label %cond.phi89, !dbg !3197

cond.rhs87:                                       ; preds = %checkok81
  %67 = load i32, ptr %val73, align 4, !dbg !3198
  %sext88 = sext i32 %67 to i128, !dbg !3198
  br label %cond.phi89, !dbg !3198

cond.phi89:                                       ; preds = %cond.rhs87, %cond.lhs83
  %val90 = phi i128 [ %add86, %cond.lhs83 ], [ %sext88, %cond.rhs87 ], !dbg !3198
  store i128 %val90, ptr %0, align 8, !dbg !3198
  ret i64 0, !dbg !3198

next_if91:                                        ; preds = %result_block70
  br label %check_subtype92, !dbg !3199

check_subtype92:                                  ; preds = %parent_type_block94, %next_if91
  %68 = phi i64 [ %28, %next_if91 ], [ %typeid.parent96, %parent_type_block94 ], !dbg !3199
  %eq93 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %68, !dbg !3199
  br i1 %eq93, label %result_block97, label %parent_type_block94, !dbg !3199

parent_type_block94:                              ; preds = %check_subtype92
  %69 = inttoptr i64 %68 to ptr, !dbg !3199
  %ptradd95 = getelementptr inbounds i8, ptr %69, i64 8, !dbg !3199
  %typeid.parent96 = load i64, ptr %ptradd95, align 8, !dbg !3199
  %70 = icmp eq i64 %typeid.parent96, 0, !dbg !3199
  br i1 %70, label %result_block97, label %check_subtype92, !dbg !3199

result_block97:                                   ; preds = %parent_type_block94, %check_subtype92
  %71 = phi i1 [ false, %parent_type_block94 ], [ true, %check_subtype92 ], !dbg !3199
  br i1 %71, label %switch.case98, label %next_if117, !dbg !3199

switch.case98:                                    ; preds = %result_block97
  call void @llvm.dbg.declare(metadata ptr %arg99, metadata !3200, metadata !DIExpression()), !dbg !3203
  %72 = load ptr, ptr %arg, align 8, !dbg !3203
  store ptr %72, ptr %arg99, align 8, !dbg !3203
  call void @llvm.dbg.declare(metadata ptr %val100, metadata !3204, metadata !DIExpression()), !dbg !3205
  %73 = load ptr, ptr %arg99, align 8, !dbg !3206
  %checknull101 = icmp eq ptr %73, null, !dbg !3206
  %74 = call i1 @llvm.expect.i1(i1 %checknull101, i1 false), !dbg !3206
  br i1 %74, label %panic102, label %checkok103, !dbg !3206

checkok103:                                       ; preds = %switch.case98
  %75 = load i32, ptr %73, align 4, !dbg !3206
  store i32 %75, ptr %val100, align 4, !dbg !3206
  %76 = load ptr, ptr %is_neg, align 8, !dbg !3207
  %checknull105 = icmp eq ptr %76, null, !dbg !3207
  %77 = call i1 @llvm.expect.i1(i1 %checknull105, i1 false), !dbg !3207
  br i1 %77, label %panic106, label %checkok107, !dbg !3207

checkok107:                                       ; preds = %checkok103
  %78 = load i32, ptr %val100, align 4, !dbg !3208
  %lt108 = icmp slt i32 %78, 0, !dbg !3208
  %79 = zext i1 %lt108 to i8, !dbg !3208
  store i8 %79, ptr %76, align 1, !dbg !3208
  %80 = trunc i8 %79 to i1, !dbg !3208
  br i1 %80, label %cond.lhs109, label %cond.rhs113, !dbg !3208

cond.lhs109:                                      ; preds = %checkok107
  %81 = load i32, ptr %val100, align 4, !dbg !3209
  %sext110 = sext i32 %81 to i128, !dbg !3209
  %bnot111 = xor i128 %sext110, -1, !dbg !3209
  %add112 = add i128 %bnot111, 1, !dbg !3210
  br label %cond.phi115, !dbg !3210

cond.rhs113:                                      ; preds = %checkok107
  %82 = load i32, ptr %val100, align 4, !dbg !3211
  %sext114 = sext i32 %82 to i128, !dbg !3211
  br label %cond.phi115, !dbg !3211

cond.phi115:                                      ; preds = %cond.rhs113, %cond.lhs109
  %val116 = phi i128 [ %add112, %cond.lhs109 ], [ %sext114, %cond.rhs113 ], !dbg !3211
  store i128 %val116, ptr %0, align 8, !dbg !3211
  ret i64 0, !dbg !3211

next_if117:                                       ; preds = %result_block97
  br label %check_subtype118, !dbg !3212

check_subtype118:                                 ; preds = %parent_type_block120, %next_if117
  %83 = phi i64 [ %28, %next_if117 ], [ %typeid.parent122, %parent_type_block120 ], !dbg !3212
  %eq119 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %83, !dbg !3212
  br i1 %eq119, label %result_block123, label %parent_type_block120, !dbg !3212

parent_type_block120:                             ; preds = %check_subtype118
  %84 = inttoptr i64 %83 to ptr, !dbg !3212
  %ptradd121 = getelementptr inbounds i8, ptr %84, i64 8, !dbg !3212
  %typeid.parent122 = load i64, ptr %ptradd121, align 8, !dbg !3212
  %85 = icmp eq i64 %typeid.parent122, 0, !dbg !3212
  br i1 %85, label %result_block123, label %check_subtype118, !dbg !3212

result_block123:                                  ; preds = %parent_type_block120, %check_subtype118
  %86 = phi i1 [ false, %parent_type_block120 ], [ true, %check_subtype118 ], !dbg !3212
  br i1 %86, label %switch.case124, label %next_if143, !dbg !3212

switch.case124:                                   ; preds = %result_block123
  call void @llvm.dbg.declare(metadata ptr %arg125, metadata !3213, metadata !DIExpression()), !dbg !3216
  %87 = load ptr, ptr %arg, align 8, !dbg !3216
  store ptr %87, ptr %arg125, align 8, !dbg !3216
  call void @llvm.dbg.declare(metadata ptr %val126, metadata !3217, metadata !DIExpression()), !dbg !3218
  %88 = load ptr, ptr %arg125, align 8, !dbg !3219
  %checknull127 = icmp eq ptr %88, null, !dbg !3219
  %89 = call i1 @llvm.expect.i1(i1 %checknull127, i1 false), !dbg !3219
  br i1 %89, label %panic128, label %checkok129, !dbg !3219

checkok129:                                       ; preds = %switch.case124
  %90 = load i64, ptr %88, align 8, !dbg !3219
  store i64 %90, ptr %val126, align 8, !dbg !3219
  %91 = load ptr, ptr %is_neg, align 8, !dbg !3220
  %checknull131 = icmp eq ptr %91, null, !dbg !3220
  %92 = call i1 @llvm.expect.i1(i1 %checknull131, i1 false), !dbg !3220
  br i1 %92, label %panic132, label %checkok133, !dbg !3220

checkok133:                                       ; preds = %checkok129
  %93 = load i64, ptr %val126, align 8, !dbg !3221
  %lt134 = icmp slt i64 %93, 0, !dbg !3221
  %94 = zext i1 %lt134 to i8, !dbg !3221
  store i8 %94, ptr %91, align 1, !dbg !3221
  %95 = trunc i8 %94 to i1, !dbg !3221
  br i1 %95, label %cond.lhs135, label %cond.rhs139, !dbg !3221

cond.lhs135:                                      ; preds = %checkok133
  %96 = load i64, ptr %val126, align 8, !dbg !3222
  %sext136 = sext i64 %96 to i128, !dbg !3222
  %bnot137 = xor i128 %sext136, -1, !dbg !3222
  %add138 = add i128 %bnot137, 1, !dbg !3223
  br label %cond.phi141, !dbg !3223

cond.rhs139:                                      ; preds = %checkok133
  %97 = load i64, ptr %val126, align 8, !dbg !3224
  %sext140 = sext i64 %97 to i128, !dbg !3224
  br label %cond.phi141, !dbg !3224

cond.phi141:                                      ; preds = %cond.rhs139, %cond.lhs135
  %val142 = phi i128 [ %add138, %cond.lhs135 ], [ %sext140, %cond.rhs139 ], !dbg !3224
  store i128 %val142, ptr %0, align 8, !dbg !3224
  ret i64 0, !dbg !3224

next_if143:                                       ; preds = %result_block123
  br label %check_subtype144, !dbg !3225

check_subtype144:                                 ; preds = %parent_type_block146, %next_if143
  %98 = phi i64 [ %28, %next_if143 ], [ %typeid.parent148, %parent_type_block146 ], !dbg !3225
  %eq145 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %98, !dbg !3225
  br i1 %eq145, label %result_block149, label %parent_type_block146, !dbg !3225

parent_type_block146:                             ; preds = %check_subtype144
  %99 = inttoptr i64 %98 to ptr, !dbg !3225
  %ptradd147 = getelementptr inbounds i8, ptr %99, i64 8, !dbg !3225
  %typeid.parent148 = load i64, ptr %ptradd147, align 8, !dbg !3225
  %100 = icmp eq i64 %typeid.parent148, 0, !dbg !3225
  br i1 %100, label %result_block149, label %check_subtype144, !dbg !3225

result_block149:                                  ; preds = %parent_type_block146, %check_subtype144
  %101 = phi i1 [ false, %parent_type_block146 ], [ true, %check_subtype144 ], !dbg !3225
  br i1 %101, label %switch.case150, label %next_if167, !dbg !3225

switch.case150:                                   ; preds = %result_block149
  call void @llvm.dbg.declare(metadata ptr %arg151, metadata !3226, metadata !DIExpression()), !dbg !3229
  %102 = load ptr, ptr %arg, align 8, !dbg !3229
  store ptr %102, ptr %arg151, align 8, !dbg !3229
  call void @llvm.dbg.declare(metadata ptr %val152, metadata !3230, metadata !DIExpression()), !dbg !3231
  %103 = load ptr, ptr %arg151, align 8, !dbg !3232
  %checknull153 = icmp eq ptr %103, null, !dbg !3232
  %104 = call i1 @llvm.expect.i1(i1 %checknull153, i1 false), !dbg !3232
  br i1 %104, label %panic154, label %checkok155, !dbg !3232

checkok155:                                       ; preds = %switch.case150
  %105 = load i128, ptr %103, align 8, !dbg !3232
  store i128 %105, ptr %val152, align 8, !dbg !3232
  %106 = load ptr, ptr %is_neg, align 8, !dbg !3233
  %checknull157 = icmp eq ptr %106, null, !dbg !3233
  %107 = call i1 @llvm.expect.i1(i1 %checknull157, i1 false), !dbg !3233
  br i1 %107, label %panic158, label %checkok159, !dbg !3233

checkok159:                                       ; preds = %checkok155
  %108 = load i128, ptr %val152, align 8, !dbg !3234
  %lt160 = icmp slt i128 %108, 0, !dbg !3234
  %109 = zext i1 %lt160 to i8, !dbg !3234
  store i8 %109, ptr %106, align 1, !dbg !3234
  %110 = trunc i8 %109 to i1, !dbg !3234
  br i1 %110, label %cond.lhs161, label %cond.rhs164, !dbg !3234

cond.lhs161:                                      ; preds = %checkok159
  %111 = load i128, ptr %val152, align 8, !dbg !3235
  %bnot162 = xor i128 %111, -1, !dbg !3235
  %add163 = add i128 %bnot162, 1, !dbg !3236
  br label %cond.phi165, !dbg !3236

cond.rhs164:                                      ; preds = %checkok159
  %112 = load i128, ptr %val152, align 8, !dbg !3237
  br label %cond.phi165, !dbg !3237

cond.phi165:                                      ; preds = %cond.rhs164, %cond.lhs161
  %val166 = phi i128 [ %add163, %cond.lhs161 ], [ %112, %cond.rhs164 ], !dbg !3237
  store i128 %val166, ptr %0, align 8, !dbg !3237
  ret i64 0, !dbg !3237

next_if167:                                       ; preds = %result_block149
  br label %check_subtype168, !dbg !3238

check_subtype168:                                 ; preds = %parent_type_block170, %next_if167
  %113 = phi i64 [ %28, %next_if167 ], [ %typeid.parent172, %parent_type_block170 ], !dbg !3238
  %eq169 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %113, !dbg !3238
  br i1 %eq169, label %result_block173, label %parent_type_block170, !dbg !3238

parent_type_block170:                             ; preds = %check_subtype168
  %114 = inttoptr i64 %113 to ptr, !dbg !3238
  %ptradd171 = getelementptr inbounds i8, ptr %114, i64 8, !dbg !3238
  %typeid.parent172 = load i64, ptr %ptradd171, align 8, !dbg !3238
  %115 = icmp eq i64 %typeid.parent172, 0, !dbg !3238
  br i1 %115, label %result_block173, label %check_subtype168, !dbg !3238

result_block173:                                  ; preds = %parent_type_block170, %check_subtype168
  %116 = phi i1 [ false, %parent_type_block170 ], [ true, %check_subtype168 ], !dbg !3238
  br i1 %116, label %switch.case174, label %next_if181, !dbg !3238

switch.case174:                                   ; preds = %result_block173
  call void @llvm.dbg.declare(metadata ptr %arg175, metadata !3239, metadata !DIExpression()), !dbg !3241
  %117 = load ptr, ptr %arg, align 8, !dbg !3241
  store ptr %117, ptr %arg175, align 8, !dbg !3241
  %118 = load ptr, ptr %arg175, align 8, !dbg !3242
  %checknull177 = icmp eq ptr %118, null, !dbg !3242
  %119 = call i1 @llvm.expect.i1(i1 %checknull177, i1 false), !dbg !3242
  br i1 %119, label %panic178, label %checkok179, !dbg !3242

checkok179:                                       ; preds = %switch.case174
  %120 = load i8, ptr %118, align 1, !dbg !3242
  %zext180 = zext i8 %120 to i128, !dbg !3242
  store i128 %zext180, ptr %0, align 8, !dbg !3242
  ret i64 0, !dbg !3242

next_if181:                                       ; preds = %result_block173
  br label %check_subtype182, !dbg !3243

check_subtype182:                                 ; preds = %parent_type_block184, %next_if181
  %121 = phi i64 [ %28, %next_if181 ], [ %typeid.parent186, %parent_type_block184 ], !dbg !3243
  %eq183 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %121, !dbg !3243
  br i1 %eq183, label %result_block187, label %parent_type_block184, !dbg !3243

parent_type_block184:                             ; preds = %check_subtype182
  %122 = inttoptr i64 %121 to ptr, !dbg !3243
  %ptradd185 = getelementptr inbounds i8, ptr %122, i64 8, !dbg !3243
  %typeid.parent186 = load i64, ptr %ptradd185, align 8, !dbg !3243
  %123 = icmp eq i64 %typeid.parent186, 0, !dbg !3243
  br i1 %123, label %result_block187, label %check_subtype182, !dbg !3243

result_block187:                                  ; preds = %parent_type_block184, %check_subtype182
  %124 = phi i1 [ false, %parent_type_block184 ], [ true, %check_subtype182 ], !dbg !3243
  br i1 %124, label %switch.case188, label %next_if195, !dbg !3243

switch.case188:                                   ; preds = %result_block187
  call void @llvm.dbg.declare(metadata ptr %arg189, metadata !3244, metadata !DIExpression()), !dbg !3247
  %125 = load ptr, ptr %arg, align 8, !dbg !3247
  store ptr %125, ptr %arg189, align 8, !dbg !3247
  %126 = load ptr, ptr %arg189, align 8, !dbg !3248
  %checknull191 = icmp eq ptr %126, null, !dbg !3248
  %127 = call i1 @llvm.expect.i1(i1 %checknull191, i1 false), !dbg !3248
  br i1 %127, label %panic192, label %checkok193, !dbg !3248

checkok193:                                       ; preds = %switch.case188
  %128 = load i16, ptr %126, align 2, !dbg !3248
  %zext194 = zext i16 %128 to i128, !dbg !3248
  store i128 %zext194, ptr %0, align 8, !dbg !3248
  ret i64 0, !dbg !3248

next_if195:                                       ; preds = %result_block187
  br label %check_subtype196, !dbg !3249

check_subtype196:                                 ; preds = %parent_type_block198, %next_if195
  %129 = phi i64 [ %28, %next_if195 ], [ %typeid.parent200, %parent_type_block198 ], !dbg !3249
  %eq197 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %129, !dbg !3249
  br i1 %eq197, label %result_block201, label %parent_type_block198, !dbg !3249

parent_type_block198:                             ; preds = %check_subtype196
  %130 = inttoptr i64 %129 to ptr, !dbg !3249
  %ptradd199 = getelementptr inbounds i8, ptr %130, i64 8, !dbg !3249
  %typeid.parent200 = load i64, ptr %ptradd199, align 8, !dbg !3249
  %131 = icmp eq i64 %typeid.parent200, 0, !dbg !3249
  br i1 %131, label %result_block201, label %check_subtype196, !dbg !3249

result_block201:                                  ; preds = %parent_type_block198, %check_subtype196
  %132 = phi i1 [ false, %parent_type_block198 ], [ true, %check_subtype196 ], !dbg !3249
  br i1 %132, label %switch.case202, label %next_if209, !dbg !3249

switch.case202:                                   ; preds = %result_block201
  call void @llvm.dbg.declare(metadata ptr %arg203, metadata !3250, metadata !DIExpression()), !dbg !3252
  %133 = load ptr, ptr %arg, align 8, !dbg !3252
  store ptr %133, ptr %arg203, align 8, !dbg !3252
  %134 = load ptr, ptr %arg203, align 8, !dbg !3253
  %checknull205 = icmp eq ptr %134, null, !dbg !3253
  %135 = call i1 @llvm.expect.i1(i1 %checknull205, i1 false), !dbg !3253
  br i1 %135, label %panic206, label %checkok207, !dbg !3253

checkok207:                                       ; preds = %switch.case202
  %136 = load i32, ptr %134, align 4, !dbg !3253
  %zext208 = zext i32 %136 to i128, !dbg !3253
  store i128 %zext208, ptr %0, align 8, !dbg !3253
  ret i64 0, !dbg !3253

next_if209:                                       ; preds = %result_block201
  br label %check_subtype210, !dbg !3254

check_subtype210:                                 ; preds = %parent_type_block212, %next_if209
  %137 = phi i64 [ %28, %next_if209 ], [ %typeid.parent214, %parent_type_block212 ], !dbg !3254
  %eq211 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %137, !dbg !3254
  br i1 %eq211, label %result_block215, label %parent_type_block212, !dbg !3254

parent_type_block212:                             ; preds = %check_subtype210
  %138 = inttoptr i64 %137 to ptr, !dbg !3254
  %ptradd213 = getelementptr inbounds i8, ptr %138, i64 8, !dbg !3254
  %typeid.parent214 = load i64, ptr %ptradd213, align 8, !dbg !3254
  %139 = icmp eq i64 %typeid.parent214, 0, !dbg !3254
  br i1 %139, label %result_block215, label %check_subtype210, !dbg !3254

result_block215:                                  ; preds = %parent_type_block212, %check_subtype210
  %140 = phi i1 [ false, %parent_type_block212 ], [ true, %check_subtype210 ], !dbg !3254
  br i1 %140, label %switch.case216, label %next_if223, !dbg !3254

switch.case216:                                   ; preds = %result_block215
  call void @llvm.dbg.declare(metadata ptr %arg217, metadata !3255, metadata !DIExpression()), !dbg !3258
  %141 = load ptr, ptr %arg, align 8, !dbg !3258
  store ptr %141, ptr %arg217, align 8, !dbg !3258
  %142 = load ptr, ptr %arg217, align 8, !dbg !3259
  %checknull219 = icmp eq ptr %142, null, !dbg !3259
  %143 = call i1 @llvm.expect.i1(i1 %checknull219, i1 false), !dbg !3259
  br i1 %143, label %panic220, label %checkok221, !dbg !3259

checkok221:                                       ; preds = %switch.case216
  %144 = load i64, ptr %142, align 8, !dbg !3259
  %zext222 = zext i64 %144 to i128, !dbg !3259
  store i128 %zext222, ptr %0, align 8, !dbg !3259
  ret i64 0, !dbg !3259

next_if223:                                       ; preds = %result_block215
  br label %check_subtype224, !dbg !3260

check_subtype224:                                 ; preds = %parent_type_block226, %next_if223
  %145 = phi i64 [ %28, %next_if223 ], [ %typeid.parent228, %parent_type_block226 ], !dbg !3260
  %eq225 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %145, !dbg !3260
  br i1 %eq225, label %result_block229, label %parent_type_block226, !dbg !3260

parent_type_block226:                             ; preds = %check_subtype224
  %146 = inttoptr i64 %145 to ptr, !dbg !3260
  %ptradd227 = getelementptr inbounds i8, ptr %146, i64 8, !dbg !3260
  %typeid.parent228 = load i64, ptr %ptradd227, align 8, !dbg !3260
  %147 = icmp eq i64 %typeid.parent228, 0, !dbg !3260
  br i1 %147, label %result_block229, label %check_subtype224, !dbg !3260

result_block229:                                  ; preds = %parent_type_block226, %check_subtype224
  %148 = phi i1 [ false, %parent_type_block226 ], [ true, %check_subtype224 ], !dbg !3260
  br i1 %148, label %switch.case230, label %next_if236, !dbg !3260

switch.case230:                                   ; preds = %result_block229
  call void @llvm.dbg.declare(metadata ptr %arg231, metadata !3261, metadata !DIExpression()), !dbg !3263
  %149 = load ptr, ptr %arg, align 8, !dbg !3263
  store ptr %149, ptr %arg231, align 8, !dbg !3263
  %150 = load ptr, ptr %arg231, align 8, !dbg !3264
  %checknull233 = icmp eq ptr %150, null, !dbg !3264
  %151 = call i1 @llvm.expect.i1(i1 %checknull233, i1 false), !dbg !3264
  br i1 %151, label %panic234, label %checkok235, !dbg !3264

checkok235:                                       ; preds = %switch.case230
  %152 = load i128, ptr %150, align 8, !dbg !3264
  store i128 %152, ptr %0, align 8, !dbg !3264
  ret i64 0, !dbg !3264

next_if236:                                       ; preds = %result_block229
  br label %check_subtype237, !dbg !3265

check_subtype237:                                 ; preds = %parent_type_block239, %next_if236
  %153 = phi i64 [ %28, %next_if236 ], [ %typeid.parent241, %parent_type_block239 ], !dbg !3265
  %eq238 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %153, !dbg !3265
  br i1 %eq238, label %result_block242, label %parent_type_block239, !dbg !3265

parent_type_block239:                             ; preds = %check_subtype237
  %154 = inttoptr i64 %153 to ptr, !dbg !3265
  %ptradd240 = getelementptr inbounds i8, ptr %154, i64 8, !dbg !3265
  %typeid.parent241 = load i64, ptr %ptradd240, align 8, !dbg !3265
  %155 = icmp eq i64 %typeid.parent241, 0, !dbg !3265
  br i1 %155, label %result_block242, label %check_subtype237, !dbg !3265

result_block242:                                  ; preds = %parent_type_block239, %check_subtype237
  %156 = phi i1 [ false, %parent_type_block239 ], [ true, %check_subtype237 ], !dbg !3265
  br i1 %156, label %switch.case243, label %next_if257, !dbg !3265

switch.case243:                                   ; preds = %result_block242
  call void @llvm.dbg.declare(metadata ptr %arg244, metadata !3266, metadata !DIExpression()), !dbg !3270
  %157 = load ptr, ptr %arg, align 8, !dbg !3270
  store ptr %157, ptr %arg244, align 8, !dbg !3270
  call void @llvm.dbg.declare(metadata ptr %f, metadata !3271, metadata !DIExpression()), !dbg !3272
  %158 = load ptr, ptr %arg244, align 8, !dbg !3273
  %checknull245 = icmp eq ptr %158, null, !dbg !3273
  %159 = call i1 @llvm.expect.i1(i1 %checknull245, i1 false), !dbg !3273
  br i1 %159, label %panic246, label %checkok247, !dbg !3273

checkok247:                                       ; preds = %switch.case243
  %160 = load float, ptr %158, align 4, !dbg !3273
  store float %160, ptr %f, align 4, !dbg !3273
  %161 = load ptr, ptr %is_neg, align 8, !dbg !3274
  %checknull249 = icmp eq ptr %161, null, !dbg !3274
  %162 = call i1 @llvm.expect.i1(i1 %checknull249, i1 false), !dbg !3274
  br i1 %162, label %panic250, label %checkok251, !dbg !3274

checkok251:                                       ; preds = %checkok247
  %163 = load float, ptr %f, align 4, !dbg !3275
  %lt252 = fcmp olt float %163, 0.000000e+00, !dbg !3275
  %164 = zext i1 %lt252 to i8, !dbg !3275
  store i8 %164, ptr %161, align 1, !dbg !3275
  %165 = trunc i8 %164 to i1, !dbg !3275
  br i1 %165, label %cond.lhs253, label %cond.rhs254, !dbg !3275

cond.lhs253:                                      ; preds = %checkok251
  %166 = load float, ptr %f, align 4, !dbg !3276
  %fneg = fneg float %166, !dbg !3276
  br label %cond.phi255, !dbg !3276

cond.rhs254:                                      ; preds = %checkok251
  %167 = load float, ptr %f, align 4, !dbg !3277
  br label %cond.phi255, !dbg !3277

cond.phi255:                                      ; preds = %cond.rhs254, %cond.lhs253
  %val256 = phi float [ %fneg, %cond.lhs253 ], [ %167, %cond.rhs254 ], !dbg !3277
  %fpui = fptoui float %val256 to i128, !dbg !3277
  store i128 %fpui, ptr %0, align 8, !dbg !3277
  ret i64 0, !dbg !3277

next_if257:                                       ; preds = %result_block242
  br label %check_subtype258, !dbg !3278

check_subtype258:                                 ; preds = %parent_type_block260, %next_if257
  %168 = phi i64 [ %28, %next_if257 ], [ %typeid.parent262, %parent_type_block260 ], !dbg !3278
  %eq259 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %168, !dbg !3278
  br i1 %eq259, label %result_block263, label %parent_type_block260, !dbg !3278

parent_type_block260:                             ; preds = %check_subtype258
  %169 = inttoptr i64 %168 to ptr, !dbg !3278
  %ptradd261 = getelementptr inbounds i8, ptr %169, i64 8, !dbg !3278
  %typeid.parent262 = load i64, ptr %ptradd261, align 8, !dbg !3278
  %170 = icmp eq i64 %typeid.parent262, 0, !dbg !3278
  br i1 %170, label %result_block263, label %check_subtype258, !dbg !3278

result_block263:                                  ; preds = %parent_type_block260, %check_subtype258
  %171 = phi i1 [ false, %parent_type_block260 ], [ true, %check_subtype258 ], !dbg !3278
  br i1 %171, label %switch.case264, label %next_if280, !dbg !3278

switch.case264:                                   ; preds = %result_block263
  call void @llvm.dbg.declare(metadata ptr %arg265, metadata !3279, metadata !DIExpression()), !dbg !3282
  %172 = load ptr, ptr %arg, align 8, !dbg !3282
  store ptr %172, ptr %arg265, align 8, !dbg !3282
  call void @llvm.dbg.declare(metadata ptr %d, metadata !3283, metadata !DIExpression()), !dbg !3284
  %173 = load ptr, ptr %arg265, align 8, !dbg !3285
  %checknull266 = icmp eq ptr %173, null, !dbg !3285
  %174 = call i1 @llvm.expect.i1(i1 %checknull266, i1 false), !dbg !3285
  br i1 %174, label %panic267, label %checkok268, !dbg !3285

checkok268:                                       ; preds = %switch.case264
  %175 = load double, ptr %173, align 8, !dbg !3285
  store double %175, ptr %d, align 8, !dbg !3285
  %176 = load ptr, ptr %is_neg, align 8, !dbg !3286
  %checknull270 = icmp eq ptr %176, null, !dbg !3286
  %177 = call i1 @llvm.expect.i1(i1 %checknull270, i1 false), !dbg !3286
  br i1 %177, label %panic271, label %checkok272, !dbg !3286

checkok272:                                       ; preds = %checkok268
  %178 = load double, ptr %d, align 8, !dbg !3287
  %lt273 = fcmp olt double %178, 0.000000e+00, !dbg !3287
  %179 = zext i1 %lt273 to i8, !dbg !3287
  store i8 %179, ptr %176, align 1, !dbg !3287
  %180 = trunc i8 %179 to i1, !dbg !3287
  br i1 %180, label %cond.lhs274, label %cond.rhs276, !dbg !3287

cond.lhs274:                                      ; preds = %checkok272
  %181 = load double, ptr %d, align 8, !dbg !3288
  %fneg275 = fneg double %181, !dbg !3288
  br label %cond.phi277, !dbg !3288

cond.rhs276:                                      ; preds = %checkok272
  %182 = load double, ptr %d, align 8, !dbg !3289
  br label %cond.phi277, !dbg !3289

cond.phi277:                                      ; preds = %cond.rhs276, %cond.lhs274
  %val278 = phi double [ %fneg275, %cond.lhs274 ], [ %182, %cond.rhs276 ], !dbg !3289
  %fpui279 = fptoui double %val278 to i128, !dbg !3289
  store i128 %fpui279, ptr %0, align 8, !dbg !3289
  ret i64 0, !dbg !3289

next_if280:                                       ; preds = %result_block263
  br label %switch.default281, !dbg !3289

switch.default281:                                ; preds = %next_if280
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3290

panic:                                            ; preds = %switch.case
  %183 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3151
  call void %183(ptr @.panic_msg.116, i64 47, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 30), !dbg !3151
  unreachable, !dbg !3151

panic3:                                           ; preds = %checkok
  %184 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3155
  call void %184(ptr @.panic_msg.119, i64 55, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 31), !dbg !3155
  unreachable, !dbg !3155

panic8:                                           ; preds = %switch.case5
  %185 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3156
  call void %185(ptr @.panic_msg.36, i64 45, ptr @.file.49, i64 10, ptr @.func.118, i64 12, i32 199), !dbg !3156
  unreachable, !dbg !3156

panic11:                                          ; preds = %checkok9
  %186 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3160
  call void %186(ptr @.panic_msg.36, i64 45, ptr @.file.49, i64 10, ptr @.func.118, i64 12, i32 199), !dbg !3160
  unreachable, !dbg !3160

panic33:                                          ; preds = %switch.exit
  %187 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3164
  call void %187(ptr @.panic_msg.116, i64 47, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 38), !dbg !3164
  unreachable, !dbg !3164

panic44:                                          ; preds = %switch.case40
  %188 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3172
  call void %188(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 42), !dbg !3172
  unreachable, !dbg !3172

panic55:                                          ; preds = %switch.case52
  %189 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3180
  call void %189(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 44), !dbg !3180
  unreachable, !dbg !3180

panic59:                                          ; preds = %checkok56
  %190 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3181
  call void %190(ptr @.panic_msg.116, i64 47, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 45), !dbg !3181
  unreachable, !dbg !3181

panic75:                                          ; preds = %switch.case71
  %191 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3193
  call void %191(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 47), !dbg !3193
  unreachable, !dbg !3193

panic80:                                          ; preds = %checkok76
  %192 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3194
  call void %192(ptr @.panic_msg.116, i64 47, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 48), !dbg !3194
  unreachable, !dbg !3194

panic102:                                         ; preds = %switch.case98
  %193 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3206
  call void %193(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 50), !dbg !3206
  unreachable, !dbg !3206

panic106:                                         ; preds = %checkok103
  %194 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3207
  call void %194(ptr @.panic_msg.116, i64 47, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 51), !dbg !3207
  unreachable, !dbg !3207

panic128:                                         ; preds = %switch.case124
  %195 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3219
  call void %195(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 53), !dbg !3219
  unreachable, !dbg !3219

panic132:                                         ; preds = %checkok129
  %196 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3220
  call void %196(ptr @.panic_msg.116, i64 47, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 54), !dbg !3220
  unreachable, !dbg !3220

panic154:                                         ; preds = %switch.case150
  %197 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3232
  call void %197(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 56), !dbg !3232
  unreachable, !dbg !3232

panic158:                                         ; preds = %checkok155
  %198 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3233
  call void %198(ptr @.panic_msg.116, i64 47, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 57), !dbg !3233
  unreachable, !dbg !3233

panic178:                                         ; preds = %switch.case174
  %199 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3242
  call void %199(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 59), !dbg !3242
  unreachable, !dbg !3242

panic192:                                         ; preds = %switch.case188
  %200 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3248
  call void %200(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 61), !dbg !3248
  unreachable, !dbg !3248

panic206:                                         ; preds = %switch.case202
  %201 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3253
  call void %201(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 63), !dbg !3253
  unreachable, !dbg !3253

panic220:                                         ; preds = %switch.case216
  %202 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3259
  call void %202(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 65), !dbg !3259
  unreachable, !dbg !3259

panic234:                                         ; preds = %switch.case230
  %203 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3264
  call void %203(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 67), !dbg !3264
  unreachable, !dbg !3264

panic246:                                         ; preds = %switch.case243
  %204 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3273
  call void %204(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 69), !dbg !3273
  unreachable, !dbg !3273

panic250:                                         ; preds = %checkok247
  %205 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3274
  call void %205(ptr @.panic_msg.116, i64 47, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 70), !dbg !3274
  unreachable, !dbg !3274

panic267:                                         ; preds = %switch.case264
  %206 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3285
  call void %206(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 72), !dbg !3285
  unreachable, !dbg !3285

panic271:                                         ; preds = %checkok268
  %207 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3286
  call void %207(ptr @.panic_msg.116, i64 47, ptr @.file.117, i64 20, ptr @.func.118, i64 12, i32 73), !dbg !3286
  unreachable, !dbg !3286
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.float_from_any(ptr %0, i64 %1, ptr %2) #0 !dbg !3292 {
entry:
  %arg = alloca %any, align 8
  %reterr = alloca i64, align 8
  %self = alloca ptr, align 8
  %retparam = alloca double, align 8
  %taddr = alloca %any, align 8
  %switch = alloca i64, align 8
  %arg28 = alloca ptr, align 8
  %reterr29 = alloca i64, align 8
  %arg40 = alloca ptr, align 8
  %reterr41 = alloca i64, align 8
  %arg53 = alloca ptr, align 8
  %reterr54 = alloca i64, align 8
  %arg67 = alloca ptr, align 8
  %reterr68 = alloca i64, align 8
  %arg81 = alloca ptr, align 8
  %reterr82 = alloca i64, align 8
  %arg95 = alloca ptr, align 8
  %reterr96 = alloca i64, align 8
  %arg109 = alloca ptr, align 8
  %reterr110 = alloca i64, align 8
  %arg122 = alloca ptr, align 8
  %reterr123 = alloca i64, align 8
  %arg136 = alloca ptr, align 8
  %reterr137 = alloca i64, align 8
  %arg150 = alloca ptr, align 8
  %reterr151 = alloca i64, align 8
  %arg164 = alloca ptr, align 8
  %reterr165 = alloca i64, align 8
  %arg178 = alloca ptr, align 8
  %reterr179 = alloca i64, align 8
  %arg191 = alloca ptr, align 8
  %reterr192 = alloca i64, align 8
  store i64 %1, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !3297, metadata !DIExpression()), !dbg !3298
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3299
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3299
  %"introspect*" = inttoptr i64 %3 to ptr, !dbg !3299
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !3299
  %eq = icmp eq i8 %typeid.kind, 18, !dbg !3299
  br i1 %eq, label %if.then, label %if.exit, !dbg !3299

if.then:                                          ; preds = %entry
  store ptr %arg, ptr %self, align 8
  %4 = load ptr, ptr %self, align 8, !dbg !3300
  %checknull = icmp eq ptr %4, null, !dbg !3300
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3300
  br i1 %5, label %panic, label %checkok, !dbg !3300

checkok:                                          ; preds = %if.then
  %6 = load ptr, ptr %4, align 8, !dbg !3300
  %7 = load ptr, ptr %self, align 8, !dbg !3304
  %checknull2 = icmp eq ptr %7, null, !dbg !3304
  %8 = call i1 @llvm.expect.i1(i1 %checknull2, i1 false), !dbg !3304
  br i1 %8, label %panic3, label %checkok4, !dbg !3304

checkok4:                                         ; preds = %checkok
  %ptradd5 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !3304
  %9 = load i64, ptr %ptradd5, align 8, !dbg !3304
  %"introspect*6" = inttoptr i64 %9 to ptr, !dbg !3304
  %typeid.kind7 = load i8, ptr %"introspect*6", align 8, !dbg !3304
  %eq8 = icmp eq i8 %typeid.kind7, 15, !dbg !3304
  br i1 %eq8, label %check_type_ok, label %check_next, !dbg !3304

check_next:                                       ; preds = %checkok4
  %eq9 = icmp eq i8 %typeid.kind7, 19, !dbg !3304
  br i1 %eq9, label %check_type_ok, label %check_next10, !dbg !3304

check_next10:                                     ; preds = %check_next
  %eq11 = icmp eq i8 %typeid.kind7, 17, !dbg !3304
  br i1 %eq11, label %check_type_ok, label %check_next12, !dbg !3304

check_next12:                                     ; preds = %check_next10
  %eq13 = icmp eq i8 %typeid.kind7, 8, !dbg !3304
  br i1 %eq13, label %check_type_ok, label %check_next14, !dbg !3304

check_next14:                                     ; preds = %check_next12
  %eq15 = icmp eq i8 %typeid.kind7, 16, !dbg !3304
  br i1 %eq15, label %check_type_ok, label %check_next16, !dbg !3304

check_next16:                                     ; preds = %check_next14
  %eq17 = icmp eq i8 %typeid.kind7, 18, !dbg !3304
  br i1 %eq17, label %check_type_ok, label %check_next18, !dbg !3304

check_next18:                                     ; preds = %check_next16
  %eq19 = icmp eq i8 %typeid.kind7, 14, !dbg !3304
  br i1 %eq19, label %check_type_ok, label %check_next20, !dbg !3304

check_next20:                                     ; preds = %check_next18
  %eq21 = icmp eq i8 %typeid.kind7, 12, !dbg !3304
  br i1 %eq21, label %check_type_ok, label %check_next22, !dbg !3304

check_next22:                                     ; preds = %check_next20
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3304
  call void %10(ptr @.panic_msg.120, i64 49, ptr @.file.49, i64 10, ptr @.func.122, i64 14, i32 199), !dbg !3304
  unreachable, !dbg !3304

check_type_ok:                                    ; preds = %check_next20, %check_next18, %check_next16, %check_next14, %check_next12, %check_next10, %check_next, %checkok4
  %ptradd23 = getelementptr inbounds i8, ptr %"introspect*6", i64 32, !dbg !3304
  %typeid.inner = load i64, ptr %ptradd23, align 8, !dbg !3304
  %11 = insertvalue %any undef, ptr %6, 0, !dbg !3304
  %12 = insertvalue %any %11, i64 %typeid.inner, 1, !dbg !3304
  store %any %12, ptr %taddr, align 8
  %lo = load i64, ptr %taddr, align 8
  %ptradd24 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi = load ptr, ptr %ptradd24, align 8
  %13 = call i64 @std.io.float_from_any(ptr %retparam, i64 %lo, ptr %hi), !dbg !3305
  %not_err = icmp eq i64 %13, 0, !dbg !3305
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3305
  br i1 %14, label %after_check, label %assign_optional, !dbg !3305

assign_optional:                                  ; preds = %check_type_ok
  store i64 %13, ptr %reterr, align 8, !dbg !3305
  br label %err_retblock, !dbg !3305

after_check:                                      ; preds = %check_type_ok
  %15 = load double, ptr %retparam, align 8, !dbg !3305
  store double %15, ptr %0, align 8, !dbg !3305
  ret i64 0, !dbg !3305

err_retblock:                                     ; preds = %assign_optional
  %16 = load i64, ptr %reterr, align 8, !dbg !3305
  ret i64 %16, !dbg !3305

if.exit:                                          ; preds = %entry
  %ptradd25 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3306
  %17 = load i64, ptr %ptradd25, align 8
  store i64 %17, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit
  %18 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !3308

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %19 = phi i64 [ %18, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !3308
  %eq26 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %19, !dbg !3308
  br i1 %eq26, label %result_block, label %parent_type_block, !dbg !3308

parent_type_block:                                ; preds = %check_subtype
  %20 = inttoptr i64 %19 to ptr, !dbg !3308
  %ptradd27 = getelementptr inbounds i8, ptr %20, i64 8, !dbg !3308
  %typeid.parent = load i64, ptr %ptradd27, align 8, !dbg !3308
  %21 = icmp eq i64 %typeid.parent, 0, !dbg !3308
  br i1 %21, label %result_block, label %check_subtype, !dbg !3308

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %22 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !3308
  br i1 %22, label %switch.case, label %next_if, !dbg !3308

switch.case:                                      ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %arg28, metadata !3309, metadata !DIExpression()), !dbg !3311
  %23 = load ptr, ptr %arg, align 8, !dbg !3311
  store ptr %23, ptr %arg28, align 8, !dbg !3311
  %24 = load ptr, ptr %arg28, align 8, !dbg !3312
  %checknull30 = icmp eq ptr %24, null, !dbg !3312
  %25 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !3312
  br i1 %25, label %panic31, label %checkok32, !dbg !3312

checkok32:                                        ; preds = %switch.case
  %26 = load i8, ptr %24, align 1, !dbg !3312
  %27 = trunc i8 %26 to i1, !dbg !3312
  %boolfp = uitofp i1 %27 to double, !dbg !3312
  store double %boolfp, ptr %0, align 8, !dbg !3312
  ret i64 0, !dbg !3312

next_if:                                          ; preds = %result_block
  br label %check_subtype33, !dbg !3313

check_subtype33:                                  ; preds = %parent_type_block35, %next_if
  %28 = phi i64 [ %18, %next_if ], [ %typeid.parent37, %parent_type_block35 ], !dbg !3313
  %eq34 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %28, !dbg !3313
  br i1 %eq34, label %result_block38, label %parent_type_block35, !dbg !3313

parent_type_block35:                              ; preds = %check_subtype33
  %29 = inttoptr i64 %28 to ptr, !dbg !3313
  %ptradd36 = getelementptr inbounds i8, ptr %29, i64 8, !dbg !3313
  %typeid.parent37 = load i64, ptr %ptradd36, align 8, !dbg !3313
  %30 = icmp eq i64 %typeid.parent37, 0, !dbg !3313
  br i1 %30, label %result_block38, label %check_subtype33, !dbg !3313

result_block38:                                   ; preds = %parent_type_block35, %check_subtype33
  %31 = phi i1 [ false, %parent_type_block35 ], [ true, %check_subtype33 ], !dbg !3313
  br i1 %31, label %switch.case39, label %next_if45, !dbg !3313

switch.case39:                                    ; preds = %result_block38
  call void @llvm.dbg.declare(metadata ptr %arg40, metadata !3314, metadata !DIExpression()), !dbg !3316
  %32 = load ptr, ptr %arg, align 8, !dbg !3316
  store ptr %32, ptr %arg40, align 8, !dbg !3316
  %33 = load ptr, ptr %arg40, align 8, !dbg !3317
  %checknull42 = icmp eq ptr %33, null, !dbg !3317
  %34 = call i1 @llvm.expect.i1(i1 %checknull42, i1 false), !dbg !3317
  br i1 %34, label %panic43, label %checkok44, !dbg !3317

checkok44:                                        ; preds = %switch.case39
  %35 = load i8, ptr %33, align 1, !dbg !3317
  %sifp = sitofp i8 %35 to double, !dbg !3317
  store double %sifp, ptr %0, align 8, !dbg !3317
  ret i64 0, !dbg !3317

next_if45:                                        ; preds = %result_block38
  br label %check_subtype46, !dbg !3318

check_subtype46:                                  ; preds = %parent_type_block48, %next_if45
  %36 = phi i64 [ %18, %next_if45 ], [ %typeid.parent50, %parent_type_block48 ], !dbg !3318
  %eq47 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %36, !dbg !3318
  br i1 %eq47, label %result_block51, label %parent_type_block48, !dbg !3318

parent_type_block48:                              ; preds = %check_subtype46
  %37 = inttoptr i64 %36 to ptr, !dbg !3318
  %ptradd49 = getelementptr inbounds i8, ptr %37, i64 8, !dbg !3318
  %typeid.parent50 = load i64, ptr %ptradd49, align 8, !dbg !3318
  %38 = icmp eq i64 %typeid.parent50, 0, !dbg !3318
  br i1 %38, label %result_block51, label %check_subtype46, !dbg !3318

result_block51:                                   ; preds = %parent_type_block48, %check_subtype46
  %39 = phi i1 [ false, %parent_type_block48 ], [ true, %check_subtype46 ], !dbg !3318
  br i1 %39, label %switch.case52, label %next_if59, !dbg !3318

switch.case52:                                    ; preds = %result_block51
  call void @llvm.dbg.declare(metadata ptr %arg53, metadata !3319, metadata !DIExpression()), !dbg !3321
  %40 = load ptr, ptr %arg, align 8, !dbg !3321
  store ptr %40, ptr %arg53, align 8, !dbg !3321
  %41 = load ptr, ptr %arg53, align 8, !dbg !3322
  %checknull55 = icmp eq ptr %41, null, !dbg !3322
  %42 = call i1 @llvm.expect.i1(i1 %checknull55, i1 false), !dbg !3322
  br i1 %42, label %panic56, label %checkok57, !dbg !3322

checkok57:                                        ; preds = %switch.case52
  %43 = load i16, ptr %41, align 2, !dbg !3322
  %sifp58 = sitofp i16 %43 to double, !dbg !3322
  store double %sifp58, ptr %0, align 8, !dbg !3322
  ret i64 0, !dbg !3322

next_if59:                                        ; preds = %result_block51
  br label %check_subtype60, !dbg !3323

check_subtype60:                                  ; preds = %parent_type_block62, %next_if59
  %44 = phi i64 [ %18, %next_if59 ], [ %typeid.parent64, %parent_type_block62 ], !dbg !3323
  %eq61 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %44, !dbg !3323
  br i1 %eq61, label %result_block65, label %parent_type_block62, !dbg !3323

parent_type_block62:                              ; preds = %check_subtype60
  %45 = inttoptr i64 %44 to ptr, !dbg !3323
  %ptradd63 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !3323
  %typeid.parent64 = load i64, ptr %ptradd63, align 8, !dbg !3323
  %46 = icmp eq i64 %typeid.parent64, 0, !dbg !3323
  br i1 %46, label %result_block65, label %check_subtype60, !dbg !3323

result_block65:                                   ; preds = %parent_type_block62, %check_subtype60
  %47 = phi i1 [ false, %parent_type_block62 ], [ true, %check_subtype60 ], !dbg !3323
  br i1 %47, label %switch.case66, label %next_if73, !dbg !3323

switch.case66:                                    ; preds = %result_block65
  call void @llvm.dbg.declare(metadata ptr %arg67, metadata !3324, metadata !DIExpression()), !dbg !3326
  %48 = load ptr, ptr %arg, align 8, !dbg !3326
  store ptr %48, ptr %arg67, align 8, !dbg !3326
  %49 = load ptr, ptr %arg67, align 8, !dbg !3327
  %checknull69 = icmp eq ptr %49, null, !dbg !3327
  %50 = call i1 @llvm.expect.i1(i1 %checknull69, i1 false), !dbg !3327
  br i1 %50, label %panic70, label %checkok71, !dbg !3327

checkok71:                                        ; preds = %switch.case66
  %51 = load i32, ptr %49, align 4, !dbg !3327
  %sifp72 = sitofp i32 %51 to double, !dbg !3327
  store double %sifp72, ptr %0, align 8, !dbg !3327
  ret i64 0, !dbg !3327

next_if73:                                        ; preds = %result_block65
  br label %check_subtype74, !dbg !3328

check_subtype74:                                  ; preds = %parent_type_block76, %next_if73
  %52 = phi i64 [ %18, %next_if73 ], [ %typeid.parent78, %parent_type_block76 ], !dbg !3328
  %eq75 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %52, !dbg !3328
  br i1 %eq75, label %result_block79, label %parent_type_block76, !dbg !3328

parent_type_block76:                              ; preds = %check_subtype74
  %53 = inttoptr i64 %52 to ptr, !dbg !3328
  %ptradd77 = getelementptr inbounds i8, ptr %53, i64 8, !dbg !3328
  %typeid.parent78 = load i64, ptr %ptradd77, align 8, !dbg !3328
  %54 = icmp eq i64 %typeid.parent78, 0, !dbg !3328
  br i1 %54, label %result_block79, label %check_subtype74, !dbg !3328

result_block79:                                   ; preds = %parent_type_block76, %check_subtype74
  %55 = phi i1 [ false, %parent_type_block76 ], [ true, %check_subtype74 ], !dbg !3328
  br i1 %55, label %switch.case80, label %next_if87, !dbg !3328

switch.case80:                                    ; preds = %result_block79
  call void @llvm.dbg.declare(metadata ptr %arg81, metadata !3329, metadata !DIExpression()), !dbg !3331
  %56 = load ptr, ptr %arg, align 8, !dbg !3331
  store ptr %56, ptr %arg81, align 8, !dbg !3331
  %57 = load ptr, ptr %arg81, align 8, !dbg !3332
  %checknull83 = icmp eq ptr %57, null, !dbg !3332
  %58 = call i1 @llvm.expect.i1(i1 %checknull83, i1 false), !dbg !3332
  br i1 %58, label %panic84, label %checkok85, !dbg !3332

checkok85:                                        ; preds = %switch.case80
  %59 = load i64, ptr %57, align 8, !dbg !3332
  %sifp86 = sitofp i64 %59 to double, !dbg !3332
  store double %sifp86, ptr %0, align 8, !dbg !3332
  ret i64 0, !dbg !3332

next_if87:                                        ; preds = %result_block79
  br label %check_subtype88, !dbg !3333

check_subtype88:                                  ; preds = %parent_type_block90, %next_if87
  %60 = phi i64 [ %18, %next_if87 ], [ %typeid.parent92, %parent_type_block90 ], !dbg !3333
  %eq89 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %60, !dbg !3333
  br i1 %eq89, label %result_block93, label %parent_type_block90, !dbg !3333

parent_type_block90:                              ; preds = %check_subtype88
  %61 = inttoptr i64 %60 to ptr, !dbg !3333
  %ptradd91 = getelementptr inbounds i8, ptr %61, i64 8, !dbg !3333
  %typeid.parent92 = load i64, ptr %ptradd91, align 8, !dbg !3333
  %62 = icmp eq i64 %typeid.parent92, 0, !dbg !3333
  br i1 %62, label %result_block93, label %check_subtype88, !dbg !3333

result_block93:                                   ; preds = %parent_type_block90, %check_subtype88
  %63 = phi i1 [ false, %parent_type_block90 ], [ true, %check_subtype88 ], !dbg !3333
  br i1 %63, label %switch.case94, label %next_if101, !dbg !3333

switch.case94:                                    ; preds = %result_block93
  call void @llvm.dbg.declare(metadata ptr %arg95, metadata !3334, metadata !DIExpression()), !dbg !3336
  %64 = load ptr, ptr %arg, align 8, !dbg !3336
  store ptr %64, ptr %arg95, align 8, !dbg !3336
  %65 = load ptr, ptr %arg95, align 8, !dbg !3337
  %checknull97 = icmp eq ptr %65, null, !dbg !3337
  %66 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !3337
  br i1 %66, label %panic98, label %checkok99, !dbg !3337

checkok99:                                        ; preds = %switch.case94
  %67 = load i128, ptr %65, align 8, !dbg !3337
  %sifp100 = sitofp i128 %67 to double, !dbg !3337
  store double %sifp100, ptr %0, align 8, !dbg !3337
  ret i64 0, !dbg !3337

next_if101:                                       ; preds = %result_block93
  br label %check_subtype102, !dbg !3338

check_subtype102:                                 ; preds = %parent_type_block104, %next_if101
  %68 = phi i64 [ %18, %next_if101 ], [ %typeid.parent106, %parent_type_block104 ], !dbg !3338
  %eq103 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %68, !dbg !3338
  br i1 %eq103, label %result_block107, label %parent_type_block104, !dbg !3338

parent_type_block104:                             ; preds = %check_subtype102
  %69 = inttoptr i64 %68 to ptr, !dbg !3338
  %ptradd105 = getelementptr inbounds i8, ptr %69, i64 8, !dbg !3338
  %typeid.parent106 = load i64, ptr %ptradd105, align 8, !dbg !3338
  %70 = icmp eq i64 %typeid.parent106, 0, !dbg !3338
  br i1 %70, label %result_block107, label %check_subtype102, !dbg !3338

result_block107:                                  ; preds = %parent_type_block104, %check_subtype102
  %71 = phi i1 [ false, %parent_type_block104 ], [ true, %check_subtype102 ], !dbg !3338
  br i1 %71, label %switch.case108, label %next_if114, !dbg !3338

switch.case108:                                   ; preds = %result_block107
  call void @llvm.dbg.declare(metadata ptr %arg109, metadata !3339, metadata !DIExpression()), !dbg !3341
  %72 = load ptr, ptr %arg, align 8, !dbg !3341
  store ptr %72, ptr %arg109, align 8, !dbg !3341
  %73 = load ptr, ptr %arg109, align 8, !dbg !3342
  %checknull111 = icmp eq ptr %73, null, !dbg !3342
  %74 = call i1 @llvm.expect.i1(i1 %checknull111, i1 false), !dbg !3342
  br i1 %74, label %panic112, label %checkok113, !dbg !3342

checkok113:                                       ; preds = %switch.case108
  %75 = load i8, ptr %73, align 1, !dbg !3342
  %uifp = uitofp i8 %75 to double, !dbg !3342
  store double %uifp, ptr %0, align 8, !dbg !3342
  ret i64 0, !dbg !3342

next_if114:                                       ; preds = %result_block107
  br label %check_subtype115, !dbg !3343

check_subtype115:                                 ; preds = %parent_type_block117, %next_if114
  %76 = phi i64 [ %18, %next_if114 ], [ %typeid.parent119, %parent_type_block117 ], !dbg !3343
  %eq116 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %76, !dbg !3343
  br i1 %eq116, label %result_block120, label %parent_type_block117, !dbg !3343

parent_type_block117:                             ; preds = %check_subtype115
  %77 = inttoptr i64 %76 to ptr, !dbg !3343
  %ptradd118 = getelementptr inbounds i8, ptr %77, i64 8, !dbg !3343
  %typeid.parent119 = load i64, ptr %ptradd118, align 8, !dbg !3343
  %78 = icmp eq i64 %typeid.parent119, 0, !dbg !3343
  br i1 %78, label %result_block120, label %check_subtype115, !dbg !3343

result_block120:                                  ; preds = %parent_type_block117, %check_subtype115
  %79 = phi i1 [ false, %parent_type_block117 ], [ true, %check_subtype115 ], !dbg !3343
  br i1 %79, label %switch.case121, label %next_if128, !dbg !3343

switch.case121:                                   ; preds = %result_block120
  call void @llvm.dbg.declare(metadata ptr %arg122, metadata !3344, metadata !DIExpression()), !dbg !3346
  %80 = load ptr, ptr %arg, align 8, !dbg !3346
  store ptr %80, ptr %arg122, align 8, !dbg !3346
  %81 = load ptr, ptr %arg122, align 8, !dbg !3347
  %checknull124 = icmp eq ptr %81, null, !dbg !3347
  %82 = call i1 @llvm.expect.i1(i1 %checknull124, i1 false), !dbg !3347
  br i1 %82, label %panic125, label %checkok126, !dbg !3347

checkok126:                                       ; preds = %switch.case121
  %83 = load i16, ptr %81, align 2, !dbg !3347
  %uifp127 = uitofp i16 %83 to double, !dbg !3347
  store double %uifp127, ptr %0, align 8, !dbg !3347
  ret i64 0, !dbg !3347

next_if128:                                       ; preds = %result_block120
  br label %check_subtype129, !dbg !3348

check_subtype129:                                 ; preds = %parent_type_block131, %next_if128
  %84 = phi i64 [ %18, %next_if128 ], [ %typeid.parent133, %parent_type_block131 ], !dbg !3348
  %eq130 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %84, !dbg !3348
  br i1 %eq130, label %result_block134, label %parent_type_block131, !dbg !3348

parent_type_block131:                             ; preds = %check_subtype129
  %85 = inttoptr i64 %84 to ptr, !dbg !3348
  %ptradd132 = getelementptr inbounds i8, ptr %85, i64 8, !dbg !3348
  %typeid.parent133 = load i64, ptr %ptradd132, align 8, !dbg !3348
  %86 = icmp eq i64 %typeid.parent133, 0, !dbg !3348
  br i1 %86, label %result_block134, label %check_subtype129, !dbg !3348

result_block134:                                  ; preds = %parent_type_block131, %check_subtype129
  %87 = phi i1 [ false, %parent_type_block131 ], [ true, %check_subtype129 ], !dbg !3348
  br i1 %87, label %switch.case135, label %next_if142, !dbg !3348

switch.case135:                                   ; preds = %result_block134
  call void @llvm.dbg.declare(metadata ptr %arg136, metadata !3349, metadata !DIExpression()), !dbg !3351
  %88 = load ptr, ptr %arg, align 8, !dbg !3351
  store ptr %88, ptr %arg136, align 8, !dbg !3351
  %89 = load ptr, ptr %arg136, align 8, !dbg !3352
  %checknull138 = icmp eq ptr %89, null, !dbg !3352
  %90 = call i1 @llvm.expect.i1(i1 %checknull138, i1 false), !dbg !3352
  br i1 %90, label %panic139, label %checkok140, !dbg !3352

checkok140:                                       ; preds = %switch.case135
  %91 = load i32, ptr %89, align 4, !dbg !3352
  %uifp141 = uitofp i32 %91 to double, !dbg !3352
  store double %uifp141, ptr %0, align 8, !dbg !3352
  ret i64 0, !dbg !3352

next_if142:                                       ; preds = %result_block134
  br label %check_subtype143, !dbg !3353

check_subtype143:                                 ; preds = %parent_type_block145, %next_if142
  %92 = phi i64 [ %18, %next_if142 ], [ %typeid.parent147, %parent_type_block145 ], !dbg !3353
  %eq144 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %92, !dbg !3353
  br i1 %eq144, label %result_block148, label %parent_type_block145, !dbg !3353

parent_type_block145:                             ; preds = %check_subtype143
  %93 = inttoptr i64 %92 to ptr, !dbg !3353
  %ptradd146 = getelementptr inbounds i8, ptr %93, i64 8, !dbg !3353
  %typeid.parent147 = load i64, ptr %ptradd146, align 8, !dbg !3353
  %94 = icmp eq i64 %typeid.parent147, 0, !dbg !3353
  br i1 %94, label %result_block148, label %check_subtype143, !dbg !3353

result_block148:                                  ; preds = %parent_type_block145, %check_subtype143
  %95 = phi i1 [ false, %parent_type_block145 ], [ true, %check_subtype143 ], !dbg !3353
  br i1 %95, label %switch.case149, label %next_if156, !dbg !3353

switch.case149:                                   ; preds = %result_block148
  call void @llvm.dbg.declare(metadata ptr %arg150, metadata !3354, metadata !DIExpression()), !dbg !3356
  %96 = load ptr, ptr %arg, align 8, !dbg !3356
  store ptr %96, ptr %arg150, align 8, !dbg !3356
  %97 = load ptr, ptr %arg150, align 8, !dbg !3357
  %checknull152 = icmp eq ptr %97, null, !dbg !3357
  %98 = call i1 @llvm.expect.i1(i1 %checknull152, i1 false), !dbg !3357
  br i1 %98, label %panic153, label %checkok154, !dbg !3357

checkok154:                                       ; preds = %switch.case149
  %99 = load i64, ptr %97, align 8, !dbg !3357
  %uifp155 = uitofp i64 %99 to double, !dbg !3357
  store double %uifp155, ptr %0, align 8, !dbg !3357
  ret i64 0, !dbg !3357

next_if156:                                       ; preds = %result_block148
  br label %check_subtype157, !dbg !3358

check_subtype157:                                 ; preds = %parent_type_block159, %next_if156
  %100 = phi i64 [ %18, %next_if156 ], [ %typeid.parent161, %parent_type_block159 ], !dbg !3358
  %eq158 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %100, !dbg !3358
  br i1 %eq158, label %result_block162, label %parent_type_block159, !dbg !3358

parent_type_block159:                             ; preds = %check_subtype157
  %101 = inttoptr i64 %100 to ptr, !dbg !3358
  %ptradd160 = getelementptr inbounds i8, ptr %101, i64 8, !dbg !3358
  %typeid.parent161 = load i64, ptr %ptradd160, align 8, !dbg !3358
  %102 = icmp eq i64 %typeid.parent161, 0, !dbg !3358
  br i1 %102, label %result_block162, label %check_subtype157, !dbg !3358

result_block162:                                  ; preds = %parent_type_block159, %check_subtype157
  %103 = phi i1 [ false, %parent_type_block159 ], [ true, %check_subtype157 ], !dbg !3358
  br i1 %103, label %switch.case163, label %next_if170, !dbg !3358

switch.case163:                                   ; preds = %result_block162
  call void @llvm.dbg.declare(metadata ptr %arg164, metadata !3359, metadata !DIExpression()), !dbg !3361
  %104 = load ptr, ptr %arg, align 8, !dbg !3361
  store ptr %104, ptr %arg164, align 8, !dbg !3361
  %105 = load ptr, ptr %arg164, align 8, !dbg !3362
  %checknull166 = icmp eq ptr %105, null, !dbg !3362
  %106 = call i1 @llvm.expect.i1(i1 %checknull166, i1 false), !dbg !3362
  br i1 %106, label %panic167, label %checkok168, !dbg !3362

checkok168:                                       ; preds = %switch.case163
  %107 = load i128, ptr %105, align 8, !dbg !3362
  %uifp169 = uitofp i128 %107 to double, !dbg !3362
  store double %uifp169, ptr %0, align 8, !dbg !3362
  ret i64 0, !dbg !3362

next_if170:                                       ; preds = %result_block162
  br label %check_subtype171, !dbg !3363

check_subtype171:                                 ; preds = %parent_type_block173, %next_if170
  %108 = phi i64 [ %18, %next_if170 ], [ %typeid.parent175, %parent_type_block173 ], !dbg !3363
  %eq172 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %108, !dbg !3363
  br i1 %eq172, label %result_block176, label %parent_type_block173, !dbg !3363

parent_type_block173:                             ; preds = %check_subtype171
  %109 = inttoptr i64 %108 to ptr, !dbg !3363
  %ptradd174 = getelementptr inbounds i8, ptr %109, i64 8, !dbg !3363
  %typeid.parent175 = load i64, ptr %ptradd174, align 8, !dbg !3363
  %110 = icmp eq i64 %typeid.parent175, 0, !dbg !3363
  br i1 %110, label %result_block176, label %check_subtype171, !dbg !3363

result_block176:                                  ; preds = %parent_type_block173, %check_subtype171
  %111 = phi i1 [ false, %parent_type_block173 ], [ true, %check_subtype171 ], !dbg !3363
  br i1 %111, label %switch.case177, label %next_if183, !dbg !3363

switch.case177:                                   ; preds = %result_block176
  call void @llvm.dbg.declare(metadata ptr %arg178, metadata !3364, metadata !DIExpression()), !dbg !3366
  %112 = load ptr, ptr %arg, align 8, !dbg !3366
  store ptr %112, ptr %arg178, align 8, !dbg !3366
  %113 = load ptr, ptr %arg178, align 8, !dbg !3367
  %checknull180 = icmp eq ptr %113, null, !dbg !3367
  %114 = call i1 @llvm.expect.i1(i1 %checknull180, i1 false), !dbg !3367
  br i1 %114, label %panic181, label %checkok182, !dbg !3367

checkok182:                                       ; preds = %switch.case177
  %115 = load float, ptr %113, align 4, !dbg !3367
  %fpfpext = fpext float %115 to double, !dbg !3367
  store double %fpfpext, ptr %0, align 8, !dbg !3367
  ret i64 0, !dbg !3367

next_if183:                                       ; preds = %result_block176
  br label %check_subtype184, !dbg !3368

check_subtype184:                                 ; preds = %parent_type_block186, %next_if183
  %116 = phi i64 [ %18, %next_if183 ], [ %typeid.parent188, %parent_type_block186 ], !dbg !3368
  %eq185 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %116, !dbg !3368
  br i1 %eq185, label %result_block189, label %parent_type_block186, !dbg !3368

parent_type_block186:                             ; preds = %check_subtype184
  %117 = inttoptr i64 %116 to ptr, !dbg !3368
  %ptradd187 = getelementptr inbounds i8, ptr %117, i64 8, !dbg !3368
  %typeid.parent188 = load i64, ptr %ptradd187, align 8, !dbg !3368
  %118 = icmp eq i64 %typeid.parent188, 0, !dbg !3368
  br i1 %118, label %result_block189, label %check_subtype184, !dbg !3368

result_block189:                                  ; preds = %parent_type_block186, %check_subtype184
  %119 = phi i1 [ false, %parent_type_block186 ], [ true, %check_subtype184 ], !dbg !3368
  br i1 %119, label %switch.case190, label %next_if196, !dbg !3368

switch.case190:                                   ; preds = %result_block189
  call void @llvm.dbg.declare(metadata ptr %arg191, metadata !3369, metadata !DIExpression()), !dbg !3371
  %120 = load ptr, ptr %arg, align 8, !dbg !3371
  store ptr %120, ptr %arg191, align 8, !dbg !3371
  %121 = load ptr, ptr %arg191, align 8, !dbg !3372
  %checknull193 = icmp eq ptr %121, null, !dbg !3372
  %122 = call i1 @llvm.expect.i1(i1 %checknull193, i1 false), !dbg !3372
  br i1 %122, label %panic194, label %checkok195, !dbg !3372

checkok195:                                       ; preds = %switch.case190
  %123 = load double, ptr %121, align 8, !dbg !3372
  store double %123, ptr %0, align 8, !dbg !3372
  ret i64 0, !dbg !3372

next_if196:                                       ; preds = %result_block189
  br label %switch.default, !dbg !3372

switch.default:                                   ; preds = %next_if196
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3373

panic:                                            ; preds = %if.then
  %124 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3300
  call void %124(ptr @.panic_msg.36, i64 45, ptr @.file.49, i64 10, ptr @.func.122, i64 14, i32 199), !dbg !3300
  unreachable, !dbg !3300

panic3:                                           ; preds = %checkok
  %125 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3304
  call void %125(ptr @.panic_msg.36, i64 45, ptr @.file.49, i64 10, ptr @.func.122, i64 14, i32 199), !dbg !3304
  unreachable, !dbg !3304

panic31:                                          ; preds = %switch.case
  %126 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3312
  call void %126(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 91), !dbg !3312
  unreachable, !dbg !3312

panic43:                                          ; preds = %switch.case39
  %127 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3317
  call void %127(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 93), !dbg !3317
  unreachable, !dbg !3317

panic56:                                          ; preds = %switch.case52
  %128 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3322
  call void %128(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 95), !dbg !3322
  unreachable, !dbg !3322

panic70:                                          ; preds = %switch.case66
  %129 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3327
  call void %129(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 97), !dbg !3327
  unreachable, !dbg !3327

panic84:                                          ; preds = %switch.case80
  %130 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3332
  call void %130(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 99), !dbg !3332
  unreachable, !dbg !3332

panic98:                                          ; preds = %switch.case94
  %131 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3337
  call void %131(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 101), !dbg !3337
  unreachable, !dbg !3337

panic112:                                         ; preds = %switch.case108
  %132 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3342
  call void %132(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 103), !dbg !3342
  unreachable, !dbg !3342

panic125:                                         ; preds = %switch.case121
  %133 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3347
  call void %133(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 105), !dbg !3347
  unreachable, !dbg !3347

panic139:                                         ; preds = %switch.case135
  %134 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3352
  call void %134(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 107), !dbg !3352
  unreachable, !dbg !3352

panic153:                                         ; preds = %switch.case149
  %135 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3357
  call void %135(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 109), !dbg !3357
  unreachable, !dbg !3357

panic167:                                         ; preds = %switch.case163
  %136 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3362
  call void %136(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 111), !dbg !3362
  unreachable, !dbg !3362

panic181:                                         ; preds = %switch.case177
  %137 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3367
  call void %137(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 113), !dbg !3367
  unreachable, !dbg !3367

panic194:                                         ; preds = %switch.case190
  %138 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3372
  call void %138(ptr @.panic_msg.121, i64 44, ptr @.file.117, i64 20, ptr @.func.122, i64 14, i32 115), !dbg !3372
  unreachable, !dbg !3372
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @std.io.simple_atoi(ptr %0, i64 %1, ptr %2) #0 !dbg !3375 {
entry:
  %buf = alloca ptr, align 8
  %maxlen = alloca i64, align 8
  %len_ptr = alloca ptr, align 8
  %i = alloca i32, align 4
  %len = alloca i64, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %buf, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !3378, metadata !DIExpression()), !dbg !3379
  store i64 %1, ptr %maxlen, align 8
  call void @llvm.dbg.declare(metadata ptr %maxlen, metadata !3380, metadata !DIExpression()), !dbg !3381
  store ptr %2, ptr %len_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %len_ptr, metadata !3382, metadata !DIExpression()), !dbg !3383
  call void @llvm.dbg.declare(metadata ptr %i, metadata !3384, metadata !DIExpression()), !dbg !3385
  store i32 0, ptr %i, align 4, !dbg !3386
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3387, metadata !DIExpression()), !dbg !3388
  %3 = load ptr, ptr %len_ptr, align 8, !dbg !3389
  %checknull = icmp eq ptr %3, null, !dbg !3389
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3389
  br i1 %4, label %panic, label %checkok, !dbg !3389

checkok:                                          ; preds = %entry
  %5 = load i64, ptr %3, align 8, !dbg !3389
  store i64 %5, ptr %len, align 8, !dbg !3389
  br label %loop.cond, !dbg !3390

loop.cond:                                        ; preds = %if.exit, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !3391
  %7 = load i64, ptr %maxlen, align 8, !dbg !3393
  %lt = icmp ult i64 %6, %7, !dbg !3391
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3391

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3394, metadata !DIExpression()), !dbg !3396
  %8 = load ptr, ptr %buf, align 8, !dbg !3397
  %9 = load i64, ptr %len, align 8, !dbg !3398
  %ptradd = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !3398
  %10 = load i8, ptr %ptradd, align 1, !dbg !3398
  store i8 %10, ptr %c, align 1, !dbg !3398
  %11 = load i8, ptr %c, align 1, !dbg !3399
  %12 = call i8 @std.ascii.char.is_digit(i8 zeroext %11), !dbg !3399
  %13 = trunc i8 %12 to i1, !dbg !3399
  %not = xor i1 %13, true, !dbg !3399
  br i1 %not, label %if.then, label %if.exit, !dbg !3399

if.then:                                          ; preds = %loop.body
  br label %loop.exit, !dbg !3400

if.exit:                                          ; preds = %loop.body
  %14 = load i32, ptr %i, align 4, !dbg !3401
  %mul = mul i32 %14, 10, !dbg !3401
  %15 = load i8, ptr %c, align 1, !dbg !3402
  %zext = zext i8 %15 to i32, !dbg !3402
  %add = add i32 %mul, %zext, !dbg !3401
  %sub = sub i32 %add, 48, !dbg !3401
  store i32 %sub, ptr %i, align 4, !dbg !3401
  %16 = load i64, ptr %len, align 8, !dbg !3403
  %add1 = add i64 %16, 1, !dbg !3403
  store i64 %add1, ptr %len, align 8, !dbg !3403
  br label %loop.cond, !dbg !3403

loop.exit:                                        ; preds = %if.then, %loop.cond
  %17 = load ptr, ptr %len_ptr, align 8, !dbg !3404
  %checknull2 = icmp eq ptr %17, null, !dbg !3404
  %18 = call i1 @llvm.expect.i1(i1 %checknull2, i1 false), !dbg !3404
  br i1 %18, label %panic3, label %checkok4, !dbg !3404

checkok4:                                         ; preds = %loop.exit
  %19 = load i64, ptr %len, align 8, !dbg !3405
  store i64 %19, ptr %17, align 8, !dbg !3405
  %20 = load i32, ptr %i, align 4, !dbg !3406
  ret i32 %20, !dbg !3406

panic:                                            ; preds = %entry
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3389
  call void %21(ptr @.panic_msg.123, i64 48, ptr @.file.117, i64 20, ptr @.func.124, i64 11, i32 133), !dbg !3389
  unreachable, !dbg !3389

panic3:                                           ; preds = %loop.exit
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3404
  call void %22(ptr @.panic_msg.123, i64 48, ptr @.file.117, i64 20, ptr @.func.124, i64 11, i32 141), !dbg !3404
  unreachable, !dbg !3404
}

; Function Attrs: nounwind ssp uwtable
define weak ptr @std.io.fmt_u(i64 %0, i64 %1, ptr %2) #0 comdat !dbg !3407 {
entry:
  %x = alloca i128, align 8
  %s = alloca ptr, align 8
  %y = alloca i64, align 8
  store i64 %0, ptr %x, align 8
  %ptradd = getelementptr inbounds i8, ptr %x, i64 8
  store i64 %1, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %x, metadata !3410, metadata !DIExpression()), !dbg !3411
  store ptr %2, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3412, metadata !DIExpression()), !dbg !3413
  br label %loop.cond, !dbg !3414

loop.cond:                                        ; preds = %checkok, %entry
  %3 = load i128, ptr %x, align 8, !dbg !3415
  %gt = icmp ugt i128 %3, 18446744073709551615, !dbg !3415
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !3415

loop.body:                                        ; preds = %loop.cond
  %4 = load ptr, ptr %s, align 8, !dbg !3417
  %ptradd_any = getelementptr i8, ptr %4, i8 -1, !dbg !3417
  store ptr %ptradd_any, ptr %s, align 8, !dbg !3417
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !3417
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3417
  br i1 %5, label %panic, label %checkok, !dbg !3417

checkok:                                          ; preds = %loop.body
  %6 = load i128, ptr %x, align 8, !dbg !3418
  %smod = srem i128 %6, 10, !dbg !3419
  %trunc = trunc i128 %smod to i8, !dbg !3419
  %zext = zext i8 %trunc to i32, !dbg !3419
  %add = add i32 48, %zext, !dbg !3420
  %trunc1 = trunc i32 %add to i8, !dbg !3420
  store i8 %trunc1, ptr %ptradd_any, align 1, !dbg !3420
  %7 = load i128, ptr %x, align 8, !dbg !3421
  %udiv = udiv i128 %7, 10, !dbg !3421
  store i128 %udiv, ptr %x, align 8, !dbg !3421
  br label %loop.cond, !dbg !3421

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %y, metadata !3422, metadata !DIExpression()), !dbg !3424
  %8 = load i128, ptr %x, align 8, !dbg !3425
  %trunc2 = trunc i128 %8 to i64, !dbg !3425
  store i64 %trunc2, ptr %y, align 8, !dbg !3425
  br label %loop.cond3, !dbg !3425

loop.cond3:                                       ; preds = %checkok8, %loop.exit
  %9 = load i64, ptr %y, align 8, !dbg !3426
  %intbool = icmp ne i64 %9, 0, !dbg !3426
  br i1 %intbool, label %loop.body4, label %loop.exit15, !dbg !3426

loop.body4:                                       ; preds = %loop.cond3
  %10 = load ptr, ptr %s, align 8, !dbg !3427
  %ptradd_any5 = getelementptr i8, ptr %10, i8 -1, !dbg !3427
  store ptr %ptradd_any5, ptr %s, align 8, !dbg !3427
  %checknull6 = icmp eq ptr %ptradd_any5, null, !dbg !3427
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !3427
  br i1 %11, label %panic7, label %checkok8, !dbg !3427

checkok8:                                         ; preds = %loop.body4
  %12 = load i64, ptr %y, align 8, !dbg !3428
  %smod9 = srem i64 %12, 10, !dbg !3429
  %trunc10 = trunc i64 %smod9 to i8, !dbg !3429
  %zext11 = zext i8 %trunc10 to i32, !dbg !3429
  %add12 = add i32 48, %zext11, !dbg !3430
  %trunc13 = trunc i32 %add12 to i8, !dbg !3430
  store i8 %trunc13, ptr %ptradd_any5, align 1, !dbg !3430
  %13 = load i64, ptr %y, align 8, !dbg !3431
  %udiv14 = udiv i64 %13, 10, !dbg !3431
  store i64 %udiv14, ptr %y, align 8, !dbg !3431
  br label %loop.cond3, !dbg !3431

loop.exit15:                                      ; preds = %loop.cond3
  %14 = load ptr, ptr %s, align 8, !dbg !3432
  ret ptr %14, !dbg !3432

panic:                                            ; preds = %loop.body
  %15 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3433
  call void %15(ptr @.panic_msg.125, i64 44, ptr @.file.117, i64 20, ptr @.func.126, i64 5, i32 173), !dbg !3433
  unreachable, !dbg !3433

panic7:                                           ; preds = %loop.body4
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3434
  call void %16(ptr @.panic_msg.125, i64 44, ptr @.file.117, i64 20, ptr @.func.126, i64 5, i32 174), !dbg !3434
  unreachable, !dbg !3434
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.printf_parse_format_field(ptr %0, ptr %1, i64 %2, ptr %3, ptr %4, i64 %5, ptr %6) #0 !dbg !3435 {
entry:
  %args_ptr = alloca ptr, align 8
  %args_len = alloca i64, align 8
  %args_index_ptr = alloca ptr, align 8
  %format_ptr = alloca ptr, align 8
  %format_len = alloca i64, align 8
  %index_ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %reterr = alloca i64, align 8
  %reterr2 = alloca i64, align 8
  %len = alloca i64, align 8
  %val = alloca %any, align 8
  %intval = alloca i32, align 4
  %intval.f = alloca i64, align 8
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c53 = alloca i8, align 1
  %s = alloca i16, align 2
  %i = alloca i32, align 4
  %l = alloca i64, align 8
  %i145 = alloca i128, align 8
  %c173 = alloca i8, align 1
  %s189 = alloca i16, align 2
  %i214 = alloca i32, align 4
  %l237 = alloca i64, align 8
  %i263 = alloca i128, align 8
  %string = alloca %"char[]", align 8
  %indirectarg = alloca %"any[]", align 8
  %reterr283 = alloca i64, align 8
  store ptr %1, ptr %args_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %args_ptr, metadata !3438, metadata !DIExpression()), !dbg !3439
  store i64 %2, ptr %args_len, align 8
  call void @llvm.dbg.declare(metadata ptr %args_len, metadata !3440, metadata !DIExpression()), !dbg !3441
  store ptr %3, ptr %args_index_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %args_index_ptr, metadata !3442, metadata !DIExpression()), !dbg !3443
  store ptr %4, ptr %format_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %format_ptr, metadata !3444, metadata !DIExpression()), !dbg !3445
  store i64 %5, ptr %format_len, align 8
  call void @llvm.dbg.declare(metadata ptr %format_len, metadata !3446, metadata !DIExpression()), !dbg !3447
  store ptr %6, ptr %index_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %index_ptr, metadata !3448, metadata !DIExpression()), !dbg !3449
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3450, metadata !DIExpression()), !dbg !3451
  %7 = load ptr, ptr %format_ptr, align 8, !dbg !3452
  %8 = load ptr, ptr %index_ptr, align 8, !dbg !3453
  %checknull = icmp eq ptr %8, null, !dbg !3453
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3453
  br i1 %9, label %panic, label %checkok, !dbg !3453

checkok:                                          ; preds = %entry
  %10 = load i64, ptr %8, align 8, !dbg !3453
  %ptradd = getelementptr inbounds i8, ptr %7, i64 %10, !dbg !3453
  %11 = load i8, ptr %ptradd, align 1, !dbg !3453
  store i8 %11, ptr %c, align 1, !dbg !3453
  %12 = load i8, ptr %c, align 1, !dbg !3454
  %13 = call i8 @std.ascii.char.is_digit(i8 zeroext %12), !dbg !3454
  %14 = trunc i8 %13 to i1, !dbg !3454
  br i1 %14, label %if.then, label %if.exit, !dbg !3454

if.then:                                          ; preds = %checkok
  %15 = load ptr, ptr %format_ptr, align 8, !dbg !3455
  %16 = load i64, ptr %format_len, align 8, !dbg !3455
  %17 = load ptr, ptr %index_ptr, align 8, !dbg !3455
  %18 = call i32 @std.io.simple_atoi(ptr %15, i64 %16, ptr %17) #5, !dbg !3456
  store i32 %18, ptr %0, align 4, !dbg !3456
  ret i64 0, !dbg !3456

if.exit:                                          ; preds = %checkok
  %19 = load i8, ptr %c, align 1, !dbg !3457
  %neq = icmp ne i8 %19, 42, !dbg !3457
  br i1 %neq, label %if.then1, label %if.exit3, !dbg !3457

if.then1:                                         ; preds = %if.exit
  store i32 0, ptr %0, align 4, !dbg !3458
  ret i64 0, !dbg !3458

if.exit3:                                         ; preds = %if.exit
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3459, metadata !DIExpression()), !dbg !3460
  %20 = load ptr, ptr %index_ptr, align 8, !dbg !3461
  %checknull4 = icmp eq ptr %20, null, !dbg !3461
  %21 = call i1 @llvm.expect.i1(i1 %checknull4, i1 false), !dbg !3461
  br i1 %21, label %panic5, label %checkok6, !dbg !3461

checkok6:                                         ; preds = %if.exit3
  %22 = load i64, ptr %20, align 8, !dbg !3462
  %add = add i64 %22, 1, !dbg !3462
  store i64 %add, ptr %20, align 8, !dbg !3462
  store i64 %add, ptr %len, align 8, !dbg !3462
  %23 = load i64, ptr %len, align 8, !dbg !3463
  %24 = load i64, ptr %format_len, align 8, !dbg !3464
  %ge = icmp uge i64 %23, %24, !dbg !3463
  br i1 %ge, label %if.then7, label %if.exit8, !dbg !3463

if.then7:                                         ; preds = %checkok6
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3465

if.exit8:                                         ; preds = %checkok6
  %25 = load ptr, ptr %args_index_ptr, align 8, !dbg !3466
  %checknull9 = icmp eq ptr %25, null, !dbg !3466
  %26 = call i1 @llvm.expect.i1(i1 %checknull9, i1 false), !dbg !3466
  br i1 %26, label %panic10, label %checkok11, !dbg !3466

checkok11:                                        ; preds = %if.exit8
  %27 = load i64, ptr %25, align 8, !dbg !3466
  %28 = load i64, ptr %args_len, align 8, !dbg !3467
  %ge12 = icmp uge i64 %27, %28, !dbg !3468
  br i1 %ge12, label %if.then13, label %if.exit14, !dbg !3468

if.then13:                                        ; preds = %checkok11
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3469

if.exit14:                                        ; preds = %checkok11
  call void @llvm.dbg.declare(metadata ptr %val, metadata !3470, metadata !DIExpression()), !dbg !3471
  %29 = load ptr, ptr %args_ptr, align 8, !dbg !3472
  %30 = load ptr, ptr %args_index_ptr, align 8, !dbg !3473
  %checknull15 = icmp eq ptr %30, null, !dbg !3473
  %31 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !3473
  br i1 %31, label %panic16, label %checkok17, !dbg !3473

checkok17:                                        ; preds = %if.exit14
  %32 = load i64, ptr %30, align 8, !dbg !3474
  %add18 = add i64 %32, 1, !dbg !3474
  store i64 %add18, ptr %30, align 8, !dbg !3474
  %ptroffset = getelementptr inbounds [16 x i8], ptr %29, i64 %32, !dbg !3474
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %val, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !3474
  %ptradd19 = getelementptr inbounds i8, ptr %val, i64 8, !dbg !3475
  %33 = load i64, ptr %ptradd19, align 8, !dbg !3475
  %"introspect*" = inttoptr i64 %33 to ptr, !dbg !3475
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !3475
  %34 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext %typeid.kind) #5, !dbg !3475
  %35 = trunc i8 %34 to i1, !dbg !3475
  %not = xor i1 %35, true, !dbg !3475
  br i1 %not, label %if.then20, label %if.exit21, !dbg !3475

if.then20:                                        ; preds = %checkok17
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3476

if.exit21:                                        ; preds = %checkok17
  call void @llvm.dbg.declare(metadata ptr %intval, metadata !3477, metadata !DIExpression()), !dbg !3478
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %val, i32 16, i1 false)
  %36 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 2) #5, !dbg !3479
  %37 = trunc i8 %36 to i1, !dbg !3479
  br i1 %37, label %or.phi, label %or.rhs, !dbg !3479

or.rhs:                                           ; preds = %if.exit21
  br label %or.phi, !dbg !3483

or.phi:                                           ; preds = %or.rhs, %if.exit21
  %val22 = phi i1 [ true, %if.exit21 ], [ false, %or.rhs ], !dbg !3483
  br i1 %val22, label %assert_ok, label %assert_fail, !dbg !3483

assert_fail:                                      ; preds = %or.phi
  %38 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3479
  call void %38(ptr @.panic_msg.130, i64 106, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 12), !dbg !3479
  unreachable, !dbg !3479

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %any_type, metadata !3484, metadata !DIExpression()), !dbg !3485
  %ptradd23 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !3486
  %39 = load i64, ptr %ptradd23, align 8, !dbg !3486
  store i64 %39, ptr %any_type, align 8, !dbg !3486
  call void @llvm.dbg.declare(metadata ptr %kind, metadata !3487, metadata !DIExpression()), !dbg !3488
  %40 = load i64, ptr %any_type, align 8, !dbg !3489
  %"introspect*24" = inttoptr i64 %40 to ptr, !dbg !3489
  %typeid.kind25 = load i8, ptr %"introspect*24", align 8, !dbg !3489
  store i8 %typeid.kind25, ptr %kind, align 1, !dbg !3489
  %41 = load i8, ptr %kind, align 1, !dbg !3490
  %eq = icmp eq i8 %41, 8, !dbg !3490
  br i1 %eq, label %if.then26, label %if.exit47, !dbg !3490

if.then26:                                        ; preds = %assert_ok
  %42 = load i64, ptr %any_type, align 8, !dbg !3491
  %"introspect*27" = inttoptr i64 %42 to ptr, !dbg !3491
  %typeid.kind28 = load i8, ptr %"introspect*27", align 8, !dbg !3491
  %eq29 = icmp eq i8 %typeid.kind28, 15, !dbg !3491
  br i1 %eq29, label %check_type_ok, label %check_next, !dbg !3491

check_next:                                       ; preds = %if.then26
  %eq30 = icmp eq i8 %typeid.kind28, 19, !dbg !3491
  br i1 %eq30, label %check_type_ok, label %check_next31, !dbg !3491

check_next31:                                     ; preds = %check_next
  %eq32 = icmp eq i8 %typeid.kind28, 17, !dbg !3491
  br i1 %eq32, label %check_type_ok, label %check_next33, !dbg !3491

check_next33:                                     ; preds = %check_next31
  %eq34 = icmp eq i8 %typeid.kind28, 8, !dbg !3491
  br i1 %eq34, label %check_type_ok, label %check_next35, !dbg !3491

check_next35:                                     ; preds = %check_next33
  %eq36 = icmp eq i8 %typeid.kind28, 16, !dbg !3491
  br i1 %eq36, label %check_type_ok, label %check_next37, !dbg !3491

check_next37:                                     ; preds = %check_next35
  %eq38 = icmp eq i8 %typeid.kind28, 18, !dbg !3491
  br i1 %eq38, label %check_type_ok, label %check_next39, !dbg !3491

check_next39:                                     ; preds = %check_next37
  %eq40 = icmp eq i8 %typeid.kind28, 14, !dbg !3491
  br i1 %eq40, label %check_type_ok, label %check_next41, !dbg !3491

check_next41:                                     ; preds = %check_next39
  %eq42 = icmp eq i8 %typeid.kind28, 12, !dbg !3491
  br i1 %eq42, label %check_type_ok, label %check_next43, !dbg !3491

check_next43:                                     ; preds = %check_next41
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3491
  call void %43(ptr @.panic_msg.120, i64 49, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 20), !dbg !3491
  unreachable, !dbg !3491

check_type_ok:                                    ; preds = %check_next41, %check_next39, %check_next37, %check_next35, %check_next33, %check_next31, %check_next, %if.then26
  %ptradd44 = getelementptr inbounds i8, ptr %"introspect*27", i64 32, !dbg !3491
  %typeid.inner = load i64, ptr %ptradd44, align 8, !dbg !3491
  store i64 %typeid.inner, ptr %any_type, align 8, !dbg !3491
  %44 = load i64, ptr %any_type, align 8, !dbg !3493
  %"introspect*45" = inttoptr i64 %44 to ptr, !dbg !3493
  %typeid.kind46 = load i8, ptr %"introspect*45", align 8, !dbg !3493
  store i8 %typeid.kind46, ptr %kind, align 1, !dbg !3493
  br label %if.exit47, !dbg !3493

if.exit47:                                        ; preds = %check_type_ok, %assert_ok
  call void @llvm.dbg.declare(metadata ptr %is_mixed_signed, metadata !3494, metadata !DIExpression()), !dbg !3495
  %45 = load i64, ptr %any_type, align 8, !dbg !3496
  %"introspect*48" = inttoptr i64 %45 to ptr, !dbg !3496
  %typeid.kind49 = load i8, ptr %"introspect*48", align 8, !dbg !3496
  %neq50 = icmp ne i8 2, %typeid.kind49, !dbg !3497
  %46 = zext i1 %neq50 to i8, !dbg !3497
  store i8 %46, ptr %is_mixed_signed, align 1, !dbg !3497
  call void @llvm.dbg.declare(metadata ptr %max, metadata !3498, metadata !DIExpression()), !dbg !3499
  store i32 2147483647, ptr %max, align 4, !dbg !3500
  call void @llvm.dbg.declare(metadata ptr %min, metadata !3501, metadata !DIExpression()), !dbg !3502
  store i32 -2147483648, ptr %min, align 4, !dbg !3503
  %47 = load i64, ptr %any_type, align 8
  store i64 %47, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit47
  %48 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !3504

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %49 = phi i64 [ %48, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !3504
  %eq51 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %49, !dbg !3504
  br i1 %eq51, label %result_block, label %parent_type_block, !dbg !3504

parent_type_block:                                ; preds = %check_subtype
  %50 = inttoptr i64 %49 to ptr, !dbg !3504
  %ptradd52 = getelementptr inbounds i8, ptr %50, i64 8, !dbg !3504
  %typeid.parent = load i64, ptr %ptradd52, align 8, !dbg !3504
  %51 = icmp eq i64 %typeid.parent, 0, !dbg !3504
  br i1 %51, label %result_block, label %check_subtype, !dbg !3504

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %52 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !3504
  br i1 %52, label %switch.case, label %next_if, !dbg !3504

switch.case:                                      ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %c53, metadata !3506, metadata !DIExpression()), !dbg !3508
  %53 = load ptr, ptr %v, align 8, !dbg !3509
  %checknull54 = icmp eq ptr %53, null, !dbg !3509
  %54 = call i1 @llvm.expect.i1(i1 %checknull54, i1 false), !dbg !3509
  br i1 %54, label %panic55, label %checkok56, !dbg !3509

checkok56:                                        ; preds = %switch.case
  %55 = load i8, ptr %53, align 1, !dbg !3510
  store i8 %55, ptr %c53, align 1, !dbg !3510
  %56 = load i8, ptr %is_mixed_signed, align 1, !dbg !3511
  %57 = trunc i8 %56 to i1, !dbg !3511
  br i1 %57, label %and.rhs, label %and.phi, !dbg !3511

and.rhs:                                          ; preds = %checkok56
  %58 = load i8, ptr %c53, align 1, !dbg !3512
  %sext = sext i8 %58 to i32, !dbg !3512
  %lt = icmp slt i32 %sext, 0, !dbg !3512
  br label %and.phi, !dbg !3512

and.phi:                                          ; preds = %and.rhs, %checkok56
  %val57 = phi i1 [ false, %checkok56 ], [ %lt, %and.rhs ], !dbg !3512
  br i1 %val57, label %if.then58, label %if.exit59, !dbg !3512

if.then58:                                        ; preds = %and.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3513
  br label %after_assign, !dbg !3513

if.exit59:                                        ; preds = %and.phi
  %59 = load i8, ptr %c53, align 1, !dbg !3514
  %sext60 = sext i8 %59 to i32, !dbg !3514
  store i32 %sext60, ptr %blockret, align 4, !dbg !3514
  br label %expr_block.exit, !dbg !3514

next_if:                                          ; preds = %result_block
  br label %check_subtype61, !dbg !3515

check_subtype61:                                  ; preds = %parent_type_block63, %next_if
  %60 = phi i64 [ %48, %next_if ], [ %typeid.parent65, %parent_type_block63 ], !dbg !3515
  %eq62 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %60, !dbg !3515
  br i1 %eq62, label %result_block66, label %parent_type_block63, !dbg !3515

parent_type_block63:                              ; preds = %check_subtype61
  %61 = inttoptr i64 %60 to ptr, !dbg !3515
  %ptradd64 = getelementptr inbounds i8, ptr %61, i64 8, !dbg !3515
  %typeid.parent65 = load i64, ptr %ptradd64, align 8, !dbg !3515
  %62 = icmp eq i64 %typeid.parent65, 0, !dbg !3515
  br i1 %62, label %result_block66, label %check_subtype61, !dbg !3515

result_block66:                                   ; preds = %parent_type_block63, %check_subtype61
  %63 = phi i1 [ false, %parent_type_block63 ], [ true, %check_subtype61 ], !dbg !3515
  br i1 %63, label %switch.case67, label %next_if87, !dbg !3515

switch.case67:                                    ; preds = %result_block66
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3516, metadata !DIExpression()), !dbg !3518
  %64 = load ptr, ptr %v, align 8, !dbg !3519
  %checknull68 = icmp eq ptr %64, null, !dbg !3519
  %65 = call i1 @llvm.expect.i1(i1 %checknull68, i1 false), !dbg !3519
  br i1 %65, label %panic69, label %checkok70, !dbg !3519

checkok70:                                        ; preds = %switch.case67
  %66 = load i16, ptr %64, align 2, !dbg !3520
  store i16 %66, ptr %s, align 2, !dbg !3520
  %67 = load i8, ptr %is_mixed_signed, align 1, !dbg !3521
  %68 = trunc i8 %67 to i1, !dbg !3521
  br i1 %68, label %and.rhs71, label %and.phi74, !dbg !3521

and.rhs71:                                        ; preds = %checkok70
  %69 = load i16, ptr %s, align 2, !dbg !3522
  %sext72 = sext i16 %69 to i32, !dbg !3522
  %lt73 = icmp slt i32 %sext72, 0, !dbg !3522
  br label %and.phi74, !dbg !3522

and.phi74:                                        ; preds = %and.rhs71, %checkok70
  %val75 = phi i1 [ false, %checkok70 ], [ %lt73, %and.rhs71 ], !dbg !3522
  br i1 %val75, label %if.then76, label %if.exit77, !dbg !3522

if.then76:                                        ; preds = %and.phi74
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3523
  br label %after_assign, !dbg !3523

if.exit77:                                        ; preds = %and.phi74
  %70 = load i16, ptr %s, align 2, !dbg !3524
  %sext78 = sext i16 %70 to i32, !dbg !3524
  %71 = load i32, ptr %max, align 4, !dbg !3525
  %gt = icmp sgt i32 %sext78, %71, !dbg !3524
  br i1 %gt, label %or.phi82, label %or.rhs79, !dbg !3524

or.rhs79:                                         ; preds = %if.exit77
  %72 = load i16, ptr %s, align 2, !dbg !3526
  %sext80 = sext i16 %72 to i32, !dbg !3526
  %73 = load i32, ptr %min, align 4, !dbg !3527
  %lt81 = icmp slt i32 %sext80, %73, !dbg !3526
  br label %or.phi82, !dbg !3526

or.phi82:                                         ; preds = %or.rhs79, %if.exit77
  %val83 = phi i1 [ true, %if.exit77 ], [ %lt81, %or.rhs79 ], !dbg !3526
  br i1 %val83, label %if.then84, label %if.exit85, !dbg !3526

if.then84:                                        ; preds = %or.phi82
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3528
  br label %after_assign, !dbg !3528

if.exit85:                                        ; preds = %or.phi82
  %74 = load i16, ptr %s, align 2, !dbg !3529
  %sext86 = sext i16 %74 to i32, !dbg !3529
  store i32 %sext86, ptr %blockret, align 4, !dbg !3529
  br label %expr_block.exit, !dbg !3529

next_if87:                                        ; preds = %result_block66
  br label %check_subtype88, !dbg !3530

check_subtype88:                                  ; preds = %parent_type_block90, %next_if87
  %75 = phi i64 [ %48, %next_if87 ], [ %typeid.parent92, %parent_type_block90 ], !dbg !3530
  %eq89 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %75, !dbg !3530
  br i1 %eq89, label %result_block93, label %parent_type_block90, !dbg !3530

parent_type_block90:                              ; preds = %check_subtype88
  %76 = inttoptr i64 %75 to ptr, !dbg !3530
  %ptradd91 = getelementptr inbounds i8, ptr %76, i64 8, !dbg !3530
  %typeid.parent92 = load i64, ptr %ptradd91, align 8, !dbg !3530
  %77 = icmp eq i64 %typeid.parent92, 0, !dbg !3530
  br i1 %77, label %result_block93, label %check_subtype88, !dbg !3530

result_block93:                                   ; preds = %parent_type_block90, %check_subtype88
  %78 = phi i1 [ false, %parent_type_block90 ], [ true, %check_subtype88 ], !dbg !3530
  br i1 %78, label %switch.case94, label %next_if111, !dbg !3530

switch.case94:                                    ; preds = %result_block93
  call void @llvm.dbg.declare(metadata ptr %i, metadata !3531, metadata !DIExpression()), !dbg !3533
  %79 = load ptr, ptr %v, align 8, !dbg !3534
  %checknull95 = icmp eq ptr %79, null, !dbg !3534
  %80 = call i1 @llvm.expect.i1(i1 %checknull95, i1 false), !dbg !3534
  br i1 %80, label %panic96, label %checkok97, !dbg !3534

checkok97:                                        ; preds = %switch.case94
  %81 = load i32, ptr %79, align 4, !dbg !3535
  store i32 %81, ptr %i, align 4, !dbg !3535
  %82 = load i8, ptr %is_mixed_signed, align 1, !dbg !3536
  %83 = trunc i8 %82 to i1, !dbg !3536
  br i1 %83, label %and.rhs98, label %and.phi100, !dbg !3536

and.rhs98:                                        ; preds = %checkok97
  %84 = load i32, ptr %i, align 4, !dbg !3537
  %lt99 = icmp slt i32 %84, 0, !dbg !3537
  br label %and.phi100, !dbg !3537

and.phi100:                                       ; preds = %and.rhs98, %checkok97
  %val101 = phi i1 [ false, %checkok97 ], [ %lt99, %and.rhs98 ], !dbg !3537
  br i1 %val101, label %if.then102, label %if.exit103, !dbg !3537

if.then102:                                       ; preds = %and.phi100
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3538
  br label %after_assign, !dbg !3538

if.exit103:                                       ; preds = %and.phi100
  %85 = load i32, ptr %i, align 4, !dbg !3539
  %86 = load i32, ptr %max, align 4, !dbg !3540
  %gt104 = icmp sgt i32 %85, %86, !dbg !3539
  br i1 %gt104, label %or.phi107, label %or.rhs105, !dbg !3539

or.rhs105:                                        ; preds = %if.exit103
  %87 = load i32, ptr %i, align 4, !dbg !3541
  %88 = load i32, ptr %min, align 4, !dbg !3542
  %lt106 = icmp slt i32 %87, %88, !dbg !3541
  br label %or.phi107, !dbg !3541

or.phi107:                                        ; preds = %or.rhs105, %if.exit103
  %val108 = phi i1 [ true, %if.exit103 ], [ %lt106, %or.rhs105 ], !dbg !3541
  br i1 %val108, label %if.then109, label %if.exit110, !dbg !3541

if.then109:                                       ; preds = %or.phi107
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3543
  br label %after_assign, !dbg !3543

if.exit110:                                       ; preds = %or.phi107
  %89 = load i32, ptr %i, align 4, !dbg !3544
  store i32 %89, ptr %blockret, align 4, !dbg !3544
  br label %expr_block.exit, !dbg !3544

next_if111:                                       ; preds = %result_block93
  br label %check_subtype112, !dbg !3545

check_subtype112:                                 ; preds = %parent_type_block114, %next_if111
  %90 = phi i64 [ %48, %next_if111 ], [ %typeid.parent116, %parent_type_block114 ], !dbg !3545
  %eq113 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %90, !dbg !3545
  br i1 %eq113, label %result_block117, label %parent_type_block114, !dbg !3545

parent_type_block114:                             ; preds = %check_subtype112
  %91 = inttoptr i64 %90 to ptr, !dbg !3545
  %ptradd115 = getelementptr inbounds i8, ptr %91, i64 8, !dbg !3545
  %typeid.parent116 = load i64, ptr %ptradd115, align 8, !dbg !3545
  %92 = icmp eq i64 %typeid.parent116, 0, !dbg !3545
  br i1 %92, label %result_block117, label %check_subtype112, !dbg !3545

result_block117:                                  ; preds = %parent_type_block114, %check_subtype112
  %93 = phi i1 [ false, %parent_type_block114 ], [ true, %check_subtype112 ], !dbg !3545
  br i1 %93, label %switch.case118, label %next_if137, !dbg !3545

switch.case118:                                   ; preds = %result_block117
  call void @llvm.dbg.declare(metadata ptr %l, metadata !3546, metadata !DIExpression()), !dbg !3548
  %94 = load ptr, ptr %v, align 8, !dbg !3549
  %checknull119 = icmp eq ptr %94, null, !dbg !3549
  %95 = call i1 @llvm.expect.i1(i1 %checknull119, i1 false), !dbg !3549
  br i1 %95, label %panic120, label %checkok121, !dbg !3549

checkok121:                                       ; preds = %switch.case118
  %96 = load i64, ptr %94, align 8, !dbg !3550
  store i64 %96, ptr %l, align 8, !dbg !3550
  %97 = load i8, ptr %is_mixed_signed, align 1, !dbg !3551
  %98 = trunc i8 %97 to i1, !dbg !3551
  br i1 %98, label %and.rhs122, label %and.phi124, !dbg !3551

and.rhs122:                                       ; preds = %checkok121
  %99 = load i64, ptr %l, align 8, !dbg !3552
  %lt123 = icmp slt i64 %99, 0, !dbg !3552
  br label %and.phi124, !dbg !3552

and.phi124:                                       ; preds = %and.rhs122, %checkok121
  %val125 = phi i1 [ false, %checkok121 ], [ %lt123, %and.rhs122 ], !dbg !3552
  br i1 %val125, label %if.then126, label %if.exit127, !dbg !3552

if.then126:                                       ; preds = %and.phi124
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3553
  br label %after_assign, !dbg !3553

if.exit127:                                       ; preds = %and.phi124
  %100 = load i64, ptr %l, align 8, !dbg !3554
  %101 = load i32, ptr %max, align 4, !dbg !3555
  %sext128 = sext i32 %101 to i64, !dbg !3555
  %gt129 = icmp sgt i64 %100, %sext128, !dbg !3554
  br i1 %gt129, label %or.phi133, label %or.rhs130, !dbg !3554

or.rhs130:                                        ; preds = %if.exit127
  %102 = load i64, ptr %l, align 8, !dbg !3556
  %103 = load i32, ptr %min, align 4, !dbg !3557
  %sext131 = sext i32 %103 to i64, !dbg !3557
  %lt132 = icmp slt i64 %102, %sext131, !dbg !3556
  br label %or.phi133, !dbg !3556

or.phi133:                                        ; preds = %or.rhs130, %if.exit127
  %val134 = phi i1 [ true, %if.exit127 ], [ %lt132, %or.rhs130 ], !dbg !3556
  br i1 %val134, label %if.then135, label %if.exit136, !dbg !3556

if.then135:                                       ; preds = %or.phi133
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3558
  br label %after_assign, !dbg !3558

if.exit136:                                       ; preds = %or.phi133
  %104 = load i64, ptr %l, align 8, !dbg !3559
  %trunc = trunc i64 %104 to i32, !dbg !3559
  store i32 %trunc, ptr %blockret, align 4, !dbg !3559
  br label %expr_block.exit, !dbg !3559

next_if137:                                       ; preds = %result_block117
  br label %check_subtype138, !dbg !3560

check_subtype138:                                 ; preds = %parent_type_block140, %next_if137
  %105 = phi i64 [ %48, %next_if137 ], [ %typeid.parent142, %parent_type_block140 ], !dbg !3560
  %eq139 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %105, !dbg !3560
  br i1 %eq139, label %result_block143, label %parent_type_block140, !dbg !3560

parent_type_block140:                             ; preds = %check_subtype138
  %106 = inttoptr i64 %105 to ptr, !dbg !3560
  %ptradd141 = getelementptr inbounds i8, ptr %106, i64 8, !dbg !3560
  %typeid.parent142 = load i64, ptr %ptradd141, align 8, !dbg !3560
  %107 = icmp eq i64 %typeid.parent142, 0, !dbg !3560
  br i1 %107, label %result_block143, label %check_subtype138, !dbg !3560

result_block143:                                  ; preds = %parent_type_block140, %check_subtype138
  %108 = phi i1 [ false, %parent_type_block140 ], [ true, %check_subtype138 ], !dbg !3560
  br i1 %108, label %switch.case144, label %next_if165, !dbg !3560

switch.case144:                                   ; preds = %result_block143
  call void @llvm.dbg.declare(metadata ptr %i145, metadata !3561, metadata !DIExpression()), !dbg !3563
  %109 = load ptr, ptr %v, align 8, !dbg !3564
  %checknull146 = icmp eq ptr %109, null, !dbg !3564
  %110 = call i1 @llvm.expect.i1(i1 %checknull146, i1 false), !dbg !3564
  br i1 %110, label %panic147, label %checkok148, !dbg !3564

checkok148:                                       ; preds = %switch.case144
  %111 = load i128, ptr %109, align 8, !dbg !3565
  store i128 %111, ptr %i145, align 8, !dbg !3565
  %112 = load i8, ptr %is_mixed_signed, align 1, !dbg !3566
  %113 = trunc i8 %112 to i1, !dbg !3566
  br i1 %113, label %and.rhs149, label %and.phi151, !dbg !3566

and.rhs149:                                       ; preds = %checkok148
  %114 = load i128, ptr %i145, align 8, !dbg !3567
  %lt150 = icmp slt i128 %114, 0, !dbg !3567
  br label %and.phi151, !dbg !3567

and.phi151:                                       ; preds = %and.rhs149, %checkok148
  %val152 = phi i1 [ false, %checkok148 ], [ %lt150, %and.rhs149 ], !dbg !3567
  br i1 %val152, label %if.then153, label %if.exit154, !dbg !3567

if.then153:                                       ; preds = %and.phi151
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3568
  br label %after_assign, !dbg !3568

if.exit154:                                       ; preds = %and.phi151
  %115 = load i128, ptr %i145, align 8, !dbg !3569
  %116 = load i32, ptr %max, align 4, !dbg !3570
  %sext155 = sext i32 %116 to i128, !dbg !3570
  %gt156 = icmp sgt i128 %115, %sext155, !dbg !3569
  br i1 %gt156, label %or.phi160, label %or.rhs157, !dbg !3569

or.rhs157:                                        ; preds = %if.exit154
  %117 = load i128, ptr %i145, align 8, !dbg !3571
  %118 = load i32, ptr %min, align 4, !dbg !3572
  %sext158 = sext i32 %118 to i128, !dbg !3572
  %lt159 = icmp slt i128 %117, %sext158, !dbg !3571
  br label %or.phi160, !dbg !3571

or.phi160:                                        ; preds = %or.rhs157, %if.exit154
  %val161 = phi i1 [ true, %if.exit154 ], [ %lt159, %or.rhs157 ], !dbg !3571
  br i1 %val161, label %if.then162, label %if.exit163, !dbg !3571

if.then162:                                       ; preds = %or.phi160
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3573
  br label %after_assign, !dbg !3573

if.exit163:                                       ; preds = %or.phi160
  %119 = load i128, ptr %i145, align 8, !dbg !3574
  %trunc164 = trunc i128 %119 to i32, !dbg !3574
  store i32 %trunc164, ptr %blockret, align 4, !dbg !3574
  br label %expr_block.exit, !dbg !3574

next_if165:                                       ; preds = %result_block143
  br label %check_subtype166, !dbg !3575

check_subtype166:                                 ; preds = %parent_type_block168, %next_if165
  %120 = phi i64 [ %48, %next_if165 ], [ %typeid.parent170, %parent_type_block168 ], !dbg !3575
  %eq167 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %120, !dbg !3575
  br i1 %eq167, label %result_block171, label %parent_type_block168, !dbg !3575

parent_type_block168:                             ; preds = %check_subtype166
  %121 = inttoptr i64 %120 to ptr, !dbg !3575
  %ptradd169 = getelementptr inbounds i8, ptr %121, i64 8, !dbg !3575
  %typeid.parent170 = load i64, ptr %ptradd169, align 8, !dbg !3575
  %122 = icmp eq i64 %typeid.parent170, 0, !dbg !3575
  br i1 %122, label %result_block171, label %check_subtype166, !dbg !3575

result_block171:                                  ; preds = %parent_type_block168, %check_subtype166
  %123 = phi i1 [ false, %parent_type_block168 ], [ true, %check_subtype166 ], !dbg !3575
  br i1 %123, label %switch.case172, label %next_if181, !dbg !3575

switch.case172:                                   ; preds = %result_block171
  call void @llvm.dbg.declare(metadata ptr %c173, metadata !3576, metadata !DIExpression()), !dbg !3578
  %124 = load ptr, ptr %v, align 8, !dbg !3579
  %checknull174 = icmp eq ptr %124, null, !dbg !3579
  %125 = call i1 @llvm.expect.i1(i1 %checknull174, i1 false), !dbg !3579
  br i1 %125, label %panic175, label %checkok176, !dbg !3579

checkok176:                                       ; preds = %switch.case172
  %126 = load i8, ptr %124, align 1, !dbg !3580
  store i8 %126, ptr %c173, align 1, !dbg !3580
  %127 = load i8, ptr %c173, align 1, !dbg !3581
  %zext = zext i8 %127 to i32, !dbg !3581
  %128 = load i32, ptr %max, align 4, !dbg !3582
  %lt177 = icmp slt i32 %128, %zext, !dbg !3581
  %check = icmp slt i32 %zext, 0, !dbg !3581
  %siui-lt = or i1 %check, %lt177, !dbg !3581
  br i1 %siui-lt, label %if.then178, label %if.exit179, !dbg !3581

if.then178:                                       ; preds = %checkok176
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3583
  br label %after_assign, !dbg !3583

if.exit179:                                       ; preds = %checkok176
  %129 = load i8, ptr %c173, align 1, !dbg !3584
  %zext180 = zext i8 %129 to i32, !dbg !3584
  store i32 %zext180, ptr %blockret, align 4, !dbg !3584
  br label %expr_block.exit, !dbg !3584

next_if181:                                       ; preds = %result_block171
  br label %check_subtype182, !dbg !3585

check_subtype182:                                 ; preds = %parent_type_block184, %next_if181
  %130 = phi i64 [ %48, %next_if181 ], [ %typeid.parent186, %parent_type_block184 ], !dbg !3585
  %eq183 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %130, !dbg !3585
  br i1 %eq183, label %result_block187, label %parent_type_block184, !dbg !3585

parent_type_block184:                             ; preds = %check_subtype182
  %131 = inttoptr i64 %130 to ptr, !dbg !3585
  %ptradd185 = getelementptr inbounds i8, ptr %131, i64 8, !dbg !3585
  %typeid.parent186 = load i64, ptr %ptradd185, align 8, !dbg !3585
  %132 = icmp eq i64 %typeid.parent186, 0, !dbg !3585
  br i1 %132, label %result_block187, label %check_subtype182, !dbg !3585

result_block187:                                  ; preds = %parent_type_block184, %check_subtype182
  %133 = phi i1 [ false, %parent_type_block184 ], [ true, %check_subtype182 ], !dbg !3585
  br i1 %133, label %switch.case188, label %next_if206, !dbg !3585

switch.case188:                                   ; preds = %result_block187
  call void @llvm.dbg.declare(metadata ptr %s189, metadata !3586, metadata !DIExpression()), !dbg !3588
  %134 = load ptr, ptr %v, align 8, !dbg !3589
  %checknull190 = icmp eq ptr %134, null, !dbg !3589
  %135 = call i1 @llvm.expect.i1(i1 %checknull190, i1 false), !dbg !3589
  br i1 %135, label %panic191, label %checkok192, !dbg !3589

checkok192:                                       ; preds = %switch.case188
  %136 = load i16, ptr %134, align 2, !dbg !3590
  store i16 %136, ptr %s189, align 2, !dbg !3590
  %137 = load i16, ptr %s189, align 2, !dbg !3591
  %zext193 = zext i16 %137 to i32, !dbg !3591
  %138 = load i32, ptr %max, align 4, !dbg !3592
  %lt194 = icmp slt i32 %138, %zext193, !dbg !3591
  %check195 = icmp slt i32 %zext193, 0, !dbg !3591
  %siui-lt196 = or i1 %check195, %lt194, !dbg !3591
  br i1 %siui-lt196, label %or.phi201, label %or.rhs197, !dbg !3591

or.rhs197:                                        ; preds = %checkok192
  %139 = load i16, ptr %s189, align 2, !dbg !3593
  %zext198 = zext i16 %139 to i32, !dbg !3593
  %140 = load i32, ptr %min, align 4, !dbg !3594
  %gt199 = icmp sgt i32 %140, %zext198, !dbg !3593
  %check200 = icmp sge i32 %zext198, 0, !dbg !3593
  %siui-gt = and i1 %check200, %gt199, !dbg !3593
  br label %or.phi201, !dbg !3593

or.phi201:                                        ; preds = %or.rhs197, %checkok192
  %val202 = phi i1 [ true, %checkok192 ], [ %siui-gt, %or.rhs197 ], !dbg !3593
  br i1 %val202, label %if.then203, label %if.exit204, !dbg !3593

if.then203:                                       ; preds = %or.phi201
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3595
  br label %after_assign, !dbg !3595

if.exit204:                                       ; preds = %or.phi201
  %141 = load i16, ptr %s189, align 2, !dbg !3596
  %zext205 = zext i16 %141 to i32, !dbg !3596
  store i32 %zext205, ptr %blockret, align 4, !dbg !3596
  br label %expr_block.exit, !dbg !3596

next_if206:                                       ; preds = %result_block187
  br label %check_subtype207, !dbg !3597

check_subtype207:                                 ; preds = %parent_type_block209, %next_if206
  %142 = phi i64 [ %48, %next_if206 ], [ %typeid.parent211, %parent_type_block209 ], !dbg !3597
  %eq208 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %142, !dbg !3597
  br i1 %eq208, label %result_block212, label %parent_type_block209, !dbg !3597

parent_type_block209:                             ; preds = %check_subtype207
  %143 = inttoptr i64 %142 to ptr, !dbg !3597
  %ptradd210 = getelementptr inbounds i8, ptr %143, i64 8, !dbg !3597
  %typeid.parent211 = load i64, ptr %ptradd210, align 8, !dbg !3597
  %144 = icmp eq i64 %typeid.parent211, 0, !dbg !3597
  br i1 %144, label %result_block212, label %check_subtype207, !dbg !3597

result_block212:                                  ; preds = %parent_type_block209, %check_subtype207
  %145 = phi i1 [ false, %parent_type_block209 ], [ true, %check_subtype207 ], !dbg !3597
  br i1 %145, label %switch.case213, label %next_if229, !dbg !3597

switch.case213:                                   ; preds = %result_block212
  call void @llvm.dbg.declare(metadata ptr %i214, metadata !3598, metadata !DIExpression()), !dbg !3600
  %146 = load ptr, ptr %v, align 8, !dbg !3601
  %checknull215 = icmp eq ptr %146, null, !dbg !3601
  %147 = call i1 @llvm.expect.i1(i1 %checknull215, i1 false), !dbg !3601
  br i1 %147, label %panic216, label %checkok217, !dbg !3601

checkok217:                                       ; preds = %switch.case213
  %148 = load i32, ptr %146, align 4, !dbg !3602
  store i32 %148, ptr %i214, align 4, !dbg !3602
  %149 = load i32, ptr %i214, align 4, !dbg !3603
  %150 = load i32, ptr %max, align 4, !dbg !3604
  %lt218 = icmp slt i32 %150, %149, !dbg !3603
  %check219 = icmp slt i32 %149, 0, !dbg !3603
  %siui-lt220 = or i1 %check219, %lt218, !dbg !3603
  br i1 %siui-lt220, label %or.phi225, label %or.rhs221, !dbg !3603

or.rhs221:                                        ; preds = %checkok217
  %151 = load i32, ptr %i214, align 4, !dbg !3605
  %152 = load i32, ptr %min, align 4, !dbg !3606
  %gt222 = icmp sgt i32 %152, %151, !dbg !3605
  %check223 = icmp sge i32 %151, 0, !dbg !3605
  %siui-gt224 = and i1 %check223, %gt222, !dbg !3605
  br label %or.phi225, !dbg !3605

or.phi225:                                        ; preds = %or.rhs221, %checkok217
  %val226 = phi i1 [ true, %checkok217 ], [ %siui-gt224, %or.rhs221 ], !dbg !3605
  br i1 %val226, label %if.then227, label %if.exit228, !dbg !3605

if.then227:                                       ; preds = %or.phi225
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3607
  br label %after_assign, !dbg !3607

if.exit228:                                       ; preds = %or.phi225
  %153 = load i32, ptr %i214, align 4, !dbg !3608
  store i32 %153, ptr %blockret, align 4, !dbg !3608
  br label %expr_block.exit, !dbg !3608

next_if229:                                       ; preds = %result_block212
  br label %check_subtype230, !dbg !3609

check_subtype230:                                 ; preds = %parent_type_block232, %next_if229
  %154 = phi i64 [ %48, %next_if229 ], [ %typeid.parent234, %parent_type_block232 ], !dbg !3609
  %eq231 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %154, !dbg !3609
  br i1 %eq231, label %result_block235, label %parent_type_block232, !dbg !3609

parent_type_block232:                             ; preds = %check_subtype230
  %155 = inttoptr i64 %154 to ptr, !dbg !3609
  %ptradd233 = getelementptr inbounds i8, ptr %155, i64 8, !dbg !3609
  %typeid.parent234 = load i64, ptr %ptradd233, align 8, !dbg !3609
  %156 = icmp eq i64 %typeid.parent234, 0, !dbg !3609
  br i1 %156, label %result_block235, label %check_subtype230, !dbg !3609

result_block235:                                  ; preds = %parent_type_block232, %check_subtype230
  %157 = phi i1 [ false, %parent_type_block232 ], [ true, %check_subtype230 ], !dbg !3609
  br i1 %157, label %switch.case236, label %next_if255, !dbg !3609

switch.case236:                                   ; preds = %result_block235
  call void @llvm.dbg.declare(metadata ptr %l237, metadata !3610, metadata !DIExpression()), !dbg !3612
  %158 = load ptr, ptr %v, align 8, !dbg !3613
  %checknull238 = icmp eq ptr %158, null, !dbg !3613
  %159 = call i1 @llvm.expect.i1(i1 %checknull238, i1 false), !dbg !3613
  br i1 %159, label %panic239, label %checkok240, !dbg !3613

checkok240:                                       ; preds = %switch.case236
  %160 = load i64, ptr %158, align 8, !dbg !3614
  store i64 %160, ptr %l237, align 8, !dbg !3614
  %161 = load i64, ptr %l237, align 8, !dbg !3615
  %162 = load i32, ptr %max, align 4, !dbg !3616
  %sext241 = sext i32 %162 to i64, !dbg !3616
  %lt242 = icmp slt i64 %sext241, %161, !dbg !3615
  %check243 = icmp slt i64 %161, 0, !dbg !3615
  %siui-lt244 = or i1 %check243, %lt242, !dbg !3615
  br i1 %siui-lt244, label %or.phi250, label %or.rhs245, !dbg !3615

or.rhs245:                                        ; preds = %checkok240
  %163 = load i64, ptr %l237, align 8, !dbg !3617
  %164 = load i32, ptr %min, align 4, !dbg !3618
  %sext246 = sext i32 %164 to i64, !dbg !3618
  %gt247 = icmp sgt i64 %sext246, %163, !dbg !3617
  %check248 = icmp sge i64 %163, 0, !dbg !3617
  %siui-gt249 = and i1 %check248, %gt247, !dbg !3617
  br label %or.phi250, !dbg !3617

or.phi250:                                        ; preds = %or.rhs245, %checkok240
  %val251 = phi i1 [ true, %checkok240 ], [ %siui-gt249, %or.rhs245 ], !dbg !3617
  br i1 %val251, label %if.then252, label %if.exit253, !dbg !3617

if.then252:                                       ; preds = %or.phi250
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3619
  br label %after_assign, !dbg !3619

if.exit253:                                       ; preds = %or.phi250
  %165 = load i64, ptr %l237, align 8, !dbg !3620
  %trunc254 = trunc i64 %165 to i32, !dbg !3620
  store i32 %trunc254, ptr %blockret, align 4, !dbg !3620
  br label %expr_block.exit, !dbg !3620

next_if255:                                       ; preds = %result_block235
  br label %check_subtype256, !dbg !3621

check_subtype256:                                 ; preds = %parent_type_block258, %next_if255
  %166 = phi i64 [ %48, %next_if255 ], [ %typeid.parent260, %parent_type_block258 ], !dbg !3621
  %eq257 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %166, !dbg !3621
  br i1 %eq257, label %result_block261, label %parent_type_block258, !dbg !3621

parent_type_block258:                             ; preds = %check_subtype256
  %167 = inttoptr i64 %166 to ptr, !dbg !3621
  %ptradd259 = getelementptr inbounds i8, ptr %167, i64 8, !dbg !3621
  %typeid.parent260 = load i64, ptr %ptradd259, align 8, !dbg !3621
  %168 = icmp eq i64 %typeid.parent260, 0, !dbg !3621
  br i1 %168, label %result_block261, label %check_subtype256, !dbg !3621

result_block261:                                  ; preds = %parent_type_block258, %check_subtype256
  %169 = phi i1 [ false, %parent_type_block258 ], [ true, %check_subtype256 ], !dbg !3621
  br i1 %169, label %switch.case262, label %next_if281, !dbg !3621

switch.case262:                                   ; preds = %result_block261
  call void @llvm.dbg.declare(metadata ptr %i263, metadata !3622, metadata !DIExpression()), !dbg !3624
  %170 = load ptr, ptr %v, align 8, !dbg !3625
  %checknull264 = icmp eq ptr %170, null, !dbg !3625
  %171 = call i1 @llvm.expect.i1(i1 %checknull264, i1 false), !dbg !3625
  br i1 %171, label %panic265, label %checkok266, !dbg !3625

checkok266:                                       ; preds = %switch.case262
  %172 = load i128, ptr %170, align 8, !dbg !3626
  store i128 %172, ptr %i263, align 8, !dbg !3626
  %173 = load i128, ptr %i263, align 8, !dbg !3627
  %174 = load i32, ptr %max, align 4, !dbg !3628
  %sext267 = sext i32 %174 to i128, !dbg !3628
  %lt268 = icmp slt i128 %sext267, %173, !dbg !3627
  %check269 = icmp slt i128 %173, 0, !dbg !3627
  %siui-lt270 = or i1 %check269, %lt268, !dbg !3627
  br i1 %siui-lt270, label %or.phi276, label %or.rhs271, !dbg !3627

or.rhs271:                                        ; preds = %checkok266
  %175 = load i128, ptr %i263, align 8, !dbg !3629
  %176 = load i32, ptr %min, align 4, !dbg !3630
  %sext272 = sext i32 %176 to i128, !dbg !3630
  %gt273 = icmp sgt i128 %sext272, %175, !dbg !3629
  %check274 = icmp sge i128 %175, 0, !dbg !3629
  %siui-gt275 = and i1 %check274, %gt273, !dbg !3629
  br label %or.phi276, !dbg !3629

or.phi276:                                        ; preds = %or.rhs271, %checkok266
  %val277 = phi i1 [ true, %checkok266 ], [ %siui-gt275, %or.rhs271 ], !dbg !3629
  br i1 %val277, label %if.then278, label %if.exit279, !dbg !3629

if.then278:                                       ; preds = %or.phi276
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3631
  br label %after_assign, !dbg !3631

if.exit279:                                       ; preds = %or.phi276
  %177 = load i128, ptr %i263, align 8, !dbg !3632
  %trunc280 = trunc i128 %177 to i32, !dbg !3632
  store i32 %trunc280, ptr %blockret, align 4, !dbg !3632
  br label %expr_block.exit, !dbg !3632

next_if281:                                       ; preds = %result_block261
  br label %switch.default, !dbg !3632

switch.default:                                   ; preds = %next_if281
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  %lo = load ptr, ptr %string, align 8, !dbg !3633
  %ptradd282 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3633
  %hi = load i64, ptr %ptradd282, align 8, !dbg !3633
  store %"any[]" zeroinitializer, ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.143, i64 20, ptr @.str.144, i64 25, i32 668, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3637
  unreachable, !dbg !3638

expr_block.exit:                                  ; preds = %if.exit279, %if.exit253, %if.exit228, %if.exit204, %if.exit179, %if.exit163, %if.exit136, %if.exit110, %if.exit85, %if.exit59
  %178 = load i32, ptr %blockret, align 4, !dbg !3638
  store i32 %178, ptr %intval, align 4, !dbg !3638
  store i64 0, ptr %intval.f, align 8, !dbg !3638
  br label %after_assign, !dbg !3638

after_assign:                                     ; preds = %expr_block.exit, %if.then278, %if.then252, %if.then227, %if.then203, %if.then178, %if.then162, %if.then153, %if.then135, %if.then126, %if.then109, %if.then102, %if.then84, %if.then76, %if.then58
  %optval = load i64, ptr %intval.f, align 8, !dbg !3639
  %not_err = icmp eq i64 %optval, 0, !dbg !3639
  %179 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3639
  br i1 %179, label %after_check, label %else_block, !dbg !3639

after_check:                                      ; preds = %after_assign
  %180 = load i32, ptr %intval, align 4, !dbg !3639
  br label %phi_block, !dbg !3639

else_block:                                       ; preds = %after_assign
  store i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), ptr %reterr283, align 8, !dbg !3640
  br label %err_retblock, !dbg !3640

phi_block:                                        ; preds = %after_check
  store i32 %180, ptr %0, align 4, !dbg !3640
  ret i64 0, !dbg !3640

err_retblock:                                     ; preds = %else_block
  %181 = load i64, ptr %reterr283, align 8, !dbg !3640
  ret i64 %181, !dbg !3640

panic:                                            ; preds = %entry
  %182 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3453
  call void %182(ptr @.panic_msg.127, i64 50, ptr @.file.117, i64 20, ptr @.func.128, i64 25, i32 660), !dbg !3453
  unreachable, !dbg !3453

panic5:                                           ; preds = %if.exit3
  %183 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3461
  call void %183(ptr @.panic_msg.127, i64 50, ptr @.file.117, i64 20, ptr @.func.128, i64 25, i32 663), !dbg !3461
  unreachable, !dbg !3461

panic10:                                          ; preds = %if.exit8
  %184 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3466
  call void %184(ptr @.panic_msg.129, i64 55, ptr @.file.117, i64 20, ptr @.func.128, i64 25, i32 665), !dbg !3466
  unreachable, !dbg !3466

panic16:                                          ; preds = %if.exit14
  %185 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3473
  call void %185(ptr @.panic_msg.129, i64 55, ptr @.file.117, i64 20, ptr @.func.128, i64 25, i32 666), !dbg !3473
  unreachable, !dbg !3473

panic55:                                          ; preds = %switch.case
  %186 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3510
  call void %186(ptr @.panic_msg.132, i64 52, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 29), !dbg !3510
  unreachable, !dbg !3510

panic69:                                          ; preds = %switch.case67
  %187 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3520
  call void %187(ptr @.panic_msg.135, i64 53, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 33), !dbg !3520
  unreachable, !dbg !3520

panic96:                                          ; preds = %switch.case94
  %188 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3535
  call void %188(ptr @.panic_msg.136, i64 51, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 38), !dbg !3535
  unreachable, !dbg !3535

panic120:                                         ; preds = %switch.case118
  %189 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3550
  call void %189(ptr @.panic_msg.137, i64 52, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 43), !dbg !3550
  unreachable, !dbg !3550

panic147:                                         ; preds = %switch.case144
  %190 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3565
  call void %190(ptr @.panic_msg.138, i64 54, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 48), !dbg !3565
  unreachable, !dbg !3565

panic175:                                         ; preds = %switch.case172
  %191 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3580
  call void %191(ptr @.panic_msg.132, i64 52, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 53), !dbg !3580
  unreachable, !dbg !3580

panic191:                                         ; preds = %switch.case188
  %192 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3590
  call void %192(ptr @.panic_msg.139, i64 54, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 57), !dbg !3590
  unreachable, !dbg !3590

panic216:                                         ; preds = %switch.case213
  %193 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3602
  call void %193(ptr @.panic_msg.140, i64 52, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 61), !dbg !3602
  unreachable, !dbg !3602

panic239:                                         ; preds = %switch.case236
  %194 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3614
  call void %194(ptr @.panic_msg.141, i64 53, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 65), !dbg !3614
  unreachable, !dbg !3614

panic265:                                         ; preds = %switch.case262
  %195 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3626
  call void %195(ptr @.panic_msg.142, i64 55, ptr @.file.131, i64 8, ptr @.func.128, i64 25, i32 69), !dbg !3626
  unreachable, !dbg !3626
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.available(ptr %0, i64 %1, ptr %2) #0 comdat !dbg !3641 {
entry:
  %s = alloca %any, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %.inlinecache13 = alloca ptr, align 8
  %.cachedtype14 = alloca ptr, align 8
  %curr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache24 = alloca ptr, align 8
  %.cachedtype25 = alloca ptr, align 8
  %retparam34 = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var38 = alloca i64, align 8
  %.inlinecache40 = alloca ptr, align 8
  %.cachedtype41 = alloca ptr, align 8
  %retparam50 = alloca i64, align 8
  %error_var56 = alloca i64, align 8
  %.inlinecache58 = alloca ptr, align 8
  %.cachedtype59 = alloca ptr, align 8
  %retparam68 = alloca i64, align 8
  %reterr74 = alloca i64, align 8
  %reterr76 = alloca i64, align 8
  store ptr null, ptr %.cachedtype59, align 8
  store ptr null, ptr %.cachedtype41, align 8
  store ptr null, ptr %.cachedtype25, align 8
  store ptr null, ptr %.cachedtype14, align 8
  store ptr null, ptr %.cachedtype5, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %s, align 8
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3644, metadata !DIExpression()), !dbg !3645
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3646
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3646
  %4 = inttoptr i64 %3 to ptr, !dbg !3646
  %type = load ptr, ptr %.cachedtype, align 8
  %5 = icmp eq ptr %4, %type
  br i1 %5, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %4, i64 16
  %6 = load ptr, ptr %ptradd2, align 8
  %7 = call ptr @.dyn_search(ptr %6, ptr @"$sel.available")
  store ptr %7, ptr %.inlinecache, align 8
  store ptr %4, ptr %.cachedtype, align 8
  br label %8

cache_hit:                                        ; preds = %entry
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %8

8:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %7, %cache_miss ]
  %ptrbool = icmp ne ptr %fn_phi, null
  br i1 %ptrbool, label %if.then, label %if.exit

if.then:                                          ; preds = %8
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3647
  %9 = load i64, ptr %ptradd3, align 8, !dbg !3647
  %10 = inttoptr i64 %9 to ptr, !dbg !3647
  %type6 = load ptr, ptr %.cachedtype5, align 8
  %11 = icmp eq ptr %10, %type6
  br i1 %11, label %cache_hit9, label %cache_miss7

cache_miss7:                                      ; preds = %if.then
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 16
  %12 = load ptr, ptr %ptradd8, align 8
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.available")
  store ptr %13, ptr %.inlinecache4, align 8
  store ptr %10, ptr %.cachedtype5, align 8
  br label %14

cache_hit9:                                       ; preds = %if.then
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8
  br label %14

14:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %13, %cache_miss7 ]
  %15 = icmp eq ptr %fn_phi11, null
  br i1 %15, label %missing_function, label %match

missing_function:                                 ; preds = %14
  %16 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3647
  call void %16(ptr @.panic_msg.95, i64 46, ptr @.file.52, i64 9, ptr @.func.74, i64 9, i32 29), !dbg !3647
  unreachable, !dbg !3647

match:                                            ; preds = %14
  %17 = load ptr, ptr %s, align 8
  %18 = call i64 %fn_phi11(ptr %retparam, ptr %17), !dbg !3647
  %not_err = icmp eq i64 %18, 0, !dbg !3647
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3647
  br i1 %19, label %after_check, label %assign_optional, !dbg !3647

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %reterr, align 8, !dbg !3647
  br label %err_retblock, !dbg !3647

after_check:                                      ; preds = %match
  %20 = load i64, ptr %retparam, align 8, !dbg !3647
  store i64 %20, ptr %0, align 8, !dbg !3647
  ret i64 0, !dbg !3647

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !3647
  ret i64 %21, !dbg !3647

if.exit:                                          ; preds = %8
  %ptradd12 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3648
  %22 = load i64, ptr %ptradd12, align 8, !dbg !3648
  %23 = inttoptr i64 %22 to ptr, !dbg !3648
  %type15 = load ptr, ptr %.cachedtype14, align 8
  %24 = icmp eq ptr %23, %type15
  br i1 %24, label %cache_hit18, label %cache_miss16

cache_miss16:                                     ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %23, i64 16
  %25 = load ptr, ptr %ptradd17, align 8
  %26 = call ptr @.dyn_search(ptr %25, ptr @"$sel.seek")
  store ptr %26, ptr %.inlinecache13, align 8
  store ptr %23, ptr %.cachedtype14, align 8
  br label %27

cache_hit18:                                      ; preds = %if.exit
  %cache_hit_fn19 = load ptr, ptr %.inlinecache13, align 8
  br label %27

27:                                               ; preds = %cache_hit18, %cache_miss16
  %fn_phi20 = phi ptr [ %cache_hit_fn19, %cache_hit18 ], [ %26, %cache_miss16 ]
  %ptrbool21 = icmp ne ptr %fn_phi20, null
  br i1 %ptrbool21, label %if.then22, label %if.exit75

if.then22:                                        ; preds = %27
  call void @llvm.dbg.declare(metadata ptr %curr, metadata !3649, metadata !DIExpression()), !dbg !3651
  %ptradd23 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3652
  %28 = load i64, ptr %ptradd23, align 8, !dbg !3652
  %29 = inttoptr i64 %28 to ptr, !dbg !3652
  %type26 = load ptr, ptr %.cachedtype25, align 8
  %30 = icmp eq ptr %29, %type26
  br i1 %30, label %cache_hit29, label %cache_miss27

cache_miss27:                                     ; preds = %if.then22
  %ptradd28 = getelementptr inbounds i8, ptr %29, i64 16
  %31 = load ptr, ptr %ptradd28, align 8
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.seek")
  store ptr %32, ptr %.inlinecache24, align 8
  store ptr %29, ptr %.cachedtype25, align 8
  br label %33

cache_hit29:                                      ; preds = %if.then22
  %cache_hit_fn30 = load ptr, ptr %.inlinecache24, align 8
  br label %33

33:                                               ; preds = %cache_hit29, %cache_miss27
  %fn_phi31 = phi ptr [ %cache_hit_fn30, %cache_hit29 ], [ %32, %cache_miss27 ]
  %34 = icmp eq ptr %fn_phi31, null
  br i1 %34, label %missing_function32, label %match33

missing_function32:                               ; preds = %33
  %35 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3653
  call void %35(ptr @.panic_msg.180, i64 41, ptr @.file.52, i64 9, ptr @.func.74, i64 9, i32 32), !dbg !3653
  unreachable, !dbg !3653

match33:                                          ; preds = %33
  %36 = load ptr, ptr %s, align 8
  %37 = call i64 %fn_phi31(ptr %retparam34, ptr %36, i64 0, i32 1), !dbg !3653
  %not_err35 = icmp eq i64 %37, 0, !dbg !3653
  %38 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !3653
  br i1 %38, label %after_check37, label %assign_optional36, !dbg !3653

assign_optional36:                                ; preds = %match33
  store i64 %37, ptr %error_var, align 8, !dbg !3653
  br label %guard_block, !dbg !3653

after_check37:                                    ; preds = %match33
  br label %noerr_block, !dbg !3653

guard_block:                                      ; preds = %assign_optional36
  %39 = load i64, ptr %error_var, align 8, !dbg !3653
  ret i64 %39, !dbg !3653

noerr_block:                                      ; preds = %after_check37
  %40 = load i64, ptr %retparam34, align 8, !dbg !3653
  store i64 %40, ptr %curr, align 8, !dbg !3653
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3654, metadata !DIExpression()), !dbg !3655
  %ptradd39 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3656
  %41 = load i64, ptr %ptradd39, align 8, !dbg !3656
  %42 = inttoptr i64 %41 to ptr, !dbg !3656
  %type42 = load ptr, ptr %.cachedtype41, align 8
  %43 = icmp eq ptr %42, %type42
  br i1 %43, label %cache_hit45, label %cache_miss43

cache_miss43:                                     ; preds = %noerr_block
  %ptradd44 = getelementptr inbounds i8, ptr %42, i64 16
  %44 = load ptr, ptr %ptradd44, align 8
  %45 = call ptr @.dyn_search(ptr %44, ptr @"$sel.seek")
  store ptr %45, ptr %.inlinecache40, align 8
  store ptr %42, ptr %.cachedtype41, align 8
  br label %46

cache_hit45:                                      ; preds = %noerr_block
  %cache_hit_fn46 = load ptr, ptr %.inlinecache40, align 8
  br label %46

46:                                               ; preds = %cache_hit45, %cache_miss43
  %fn_phi47 = phi ptr [ %cache_hit_fn46, %cache_hit45 ], [ %45, %cache_miss43 ]
  %47 = icmp eq ptr %fn_phi47, null
  br i1 %47, label %missing_function48, label %match49

missing_function48:                               ; preds = %46
  %48 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3657
  call void %48(ptr @.panic_msg.180, i64 41, ptr @.file.52, i64 9, ptr @.func.74, i64 9, i32 33), !dbg !3657
  unreachable, !dbg !3657

match49:                                          ; preds = %46
  %49 = load ptr, ptr %s, align 8
  %50 = call i64 %fn_phi47(ptr %retparam50, ptr %49, i64 0, i32 2), !dbg !3657
  %not_err51 = icmp eq i64 %50, 0, !dbg !3657
  %51 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !3657
  br i1 %51, label %after_check53, label %assign_optional52, !dbg !3657

assign_optional52:                                ; preds = %match49
  store i64 %50, ptr %error_var38, align 8, !dbg !3657
  br label %guard_block54, !dbg !3657

after_check53:                                    ; preds = %match49
  br label %noerr_block55, !dbg !3657

guard_block54:                                    ; preds = %assign_optional52
  %52 = load i64, ptr %error_var38, align 8, !dbg !3657
  ret i64 %52, !dbg !3657

noerr_block55:                                    ; preds = %after_check53
  %53 = load i64, ptr %retparam50, align 8, !dbg !3657
  store i64 %53, ptr %len, align 8, !dbg !3657
  %ptradd57 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3658
  %54 = load i64, ptr %ptradd57, align 8, !dbg !3658
  %55 = inttoptr i64 %54 to ptr, !dbg !3658
  %type60 = load ptr, ptr %.cachedtype59, align 8
  %56 = icmp eq ptr %55, %type60
  br i1 %56, label %cache_hit63, label %cache_miss61

cache_miss61:                                     ; preds = %noerr_block55
  %ptradd62 = getelementptr inbounds i8, ptr %55, i64 16
  %57 = load ptr, ptr %ptradd62, align 8
  %58 = call ptr @.dyn_search(ptr %57, ptr @"$sel.seek")
  store ptr %58, ptr %.inlinecache58, align 8
  store ptr %55, ptr %.cachedtype59, align 8
  br label %59

cache_hit63:                                      ; preds = %noerr_block55
  %cache_hit_fn64 = load ptr, ptr %.inlinecache58, align 8
  br label %59

59:                                               ; preds = %cache_hit63, %cache_miss61
  %fn_phi65 = phi ptr [ %cache_hit_fn64, %cache_hit63 ], [ %58, %cache_miss61 ]
  %60 = icmp eq ptr %fn_phi65, null
  br i1 %60, label %missing_function66, label %match67

missing_function66:                               ; preds = %59
  %61 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3659
  call void %61(ptr @.panic_msg.180, i64 41, ptr @.file.52, i64 9, ptr @.func.74, i64 9, i32 34), !dbg !3659
  unreachable, !dbg !3659

match67:                                          ; preds = %59
  %62 = load ptr, ptr %s, align 8
  %63 = load i64, ptr %curr, align 8
  %64 = call i64 %fn_phi65(ptr %retparam68, ptr %62, i64 %63, i32 0), !dbg !3659
  %not_err69 = icmp eq i64 %64, 0, !dbg !3659
  %65 = call i1 @llvm.expect.i1(i1 %not_err69, i1 true), !dbg !3659
  br i1 %65, label %after_check71, label %assign_optional70, !dbg !3659

assign_optional70:                                ; preds = %match67
  store i64 %64, ptr %error_var56, align 8, !dbg !3659
  br label %guard_block72, !dbg !3659

after_check71:                                    ; preds = %match67
  br label %noerr_block73, !dbg !3659

guard_block72:                                    ; preds = %assign_optional70
  %66 = load i64, ptr %error_var56, align 8, !dbg !3659
  ret i64 %66, !dbg !3659

noerr_block73:                                    ; preds = %after_check71
  %67 = load i64, ptr %len, align 8, !dbg !3660
  %68 = load i64, ptr %curr, align 8, !dbg !3661
  %sub = sub i64 %67, %68, !dbg !3660
  store i64 %sub, ptr %0, align 8, !dbg !3660
  ret i64 0, !dbg !3660

if.exit75:                                        ; preds = %27
  store i64 0, ptr %0, align 8, !dbg !3662
  ret i64 0, !dbg !3662
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.copy_to(ptr %0, i64 %1, ptr %2, i64 %3, ptr %4, ptr byval(%"char[]") align 8 %5) #0 comdat !dbg !3663 {
entry:
  %in = alloca %any, align 8
  %dst = alloca %any, align 8
  %reterr = alloca i64, align 8
  %in3 = alloca %any, align 8
  %dst4 = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %total_copied = alloca i64, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %.inlinecache25 = alloca ptr, align 8
  %.cachedtype26 = alloca ptr, align 8
  %retparam35 = alloca i64, align 8
  %.inlinecache45 = alloca ptr, align 8
  %.cachedtype46 = alloca ptr, align 8
  %reterr54 = alloca i64, align 8
  %.inlinecache56 = alloca ptr, align 8
  %.cachedtype57 = alloca ptr, align 8
  %retparam66 = alloca i64, align 8
  %.inlinecache76 = alloca ptr, align 8
  %.cachedtype77 = alloca ptr, align 8
  %reterr86 = alloca i64, align 8
  %.inlinecache88 = alloca ptr, align 8
  %.cachedtype89 = alloca ptr, align 8
  %retparam98 = alloca i64, align 8
  %reterr107 = alloca i64, align 8
  %in108 = alloca %any, align 8
  %dst109 = alloca %any, align 8
  %literal = alloca [4096 x i8], align 16
  %buffer110 = alloca %"char[]", align 8
  %blockret111 = alloca i64, align 8
  %total_copied112 = alloca i64, align 8
  %len114 = alloca i64, align 8
  %len.f115 = alloca i64, align 8
  %.inlinecache117 = alloca ptr, align 8
  %.cachedtype118 = alloca ptr, align 8
  %retparam127 = alloca i64, align 8
  %err135 = alloca i64, align 8
  %switch144 = alloca i64, align 8
  %written154 = alloca i64, align 8
  %error_var155 = alloca i64, align 8
  %taddr158 = alloca i64, align 8
  %taddr159 = alloca i64, align 8
  %varargslots160 = alloca [2 x %any], align 16
  %indirectarg163 = alloca %"any[]", align 8
  %taddr169 = alloca i64, align 8
  %taddr170 = alloca i64, align 8
  %varargslots171 = alloca [2 x %any], align 16
  %indirectarg174 = alloca %"any[]", align 8
  %.inlinecache178 = alloca ptr, align 8
  %.cachedtype179 = alloca ptr, align 8
  %retparam188 = alloca i64, align 8
  store ptr null, ptr %.cachedtype179, align 8
  store ptr null, ptr %.cachedtype118, align 8
  store ptr null, ptr %.cachedtype89, align 8
  store ptr null, ptr %.cachedtype77, align 8
  store ptr null, ptr %.cachedtype57, align 8
  store ptr null, ptr %.cachedtype46, align 8
  store ptr null, ptr %.cachedtype26, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %1, ptr %in, align 8
  %ptradd = getelementptr inbounds i8, ptr %in, i64 8
  store ptr %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %in, metadata !3666, metadata !DIExpression()), !dbg !3667
  store i64 %3, ptr %dst, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %dst, i64 8
  store ptr %4, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %dst, metadata !3668, metadata !DIExpression()), !dbg !3669
  call void @llvm.dbg.declare(metadata ptr %5, metadata !3670, metadata !DIExpression()), !dbg !3671
  %ptradd2 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3672
  %6 = load i64, ptr %ptradd2, align 8, !dbg !3672
  %intbool = icmp ne i64 %6, 0, !dbg !3672
  br i1 %intbool, label %if.then, label %if.exit43, !dbg !3672

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in3, ptr align 8 %in, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst4, ptr align 8 %dst, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buffer, ptr align 8 %5, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %total_copied, metadata !3673, metadata !DIExpression()), !dbg !3675
  store i64 0, ptr %total_copied, align 8, !dbg !3675
  br label %loop.body, !dbg !3677

loop.body:                                        ; preds = %if.exit42, %if.then
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3678, metadata !DIExpression()), !dbg !3681
  %ptradd5 = getelementptr inbounds i8, ptr %in3, i64 8, !dbg !3682
  %7 = load i64, ptr %ptradd5, align 8, !dbg !3682
  %8 = inttoptr i64 %7 to ptr, !dbg !3682
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %loop.body
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd6, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %loop.body
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  %14 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3683
  call void %14(ptr @.panic_msg.81, i64 41, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 174), !dbg !3683
  unreachable, !dbg !3683

match:                                            ; preds = %12
  %15 = load ptr, ptr %in3, align 8
  %lo = load ptr, ptr %buffer, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %buffer, i64 8
  %hi = load i64, ptr %ptradd7, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15, ptr %lo, i64 %hi), !dbg !3683
  %not_err = icmp eq i64 %16, 0, !dbg !3683
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3683
  br i1 %17, label %after_check, label %assign_optional, !dbg !3683

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %len.f, align 8, !dbg !3683
  br label %after_assign, !dbg !3683

after_check:                                      ; preds = %match
  %18 = load i64, ptr %retparam, align 8, !dbg !3683
  store i64 %18, ptr %len, align 8, !dbg !3683
  store i64 0, ptr %len.f, align 8, !dbg !3683
  br label %after_assign, !dbg !3683

after_assign:                                     ; preds = %after_check, %assign_optional
  call void @llvm.dbg.declare(metadata ptr %err, metadata !3684, metadata !DIExpression()), !dbg !3685
  br label %testblock, !dbg !3685

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %len.f, align 8, !dbg !3686
  %not_err8 = icmp eq i64 %optval, 0, !dbg !3686
  %19 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true), !dbg !3686
  br i1 %19, label %after_check10, label %assign_optional9, !dbg !3686

assign_optional9:                                 ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3686
  br label %end_block, !dbg !3686

after_check10:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3686
  br label %end_block, !dbg !3686

end_block:                                        ; preds = %after_check10, %assign_optional9
  %20 = load i64, ptr %err, align 8, !dbg !3686
  %neq = icmp ne i64 %20, 0, !dbg !3686
  br i1 %neq, label %if.then11, label %if.exit, !dbg !3686

if.then11:                                        ; preds = %end_block
  store i64 %20, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then11
  %21 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %21, !dbg !3687
  br i1 %eq, label %switch.case, label %next_if, !dbg !3687

switch.case:                                      ; preds = %switch.entry
  %22 = load i64, ptr %total_copied, align 8, !dbg !3688
  store i64 %22, ptr %blockret, align 8, !dbg !3688
  br label %expr_block.exit, !dbg !3688

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !3688

switch.default:                                   ; preds = %next_if
  %23 = load i64, ptr %err, align 8, !dbg !3690
  store i64 %23, ptr %reterr, align 8, !dbg !3690
  br label %err_retblock, !dbg !3690

if.exit:                                          ; preds = %end_block
  %24 = load i64, ptr %len, align 8, !dbg !3692
  %not = icmp eq i64 %24, 0, !dbg !3692
  br i1 %not, label %if.then12, label %if.exit13, !dbg !3692

if.then12:                                        ; preds = %if.exit
  %25 = load i64, ptr %total_copied, align 8, !dbg !3693
  store i64 %25, ptr %blockret, align 8, !dbg !3693
  br label %expr_block.exit, !dbg !3693

if.exit13:                                        ; preds = %if.exit
  call void @llvm.dbg.declare(metadata ptr %written, metadata !3694, metadata !DIExpression()), !dbg !3695
  %26 = load %"char[]", ptr %buffer, align 8, !dbg !3696
  %27 = extractvalue %"char[]" %26, 0, !dbg !3696
  %28 = extractvalue %"char[]" %26, 1, !dbg !3697
  %gt = icmp ugt i64 0, %28, !dbg !3697
  %29 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3697
  br i1 %29, label %panic, label %checkok, !dbg !3697

checkok:                                          ; preds = %if.exit13
  %30 = load i64, ptr %len, align 8, !dbg !3698
  %add = add i64 0, %30, !dbg !3698
  %lt = icmp ult i64 %28, %add, !dbg !3698
  %sub = sub i64 %add, 1, !dbg !3698
  %31 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3698
  br i1 %31, label %panic16, label %checkok23, !dbg !3698

checkok23:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !3696
  %32 = insertvalue %"char[]" undef, ptr %27, 0, !dbg !3696
  %33 = insertvalue %"char[]" %32, i64 %size, 1, !dbg !3696
  %ptradd24 = getelementptr inbounds i8, ptr %dst4, i64 8, !dbg !3696
  %34 = load i64, ptr %ptradd24, align 8, !dbg !3696
  %35 = inttoptr i64 %34 to ptr, !dbg !3696
  %type27 = load ptr, ptr %.cachedtype26, align 8
  %36 = icmp eq ptr %35, %type27
  br i1 %36, label %cache_hit30, label %cache_miss28

cache_miss28:                                     ; preds = %checkok23
  %ptradd29 = getelementptr inbounds i8, ptr %35, i64 16
  %37 = load ptr, ptr %ptradd29, align 8
  %38 = call ptr @.dyn_search(ptr %37, ptr @"$sel.write")
  store ptr %38, ptr %.inlinecache25, align 8
  store ptr %35, ptr %.cachedtype26, align 8
  br label %39

cache_hit30:                                      ; preds = %checkok23
  %cache_hit_fn31 = load ptr, ptr %.inlinecache25, align 8
  br label %39

39:                                               ; preds = %cache_hit30, %cache_miss28
  %fn_phi32 = phi ptr [ %cache_hit_fn31, %cache_hit30 ], [ %38, %cache_miss28 ]
  %40 = icmp eq ptr %fn_phi32, null
  br i1 %40, label %missing_function33, label %match34

missing_function33:                               ; preds = %39
  %41 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3699
  call void %41(ptr @.panic_msg.51, i64 42, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 181), !dbg !3699
  unreachable, !dbg !3699

match34:                                          ; preds = %39
  %42 = load ptr, ptr %dst4, align 8
  %43 = call i64 %fn_phi32(ptr %retparam35, ptr %42, ptr %27, i64 %size), !dbg !3699
  %not_err36 = icmp eq i64 %43, 0, !dbg !3699
  %44 = call i1 @llvm.expect.i1(i1 %not_err36, i1 true), !dbg !3699
  br i1 %44, label %after_check38, label %assign_optional37, !dbg !3699

assign_optional37:                                ; preds = %match34
  store i64 %43, ptr %error_var, align 8, !dbg !3699
  br label %guard_block, !dbg !3699

after_check38:                                    ; preds = %match34
  br label %noerr_block, !dbg !3699

guard_block:                                      ; preds = %assign_optional37
  %45 = load i64, ptr %error_var, align 8, !dbg !3699
  store i64 %45, ptr %reterr, align 8, !dbg !3699
  br label %err_retblock, !dbg !3699

noerr_block:                                      ; preds = %after_check38
  %46 = load i64, ptr %retparam35, align 8, !dbg !3699
  store i64 %46, ptr %written, align 8, !dbg !3699
  %47 = load i64, ptr %total_copied, align 8, !dbg !3700
  %48 = load i64, ptr %len, align 8, !dbg !3701
  %add39 = add i64 %47, %48, !dbg !3700
  store i64 %add39, ptr %total_copied, align 8, !dbg !3700
  %49 = load i64, ptr %written, align 8, !dbg !3702
  %50 = load i64, ptr %len, align 8, !dbg !3703
  %neq40 = icmp ne i64 %49, %50, !dbg !3702
  br i1 %neq40, label %if.then41, label %if.exit42, !dbg !3702

if.then41:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %reterr, align 8, !dbg !3704
  br label %err_retblock, !dbg !3704

if.exit42:                                        ; preds = %noerr_block
  br label %loop.body, !dbg !3704

expr_block.exit:                                  ; preds = %if.then12, %switch.case
  %51 = load i64, ptr %blockret, align 8, !dbg !3704
  store i64 %51, ptr %0, align 8, !dbg !3704
  ret i64 0, !dbg !3704

err_retblock:                                     ; preds = %if.then41, %guard_block, %switch.default
  %52 = load i64, ptr %reterr, align 8, !dbg !3704
  ret i64 %52, !dbg !3704

if.exit43:                                        ; preds = %entry
  %ptradd44 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !3705
  %53 = load i64, ptr %ptradd44, align 8, !dbg !3705
  %54 = inttoptr i64 %53 to ptr, !dbg !3705
  %type47 = load ptr, ptr %.cachedtype46, align 8
  %55 = icmp eq ptr %54, %type47
  br i1 %55, label %cache_hit50, label %cache_miss48

cache_miss48:                                     ; preds = %if.exit43
  %ptradd49 = getelementptr inbounds i8, ptr %54, i64 16
  %56 = load ptr, ptr %ptradd49, align 8
  %57 = call ptr @.dyn_search(ptr %56, ptr @"$sel.write_to")
  store ptr %57, ptr %.inlinecache45, align 8
  store ptr %54, ptr %.cachedtype46, align 8
  br label %58

cache_hit50:                                      ; preds = %if.exit43
  %cache_hit_fn51 = load ptr, ptr %.inlinecache45, align 8
  br label %58

58:                                               ; preds = %cache_hit50, %cache_miss48
  %fn_phi52 = phi ptr [ %cache_hit_fn51, %cache_hit50 ], [ %57, %cache_miss48 ]
  %ptrbool = icmp ne ptr %fn_phi52, null
  br i1 %ptrbool, label %if.then53, label %if.exit74

if.then53:                                        ; preds = %58
  %ptradd55 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !3706
  %59 = load i64, ptr %ptradd55, align 8, !dbg !3706
  %60 = inttoptr i64 %59 to ptr, !dbg !3706
  %type58 = load ptr, ptr %.cachedtype57, align 8
  %61 = icmp eq ptr %60, %type58
  br i1 %61, label %cache_hit61, label %cache_miss59

cache_miss59:                                     ; preds = %if.then53
  %ptradd60 = getelementptr inbounds i8, ptr %60, i64 16
  %62 = load ptr, ptr %ptradd60, align 8
  %63 = call ptr @.dyn_search(ptr %62, ptr @"$sel.write_to")
  store ptr %63, ptr %.inlinecache56, align 8
  store ptr %60, ptr %.cachedtype57, align 8
  br label %64

cache_hit61:                                      ; preds = %if.then53
  %cache_hit_fn62 = load ptr, ptr %.inlinecache56, align 8
  br label %64

64:                                               ; preds = %cache_hit61, %cache_miss59
  %fn_phi63 = phi ptr [ %cache_hit_fn62, %cache_hit61 ], [ %63, %cache_miss59 ]
  %65 = icmp eq ptr %fn_phi63, null
  br i1 %65, label %missing_function64, label %match65

missing_function64:                               ; preds = %64
  %66 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3707
  call void %66(ptr @.panic_msg.182, i64 45, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 156), !dbg !3707
  unreachable, !dbg !3707

match65:                                          ; preds = %64
  %67 = load ptr, ptr %in, align 8
  %lo67 = load i64, ptr %dst, align 8
  %ptradd68 = getelementptr inbounds i8, ptr %dst, i64 8
  %hi69 = load ptr, ptr %ptradd68, align 8
  %68 = call i64 %fn_phi63(ptr %retparam66, ptr %67, i64 %lo67, ptr %hi69), !dbg !3707
  %not_err70 = icmp eq i64 %68, 0, !dbg !3707
  %69 = call i1 @llvm.expect.i1(i1 %not_err70, i1 true), !dbg !3707
  br i1 %69, label %after_check72, label %assign_optional71, !dbg !3707

assign_optional71:                                ; preds = %match65
  store i64 %68, ptr %reterr54, align 8, !dbg !3707
  br label %err_retblock73, !dbg !3707

after_check72:                                    ; preds = %match65
  %70 = load i64, ptr %retparam66, align 8, !dbg !3707
  store i64 %70, ptr %0, align 8, !dbg !3707
  ret i64 0, !dbg !3707

err_retblock73:                                   ; preds = %assign_optional71
  %71 = load i64, ptr %reterr54, align 8, !dbg !3707
  ret i64 %71, !dbg !3707

if.exit74:                                        ; preds = %58
  %ptradd75 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !3708
  %72 = load i64, ptr %ptradd75, align 8, !dbg !3708
  %73 = inttoptr i64 %72 to ptr, !dbg !3708
  %type78 = load ptr, ptr %.cachedtype77, align 8
  %74 = icmp eq ptr %73, %type78
  br i1 %74, label %cache_hit81, label %cache_miss79

cache_miss79:                                     ; preds = %if.exit74
  %ptradd80 = getelementptr inbounds i8, ptr %73, i64 16
  %75 = load ptr, ptr %ptradd80, align 8
  %76 = call ptr @.dyn_search(ptr %75, ptr @"$sel.read_to")
  store ptr %76, ptr %.inlinecache76, align 8
  store ptr %73, ptr %.cachedtype77, align 8
  br label %77

cache_hit81:                                      ; preds = %if.exit74
  %cache_hit_fn82 = load ptr, ptr %.inlinecache76, align 8
  br label %77

77:                                               ; preds = %cache_hit81, %cache_miss79
  %fn_phi83 = phi ptr [ %cache_hit_fn82, %cache_hit81 ], [ %76, %cache_miss79 ]
  %ptrbool84 = icmp ne ptr %fn_phi83, null
  br i1 %ptrbool84, label %if.then85, label %if.exit106

if.then85:                                        ; preds = %77
  %ptradd87 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !3709
  %78 = load i64, ptr %ptradd87, align 8, !dbg !3709
  %79 = inttoptr i64 %78 to ptr, !dbg !3709
  %type90 = load ptr, ptr %.cachedtype89, align 8
  %80 = icmp eq ptr %79, %type90
  br i1 %80, label %cache_hit93, label %cache_miss91

cache_miss91:                                     ; preds = %if.then85
  %ptradd92 = getelementptr inbounds i8, ptr %79, i64 16
  %81 = load ptr, ptr %ptradd92, align 8
  %82 = call ptr @.dyn_search(ptr %81, ptr @"$sel.read_to")
  store ptr %82, ptr %.inlinecache88, align 8
  store ptr %79, ptr %.cachedtype89, align 8
  br label %83

cache_hit93:                                      ; preds = %if.then85
  %cache_hit_fn94 = load ptr, ptr %.inlinecache88, align 8
  br label %83

83:                                               ; preds = %cache_hit93, %cache_miss91
  %fn_phi95 = phi ptr [ %cache_hit_fn94, %cache_hit93 ], [ %82, %cache_miss91 ]
  %84 = icmp eq ptr %fn_phi95, null
  br i1 %84, label %missing_function96, label %match97

missing_function96:                               ; preds = %83
  %85 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3710
  call void %85(ptr @.panic_msg.183, i64 44, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 157), !dbg !3710
  unreachable, !dbg !3710

match97:                                          ; preds = %83
  %86 = load ptr, ptr %dst, align 8
  %lo99 = load i64, ptr %in, align 8
  %ptradd100 = getelementptr inbounds i8, ptr %in, i64 8
  %hi101 = load ptr, ptr %ptradd100, align 8
  %87 = call i64 %fn_phi95(ptr %retparam98, ptr %86, i64 %lo99, ptr %hi101), !dbg !3710
  %not_err102 = icmp eq i64 %87, 0, !dbg !3710
  %88 = call i1 @llvm.expect.i1(i1 %not_err102, i1 true), !dbg !3710
  br i1 %88, label %after_check104, label %assign_optional103, !dbg !3710

assign_optional103:                               ; preds = %match97
  store i64 %87, ptr %reterr86, align 8, !dbg !3710
  br label %err_retblock105, !dbg !3710

after_check104:                                   ; preds = %match97
  %89 = load i64, ptr %retparam98, align 8, !dbg !3710
  store i64 %89, ptr %0, align 8, !dbg !3710
  ret i64 0, !dbg !3710

err_retblock105:                                  ; preds = %assign_optional103
  %90 = load i64, ptr %reterr86, align 8, !dbg !3710
  ret i64 %90, !dbg !3710

if.exit106:                                       ; preds = %77
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in108, ptr align 8 %in, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst109, ptr align 8 %dst, i32 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %literal, i8 0, i64 4096, i1 false)
  %91 = insertvalue %"char[]" undef, ptr %literal, 0
  %92 = insertvalue %"char[]" %91, i64 4096, 1
  store %"char[]" %92, ptr %buffer110, align 8
  call void @llvm.dbg.declare(metadata ptr %total_copied112, metadata !3711, metadata !DIExpression()), !dbg !3713
  store i64 0, ptr %total_copied112, align 8, !dbg !3713
  br label %loop.body113, !dbg !3715

loop.body113:                                     ; preds = %if.exit197, %if.exit106
  call void @llvm.dbg.declare(metadata ptr %len114, metadata !3716, metadata !DIExpression()), !dbg !3719
  %ptradd116 = getelementptr inbounds i8, ptr %in108, i64 8, !dbg !3720
  %93 = load i64, ptr %ptradd116, align 8, !dbg !3720
  %94 = inttoptr i64 %93 to ptr, !dbg !3720
  %type119 = load ptr, ptr %.cachedtype118, align 8
  %95 = icmp eq ptr %94, %type119
  br i1 %95, label %cache_hit122, label %cache_miss120

cache_miss120:                                    ; preds = %loop.body113
  %ptradd121 = getelementptr inbounds i8, ptr %94, i64 16
  %96 = load ptr, ptr %ptradd121, align 8
  %97 = call ptr @.dyn_search(ptr %96, ptr @"$sel.read")
  store ptr %97, ptr %.inlinecache117, align 8
  store ptr %94, ptr %.cachedtype118, align 8
  br label %98

cache_hit122:                                     ; preds = %loop.body113
  %cache_hit_fn123 = load ptr, ptr %.inlinecache117, align 8
  br label %98

98:                                               ; preds = %cache_hit122, %cache_miss120
  %fn_phi124 = phi ptr [ %cache_hit_fn123, %cache_hit122 ], [ %97, %cache_miss120 ]
  %99 = icmp eq ptr %fn_phi124, null
  br i1 %99, label %missing_function125, label %match126

missing_function125:                              ; preds = %98
  %100 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3721
  call void %100(ptr @.panic_msg.81, i64 41, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 174), !dbg !3721
  unreachable, !dbg !3721

match126:                                         ; preds = %98
  %101 = load ptr, ptr %in108, align 8
  %lo128 = load ptr, ptr %buffer110, align 8
  %ptradd129 = getelementptr inbounds i8, ptr %buffer110, i64 8
  %hi130 = load i64, ptr %ptradd129, align 8
  %102 = call i64 %fn_phi124(ptr %retparam127, ptr %101, ptr %lo128, i64 %hi130), !dbg !3721
  %not_err131 = icmp eq i64 %102, 0, !dbg !3721
  %103 = call i1 @llvm.expect.i1(i1 %not_err131, i1 true), !dbg !3721
  br i1 %103, label %after_check133, label %assign_optional132, !dbg !3721

assign_optional132:                               ; preds = %match126
  store i64 %102, ptr %len.f115, align 8, !dbg !3721
  br label %after_assign134, !dbg !3721

after_check133:                                   ; preds = %match126
  %104 = load i64, ptr %retparam127, align 8, !dbg !3721
  store i64 %104, ptr %len114, align 8, !dbg !3721
  store i64 0, ptr %len.f115, align 8, !dbg !3721
  br label %after_assign134, !dbg !3721

after_assign134:                                  ; preds = %after_check133, %assign_optional132
  call void @llvm.dbg.declare(metadata ptr %err135, metadata !3722, metadata !DIExpression()), !dbg !3723
  br label %testblock136, !dbg !3723

testblock136:                                     ; preds = %after_assign134
  %optval137 = load i64, ptr %len.f115, align 8, !dbg !3724
  %not_err138 = icmp eq i64 %optval137, 0, !dbg !3724
  %105 = call i1 @llvm.expect.i1(i1 %not_err138, i1 true), !dbg !3724
  br i1 %105, label %after_check140, label %assign_optional139, !dbg !3724

assign_optional139:                               ; preds = %testblock136
  store i64 %optval137, ptr %err135, align 8, !dbg !3724
  br label %end_block141, !dbg !3724

after_check140:                                   ; preds = %testblock136
  store i64 0, ptr %err135, align 8, !dbg !3724
  br label %end_block141, !dbg !3724

end_block141:                                     ; preds = %after_check140, %assign_optional139
  %106 = load i64, ptr %err135, align 8, !dbg !3724
  %neq142 = icmp ne i64 %106, 0, !dbg !3724
  br i1 %neq142, label %if.then143, label %if.exit150, !dbg !3724

if.then143:                                       ; preds = %end_block141
  store i64 %106, ptr %switch144, align 8
  br label %switch.entry145

switch.entry145:                                  ; preds = %if.then143
  %107 = load i64, ptr %switch144, align 8
  %eq146 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %107, !dbg !3725
  br i1 %eq146, label %switch.case147, label %next_if148, !dbg !3725

switch.case147:                                   ; preds = %switch.entry145
  %108 = load i64, ptr %total_copied112, align 8, !dbg !3726
  store i64 %108, ptr %blockret111, align 8, !dbg !3726
  br label %expr_block.exit198, !dbg !3726

next_if148:                                       ; preds = %switch.entry145
  br label %switch.default149, !dbg !3726

switch.default149:                                ; preds = %next_if148
  %109 = load i64, ptr %err135, align 8, !dbg !3728
  store i64 %109, ptr %reterr107, align 8, !dbg !3728
  br label %err_retblock199, !dbg !3728

if.exit150:                                       ; preds = %end_block141
  %110 = load i64, ptr %len114, align 8, !dbg !3730
  %not151 = icmp eq i64 %110, 0, !dbg !3730
  br i1 %not151, label %if.then152, label %if.exit153, !dbg !3730

if.then152:                                       ; preds = %if.exit150
  %111 = load i64, ptr %total_copied112, align 8, !dbg !3731
  store i64 %111, ptr %blockret111, align 8, !dbg !3731
  br label %expr_block.exit198, !dbg !3731

if.exit153:                                       ; preds = %if.exit150
  call void @llvm.dbg.declare(metadata ptr %written154, metadata !3732, metadata !DIExpression()), !dbg !3733
  %112 = load %"char[]", ptr %buffer110, align 8, !dbg !3734
  %113 = extractvalue %"char[]" %112, 0, !dbg !3734
  %114 = extractvalue %"char[]" %112, 1, !dbg !3735
  %gt156 = icmp ugt i64 0, %114, !dbg !3735
  %115 = call i1 @llvm.expect.i1(i1 %gt156, i1 false), !dbg !3735
  br i1 %115, label %panic157, label %checkok164, !dbg !3735

checkok164:                                       ; preds = %if.exit153
  %116 = load i64, ptr %len114, align 8, !dbg !3736
  %add165 = add i64 0, %116, !dbg !3736
  %lt166 = icmp ult i64 %114, %add165, !dbg !3736
  %sub167 = sub i64 %add165, 1, !dbg !3736
  %117 = call i1 @llvm.expect.i1(i1 %lt166, i1 false), !dbg !3736
  br i1 %117, label %panic168, label %checkok175, !dbg !3736

checkok175:                                       ; preds = %checkok164
  %size176 = sub i64 %add165, 0, !dbg !3734
  %118 = insertvalue %"char[]" undef, ptr %113, 0, !dbg !3734
  %119 = insertvalue %"char[]" %118, i64 %size176, 1, !dbg !3734
  %ptradd177 = getelementptr inbounds i8, ptr %dst109, i64 8, !dbg !3734
  %120 = load i64, ptr %ptradd177, align 8, !dbg !3734
  %121 = inttoptr i64 %120 to ptr, !dbg !3734
  %type180 = load ptr, ptr %.cachedtype179, align 8
  %122 = icmp eq ptr %121, %type180
  br i1 %122, label %cache_hit183, label %cache_miss181

cache_miss181:                                    ; preds = %checkok175
  %ptradd182 = getelementptr inbounds i8, ptr %121, i64 16
  %123 = load ptr, ptr %ptradd182, align 8
  %124 = call ptr @.dyn_search(ptr %123, ptr @"$sel.write")
  store ptr %124, ptr %.inlinecache178, align 8
  store ptr %121, ptr %.cachedtype179, align 8
  br label %125

cache_hit183:                                     ; preds = %checkok175
  %cache_hit_fn184 = load ptr, ptr %.inlinecache178, align 8
  br label %125

125:                                              ; preds = %cache_hit183, %cache_miss181
  %fn_phi185 = phi ptr [ %cache_hit_fn184, %cache_hit183 ], [ %124, %cache_miss181 ]
  %126 = icmp eq ptr %fn_phi185, null
  br i1 %126, label %missing_function186, label %match187

missing_function186:                              ; preds = %125
  %127 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3737
  call void %127(ptr @.panic_msg.51, i64 42, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 181), !dbg !3737
  unreachable, !dbg !3737

match187:                                         ; preds = %125
  %128 = load ptr, ptr %dst109, align 8
  %129 = call i64 %fn_phi185(ptr %retparam188, ptr %128, ptr %113, i64 %size176), !dbg !3737
  %not_err189 = icmp eq i64 %129, 0, !dbg !3737
  %130 = call i1 @llvm.expect.i1(i1 %not_err189, i1 true), !dbg !3737
  br i1 %130, label %after_check191, label %assign_optional190, !dbg !3737

assign_optional190:                               ; preds = %match187
  store i64 %129, ptr %error_var155, align 8, !dbg !3737
  br label %guard_block192, !dbg !3737

after_check191:                                   ; preds = %match187
  br label %noerr_block193, !dbg !3737

guard_block192:                                   ; preds = %assign_optional190
  %131 = load i64, ptr %error_var155, align 8, !dbg !3737
  store i64 %131, ptr %reterr107, align 8, !dbg !3737
  br label %err_retblock199, !dbg !3737

noerr_block193:                                   ; preds = %after_check191
  %132 = load i64, ptr %retparam188, align 8, !dbg !3737
  store i64 %132, ptr %written154, align 8, !dbg !3737
  %133 = load i64, ptr %total_copied112, align 8, !dbg !3738
  %134 = load i64, ptr %len114, align 8, !dbg !3739
  %add194 = add i64 %133, %134, !dbg !3738
  store i64 %add194, ptr %total_copied112, align 8, !dbg !3738
  %135 = load i64, ptr %written154, align 8, !dbg !3740
  %136 = load i64, ptr %len114, align 8, !dbg !3741
  %neq195 = icmp ne i64 %135, %136, !dbg !3740
  br i1 %neq195, label %if.then196, label %if.exit197, !dbg !3740

if.then196:                                       ; preds = %noerr_block193
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %reterr107, align 8, !dbg !3742
  br label %err_retblock199, !dbg !3742

if.exit197:                                       ; preds = %noerr_block193
  br label %loop.body113, !dbg !3742

expr_block.exit198:                               ; preds = %if.then152, %switch.case147
  %137 = load i64, ptr %blockret111, align 8, !dbg !3742
  store i64 %137, ptr %0, align 8, !dbg !3742
  ret i64 0, !dbg !3742

err_retblock199:                                  ; preds = %if.then196, %guard_block192, %switch.default149
  %138 = load i64, ptr %reterr107, align 8, !dbg !3742
  ret i64 %138, !dbg !3742

panic:                                            ; preds = %if.exit13
  store i64 %28, ptr %taddr, align 8
  %139 = insertvalue %any undef, ptr %taddr, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr14, align 8
  %141 = insertvalue %any undef, ptr %taddr14, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %140, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %142, ptr %ptradd15, align 16
  %143 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %143, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 181, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3696
  unreachable, !dbg !3696

panic16:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr17, align 8
  %144 = insertvalue %any undef, ptr %taddr17, 0
  %145 = insertvalue %any %144, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %28, ptr %taddr18, align 8
  %146 = insertvalue %any undef, ptr %taddr18, 0
  %147 = insertvalue %any %146, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %145, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %147, ptr %ptradd20, align 16
  %148 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %148, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 181, ptr byval(%"any[]") align 8 %indirectarg22), !dbg !3696
  unreachable, !dbg !3696

panic157:                                         ; preds = %if.exit153
  store i64 %114, ptr %taddr158, align 8
  %149 = insertvalue %any undef, ptr %taddr158, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr159, align 8
  %151 = insertvalue %any undef, ptr %taddr159, 0
  %152 = insertvalue %any %151, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %150, ptr %varargslots160, align 16
  %ptradd161 = getelementptr inbounds i8, ptr %varargslots160, i64 16
  store %any %152, ptr %ptradd161, align 16
  %153 = insertvalue %"any[]" undef, ptr %varargslots160, 0
  %"$$temp162" = insertvalue %"any[]" %153, i64 2, 1
  store %"any[]" %"$$temp162", ptr %indirectarg163, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.64, i64 61, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 181, ptr byval(%"any[]") align 8 %indirectarg163), !dbg !3734
  unreachable, !dbg !3734

panic168:                                         ; preds = %checkok164
  store i64 %sub167, ptr %taddr169, align 8
  %154 = insertvalue %any undef, ptr %taddr169, 0
  %155 = insertvalue %any %154, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %114, ptr %taddr170, align 8
  %156 = insertvalue %any undef, ptr %taddr170, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %155, ptr %varargslots171, align 16
  %ptradd172 = getelementptr inbounds i8, ptr %varargslots171, i64 16
  store %any %157, ptr %ptradd172, align 16
  %158 = insertvalue %"any[]" undef, ptr %varargslots171, 0
  %"$$temp173" = insertvalue %"any[]" %158, i64 2, 1
  store %"any[]" %"$$temp173", ptr %indirectarg174, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.50, i64 60, ptr @.file.52, i64 9, ptr @.func.181, i64 7, i32 181, ptr byval(%"any[]") align 8 %indirectarg174), !dbg !3734
  unreachable, !dbg !3734
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.wrap_bytes(ptr noalias sret(%ByteReader) align 8 %0, ptr %1, i64 %2) #0 comdat !dbg !3743 {
entry:
  %bytes = alloca %"char[]", align 8
  %literal = alloca %ByteReader, align 8
  store ptr %1, ptr %bytes, align 8
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8
  store i64 %2, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !3746, metadata !DIExpression()), !dbg !3747
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %bytes, i32 16, i1 false), !dbg !3748
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3748
  store i64 0, ptr %ptradd1, align 8, !dbg !3749
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !3749
  ret void, !dbg !3749
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.core.ReflectedParam.to_format(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !3750 {
entry:
  %self = alloca ptr, align 8
  %f = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !3758
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3758
  br i1 %4, label %panic, label %checkok, !dbg !3758

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3759, metadata !DIExpression()), !dbg !3760
  store ptr %2, ptr %f, align 8
  call void @llvm.dbg.declare(metadata ptr %f, metadata !3761, metadata !DIExpression()), !dbg !3762
  %5 = load ptr, ptr %self, align 8, !dbg !3763
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !3763
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !3763
  store %any %7, ptr %varargslots, align 16, !dbg !3763
  %8 = load ptr, ptr %f, align 8
  %9 = call i64 @std.io.Formatter.printf(ptr %retparam, ptr %8, ptr @.str.186, i64 16, ptr %varargslots, i64 1), !dbg !3764
  %not_err = icmp eq i64 %9, 0, !dbg !3764
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3764
  br i1 %10, label %after_check, label %assign_optional, !dbg !3764

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %reterr, align 8, !dbg !3764
  br label %err_retblock, !dbg !3764

after_check:                                      ; preds = %checkok
  %11 = load i64, ptr %retparam, align 8, !dbg !3764
  store i64 %11, ptr %0, align 8, !dbg !3764
  ret i64 0, !dbg !3764

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !3764
  ret i64 %12, !dbg !3764

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3760
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.184, i64 12, ptr @.func.185, i64 9, i32 60), !dbg !3760
  unreachable, !dbg !3760
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.printf(ptr %0, ptr %1, ptr %2, i64 %3, ptr %4, i64 %5) #0 comdat !dbg !3765 {
entry:
  %self = alloca ptr, align 8
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !3768
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !3768
  br i1 %7, label %panic, label %checkok, !dbg !3768

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3769, metadata !DIExpression()), !dbg !3770
  store ptr %2, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !3771, metadata !DIExpression()), !dbg !3772
  store ptr %4, ptr %args, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8
  store i64 %5, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3773, metadata !DIExpression()), !dbg !3774
  %8 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %format, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %format, i64 8
  %hi = load i64, ptr %ptradd2, align 8
  %lo3 = load ptr, ptr %args, align 8
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8
  %hi5 = load i64, ptr %ptradd4, align 8
  %9 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %8, ptr %lo, i64 %hi, ptr %lo3, i64 %hi5) #5, !dbg !3775
  %not_err = icmp eq i64 %9, 0, !dbg !3775
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3775
  br i1 %10, label %after_check, label %assign_optional, !dbg !3775

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %reterr, align 8, !dbg !3775
  br label %err_retblock, !dbg !3775

after_check:                                      ; preds = %checkok
  %11 = load i64, ptr %retparam, align 8, !dbg !3775
  store i64 %11, ptr %0, align 8, !dbg !3775
  ret i64 0, !dbg !3775

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !3775
  ret i64 %12, !dbg !3775

panic:                                            ; preds = %entry
  %13 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3770
  call void %13(ptr @.panic_msg, i64 62, ptr @.file.184, i64 12, ptr @.func.187, i64 6, i32 65), !dbg !3770
  unreachable, !dbg !3770
}

; Function Attrs: nounwind ssp uwtable
define weak void @std.io.Formatter.init(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !3776 {
entry:
  %self = alloca ptr, align 8
  %out_fn = alloca ptr, align 8
  %data = alloca ptr, align 8
  %.assign_list = alloca %Formatter, align 8
  %3 = icmp eq ptr %0, null, !dbg !3779
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3779
  br i1 %4, label %panic, label %checkok, !dbg !3779

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3780, metadata !DIExpression()), !dbg !3781
  store ptr %1, ptr %out_fn, align 8
  call void @llvm.dbg.declare(metadata ptr %out_fn, metadata !3782, metadata !DIExpression()), !dbg !3783
  store ptr %2, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !3784, metadata !DIExpression()), !dbg !3785
  %5 = load ptr, ptr %self, align 8, !dbg !3786
  %checknull = icmp eq ptr %5, null, !dbg !3786
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3786
  br i1 %6, label %panic1, label %checkok2, !dbg !3786

checkok2:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  %7 = load ptr, ptr %data, align 8, !dbg !3787
  store ptr %7, ptr %.assign_list, align 8, !dbg !3787
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !3787
  %8 = load ptr, ptr %out_fn, align 8, !dbg !3788
  store ptr %8, ptr %ptradd, align 8, !dbg !3788
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !3788
  ret void, !dbg !3788

panic:                                            ; preds = %entry
  %9 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3781
  call void %9(ptr @.panic_msg, i64 62, ptr @.file.184, i64 12, ptr @.func, i64 4, i32 95), !dbg !3781
  unreachable, !dbg !3781

panic1:                                           ; preds = %checkok
  %10 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3786
  call void %10(ptr @.panic_msg.36, i64 45, ptr @.file.184, i64 12, ptr @.func, i64 4, i32 97), !dbg !3786
  unreachable, !dbg !3786
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out(ptr %0, ptr %1, i8 zeroext %2) #0 !dbg !3789 {
entry:
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %err = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !3792
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3792
  br i1 %4, label %panic, label %checkok, !dbg !3792

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3793, metadata !DIExpression()), !dbg !3794
  store i8 %2, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3795, metadata !DIExpression()), !dbg !3796
  call void @llvm.dbg.declare(metadata ptr %err, metadata !3797, metadata !DIExpression()), !dbg !3798
  br label %testblock, !dbg !3798

testblock:                                        ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !3799
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3799
  %6 = load ptr, ptr %ptradd, align 8, !dbg !3799
  %checknull = icmp eq ptr %6, null, !dbg !3799
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3799
  br i1 %7, label %panic1, label %checkok2, !dbg !3799

checkok2:                                         ; preds = %testblock
  %8 = load ptr, ptr %self, align 8, !dbg !3800
  %9 = load ptr, ptr %8, align 8, !dbg !3801
  %10 = load i8, ptr %c, align 1, !dbg !3801
  %11 = call i64 %6(ptr %9, i8 zeroext %10), !dbg !3799
  %not_err = icmp eq i64 %11, 0, !dbg !3799
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3799
  br i1 %12, label %after_check, label %assign_optional, !dbg !3799

assign_optional:                                  ; preds = %checkok2
  store i64 %11, ptr %err, align 8, !dbg !3799
  br label %end_block, !dbg !3799

after_check:                                      ; preds = %checkok2
  store i64 0, ptr %err, align 8, !dbg !3799
  br label %end_block, !dbg !3799

end_block:                                        ; preds = %after_check, %assign_optional
  %13 = load i64, ptr %err, align 8, !dbg !3799
  %neq = icmp ne i64 %13, 0, !dbg !3799
  br i1 %neq, label %if.then, label %if.exit11, !dbg !3799

if.then:                                          ; preds = %end_block
  %14 = load ptr, ptr %self, align 8, !dbg !3802
  %ptradd3 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !3802
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 24, !dbg !3802
  %15 = load i64, ptr %ptradd4, align 8, !dbg !3802
  %neq5 = icmp ne i64 %15, 0, !dbg !3802
  br i1 %neq5, label %if.then6, label %if.exit, !dbg !3802

if.then6:                                         ; preds = %if.then
  %16 = load ptr, ptr %self, align 8, !dbg !3804
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !3804
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 24, !dbg !3804
  %17 = load i64, ptr %ptradd8, align 8, !dbg !3804
  ret i64 %17, !dbg !3804

if.exit:                                          ; preds = %if.then
  %18 = load ptr, ptr %self, align 8, !dbg !3805
  %ptradd9 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !3805
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd9, i64 24, !dbg !3805
  %19 = load i64, ptr %err, align 8, !dbg !3806
  store i64 %19, ptr %ptradd10, align 8, !dbg !3806
  %20 = load i64, ptr %err, align 8, !dbg !3807
  ret i64 %20, !dbg !3807

if.exit11:                                        ; preds = %end_block
  store i64 1, ptr %0, align 8, !dbg !3808
  ret i64 0, !dbg !3808

panic:                                            ; preds = %entry
  %21 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3794
  call void %21(ptr @.panic_msg, i64 62, ptr @.file.184, i64 12, ptr @.func.188, i64 3, i32 100), !dbg !3794
  unreachable, !dbg !3794

panic1:                                           ; preds = %testblock
  %22 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3799
  call void %22(ptr @.panic_msg.189, i64 54, ptr @.file.184, i64 12, ptr @.func.188, i64 3, i32 102), !dbg !3799
  unreachable, !dbg !3799
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.print_with_function(ptr %0, ptr %1, i64 %2, ptr %3) #0 comdat !dbg !3809 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %old = alloca i32, align 4
  %old_width = alloca i32, align 4
  %old_prec = alloca i32, align 4
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr19 = alloca i64, align 8
  %.inlinecache21 = alloca ptr, align 8
  %.cachedtype22 = alloca ptr, align 8
  %retparam29 = alloca i64, align 8
  %.inlinecache46 = alloca ptr, align 8
  %.cachedtype47 = alloca ptr, align 8
  %old56 = alloca i32, align 4
  %old_width58 = alloca i32, align 4
  %old_prec61 = alloca i32, align 4
  %reterr66 = alloca i64, align 8
  %retparam67 = alloca i64, align 8
  %buffer = alloca [1024 x i8], align 16
  %allocator = alloca %OnStackAllocator, align 8
  %mem = alloca %any, align 8
  %reterr83 = alloca i64, align 8
  %.inlinecache85 = alloca ptr, align 8
  %.cachedtype86 = alloca ptr, align 8
  %result = alloca %"char[]", align 8
  %retparam98 = alloca i64, align 8
  store ptr null, ptr %.cachedtype86, align 8, !dbg !3816
  store ptr null, ptr %.cachedtype47, align 8, !dbg !3816
  store ptr null, ptr %.cachedtype22, align 8, !dbg !3816
  store ptr null, ptr %.cachedtype, align 8, !dbg !3816
  %4 = icmp eq ptr %1, null, !dbg !3816
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3816
  br i1 %5, label %panic, label %checkok, !dbg !3816

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3817, metadata !DIExpression()), !dbg !3818
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !3819, metadata !DIExpression()), !dbg !3820
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3821
  %6 = load i64, ptr %ptradd1, align 8, !dbg !3821
  %7 = inttoptr i64 %6 to ptr, !dbg !3821
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3816
  %8 = icmp eq ptr %7, %type, !dbg !3816
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !3816

cache_miss:                                       ; preds = %checkok
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !3816
  %9 = load ptr, ptr %ptradd2, align 8, !dbg !3816
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.to_format"), !dbg !3816
  store ptr %10, ptr %.inlinecache, align 8, !dbg !3816
  store ptr %7, ptr %.cachedtype, align 8, !dbg !3816
  br label %11, !dbg !3816

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3816
  br label %11, !dbg !3816

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !3816
  %ptrbool = icmp ne ptr %fn_phi, null, !dbg !3816
  br i1 %ptrbool, label %if.then, label %if.exit44, !dbg !3816

if.then:                                          ; preds = %11
  call void @llvm.dbg.declare(metadata ptr %old, metadata !3822, metadata !DIExpression()), !dbg !3824
  %12 = load ptr, ptr %self, align 8, !dbg !3825
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3825
  %13 = load i32, ptr %ptradd3, align 8, !dbg !3825
  store i32 %13, ptr %old, align 4, !dbg !3825
  call void @llvm.dbg.declare(metadata ptr %old_width, metadata !3826, metadata !DIExpression()), !dbg !3827
  %14 = load ptr, ptr %self, align 8, !dbg !3828
  %ptradd4 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !3828
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 4, !dbg !3828
  %15 = load i32, ptr %ptradd5, align 4, !dbg !3828
  store i32 %15, ptr %old_width, align 4, !dbg !3828
  call void @llvm.dbg.declare(metadata ptr %old_prec, metadata !3829, metadata !DIExpression()), !dbg !3830
  %16 = load ptr, ptr %self, align 8, !dbg !3831
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !3831
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !3831
  %17 = load i32, ptr %ptradd7, align 8, !dbg !3831
  store i32 %17, ptr %old_prec, align 4, !dbg !3831
  %18 = load ptr, ptr %arg, align 8, !dbg !3832
  %not = icmp eq ptr %18, null, !dbg !3832
  br i1 %not, label %if.then8, label %if.exit, !dbg !3832

if.then8:                                         ; preds = %if.then
  %19 = load ptr, ptr %self, align 8
  %20 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %19, ptr @.str.191, i64 6), !dbg !3833
  %not_err = icmp eq i64 %20, 0, !dbg !3833
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3833
  br i1 %21, label %after_check, label %assign_optional, !dbg !3833

assign_optional:                                  ; preds = %if.then8
  store i64 %20, ptr %reterr, align 8, !dbg !3833
  br label %err_retblock, !dbg !3833

after_check:                                      ; preds = %if.then8
  %22 = load i64, ptr %retparam, align 8, !dbg !3833
  %23 = load ptr, ptr %self, align 8, !dbg !3834
  %ptradd9 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !3834
  %24 = load i32, ptr %old, align 4, !dbg !3836
  store i32 %24, ptr %ptradd9, align 8, !dbg !3836
  %25 = load ptr, ptr %self, align 8, !dbg !3837
  %ptradd10 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !3837
  %ptradd11 = getelementptr inbounds i8, ptr %ptradd10, i64 4, !dbg !3837
  %26 = load i32, ptr %old_width, align 4, !dbg !3838
  store i32 %26, ptr %ptradd11, align 4, !dbg !3838
  %27 = load ptr, ptr %self, align 8, !dbg !3839
  %ptradd12 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !3839
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd12, i64 8, !dbg !3839
  %28 = load i32, ptr %old_prec, align 4, !dbg !3840
  store i32 %28, ptr %ptradd13, align 8, !dbg !3840
  store i64 %22, ptr %0, align 8, !dbg !3840
  ret i64 0, !dbg !3840

err_retblock:                                     ; preds = %assign_optional
  %29 = load ptr, ptr %self, align 8, !dbg !3841
  %ptradd14 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !3841
  %30 = load i32, ptr %old, align 4, !dbg !3843
  store i32 %30, ptr %ptradd14, align 8, !dbg !3843
  %31 = load ptr, ptr %self, align 8, !dbg !3844
  %ptradd15 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !3844
  %ptradd16 = getelementptr inbounds i8, ptr %ptradd15, i64 4, !dbg !3844
  %32 = load i32, ptr %old_width, align 4, !dbg !3845
  store i32 %32, ptr %ptradd16, align 4, !dbg !3845
  %33 = load ptr, ptr %self, align 8, !dbg !3846
  %ptradd17 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !3846
  %ptradd18 = getelementptr inbounds i8, ptr %ptradd17, i64 8, !dbg !3846
  %34 = load i32, ptr %old_prec, align 4, !dbg !3847
  store i32 %34, ptr %ptradd18, align 8, !dbg !3847
  %35 = load i64, ptr %reterr, align 8, !dbg !3847
  ret i64 %35, !dbg !3847

if.exit:                                          ; preds = %if.then
  %ptradd20 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3848
  %36 = load i64, ptr %ptradd20, align 8, !dbg !3848
  %37 = inttoptr i64 %36 to ptr, !dbg !3848
  %type23 = load ptr, ptr %.cachedtype22, align 8, !dbg !3816
  %38 = icmp eq ptr %37, %type23, !dbg !3816
  br i1 %38, label %cache_hit26, label %cache_miss24, !dbg !3816

cache_miss24:                                     ; preds = %if.exit
  %ptradd25 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !3816
  %39 = load ptr, ptr %ptradd25, align 8, !dbg !3816
  %40 = call ptr @.dyn_search(ptr %39, ptr @"$sel.to_format"), !dbg !3816
  store ptr %40, ptr %.inlinecache21, align 8, !dbg !3816
  store ptr %37, ptr %.cachedtype22, align 8, !dbg !3816
  br label %41, !dbg !3816

cache_hit26:                                      ; preds = %if.exit
  %cache_hit_fn27 = load ptr, ptr %.inlinecache21, align 8, !dbg !3816
  br label %41, !dbg !3816

41:                                               ; preds = %cache_hit26, %cache_miss24
  %fn_phi28 = phi ptr [ %cache_hit_fn27, %cache_hit26 ], [ %40, %cache_miss24 ], !dbg !3816
  %42 = icmp eq ptr %fn_phi28, null, !dbg !3816
  br i1 %42, label %missing_function, label %match, !dbg !3816

missing_function:                                 ; preds = %41
  %43 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3849
  call void %43(ptr @.panic_msg.192, i64 46, ptr @.file.184, i64 12, ptr @.func.190, i64 19, i32 125), !dbg !3849
  unreachable, !dbg !3849

match:                                            ; preds = %41
  %44 = load ptr, ptr %arg, align 8
  %45 = load ptr, ptr %self, align 8
  %46 = call i64 %fn_phi28(ptr %retparam29, ptr %44, ptr %45), !dbg !3849
  %not_err30 = icmp eq i64 %46, 0, !dbg !3849
  %47 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !3849
  br i1 %47, label %after_check32, label %assign_optional31, !dbg !3849

assign_optional31:                                ; preds = %match
  store i64 %46, ptr %reterr19, align 8, !dbg !3849
  br label %err_retblock38, !dbg !3849

after_check32:                                    ; preds = %match
  %48 = load i64, ptr %retparam29, align 8, !dbg !3849
  %49 = load ptr, ptr %self, align 8, !dbg !3850
  %ptradd33 = getelementptr inbounds i8, ptr %49, i64 16, !dbg !3850
  %50 = load i32, ptr %old, align 4, !dbg !3852
  store i32 %50, ptr %ptradd33, align 8, !dbg !3852
  %51 = load ptr, ptr %self, align 8, !dbg !3853
  %ptradd34 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !3853
  %ptradd35 = getelementptr inbounds i8, ptr %ptradd34, i64 4, !dbg !3853
  %52 = load i32, ptr %old_width, align 4, !dbg !3854
  store i32 %52, ptr %ptradd35, align 4, !dbg !3854
  %53 = load ptr, ptr %self, align 8, !dbg !3855
  %ptradd36 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !3855
  %ptradd37 = getelementptr inbounds i8, ptr %ptradd36, i64 8, !dbg !3855
  %54 = load i32, ptr %old_prec, align 4, !dbg !3856
  store i32 %54, ptr %ptradd37, align 8, !dbg !3856
  store i64 %48, ptr %0, align 8, !dbg !3856
  ret i64 0, !dbg !3856

err_retblock38:                                   ; preds = %assign_optional31
  %55 = load ptr, ptr %self, align 8, !dbg !3857
  %ptradd39 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !3857
  %56 = load i32, ptr %old, align 4, !dbg !3859
  store i32 %56, ptr %ptradd39, align 8, !dbg !3859
  %57 = load ptr, ptr %self, align 8, !dbg !3860
  %ptradd40 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !3860
  %ptradd41 = getelementptr inbounds i8, ptr %ptradd40, i64 4, !dbg !3860
  %58 = load i32, ptr %old_width, align 4, !dbg !3861
  store i32 %58, ptr %ptradd41, align 4, !dbg !3861
  %59 = load ptr, ptr %self, align 8, !dbg !3862
  %ptradd42 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !3862
  %ptradd43 = getelementptr inbounds i8, ptr %ptradd42, i64 8, !dbg !3862
  %60 = load i32, ptr %old_prec, align 4, !dbg !3863
  store i32 %60, ptr %ptradd43, align 8, !dbg !3863
  %61 = load i64, ptr %reterr19, align 8, !dbg !3863
  ret i64 %61, !dbg !3863

if.exit44:                                        ; preds = %11
  %ptradd45 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3864
  %62 = load i64, ptr %ptradd45, align 8, !dbg !3864
  %63 = inttoptr i64 %62 to ptr, !dbg !3864
  %type48 = load ptr, ptr %.cachedtype47, align 8, !dbg !3816
  %64 = icmp eq ptr %63, %type48, !dbg !3816
  br i1 %64, label %cache_hit51, label %cache_miss49, !dbg !3816

cache_miss49:                                     ; preds = %if.exit44
  %ptradd50 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !3816
  %65 = load ptr, ptr %ptradd50, align 8, !dbg !3816
  %66 = call ptr @.dyn_search(ptr %65, ptr @"$sel.to_string"), !dbg !3816
  store ptr %66, ptr %.inlinecache46, align 8, !dbg !3816
  store ptr %63, ptr %.cachedtype47, align 8, !dbg !3816
  br label %67, !dbg !3816

cache_hit51:                                      ; preds = %if.exit44
  %cache_hit_fn52 = load ptr, ptr %.inlinecache46, align 8, !dbg !3816
  br label %67, !dbg !3816

67:                                               ; preds = %cache_hit51, %cache_miss49
  %fn_phi53 = phi ptr [ %cache_hit_fn52, %cache_hit51 ], [ %66, %cache_miss49 ], !dbg !3816
  %ptrbool54 = icmp ne ptr %fn_phi53, null, !dbg !3816
  br i1 %ptrbool54, label %if.then55, label %if.exit116, !dbg !3816

if.then55:                                        ; preds = %67
  call void @llvm.dbg.declare(metadata ptr %old56, metadata !3865, metadata !DIExpression()), !dbg !3867
  %68 = load ptr, ptr %self, align 8, !dbg !3868
  %ptradd57 = getelementptr inbounds i8, ptr %68, i64 16, !dbg !3868
  %69 = load i32, ptr %ptradd57, align 8, !dbg !3868
  store i32 %69, ptr %old56, align 4, !dbg !3868
  call void @llvm.dbg.declare(metadata ptr %old_width58, metadata !3869, metadata !DIExpression()), !dbg !3870
  %70 = load ptr, ptr %self, align 8, !dbg !3871
  %ptradd59 = getelementptr inbounds i8, ptr %70, i64 16, !dbg !3871
  %ptradd60 = getelementptr inbounds i8, ptr %ptradd59, i64 4, !dbg !3871
  %71 = load i32, ptr %ptradd60, align 4, !dbg !3871
  store i32 %71, ptr %old_width58, align 4, !dbg !3871
  call void @llvm.dbg.declare(metadata ptr %old_prec61, metadata !3872, metadata !DIExpression()), !dbg !3873
  %72 = load ptr, ptr %self, align 8, !dbg !3874
  %ptradd62 = getelementptr inbounds i8, ptr %72, i64 16, !dbg !3874
  %ptradd63 = getelementptr inbounds i8, ptr %ptradd62, i64 8, !dbg !3874
  %73 = load i32, ptr %ptradd63, align 8, !dbg !3874
  store i32 %73, ptr %old_prec61, align 4, !dbg !3874
  %74 = load ptr, ptr %arg, align 8, !dbg !3875
  %not64 = icmp eq ptr %74, null, !dbg !3875
  br i1 %not64, label %if.then65, label %if.exit82, !dbg !3875

if.then65:                                        ; preds = %if.then55
  %75 = load ptr, ptr %self, align 8
  %76 = call i64 @std.io.Formatter.out_substr(ptr %retparam67, ptr %75, ptr @.str.193, i64 6), !dbg !3876
  %not_err68 = icmp eq i64 %76, 0, !dbg !3876
  %77 = call i1 @llvm.expect.i1(i1 %not_err68, i1 true), !dbg !3876
  br i1 %77, label %after_check70, label %assign_optional69, !dbg !3876

assign_optional69:                                ; preds = %if.then65
  store i64 %76, ptr %reterr66, align 8, !dbg !3876
  br label %err_retblock76, !dbg !3876

after_check70:                                    ; preds = %if.then65
  %78 = load i64, ptr %retparam67, align 8, !dbg !3876
  %79 = load ptr, ptr %self, align 8, !dbg !3877
  %ptradd71 = getelementptr inbounds i8, ptr %79, i64 16, !dbg !3877
  %80 = load i32, ptr %old56, align 4, !dbg !3879
  store i32 %80, ptr %ptradd71, align 8, !dbg !3879
  %81 = load ptr, ptr %self, align 8, !dbg !3880
  %ptradd72 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !3880
  %ptradd73 = getelementptr inbounds i8, ptr %ptradd72, i64 4, !dbg !3880
  %82 = load i32, ptr %old_width58, align 4, !dbg !3881
  store i32 %82, ptr %ptradd73, align 4, !dbg !3881
  %83 = load ptr, ptr %self, align 8, !dbg !3882
  %ptradd74 = getelementptr inbounds i8, ptr %83, i64 16, !dbg !3882
  %ptradd75 = getelementptr inbounds i8, ptr %ptradd74, i64 8, !dbg !3882
  %84 = load i32, ptr %old_prec61, align 4, !dbg !3883
  store i32 %84, ptr %ptradd75, align 8, !dbg !3883
  store i64 %78, ptr %0, align 8, !dbg !3883
  ret i64 0, !dbg !3883

err_retblock76:                                   ; preds = %assign_optional69
  %85 = load ptr, ptr %self, align 8, !dbg !3884
  %ptradd77 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !3884
  %86 = load i32, ptr %old56, align 4, !dbg !3886
  store i32 %86, ptr %ptradd77, align 8, !dbg !3886
  %87 = load ptr, ptr %self, align 8, !dbg !3887
  %ptradd78 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !3887
  %ptradd79 = getelementptr inbounds i8, ptr %ptradd78, i64 4, !dbg !3887
  %88 = load i32, ptr %old_width58, align 4, !dbg !3888
  store i32 %88, ptr %ptradd79, align 4, !dbg !3888
  %89 = load ptr, ptr %self, align 8, !dbg !3889
  %ptradd80 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !3889
  %ptradd81 = getelementptr inbounds i8, ptr %ptradd80, i64 8, !dbg !3889
  %90 = load i32, ptr %old_prec61, align 4, !dbg !3890
  store i32 %90, ptr %ptradd81, align 8, !dbg !3890
  %91 = load i64, ptr %reterr66, align 8, !dbg !3890
  ret i64 %91, !dbg !3890

if.exit82:                                        ; preds = %if.then55
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !3891, metadata !DIExpression()), !dbg !3896
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 1024, i1 false), !dbg !3896
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !3898, metadata !DIExpression()), !dbg !3911
  call void @llvm.memset.p0.i64(ptr align 8 %allocator, i8 0, i64 48, i1 false), !dbg !3911
  %92 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !3912
  %93 = insertvalue %"char[]" %92, i64 1024, 1, !dbg !3912
  %lo = load i64, ptr @std.core.mem.allocator.thread_allocator, align 8, !dbg !3913
  %hi = load ptr, ptr getelementptr inbounds (i8, ptr @std.core.mem.allocator.thread_allocator, i64 8), align 8, !dbg !3913
  call void @std.core.mem.allocator.OnStackAllocator.init(ptr %allocator, ptr %buffer, i64 1024, i64 %lo, ptr %hi), !dbg !3916
  call void @llvm.dbg.declare(metadata ptr %mem, metadata !3917, metadata !DIExpression()), !dbg !3918
  %94 = insertvalue %any undef, ptr %allocator, 0, !dbg !3919
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.OnStackAllocator" to i64), 1, !dbg !3919
  store %any %95, ptr %mem, align 8, !dbg !3919
  %ptradd84 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3921
  %96 = load i64, ptr %ptradd84, align 8, !dbg !3921
  %97 = inttoptr i64 %96 to ptr, !dbg !3921
  %type87 = load ptr, ptr %.cachedtype86, align 8, !dbg !3816
  %98 = icmp eq ptr %97, %type87, !dbg !3816
  br i1 %98, label %cache_hit90, label %cache_miss88, !dbg !3816

cache_miss88:                                     ; preds = %if.exit82
  %ptradd89 = getelementptr inbounds i8, ptr %97, i64 16, !dbg !3816
  %99 = load ptr, ptr %ptradd89, align 8, !dbg !3816
  %100 = call ptr @.dyn_search(ptr %99, ptr @"$sel.to_string"), !dbg !3816
  store ptr %100, ptr %.inlinecache85, align 8, !dbg !3816
  store ptr %97, ptr %.cachedtype86, align 8, !dbg !3816
  br label %101, !dbg !3816

cache_hit90:                                      ; preds = %if.exit82
  %cache_hit_fn91 = load ptr, ptr %.inlinecache85, align 8, !dbg !3816
  br label %101, !dbg !3816

101:                                              ; preds = %cache_hit90, %cache_miss88
  %fn_phi92 = phi ptr [ %cache_hit_fn91, %cache_hit90 ], [ %100, %cache_miss88 ], !dbg !3816
  %102 = icmp eq ptr %fn_phi92, null, !dbg !3816
  br i1 %102, label %missing_function93, label %match94, !dbg !3816

missing_function93:                               ; preds = %101
  %103 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3923
  call void %103(ptr @.panic_msg.194, i64 46, ptr @.file.184, i64 12, ptr @.func.190, i64 19, i32 141), !dbg !3923
  unreachable, !dbg !3923

match94:                                          ; preds = %101
  %104 = load ptr, ptr %arg, align 8, !dbg !3923
  %lo95 = load i64, ptr %mem, align 8, !dbg !3923
  %ptradd96 = getelementptr inbounds i8, ptr %mem, i64 8, !dbg !3923
  %hi97 = load ptr, ptr %ptradd96, align 8, !dbg !3923
  %105 = call { ptr, i64 } %fn_phi92(ptr %104, i64 %lo95, ptr %hi97), !dbg !3923
  store { ptr, i64 } %105, ptr %result, align 8
  %106 = load ptr, ptr %self, align 8
  %lo99 = load ptr, ptr %result, align 8
  %ptradd100 = getelementptr inbounds i8, ptr %result, i64 8
  %hi101 = load i64, ptr %ptradd100, align 8
  %107 = call i64 @std.io.Formatter.out_substr(ptr %retparam98, ptr %106, ptr %lo99, i64 %hi101), !dbg !3924
  %not_err102 = icmp eq i64 %107, 0, !dbg !3924
  %108 = call i1 @llvm.expect.i1(i1 %not_err102, i1 true), !dbg !3924
  br i1 %108, label %after_check104, label %assign_optional103, !dbg !3924

assign_optional103:                               ; preds = %match94
  store i64 %107, ptr %reterr83, align 8, !dbg !3924
  br label %err_retblock110, !dbg !3924

after_check104:                                   ; preds = %match94
  %109 = load i64, ptr %retparam98, align 8, !dbg !3924
  call void @std.core.mem.allocator.OnStackAllocator.free(ptr %allocator), !dbg !3925
  %110 = load ptr, ptr %self, align 8, !dbg !3927
  %ptradd105 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !3927
  %111 = load i32, ptr %old56, align 4, !dbg !3929
  store i32 %111, ptr %ptradd105, align 8, !dbg !3929
  %112 = load ptr, ptr %self, align 8, !dbg !3930
  %ptradd106 = getelementptr inbounds i8, ptr %112, i64 16, !dbg !3930
  %ptradd107 = getelementptr inbounds i8, ptr %ptradd106, i64 4, !dbg !3930
  %113 = load i32, ptr %old_width58, align 4, !dbg !3931
  store i32 %113, ptr %ptradd107, align 4, !dbg !3931
  %114 = load ptr, ptr %self, align 8, !dbg !3932
  %ptradd108 = getelementptr inbounds i8, ptr %114, i64 16, !dbg !3932
  %ptradd109 = getelementptr inbounds i8, ptr %ptradd108, i64 8, !dbg !3932
  %115 = load i32, ptr %old_prec61, align 4, !dbg !3933
  store i32 %115, ptr %ptradd109, align 8, !dbg !3933
  store i64 %109, ptr %0, align 8, !dbg !3933
  ret i64 0, !dbg !3933

err_retblock110:                                  ; preds = %assign_optional103
  call void @std.core.mem.allocator.OnStackAllocator.free(ptr %allocator), !dbg !3934
  %116 = load ptr, ptr %self, align 8, !dbg !3936
  %ptradd111 = getelementptr inbounds i8, ptr %116, i64 16, !dbg !3936
  %117 = load i32, ptr %old56, align 4, !dbg !3938
  store i32 %117, ptr %ptradd111, align 8, !dbg !3938
  %118 = load ptr, ptr %self, align 8, !dbg !3939
  %ptradd112 = getelementptr inbounds i8, ptr %118, i64 16, !dbg !3939
  %ptradd113 = getelementptr inbounds i8, ptr %ptradd112, i64 4, !dbg !3939
  %119 = load i32, ptr %old_width58, align 4, !dbg !3940
  store i32 %119, ptr %ptradd113, align 4, !dbg !3940
  %120 = load ptr, ptr %self, align 8, !dbg !3941
  %ptradd114 = getelementptr inbounds i8, ptr %120, i64 16, !dbg !3941
  %ptradd115 = getelementptr inbounds i8, ptr %ptradd114, i64 8, !dbg !3941
  %121 = load i32, ptr %old_prec61, align 4, !dbg !3942
  store i32 %121, ptr %ptradd115, align 8, !dbg !3942
  %122 = load i64, ptr %reterr83, align 8, !dbg !3942
  ret i64 %122, !dbg !3942

if.exit116:                                       ; preds = %67
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !3943

panic:                                            ; preds = %entry
  %123 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3818
  call void %123(ptr @.panic_msg, i64 62, ptr @.file.184, i64 12, ptr @.func.190, i64 19, i32 111), !dbg !3818
  unreachable, !dbg !3818
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_str(ptr %0, ptr %1, i64 %2, ptr %3) #0 !dbg !3944 {
entry:
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr3 = alloca i64, align 8
  %retparam4 = alloca i64, align 8
  %reterr10 = alloca i64, align 8
  %faultname_zero = alloca %"char[]", align 8
  %retparam13 = alloca i64, align 8
  %reterr20 = alloca i64, align 8
  %retparam24 = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %indirectarg = alloca %"any[]", align 8
  %flags = alloca i32, align 4
  %width = alloca i32, align 4
  %reterr43 = alloca i64, align 8
  %retparam44 = alloca i64, align 8
  %retparam50 = alloca i64, align 8
  %flags62 = alloca i32, align 4
  %width64 = alloca i32, align 4
  %reterr70 = alloca i64, align 8
  %retparam71 = alloca double, align 8
  %retparam77 = alloca i64, align 8
  %retparam81 = alloca i64, align 8
  %reterr95 = alloca i64, align 8
  %retparam99 = alloca i64, align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %retparam104 = alloca i64, align 8
  %taddr = alloca %any, align 8
  %reterr111 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %f = alloca i64, align 8
  %error_var = alloca i64, align 8
  %switch127 = alloca i8, align 1
  %i = alloca i64, align 8
  %error_var130 = alloca i64, align 8
  %v = alloca %any, align 8
  %blockret131 = alloca i64, align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i64, align 8
  %min = alloca i64, align 8
  %switch162 = alloca i64, align 8
  %c = alloca i8, align 1
  %s = alloca i16, align 2
  %i209 = alloca i32, align 4
  %l = alloca i64, align 8
  %i269 = alloca i128, align 8
  %c299 = alloca i8, align 1
  %s316 = alloca i16, align 2
  %i338 = alloca i32, align 4
  %l360 = alloca i64, align 8
  %i379 = alloca i128, align 8
  %string394 = alloca %"char[]", align 8
  %indirectarg398 = alloca %"any[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg401 = alloca %"any[]", align 8
  %varargslots413 = alloca [1 x %any], align 16
  %indirectarg415 = alloca %"any[]", align 8
  %reterr417 = alloca i64, align 8
  %taddr428 = alloca i64, align 8
  %taddr429 = alloca i64, align 8
  %varargslots430 = alloca [2 x %any], align 16
  %indirectarg433 = alloca %"any[]", align 8
  %retparam435 = alloca i64, align 8
  %reterr444 = alloca i64, align 8
  %retparam445 = alloca i64, align 8
  %reterr451 = alloca i64, align 8
  %retparam452 = alloca i64, align 8
  %reterr458 = alloca i64, align 8
  %retparam459 = alloca i64, align 8
  %reterr465 = alloca i64, align 8
  %retparam466 = alloca i64, align 8
  %reterr475 = alloca i64, align 8
  %retparam479 = alloca i64, align 8
  %reterr491 = alloca i64, align 8
  %result498 = alloca %"char[]", align 8
  %retparam500 = alloca i64, align 8
  %reterr509 = alloca i64, align 8
  %result518 = alloca %"char[]", align 8
  %retparam522 = alloca i64, align 8
  %reterr528 = alloca i64, align 8
  %self529 = alloca ptr, align 8
  %retparam558 = alloca i64, align 8
  %taddr559 = alloca %any, align 8
  %inner = alloca i64, align 8
  %pointer = alloca ptr, align 8
  %deref = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %type = alloca i64, align 8
  %retparam617 = alloca i64, align 8
  %taddr618 = alloca %any, align 8
  %reterr629 = alloca i64, align 8
  %blockret631 = alloca i64, align 8
  %f632 = alloca i64, align 8
  %error_var645 = alloca i64, align 8
  %flags654 = alloca i32, align 4
  %width656 = alloca i32, align 4
  %error_var661 = alloca i64, align 8
  %retparam662 = alloca i64, align 8
  %reterr671 = alloca i64, align 8
  %retparam672 = alloca i64, align 8
  %flags687 = alloca i32, align 4
  %width689 = alloca i32, align 4
  %inner695 = alloca i64, align 8
  %size = alloca i64, align 8
  %alen = alloca i64, align 8
  %ptr734 = alloca ptr, align 8
  %len = alloca i64, align 8
  %error_var735 = alloca i64, align 8
  %retparam736 = alloca i64, align 8
  %i745 = alloca i64, align 8
  %error_var749 = alloca i64, align 8
  %retparam750 = alloca i64, align 8
  %error_var760 = alloca i64, align 8
  %ptr761 = alloca ptr, align 8
  %type762 = alloca i64, align 8
  %retparam763 = alloca i64, align 8
  %taddr764 = alloca %any, align 8
  %error_var778 = alloca i64, align 8
  %retparam779 = alloca i64, align 8
  %reterr789 = alloca i64, align 8
  %flags794 = alloca i32, align 4
  %width796 = alloca i32, align 4
  %inner802 = alloca i64, align 8
  %size825 = alloca i64, align 8
  %vlen = alloca i64, align 8
  %ptr844 = alloca ptr, align 8
  %len845 = alloca i64, align 8
  %error_var846 = alloca i64, align 8
  %retparam847 = alloca i64, align 8
  %i856 = alloca i64, align 8
  %error_var862 = alloca i64, align 8
  %retparam863 = alloca i64, align 8
  %error_var874 = alloca i64, align 8
  %ptr875 = alloca ptr, align 8
  %type876 = alloca i64, align 8
  %retparam877 = alloca i64, align 8
  %taddr878 = alloca %any, align 8
  %error_var894 = alloca i64, align 8
  %retparam895 = alloca i64, align 8
  %reterr905 = alloca i64, align 8
  %inner910 = alloca i64, align 8
  %flags936 = alloca i32, align 4
  %width938 = alloca i32, align 4
  %size944 = alloca i64, align 8
  %temp = alloca ptr, align 8
  %ptr949 = alloca ptr, align 8
  %slen = alloca i64, align 8
  %len957 = alloca i64, align 8
  %error_var958 = alloca i64, align 8
  %retparam959 = alloca i64, align 8
  %i968 = alloca i64, align 8
  %error_var974 = alloca i64, align 8
  %retparam975 = alloca i64, align 8
  %error_var986 = alloca i64, align 8
  %ptr987 = alloca ptr, align 8
  %type988 = alloca i64, align 8
  %retparam989 = alloca i64, align 8
  %taddr990 = alloca %any, align 8
  %error_var1006 = alloca i64, align 8
  %retparam1007 = alloca i64, align 8
  %reterr1017 = alloca i64, align 8
  %string1022 = alloca %"char[]", align 8
  %indirectarg1026 = alloca %"any[]", align 8
  %reterr1028 = alloca i64, align 8
  %retparam1029 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3945
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3945
  br i1 %5, label %panic, label %checkok, !dbg !3945

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3946, metadata !DIExpression()), !dbg !3947
  store i64 %2, ptr %arg, align 8
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8
  store ptr %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !3948, metadata !DIExpression()), !dbg !3949
  %ptradd1 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3950
  %6 = load i64, ptr %ptradd1, align 8, !dbg !3950
  %"introspect*" = inttoptr i64 %6 to ptr, !dbg !3950
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !3950
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i8, ptr %switch, align 1
  switch i8 %7, label %switch.exit [
    i8 5, label %switch.case
    i8 0, label %switch.case2
    i8 6, label %switch.case9
    i8 9, label %switch.case9
    i8 20, label %switch.case19
    i8 7, label %switch.case19
    i8 14, label %switch.case32
    i8 2, label %switch.case36
    i8 3, label %switch.case36
    i8 4, label %switch.case61
    i8 1, label %switch.case94
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load ptr, ptr %self, align 8
  %9 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %8, ptr @.str.196, i64 6), !dbg !3952
  %not_err = icmp eq i64 %9, 0, !dbg !3952
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3952
  br i1 %10, label %after_check, label %assign_optional, !dbg !3952

assign_optional:                                  ; preds = %switch.case
  store i64 %9, ptr %reterr, align 8, !dbg !3952
  br label %err_retblock, !dbg !3952

after_check:                                      ; preds = %switch.case
  %11 = load i64, ptr %retparam, align 8, !dbg !3952
  store i64 %11, ptr %0, align 8, !dbg !3952
  ret i64 0, !dbg !3952

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !3952
  ret i64 %12, !dbg !3952

switch.case2:                                     ; preds = %switch.entry
  %13 = load ptr, ptr %self, align 8
  %14 = call i64 @std.io.Formatter.out_substr(ptr %retparam4, ptr %13, ptr @.str.197, i64 4), !dbg !3954
  %not_err5 = icmp eq i64 %14, 0, !dbg !3954
  %15 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true), !dbg !3954
  br i1 %15, label %after_check7, label %assign_optional6, !dbg !3954

assign_optional6:                                 ; preds = %switch.case2
  store i64 %14, ptr %reterr3, align 8, !dbg !3954
  br label %err_retblock8, !dbg !3954

after_check7:                                     ; preds = %switch.case2
  %16 = load i64, ptr %retparam4, align 8, !dbg !3954
  store i64 %16, ptr %0, align 8, !dbg !3954
  ret i64 0, !dbg !3954

err_retblock8:                                    ; preds = %assign_optional6
  %17 = load i64, ptr %reterr3, align 8, !dbg !3954
  ret i64 %17, !dbg !3954

switch.case9:                                     ; preds = %switch.entry, %switch.entry
  %18 = load ptr, ptr %arg, align 8, !dbg !3956
  %checknull = icmp eq ptr %18, null, !dbg !3956
  %19 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3956
  br i1 %19, label %panic11, label %checkok12, !dbg !3956

checkok12:                                        ; preds = %switch.case9
  %20 = load i64, ptr %18, align 8, !dbg !3958
  %eq = icmp eq i64 %20, 0
  br i1 %eq, label %faultname_no, label %faultname_ok

faultname_no:                                     ; preds = %checkok12
  call void @llvm.memset.p0.i64(ptr align 8 %faultname_zero, i8 0, i64 16, i1 false)
  br label %faultname_exit

faultname_ok:                                     ; preds = %checkok12
  %21 = inttoptr i64 %20 to ptr
  %22 = getelementptr inbounds %.fault, ptr %21, i32 0, i32 1
  br label %faultname_exit

faultname_exit:                                   ; preds = %faultname_ok, %faultname_no
  %faultname = phi ptr [ %faultname_zero, %faultname_no ], [ %22, %faultname_ok ]
  %23 = load ptr, ptr %self, align 8
  %lo = load ptr, ptr %faultname, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %faultname, i64 8
  %hi = load i64, ptr %ptradd14, align 8
  %24 = call i64 @std.io.Formatter.out_substr(ptr %retparam13, ptr %23, ptr %lo, i64 %hi), !dbg !3959
  %not_err15 = icmp eq i64 %24, 0, !dbg !3959
  %25 = call i1 @llvm.expect.i1(i1 %not_err15, i1 true), !dbg !3959
  br i1 %25, label %after_check17, label %assign_optional16, !dbg !3959

assign_optional16:                                ; preds = %faultname_exit
  store i64 %24, ptr %reterr10, align 8, !dbg !3959
  br label %err_retblock18, !dbg !3959

after_check17:                                    ; preds = %faultname_exit
  %26 = load i64, ptr %retparam13, align 8, !dbg !3959
  store i64 %26, ptr %0, align 8, !dbg !3959
  ret i64 0, !dbg !3959

err_retblock18:                                   ; preds = %assign_optional16
  %27 = load i64, ptr %reterr10, align 8, !dbg !3959
  ret i64 %27, !dbg !3959

switch.case19:                                    ; preds = %switch.entry, %switch.entry
  %28 = load ptr, ptr %arg, align 8, !dbg !3960
  %checknull21 = icmp eq ptr %28, null, !dbg !3960
  %29 = call i1 @llvm.expect.i1(i1 %checknull21, i1 false), !dbg !3960
  br i1 %29, label %panic22, label %checkok23, !dbg !3960

checkok23:                                        ; preds = %switch.case19
  %30 = load ptr, ptr %self, align 8
  %lo25 = load i64, ptr %28, align 8
  %ptradd26 = getelementptr inbounds i8, ptr %28, i64 8
  %hi27 = load ptr, ptr %ptradd26, align 8
  %31 = call i64 @std.io.Formatter.out_str(ptr %retparam24, ptr %30, i64 %lo25, ptr %hi27), !dbg !3962
  %not_err28 = icmp eq i64 %31, 0, !dbg !3962
  %32 = call i1 @llvm.expect.i1(i1 %not_err28, i1 true), !dbg !3962
  br i1 %32, label %after_check30, label %assign_optional29, !dbg !3962

assign_optional29:                                ; preds = %checkok23
  store i64 %31, ptr %reterr20, align 8, !dbg !3962
  br label %err_retblock31, !dbg !3962

after_check30:                                    ; preds = %checkok23
  %33 = load i64, ptr %retparam24, align 8, !dbg !3962
  store i64 %33, ptr %0, align 8, !dbg !3962
  ret i64 0, !dbg !3962

err_retblock31:                                   ; preds = %assign_optional29
  %34 = load i64, ptr %reterr20, align 8, !dbg !3962
  ret i64 %34, !dbg !3962

switch.case32:                                    ; preds = %switch.entry
  store %"char[]" { ptr @.str.200, i64 30 }, ptr %string, align 8
  %lo33 = load ptr, ptr %string, align 8, !dbg !3963
  %ptradd34 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !3963
  %hi35 = load i64, ptr %ptradd34, align 8, !dbg !3963
  store %"any[]" zeroinitializer, ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr %lo33, i64 %hi35, ptr @.str.201, i64 12, ptr @.str.202, i64 17, i32 163, ptr byval(%"any[]") align 8 %indirectarg), !dbg !3967
  unreachable, !dbg !3968

switch.case36:                                    ; preds = %switch.entry, %switch.entry
  call void @llvm.dbg.declare(metadata ptr %flags, metadata !3969, metadata !DIExpression()), !dbg !3971
  %35 = load ptr, ptr %self, align 8, !dbg !3972
  %ptradd37 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !3972
  %36 = load i32, ptr %ptradd37, align 8, !dbg !3972
  store i32 %36, ptr %flags, align 4, !dbg !3972
  call void @llvm.dbg.declare(metadata ptr %width, metadata !3973, metadata !DIExpression()), !dbg !3974
  %37 = load ptr, ptr %self, align 8, !dbg !3975
  %ptradd38 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !3975
  %ptradd39 = getelementptr inbounds i8, ptr %ptradd38, i64 4, !dbg !3975
  %38 = load i32, ptr %ptradd39, align 4, !dbg !3975
  store i32 %38, ptr %width, align 4, !dbg !3975
  %39 = load ptr, ptr %self, align 8, !dbg !3976
  %ptradd40 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !3976
  store i32 0, ptr %ptradd40, align 8, !dbg !3976
  %40 = load ptr, ptr %self, align 8, !dbg !3977
  %ptradd41 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !3977
  %ptradd42 = getelementptr inbounds i8, ptr %ptradd41, i64 4, !dbg !3977
  store i32 0, ptr %ptradd42, align 4, !dbg !3978
  %41 = load ptr, ptr %self, align 8
  %lo45 = load i64, ptr %arg, align 8
  %ptradd46 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi47 = load ptr, ptr %ptradd46, align 8
  %42 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam44, ptr %41, i64 %lo45, ptr %hi47, i32 10), !dbg !3979
  %not_err48 = icmp eq i64 %42, 0, !dbg !3979
  %43 = call i1 @llvm.expect.i1(i1 %not_err48, i1 true), !dbg !3979
  br i1 %43, label %after_check49, label %else_block, !dbg !3979

after_check49:                                    ; preds = %switch.case36
  %44 = load i64, ptr %retparam44, align 8, !dbg !3979
  br label %phi_block, !dbg !3979

else_block:                                       ; preds = %switch.case36
  %45 = load ptr, ptr %self, align 8
  %46 = call i64 @std.io.Formatter.out_substr(ptr %retparam50, ptr %45, ptr @.str.203, i64 9), !dbg !3980
  %not_err51 = icmp eq i64 %46, 0, !dbg !3980
  %47 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !3980
  br i1 %47, label %after_check53, label %assign_optional52, !dbg !3980

assign_optional52:                                ; preds = %else_block
  store i64 %46, ptr %reterr43, align 8, !dbg !3980
  br label %err_retblock57, !dbg !3980

after_check53:                                    ; preds = %else_block
  %48 = load i64, ptr %retparam50, align 8, !dbg !3980
  br label %phi_block, !dbg !3980

phi_block:                                        ; preds = %after_check53, %after_check49
  %val = phi i64 [ %44, %after_check49 ], [ %48, %after_check53 ], !dbg !3980
  %49 = load ptr, ptr %self, align 8, !dbg !3981
  %ptradd54 = getelementptr inbounds i8, ptr %49, i64 16, !dbg !3981
  %50 = load i32, ptr %flags, align 4, !dbg !3983
  store i32 %50, ptr %ptradd54, align 8, !dbg !3983
  %51 = load ptr, ptr %self, align 8, !dbg !3984
  %ptradd55 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !3984
  %ptradd56 = getelementptr inbounds i8, ptr %ptradd55, i64 4, !dbg !3984
  %52 = load i32, ptr %width, align 4, !dbg !3985
  store i32 %52, ptr %ptradd56, align 4, !dbg !3985
  store i64 %val, ptr %0, align 8, !dbg !3985
  ret i64 0, !dbg !3985

err_retblock57:                                   ; preds = %assign_optional52
  %53 = load ptr, ptr %self, align 8, !dbg !3986
  %ptradd58 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !3986
  %54 = load i32, ptr %flags, align 4, !dbg !3988
  store i32 %54, ptr %ptradd58, align 8, !dbg !3988
  %55 = load ptr, ptr %self, align 8, !dbg !3989
  %ptradd59 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !3989
  %ptradd60 = getelementptr inbounds i8, ptr %ptradd59, i64 4, !dbg !3989
  %56 = load i32, ptr %width, align 4, !dbg !3990
  store i32 %56, ptr %ptradd60, align 4, !dbg !3990
  %57 = load i64, ptr %reterr43, align 8, !dbg !3990
  ret i64 %57, !dbg !3990

switch.case61:                                    ; preds = %switch.entry
  call void @llvm.dbg.declare(metadata ptr %flags62, metadata !3991, metadata !DIExpression()), !dbg !3993
  %58 = load ptr, ptr %self, align 8, !dbg !3994
  %ptradd63 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !3994
  %59 = load i32, ptr %ptradd63, align 8, !dbg !3994
  store i32 %59, ptr %flags62, align 4, !dbg !3994
  call void @llvm.dbg.declare(metadata ptr %width64, metadata !3995, metadata !DIExpression()), !dbg !3996
  %60 = load ptr, ptr %self, align 8, !dbg !3997
  %ptradd65 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !3997
  %ptradd66 = getelementptr inbounds i8, ptr %ptradd65, i64 4, !dbg !3997
  %61 = load i32, ptr %ptradd66, align 4, !dbg !3997
  store i32 %61, ptr %width64, align 4, !dbg !3997
  %62 = load ptr, ptr %self, align 8, !dbg !3998
  %ptradd67 = getelementptr inbounds i8, ptr %62, i64 16, !dbg !3998
  store i32 0, ptr %ptradd67, align 8, !dbg !3998
  %63 = load ptr, ptr %self, align 8, !dbg !3999
  %ptradd68 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !3999
  %ptradd69 = getelementptr inbounds i8, ptr %ptradd68, i64 4, !dbg !3999
  store i32 0, ptr %ptradd69, align 4, !dbg !4000
  %lo72 = load i64, ptr %arg, align 8
  %ptradd73 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi74 = load ptr, ptr %ptradd73, align 8
  %64 = call i64 @std.io.float_from_any(ptr %retparam71, i64 %lo72, ptr %hi74), !dbg !4001
  %not_err75 = icmp eq i64 %64, 0, !dbg !4001
  %65 = call i1 @llvm.expect.i1(i1 %not_err75, i1 true), !dbg !4001
  br i1 %65, label %after_check76, label %else_block80, !dbg !4001

after_check76:                                    ; preds = %switch.case61
  %66 = load ptr, ptr %self, align 8
  %67 = load double, ptr %retparam71, align 8
  %68 = call i64 @std.io.Formatter.ftoa(ptr %retparam77, ptr %66, double %67), !dbg !4002
  %not_err78 = icmp eq i64 %68, 0, !dbg !4002
  %69 = call i1 @llvm.expect.i1(i1 %not_err78, i1 true), !dbg !4002
  br i1 %69, label %after_check79, label %else_block80, !dbg !4002

after_check79:                                    ; preds = %after_check76
  %70 = load i64, ptr %retparam77, align 8, !dbg !4002
  br label %phi_block85, !dbg !4002

else_block80:                                     ; preds = %after_check76, %switch.case61
  %71 = load ptr, ptr %self, align 8
  %72 = call i64 @std.io.Formatter.out_substr(ptr %retparam81, ptr %71, ptr @.str.204, i64 3), !dbg !4003
  %not_err82 = icmp eq i64 %72, 0, !dbg !4003
  %73 = call i1 @llvm.expect.i1(i1 %not_err82, i1 true), !dbg !4003
  br i1 %73, label %after_check84, label %assign_optional83, !dbg !4003

assign_optional83:                                ; preds = %else_block80
  store i64 %72, ptr %reterr70, align 8, !dbg !4003
  br label %err_retblock90, !dbg !4003

after_check84:                                    ; preds = %else_block80
  %74 = load i64, ptr %retparam81, align 8, !dbg !4003
  br label %phi_block85, !dbg !4003

phi_block85:                                      ; preds = %after_check84, %after_check79
  %val86 = phi i64 [ %70, %after_check79 ], [ %74, %after_check84 ], !dbg !4003
  %75 = load ptr, ptr %self, align 8, !dbg !4004
  %ptradd87 = getelementptr inbounds i8, ptr %75, i64 16, !dbg !4004
  %76 = load i32, ptr %flags62, align 4, !dbg !4006
  store i32 %76, ptr %ptradd87, align 8, !dbg !4006
  %77 = load ptr, ptr %self, align 8, !dbg !4007
  %ptradd88 = getelementptr inbounds i8, ptr %77, i64 16, !dbg !4007
  %ptradd89 = getelementptr inbounds i8, ptr %ptradd88, i64 4, !dbg !4007
  %78 = load i32, ptr %width64, align 4, !dbg !4008
  store i32 %78, ptr %ptradd89, align 4, !dbg !4008
  store i64 %val86, ptr %0, align 8, !dbg !4008
  ret i64 0, !dbg !4008

err_retblock90:                                   ; preds = %assign_optional83
  %79 = load ptr, ptr %self, align 8, !dbg !4009
  %ptradd91 = getelementptr inbounds i8, ptr %79, i64 16, !dbg !4009
  %80 = load i32, ptr %flags62, align 4, !dbg !4011
  store i32 %80, ptr %ptradd91, align 8, !dbg !4011
  %81 = load ptr, ptr %self, align 8, !dbg !4012
  %ptradd92 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !4012
  %ptradd93 = getelementptr inbounds i8, ptr %ptradd92, i64 4, !dbg !4012
  %82 = load i32, ptr %width64, align 4, !dbg !4013
  store i32 %82, ptr %ptradd93, align 4, !dbg !4013
  %83 = load i64, ptr %reterr70, align 8, !dbg !4013
  ret i64 %83, !dbg !4013

switch.case94:                                    ; preds = %switch.entry
  %84 = load ptr, ptr %arg, align 8, !dbg !4014
  %checknull96 = icmp eq ptr %84, null, !dbg !4014
  %85 = call i1 @llvm.expect.i1(i1 %checknull96, i1 false), !dbg !4014
  br i1 %85, label %panic97, label %checkok98, !dbg !4014

checkok98:                                        ; preds = %switch.case94
  %86 = load i8, ptr %84, align 1, !dbg !4016
  %87 = trunc i8 %86 to i1, !dbg !4016
  %ternary = select i1 %87, %"char[]" { ptr @.str.206, i64 4 }, %"char[]" { ptr @.str.207, i64 5 }, !dbg !4017
  %88 = load ptr, ptr %self, align 8
  %89 = extractvalue %"char[]" %ternary, 0
  %90 = extractvalue %"char[]" %ternary, 1
  %91 = call i64 @std.io.Formatter.out_substr(ptr %retparam99, ptr %88, ptr %89, i64 %90), !dbg !4018
  %not_err100 = icmp eq i64 %91, 0, !dbg !4018
  %92 = call i1 @llvm.expect.i1(i1 %not_err100, i1 true), !dbg !4018
  br i1 %92, label %after_check102, label %assign_optional101, !dbg !4018

assign_optional101:                               ; preds = %checkok98
  store i64 %91, ptr %reterr95, align 8, !dbg !4018
  br label %err_retblock103, !dbg !4018

after_check102:                                   ; preds = %checkok98
  %93 = load i64, ptr %retparam99, align 8, !dbg !4018
  store i64 %93, ptr %0, align 8, !dbg !4018
  ret i64 0, !dbg !4018

err_retblock103:                                  ; preds = %assign_optional101
  %94 = load i64, ptr %reterr95, align 8, !dbg !4018
  ret i64 %94, !dbg !4018

switch.exit:                                      ; preds = %switch.entry
  call void @llvm.dbg.declare(metadata ptr %n, metadata !4019, metadata !DIExpression()), !dbg !4020
  %95 = load %any, ptr %arg, align 8, !dbg !4021
  %96 = load ptr, ptr %self, align 8
  store %any %95, ptr %taddr, align 8
  %lo105 = load i64, ptr %taddr, align 8
  %ptradd106 = getelementptr inbounds i8, ptr %taddr, i64 8
  %hi107 = load ptr, ptr %ptradd106, align 8
  %97 = call i64 @std.io.Formatter.print_with_function(ptr %retparam104, ptr %96, i64 %lo105, ptr %hi107), !dbg !4022
  %not_err108 = icmp eq i64 %97, 0, !dbg !4022
  %98 = call i1 @llvm.expect.i1(i1 %not_err108, i1 true), !dbg !4022
  br i1 %98, label %after_check110, label %assign_optional109, !dbg !4022

assign_optional109:                               ; preds = %switch.exit
  store i64 %97, ptr %n.f, align 8, !dbg !4022
  br label %after_assign, !dbg !4022

after_check110:                                   ; preds = %switch.exit
  %99 = load i64, ptr %retparam104, align 8, !dbg !4022
  store i64 %99, ptr %n, align 8, !dbg !4022
  store i64 0, ptr %n.f, align 8, !dbg !4022
  br label %after_assign, !dbg !4022

after_assign:                                     ; preds = %after_check110, %assign_optional109
  %load.err = load i64, ptr %n.f, align 8, !dbg !4023
  %result = icmp eq i64 %load.err, 0, !dbg !4023
  br i1 %result, label %if.then, label %if.exit, !dbg !4023

if.then:                                          ; preds = %after_assign
  %100 = load i64, ptr %n, align 8, !dbg !4024
  store i64 %100, ptr %0, align 8, !dbg !4024
  ret i64 0, !dbg !4024

if.exit:                                          ; preds = %after_assign
  call void @llvm.dbg.declare(metadata ptr %f, metadata !4025, metadata !DIExpression()), !dbg !4027
  br label %testblock, !dbg !4027

testblock:                                        ; preds = %if.exit
  %optval = load i64, ptr %n.f, align 8, !dbg !4029
  %not_err112 = icmp eq i64 %optval, 0, !dbg !4029
  %101 = call i1 @llvm.expect.i1(i1 %not_err112, i1 true), !dbg !4029
  br i1 %101, label %after_check114, label %assign_optional113, !dbg !4029

assign_optional113:                               ; preds = %testblock
  store i64 %optval, ptr %f, align 8, !dbg !4029
  br label %end_block, !dbg !4029

after_check114:                                   ; preds = %testblock
  store i64 0, ptr %f, align 8, !dbg !4029
  br label %end_block, !dbg !4029

end_block:                                        ; preds = %after_check114, %assign_optional113
  %102 = load i64, ptr %f, align 8, !dbg !4029
  %neq = icmp ne i64 %102, 0, !dbg !4029
  br i1 %neq, label %if.then115, label %if.exit116, !dbg !4029

if.then115:                                       ; preds = %end_block
  %103 = load i64, ptr %f, align 8, !dbg !4030
  store i64 %103, ptr %blockret, align 8, !dbg !4030
  br label %expr_block.exit, !dbg !4030

if.exit116:                                       ; preds = %end_block
  store i64 0, ptr %blockret, align 8, !dbg !4031
  br label %expr_block.exit, !dbg !4031

expr_block.exit:                                  ; preds = %if.exit116, %if.then115
  %104 = load i64, ptr %blockret, align 8, !dbg !4031
  %neq117 = icmp ne i64 %104, ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !4028
  br i1 %neq117, label %if.then118, label %if.exit123, !dbg !4028

if.then118:                                       ; preds = %expr_block.exit
  %optval119 = load i64, ptr %n.f, align 8, !dbg !4032
  %not_err120 = icmp eq i64 %optval119, 0, !dbg !4032
  %105 = call i1 @llvm.expect.i1(i1 %not_err120, i1 true), !dbg !4032
  br i1 %105, label %after_check122, label %assign_optional121, !dbg !4032

assign_optional121:                               ; preds = %if.then118
  store i64 %optval119, ptr %error_var, align 8, !dbg !4032
  br label %guard_block, !dbg !4032

after_check122:                                   ; preds = %if.then118
  br label %noerr_block, !dbg !4032

guard_block:                                      ; preds = %assign_optional121
  %106 = load i64, ptr %error_var, align 8, !dbg !4032
  ret i64 %106, !dbg !4032

noerr_block:                                      ; preds = %after_check122
  br label %if.exit123, !dbg !4032

if.exit123:                                       ; preds = %noerr_block, %expr_block.exit
  %ptradd124 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4033
  %107 = load i64, ptr %ptradd124, align 8, !dbg !4033
  %"introspect*125" = inttoptr i64 %107 to ptr, !dbg !4033
  %typeid.kind126 = load i8, ptr %"introspect*125", align 8, !dbg !4033
  store i8 %typeid.kind126, ptr %switch127, align 1
  br label %switch.entry128

switch.entry128:                                  ; preds = %if.exit123
  %108 = load i8, ptr %switch127, align 1
  switch i8 %108, label %switch.exit1027 [
    i8 8, label %switch.case129
    i8 10, label %switch.case443
    i8 11, label %switch.case450
    i8 12, label %switch.case457
    i8 13, label %switch.case464
    i8 18, label %switch.case471
    i8 19, label %switch.case567
    i8 15, label %switch.case686
    i8 17, label %switch.case793
    i8 16, label %switch.case909
    i8 7, label %switch.case1021
    i8 20, label %switch.case1021
  ]

switch.case129:                                   ; preds = %switch.entry128
  call void @llvm.dbg.declare(metadata ptr %i, metadata !4035, metadata !DIExpression()), !dbg !4037
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %arg, i32 16, i1 false)
  %109 = call i8 @std.core.types.TypeKind.is_int(i8 zeroext 3) #5, !dbg !4038
  %110 = trunc i8 %109 to i1, !dbg !4038
  br i1 %110, label %or.phi, label %or.rhs, !dbg !4038

or.rhs:                                           ; preds = %switch.case129
  br label %or.phi, !dbg !4042

or.phi:                                           ; preds = %or.rhs, %switch.case129
  %val132 = phi i1 [ true, %switch.case129 ], [ false, %or.rhs ], !dbg !4042
  br i1 %val132, label %assert_ok, label %assert_fail, !dbg !4042

assert_fail:                                      ; preds = %or.phi
  %111 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4038
  call void %111(ptr @.panic_msg.130, i64 106, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 12), !dbg !4038
  unreachable, !dbg !4038

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %any_type, metadata !4043, metadata !DIExpression()), !dbg !4044
  %ptradd133 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !4045
  %112 = load i64, ptr %ptradd133, align 8, !dbg !4045
  store i64 %112, ptr %any_type, align 8, !dbg !4045
  call void @llvm.dbg.declare(metadata ptr %kind, metadata !4046, metadata !DIExpression()), !dbg !4047
  %113 = load i64, ptr %any_type, align 8, !dbg !4048
  %"introspect*134" = inttoptr i64 %113 to ptr, !dbg !4048
  %typeid.kind135 = load i8, ptr %"introspect*134", align 8, !dbg !4048
  store i8 %typeid.kind135, ptr %kind, align 1, !dbg !4048
  %114 = load i8, ptr %kind, align 1, !dbg !4049
  %eq136 = icmp eq i8 %114, 8, !dbg !4049
  br i1 %eq136, label %if.then137, label %if.exit158, !dbg !4049

if.then137:                                       ; preds = %assert_ok
  %115 = load i64, ptr %any_type, align 8, !dbg !4050
  %"introspect*138" = inttoptr i64 %115 to ptr, !dbg !4050
  %typeid.kind139 = load i8, ptr %"introspect*138", align 8, !dbg !4050
  %eq140 = icmp eq i8 %typeid.kind139, 15, !dbg !4050
  br i1 %eq140, label %check_type_ok, label %check_next, !dbg !4050

check_next:                                       ; preds = %if.then137
  %eq141 = icmp eq i8 %typeid.kind139, 19, !dbg !4050
  br i1 %eq141, label %check_type_ok, label %check_next142, !dbg !4050

check_next142:                                    ; preds = %check_next
  %eq143 = icmp eq i8 %typeid.kind139, 17, !dbg !4050
  br i1 %eq143, label %check_type_ok, label %check_next144, !dbg !4050

check_next144:                                    ; preds = %check_next142
  %eq145 = icmp eq i8 %typeid.kind139, 8, !dbg !4050
  br i1 %eq145, label %check_type_ok, label %check_next146, !dbg !4050

check_next146:                                    ; preds = %check_next144
  %eq147 = icmp eq i8 %typeid.kind139, 16, !dbg !4050
  br i1 %eq147, label %check_type_ok, label %check_next148, !dbg !4050

check_next148:                                    ; preds = %check_next146
  %eq149 = icmp eq i8 %typeid.kind139, 18, !dbg !4050
  br i1 %eq149, label %check_type_ok, label %check_next150, !dbg !4050

check_next150:                                    ; preds = %check_next148
  %eq151 = icmp eq i8 %typeid.kind139, 14, !dbg !4050
  br i1 %eq151, label %check_type_ok, label %check_next152, !dbg !4050

check_next152:                                    ; preds = %check_next150
  %eq153 = icmp eq i8 %typeid.kind139, 12, !dbg !4050
  br i1 %eq153, label %check_type_ok, label %check_next154, !dbg !4050

check_next154:                                    ; preds = %check_next152
  %116 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4050
  call void %116(ptr @.panic_msg.120, i64 49, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 20), !dbg !4050
  unreachable, !dbg !4050

check_type_ok:                                    ; preds = %check_next152, %check_next150, %check_next148, %check_next146, %check_next144, %check_next142, %check_next, %if.then137
  %ptradd155 = getelementptr inbounds i8, ptr %"introspect*138", i64 32, !dbg !4050
  %typeid.inner = load i64, ptr %ptradd155, align 8, !dbg !4050
  store i64 %typeid.inner, ptr %any_type, align 8, !dbg !4050
  %117 = load i64, ptr %any_type, align 8, !dbg !4052
  %"introspect*156" = inttoptr i64 %117 to ptr, !dbg !4052
  %typeid.kind157 = load i8, ptr %"introspect*156", align 8, !dbg !4052
  store i8 %typeid.kind157, ptr %kind, align 1, !dbg !4052
  br label %if.exit158, !dbg !4052

if.exit158:                                       ; preds = %check_type_ok, %assert_ok
  call void @llvm.dbg.declare(metadata ptr %is_mixed_signed, metadata !4053, metadata !DIExpression()), !dbg !4054
  %118 = load i64, ptr %any_type, align 8, !dbg !4055
  %"introspect*159" = inttoptr i64 %118 to ptr, !dbg !4055
  %typeid.kind160 = load i8, ptr %"introspect*159", align 8, !dbg !4055
  %neq161 = icmp ne i8 3, %typeid.kind160, !dbg !4056
  %119 = zext i1 %neq161 to i8, !dbg !4056
  store i8 %119, ptr %is_mixed_signed, align 1, !dbg !4056
  call void @llvm.dbg.declare(metadata ptr %max, metadata !4057, metadata !DIExpression()), !dbg !4058
  store i64 -1, ptr %max, align 8, !dbg !4059
  call void @llvm.dbg.declare(metadata ptr %min, metadata !4060, metadata !DIExpression()), !dbg !4061
  store i64 0, ptr %min, align 8, !dbg !4062
  %120 = load i64, ptr %any_type, align 8
  store i64 %120, ptr %switch162, align 8
  br label %switch.entry163

switch.entry163:                                  ; preds = %if.exit158
  %121 = load i64, ptr %switch162, align 8
  br label %check_subtype, !dbg !4063

check_subtype:                                    ; preds = %parent_type_block, %switch.entry163
  %122 = phi i64 [ %121, %switch.entry163 ], [ %typeid.parent, %parent_type_block ], !dbg !4063
  %eq164 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %122, !dbg !4063
  br i1 %eq164, label %result_block, label %parent_type_block, !dbg !4063

parent_type_block:                                ; preds = %check_subtype
  %123 = inttoptr i64 %122 to ptr, !dbg !4063
  %ptradd165 = getelementptr inbounds i8, ptr %123, i64 8, !dbg !4063
  %typeid.parent = load i64, ptr %ptradd165, align 8, !dbg !4063
  %124 = icmp eq i64 %typeid.parent, 0, !dbg !4063
  br i1 %124, label %result_block, label %check_subtype, !dbg !4063

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %125 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !4063
  br i1 %125, label %switch.case166, label %next_if, !dbg !4063

switch.case166:                                   ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %c, metadata !4065, metadata !DIExpression()), !dbg !4067
  %126 = load ptr, ptr %v, align 8, !dbg !4068
  %checknull167 = icmp eq ptr %126, null, !dbg !4068
  %127 = call i1 @llvm.expect.i1(i1 %checknull167, i1 false), !dbg !4068
  br i1 %127, label %panic168, label %checkok169, !dbg !4068

checkok169:                                       ; preds = %switch.case166
  %128 = load i8, ptr %126, align 1, !dbg !4069
  store i8 %128, ptr %c, align 1, !dbg !4069
  %129 = load i8, ptr %is_mixed_signed, align 1, !dbg !4070
  %130 = trunc i8 %129 to i1, !dbg !4070
  br i1 %130, label %and.rhs, label %and.phi, !dbg !4070

and.rhs:                                          ; preds = %checkok169
  %131 = load i8, ptr %c, align 1, !dbg !4071
  %sext = sext i8 %131 to i32, !dbg !4071
  %lt = icmp slt i32 %sext, 0, !dbg !4071
  br label %and.phi, !dbg !4071

and.phi:                                          ; preds = %and.rhs, %checkok169
  %val170 = phi i1 [ false, %checkok169 ], [ %lt, %and.rhs ], !dbg !4071
  br i1 %val170, label %if.then171, label %if.exit172, !dbg !4071

if.then171:                                       ; preds = %and.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var130, align 8, !dbg !4072
  br label %panic_block, !dbg !4072

if.exit172:                                       ; preds = %and.phi
  %132 = load i8, ptr %c, align 1, !dbg !4073
  %sext173 = sext i8 %132 to i64, !dbg !4073
  store i64 %sext173, ptr %blockret131, align 8, !dbg !4073
  br label %expr_block.exit400, !dbg !4073

next_if:                                          ; preds = %result_block
  br label %check_subtype174, !dbg !4074

check_subtype174:                                 ; preds = %parent_type_block176, %next_if
  %133 = phi i64 [ %121, %next_if ], [ %typeid.parent178, %parent_type_block176 ], !dbg !4074
  %eq175 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %133, !dbg !4074
  br i1 %eq175, label %result_block179, label %parent_type_block176, !dbg !4074

parent_type_block176:                             ; preds = %check_subtype174
  %134 = inttoptr i64 %133 to ptr, !dbg !4074
  %ptradd177 = getelementptr inbounds i8, ptr %134, i64 8, !dbg !4074
  %typeid.parent178 = load i64, ptr %ptradd177, align 8, !dbg !4074
  %135 = icmp eq i64 %typeid.parent178, 0, !dbg !4074
  br i1 %135, label %result_block179, label %check_subtype174, !dbg !4074

result_block179:                                  ; preds = %parent_type_block176, %check_subtype174
  %136 = phi i1 [ false, %parent_type_block176 ], [ true, %check_subtype174 ], !dbg !4074
  br i1 %136, label %switch.case180, label %next_if201, !dbg !4074

switch.case180:                                   ; preds = %result_block179
  call void @llvm.dbg.declare(metadata ptr %s, metadata !4075, metadata !DIExpression()), !dbg !4077
  %137 = load ptr, ptr %v, align 8, !dbg !4078
  %checknull181 = icmp eq ptr %137, null, !dbg !4078
  %138 = call i1 @llvm.expect.i1(i1 %checknull181, i1 false), !dbg !4078
  br i1 %138, label %panic182, label %checkok183, !dbg !4078

checkok183:                                       ; preds = %switch.case180
  %139 = load i16, ptr %137, align 2, !dbg !4079
  store i16 %139, ptr %s, align 2, !dbg !4079
  %140 = load i8, ptr %is_mixed_signed, align 1, !dbg !4080
  %141 = trunc i8 %140 to i1, !dbg !4080
  br i1 %141, label %and.rhs184, label %and.phi187, !dbg !4080

and.rhs184:                                       ; preds = %checkok183
  %142 = load i16, ptr %s, align 2, !dbg !4081
  %sext185 = sext i16 %142 to i32, !dbg !4081
  %lt186 = icmp slt i32 %sext185, 0, !dbg !4081
  br label %and.phi187, !dbg !4081

and.phi187:                                       ; preds = %and.rhs184, %checkok183
  %val188 = phi i1 [ false, %checkok183 ], [ %lt186, %and.rhs184 ], !dbg !4081
  br i1 %val188, label %if.then189, label %if.exit190, !dbg !4081

if.then189:                                       ; preds = %and.phi187
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var130, align 8, !dbg !4082
  br label %panic_block, !dbg !4082

if.exit190:                                       ; preds = %and.phi187
  %143 = load i16, ptr %s, align 2, !dbg !4083
  %sext191 = sext i16 %143 to i64, !dbg !4083
  %144 = load i64, ptr %max, align 8, !dbg !4084
  %gt = icmp sgt i64 %sext191, %144, !dbg !4083
  %check = icmp sge i64 %144, 0, !dbg !4083
  %siui-gt = and i1 %check, %gt, !dbg !4083
  br i1 %siui-gt, label %or.phi196, label %or.rhs192, !dbg !4083

or.rhs192:                                        ; preds = %if.exit190
  %145 = load i16, ptr %s, align 2, !dbg !4085
  %sext193 = sext i16 %145 to i64, !dbg !4085
  %146 = load i64, ptr %min, align 8, !dbg !4086
  %lt194 = icmp slt i64 %sext193, %146, !dbg !4085
  %check195 = icmp slt i64 %146, 0, !dbg !4085
  %siui-lt = or i1 %check195, %lt194, !dbg !4085
  br label %or.phi196, !dbg !4085

or.phi196:                                        ; preds = %or.rhs192, %if.exit190
  %val197 = phi i1 [ true, %if.exit190 ], [ %siui-lt, %or.rhs192 ], !dbg !4085
  br i1 %val197, label %if.then198, label %if.exit199, !dbg !4085

if.then198:                                       ; preds = %or.phi196
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var130, align 8, !dbg !4087
  br label %panic_block, !dbg !4087

if.exit199:                                       ; preds = %or.phi196
  %147 = load i16, ptr %s, align 2, !dbg !4088
  %sext200 = sext i16 %147 to i64, !dbg !4088
  store i64 %sext200, ptr %blockret131, align 8, !dbg !4088
  br label %expr_block.exit400, !dbg !4088

next_if201:                                       ; preds = %result_block179
  br label %check_subtype202, !dbg !4089

check_subtype202:                                 ; preds = %parent_type_block204, %next_if201
  %148 = phi i64 [ %121, %next_if201 ], [ %typeid.parent206, %parent_type_block204 ], !dbg !4089
  %eq203 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %148, !dbg !4089
  br i1 %eq203, label %result_block207, label %parent_type_block204, !dbg !4089

parent_type_block204:                             ; preds = %check_subtype202
  %149 = inttoptr i64 %148 to ptr, !dbg !4089
  %ptradd205 = getelementptr inbounds i8, ptr %149, i64 8, !dbg !4089
  %typeid.parent206 = load i64, ptr %ptradd205, align 8, !dbg !4089
  %150 = icmp eq i64 %typeid.parent206, 0, !dbg !4089
  br i1 %150, label %result_block207, label %check_subtype202, !dbg !4089

result_block207:                                  ; preds = %parent_type_block204, %check_subtype202
  %151 = phi i1 [ false, %parent_type_block204 ], [ true, %check_subtype202 ], !dbg !4089
  br i1 %151, label %switch.case208, label %next_if233, !dbg !4089

switch.case208:                                   ; preds = %result_block207
  call void @llvm.dbg.declare(metadata ptr %i209, metadata !4090, metadata !DIExpression()), !dbg !4092
  %152 = load ptr, ptr %v, align 8, !dbg !4093
  %checknull210 = icmp eq ptr %152, null, !dbg !4093
  %153 = call i1 @llvm.expect.i1(i1 %checknull210, i1 false), !dbg !4093
  br i1 %153, label %panic211, label %checkok212, !dbg !4093

checkok212:                                       ; preds = %switch.case208
  %154 = load i32, ptr %152, align 4, !dbg !4094
  store i32 %154, ptr %i209, align 4, !dbg !4094
  %155 = load i8, ptr %is_mixed_signed, align 1, !dbg !4095
  %156 = trunc i8 %155 to i1, !dbg !4095
  br i1 %156, label %and.rhs213, label %and.phi215, !dbg !4095

and.rhs213:                                       ; preds = %checkok212
  %157 = load i32, ptr %i209, align 4, !dbg !4096
  %lt214 = icmp slt i32 %157, 0, !dbg !4096
  br label %and.phi215, !dbg !4096

and.phi215:                                       ; preds = %and.rhs213, %checkok212
  %val216 = phi i1 [ false, %checkok212 ], [ %lt214, %and.rhs213 ], !dbg !4096
  br i1 %val216, label %if.then217, label %if.exit218, !dbg !4096

if.then217:                                       ; preds = %and.phi215
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var130, align 8, !dbg !4097
  br label %panic_block, !dbg !4097

if.exit218:                                       ; preds = %and.phi215
  %158 = load i32, ptr %i209, align 4, !dbg !4098
  %sext219 = sext i32 %158 to i64, !dbg !4098
  %159 = load i64, ptr %max, align 8, !dbg !4099
  %gt220 = icmp sgt i64 %sext219, %159, !dbg !4098
  %check221 = icmp sge i64 %159, 0, !dbg !4098
  %siui-gt222 = and i1 %check221, %gt220, !dbg !4098
  br i1 %siui-gt222, label %or.phi228, label %or.rhs223, !dbg !4098

or.rhs223:                                        ; preds = %if.exit218
  %160 = load i32, ptr %i209, align 4, !dbg !4100
  %sext224 = sext i32 %160 to i64, !dbg !4100
  %161 = load i64, ptr %min, align 8, !dbg !4101
  %lt225 = icmp slt i64 %sext224, %161, !dbg !4100
  %check226 = icmp slt i64 %161, 0, !dbg !4100
  %siui-lt227 = or i1 %check226, %lt225, !dbg !4100
  br label %or.phi228, !dbg !4100

or.phi228:                                        ; preds = %or.rhs223, %if.exit218
  %val229 = phi i1 [ true, %if.exit218 ], [ %siui-lt227, %or.rhs223 ], !dbg !4100
  br i1 %val229, label %if.then230, label %if.exit231, !dbg !4100

if.then230:                                       ; preds = %or.phi228
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var130, align 8, !dbg !4102
  br label %panic_block, !dbg !4102

if.exit231:                                       ; preds = %or.phi228
  %162 = load i32, ptr %i209, align 4, !dbg !4103
  %sext232 = sext i32 %162 to i64, !dbg !4103
  store i64 %sext232, ptr %blockret131, align 8, !dbg !4103
  br label %expr_block.exit400, !dbg !4103

next_if233:                                       ; preds = %result_block207
  br label %check_subtype234, !dbg !4104

check_subtype234:                                 ; preds = %parent_type_block236, %next_if233
  %163 = phi i64 [ %121, %next_if233 ], [ %typeid.parent238, %parent_type_block236 ], !dbg !4104
  %eq235 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %163, !dbg !4104
  br i1 %eq235, label %result_block239, label %parent_type_block236, !dbg !4104

parent_type_block236:                             ; preds = %check_subtype234
  %164 = inttoptr i64 %163 to ptr, !dbg !4104
  %ptradd237 = getelementptr inbounds i8, ptr %164, i64 8, !dbg !4104
  %typeid.parent238 = load i64, ptr %ptradd237, align 8, !dbg !4104
  %165 = icmp eq i64 %typeid.parent238, 0, !dbg !4104
  br i1 %165, label %result_block239, label %check_subtype234, !dbg !4104

result_block239:                                  ; preds = %parent_type_block236, %check_subtype234
  %166 = phi i1 [ false, %parent_type_block236 ], [ true, %check_subtype234 ], !dbg !4104
  br i1 %166, label %switch.case240, label %next_if261, !dbg !4104

switch.case240:                                   ; preds = %result_block239
  call void @llvm.dbg.declare(metadata ptr %l, metadata !4105, metadata !DIExpression()), !dbg !4107
  %167 = load ptr, ptr %v, align 8, !dbg !4108
  %checknull241 = icmp eq ptr %167, null, !dbg !4108
  %168 = call i1 @llvm.expect.i1(i1 %checknull241, i1 false), !dbg !4108
  br i1 %168, label %panic242, label %checkok243, !dbg !4108

checkok243:                                       ; preds = %switch.case240
  %169 = load i64, ptr %167, align 8, !dbg !4109
  store i64 %169, ptr %l, align 8, !dbg !4109
  %170 = load i8, ptr %is_mixed_signed, align 1, !dbg !4110
  %171 = trunc i8 %170 to i1, !dbg !4110
  br i1 %171, label %and.rhs244, label %and.phi246, !dbg !4110

and.rhs244:                                       ; preds = %checkok243
  %172 = load i64, ptr %l, align 8, !dbg !4111
  %lt245 = icmp slt i64 %172, 0, !dbg !4111
  br label %and.phi246, !dbg !4111

and.phi246:                                       ; preds = %and.rhs244, %checkok243
  %val247 = phi i1 [ false, %checkok243 ], [ %lt245, %and.rhs244 ], !dbg !4111
  br i1 %val247, label %if.then248, label %if.exit249, !dbg !4111

if.then248:                                       ; preds = %and.phi246
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var130, align 8, !dbg !4112
  br label %panic_block, !dbg !4112

if.exit249:                                       ; preds = %and.phi246
  %173 = load i64, ptr %l, align 8, !dbg !4113
  %174 = load i64, ptr %max, align 8, !dbg !4114
  %gt250 = icmp sgt i64 %173, %174, !dbg !4113
  %check251 = icmp sge i64 %174, 0, !dbg !4113
  %siui-gt252 = and i1 %check251, %gt250, !dbg !4113
  br i1 %siui-gt252, label %or.phi257, label %or.rhs253, !dbg !4113

or.rhs253:                                        ; preds = %if.exit249
  %175 = load i64, ptr %l, align 8, !dbg !4115
  %176 = load i64, ptr %min, align 8, !dbg !4116
  %lt254 = icmp slt i64 %175, %176, !dbg !4115
  %check255 = icmp slt i64 %176, 0, !dbg !4115
  %siui-lt256 = or i1 %check255, %lt254, !dbg !4115
  br label %or.phi257, !dbg !4115

or.phi257:                                        ; preds = %or.rhs253, %if.exit249
  %val258 = phi i1 [ true, %if.exit249 ], [ %siui-lt256, %or.rhs253 ], !dbg !4115
  br i1 %val258, label %if.then259, label %if.exit260, !dbg !4115

if.then259:                                       ; preds = %or.phi257
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var130, align 8, !dbg !4117
  br label %panic_block, !dbg !4117

if.exit260:                                       ; preds = %or.phi257
  %177 = load i64, ptr %l, align 8, !dbg !4118
  store i64 %177, ptr %blockret131, align 8, !dbg !4118
  br label %expr_block.exit400, !dbg !4118

next_if261:                                       ; preds = %result_block239
  br label %check_subtype262, !dbg !4119

check_subtype262:                                 ; preds = %parent_type_block264, %next_if261
  %178 = phi i64 [ %121, %next_if261 ], [ %typeid.parent266, %parent_type_block264 ], !dbg !4119
  %eq263 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %178, !dbg !4119
  br i1 %eq263, label %result_block267, label %parent_type_block264, !dbg !4119

parent_type_block264:                             ; preds = %check_subtype262
  %179 = inttoptr i64 %178 to ptr, !dbg !4119
  %ptradd265 = getelementptr inbounds i8, ptr %179, i64 8, !dbg !4119
  %typeid.parent266 = load i64, ptr %ptradd265, align 8, !dbg !4119
  %180 = icmp eq i64 %typeid.parent266, 0, !dbg !4119
  br i1 %180, label %result_block267, label %check_subtype262, !dbg !4119

result_block267:                                  ; preds = %parent_type_block264, %check_subtype262
  %181 = phi i1 [ false, %parent_type_block264 ], [ true, %check_subtype262 ], !dbg !4119
  br i1 %181, label %switch.case268, label %next_if291, !dbg !4119

switch.case268:                                   ; preds = %result_block267
  call void @llvm.dbg.declare(metadata ptr %i269, metadata !4120, metadata !DIExpression()), !dbg !4122
  %182 = load ptr, ptr %v, align 8, !dbg !4123
  %checknull270 = icmp eq ptr %182, null, !dbg !4123
  %183 = call i1 @llvm.expect.i1(i1 %checknull270, i1 false), !dbg !4123
  br i1 %183, label %panic271, label %checkok272, !dbg !4123

checkok272:                                       ; preds = %switch.case268
  %184 = load i128, ptr %182, align 8, !dbg !4124
  store i128 %184, ptr %i269, align 8, !dbg !4124
  %185 = load i8, ptr %is_mixed_signed, align 1, !dbg !4125
  %186 = trunc i8 %185 to i1, !dbg !4125
  br i1 %186, label %and.rhs273, label %and.phi275, !dbg !4125

and.rhs273:                                       ; preds = %checkok272
  %187 = load i128, ptr %i269, align 8, !dbg !4126
  %lt274 = icmp slt i128 %187, 0, !dbg !4126
  br label %and.phi275, !dbg !4126

and.phi275:                                       ; preds = %and.rhs273, %checkok272
  %val276 = phi i1 [ false, %checkok272 ], [ %lt274, %and.rhs273 ], !dbg !4126
  br i1 %val276, label %if.then277, label %if.exit278, !dbg !4126

if.then277:                                       ; preds = %and.phi275
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var130, align 8, !dbg !4127
  br label %panic_block, !dbg !4127

if.exit278:                                       ; preds = %and.phi275
  %188 = load i128, ptr %i269, align 8, !dbg !4128
  %189 = load i64, ptr %max, align 8, !dbg !4129
  %zext = zext i64 %189 to i128, !dbg !4129
  %gt279 = icmp sgt i128 %188, %zext, !dbg !4128
  %check280 = icmp sge i128 %zext, 0, !dbg !4128
  %siui-gt281 = and i1 %check280, %gt279, !dbg !4128
  br i1 %siui-gt281, label %or.phi287, label %or.rhs282, !dbg !4128

or.rhs282:                                        ; preds = %if.exit278
  %190 = load i128, ptr %i269, align 8, !dbg !4130
  %191 = load i64, ptr %min, align 8, !dbg !4131
  %zext283 = zext i64 %191 to i128, !dbg !4131
  %lt284 = icmp slt i128 %190, %zext283, !dbg !4130
  %check285 = icmp slt i128 %zext283, 0, !dbg !4130
  %siui-lt286 = or i1 %check285, %lt284, !dbg !4130
  br label %or.phi287, !dbg !4130

or.phi287:                                        ; preds = %or.rhs282, %if.exit278
  %val288 = phi i1 [ true, %if.exit278 ], [ %siui-lt286, %or.rhs282 ], !dbg !4130
  br i1 %val288, label %if.then289, label %if.exit290, !dbg !4130

if.then289:                                       ; preds = %or.phi287
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var130, align 8, !dbg !4132
  br label %panic_block, !dbg !4132

if.exit290:                                       ; preds = %or.phi287
  %192 = load i128, ptr %i269, align 8, !dbg !4133
  %trunc = trunc i128 %192 to i64, !dbg !4133
  store i64 %trunc, ptr %blockret131, align 8, !dbg !4133
  br label %expr_block.exit400, !dbg !4133

next_if291:                                       ; preds = %result_block267
  br label %check_subtype292, !dbg !4134

check_subtype292:                                 ; preds = %parent_type_block294, %next_if291
  %193 = phi i64 [ %121, %next_if291 ], [ %typeid.parent296, %parent_type_block294 ], !dbg !4134
  %eq293 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %193, !dbg !4134
  br i1 %eq293, label %result_block297, label %parent_type_block294, !dbg !4134

parent_type_block294:                             ; preds = %check_subtype292
  %194 = inttoptr i64 %193 to ptr, !dbg !4134
  %ptradd295 = getelementptr inbounds i8, ptr %194, i64 8, !dbg !4134
  %typeid.parent296 = load i64, ptr %ptradd295, align 8, !dbg !4134
  %195 = icmp eq i64 %typeid.parent296, 0, !dbg !4134
  br i1 %195, label %result_block297, label %check_subtype292, !dbg !4134

result_block297:                                  ; preds = %parent_type_block294, %check_subtype292
  %196 = phi i1 [ false, %parent_type_block294 ], [ true, %check_subtype292 ], !dbg !4134
  br i1 %196, label %switch.case298, label %next_if308, !dbg !4134

switch.case298:                                   ; preds = %result_block297
  call void @llvm.dbg.declare(metadata ptr %c299, metadata !4135, metadata !DIExpression()), !dbg !4137
  %197 = load ptr, ptr %v, align 8, !dbg !4138
  %checknull300 = icmp eq ptr %197, null, !dbg !4138
  %198 = call i1 @llvm.expect.i1(i1 %checknull300, i1 false), !dbg !4138
  br i1 %198, label %panic301, label %checkok302, !dbg !4138

checkok302:                                       ; preds = %switch.case298
  %199 = load i8, ptr %197, align 1, !dbg !4139
  store i8 %199, ptr %c299, align 1, !dbg !4139
  %200 = load i8, ptr %c299, align 1, !dbg !4140
  %zext303 = zext i8 %200 to i64, !dbg !4140
  %201 = load i64, ptr %max, align 8, !dbg !4141
  %gt304 = icmp ugt i64 %zext303, %201, !dbg !4140
  br i1 %gt304, label %if.then305, label %if.exit306, !dbg !4140

if.then305:                                       ; preds = %checkok302
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var130, align 8, !dbg !4142
  br label %panic_block, !dbg !4142

if.exit306:                                       ; preds = %checkok302
  %202 = load i8, ptr %c299, align 1, !dbg !4143
  %zext307 = zext i8 %202 to i64, !dbg !4143
  store i64 %zext307, ptr %blockret131, align 8, !dbg !4143
  br label %expr_block.exit400, !dbg !4143

next_if308:                                       ; preds = %result_block297
  br label %check_subtype309, !dbg !4144

check_subtype309:                                 ; preds = %parent_type_block311, %next_if308
  %203 = phi i64 [ %121, %next_if308 ], [ %typeid.parent313, %parent_type_block311 ], !dbg !4144
  %eq310 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %203, !dbg !4144
  br i1 %eq310, label %result_block314, label %parent_type_block311, !dbg !4144

parent_type_block311:                             ; preds = %check_subtype309
  %204 = inttoptr i64 %203 to ptr, !dbg !4144
  %ptradd312 = getelementptr inbounds i8, ptr %204, i64 8, !dbg !4144
  %typeid.parent313 = load i64, ptr %ptradd312, align 8, !dbg !4144
  %205 = icmp eq i64 %typeid.parent313, 0, !dbg !4144
  br i1 %205, label %result_block314, label %check_subtype309, !dbg !4144

result_block314:                                  ; preds = %parent_type_block311, %check_subtype309
  %206 = phi i1 [ false, %parent_type_block311 ], [ true, %check_subtype309 ], !dbg !4144
  br i1 %206, label %switch.case315, label %next_if330, !dbg !4144

switch.case315:                                   ; preds = %result_block314
  call void @llvm.dbg.declare(metadata ptr %s316, metadata !4145, metadata !DIExpression()), !dbg !4147
  %207 = load ptr, ptr %v, align 8, !dbg !4148
  %checknull317 = icmp eq ptr %207, null, !dbg !4148
  %208 = call i1 @llvm.expect.i1(i1 %checknull317, i1 false), !dbg !4148
  br i1 %208, label %panic318, label %checkok319, !dbg !4148

checkok319:                                       ; preds = %switch.case315
  %209 = load i16, ptr %207, align 2, !dbg !4149
  store i16 %209, ptr %s316, align 2, !dbg !4149
  %210 = load i16, ptr %s316, align 2, !dbg !4150
  %zext320 = zext i16 %210 to i64, !dbg !4150
  %211 = load i64, ptr %max, align 8, !dbg !4151
  %gt321 = icmp ugt i64 %zext320, %211, !dbg !4150
  br i1 %gt321, label %or.phi325, label %or.rhs322, !dbg !4150

or.rhs322:                                        ; preds = %checkok319
  %212 = load i16, ptr %s316, align 2, !dbg !4152
  %zext323 = zext i16 %212 to i64, !dbg !4152
  %213 = load i64, ptr %min, align 8, !dbg !4153
  %lt324 = icmp ult i64 %zext323, %213, !dbg !4152
  br label %or.phi325, !dbg !4152

or.phi325:                                        ; preds = %or.rhs322, %checkok319
  %val326 = phi i1 [ true, %checkok319 ], [ %lt324, %or.rhs322 ], !dbg !4152
  br i1 %val326, label %if.then327, label %if.exit328, !dbg !4152

if.then327:                                       ; preds = %or.phi325
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var130, align 8, !dbg !4154
  br label %panic_block, !dbg !4154

if.exit328:                                       ; preds = %or.phi325
  %214 = load i16, ptr %s316, align 2, !dbg !4155
  %zext329 = zext i16 %214 to i64, !dbg !4155
  store i64 %zext329, ptr %blockret131, align 8, !dbg !4155
  br label %expr_block.exit400, !dbg !4155

next_if330:                                       ; preds = %result_block314
  br label %check_subtype331, !dbg !4156

check_subtype331:                                 ; preds = %parent_type_block333, %next_if330
  %215 = phi i64 [ %121, %next_if330 ], [ %typeid.parent335, %parent_type_block333 ], !dbg !4156
  %eq332 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %215, !dbg !4156
  br i1 %eq332, label %result_block336, label %parent_type_block333, !dbg !4156

parent_type_block333:                             ; preds = %check_subtype331
  %216 = inttoptr i64 %215 to ptr, !dbg !4156
  %ptradd334 = getelementptr inbounds i8, ptr %216, i64 8, !dbg !4156
  %typeid.parent335 = load i64, ptr %ptradd334, align 8, !dbg !4156
  %217 = icmp eq i64 %typeid.parent335, 0, !dbg !4156
  br i1 %217, label %result_block336, label %check_subtype331, !dbg !4156

result_block336:                                  ; preds = %parent_type_block333, %check_subtype331
  %218 = phi i1 [ false, %parent_type_block333 ], [ true, %check_subtype331 ], !dbg !4156
  br i1 %218, label %switch.case337, label %next_if352, !dbg !4156

switch.case337:                                   ; preds = %result_block336
  call void @llvm.dbg.declare(metadata ptr %i338, metadata !4157, metadata !DIExpression()), !dbg !4159
  %219 = load ptr, ptr %v, align 8, !dbg !4160
  %checknull339 = icmp eq ptr %219, null, !dbg !4160
  %220 = call i1 @llvm.expect.i1(i1 %checknull339, i1 false), !dbg !4160
  br i1 %220, label %panic340, label %checkok341, !dbg !4160

checkok341:                                       ; preds = %switch.case337
  %221 = load i32, ptr %219, align 4, !dbg !4161
  store i32 %221, ptr %i338, align 4, !dbg !4161
  %222 = load i32, ptr %i338, align 4, !dbg !4162
  %zext342 = zext i32 %222 to i64, !dbg !4162
  %223 = load i64, ptr %max, align 8, !dbg !4163
  %gt343 = icmp ugt i64 %zext342, %223, !dbg !4162
  br i1 %gt343, label %or.phi347, label %or.rhs344, !dbg !4162

or.rhs344:                                        ; preds = %checkok341
  %224 = load i32, ptr %i338, align 4, !dbg !4164
  %zext345 = zext i32 %224 to i64, !dbg !4164
  %225 = load i64, ptr %min, align 8, !dbg !4165
  %lt346 = icmp ult i64 %zext345, %225, !dbg !4164
  br label %or.phi347, !dbg !4164

or.phi347:                                        ; preds = %or.rhs344, %checkok341
  %val348 = phi i1 [ true, %checkok341 ], [ %lt346, %or.rhs344 ], !dbg !4164
  br i1 %val348, label %if.then349, label %if.exit350, !dbg !4164

if.then349:                                       ; preds = %or.phi347
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var130, align 8, !dbg !4166
  br label %panic_block, !dbg !4166

if.exit350:                                       ; preds = %or.phi347
  %226 = load i32, ptr %i338, align 4, !dbg !4167
  %zext351 = zext i32 %226 to i64, !dbg !4167
  store i64 %zext351, ptr %blockret131, align 8, !dbg !4167
  br label %expr_block.exit400, !dbg !4167

next_if352:                                       ; preds = %result_block336
  br label %check_subtype353, !dbg !4168

check_subtype353:                                 ; preds = %parent_type_block355, %next_if352
  %227 = phi i64 [ %121, %next_if352 ], [ %typeid.parent357, %parent_type_block355 ], !dbg !4168
  %eq354 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %227, !dbg !4168
  br i1 %eq354, label %result_block358, label %parent_type_block355, !dbg !4168

parent_type_block355:                             ; preds = %check_subtype353
  %228 = inttoptr i64 %227 to ptr, !dbg !4168
  %ptradd356 = getelementptr inbounds i8, ptr %228, i64 8, !dbg !4168
  %typeid.parent357 = load i64, ptr %ptradd356, align 8, !dbg !4168
  %229 = icmp eq i64 %typeid.parent357, 0, !dbg !4168
  br i1 %229, label %result_block358, label %check_subtype353, !dbg !4168

result_block358:                                  ; preds = %parent_type_block355, %check_subtype353
  %230 = phi i1 [ false, %parent_type_block355 ], [ true, %check_subtype353 ], !dbg !4168
  br i1 %230, label %switch.case359, label %next_if371, !dbg !4168

switch.case359:                                   ; preds = %result_block358
  call void @llvm.dbg.declare(metadata ptr %l360, metadata !4169, metadata !DIExpression()), !dbg !4171
  %231 = load ptr, ptr %v, align 8, !dbg !4172
  %checknull361 = icmp eq ptr %231, null, !dbg !4172
  %232 = call i1 @llvm.expect.i1(i1 %checknull361, i1 false), !dbg !4172
  br i1 %232, label %panic362, label %checkok363, !dbg !4172

checkok363:                                       ; preds = %switch.case359
  %233 = load i64, ptr %231, align 8, !dbg !4173
  store i64 %233, ptr %l360, align 8, !dbg !4173
  %234 = load i64, ptr %l360, align 8, !dbg !4174
  %235 = load i64, ptr %max, align 8, !dbg !4175
  %gt364 = icmp ugt i64 %234, %235, !dbg !4174
  br i1 %gt364, label %or.phi367, label %or.rhs365, !dbg !4174

or.rhs365:                                        ; preds = %checkok363
  %236 = load i64, ptr %l360, align 8, !dbg !4176
  %237 = load i64, ptr %min, align 8, !dbg !4177
  %lt366 = icmp ult i64 %236, %237, !dbg !4176
  br label %or.phi367, !dbg !4176

or.phi367:                                        ; preds = %or.rhs365, %checkok363
  %val368 = phi i1 [ true, %checkok363 ], [ %lt366, %or.rhs365 ], !dbg !4176
  br i1 %val368, label %if.then369, label %if.exit370, !dbg !4176

if.then369:                                       ; preds = %or.phi367
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var130, align 8, !dbg !4178
  br label %panic_block, !dbg !4178

if.exit370:                                       ; preds = %or.phi367
  %238 = load i64, ptr %l360, align 8, !dbg !4179
  store i64 %238, ptr %blockret131, align 8, !dbg !4179
  br label %expr_block.exit400, !dbg !4179

next_if371:                                       ; preds = %result_block358
  br label %check_subtype372, !dbg !4180

check_subtype372:                                 ; preds = %parent_type_block374, %next_if371
  %239 = phi i64 [ %121, %next_if371 ], [ %typeid.parent376, %parent_type_block374 ], !dbg !4180
  %eq373 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %239, !dbg !4180
  br i1 %eq373, label %result_block377, label %parent_type_block374, !dbg !4180

parent_type_block374:                             ; preds = %check_subtype372
  %240 = inttoptr i64 %239 to ptr, !dbg !4180
  %ptradd375 = getelementptr inbounds i8, ptr %240, i64 8, !dbg !4180
  %typeid.parent376 = load i64, ptr %ptradd375, align 8, !dbg !4180
  %241 = icmp eq i64 %typeid.parent376, 0, !dbg !4180
  br i1 %241, label %result_block377, label %check_subtype372, !dbg !4180

result_block377:                                  ; preds = %parent_type_block374, %check_subtype372
  %242 = phi i1 [ false, %parent_type_block374 ], [ true, %check_subtype372 ], !dbg !4180
  br i1 %242, label %switch.case378, label %next_if393, !dbg !4180

switch.case378:                                   ; preds = %result_block377
  call void @llvm.dbg.declare(metadata ptr %i379, metadata !4181, metadata !DIExpression()), !dbg !4183
  %243 = load ptr, ptr %v, align 8, !dbg !4184
  %checknull380 = icmp eq ptr %243, null, !dbg !4184
  %244 = call i1 @llvm.expect.i1(i1 %checknull380, i1 false), !dbg !4184
  br i1 %244, label %panic381, label %checkok382, !dbg !4184

checkok382:                                       ; preds = %switch.case378
  %245 = load i128, ptr %243, align 8, !dbg !4185
  store i128 %245, ptr %i379, align 8, !dbg !4185
  %246 = load i128, ptr %i379, align 8, !dbg !4186
  %247 = load i64, ptr %max, align 8, !dbg !4187
  %zext383 = zext i64 %247 to i128, !dbg !4187
  %gt384 = icmp ugt i128 %246, %zext383, !dbg !4186
  br i1 %gt384, label %or.phi388, label %or.rhs385, !dbg !4186

or.rhs385:                                        ; preds = %checkok382
  %248 = load i128, ptr %i379, align 8, !dbg !4188
  %249 = load i64, ptr %min, align 8, !dbg !4189
  %zext386 = zext i64 %249 to i128, !dbg !4189
  %lt387 = icmp ult i128 %248, %zext386, !dbg !4188
  br label %or.phi388, !dbg !4188

or.phi388:                                        ; preds = %or.rhs385, %checkok382
  %val389 = phi i1 [ true, %checkok382 ], [ %lt387, %or.rhs385 ], !dbg !4188
  br i1 %val389, label %if.then390, label %if.exit391, !dbg !4188

if.then390:                                       ; preds = %or.phi388
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var130, align 8, !dbg !4190
  br label %panic_block, !dbg !4190

if.exit391:                                       ; preds = %or.phi388
  %250 = load i128, ptr %i379, align 8, !dbg !4191
  %trunc392 = trunc i128 %250 to i64, !dbg !4191
  store i64 %trunc392, ptr %blockret131, align 8, !dbg !4191
  br label %expr_block.exit400, !dbg !4191

next_if393:                                       ; preds = %result_block377
  br label %switch.default, !dbg !4191

switch.default:                                   ; preds = %next_if393
  store %"char[]" { ptr @.str.208, i64 30 }, ptr %string394, align 8
  %lo395 = load ptr, ptr %string394, align 8, !dbg !4192
  %ptradd396 = getelementptr inbounds i8, ptr %string394, i64 8, !dbg !4192
  %hi397 = load i64, ptr %ptradd396, align 8, !dbg !4192
  store %"any[]" zeroinitializer, ptr %indirectarg398, align 8
  call void @std.core.builtin.panicf(ptr %lo395, i64 %hi397, ptr @.str.209, i64 12, ptr @.str.210, i64 17, i32 197, ptr byval(%"any[]") align 8 %indirectarg398), !dbg !4196
  unreachable, !dbg !4197

expr_block.exit400:                               ; preds = %if.exit391, %if.exit370, %if.exit350, %if.exit328, %if.exit306, %if.exit290, %if.exit260, %if.exit231, %if.exit199, %if.exit172
  br label %noerr_block402, !dbg !4197

panic_block:                                      ; preds = %if.then390, %if.then369, %if.then349, %if.then327, %if.then305, %if.then289, %if.then277, %if.then259, %if.then248, %if.then230, %if.then217, %if.then198, %if.then189, %if.then171
  %251 = insertvalue %any undef, ptr %error_var130, 0, !dbg !4197
  %252 = insertvalue %any %251, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !4197
  store %any %252, ptr %varargslots, align 16
  %253 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %253, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg401, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.174, i64 36, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 197, ptr byval(%"any[]") align 8 %indirectarg401), !dbg !4041
  unreachable, !dbg !4041

noerr_block402:                                   ; preds = %expr_block.exit400
  %254 = load i64, ptr %blockret131, align 8, !dbg !4041
  store i64 %254, ptr %i, align 8, !dbg !4041
  %255 = load i64, ptr %i, align 8, !dbg !4198
  %ptradd403 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4199
  %256 = load i64, ptr %ptradd403, align 8, !dbg !4199
  %"introspect*404" = inttoptr i64 %256 to ptr, !dbg !4199
  %typeid.kind405 = load i8, ptr %"introspect*404", align 8, !dbg !4199
  %eq406 = icmp eq i8 %typeid.kind405, 8, !dbg !4199
  br i1 %eq406, label %check_type_ok408, label %check_next407, !dbg !4199

check_next407:                                    ; preds = %noerr_block402
  %257 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4199
  call void %257(ptr @.panic_msg.211, i64 51, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 198), !dbg !4199
  unreachable, !dbg !4199

check_type_ok408:                                 ; preds = %noerr_block402
  %ptradd409 = getelementptr inbounds i8, ptr %"introspect*404", i64 40, !dbg !4199
  %namelen = load i64, ptr %ptradd409, align 8, !dbg !4199
  %ptradd410 = getelementptr inbounds i8, ptr %"introspect*404", i64 48, !dbg !4199
  %258 = insertvalue %"char[][]" undef, ptr %ptradd410, 0, !dbg !4199
  %259 = insertvalue %"char[][]" %258, i64 %namelen, 1, !dbg !4199
  %260 = extractvalue %"char[][]" %259, 1, !dbg !4199
  %lt411 = icmp ult i64 %255, %260, !dbg !4198
  br i1 %lt411, label %assert_ok416, label %assert_fail412, !dbg !4198

assert_fail412:                                   ; preds = %check_type_ok408
  %261 = insertvalue %any undef, ptr %i, 0, !dbg !4200
  %262 = insertvalue %any %261, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !4200
  store %any %262, ptr %varargslots413, align 16
  %263 = insertvalue %"any[]" undef, ptr %varargslots413, 0
  %"$$temp414" = insertvalue %"any[]" %263, i64 1, 1
  store %"any[]" %"$$temp414", ptr %indirectarg415, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.212, i64 49, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 198, ptr byval(%"any[]") align 8 %indirectarg415), !dbg !4198
  unreachable, !dbg !4198

assert_ok416:                                     ; preds = %check_type_ok408
  %ptradd418 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4201
  %264 = load i64, ptr %ptradd418, align 8, !dbg !4201
  %"introspect*419" = inttoptr i64 %264 to ptr, !dbg !4201
  %typeid.kind420 = load i8, ptr %"introspect*419", align 8, !dbg !4201
  %eq421 = icmp eq i8 %typeid.kind420, 8, !dbg !4201
  br i1 %eq421, label %check_type_ok423, label %check_next422, !dbg !4201

check_next422:                                    ; preds = %assert_ok416
  %265 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4201
  call void %265(ptr @.panic_msg.211, i64 51, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 199), !dbg !4201
  unreachable, !dbg !4201

check_type_ok423:                                 ; preds = %assert_ok416
  %ptradd424 = getelementptr inbounds i8, ptr %"introspect*419", i64 40, !dbg !4201
  %namelen425 = load i64, ptr %ptradd424, align 8, !dbg !4201
  %ptradd426 = getelementptr inbounds i8, ptr %"introspect*419", i64 48, !dbg !4201
  %266 = insertvalue %"char[][]" undef, ptr %ptradd426, 0, !dbg !4201
  %267 = insertvalue %"char[][]" %266, i64 %namelen425, 1, !dbg !4201
  %268 = extractvalue %"char[][]" %267, 1, !dbg !4201
  %269 = extractvalue %"char[][]" %267, 0, !dbg !4201
  %270 = load i64, ptr %i, align 8, !dbg !4202
  %ge = icmp uge i64 %270, %268, !dbg !4202
  %271 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4202
  br i1 %271, label %panic427, label %checkok434, !dbg !4202

checkok434:                                       ; preds = %check_type_ok423
  %ptroffset = getelementptr inbounds [16 x i8], ptr %269, i64 %270, !dbg !4202
  %272 = load ptr, ptr %self, align 8
  %lo436 = load ptr, ptr %ptroffset, align 8
  %ptradd437 = getelementptr inbounds i8, ptr %ptroffset, i64 8
  %hi438 = load i64, ptr %ptradd437, align 8
  %273 = call i64 @std.io.Formatter.out_substr(ptr %retparam435, ptr %272, ptr %lo436, i64 %hi438), !dbg !4203
  %not_err439 = icmp eq i64 %273, 0, !dbg !4203
  %274 = call i1 @llvm.expect.i1(i1 %not_err439, i1 true), !dbg !4203
  br i1 %274, label %after_check441, label %assign_optional440, !dbg !4203

assign_optional440:                               ; preds = %checkok434
  store i64 %273, ptr %reterr417, align 8, !dbg !4203
  br label %err_retblock442, !dbg !4203

after_check441:                                   ; preds = %checkok434
  %275 = load i64, ptr %retparam435, align 8, !dbg !4203
  store i64 %275, ptr %0, align 8, !dbg !4203
  ret i64 0, !dbg !4203

err_retblock442:                                  ; preds = %assign_optional440
  %276 = load i64, ptr %reterr417, align 8, !dbg !4203
  ret i64 %276, !dbg !4203

switch.case443:                                   ; preds = %switch.entry128
  %277 = load ptr, ptr %self, align 8
  %278 = call i64 @std.io.Formatter.out_substr(ptr %retparam445, ptr %277, ptr @.str.213, i64 8), !dbg !4204
  %not_err446 = icmp eq i64 %278, 0, !dbg !4204
  %279 = call i1 @llvm.expect.i1(i1 %not_err446, i1 true), !dbg !4204
  br i1 %279, label %after_check448, label %assign_optional447, !dbg !4204

assign_optional447:                               ; preds = %switch.case443
  store i64 %278, ptr %reterr444, align 8, !dbg !4204
  br label %err_retblock449, !dbg !4204

after_check448:                                   ; preds = %switch.case443
  %280 = load i64, ptr %retparam445, align 8, !dbg !4204
  store i64 %280, ptr %0, align 8, !dbg !4204
  ret i64 0, !dbg !4204

err_retblock449:                                  ; preds = %assign_optional447
  %281 = load i64, ptr %reterr444, align 8, !dbg !4204
  ret i64 %281, !dbg !4204

switch.case450:                                   ; preds = %switch.entry128
  %282 = load ptr, ptr %self, align 8
  %283 = call i64 @std.io.Formatter.out_substr(ptr %retparam452, ptr %282, ptr @.str.214, i64 7), !dbg !4206
  %not_err453 = icmp eq i64 %283, 0, !dbg !4206
  %284 = call i1 @llvm.expect.i1(i1 %not_err453, i1 true), !dbg !4206
  br i1 %284, label %after_check455, label %assign_optional454, !dbg !4206

assign_optional454:                               ; preds = %switch.case450
  store i64 %283, ptr %reterr451, align 8, !dbg !4206
  br label %err_retblock456, !dbg !4206

after_check455:                                   ; preds = %switch.case450
  %285 = load i64, ptr %retparam452, align 8, !dbg !4206
  store i64 %285, ptr %0, align 8, !dbg !4206
  ret i64 0, !dbg !4206

err_retblock456:                                  ; preds = %assign_optional454
  %286 = load i64, ptr %reterr451, align 8, !dbg !4206
  ret i64 %286, !dbg !4206

switch.case457:                                   ; preds = %switch.entry128
  %287 = load ptr, ptr %self, align 8
  %288 = call i64 @std.io.Formatter.out_substr(ptr %retparam459, ptr %287, ptr @.str.215, i64 11), !dbg !4208
  %not_err460 = icmp eq i64 %288, 0, !dbg !4208
  %289 = call i1 @llvm.expect.i1(i1 %not_err460, i1 true), !dbg !4208
  br i1 %289, label %after_check462, label %assign_optional461, !dbg !4208

assign_optional461:                               ; preds = %switch.case457
  store i64 %288, ptr %reterr458, align 8, !dbg !4208
  br label %err_retblock463, !dbg !4208

after_check462:                                   ; preds = %switch.case457
  %290 = load i64, ptr %retparam459, align 8, !dbg !4208
  store i64 %290, ptr %0, align 8, !dbg !4208
  ret i64 0, !dbg !4208

err_retblock463:                                  ; preds = %assign_optional461
  %291 = load i64, ptr %reterr458, align 8, !dbg !4208
  ret i64 %291, !dbg !4208

switch.case464:                                   ; preds = %switch.entry128
  %292 = load ptr, ptr %self, align 8
  %293 = call i64 @std.io.Formatter.out_substr(ptr %retparam466, ptr %292, ptr @.str.216, i64 10), !dbg !4210
  %not_err467 = icmp eq i64 %293, 0, !dbg !4210
  %294 = call i1 @llvm.expect.i1(i1 %not_err467, i1 true), !dbg !4210
  br i1 %294, label %after_check469, label %assign_optional468, !dbg !4210

assign_optional468:                               ; preds = %switch.case464
  store i64 %293, ptr %reterr465, align 8, !dbg !4210
  br label %err_retblock470, !dbg !4210

after_check469:                                   ; preds = %switch.case464
  %295 = load i64, ptr %retparam466, align 8, !dbg !4210
  store i64 %295, ptr %0, align 8, !dbg !4210
  ret i64 0, !dbg !4210

err_retblock470:                                  ; preds = %assign_optional468
  %296 = load i64, ptr %reterr465, align 8, !dbg !4210
  ret i64 %296, !dbg !4210

switch.case471:                                   ; preds = %switch.entry128
  %ptradd472 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4212
  %297 = load i64, ptr %ptradd472, align 8, !dbg !4212
  %eq473 = icmp eq i64 %297, ptrtoint (ptr @"$ct.String" to i64), !dbg !4212
  br i1 %eq473, label %if.then474, label %if.exit487, !dbg !4212

if.then474:                                       ; preds = %switch.case471
  %298 = load ptr, ptr %arg, align 8, !dbg !4214
  %checknull476 = icmp eq ptr %298, null, !dbg !4214
  %299 = call i1 @llvm.expect.i1(i1 %checknull476, i1 false), !dbg !4214
  br i1 %299, label %panic477, label %checkok478, !dbg !4214

checkok478:                                       ; preds = %if.then474
  %300 = load ptr, ptr %self, align 8
  %lo480 = load ptr, ptr %298, align 8
  %ptradd481 = getelementptr inbounds i8, ptr %298, i64 8
  %hi482 = load i64, ptr %ptradd481, align 8
  %301 = call i64 @std.io.Formatter.out_substr(ptr %retparam479, ptr %300, ptr %lo480, i64 %hi482), !dbg !4216
  %not_err483 = icmp eq i64 %301, 0, !dbg !4216
  %302 = call i1 @llvm.expect.i1(i1 %not_err483, i1 true), !dbg !4216
  br i1 %302, label %after_check485, label %assign_optional484, !dbg !4216

assign_optional484:                               ; preds = %checkok478
  store i64 %301, ptr %reterr475, align 8, !dbg !4216
  br label %err_retblock486, !dbg !4216

after_check485:                                   ; preds = %checkok478
  %303 = load i64, ptr %retparam479, align 8, !dbg !4216
  store i64 %303, ptr %0, align 8, !dbg !4216
  ret i64 0, !dbg !4216

err_retblock486:                                  ; preds = %assign_optional484
  %304 = load i64, ptr %reterr475, align 8, !dbg !4216
  ret i64 %304, !dbg !4216

if.exit487:                                       ; preds = %switch.case471
  %ptradd488 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4217
  %305 = load i64, ptr %ptradd488, align 8, !dbg !4217
  %eq489 = icmp eq i64 %305, ptrtoint (ptr @"$ct.std.core.string.ZString" to i64), !dbg !4217
  br i1 %eq489, label %if.then490, label %if.exit505, !dbg !4217

if.then490:                                       ; preds = %if.exit487
  %306 = load ptr, ptr %arg, align 8, !dbg !4218
  %checknull492 = icmp eq ptr %306, null, !dbg !4218
  %307 = call i1 @llvm.expect.i1(i1 %checknull492, i1 false), !dbg !4218
  br i1 %307, label %panic493, label %checkok494, !dbg !4218

checkok494:                                       ; preds = %if.then490
  %308 = load ptr, ptr %306, align 8, !dbg !4218
  %ptrbool = icmp ne ptr %308, null, !dbg !4218
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs, !dbg !4218

cond.lhs:                                         ; preds = %checkok494
  %309 = load ptr, ptr %arg, align 8, !dbg !4220
  %checknull495 = icmp eq ptr %309, null, !dbg !4220
  %310 = call i1 @llvm.expect.i1(i1 %checknull495, i1 false), !dbg !4220
  br i1 %310, label %panic496, label %checkok497, !dbg !4220

checkok497:                                       ; preds = %cond.lhs
  %311 = load ptr, ptr %309, align 8, !dbg !4220
  %312 = call { ptr, i64 } @std.core.string.ZString.str_view(ptr %311), !dbg !4220
  store { ptr, i64 } %312, ptr %result498, align 8
  %313 = load %"char[]", ptr %result498, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %checkok494
  br label %cond.phi, !dbg !4221

cond.phi:                                         ; preds = %cond.rhs, %checkok497
  %val499 = phi %"char[]" [ %313, %checkok497 ], [ { ptr @.str.220, i64 6 }, %cond.rhs ], !dbg !4221
  %314 = load ptr, ptr %self, align 8
  %315 = extractvalue %"char[]" %val499, 0
  %316 = extractvalue %"char[]" %val499, 1
  %317 = call i64 @std.io.Formatter.out_substr(ptr %retparam500, ptr %314, ptr %315, i64 %316), !dbg !4222
  %not_err501 = icmp eq i64 %317, 0, !dbg !4222
  %318 = call i1 @llvm.expect.i1(i1 %not_err501, i1 true), !dbg !4222
  br i1 %318, label %after_check503, label %assign_optional502, !dbg !4222

assign_optional502:                               ; preds = %cond.phi
  store i64 %317, ptr %reterr491, align 8, !dbg !4222
  br label %err_retblock504, !dbg !4222

after_check503:                                   ; preds = %cond.phi
  %319 = load i64, ptr %retparam500, align 8, !dbg !4222
  store i64 %319, ptr %0, align 8, !dbg !4222
  ret i64 0, !dbg !4222

err_retblock504:                                  ; preds = %assign_optional502
  %320 = load i64, ptr %reterr491, align 8, !dbg !4222
  ret i64 %320, !dbg !4222

if.exit505:                                       ; preds = %if.exit487
  %ptradd506 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4223
  %321 = load i64, ptr %ptradd506, align 8, !dbg !4223
  %eq507 = icmp eq i64 %321, ptrtoint (ptr @"$ct.std.core.dstring.DString" to i64), !dbg !4223
  br i1 %eq507, label %if.then508, label %if.exit527, !dbg !4223

if.then508:                                       ; preds = %if.exit505
  %322 = load ptr, ptr %arg, align 8, !dbg !4224
  %checknull510 = icmp eq ptr %322, null, !dbg !4224
  %323 = call i1 @llvm.expect.i1(i1 %checknull510, i1 false), !dbg !4224
  br i1 %323, label %panic511, label %checkok512, !dbg !4224

checkok512:                                       ; preds = %if.then508
  %324 = load ptr, ptr %322, align 8, !dbg !4224
  %ptrbool513 = icmp ne ptr %324, null, !dbg !4224
  br i1 %ptrbool513, label %cond.lhs514, label %cond.rhs519, !dbg !4224

cond.lhs514:                                      ; preds = %checkok512
  %325 = load ptr, ptr %arg, align 8, !dbg !4226
  %checknull515 = icmp eq ptr %325, null, !dbg !4226
  %326 = call i1 @llvm.expect.i1(i1 %checknull515, i1 false), !dbg !4226
  br i1 %326, label %panic516, label %checkok517, !dbg !4226

checkok517:                                       ; preds = %cond.lhs514
  %327 = load ptr, ptr %325, align 8, !dbg !4226
  %328 = call { ptr, i64 } @std.core.dstring.DString.str_view(ptr %327), !dbg !4226
  store { ptr, i64 } %328, ptr %result518, align 8
  %329 = load %"char[]", ptr %result518, align 8
  br label %cond.phi520

cond.rhs519:                                      ; preds = %checkok512
  br label %cond.phi520, !dbg !4227

cond.phi520:                                      ; preds = %cond.rhs519, %checkok517
  %val521 = phi %"char[]" [ %329, %checkok517 ], [ { ptr @.str.223, i64 6 }, %cond.rhs519 ], !dbg !4227
  %330 = load ptr, ptr %self, align 8
  %331 = extractvalue %"char[]" %val521, 0
  %332 = extractvalue %"char[]" %val521, 1
  %333 = call i64 @std.io.Formatter.out_substr(ptr %retparam522, ptr %330, ptr %331, i64 %332), !dbg !4228
  %not_err523 = icmp eq i64 %333, 0, !dbg !4228
  %334 = call i1 @llvm.expect.i1(i1 %not_err523, i1 true), !dbg !4228
  br i1 %334, label %after_check525, label %assign_optional524, !dbg !4228

assign_optional524:                               ; preds = %cond.phi520
  store i64 %333, ptr %reterr509, align 8, !dbg !4228
  br label %err_retblock526, !dbg !4228

after_check525:                                   ; preds = %cond.phi520
  %335 = load i64, ptr %retparam522, align 8, !dbg !4228
  store i64 %335, ptr %0, align 8, !dbg !4228
  ret i64 0, !dbg !4228

err_retblock526:                                  ; preds = %assign_optional524
  %336 = load i64, ptr %reterr509, align 8, !dbg !4228
  ret i64 %336, !dbg !4228

if.exit527:                                       ; preds = %if.exit505
  store ptr %arg, ptr %self529, align 8
  %337 = load ptr, ptr %self529, align 8, !dbg !4229
  %checknull530 = icmp eq ptr %337, null, !dbg !4229
  %338 = call i1 @llvm.expect.i1(i1 %checknull530, i1 false), !dbg !4229
  br i1 %338, label %panic531, label %checkok532, !dbg !4229

checkok532:                                       ; preds = %if.exit527
  %339 = load ptr, ptr %337, align 8, !dbg !4229
  %340 = load ptr, ptr %self529, align 8, !dbg !4232
  %checknull533 = icmp eq ptr %340, null, !dbg !4232
  %341 = call i1 @llvm.expect.i1(i1 %checknull533, i1 false), !dbg !4232
  br i1 %341, label %panic534, label %checkok535, !dbg !4232

checkok535:                                       ; preds = %checkok532
  %ptradd536 = getelementptr inbounds i8, ptr %340, i64 8, !dbg !4232
  %342 = load i64, ptr %ptradd536, align 8, !dbg !4232
  %"introspect*537" = inttoptr i64 %342 to ptr, !dbg !4232
  %typeid.kind538 = load i8, ptr %"introspect*537", align 8, !dbg !4232
  %eq539 = icmp eq i8 %typeid.kind538, 15, !dbg !4232
  br i1 %eq539, label %check_type_ok555, label %check_next540, !dbg !4232

check_next540:                                    ; preds = %checkok535
  %eq541 = icmp eq i8 %typeid.kind538, 19, !dbg !4232
  br i1 %eq541, label %check_type_ok555, label %check_next542, !dbg !4232

check_next542:                                    ; preds = %check_next540
  %eq543 = icmp eq i8 %typeid.kind538, 17, !dbg !4232
  br i1 %eq543, label %check_type_ok555, label %check_next544, !dbg !4232

check_next544:                                    ; preds = %check_next542
  %eq545 = icmp eq i8 %typeid.kind538, 8, !dbg !4232
  br i1 %eq545, label %check_type_ok555, label %check_next546, !dbg !4232

check_next546:                                    ; preds = %check_next544
  %eq547 = icmp eq i8 %typeid.kind538, 16, !dbg !4232
  br i1 %eq547, label %check_type_ok555, label %check_next548, !dbg !4232

check_next548:                                    ; preds = %check_next546
  %eq549 = icmp eq i8 %typeid.kind538, 18, !dbg !4232
  br i1 %eq549, label %check_type_ok555, label %check_next550, !dbg !4232

check_next550:                                    ; preds = %check_next548
  %eq551 = icmp eq i8 %typeid.kind538, 14, !dbg !4232
  br i1 %eq551, label %check_type_ok555, label %check_next552, !dbg !4232

check_next552:                                    ; preds = %check_next550
  %eq553 = icmp eq i8 %typeid.kind538, 12, !dbg !4232
  br i1 %eq553, label %check_type_ok555, label %check_next554, !dbg !4232

check_next554:                                    ; preds = %check_next552
  %343 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4232
  call void %343(ptr @.panic_msg.120, i64 49, ptr @.file.49, i64 10, ptr @.func.195, i64 7, i32 199), !dbg !4232
  unreachable, !dbg !4232

check_type_ok555:                                 ; preds = %check_next552, %check_next550, %check_next548, %check_next546, %check_next544, %check_next542, %check_next540, %checkok535
  %ptradd556 = getelementptr inbounds i8, ptr %"introspect*537", i64 32, !dbg !4232
  %typeid.inner557 = load i64, ptr %ptradd556, align 8, !dbg !4232
  %344 = insertvalue %any undef, ptr %339, 0, !dbg !4232
  %345 = insertvalue %any %344, i64 %typeid.inner557, 1, !dbg !4232
  %346 = load ptr, ptr %self, align 8
  store %any %345, ptr %taddr559, align 8
  %lo560 = load i64, ptr %taddr559, align 8
  %ptradd561 = getelementptr inbounds i8, ptr %taddr559, i64 8
  %hi562 = load ptr, ptr %ptradd561, align 8
  %347 = call i64 @std.io.Formatter.out_str(ptr %retparam558, ptr %346, i64 %lo560, ptr %hi562), !dbg !4233
  %not_err563 = icmp eq i64 %347, 0, !dbg !4233
  %348 = call i1 @llvm.expect.i1(i1 %not_err563, i1 true), !dbg !4233
  br i1 %348, label %after_check565, label %assign_optional564, !dbg !4233

assign_optional564:                               ; preds = %check_type_ok555
  store i64 %347, ptr %reterr528, align 8, !dbg !4233
  br label %err_retblock566, !dbg !4233

after_check565:                                   ; preds = %check_type_ok555
  %349 = load i64, ptr %retparam558, align 8, !dbg !4233
  store i64 %349, ptr %0, align 8, !dbg !4233
  ret i64 0, !dbg !4233

err_retblock566:                                  ; preds = %assign_optional564
  %350 = load i64, ptr %reterr528, align 8, !dbg !4233
  ret i64 %350, !dbg !4233

switch.case567:                                   ; preds = %switch.entry128
  call void @llvm.dbg.declare(metadata ptr %inner, metadata !4234, metadata !DIExpression()), !dbg !4236
  %ptradd568 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4237
  %351 = load i64, ptr %ptradd568, align 8, !dbg !4237
  %"introspect*569" = inttoptr i64 %351 to ptr, !dbg !4237
  %typeid.kind570 = load i8, ptr %"introspect*569", align 8, !dbg !4237
  %eq571 = icmp eq i8 %typeid.kind570, 15, !dbg !4237
  br i1 %eq571, label %check_type_ok587, label %check_next572, !dbg !4237

check_next572:                                    ; preds = %switch.case567
  %eq573 = icmp eq i8 %typeid.kind570, 19, !dbg !4237
  br i1 %eq573, label %check_type_ok587, label %check_next574, !dbg !4237

check_next574:                                    ; preds = %check_next572
  %eq575 = icmp eq i8 %typeid.kind570, 17, !dbg !4237
  br i1 %eq575, label %check_type_ok587, label %check_next576, !dbg !4237

check_next576:                                    ; preds = %check_next574
  %eq577 = icmp eq i8 %typeid.kind570, 8, !dbg !4237
  br i1 %eq577, label %check_type_ok587, label %check_next578, !dbg !4237

check_next578:                                    ; preds = %check_next576
  %eq579 = icmp eq i8 %typeid.kind570, 16, !dbg !4237
  br i1 %eq579, label %check_type_ok587, label %check_next580, !dbg !4237

check_next580:                                    ; preds = %check_next578
  %eq581 = icmp eq i8 %typeid.kind570, 18, !dbg !4237
  br i1 %eq581, label %check_type_ok587, label %check_next582, !dbg !4237

check_next582:                                    ; preds = %check_next580
  %eq583 = icmp eq i8 %typeid.kind570, 14, !dbg !4237
  br i1 %eq583, label %check_type_ok587, label %check_next584, !dbg !4237

check_next584:                                    ; preds = %check_next582
  %eq585 = icmp eq i8 %typeid.kind570, 12, !dbg !4237
  br i1 %eq585, label %check_type_ok587, label %check_next586, !dbg !4237

check_next586:                                    ; preds = %check_next584
  %352 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4237
  call void %352(ptr @.panic_msg.120, i64 49, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 223), !dbg !4237
  unreachable, !dbg !4237

check_type_ok587:                                 ; preds = %check_next584, %check_next582, %check_next580, %check_next578, %check_next576, %check_next574, %check_next572, %switch.case567
  %ptradd588 = getelementptr inbounds i8, ptr %"introspect*569", i64 32, !dbg !4237
  %typeid.inner589 = load i64, ptr %ptradd588, align 8, !dbg !4237
  store i64 %typeid.inner589, ptr %inner, align 8, !dbg !4237
  call void @llvm.dbg.declare(metadata ptr %pointer, metadata !4238, metadata !DIExpression()), !dbg !4240
  %353 = load ptr, ptr %arg, align 8, !dbg !4241
  store ptr %353, ptr %pointer, align 8, !dbg !4241
  %ptradd590 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4242
  %354 = load i64, ptr %ptradd590, align 8, !dbg !4242
  %"introspect*591" = inttoptr i64 %354 to ptr, !dbg !4242
  %typeid.kind592 = load i8, ptr %"introspect*591", align 8, !dbg !4242
  %eq593 = icmp eq i8 %typeid.kind592, 15, !dbg !4242
  br i1 %eq593, label %check_type_ok609, label %check_next594, !dbg !4242

check_next594:                                    ; preds = %check_type_ok587
  %eq595 = icmp eq i8 %typeid.kind592, 19, !dbg !4242
  br i1 %eq595, label %check_type_ok609, label %check_next596, !dbg !4242

check_next596:                                    ; preds = %check_next594
  %eq597 = icmp eq i8 %typeid.kind592, 17, !dbg !4242
  br i1 %eq597, label %check_type_ok609, label %check_next598, !dbg !4242

check_next598:                                    ; preds = %check_next596
  %eq599 = icmp eq i8 %typeid.kind592, 8, !dbg !4242
  br i1 %eq599, label %check_type_ok609, label %check_next600, !dbg !4242

check_next600:                                    ; preds = %check_next598
  %eq601 = icmp eq i8 %typeid.kind592, 16, !dbg !4242
  br i1 %eq601, label %check_type_ok609, label %check_next602, !dbg !4242

check_next602:                                    ; preds = %check_next600
  %eq603 = icmp eq i8 %typeid.kind592, 18, !dbg !4242
  br i1 %eq603, label %check_type_ok609, label %check_next604, !dbg !4242

check_next604:                                    ; preds = %check_next602
  %eq605 = icmp eq i8 %typeid.kind592, 14, !dbg !4242
  br i1 %eq605, label %check_type_ok609, label %check_next606, !dbg !4242

check_next606:                                    ; preds = %check_next604
  %eq607 = icmp eq i8 %typeid.kind592, 12, !dbg !4242
  br i1 %eq607, label %check_type_ok609, label %check_next608, !dbg !4242

check_next608:                                    ; preds = %check_next606
  %355 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4242
  call void %355(ptr @.panic_msg.120, i64 49, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 225), !dbg !4242
  unreachable, !dbg !4242

check_type_ok609:                                 ; preds = %check_next606, %check_next604, %check_next602, %check_next600, %check_next598, %check_next596, %check_next594, %check_type_ok587
  %ptradd610 = getelementptr inbounds i8, ptr %"introspect*591", i64 32, !dbg !4242
  %typeid.inner611 = load i64, ptr %ptradd610, align 8, !dbg !4242
  %neq612 = icmp ne i64 %typeid.inner611, ptrtoint (ptr @"$ct.void" to i64), !dbg !4242
  br i1 %neq612, label %if.then613, label %if.exit653, !dbg !4242

if.then613:                                       ; preds = %check_type_ok609
  call void @llvm.dbg.declare(metadata ptr %deref, metadata !4243, metadata !DIExpression()), !dbg !4245
  %356 = load ptr, ptr %pointer, align 8, !dbg !4246
  %checknull614 = icmp eq ptr %356, null, !dbg !4246
  %357 = call i1 @llvm.expect.i1(i1 %checknull614, i1 false), !dbg !4246
  br i1 %357, label %panic615, label %checkok616, !dbg !4246

checkok616:                                       ; preds = %if.then613
  %358 = load ptr, ptr %356, align 8
  store ptr %358, ptr %ptr, align 8
  %359 = load i64, ptr %inner, align 8
  store i64 %359, ptr %type, align 8
  %360 = load ptr, ptr %ptr, align 8, !dbg !4247
  %361 = load i64, ptr %type, align 8, !dbg !4250
  %362 = insertvalue %any undef, ptr %360, 0, !dbg !4250
  %363 = insertvalue %any %362, i64 %361, 1, !dbg !4250
  store %any %363, ptr %deref, align 8, !dbg !4250
  %364 = load %any, ptr %deref, align 8, !dbg !4251
  %365 = load ptr, ptr %self, align 8
  store %any %364, ptr %taddr618, align 8
  %lo619 = load i64, ptr %taddr618, align 8
  %ptradd620 = getelementptr inbounds i8, ptr %taddr618, i64 8
  %hi621 = load ptr, ptr %ptradd620, align 8
  %366 = call i64 @std.io.Formatter.print_with_function(ptr %retparam617, ptr %365, i64 %lo619, ptr %hi621), !dbg !4252
  %not_err622 = icmp eq i64 %366, 0, !dbg !4252
  %367 = call i1 @llvm.expect.i1(i1 %not_err622, i1 true), !dbg !4252
  br i1 %367, label %after_check624, label %assign_optional623, !dbg !4252

assign_optional623:                               ; preds = %checkok616
  store i64 %366, ptr %n.f, align 8, !dbg !4252
  br label %after_assign625, !dbg !4252

after_check624:                                   ; preds = %checkok616
  %368 = load i64, ptr %retparam617, align 8, !dbg !4252
  store i64 %368, ptr %n, align 8, !dbg !4252
  store i64 0, ptr %n.f, align 8, !dbg !4252
  br label %after_assign625, !dbg !4252

after_assign625:                                  ; preds = %after_check624, %assign_optional623
  %load.err626 = load i64, ptr %n.f, align 8, !dbg !4253
  %result627 = icmp eq i64 %load.err626, 0, !dbg !4253
  br i1 %result627, label %if.then628, label %if.exit630, !dbg !4253

if.then628:                                       ; preds = %after_assign625
  %369 = load i64, ptr %n, align 8, !dbg !4254
  store i64 %369, ptr %0, align 8, !dbg !4254
  ret i64 0, !dbg !4254

if.exit630:                                       ; preds = %after_assign625
  call void @llvm.dbg.declare(metadata ptr %f632, metadata !4255, metadata !DIExpression()), !dbg !4257
  br label %testblock633, !dbg !4257

testblock633:                                     ; preds = %if.exit630
  %optval634 = load i64, ptr %n.f, align 8, !dbg !4259
  %not_err635 = icmp eq i64 %optval634, 0, !dbg !4259
  %370 = call i1 @llvm.expect.i1(i1 %not_err635, i1 true), !dbg !4259
  br i1 %370, label %after_check637, label %assign_optional636, !dbg !4259

assign_optional636:                               ; preds = %testblock633
  store i64 %optval634, ptr %f632, align 8, !dbg !4259
  br label %end_block638, !dbg !4259

after_check637:                                   ; preds = %testblock633
  store i64 0, ptr %f632, align 8, !dbg !4259
  br label %end_block638, !dbg !4259

end_block638:                                     ; preds = %after_check637, %assign_optional636
  %371 = load i64, ptr %f632, align 8, !dbg !4259
  %neq639 = icmp ne i64 %371, 0, !dbg !4259
  br i1 %neq639, label %if.then640, label %if.exit641, !dbg !4259

if.then640:                                       ; preds = %end_block638
  %372 = load i64, ptr %f632, align 8, !dbg !4260
  store i64 %372, ptr %blockret631, align 8, !dbg !4260
  br label %expr_block.exit642, !dbg !4260

if.exit641:                                       ; preds = %end_block638
  store i64 0, ptr %blockret631, align 8, !dbg !4261
  br label %expr_block.exit642, !dbg !4261

expr_block.exit642:                               ; preds = %if.exit641, %if.then640
  %373 = load i64, ptr %blockret631, align 8, !dbg !4261
  %neq643 = icmp ne i64 %373, ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !4258
  br i1 %neq643, label %if.then644, label %if.exit652, !dbg !4258

if.then644:                                       ; preds = %expr_block.exit642
  %optval646 = load i64, ptr %n.f, align 8, !dbg !4262
  %not_err647 = icmp eq i64 %optval646, 0, !dbg !4262
  %374 = call i1 @llvm.expect.i1(i1 %not_err647, i1 true), !dbg !4262
  br i1 %374, label %after_check649, label %assign_optional648, !dbg !4262

assign_optional648:                               ; preds = %if.then644
  store i64 %optval646, ptr %error_var645, align 8, !dbg !4262
  br label %guard_block650, !dbg !4262

after_check649:                                   ; preds = %if.then644
  br label %noerr_block651, !dbg !4262

guard_block650:                                   ; preds = %assign_optional648
  %375 = load i64, ptr %error_var645, align 8, !dbg !4262
  ret i64 %375, !dbg !4262

noerr_block651:                                   ; preds = %after_check649
  br label %if.exit652, !dbg !4262

if.exit652:                                       ; preds = %noerr_block651, %expr_block.exit642
  br label %if.exit653, !dbg !4262

if.exit653:                                       ; preds = %if.exit652, %check_type_ok609
  call void @llvm.dbg.declare(metadata ptr %flags654, metadata !4263, metadata !DIExpression()), !dbg !4264
  %376 = load ptr, ptr %self, align 8, !dbg !4265
  %ptradd655 = getelementptr inbounds i8, ptr %376, i64 16, !dbg !4265
  %377 = load i32, ptr %ptradd655, align 8, !dbg !4265
  store i32 %377, ptr %flags654, align 4, !dbg !4265
  call void @llvm.dbg.declare(metadata ptr %width656, metadata !4266, metadata !DIExpression()), !dbg !4267
  %378 = load ptr, ptr %self, align 8, !dbg !4268
  %ptradd657 = getelementptr inbounds i8, ptr %378, i64 16, !dbg !4268
  %ptradd658 = getelementptr inbounds i8, ptr %ptradd657, i64 4, !dbg !4268
  %379 = load i32, ptr %ptradd658, align 4, !dbg !4268
  store i32 %379, ptr %width656, align 4, !dbg !4268
  %380 = load ptr, ptr %self, align 8, !dbg !4269
  %ptradd659 = getelementptr inbounds i8, ptr %380, i64 16, !dbg !4269
  %ptradd660 = getelementptr inbounds i8, ptr %ptradd659, i64 4, !dbg !4269
  store i32 0, ptr %ptradd660, align 4, !dbg !4270
  %381 = load ptr, ptr %self, align 8
  %382 = call i64 @std.io.Formatter.out_substr(ptr %retparam662, ptr %381, ptr @.str.225, i64 2), !dbg !4271
  %not_err663 = icmp eq i64 %382, 0, !dbg !4271
  %383 = call i1 @llvm.expect.i1(i1 %not_err663, i1 true), !dbg !4271
  br i1 %383, label %after_check665, label %assign_optional664, !dbg !4271

assign_optional664:                               ; preds = %if.exit653
  store i64 %382, ptr %error_var661, align 8, !dbg !4271
  br label %guard_block666, !dbg !4271

after_check665:                                   ; preds = %if.exit653
  br label %noerr_block670, !dbg !4271

guard_block666:                                   ; preds = %assign_optional664
  %384 = load ptr, ptr %self, align 8, !dbg !4272
  %ptradd667 = getelementptr inbounds i8, ptr %384, i64 16, !dbg !4272
  %385 = load i32, ptr %flags654, align 4, !dbg !4274
  store i32 %385, ptr %ptradd667, align 8, !dbg !4274
  %386 = load ptr, ptr %self, align 8, !dbg !4275
  %ptradd668 = getelementptr inbounds i8, ptr %386, i64 16, !dbg !4275
  %ptradd669 = getelementptr inbounds i8, ptr %ptradd668, i64 4, !dbg !4275
  %387 = load i32, ptr %width656, align 4, !dbg !4276
  store i32 %387, ptr %ptradd669, align 4, !dbg !4276
  %388 = load i64, ptr %error_var661, align 8, !dbg !4276
  ret i64 %388, !dbg !4276

noerr_block670:                                   ; preds = %after_check665
  %389 = load ptr, ptr %self, align 8
  %lo673 = load i64, ptr %arg, align 8
  %ptradd674 = getelementptr inbounds i8, ptr %arg, i64 8
  %hi675 = load ptr, ptr %ptradd674, align 8
  %390 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam672, ptr %389, i64 %lo673, ptr %hi675, i32 16), !dbg !4277
  %not_err676 = icmp eq i64 %390, 0, !dbg !4277
  %391 = call i1 @llvm.expect.i1(i1 %not_err676, i1 true), !dbg !4277
  br i1 %391, label %after_check678, label %assign_optional677, !dbg !4277

assign_optional677:                               ; preds = %noerr_block670
  store i64 %390, ptr %reterr671, align 8, !dbg !4277
  br label %err_retblock682, !dbg !4277

after_check678:                                   ; preds = %noerr_block670
  %392 = load i64, ptr %retparam672, align 8, !dbg !4277
  %393 = load ptr, ptr %self, align 8, !dbg !4278
  %ptradd679 = getelementptr inbounds i8, ptr %393, i64 16, !dbg !4278
  %394 = load i32, ptr %flags654, align 4, !dbg !4280
  store i32 %394, ptr %ptradd679, align 8, !dbg !4280
  %395 = load ptr, ptr %self, align 8, !dbg !4281
  %ptradd680 = getelementptr inbounds i8, ptr %395, i64 16, !dbg !4281
  %ptradd681 = getelementptr inbounds i8, ptr %ptradd680, i64 4, !dbg !4281
  %396 = load i32, ptr %width656, align 4, !dbg !4282
  store i32 %396, ptr %ptradd681, align 4, !dbg !4282
  store i64 %392, ptr %0, align 8, !dbg !4282
  ret i64 0, !dbg !4282

err_retblock682:                                  ; preds = %assign_optional677
  %397 = load ptr, ptr %self, align 8, !dbg !4283
  %ptradd683 = getelementptr inbounds i8, ptr %397, i64 16, !dbg !4283
  %398 = load i32, ptr %flags654, align 4, !dbg !4285
  store i32 %398, ptr %ptradd683, align 8, !dbg !4285
  %399 = load ptr, ptr %self, align 8, !dbg !4286
  %ptradd684 = getelementptr inbounds i8, ptr %399, i64 16, !dbg !4286
  %ptradd685 = getelementptr inbounds i8, ptr %ptradd684, i64 4, !dbg !4286
  %400 = load i32, ptr %width656, align 4, !dbg !4287
  store i32 %400, ptr %ptradd685, align 4, !dbg !4287
  %401 = load i64, ptr %reterr671, align 8, !dbg !4287
  ret i64 %401, !dbg !4287

switch.case686:                                   ; preds = %switch.entry128
  call void @llvm.dbg.declare(metadata ptr %flags687, metadata !4288, metadata !DIExpression()), !dbg !4290
  %402 = load ptr, ptr %self, align 8, !dbg !4291
  %ptradd688 = getelementptr inbounds i8, ptr %402, i64 16, !dbg !4291
  %403 = load i32, ptr %ptradd688, align 8, !dbg !4291
  store i32 %403, ptr %flags687, align 4, !dbg !4291
  call void @llvm.dbg.declare(metadata ptr %width689, metadata !4292, metadata !DIExpression()), !dbg !4293
  %404 = load ptr, ptr %self, align 8, !dbg !4294
  %ptradd690 = getelementptr inbounds i8, ptr %404, i64 16, !dbg !4294
  %ptradd691 = getelementptr inbounds i8, ptr %ptradd690, i64 4, !dbg !4294
  %405 = load i32, ptr %ptradd691, align 4, !dbg !4294
  store i32 %405, ptr %width689, align 4, !dbg !4294
  %406 = load ptr, ptr %self, align 8, !dbg !4295
  %ptradd692 = getelementptr inbounds i8, ptr %406, i64 16, !dbg !4295
  store i32 0, ptr %ptradd692, align 8, !dbg !4295
  %407 = load ptr, ptr %self, align 8, !dbg !4296
  %ptradd693 = getelementptr inbounds i8, ptr %407, i64 16, !dbg !4296
  %ptradd694 = getelementptr inbounds i8, ptr %ptradd693, i64 4, !dbg !4296
  store i32 0, ptr %ptradd694, align 4, !dbg !4297
  call void @llvm.dbg.declare(metadata ptr %inner695, metadata !4298, metadata !DIExpression()), !dbg !4299
  %ptradd696 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4300
  %408 = load i64, ptr %ptradd696, align 8, !dbg !4300
  %"introspect*697" = inttoptr i64 %408 to ptr, !dbg !4300
  %typeid.kind698 = load i8, ptr %"introspect*697", align 8, !dbg !4300
  %eq699 = icmp eq i8 %typeid.kind698, 15, !dbg !4300
  br i1 %eq699, label %check_type_ok715, label %check_next700, !dbg !4300

check_next700:                                    ; preds = %switch.case686
  %eq701 = icmp eq i8 %typeid.kind698, 19, !dbg !4300
  br i1 %eq701, label %check_type_ok715, label %check_next702, !dbg !4300

check_next702:                                    ; preds = %check_next700
  %eq703 = icmp eq i8 %typeid.kind698, 17, !dbg !4300
  br i1 %eq703, label %check_type_ok715, label %check_next704, !dbg !4300

check_next704:                                    ; preds = %check_next702
  %eq705 = icmp eq i8 %typeid.kind698, 8, !dbg !4300
  br i1 %eq705, label %check_type_ok715, label %check_next706, !dbg !4300

check_next706:                                    ; preds = %check_next704
  %eq707 = icmp eq i8 %typeid.kind698, 16, !dbg !4300
  br i1 %eq707, label %check_type_ok715, label %check_next708, !dbg !4300

check_next708:                                    ; preds = %check_next706
  %eq709 = icmp eq i8 %typeid.kind698, 18, !dbg !4300
  br i1 %eq709, label %check_type_ok715, label %check_next710, !dbg !4300

check_next710:                                    ; preds = %check_next708
  %eq711 = icmp eq i8 %typeid.kind698, 14, !dbg !4300
  br i1 %eq711, label %check_type_ok715, label %check_next712, !dbg !4300

check_next712:                                    ; preds = %check_next710
  %eq713 = icmp eq i8 %typeid.kind698, 12, !dbg !4300
  br i1 %eq713, label %check_type_ok715, label %check_next714, !dbg !4300

check_next714:                                    ; preds = %check_next712
  %409 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4300
  call void %409(ptr @.panic_msg.120, i64 49, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 253), !dbg !4300
  unreachable, !dbg !4300

check_type_ok715:                                 ; preds = %check_next712, %check_next710, %check_next708, %check_next706, %check_next704, %check_next702, %check_next700, %switch.case686
  %ptradd716 = getelementptr inbounds i8, ptr %"introspect*697", i64 32, !dbg !4300
  %typeid.inner717 = load i64, ptr %ptradd716, align 8, !dbg !4300
  store i64 %typeid.inner717, ptr %inner695, align 8, !dbg !4300
  call void @llvm.dbg.declare(metadata ptr %size, metadata !4301, metadata !DIExpression()), !dbg !4302
  %410 = load i64, ptr %inner695, align 8, !dbg !4303
  %"introspect*718" = inttoptr i64 %410 to ptr, !dbg !4303
  %typeid.kind719 = load i8, ptr %"introspect*718", align 8, !dbg !4303
  %ptradd720 = getelementptr inbounds i8, ptr %"introspect*718", i64 24, !dbg !4303
  %typeid.size = load i64, ptr %ptradd720, align 8, !dbg !4303
  store i64 %typeid.size, ptr %size, align 8, !dbg !4303
  call void @llvm.dbg.declare(metadata ptr %alen, metadata !4304, metadata !DIExpression()), !dbg !4305
  %ptradd721 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4306
  %411 = load i64, ptr %ptradd721, align 8, !dbg !4306
  %"introspect*722" = inttoptr i64 %411 to ptr, !dbg !4306
  %typeid.kind723 = load i8, ptr %"introspect*722", align 8, !dbg !4306
  %eq724 = icmp eq i8 %typeid.kind723, 15, !dbg !4306
  br i1 %eq724, label %check_type_ok732, label %check_next725, !dbg !4306

check_next725:                                    ; preds = %check_type_ok715
  %eq726 = icmp eq i8 %typeid.kind723, 17, !dbg !4306
  br i1 %eq726, label %check_type_ok732, label %check_next727, !dbg !4306

check_next727:                                    ; preds = %check_next725
  %eq728 = icmp eq i8 %typeid.kind723, 8, !dbg !4306
  br i1 %eq728, label %check_type_ok732, label %check_next729, !dbg !4306

check_next729:                                    ; preds = %check_next727
  %eq730 = icmp eq i8 %typeid.kind723, 16, !dbg !4306
  br i1 %eq730, label %check_type_ok732, label %check_next731, !dbg !4306

check_next731:                                    ; preds = %check_next729
  %412 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4306
  call void %412(ptr @.panic_msg.226, i64 43, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 255), !dbg !4306
  unreachable, !dbg !4306

check_type_ok732:                                 ; preds = %check_next729, %check_next727, %check_next725, %check_type_ok715
  %ptradd733 = getelementptr inbounds i8, ptr %"introspect*722", i64 40, !dbg !4306
  %typeid.len = load i64, ptr %ptradd733, align 8, !dbg !4306
  store i64 %typeid.len, ptr %alen, align 8, !dbg !4306
  call void @llvm.dbg.declare(metadata ptr %ptr734, metadata !4307, metadata !DIExpression()), !dbg !4308
  %413 = load ptr, ptr %arg, align 8, !dbg !4309
  store ptr %413, ptr %ptr734, align 8, !dbg !4309
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4310, metadata !DIExpression()), !dbg !4311
  %414 = load ptr, ptr %self, align 8
  %415 = call i64 @std.io.Formatter.out(ptr %retparam736, ptr %414, i8 zeroext 91), !dbg !4312
  %not_err737 = icmp eq i64 %415, 0, !dbg !4312
  %416 = call i1 @llvm.expect.i1(i1 %not_err737, i1 true), !dbg !4312
  br i1 %416, label %after_check739, label %assign_optional738, !dbg !4312

assign_optional738:                               ; preds = %check_type_ok732
  store i64 %415, ptr %error_var735, align 8, !dbg !4312
  br label %guard_block740, !dbg !4312

after_check739:                                   ; preds = %check_type_ok732
  br label %noerr_block744, !dbg !4312

guard_block740:                                   ; preds = %assign_optional738
  %417 = load ptr, ptr %self, align 8, !dbg !4313
  %ptradd741 = getelementptr inbounds i8, ptr %417, i64 16, !dbg !4313
  %418 = load i32, ptr %flags687, align 4, !dbg !4315
  store i32 %418, ptr %ptradd741, align 8, !dbg !4315
  %419 = load ptr, ptr %self, align 8, !dbg !4316
  %ptradd742 = getelementptr inbounds i8, ptr %419, i64 16, !dbg !4316
  %ptradd743 = getelementptr inbounds i8, ptr %ptradd742, i64 4, !dbg !4316
  %420 = load i32, ptr %width689, align 4, !dbg !4317
  store i32 %420, ptr %ptradd743, align 4, !dbg !4317
  %421 = load i64, ptr %error_var735, align 8, !dbg !4317
  ret i64 %421, !dbg !4317

noerr_block744:                                   ; preds = %after_check739
  %422 = load i64, ptr %retparam736, align 8, !dbg !4317
  store i64 %422, ptr %len, align 8, !dbg !4317
  call void @llvm.dbg.declare(metadata ptr %i745, metadata !4318, metadata !DIExpression()), !dbg !4320
  store i64 0, ptr %i745, align 8, !dbg !4321
  br label %loop.cond, !dbg !4321

loop.cond:                                        ; preds = %noerr_block775, %noerr_block744
  %423 = load i64, ptr %i745, align 8, !dbg !4322
  %424 = load i64, ptr %alen, align 8, !dbg !4323
  %lt746 = icmp ult i64 %423, %424, !dbg !4322
  br i1 %lt746, label %loop.body, label %loop.exit, !dbg !4322

loop.body:                                        ; preds = %loop.cond
  %425 = load i64, ptr %i745, align 8, !dbg !4324
  %neq747 = icmp ne i64 0, %425, !dbg !4324
  br i1 %neq747, label %if.then748, label %if.exit759, !dbg !4324

if.then748:                                       ; preds = %loop.body
  %426 = load i64, ptr %len, align 8, !dbg !4326
  %427 = load ptr, ptr %self, align 8
  %428 = call i64 @std.io.Formatter.out_substr(ptr %retparam750, ptr %427, ptr @.str.227, i64 2), !dbg !4327
  %not_err751 = icmp eq i64 %428, 0, !dbg !4327
  %429 = call i1 @llvm.expect.i1(i1 %not_err751, i1 true), !dbg !4327
  br i1 %429, label %after_check753, label %assign_optional752, !dbg !4327

assign_optional752:                               ; preds = %if.then748
  store i64 %428, ptr %error_var749, align 8, !dbg !4327
  br label %guard_block754, !dbg !4327

after_check753:                                   ; preds = %if.then748
  br label %noerr_block758, !dbg !4327

guard_block754:                                   ; preds = %assign_optional752
  %430 = load ptr, ptr %self, align 8, !dbg !4328
  %ptradd755 = getelementptr inbounds i8, ptr %430, i64 16, !dbg !4328
  %431 = load i32, ptr %flags687, align 4, !dbg !4330
  store i32 %431, ptr %ptradd755, align 8, !dbg !4330
  %432 = load ptr, ptr %self, align 8, !dbg !4331
  %ptradd756 = getelementptr inbounds i8, ptr %432, i64 16, !dbg !4331
  %ptradd757 = getelementptr inbounds i8, ptr %ptradd756, i64 4, !dbg !4331
  %433 = load i32, ptr %width689, align 4, !dbg !4332
  store i32 %433, ptr %ptradd757, align 4, !dbg !4332
  %434 = load i64, ptr %error_var749, align 8, !dbg !4332
  ret i64 %434, !dbg !4332

noerr_block758:                                   ; preds = %after_check753
  %435 = load i64, ptr %retparam750, align 8, !dbg !4332
  %add = add i64 %426, %435, !dbg !4326
  store i64 %add, ptr %len, align 8, !dbg !4326
  br label %if.exit759, !dbg !4326

if.exit759:                                       ; preds = %noerr_block758, %loop.body
  %436 = load i64, ptr %len, align 8, !dbg !4333
  %437 = load ptr, ptr %ptr734, align 8
  store ptr %437, ptr %ptr761, align 8
  %438 = load i64, ptr %inner695, align 8
  store i64 %438, ptr %type762, align 8
  %439 = load ptr, ptr %ptr761, align 8, !dbg !4334
  %440 = load i64, ptr %type762, align 8, !dbg !4337
  %441 = insertvalue %any undef, ptr %439, 0, !dbg !4337
  %442 = insertvalue %any %441, i64 %440, 1, !dbg !4337
  %443 = load ptr, ptr %self, align 8
  store %any %442, ptr %taddr764, align 8
  %lo765 = load i64, ptr %taddr764, align 8
  %ptradd766 = getelementptr inbounds i8, ptr %taddr764, i64 8
  %hi767 = load ptr, ptr %ptradd766, align 8
  %444 = call i64 @std.io.Formatter.out_str(ptr %retparam763, ptr %443, i64 %lo765, ptr %hi767), !dbg !4338
  %not_err768 = icmp eq i64 %444, 0, !dbg !4338
  %445 = call i1 @llvm.expect.i1(i1 %not_err768, i1 true), !dbg !4338
  br i1 %445, label %after_check770, label %assign_optional769, !dbg !4338

assign_optional769:                               ; preds = %if.exit759
  store i64 %444, ptr %error_var760, align 8, !dbg !4338
  br label %guard_block771, !dbg !4338

after_check770:                                   ; preds = %if.exit759
  br label %noerr_block775, !dbg !4338

guard_block771:                                   ; preds = %assign_optional769
  %446 = load ptr, ptr %self, align 8, !dbg !4339
  %ptradd772 = getelementptr inbounds i8, ptr %446, i64 16, !dbg !4339
  %447 = load i32, ptr %flags687, align 4, !dbg !4341
  store i32 %447, ptr %ptradd772, align 8, !dbg !4341
  %448 = load ptr, ptr %self, align 8, !dbg !4342
  %ptradd773 = getelementptr inbounds i8, ptr %448, i64 16, !dbg !4342
  %ptradd774 = getelementptr inbounds i8, ptr %ptradd773, i64 4, !dbg !4342
  %449 = load i32, ptr %width689, align 4, !dbg !4343
  store i32 %449, ptr %ptradd774, align 4, !dbg !4343
  %450 = load i64, ptr %error_var760, align 8, !dbg !4343
  ret i64 %450, !dbg !4343

noerr_block775:                                   ; preds = %after_check770
  %451 = load i64, ptr %retparam763, align 8, !dbg !4343
  %add776 = add i64 %436, %451, !dbg !4333
  store i64 %add776, ptr %len, align 8, !dbg !4333
  %452 = load ptr, ptr %ptr734, align 8, !dbg !4344
  %453 = load i64, ptr %size, align 8, !dbg !4345
  %ptradd_any = getelementptr i8, ptr %452, i64 %453, !dbg !4344
  store ptr %ptradd_any, ptr %ptr734, align 8, !dbg !4344
  %454 = load i64, ptr %i745, align 8, !dbg !4346
  %add777 = add i64 %454, 1, !dbg !4346
  store i64 %add777, ptr %i745, align 8, !dbg !4346
  br label %loop.cond, !dbg !4346

loop.exit:                                        ; preds = %loop.cond
  %455 = load i64, ptr %len, align 8, !dbg !4347
  %456 = load ptr, ptr %self, align 8
  %457 = call i64 @std.io.Formatter.out(ptr %retparam779, ptr %456, i8 zeroext 93), !dbg !4348
  %not_err780 = icmp eq i64 %457, 0, !dbg !4348
  %458 = call i1 @llvm.expect.i1(i1 %not_err780, i1 true), !dbg !4348
  br i1 %458, label %after_check782, label %assign_optional781, !dbg !4348

assign_optional781:                               ; preds = %loop.exit
  store i64 %457, ptr %error_var778, align 8, !dbg !4348
  br label %guard_block783, !dbg !4348

after_check782:                                   ; preds = %loop.exit
  br label %noerr_block787, !dbg !4348

guard_block783:                                   ; preds = %assign_optional781
  %459 = load ptr, ptr %self, align 8, !dbg !4349
  %ptradd784 = getelementptr inbounds i8, ptr %459, i64 16, !dbg !4349
  %460 = load i32, ptr %flags687, align 4, !dbg !4351
  store i32 %460, ptr %ptradd784, align 8, !dbg !4351
  %461 = load ptr, ptr %self, align 8, !dbg !4352
  %ptradd785 = getelementptr inbounds i8, ptr %461, i64 16, !dbg !4352
  %ptradd786 = getelementptr inbounds i8, ptr %ptradd785, i64 4, !dbg !4352
  %462 = load i32, ptr %width689, align 4, !dbg !4353
  store i32 %462, ptr %ptradd786, align 4, !dbg !4353
  %463 = load i64, ptr %error_var778, align 8, !dbg !4353
  ret i64 %463, !dbg !4353

noerr_block787:                                   ; preds = %after_check782
  %464 = load i64, ptr %retparam779, align 8, !dbg !4353
  %add788 = add i64 %455, %464, !dbg !4347
  store i64 %add788, ptr %len, align 8, !dbg !4347
  %465 = load i64, ptr %len, align 8, !dbg !4354
  %466 = load ptr, ptr %self, align 8, !dbg !4355
  %ptradd790 = getelementptr inbounds i8, ptr %466, i64 16, !dbg !4355
  %467 = load i32, ptr %flags687, align 4, !dbg !4357
  store i32 %467, ptr %ptradd790, align 8, !dbg !4357
  %468 = load ptr, ptr %self, align 8, !dbg !4358
  %ptradd791 = getelementptr inbounds i8, ptr %468, i64 16, !dbg !4358
  %ptradd792 = getelementptr inbounds i8, ptr %ptradd791, i64 4, !dbg !4358
  %469 = load i32, ptr %width689, align 4, !dbg !4359
  store i32 %469, ptr %ptradd792, align 4, !dbg !4359
  store i64 %465, ptr %0, align 8, !dbg !4359
  ret i64 0, !dbg !4359

switch.case793:                                   ; preds = %switch.entry128
  call void @llvm.dbg.declare(metadata ptr %flags794, metadata !4360, metadata !DIExpression()), !dbg !4362
  %470 = load ptr, ptr %self, align 8, !dbg !4363
  %ptradd795 = getelementptr inbounds i8, ptr %470, i64 16, !dbg !4363
  %471 = load i32, ptr %ptradd795, align 8, !dbg !4363
  store i32 %471, ptr %flags794, align 4, !dbg !4363
  call void @llvm.dbg.declare(metadata ptr %width796, metadata !4364, metadata !DIExpression()), !dbg !4365
  %472 = load ptr, ptr %self, align 8, !dbg !4366
  %ptradd797 = getelementptr inbounds i8, ptr %472, i64 16, !dbg !4366
  %ptradd798 = getelementptr inbounds i8, ptr %ptradd797, i64 4, !dbg !4366
  %473 = load i32, ptr %ptradd798, align 4, !dbg !4366
  store i32 %473, ptr %width796, align 4, !dbg !4366
  %474 = load ptr, ptr %self, align 8, !dbg !4367
  %ptradd799 = getelementptr inbounds i8, ptr %474, i64 16, !dbg !4367
  store i32 0, ptr %ptradd799, align 8, !dbg !4367
  %475 = load ptr, ptr %self, align 8, !dbg !4368
  %ptradd800 = getelementptr inbounds i8, ptr %475, i64 16, !dbg !4368
  %ptradd801 = getelementptr inbounds i8, ptr %ptradd800, i64 4, !dbg !4368
  store i32 0, ptr %ptradd801, align 4, !dbg !4369
  call void @llvm.dbg.declare(metadata ptr %inner802, metadata !4370, metadata !DIExpression()), !dbg !4371
  %ptradd803 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4372
  %476 = load i64, ptr %ptradd803, align 8, !dbg !4372
  %"introspect*804" = inttoptr i64 %476 to ptr, !dbg !4372
  %typeid.kind805 = load i8, ptr %"introspect*804", align 8, !dbg !4372
  %eq806 = icmp eq i8 %typeid.kind805, 15, !dbg !4372
  br i1 %eq806, label %check_type_ok822, label %check_next807, !dbg !4372

check_next807:                                    ; preds = %switch.case793
  %eq808 = icmp eq i8 %typeid.kind805, 19, !dbg !4372
  br i1 %eq808, label %check_type_ok822, label %check_next809, !dbg !4372

check_next809:                                    ; preds = %check_next807
  %eq810 = icmp eq i8 %typeid.kind805, 17, !dbg !4372
  br i1 %eq810, label %check_type_ok822, label %check_next811, !dbg !4372

check_next811:                                    ; preds = %check_next809
  %eq812 = icmp eq i8 %typeid.kind805, 8, !dbg !4372
  br i1 %eq812, label %check_type_ok822, label %check_next813, !dbg !4372

check_next813:                                    ; preds = %check_next811
  %eq814 = icmp eq i8 %typeid.kind805, 16, !dbg !4372
  br i1 %eq814, label %check_type_ok822, label %check_next815, !dbg !4372

check_next815:                                    ; preds = %check_next813
  %eq816 = icmp eq i8 %typeid.kind805, 18, !dbg !4372
  br i1 %eq816, label %check_type_ok822, label %check_next817, !dbg !4372

check_next817:                                    ; preds = %check_next815
  %eq818 = icmp eq i8 %typeid.kind805, 14, !dbg !4372
  br i1 %eq818, label %check_type_ok822, label %check_next819, !dbg !4372

check_next819:                                    ; preds = %check_next817
  %eq820 = icmp eq i8 %typeid.kind805, 12, !dbg !4372
  br i1 %eq820, label %check_type_ok822, label %check_next821, !dbg !4372

check_next821:                                    ; preds = %check_next819
  %477 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4372
  call void %477(ptr @.panic_msg.120, i64 49, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 278), !dbg !4372
  unreachable, !dbg !4372

check_type_ok822:                                 ; preds = %check_next819, %check_next817, %check_next815, %check_next813, %check_next811, %check_next809, %check_next807, %switch.case793
  %ptradd823 = getelementptr inbounds i8, ptr %"introspect*804", i64 32, !dbg !4372
  %typeid.inner824 = load i64, ptr %ptradd823, align 8, !dbg !4372
  store i64 %typeid.inner824, ptr %inner802, align 8, !dbg !4372
  call void @llvm.dbg.declare(metadata ptr %size825, metadata !4373, metadata !DIExpression()), !dbg !4374
  %478 = load i64, ptr %inner802, align 8, !dbg !4375
  %"introspect*826" = inttoptr i64 %478 to ptr, !dbg !4375
  %typeid.kind827 = load i8, ptr %"introspect*826", align 8, !dbg !4375
  %ptradd828 = getelementptr inbounds i8, ptr %"introspect*826", i64 24, !dbg !4375
  %typeid.size829 = load i64, ptr %ptradd828, align 8, !dbg !4375
  store i64 %typeid.size829, ptr %size825, align 8, !dbg !4375
  call void @llvm.dbg.declare(metadata ptr %vlen, metadata !4376, metadata !DIExpression()), !dbg !4377
  %ptradd830 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4378
  %479 = load i64, ptr %ptradd830, align 8, !dbg !4378
  %"introspect*831" = inttoptr i64 %479 to ptr, !dbg !4378
  %typeid.kind832 = load i8, ptr %"introspect*831", align 8, !dbg !4378
  %eq833 = icmp eq i8 %typeid.kind832, 15, !dbg !4378
  br i1 %eq833, label %check_type_ok841, label %check_next834, !dbg !4378

check_next834:                                    ; preds = %check_type_ok822
  %eq835 = icmp eq i8 %typeid.kind832, 17, !dbg !4378
  br i1 %eq835, label %check_type_ok841, label %check_next836, !dbg !4378

check_next836:                                    ; preds = %check_next834
  %eq837 = icmp eq i8 %typeid.kind832, 8, !dbg !4378
  br i1 %eq837, label %check_type_ok841, label %check_next838, !dbg !4378

check_next838:                                    ; preds = %check_next836
  %eq839 = icmp eq i8 %typeid.kind832, 16, !dbg !4378
  br i1 %eq839, label %check_type_ok841, label %check_next840, !dbg !4378

check_next840:                                    ; preds = %check_next838
  %480 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4378
  call void %480(ptr @.panic_msg.226, i64 43, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 280), !dbg !4378
  unreachable, !dbg !4378

check_type_ok841:                                 ; preds = %check_next838, %check_next836, %check_next834, %check_type_ok822
  %ptradd842 = getelementptr inbounds i8, ptr %"introspect*831", i64 40, !dbg !4378
  %typeid.len843 = load i64, ptr %ptradd842, align 8, !dbg !4378
  store i64 %typeid.len843, ptr %vlen, align 8, !dbg !4378
  call void @llvm.dbg.declare(metadata ptr %ptr844, metadata !4379, metadata !DIExpression()), !dbg !4380
  %481 = load ptr, ptr %arg, align 8, !dbg !4381
  store ptr %481, ptr %ptr844, align 8, !dbg !4381
  call void @llvm.dbg.declare(metadata ptr %len845, metadata !4382, metadata !DIExpression()), !dbg !4383
  %482 = load ptr, ptr %self, align 8
  %483 = call i64 @std.io.Formatter.out_substr(ptr %retparam847, ptr %482, ptr @.str.228, i64 2), !dbg !4384
  %not_err848 = icmp eq i64 %483, 0, !dbg !4384
  %484 = call i1 @llvm.expect.i1(i1 %not_err848, i1 true), !dbg !4384
  br i1 %484, label %after_check850, label %assign_optional849, !dbg !4384

assign_optional849:                               ; preds = %check_type_ok841
  store i64 %483, ptr %error_var846, align 8, !dbg !4384
  br label %guard_block851, !dbg !4384

after_check850:                                   ; preds = %check_type_ok841
  br label %noerr_block855, !dbg !4384

guard_block851:                                   ; preds = %assign_optional849
  %485 = load ptr, ptr %self, align 8, !dbg !4385
  %ptradd852 = getelementptr inbounds i8, ptr %485, i64 16, !dbg !4385
  %486 = load i32, ptr %flags794, align 4, !dbg !4387
  store i32 %486, ptr %ptradd852, align 8, !dbg !4387
  %487 = load ptr, ptr %self, align 8, !dbg !4388
  %ptradd853 = getelementptr inbounds i8, ptr %487, i64 16, !dbg !4388
  %ptradd854 = getelementptr inbounds i8, ptr %ptradd853, i64 4, !dbg !4388
  %488 = load i32, ptr %width796, align 4, !dbg !4389
  store i32 %488, ptr %ptradd854, align 4, !dbg !4389
  %489 = load i64, ptr %error_var846, align 8, !dbg !4389
  ret i64 %489, !dbg !4389

noerr_block855:                                   ; preds = %after_check850
  %490 = load i64, ptr %retparam847, align 8, !dbg !4389
  store i64 %490, ptr %len845, align 8, !dbg !4389
  call void @llvm.dbg.declare(metadata ptr %i856, metadata !4390, metadata !DIExpression()), !dbg !4392
  store i64 0, ptr %i856, align 8, !dbg !4393
  br label %loop.cond857, !dbg !4393

loop.cond857:                                     ; preds = %noerr_block889, %noerr_block855
  %491 = load i64, ptr %i856, align 8, !dbg !4394
  %492 = load i64, ptr %vlen, align 8, !dbg !4395
  %lt858 = icmp ult i64 %491, %492, !dbg !4394
  br i1 %lt858, label %loop.body859, label %loop.exit893, !dbg !4394

loop.body859:                                     ; preds = %loop.cond857
  %493 = load i64, ptr %i856, align 8, !dbg !4396
  %neq860 = icmp ne i64 0, %493, !dbg !4396
  br i1 %neq860, label %if.then861, label %if.exit873, !dbg !4396

if.then861:                                       ; preds = %loop.body859
  %494 = load i64, ptr %len845, align 8, !dbg !4398
  %495 = load ptr, ptr %self, align 8
  %496 = call i64 @std.io.Formatter.out_substr(ptr %retparam863, ptr %495, ptr @.str.229, i64 2), !dbg !4399
  %not_err864 = icmp eq i64 %496, 0, !dbg !4399
  %497 = call i1 @llvm.expect.i1(i1 %not_err864, i1 true), !dbg !4399
  br i1 %497, label %after_check866, label %assign_optional865, !dbg !4399

assign_optional865:                               ; preds = %if.then861
  store i64 %496, ptr %error_var862, align 8, !dbg !4399
  br label %guard_block867, !dbg !4399

after_check866:                                   ; preds = %if.then861
  br label %noerr_block871, !dbg !4399

guard_block867:                                   ; preds = %assign_optional865
  %498 = load ptr, ptr %self, align 8, !dbg !4400
  %ptradd868 = getelementptr inbounds i8, ptr %498, i64 16, !dbg !4400
  %499 = load i32, ptr %flags794, align 4, !dbg !4402
  store i32 %499, ptr %ptradd868, align 8, !dbg !4402
  %500 = load ptr, ptr %self, align 8, !dbg !4403
  %ptradd869 = getelementptr inbounds i8, ptr %500, i64 16, !dbg !4403
  %ptradd870 = getelementptr inbounds i8, ptr %ptradd869, i64 4, !dbg !4403
  %501 = load i32, ptr %width796, align 4, !dbg !4404
  store i32 %501, ptr %ptradd870, align 4, !dbg !4404
  %502 = load i64, ptr %error_var862, align 8, !dbg !4404
  ret i64 %502, !dbg !4404

noerr_block871:                                   ; preds = %after_check866
  %503 = load i64, ptr %retparam863, align 8, !dbg !4404
  %add872 = add i64 %494, %503, !dbg !4398
  store i64 %add872, ptr %len845, align 8, !dbg !4398
  br label %if.exit873, !dbg !4398

if.exit873:                                       ; preds = %noerr_block871, %loop.body859
  %504 = load i64, ptr %len845, align 8, !dbg !4405
  %505 = load ptr, ptr %ptr844, align 8
  store ptr %505, ptr %ptr875, align 8
  %506 = load i64, ptr %inner802, align 8
  store i64 %506, ptr %type876, align 8
  %507 = load ptr, ptr %ptr875, align 8, !dbg !4406
  %508 = load i64, ptr %type876, align 8, !dbg !4409
  %509 = insertvalue %any undef, ptr %507, 0, !dbg !4409
  %510 = insertvalue %any %509, i64 %508, 1, !dbg !4409
  %511 = load ptr, ptr %self, align 8
  store %any %510, ptr %taddr878, align 8
  %lo879 = load i64, ptr %taddr878, align 8
  %ptradd880 = getelementptr inbounds i8, ptr %taddr878, i64 8
  %hi881 = load ptr, ptr %ptradd880, align 8
  %512 = call i64 @std.io.Formatter.out_str(ptr %retparam877, ptr %511, i64 %lo879, ptr %hi881), !dbg !4410
  %not_err882 = icmp eq i64 %512, 0, !dbg !4410
  %513 = call i1 @llvm.expect.i1(i1 %not_err882, i1 true), !dbg !4410
  br i1 %513, label %after_check884, label %assign_optional883, !dbg !4410

assign_optional883:                               ; preds = %if.exit873
  store i64 %512, ptr %error_var874, align 8, !dbg !4410
  br label %guard_block885, !dbg !4410

after_check884:                                   ; preds = %if.exit873
  br label %noerr_block889, !dbg !4410

guard_block885:                                   ; preds = %assign_optional883
  %514 = load ptr, ptr %self, align 8, !dbg !4411
  %ptradd886 = getelementptr inbounds i8, ptr %514, i64 16, !dbg !4411
  %515 = load i32, ptr %flags794, align 4, !dbg !4413
  store i32 %515, ptr %ptradd886, align 8, !dbg !4413
  %516 = load ptr, ptr %self, align 8, !dbg !4414
  %ptradd887 = getelementptr inbounds i8, ptr %516, i64 16, !dbg !4414
  %ptradd888 = getelementptr inbounds i8, ptr %ptradd887, i64 4, !dbg !4414
  %517 = load i32, ptr %width796, align 4, !dbg !4415
  store i32 %517, ptr %ptradd888, align 4, !dbg !4415
  %518 = load i64, ptr %error_var874, align 8, !dbg !4415
  ret i64 %518, !dbg !4415

noerr_block889:                                   ; preds = %after_check884
  %519 = load i64, ptr %retparam877, align 8, !dbg !4415
  %add890 = add i64 %504, %519, !dbg !4405
  store i64 %add890, ptr %len845, align 8, !dbg !4405
  %520 = load ptr, ptr %ptr844, align 8, !dbg !4416
  %521 = load i64, ptr %size825, align 8, !dbg !4417
  %ptradd_any891 = getelementptr i8, ptr %520, i64 %521, !dbg !4416
  store ptr %ptradd_any891, ptr %ptr844, align 8, !dbg !4416
  %522 = load i64, ptr %i856, align 8, !dbg !4418
  %add892 = add i64 %522, 1, !dbg !4418
  store i64 %add892, ptr %i856, align 8, !dbg !4418
  br label %loop.cond857, !dbg !4418

loop.exit893:                                     ; preds = %loop.cond857
  %523 = load i64, ptr %len845, align 8, !dbg !4419
  %524 = load ptr, ptr %self, align 8
  %525 = call i64 @std.io.Formatter.out_substr(ptr %retparam895, ptr %524, ptr @.str.230, i64 2), !dbg !4420
  %not_err896 = icmp eq i64 %525, 0, !dbg !4420
  %526 = call i1 @llvm.expect.i1(i1 %not_err896, i1 true), !dbg !4420
  br i1 %526, label %after_check898, label %assign_optional897, !dbg !4420

assign_optional897:                               ; preds = %loop.exit893
  store i64 %525, ptr %error_var894, align 8, !dbg !4420
  br label %guard_block899, !dbg !4420

after_check898:                                   ; preds = %loop.exit893
  br label %noerr_block903, !dbg !4420

guard_block899:                                   ; preds = %assign_optional897
  %527 = load ptr, ptr %self, align 8, !dbg !4421
  %ptradd900 = getelementptr inbounds i8, ptr %527, i64 16, !dbg !4421
  %528 = load i32, ptr %flags794, align 4, !dbg !4423
  store i32 %528, ptr %ptradd900, align 8, !dbg !4423
  %529 = load ptr, ptr %self, align 8, !dbg !4424
  %ptradd901 = getelementptr inbounds i8, ptr %529, i64 16, !dbg !4424
  %ptradd902 = getelementptr inbounds i8, ptr %ptradd901, i64 4, !dbg !4424
  %530 = load i32, ptr %width796, align 4, !dbg !4425
  store i32 %530, ptr %ptradd902, align 4, !dbg !4425
  %531 = load i64, ptr %error_var894, align 8, !dbg !4425
  ret i64 %531, !dbg !4425

noerr_block903:                                   ; preds = %after_check898
  %532 = load i64, ptr %retparam895, align 8, !dbg !4425
  %add904 = add i64 %523, %532, !dbg !4419
  store i64 %add904, ptr %len845, align 8, !dbg !4419
  %533 = load i64, ptr %len845, align 8, !dbg !4426
  %534 = load ptr, ptr %self, align 8, !dbg !4427
  %ptradd906 = getelementptr inbounds i8, ptr %534, i64 16, !dbg !4427
  %535 = load i32, ptr %flags794, align 4, !dbg !4429
  store i32 %535, ptr %ptradd906, align 8, !dbg !4429
  %536 = load ptr, ptr %self, align 8, !dbg !4430
  %ptradd907 = getelementptr inbounds i8, ptr %536, i64 16, !dbg !4430
  %ptradd908 = getelementptr inbounds i8, ptr %ptradd907, i64 4, !dbg !4430
  %537 = load i32, ptr %width796, align 4, !dbg !4431
  store i32 %537, ptr %ptradd908, align 4, !dbg !4431
  store i64 %533, ptr %0, align 8, !dbg !4431
  ret i64 0, !dbg !4431

switch.case909:                                   ; preds = %switch.entry128
  call void @llvm.dbg.declare(metadata ptr %inner910, metadata !4432, metadata !DIExpression()), !dbg !4434
  %ptradd911 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4435
  %538 = load i64, ptr %ptradd911, align 8, !dbg !4435
  %"introspect*912" = inttoptr i64 %538 to ptr, !dbg !4435
  %typeid.kind913 = load i8, ptr %"introspect*912", align 8, !dbg !4435
  %eq914 = icmp eq i8 %typeid.kind913, 15, !dbg !4435
  br i1 %eq914, label %check_type_ok930, label %check_next915, !dbg !4435

check_next915:                                    ; preds = %switch.case909
  %eq916 = icmp eq i8 %typeid.kind913, 19, !dbg !4435
  br i1 %eq916, label %check_type_ok930, label %check_next917, !dbg !4435

check_next917:                                    ; preds = %check_next915
  %eq918 = icmp eq i8 %typeid.kind913, 17, !dbg !4435
  br i1 %eq918, label %check_type_ok930, label %check_next919, !dbg !4435

check_next919:                                    ; preds = %check_next917
  %eq920 = icmp eq i8 %typeid.kind913, 8, !dbg !4435
  br i1 %eq920, label %check_type_ok930, label %check_next921, !dbg !4435

check_next921:                                    ; preds = %check_next919
  %eq922 = icmp eq i8 %typeid.kind913, 16, !dbg !4435
  br i1 %eq922, label %check_type_ok930, label %check_next923, !dbg !4435

check_next923:                                    ; preds = %check_next921
  %eq924 = icmp eq i8 %typeid.kind913, 18, !dbg !4435
  br i1 %eq924, label %check_type_ok930, label %check_next925, !dbg !4435

check_next925:                                    ; preds = %check_next923
  %eq926 = icmp eq i8 %typeid.kind913, 14, !dbg !4435
  br i1 %eq926, label %check_type_ok930, label %check_next927, !dbg !4435

check_next927:                                    ; preds = %check_next925
  %eq928 = icmp eq i8 %typeid.kind913, 12, !dbg !4435
  br i1 %eq928, label %check_type_ok930, label %check_next929, !dbg !4435

check_next929:                                    ; preds = %check_next927
  %539 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4435
  call void %539(ptr @.panic_msg.120, i64 49, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 294), !dbg !4435
  unreachable, !dbg !4435

check_type_ok930:                                 ; preds = %check_next927, %check_next925, %check_next923, %check_next921, %check_next919, %check_next917, %check_next915, %switch.case909
  %ptradd931 = getelementptr inbounds i8, ptr %"introspect*912", i64 32, !dbg !4435
  %typeid.inner932 = load i64, ptr %ptradd931, align 8, !dbg !4435
  store i64 %typeid.inner932, ptr %inner910, align 8, !dbg !4435
  %540 = load i64, ptr %inner910, align 8, !dbg !4436
  %eq933 = icmp eq i64 %540, ptrtoint (ptr @"$ct.void" to i64), !dbg !4436
  br i1 %eq933, label %if.then934, label %if.exit935, !dbg !4436

if.then934:                                       ; preds = %check_type_ok930
  store i64 ptrtoint (ptr @"$ct.char" to i64), ptr %inner910, align 8, !dbg !4437
  br label %if.exit935, !dbg !4437

if.exit935:                                       ; preds = %if.then934, %check_type_ok930
  call void @llvm.dbg.declare(metadata ptr %flags936, metadata !4438, metadata !DIExpression()), !dbg !4439
  %541 = load ptr, ptr %self, align 8, !dbg !4440
  %ptradd937 = getelementptr inbounds i8, ptr %541, i64 16, !dbg !4440
  %542 = load i32, ptr %ptradd937, align 8, !dbg !4440
  store i32 %542, ptr %flags936, align 4, !dbg !4440
  call void @llvm.dbg.declare(metadata ptr %width938, metadata !4441, metadata !DIExpression()), !dbg !4442
  %543 = load ptr, ptr %self, align 8, !dbg !4443
  %ptradd939 = getelementptr inbounds i8, ptr %543, i64 16, !dbg !4443
  %ptradd940 = getelementptr inbounds i8, ptr %ptradd939, i64 4, !dbg !4443
  %544 = load i32, ptr %ptradd940, align 4, !dbg !4443
  store i32 %544, ptr %width938, align 4, !dbg !4443
  %545 = load ptr, ptr %self, align 8, !dbg !4444
  %ptradd941 = getelementptr inbounds i8, ptr %545, i64 16, !dbg !4444
  store i32 0, ptr %ptradd941, align 8, !dbg !4444
  %546 = load ptr, ptr %self, align 8, !dbg !4445
  %ptradd942 = getelementptr inbounds i8, ptr %546, i64 16, !dbg !4445
  %ptradd943 = getelementptr inbounds i8, ptr %ptradd942, i64 4, !dbg !4445
  store i32 0, ptr %ptradd943, align 4, !dbg !4446
  call void @llvm.dbg.declare(metadata ptr %size944, metadata !4447, metadata !DIExpression()), !dbg !4448
  %547 = load i64, ptr %inner910, align 8, !dbg !4449
  %"introspect*945" = inttoptr i64 %547 to ptr, !dbg !4449
  %typeid.kind946 = load i8, ptr %"introspect*945", align 8, !dbg !4449
  %ptradd947 = getelementptr inbounds i8, ptr %"introspect*945", i64 24, !dbg !4449
  %typeid.size948 = load i64, ptr %ptradd947, align 8, !dbg !4449
  store i64 %typeid.size948, ptr %size944, align 8, !dbg !4449
  call void @llvm.dbg.declare(metadata ptr %temp, metadata !4450, metadata !DIExpression()), !dbg !4452
  %548 = load ptr, ptr %arg, align 8, !dbg !4453
  store ptr %548, ptr %temp, align 8, !dbg !4453
  call void @llvm.dbg.declare(metadata ptr %ptr949, metadata !4454, metadata !DIExpression()), !dbg !4455
  %549 = load ptr, ptr %temp, align 8, !dbg !4456
  %checknull950 = icmp eq ptr %549, null, !dbg !4456
  %550 = call i1 @llvm.expect.i1(i1 %checknull950, i1 false), !dbg !4456
  br i1 %550, label %panic951, label %checkok952, !dbg !4456

checkok952:                                       ; preds = %if.exit935
  %551 = load ptr, ptr %549, align 8, !dbg !4456
  store ptr %551, ptr %ptr949, align 8, !dbg !4456
  call void @llvm.dbg.declare(metadata ptr %slen, metadata !4457, metadata !DIExpression()), !dbg !4458
  %552 = load ptr, ptr %temp, align 8, !dbg !4459
  %checknull953 = icmp eq ptr %552, null, !dbg !4459
  %553 = call i1 @llvm.expect.i1(i1 %checknull953, i1 false), !dbg !4459
  br i1 %553, label %panic954, label %checkok955, !dbg !4459

checkok955:                                       ; preds = %checkok952
  %ptradd956 = getelementptr inbounds i8, ptr %552, i64 8, !dbg !4459
  %554 = load i64, ptr %ptradd956, align 8, !dbg !4459
  store i64 %554, ptr %slen, align 8, !dbg !4459
  call void @llvm.dbg.declare(metadata ptr %len957, metadata !4460, metadata !DIExpression()), !dbg !4461
  %555 = load ptr, ptr %self, align 8
  %556 = call i64 @std.io.Formatter.out(ptr %retparam959, ptr %555, i8 zeroext 91), !dbg !4462
  %not_err960 = icmp eq i64 %556, 0, !dbg !4462
  %557 = call i1 @llvm.expect.i1(i1 %not_err960, i1 true), !dbg !4462
  br i1 %557, label %after_check962, label %assign_optional961, !dbg !4462

assign_optional961:                               ; preds = %checkok955
  store i64 %556, ptr %error_var958, align 8, !dbg !4462
  br label %guard_block963, !dbg !4462

after_check962:                                   ; preds = %checkok955
  br label %noerr_block967, !dbg !4462

guard_block963:                                   ; preds = %assign_optional961
  %558 = load ptr, ptr %self, align 8, !dbg !4463
  %ptradd964 = getelementptr inbounds i8, ptr %558, i64 16, !dbg !4463
  %559 = load i32, ptr %flags936, align 4, !dbg !4465
  store i32 %559, ptr %ptradd964, align 8, !dbg !4465
  %560 = load ptr, ptr %self, align 8, !dbg !4466
  %ptradd965 = getelementptr inbounds i8, ptr %560, i64 16, !dbg !4466
  %ptradd966 = getelementptr inbounds i8, ptr %ptradd965, i64 4, !dbg !4466
  %561 = load i32, ptr %width938, align 4, !dbg !4467
  store i32 %561, ptr %ptradd966, align 4, !dbg !4467
  %562 = load i64, ptr %error_var958, align 8, !dbg !4467
  ret i64 %562, !dbg !4467

noerr_block967:                                   ; preds = %after_check962
  %563 = load i64, ptr %retparam959, align 8, !dbg !4467
  store i64 %563, ptr %len957, align 8, !dbg !4467
  call void @llvm.dbg.declare(metadata ptr %i968, metadata !4468, metadata !DIExpression()), !dbg !4470
  store i64 0, ptr %i968, align 8, !dbg !4471
  br label %loop.cond969, !dbg !4471

loop.cond969:                                     ; preds = %noerr_block1001, %noerr_block967
  %564 = load i64, ptr %i968, align 8, !dbg !4472
  %565 = load i64, ptr %slen, align 8, !dbg !4473
  %lt970 = icmp ult i64 %564, %565, !dbg !4472
  br i1 %lt970, label %loop.body971, label %loop.exit1005, !dbg !4472

loop.body971:                                     ; preds = %loop.cond969
  %566 = load i64, ptr %i968, align 8, !dbg !4474
  %neq972 = icmp ne i64 0, %566, !dbg !4474
  br i1 %neq972, label %if.then973, label %if.exit985, !dbg !4474

if.then973:                                       ; preds = %loop.body971
  %567 = load i64, ptr %len957, align 8, !dbg !4476
  %568 = load ptr, ptr %self, align 8
  %569 = call i64 @std.io.Formatter.out_substr(ptr %retparam975, ptr %568, ptr @.str.232, i64 2), !dbg !4477
  %not_err976 = icmp eq i64 %569, 0, !dbg !4477
  %570 = call i1 @llvm.expect.i1(i1 %not_err976, i1 true), !dbg !4477
  br i1 %570, label %after_check978, label %assign_optional977, !dbg !4477

assign_optional977:                               ; preds = %if.then973
  store i64 %569, ptr %error_var974, align 8, !dbg !4477
  br label %guard_block979, !dbg !4477

after_check978:                                   ; preds = %if.then973
  br label %noerr_block983, !dbg !4477

guard_block979:                                   ; preds = %assign_optional977
  %571 = load ptr, ptr %self, align 8, !dbg !4478
  %ptradd980 = getelementptr inbounds i8, ptr %571, i64 16, !dbg !4478
  %572 = load i32, ptr %flags936, align 4, !dbg !4480
  store i32 %572, ptr %ptradd980, align 8, !dbg !4480
  %573 = load ptr, ptr %self, align 8, !dbg !4481
  %ptradd981 = getelementptr inbounds i8, ptr %573, i64 16, !dbg !4481
  %ptradd982 = getelementptr inbounds i8, ptr %ptradd981, i64 4, !dbg !4481
  %574 = load i32, ptr %width938, align 4, !dbg !4482
  store i32 %574, ptr %ptradd982, align 4, !dbg !4482
  %575 = load i64, ptr %error_var974, align 8, !dbg !4482
  ret i64 %575, !dbg !4482

noerr_block983:                                   ; preds = %after_check978
  %576 = load i64, ptr %retparam975, align 8, !dbg !4482
  %add984 = add i64 %567, %576, !dbg !4476
  store i64 %add984, ptr %len957, align 8, !dbg !4476
  br label %if.exit985, !dbg !4476

if.exit985:                                       ; preds = %noerr_block983, %loop.body971
  %577 = load i64, ptr %len957, align 8, !dbg !4483
  %578 = load ptr, ptr %ptr949, align 8
  store ptr %578, ptr %ptr987, align 8
  %579 = load i64, ptr %inner910, align 8
  store i64 %579, ptr %type988, align 8
  %580 = load ptr, ptr %ptr987, align 8, !dbg !4484
  %581 = load i64, ptr %type988, align 8, !dbg !4487
  %582 = insertvalue %any undef, ptr %580, 0, !dbg !4487
  %583 = insertvalue %any %582, i64 %581, 1, !dbg !4487
  %584 = load ptr, ptr %self, align 8
  store %any %583, ptr %taddr990, align 8
  %lo991 = load i64, ptr %taddr990, align 8
  %ptradd992 = getelementptr inbounds i8, ptr %taddr990, i64 8
  %hi993 = load ptr, ptr %ptradd992, align 8
  %585 = call i64 @std.io.Formatter.out_str(ptr %retparam989, ptr %584, i64 %lo991, ptr %hi993), !dbg !4488
  %not_err994 = icmp eq i64 %585, 0, !dbg !4488
  %586 = call i1 @llvm.expect.i1(i1 %not_err994, i1 true), !dbg !4488
  br i1 %586, label %after_check996, label %assign_optional995, !dbg !4488

assign_optional995:                               ; preds = %if.exit985
  store i64 %585, ptr %error_var986, align 8, !dbg !4488
  br label %guard_block997, !dbg !4488

after_check996:                                   ; preds = %if.exit985
  br label %noerr_block1001, !dbg !4488

guard_block997:                                   ; preds = %assign_optional995
  %587 = load ptr, ptr %self, align 8, !dbg !4489
  %ptradd998 = getelementptr inbounds i8, ptr %587, i64 16, !dbg !4489
  %588 = load i32, ptr %flags936, align 4, !dbg !4491
  store i32 %588, ptr %ptradd998, align 8, !dbg !4491
  %589 = load ptr, ptr %self, align 8, !dbg !4492
  %ptradd999 = getelementptr inbounds i8, ptr %589, i64 16, !dbg !4492
  %ptradd1000 = getelementptr inbounds i8, ptr %ptradd999, i64 4, !dbg !4492
  %590 = load i32, ptr %width938, align 4, !dbg !4493
  store i32 %590, ptr %ptradd1000, align 4, !dbg !4493
  %591 = load i64, ptr %error_var986, align 8, !dbg !4493
  ret i64 %591, !dbg !4493

noerr_block1001:                                  ; preds = %after_check996
  %592 = load i64, ptr %retparam989, align 8, !dbg !4493
  %add1002 = add i64 %577, %592, !dbg !4483
  store i64 %add1002, ptr %len957, align 8, !dbg !4483
  %593 = load ptr, ptr %ptr949, align 8, !dbg !4494
  %594 = load i64, ptr %size944, align 8, !dbg !4495
  %ptradd_any1003 = getelementptr i8, ptr %593, i64 %594, !dbg !4494
  store ptr %ptradd_any1003, ptr %ptr949, align 8, !dbg !4494
  %595 = load i64, ptr %i968, align 8, !dbg !4496
  %add1004 = add i64 %595, 1, !dbg !4496
  store i64 %add1004, ptr %i968, align 8, !dbg !4496
  br label %loop.cond969, !dbg !4496

loop.exit1005:                                    ; preds = %loop.cond969
  %596 = load i64, ptr %len957, align 8, !dbg !4497
  %597 = load ptr, ptr %self, align 8
  %598 = call i64 @std.io.Formatter.out(ptr %retparam1007, ptr %597, i8 zeroext 93), !dbg !4498
  %not_err1008 = icmp eq i64 %598, 0, !dbg !4498
  %599 = call i1 @llvm.expect.i1(i1 %not_err1008, i1 true), !dbg !4498
  br i1 %599, label %after_check1010, label %assign_optional1009, !dbg !4498

assign_optional1009:                              ; preds = %loop.exit1005
  store i64 %598, ptr %error_var1006, align 8, !dbg !4498
  br label %guard_block1011, !dbg !4498

after_check1010:                                  ; preds = %loop.exit1005
  br label %noerr_block1015, !dbg !4498

guard_block1011:                                  ; preds = %assign_optional1009
  %600 = load ptr, ptr %self, align 8, !dbg !4499
  %ptradd1012 = getelementptr inbounds i8, ptr %600, i64 16, !dbg !4499
  %601 = load i32, ptr %flags936, align 4, !dbg !4501
  store i32 %601, ptr %ptradd1012, align 8, !dbg !4501
  %602 = load ptr, ptr %self, align 8, !dbg !4502
  %ptradd1013 = getelementptr inbounds i8, ptr %602, i64 16, !dbg !4502
  %ptradd1014 = getelementptr inbounds i8, ptr %ptradd1013, i64 4, !dbg !4502
  %603 = load i32, ptr %width938, align 4, !dbg !4503
  store i32 %603, ptr %ptradd1014, align 4, !dbg !4503
  %604 = load i64, ptr %error_var1006, align 8, !dbg !4503
  ret i64 %604, !dbg !4503

noerr_block1015:                                  ; preds = %after_check1010
  %605 = load i64, ptr %retparam1007, align 8, !dbg !4503
  %add1016 = add i64 %596, %605, !dbg !4497
  store i64 %add1016, ptr %len957, align 8, !dbg !4497
  %606 = load i64, ptr %len957, align 8, !dbg !4504
  %607 = load ptr, ptr %self, align 8, !dbg !4505
  %ptradd1018 = getelementptr inbounds i8, ptr %607, i64 16, !dbg !4505
  %608 = load i32, ptr %flags936, align 4, !dbg !4507
  store i32 %608, ptr %ptradd1018, align 8, !dbg !4507
  %609 = load ptr, ptr %self, align 8, !dbg !4508
  %ptradd1019 = getelementptr inbounds i8, ptr %609, i64 16, !dbg !4508
  %ptradd1020 = getelementptr inbounds i8, ptr %ptradd1019, i64 4, !dbg !4508
  %610 = load i32, ptr %width938, align 4, !dbg !4509
  store i32 %610, ptr %ptradd1020, align 4, !dbg !4509
  store i64 %606, ptr %0, align 8, !dbg !4509
  ret i64 0, !dbg !4509

switch.case1021:                                  ; preds = %switch.entry128, %switch.entry128
  store %"char[]" { ptr @.str.233, i64 15 }, ptr %string1022, align 8
  %lo1023 = load ptr, ptr %string1022, align 8, !dbg !4510
  %ptradd1024 = getelementptr inbounds i8, ptr %string1022, i64 8, !dbg !4510
  %hi1025 = load i64, ptr %ptradd1024, align 8, !dbg !4510
  store %"any[]" zeroinitializer, ptr %indirectarg1026, align 8
  call void @std.core.builtin.panicf(ptr %lo1023, i64 %hi1025, ptr @.str.234, i64 12, ptr @.str.235, i64 17, i32 321, ptr byval(%"any[]") align 8 %indirectarg1026), !dbg !4514
  unreachable, !dbg !4515

switch.exit1027:                                  ; preds = %switch.entry128
  %611 = load ptr, ptr %self, align 8
  %612 = call i64 @std.io.Formatter.out_substr(ptr %retparam1029, ptr %611, ptr @.str.236, i64 12), !dbg !4516
  %not_err1030 = icmp eq i64 %612, 0, !dbg !4516
  %613 = call i1 @llvm.expect.i1(i1 %not_err1030, i1 true), !dbg !4516
  br i1 %613, label %after_check1032, label %assign_optional1031, !dbg !4516

assign_optional1031:                              ; preds = %switch.exit1027
  store i64 %612, ptr %reterr1028, align 8, !dbg !4516
  br label %err_retblock1033, !dbg !4516

after_check1032:                                  ; preds = %switch.exit1027
  %614 = load i64, ptr %retparam1029, align 8, !dbg !4516
  store i64 %614, ptr %0, align 8, !dbg !4516
  ret i64 0, !dbg !4516

err_retblock1033:                                 ; preds = %assign_optional1031
  %615 = load i64, ptr %reterr1028, align 8, !dbg !4516
  ret i64 %615, !dbg !4516

panic:                                            ; preds = %entry
  %616 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3947
  call void %616(ptr @.panic_msg, i64 62, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 148), !dbg !3947
  unreachable, !dbg !3947

panic11:                                          ; preds = %switch.case9
  %617 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3958
  call void %617(ptr @.panic_msg.198, i64 58, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 158), !dbg !3958
  unreachable, !dbg !3958

panic22:                                          ; preds = %switch.case19
  %618 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !3960
  call void %618(ptr @.panic_msg.199, i64 49, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 161), !dbg !3960
  unreachable, !dbg !3960

panic97:                                          ; preds = %switch.case94
  %619 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4016
  call void %619(ptr @.panic_msg.205, i64 54, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 188), !dbg !4016
  unreachable, !dbg !4016

panic168:                                         ; preds = %switch.case166
  %620 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4069
  call void %620(ptr @.panic_msg.132, i64 52, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 29), !dbg !4069
  unreachable, !dbg !4069

panic182:                                         ; preds = %switch.case180
  %621 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4079
  call void %621(ptr @.panic_msg.135, i64 53, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 33), !dbg !4079
  unreachable, !dbg !4079

panic211:                                         ; preds = %switch.case208
  %622 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4094
  call void %622(ptr @.panic_msg.136, i64 51, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 38), !dbg !4094
  unreachable, !dbg !4094

panic242:                                         ; preds = %switch.case240
  %623 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4109
  call void %623(ptr @.panic_msg.137, i64 52, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 43), !dbg !4109
  unreachable, !dbg !4109

panic271:                                         ; preds = %switch.case268
  %624 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4124
  call void %624(ptr @.panic_msg.138, i64 54, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 48), !dbg !4124
  unreachable, !dbg !4124

panic301:                                         ; preds = %switch.case298
  %625 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4139
  call void %625(ptr @.panic_msg.132, i64 52, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 53), !dbg !4139
  unreachable, !dbg !4139

panic318:                                         ; preds = %switch.case315
  %626 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4149
  call void %626(ptr @.panic_msg.139, i64 54, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 57), !dbg !4149
  unreachable, !dbg !4149

panic340:                                         ; preds = %switch.case337
  %627 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4161
  call void %627(ptr @.panic_msg.140, i64 52, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 61), !dbg !4161
  unreachable, !dbg !4161

panic362:                                         ; preds = %switch.case359
  %628 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4173
  call void %628(ptr @.panic_msg.141, i64 53, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 65), !dbg !4173
  unreachable, !dbg !4173

panic381:                                         ; preds = %switch.case378
  %629 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4185
  call void %629(ptr @.panic_msg.142, i64 55, ptr @.file.131, i64 8, ptr @.func.195, i64 7, i32 69), !dbg !4185
  unreachable, !dbg !4185

panic427:                                         ; preds = %check_type_ok423
  store i64 %268, ptr %taddr428, align 8
  %630 = insertvalue %any undef, ptr %taddr428, 0
  %631 = insertvalue %any %630, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %270, ptr %taddr429, align 8
  %632 = insertvalue %any undef, ptr %taddr429, 0
  %633 = insertvalue %any %632, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %631, ptr %varargslots430, align 16
  %ptradd431 = getelementptr inbounds i8, ptr %varargslots430, i64 16
  store %any %633, ptr %ptradd431, align 16
  %634 = insertvalue %"any[]" undef, ptr %varargslots430, 0
  %"$$temp432" = insertvalue %"any[]" %634, i64 2, 1
  store %"any[]" %"$$temp432", ptr %indirectarg433, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 199, ptr byval(%"any[]") align 8 %indirectarg433), !dbg !4202
  unreachable, !dbg !4202

panic477:                                         ; preds = %if.then474
  %635 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4214
  call void %635(ptr @.panic_msg.217, i64 52, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 211), !dbg !4214
  unreachable, !dbg !4214

panic493:                                         ; preds = %if.then490
  %636 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4218
  call void %636(ptr @.panic_msg.218, i64 53, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 215), !dbg !4218
  unreachable, !dbg !4218

panic496:                                         ; preds = %cond.lhs
  %637 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4220
  call void %637(ptr @.panic_msg.219, i64 54, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 215), !dbg !4220
  unreachable, !dbg !4220

panic511:                                         ; preds = %if.then508
  %638 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4224
  call void %638(ptr @.panic_msg.221, i64 53, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 219), !dbg !4224
  unreachable, !dbg !4224

panic516:                                         ; preds = %cond.lhs514
  %639 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4226
  call void %639(ptr @.panic_msg.222, i64 54, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 219), !dbg !4226
  unreachable, !dbg !4226

panic531:                                         ; preds = %if.exit527
  %640 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4229
  call void %640(ptr @.panic_msg.36, i64 45, ptr @.file.49, i64 10, ptr @.func.195, i64 7, i32 199), !dbg !4229
  unreachable, !dbg !4229

panic534:                                         ; preds = %checkok532
  %641 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4232
  call void %641(ptr @.panic_msg.36, i64 45, ptr @.file.49, i64 10, ptr @.func.195, i64 7, i32 199), !dbg !4232
  unreachable, !dbg !4232

panic615:                                         ; preds = %if.then613
  %642 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4246
  call void %642(ptr @.panic_msg.224, i64 48, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 227), !dbg !4246
  unreachable, !dbg !4246

panic951:                                         ; preds = %if.exit935
  %643 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4456
  call void %643(ptr @.panic_msg.231, i64 45, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 308), !dbg !4456
  unreachable, !dbg !4456

panic954:                                         ; preds = %checkok952
  %644 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4459
  call void %644(ptr @.panic_msg.231, i64 45, ptr @.file.184, i64 12, ptr @.func.195, i64 7, i32 309), !dbg !4459
  unreachable, !dbg !4459
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.vprintf(ptr %0, ptr %1, ptr %2, i64 %3, ptr %4, i64 %5) #0 comdat !dbg !4517 {
entry:
  %self = alloca ptr, align 8
  %format = alloca %"char[]", align 8
  %anys = alloca %"any[]", align 8
  %total_len = alloca i64, align 8
  %format_len = alloca i64, align 8
  %variant_index = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %f = alloca ptr, align 8
  %retparam18 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %varargslots27 = alloca [2 x %any], align 16
  %indirectarg30 = alloca %"any[]", align 8
  %error_var34 = alloca i64, align 8
  %retparam35 = alloca i64, align 8
  %switch = alloca i8, align 1
  %reterr57 = alloca i64, align 8
  %f58 = alloca ptr, align 8
  %retparam59 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %w = alloca i32, align 4
  %w.f = alloca i64, align 8
  %retparam77 = alloca i32, align 4
  %temp_err = alloca i64, align 8
  %reterr86 = alloca i64, align 8
  %f87 = alloca ptr, align 8
  %retparam88 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %taddr97 = alloca i64, align 8
  %varargslots98 = alloca [2 x %any], align 16
  %indirectarg101 = alloca %"any[]", align 8
  %reterr118 = alloca i64, align 8
  %f119 = alloca ptr, align 8
  %retparam120 = alloca i64, align 8
  %prec = alloca i32, align 4
  %prec.f = alloca i64, align 8
  %retparam127 = alloca i32, align 4
  %temp_err132 = alloca i64, align 8
  %reterr141 = alloca i64, align 8
  %f142 = alloca ptr, align 8
  %retparam143 = alloca i64, align 8
  %taddr154 = alloca i64, align 8
  %taddr155 = alloca i64, align 8
  %varargslots156 = alloca [2 x %any], align 16
  %indirectarg159 = alloca %"any[]", align 8
  %base = alloca i32, align 4
  %self166 = alloca ptr, align 8
  %f167 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %error_var177 = alloca i64, align 8
  %retparam178 = alloca i64, align 8
  %current = alloca %any, align 8
  %taddr190 = alloca i64, align 8
  %taddr191 = alloca i64, align 8
  %varargslots192 = alloca [2 x %any], align 16
  %indirectarg195 = alloca %"any[]", align 8
  %switch197 = alloca i8, align 1
  %error_var213 = alloca i64, align 8
  %f214 = alloca ptr, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam216 = alloca double, align 8
  %retparam221 = alloca i64, align 8
  %err = alloca i64, align 8
  %switch234 = alloca i64, align 8
  %self239 = alloca ptr, align 8
  %f240 = alloca i64, align 8
  %blockret241 = alloca i64, align 8
  %self254 = alloca ptr, align 8
  %f255 = alloca i64, align 8
  %blockret256 = alloca i64, align 8
  %error_var267 = alloca i64, align 8
  %retparam268 = alloca i64, align 8
  %error_var282 = alloca i64, align 8
  %f283 = alloca ptr, align 8
  %len285 = alloca i64, align 8
  %len.f286 = alloca i64, align 8
  %retparam287 = alloca double, align 8
  %retparam294 = alloca i64, align 8
  %err299 = alloca i64, align 8
  %switch308 = alloca i64, align 8
  %self314 = alloca ptr, align 8
  %f315 = alloca i64, align 8
  %blockret316 = alloca i64, align 8
  %self329 = alloca ptr, align 8
  %f330 = alloca i64, align 8
  %blockret331 = alloca i64, align 8
  %error_var342 = alloca i64, align 8
  %retparam343 = alloca i64, align 8
  %error_var357 = alloca i64, align 8
  %f358 = alloca ptr, align 8
  %len360 = alloca i64, align 8
  %len.f361 = alloca i64, align 8
  %retparam362 = alloca double, align 8
  %retparam369 = alloca i64, align 8
  %err374 = alloca i64, align 8
  %switch383 = alloca i64, align 8
  %self389 = alloca ptr, align 8
  %f390 = alloca i64, align 8
  %blockret391 = alloca i64, align 8
  %self404 = alloca ptr, align 8
  %f405 = alloca i64, align 8
  %blockret406 = alloca i64, align 8
  %error_var417 = alloca i64, align 8
  %retparam418 = alloca i64, align 8
  %error_var432 = alloca i64, align 8
  %f433 = alloca ptr, align 8
  %len435 = alloca i64, align 8
  %len.f436 = alloca i64, align 8
  %retparam437 = alloca double, align 8
  %retparam444 = alloca i64, align 8
  %err449 = alloca i64, align 8
  %switch458 = alloca i64, align 8
  %self464 = alloca ptr, align 8
  %f465 = alloca i64, align 8
  %blockret466 = alloca i64, align 8
  %self479 = alloca ptr, align 8
  %f480 = alloca i64, align 8
  %blockret481 = alloca i64, align 8
  %error_var492 = alloca i64, align 8
  %retparam493 = alloca i64, align 8
  %error_var505 = alloca i64, align 8
  %retparam506 = alloca i64, align 8
  %len519 = alloca i64, align 8
  %error_var520 = alloca i64, align 8
  %retparam521 = alloca i64, align 8
  %error_var531 = alloca i64, align 8
  %retparam534 = alloca i64, align 8
  %out_fn = alloca ptr, align 8
  %len544 = alloca i64, align 8
  %error_var545 = alloca i64, align 8
  %retparam546 = alloca i64, align 8
  %error_var556 = alloca i64, align 8
  %retparam560 = alloca i64, align 8
  %error_var567 = alloca i64, align 8
  %retparam568 = alloca i64, align 8
  %self582 = alloca ptr, align 8
  %f583 = alloca i64, align 8
  %blockret584 = alloca i64, align 8
  %error_var595 = alloca i64, align 8
  %retparam596 = alloca i64, align 8
  %is_neg = alloca i8, align 1
  %error_var615 = alloca i64, align 8
  %f616 = alloca ptr, align 8
  %len618 = alloca i64, align 8
  %len.f619 = alloca i64, align 8
  %retparam620 = alloca i128, align 8
  %retparam627 = alloca i64, align 8
  %err635 = alloca i64, align 8
  %switch644 = alloca i64, align 8
  %self650 = alloca ptr, align 8
  %f651 = alloca i64, align 8
  %blockret652 = alloca i64, align 8
  %self665 = alloca ptr, align 8
  %f666 = alloca i64, align 8
  %blockret667 = alloca i64, align 8
  %error_var678 = alloca i64, align 8
  %retparam679 = alloca i64, align 8
  %reterr699 = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !4518
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !4518
  br i1 %7, label %panic, label %checkok, !dbg !4518

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !4519, metadata !DIExpression()), !dbg !4520
  store ptr %2, ptr %format, align 8
  %ptradd = getelementptr inbounds i8, ptr %format, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !4521, metadata !DIExpression()), !dbg !4522
  store ptr %4, ptr %anys, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %anys, i64 8
  store i64 %5, ptr %ptradd1, align 8
  call void @llvm.dbg.declare(metadata ptr %anys, metadata !4523, metadata !DIExpression()), !dbg !4524
  %8 = load ptr, ptr %self, align 8, !dbg !4525
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !4525
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd2, i64 24, !dbg !4525
  store i64 0, ptr %ptradd3, align 8, !dbg !4526
  %9 = load ptr, ptr %self, align 8, !dbg !4527
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !4527
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !4527
  %not = icmp eq ptr %10, null, !dbg !4527
  br i1 %not, label %if.then, label %if.exit, !dbg !4527

if.then:                                          ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !4528
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !4528
  store ptr @std.io.out_null_fn, ptr %ptradd5, align 8, !dbg !4530
  br label %if.exit, !dbg !4530

if.exit:                                          ; preds = %if.then, %checkok
  call void @llvm.dbg.declare(metadata ptr %total_len, metadata !4531, metadata !DIExpression()), !dbg !4532
  store i64 0, ptr %total_len, align 8, !dbg !4532
  call void @llvm.dbg.declare(metadata ptr %format_len, metadata !4533, metadata !DIExpression()), !dbg !4534
  %ptradd6 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4535
  %12 = load i64, ptr %ptradd6, align 8, !dbg !4535
  store i64 %12, ptr %format_len, align 8, !dbg !4535
  call void @llvm.dbg.declare(metadata ptr %variant_index, metadata !4536, metadata !DIExpression()), !dbg !4537
  store i64 0, ptr %variant_index, align 8, !dbg !4538
  call void @llvm.dbg.declare(metadata ptr %i, metadata !4539, metadata !DIExpression()), !dbg !4541
  store i64 0, ptr %i, align 8, !dbg !4542
  br label %loop.cond, !dbg !4542

loop.cond:                                        ; preds = %loop.inc, %if.exit
  %13 = load i64, ptr %i, align 8, !dbg !4543
  %14 = load i64, ptr %format_len, align 8, !dbg !4544
  %lt = icmp ult i64 %13, %14, !dbg !4543
  br i1 %lt, label %loop.body, label %loop.exit691, !dbg !4543

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !4545, metadata !DIExpression()), !dbg !4547
  %ptradd7 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4548
  %15 = load i64, ptr %ptradd7, align 8, !dbg !4548
  %16 = load ptr, ptr %format, align 8, !dbg !4548
  %17 = load i64, ptr %i, align 8, !dbg !4549
  %ge = icmp uge i64 %17, %15, !dbg !4549
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4549
  br i1 %18, label %panic8, label %checkok11, !dbg !4549

checkok11:                                        ; preds = %loop.body
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 %17, !dbg !4549
  %19 = load i8, ptr %ptradd12, align 1, !dbg !4549
  store i8 %19, ptr %c, align 1, !dbg !4549
  %20 = load i8, ptr %c, align 1, !dbg !4550
  %neq = icmp ne i8 %20, 37, !dbg !4550
  br i1 %neq, label %if.then13, label %if.exit14, !dbg !4550

if.then13:                                        ; preds = %checkok11
  %21 = load i64, ptr %total_len, align 8, !dbg !4551
  %22 = load ptr, ptr %self, align 8
  %23 = load i8, ptr %c, align 1
  %24 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %22, i8 zeroext %23), !dbg !4553
  %not_err = icmp eq i64 %24, 0, !dbg !4553
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4553
  br i1 %25, label %after_check, label %assign_optional, !dbg !4553

assign_optional:                                  ; preds = %if.then13
  store i64 %24, ptr %error_var, align 8, !dbg !4553
  br label %guard_block, !dbg !4553

after_check:                                      ; preds = %if.then13
  br label %noerr_block, !dbg !4553

guard_block:                                      ; preds = %assign_optional
  %26 = load i64, ptr %error_var, align 8, !dbg !4553
  ret i64 %26, !dbg !4553

noerr_block:                                      ; preds = %after_check
  %27 = load i64, ptr %retparam, align 8, !dbg !4553
  %add = add i64 %21, %27, !dbg !4551
  store i64 %add, ptr %total_len, align 8, !dbg !4551
  br label %loop.inc, !dbg !4554

if.exit14:                                        ; preds = %checkok11
  %28 = load i64, ptr %i, align 8, !dbg !4555
  %add15 = add i64 %28, 1, !dbg !4555
  store i64 %add15, ptr %i, align 8, !dbg !4555
  %29 = load i64, ptr %i, align 8, !dbg !4556
  %30 = load i64, ptr %format_len, align 8, !dbg !4557
  %ge16 = icmp uge i64 %29, %30, !dbg !4556
  br i1 %ge16, label %if.then17, label %if.exit21, !dbg !4556

if.then17:                                        ; preds = %if.exit14
  %31 = load ptr, ptr %self, align 8
  store ptr %31, ptr %f, align 8
  %32 = load ptr, ptr %f, align 8
  %33 = call i64 @std.io.Formatter.out_substr(ptr %retparam18, ptr %32, ptr @.str.238, i64 4), !dbg !4558
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr, align 8, !dbg !4561
  br label %err_retblock, !dbg !4561

err_retblock:                                     ; preds = %if.then17
  %34 = load i64, ptr %reterr, align 8, !dbg !4561
  ret i64 %34, !dbg !4561

if.exit21:                                        ; preds = %if.exit14
  %ptradd22 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4562
  %35 = load i64, ptr %ptradd22, align 8, !dbg !4562
  %36 = load ptr, ptr %format, align 8, !dbg !4562
  %37 = load i64, ptr %i, align 8, !dbg !4563
  %ge23 = icmp uge i64 %37, %35, !dbg !4563
  %38 = call i1 @llvm.expect.i1(i1 %ge23, i1 false), !dbg !4563
  br i1 %38, label %panic24, label %checkok31, !dbg !4563

checkok31:                                        ; preds = %if.exit21
  %ptradd32 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !4563
  %39 = load i8, ptr %ptradd32, align 1, !dbg !4563
  store i8 %39, ptr %c, align 1, !dbg !4563
  %40 = load i8, ptr %c, align 1, !dbg !4564
  %eq = icmp eq i8 %40, 37, !dbg !4564
  br i1 %eq, label %if.then33, label %if.exit42, !dbg !4564

if.then33:                                        ; preds = %checkok31
  %41 = load i64, ptr %total_len, align 8, !dbg !4565
  %42 = load ptr, ptr %self, align 8
  %43 = load i8, ptr %c, align 1
  %44 = call i64 @std.io.Formatter.out(ptr %retparam35, ptr %42, i8 zeroext %43), !dbg !4567
  %not_err36 = icmp eq i64 %44, 0, !dbg !4567
  %45 = call i1 @llvm.expect.i1(i1 %not_err36, i1 true), !dbg !4567
  br i1 %45, label %after_check38, label %assign_optional37, !dbg !4567

assign_optional37:                                ; preds = %if.then33
  store i64 %44, ptr %error_var34, align 8, !dbg !4567
  br label %guard_block39, !dbg !4567

after_check38:                                    ; preds = %if.then33
  br label %noerr_block40, !dbg !4567

guard_block39:                                    ; preds = %assign_optional37
  %46 = load i64, ptr %error_var34, align 8, !dbg !4567
  ret i64 %46, !dbg !4567

noerr_block40:                                    ; preds = %after_check38
  %47 = load i64, ptr %retparam35, align 8, !dbg !4567
  %add41 = add i64 %41, %47, !dbg !4565
  store i64 %add41, ptr %total_len, align 8, !dbg !4565
  br label %loop.inc, !dbg !4568

if.exit42:                                        ; preds = %checkok31
  %48 = load ptr, ptr %self, align 8, !dbg !4569
  %ptradd43 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !4569
  store i32 0, ptr %ptradd43, align 8, !dbg !4569
  br label %loop.body44, !dbg !4570

loop.body44:                                      ; preds = %checkok73, %if.exit42
  %49 = load i8, ptr %c, align 1
  store i8 %49, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %loop.body44
  %50 = load i8, ptr %switch, align 1
  switch i8 %50, label %switch.default [
    i8 48, label %switch.case
    i8 45, label %switch.case46
    i8 43, label %switch.case48
    i8 32, label %switch.case50
    i8 35, label %switch.case52
  ]

switch.case:                                      ; preds = %switch.entry
  %51 = load ptr, ptr %self, align 8, !dbg !4571
  %ptradd45 = getelementptr inbounds i8, ptr %51, i64 16, !dbg !4571
  %52 = load i32, ptr %ptradd45, align 8, !dbg !4576
  %53 = and i32 %52, -2, !dbg !4576
  %54 = or i32 %53, 1, !dbg !4576
  store i32 %54, ptr %ptradd45, align 8, !dbg !4576
  br label %switch.exit, !dbg !4576

switch.case46:                                    ; preds = %switch.entry
  %55 = load ptr, ptr %self, align 8, !dbg !4577
  %ptradd47 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !4577
  %56 = load i32, ptr %ptradd47, align 8, !dbg !4579
  %57 = and i32 %56, -3, !dbg !4579
  %58 = or i32 %57, 2, !dbg !4579
  store i32 %58, ptr %ptradd47, align 8, !dbg !4579
  br label %switch.exit, !dbg !4579

switch.case48:                                    ; preds = %switch.entry
  %59 = load ptr, ptr %self, align 8, !dbg !4580
  %ptradd49 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !4580
  %60 = load i32, ptr %ptradd49, align 8, !dbg !4582
  %61 = and i32 %60, -5, !dbg !4582
  %62 = or i32 %61, 4, !dbg !4582
  store i32 %62, ptr %ptradd49, align 8, !dbg !4582
  br label %switch.exit, !dbg !4582

switch.case50:                                    ; preds = %switch.entry
  %63 = load ptr, ptr %self, align 8, !dbg !4583
  %ptradd51 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !4583
  %64 = load i32, ptr %ptradd51, align 8, !dbg !4585
  %65 = and i32 %64, -9, !dbg !4585
  %66 = or i32 %65, 8, !dbg !4585
  store i32 %66, ptr %ptradd51, align 8, !dbg !4585
  br label %switch.exit, !dbg !4585

switch.case52:                                    ; preds = %switch.entry
  %67 = load ptr, ptr %self, align 8, !dbg !4586
  %ptradd53 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !4586
  %68 = load i32, ptr %ptradd53, align 8, !dbg !4588
  %69 = and i32 %68, -17, !dbg !4588
  %70 = or i32 %69, 16, !dbg !4588
  store i32 %70, ptr %ptradd53, align 8, !dbg !4588
  br label %switch.exit, !dbg !4588

switch.default:                                   ; preds = %switch.entry
  br label %loop.exit, !dbg !4589

switch.exit:                                      ; preds = %switch.case52, %switch.case50, %switch.case48, %switch.case46, %switch.case
  %71 = load i64, ptr %i, align 8, !dbg !4591
  %add54 = add i64 %71, 1, !dbg !4591
  store i64 %add54, ptr %i, align 8, !dbg !4591
  %72 = load i64, ptr %format_len, align 8, !dbg !4592
  %ge55 = icmp uge i64 %add54, %72, !dbg !4593
  br i1 %ge55, label %if.then56, label %if.exit63, !dbg !4593

if.then56:                                        ; preds = %switch.exit
  %73 = load ptr, ptr %self, align 8
  store ptr %73, ptr %f58, align 8
  %74 = load ptr, ptr %f58, align 8
  %75 = call i64 @std.io.Formatter.out_substr(ptr %retparam59, ptr %74, ptr @.str.239, i64 4), !dbg !4594
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr57, align 8, !dbg !4597
  br label %err_retblock62, !dbg !4597

err_retblock62:                                   ; preds = %if.then56
  %76 = load i64, ptr %reterr57, align 8, !dbg !4597
  ret i64 %76, !dbg !4597

if.exit63:                                        ; preds = %switch.exit
  %ptradd64 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4598
  %77 = load i64, ptr %ptradd64, align 8, !dbg !4598
  %78 = load ptr, ptr %format, align 8, !dbg !4598
  %79 = load i64, ptr %i, align 8, !dbg !4599
  %ge65 = icmp uge i64 %79, %77, !dbg !4599
  %80 = call i1 @llvm.expect.i1(i1 %ge65, i1 false), !dbg !4599
  br i1 %80, label %panic66, label %checkok73, !dbg !4599

checkok73:                                        ; preds = %if.exit63
  %ptradd74 = getelementptr inbounds i8, ptr %78, i64 %79, !dbg !4599
  %81 = load i8, ptr %ptradd74, align 1, !dbg !4599
  store i8 %81, ptr %c, align 1, !dbg !4599
  br label %loop.body44, !dbg !4599

loop.exit:                                        ; preds = %switch.default
  call void @llvm.dbg.declare(metadata ptr %w, metadata !4600, metadata !DIExpression()), !dbg !4601
  %ptradd75 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4602
  %ptradd76 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4603
  %82 = load ptr, ptr %anys, align 8
  %83 = load i64, ptr %ptradd75, align 8
  %84 = load ptr, ptr %format, align 8
  %85 = load i64, ptr %ptradd76, align 8
  %86 = call i64 @std.io.printf_parse_format_field(ptr %retparam77, ptr %82, i64 %83, ptr %variant_index, ptr %84, i64 %85, ptr %i) #5, !dbg !4604
  %not_err78 = icmp eq i64 %86, 0, !dbg !4604
  %87 = call i1 @llvm.expect.i1(i1 %not_err78, i1 true), !dbg !4604
  br i1 %87, label %after_check80, label %assign_optional79, !dbg !4604

assign_optional79:                                ; preds = %loop.exit
  store i64 %86, ptr %w.f, align 8, !dbg !4604
  br label %after_assign, !dbg !4604

after_check80:                                    ; preds = %loop.exit
  %88 = load i32, ptr %retparam77, align 4, !dbg !4604
  store i32 %88, ptr %w, align 4, !dbg !4604
  store i64 0, ptr %w.f, align 8, !dbg !4604
  br label %after_assign, !dbg !4604

after_assign:                                     ; preds = %after_check80, %assign_optional79
  br label %testblock

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %w.f, align 8, !dbg !4605
  %not_err81 = icmp eq i64 %optval, 0, !dbg !4605
  %89 = call i1 @llvm.expect.i1(i1 %not_err81, i1 true), !dbg !4605
  br i1 %89, label %after_check83, label %assign_optional82, !dbg !4605

assign_optional82:                                ; preds = %testblock
  store i64 %optval, ptr %temp_err, align 8, !dbg !4605
  br label %end_block, !dbg !4605

after_check83:                                    ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !4605
  br label %end_block, !dbg !4605

end_block:                                        ; preds = %after_check83, %assign_optional82
  %90 = load i64, ptr %temp_err, align 8, !dbg !4605
  %neq84 = icmp ne i64 %90, 0, !dbg !4605
  br i1 %neq84, label %if.then85, label %if.exit92, !dbg !4605

if.then85:                                        ; preds = %end_block
  %91 = load ptr, ptr %self, align 8
  store ptr %91, ptr %f87, align 8
  %92 = load ptr, ptr %f87, align 8
  %93 = call i64 @std.io.Formatter.out_substr(ptr %retparam88, ptr %92, ptr @.str.240, i64 4), !dbg !4606
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr86, align 8, !dbg !4609
  br label %err_retblock91, !dbg !4609

err_retblock91:                                   ; preds = %if.then85
  %94 = load i64, ptr %reterr86, align 8, !dbg !4609
  ret i64 %94, !dbg !4609

if.exit92:                                        ; preds = %end_block
  %ptradd93 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4610
  %95 = load i64, ptr %ptradd93, align 8, !dbg !4610
  %96 = load ptr, ptr %format, align 8, !dbg !4610
  %97 = load i64, ptr %i, align 8, !dbg !4611
  %ge94 = icmp uge i64 %97, %95, !dbg !4611
  %98 = call i1 @llvm.expect.i1(i1 %ge94, i1 false), !dbg !4611
  br i1 %98, label %panic95, label %checkok102, !dbg !4611

checkok102:                                       ; preds = %if.exit92
  %ptradd103 = getelementptr inbounds i8, ptr %96, i64 %97, !dbg !4611
  %99 = load i8, ptr %ptradd103, align 1, !dbg !4611
  store i8 %99, ptr %c, align 1, !dbg !4611
  %100 = load i32, ptr %w, align 4, !dbg !4612
  %lt104 = icmp slt i32 %100, 0, !dbg !4612
  br i1 %lt104, label %if.then105, label %if.exit107, !dbg !4612

if.then105:                                       ; preds = %checkok102
  %101 = load ptr, ptr %self, align 8, !dbg !4613
  %ptradd106 = getelementptr inbounds i8, ptr %101, i64 16, !dbg !4613
  %102 = load i32, ptr %ptradd106, align 8, !dbg !4615
  %103 = and i32 %102, -3, !dbg !4615
  %104 = or i32 %103, 2, !dbg !4615
  store i32 %104, ptr %ptradd106, align 8, !dbg !4615
  %105 = load i32, ptr %w, align 4, !dbg !4616
  %neg = sub i32 0, %105, !dbg !4616
  store i32 %neg, ptr %w, align 4, !dbg !4616
  store i64 0, ptr %w.f, align 8, !dbg !4616
  br label %if.exit107, !dbg !4616

if.exit107:                                       ; preds = %if.then105, %checkok102
  %106 = load ptr, ptr %self, align 8, !dbg !4617
  %ptradd108 = getelementptr inbounds i8, ptr %106, i64 16, !dbg !4617
  %ptradd109 = getelementptr inbounds i8, ptr %ptradd108, i64 4, !dbg !4617
  %107 = load i32, ptr %w, align 4, !dbg !4618
  store i32 %107, ptr %ptradd109, align 4, !dbg !4618
  %108 = load ptr, ptr %self, align 8, !dbg !4619
  %ptradd110 = getelementptr inbounds i8, ptr %108, i64 16, !dbg !4619
  %ptradd111 = getelementptr inbounds i8, ptr %ptradd110, i64 8, !dbg !4619
  store i32 0, ptr %ptradd111, align 8, !dbg !4620
  %109 = load i8, ptr %c, align 1, !dbg !4621
  %eq112 = icmp eq i8 %109, 46, !dbg !4621
  br i1 %eq112, label %if.then113, label %if.exit162, !dbg !4621

if.then113:                                       ; preds = %if.exit107
  %110 = load ptr, ptr %self, align 8, !dbg !4622
  %ptradd114 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !4622
  %111 = load i32, ptr %ptradd114, align 8, !dbg !4624
  %112 = and i32 %111, -65, !dbg !4624
  %113 = or i32 %112, 64, !dbg !4624
  store i32 %113, ptr %ptradd114, align 8, !dbg !4624
  %114 = load i64, ptr %i, align 8, !dbg !4625
  %add115 = add i64 %114, 1, !dbg !4625
  store i64 %add115, ptr %i, align 8, !dbg !4625
  %115 = load i64, ptr %format_len, align 8, !dbg !4626
  %ge116 = icmp uge i64 %add115, %115, !dbg !4627
  br i1 %ge116, label %if.then117, label %if.exit124, !dbg !4627

if.then117:                                       ; preds = %if.then113
  %116 = load ptr, ptr %self, align 8
  store ptr %116, ptr %f119, align 8
  %117 = load ptr, ptr %f119, align 8
  %118 = call i64 @std.io.Formatter.out_substr(ptr %retparam120, ptr %117, ptr @.str.241, i64 12), !dbg !4628
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr118, align 8, !dbg !4631
  br label %err_retblock123, !dbg !4631

err_retblock123:                                  ; preds = %if.then117
  %119 = load i64, ptr %reterr118, align 8, !dbg !4631
  ret i64 %119, !dbg !4631

if.exit124:                                       ; preds = %if.then113
  call void @llvm.dbg.declare(metadata ptr %prec, metadata !4632, metadata !DIExpression()), !dbg !4633
  %ptradd125 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4634
  %ptradd126 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4635
  %120 = load ptr, ptr %anys, align 8
  %121 = load i64, ptr %ptradd125, align 8
  %122 = load ptr, ptr %format, align 8
  %123 = load i64, ptr %ptradd126, align 8
  %124 = call i64 @std.io.printf_parse_format_field(ptr %retparam127, ptr %120, i64 %121, ptr %variant_index, ptr %122, i64 %123, ptr %i) #5, !dbg !4636
  %not_err128 = icmp eq i64 %124, 0, !dbg !4636
  %125 = call i1 @llvm.expect.i1(i1 %not_err128, i1 true), !dbg !4636
  br i1 %125, label %after_check130, label %assign_optional129, !dbg !4636

assign_optional129:                               ; preds = %if.exit124
  store i64 %124, ptr %prec.f, align 8, !dbg !4636
  br label %after_assign131, !dbg !4636

after_check130:                                   ; preds = %if.exit124
  %126 = load i32, ptr %retparam127, align 4, !dbg !4636
  store i32 %126, ptr %prec, align 4, !dbg !4636
  store i64 0, ptr %prec.f, align 8, !dbg !4636
  br label %after_assign131, !dbg !4636

after_assign131:                                  ; preds = %after_check130, %assign_optional129
  br label %testblock133

testblock133:                                     ; preds = %after_assign131
  %optval134 = load i64, ptr %prec.f, align 8, !dbg !4637
  %not_err135 = icmp eq i64 %optval134, 0, !dbg !4637
  %127 = call i1 @llvm.expect.i1(i1 %not_err135, i1 true), !dbg !4637
  br i1 %127, label %after_check137, label %assign_optional136, !dbg !4637

assign_optional136:                               ; preds = %testblock133
  store i64 %optval134, ptr %temp_err132, align 8, !dbg !4637
  br label %end_block138, !dbg !4637

after_check137:                                   ; preds = %testblock133
  store i64 0, ptr %temp_err132, align 8, !dbg !4637
  br label %end_block138, !dbg !4637

end_block138:                                     ; preds = %after_check137, %assign_optional136
  %128 = load i64, ptr %temp_err132, align 8, !dbg !4637
  %neq139 = icmp ne i64 %128, 0, !dbg !4637
  br i1 %neq139, label %if.then140, label %if.exit147, !dbg !4637

if.then140:                                       ; preds = %end_block138
  %129 = load ptr, ptr %self, align 8
  store ptr %129, ptr %f142, align 8
  %130 = load ptr, ptr %f142, align 8
  %131 = call i64 @std.io.Formatter.out_substr(ptr %retparam143, ptr %130, ptr @.str.242, i64 12), !dbg !4638
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr141, align 8, !dbg !4641
  br label %err_retblock146, !dbg !4641

err_retblock146:                                  ; preds = %if.then140
  %132 = load i64, ptr %reterr141, align 8, !dbg !4641
  ret i64 %132, !dbg !4641

if.exit147:                                       ; preds = %end_block138
  %133 = load ptr, ptr %self, align 8, !dbg !4642
  %ptradd148 = getelementptr inbounds i8, ptr %133, i64 16, !dbg !4642
  %ptradd149 = getelementptr inbounds i8, ptr %ptradd148, i64 8, !dbg !4642
  %134 = load i32, ptr %prec, align 4, !dbg !4643
  %lt150 = icmp slt i32 %134, 0, !dbg !4643
  br i1 %lt150, label %cond.lhs, label %cond.rhs, !dbg !4643

cond.lhs:                                         ; preds = %if.exit147
  br label %cond.phi, !dbg !4644

cond.rhs:                                         ; preds = %if.exit147
  %135 = load i32, ptr %prec, align 4, !dbg !4645
  br label %cond.phi, !dbg !4645

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i32 [ 0, %cond.lhs ], [ %135, %cond.rhs ], !dbg !4645
  store i32 %val, ptr %ptradd149, align 8, !dbg !4645
  %ptradd151 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4646
  %136 = load i64, ptr %ptradd151, align 8, !dbg !4646
  %137 = load ptr, ptr %format, align 8, !dbg !4646
  %138 = load i64, ptr %i, align 8, !dbg !4647
  %ge152 = icmp uge i64 %138, %136, !dbg !4647
  %139 = call i1 @llvm.expect.i1(i1 %ge152, i1 false), !dbg !4647
  br i1 %139, label %panic153, label %checkok160, !dbg !4647

checkok160:                                       ; preds = %cond.phi
  %ptradd161 = getelementptr inbounds i8, ptr %137, i64 %138, !dbg !4647
  %140 = load i8, ptr %ptradd161, align 1, !dbg !4647
  store i8 %140, ptr %c, align 1, !dbg !4647
  br label %if.exit162, !dbg !4647

if.exit162:                                       ; preds = %checkok160, %if.exit107
  call void @llvm.dbg.declare(metadata ptr %base, metadata !4648, metadata !DIExpression()), !dbg !4649
  store i32 0, ptr %base, align 4, !dbg !4650
  %141 = load i64, ptr %variant_index, align 8, !dbg !4651
  %ptradd163 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4652
  %142 = load i64, ptr %ptradd163, align 8, !dbg !4652
  %ge164 = icmp uge i64 %141, %142, !dbg !4651
  br i1 %ge164, label %if.then165, label %if.exit185, !dbg !4651

if.then165:                                       ; preds = %if.exit162
  %143 = load ptr, ptr %self, align 8
  store ptr %143, ptr %self166, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" to i64), ptr %f167, align 8
  %144 = load ptr, ptr %self166, align 8, !dbg !4653
  %ptradd168 = getelementptr inbounds i8, ptr %144, i64 16, !dbg !4653
  %ptradd169 = getelementptr inbounds i8, ptr %ptradd168, i64 24, !dbg !4653
  %145 = load i64, ptr %ptradd169, align 8, !dbg !4653
  %neq170 = icmp ne i64 %145, 0, !dbg !4653
  br i1 %neq170, label %if.then171, label %if.exit174, !dbg !4653

if.then171:                                       ; preds = %if.then165
  %146 = load ptr, ptr %self166, align 8, !dbg !4657
  %ptradd172 = getelementptr inbounds i8, ptr %146, i64 16, !dbg !4657
  %ptradd173 = getelementptr inbounds i8, ptr %ptradd172, i64 24, !dbg !4657
  %147 = load i64, ptr %ptradd173, align 8, !dbg !4657
  store i64 %147, ptr %blockret, align 8, !dbg !4657
  br label %expr_block.exit, !dbg !4657

if.exit174:                                       ; preds = %if.then165
  %148 = load ptr, ptr %self166, align 8, !dbg !4658
  %ptradd175 = getelementptr inbounds i8, ptr %148, i64 16, !dbg !4658
  %ptradd176 = getelementptr inbounds i8, ptr %ptradd175, i64 24, !dbg !4658
  %149 = load i64, ptr %f167, align 8, !dbg !4659
  store i64 %149, ptr %ptradd176, align 8, !dbg !4659
  %150 = load i64, ptr %f167, align 8, !dbg !4660
  store i64 %150, ptr %blockret, align 8, !dbg !4660
  br label %expr_block.exit, !dbg !4660

expr_block.exit:                                  ; preds = %if.exit174, %if.then171
  %151 = load i64, ptr %total_len, align 8, !dbg !4661
  %152 = load ptr, ptr %self, align 8
  %153 = call i64 @std.io.Formatter.out_substr(ptr %retparam178, ptr %152, ptr @.str.243, i64 9), !dbg !4662
  %not_err179 = icmp eq i64 %153, 0, !dbg !4662
  %154 = call i1 @llvm.expect.i1(i1 %not_err179, i1 true), !dbg !4662
  br i1 %154, label %after_check181, label %assign_optional180, !dbg !4662

assign_optional180:                               ; preds = %expr_block.exit
  store i64 %153, ptr %error_var177, align 8, !dbg !4662
  br label %guard_block182, !dbg !4662

after_check181:                                   ; preds = %expr_block.exit
  br label %noerr_block183, !dbg !4662

guard_block182:                                   ; preds = %assign_optional180
  %155 = load i64, ptr %error_var177, align 8, !dbg !4662
  ret i64 %155, !dbg !4662

noerr_block183:                                   ; preds = %after_check181
  %156 = load i64, ptr %retparam178, align 8, !dbg !4662
  %add184 = add i64 %151, %156, !dbg !4661
  store i64 %add184, ptr %total_len, align 8, !dbg !4661
  br label %loop.inc, !dbg !4663

if.exit185:                                       ; preds = %if.exit162
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4664, metadata !DIExpression()), !dbg !4665
  %ptradd186 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4666
  %157 = load i64, ptr %ptradd186, align 8, !dbg !4666
  %158 = load ptr, ptr %anys, align 8, !dbg !4666
  %159 = load i64, ptr %variant_index, align 8, !dbg !4667
  %add187 = add i64 %159, 1, !dbg !4667
  store i64 %add187, ptr %variant_index, align 8, !dbg !4667
  %ge188 = icmp uge i64 %159, %157, !dbg !4667
  %160 = call i1 @llvm.expect.i1(i1 %ge188, i1 false), !dbg !4667
  br i1 %160, label %panic189, label %checkok196, !dbg !4667

checkok196:                                       ; preds = %if.exit185
  %ptroffset = getelementptr inbounds [16 x i8], ptr %158, i64 %159, !dbg !4667
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %current, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !4667
  %161 = load i8, ptr %c, align 1
  store i8 %161, ptr %switch197, align 1
  br label %switch.entry198

switch.entry198:                                  ; preds = %checkok196
  %162 = load i8, ptr %switch197, align 1
  switch i8 %162, label %switch.default581 [
    i8 100, label %switch.case199
    i8 88, label %switch.case201
    i8 120, label %switch.case203
    i8 79, label %switch.case204
    i8 111, label %switch.case206
    i8 66, label %switch.case207
    i8 98, label %switch.case209
    i8 65, label %switch.case210
    i8 97, label %switch.case212
    i8 70, label %switch.case279
    i8 102, label %switch.case281
    i8 69, label %switch.case354
    i8 101, label %switch.case356
    i8 71, label %switch.case429
    i8 103, label %switch.case431
    i8 99, label %switch.case504
    i8 115, label %switch.case516
    i8 112, label %switch.case578
  ]

switch.case199:                                   ; preds = %switch.entry198
  store i32 10, ptr %base, align 4, !dbg !4668
  %163 = load ptr, ptr %self, align 8, !dbg !4671
  %ptradd200 = getelementptr inbounds i8, ptr %163, i64 16, !dbg !4671
  %164 = load i32, ptr %ptradd200, align 8, !dbg !4672
  %165 = and i32 %164, -17, !dbg !4672
  store i32 %165, ptr %ptradd200, align 8, !dbg !4672
  br label %switch.exit603, !dbg !4672

switch.case201:                                   ; preds = %switch.entry198
  %166 = load ptr, ptr %self, align 8, !dbg !4673
  %ptradd202 = getelementptr inbounds i8, ptr %166, i64 16, !dbg !4673
  %167 = load i32, ptr %ptradd202, align 8, !dbg !4675
  %168 = and i32 %167, -33, !dbg !4675
  %169 = or i32 %168, 32, !dbg !4675
  store i32 %169, ptr %ptradd202, align 8, !dbg !4675
  br label %switch.case203, !dbg !4676

switch.case203:                                   ; preds = %switch.entry198, %switch.case201
  store i32 16, ptr %base, align 4, !dbg !4677
  br label %switch.exit603, !dbg !4677

switch.case204:                                   ; preds = %switch.entry198
  %170 = load ptr, ptr %self, align 8, !dbg !4679
  %ptradd205 = getelementptr inbounds i8, ptr %170, i64 16, !dbg !4679
  %171 = load i32, ptr %ptradd205, align 8, !dbg !4681
  %172 = and i32 %171, -33, !dbg !4681
  %173 = or i32 %172, 32, !dbg !4681
  store i32 %173, ptr %ptradd205, align 8, !dbg !4681
  br label %switch.case206, !dbg !4682

switch.case206:                                   ; preds = %switch.entry198, %switch.case204
  store i32 8, ptr %base, align 4, !dbg !4683
  br label %switch.exit603, !dbg !4683

switch.case207:                                   ; preds = %switch.entry198
  %174 = load ptr, ptr %self, align 8, !dbg !4685
  %ptradd208 = getelementptr inbounds i8, ptr %174, i64 16, !dbg !4685
  %175 = load i32, ptr %ptradd208, align 8, !dbg !4687
  %176 = and i32 %175, -33, !dbg !4687
  %177 = or i32 %176, 32, !dbg !4687
  store i32 %177, ptr %ptradd208, align 8, !dbg !4687
  br label %switch.case209, !dbg !4688

switch.case209:                                   ; preds = %switch.entry198, %switch.case207
  store i32 2, ptr %base, align 4, !dbg !4689
  br label %switch.exit603, !dbg !4689

switch.case210:                                   ; preds = %switch.entry198
  %178 = load ptr, ptr %self, align 8, !dbg !4691
  %ptradd211 = getelementptr inbounds i8, ptr %178, i64 16, !dbg !4691
  %179 = load i32, ptr %ptradd211, align 8, !dbg !4693
  %180 = and i32 %179, -33, !dbg !4693
  %181 = or i32 %180, 32, !dbg !4693
  store i32 %181, ptr %ptradd211, align 8, !dbg !4693
  br label %switch.case212, !dbg !4694

switch.case212:                                   ; preds = %switch.entry198, %switch.case210
  %182 = load i64, ptr %total_len, align 8, !dbg !4695
  %183 = load ptr, ptr %self, align 8
  store ptr %183, ptr %f214, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4697, metadata !DIExpression()), !dbg !4699
  %lo = load i64, ptr %current, align 8
  %ptradd217 = getelementptr inbounds i8, ptr %current, i64 8
  %hi = load ptr, ptr %ptradd217, align 8
  %184 = call i64 @std.io.float_from_any(ptr %retparam216, i64 %lo, ptr %hi), !dbg !4701
  %not_err218 = icmp eq i64 %184, 0, !dbg !4701
  %185 = call i1 @llvm.expect.i1(i1 %not_err218, i1 true), !dbg !4701
  br i1 %185, label %after_check220, label %assign_optional219, !dbg !4701

assign_optional219:                               ; preds = %switch.case212
  store i64 %184, ptr %len.f, align 8, !dbg !4701
  br label %after_assign225, !dbg !4701

after_check220:                                   ; preds = %switch.case212
  %186 = load ptr, ptr %self, align 8
  %187 = load double, ptr %retparam216, align 8
  %188 = call i64 @std.io.Formatter.atoa(ptr %retparam221, ptr %186, double %187), !dbg !4702
  %not_err222 = icmp eq i64 %188, 0, !dbg !4702
  %189 = call i1 @llvm.expect.i1(i1 %not_err222, i1 true), !dbg !4702
  br i1 %189, label %after_check224, label %assign_optional223, !dbg !4702

assign_optional223:                               ; preds = %after_check220
  store i64 %188, ptr %len.f, align 8, !dbg !4702
  br label %after_assign225, !dbg !4702

after_check224:                                   ; preds = %after_check220
  %190 = load i64, ptr %retparam221, align 8, !dbg !4702
  store i64 %190, ptr %len, align 8, !dbg !4702
  store i64 0, ptr %len.f, align 8, !dbg !4702
  br label %after_assign225, !dbg !4702

after_assign225:                                  ; preds = %after_check224, %assign_optional223, %assign_optional219
  call void @llvm.dbg.declare(metadata ptr %err, metadata !4703, metadata !DIExpression()), !dbg !4704
  br label %testblock226, !dbg !4704

testblock226:                                     ; preds = %after_assign225
  %optval227 = load i64, ptr %len.f, align 8, !dbg !4705
  %not_err228 = icmp eq i64 %optval227, 0, !dbg !4705
  %191 = call i1 @llvm.expect.i1(i1 %not_err228, i1 true), !dbg !4705
  br i1 %191, label %after_check230, label %assign_optional229, !dbg !4705

assign_optional229:                               ; preds = %testblock226
  store i64 %optval227, ptr %err, align 8, !dbg !4705
  br label %end_block231, !dbg !4705

after_check230:                                   ; preds = %testblock226
  store i64 0, ptr %err, align 8, !dbg !4705
  br label %end_block231, !dbg !4705

end_block231:                                     ; preds = %after_check230, %assign_optional229
  %192 = load i64, ptr %err, align 8, !dbg !4705
  %neq232 = icmp ne i64 %192, 0, !dbg !4705
  br i1 %neq232, label %if.then233, label %if.exit275, !dbg !4705

if.then233:                                       ; preds = %end_block231
  store i64 %192, ptr %switch234, align 8
  br label %switch.entry235

switch.entry235:                                  ; preds = %if.then233
  %193 = load i64, ptr %switch234, align 8
  %eq236 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %193, !dbg !4706
  br i1 %eq236, label %switch.case238, label %next_if, !dbg !4706

next_if:                                          ; preds = %switch.entry235
  %eq237 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %193, !dbg !4707
  br i1 %eq237, label %switch.case238, label %next_if252, !dbg !4707

switch.case238:                                   ; preds = %next_if, %switch.entry235
  %194 = load ptr, ptr %f214, align 8
  store ptr %194, ptr %self239, align 8
  %195 = load i64, ptr %err, align 8
  store i64 %195, ptr %f240, align 8
  %196 = load ptr, ptr %self239, align 8, !dbg !4708
  %ptradd242 = getelementptr inbounds i8, ptr %196, i64 16, !dbg !4708
  %ptradd243 = getelementptr inbounds i8, ptr %ptradd242, i64 24, !dbg !4708
  %197 = load i64, ptr %ptradd243, align 8, !dbg !4708
  %neq244 = icmp ne i64 %197, 0, !dbg !4708
  br i1 %neq244, label %if.then245, label %if.exit248, !dbg !4708

if.then245:                                       ; preds = %switch.case238
  %198 = load ptr, ptr %self239, align 8, !dbg !4712
  %ptradd246 = getelementptr inbounds i8, ptr %198, i64 16, !dbg !4712
  %ptradd247 = getelementptr inbounds i8, ptr %ptradd246, i64 24, !dbg !4712
  %199 = load i64, ptr %ptradd247, align 8, !dbg !4712
  store i64 %199, ptr %blockret241, align 8, !dbg !4712
  br label %expr_block.exit251, !dbg !4712

if.exit248:                                       ; preds = %switch.case238
  %200 = load ptr, ptr %self239, align 8, !dbg !4713
  %ptradd249 = getelementptr inbounds i8, ptr %200, i64 16, !dbg !4713
  %ptradd250 = getelementptr inbounds i8, ptr %ptradd249, i64 24, !dbg !4713
  %201 = load i64, ptr %f240, align 8, !dbg !4714
  store i64 %201, ptr %ptradd250, align 8, !dbg !4714
  %202 = load i64, ptr %f240, align 8, !dbg !4715
  store i64 %202, ptr %blockret241, align 8, !dbg !4715
  br label %expr_block.exit251, !dbg !4715

expr_block.exit251:                               ; preds = %if.exit248, %if.then245
  %203 = load i64, ptr %blockret241, align 8, !dbg !4715
  store i64 %203, ptr %error_var213, align 8, !dbg !4715
  br label %guard_block276, !dbg !4715

next_if252:                                       ; preds = %next_if
  br label %switch.default253, !dbg !4715

switch.default253:                                ; preds = %next_if252
  %204 = load ptr, ptr %f214, align 8
  store ptr %204, ptr %self254, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f255, align 8
  %205 = load ptr, ptr %self254, align 8, !dbg !4716
  %ptradd257 = getelementptr inbounds i8, ptr %205, i64 16, !dbg !4716
  %ptradd258 = getelementptr inbounds i8, ptr %ptradd257, i64 24, !dbg !4716
  %206 = load i64, ptr %ptradd258, align 8, !dbg !4716
  %neq259 = icmp ne i64 %206, 0, !dbg !4716
  br i1 %neq259, label %if.then260, label %if.exit263, !dbg !4716

if.then260:                                       ; preds = %switch.default253
  %207 = load ptr, ptr %self254, align 8, !dbg !4720
  %ptradd261 = getelementptr inbounds i8, ptr %207, i64 16, !dbg !4720
  %ptradd262 = getelementptr inbounds i8, ptr %ptradd261, i64 24, !dbg !4720
  %208 = load i64, ptr %ptradd262, align 8, !dbg !4720
  store i64 %208, ptr %blockret256, align 8, !dbg !4720
  br label %expr_block.exit266, !dbg !4720

if.exit263:                                       ; preds = %switch.default253
  %209 = load ptr, ptr %self254, align 8, !dbg !4721
  %ptradd264 = getelementptr inbounds i8, ptr %209, i64 16, !dbg !4721
  %ptradd265 = getelementptr inbounds i8, ptr %ptradd264, i64 24, !dbg !4721
  %210 = load i64, ptr %f255, align 8, !dbg !4722
  store i64 %210, ptr %ptradd265, align 8, !dbg !4722
  %211 = load i64, ptr %f255, align 8, !dbg !4723
  store i64 %211, ptr %blockret256, align 8, !dbg !4723
  br label %expr_block.exit266, !dbg !4723

expr_block.exit266:                               ; preds = %if.exit263, %if.then260
  %212 = load i64, ptr %blockret256, align 8, !dbg !4723
  store i64 %212, ptr %err, align 8, !dbg !4723
  %213 = load ptr, ptr %f214, align 8
  %214 = call i64 @std.io.Formatter.out_substr(ptr %retparam268, ptr %213, ptr @.str.244, i64 9), !dbg !4724
  %not_err269 = icmp eq i64 %214, 0, !dbg !4724
  %215 = call i1 @llvm.expect.i1(i1 %not_err269, i1 true), !dbg !4724
  br i1 %215, label %after_check271, label %assign_optional270, !dbg !4724

assign_optional270:                               ; preds = %expr_block.exit266
  store i64 %214, ptr %error_var267, align 8, !dbg !4724
  br label %guard_block272, !dbg !4724

after_check271:                                   ; preds = %expr_block.exit266
  br label %noerr_block273, !dbg !4724

guard_block272:                                   ; preds = %assign_optional270
  %216 = load i64, ptr %error_var267, align 8, !dbg !4724
  store i64 %216, ptr %error_var213, align 8, !dbg !4724
  br label %guard_block276, !dbg !4724

noerr_block273:                                   ; preds = %after_check271
  %217 = load i64, ptr %err, align 8, !dbg !4725
  store i64 %217, ptr %error_var213, align 8, !dbg !4725
  br label %guard_block276, !dbg !4725

if.exit275:                                       ; preds = %end_block231
  br label %noerr_block277, !dbg !4726

guard_block276:                                   ; preds = %noerr_block273, %guard_block272, %expr_block.exit251
  %218 = load i64, ptr %error_var213, align 8, !dbg !4726
  ret i64 %218, !dbg !4726

noerr_block277:                                   ; preds = %if.exit275
  %219 = load i64, ptr %len, align 8, !dbg !4726
  %add278 = add i64 %182, %219, !dbg !4695
  store i64 %add278, ptr %total_len, align 8, !dbg !4695
  br label %loop.inc, !dbg !4727

switch.case279:                                   ; preds = %switch.entry198
  %220 = load ptr, ptr %self, align 8, !dbg !4728
  %ptradd280 = getelementptr inbounds i8, ptr %220, i64 16, !dbg !4728
  %221 = load i32, ptr %ptradd280, align 8, !dbg !4730
  %222 = and i32 %221, -33, !dbg !4730
  %223 = or i32 %222, 32, !dbg !4730
  store i32 %223, ptr %ptradd280, align 8, !dbg !4730
  br label %switch.case281, !dbg !4731

switch.case281:                                   ; preds = %switch.entry198, %switch.case279
  %224 = load i64, ptr %total_len, align 8, !dbg !4732
  %225 = load ptr, ptr %self, align 8
  store ptr %225, ptr %f283, align 8
  call void @llvm.dbg.declare(metadata ptr %len285, metadata !4734, metadata !DIExpression()), !dbg !4736
  %lo288 = load i64, ptr %current, align 8
  %ptradd289 = getelementptr inbounds i8, ptr %current, i64 8
  %hi290 = load ptr, ptr %ptradd289, align 8
  %226 = call i64 @std.io.float_from_any(ptr %retparam287, i64 %lo288, ptr %hi290), !dbg !4738
  %not_err291 = icmp eq i64 %226, 0, !dbg !4738
  %227 = call i1 @llvm.expect.i1(i1 %not_err291, i1 true), !dbg !4738
  br i1 %227, label %after_check293, label %assign_optional292, !dbg !4738

assign_optional292:                               ; preds = %switch.case281
  store i64 %226, ptr %len.f286, align 8, !dbg !4738
  br label %after_assign298, !dbg !4738

after_check293:                                   ; preds = %switch.case281
  %228 = load ptr, ptr %self, align 8
  %229 = load double, ptr %retparam287, align 8
  %230 = call i64 @std.io.Formatter.ftoa(ptr %retparam294, ptr %228, double %229), !dbg !4739
  %not_err295 = icmp eq i64 %230, 0, !dbg !4739
  %231 = call i1 @llvm.expect.i1(i1 %not_err295, i1 true), !dbg !4739
  br i1 %231, label %after_check297, label %assign_optional296, !dbg !4739

assign_optional296:                               ; preds = %after_check293
  store i64 %230, ptr %len.f286, align 8, !dbg !4739
  br label %after_assign298, !dbg !4739

after_check297:                                   ; preds = %after_check293
  %232 = load i64, ptr %retparam294, align 8, !dbg !4739
  store i64 %232, ptr %len285, align 8, !dbg !4739
  store i64 0, ptr %len.f286, align 8, !dbg !4739
  br label %after_assign298, !dbg !4739

after_assign298:                                  ; preds = %after_check297, %assign_optional296, %assign_optional292
  call void @llvm.dbg.declare(metadata ptr %err299, metadata !4740, metadata !DIExpression()), !dbg !4741
  br label %testblock300, !dbg !4741

testblock300:                                     ; preds = %after_assign298
  %optval301 = load i64, ptr %len.f286, align 8, !dbg !4742
  %not_err302 = icmp eq i64 %optval301, 0, !dbg !4742
  %233 = call i1 @llvm.expect.i1(i1 %not_err302, i1 true), !dbg !4742
  br i1 %233, label %after_check304, label %assign_optional303, !dbg !4742

assign_optional303:                               ; preds = %testblock300
  store i64 %optval301, ptr %err299, align 8, !dbg !4742
  br label %end_block305, !dbg !4742

after_check304:                                   ; preds = %testblock300
  store i64 0, ptr %err299, align 8, !dbg !4742
  br label %end_block305, !dbg !4742

end_block305:                                     ; preds = %after_check304, %assign_optional303
  %234 = load i64, ptr %err299, align 8, !dbg !4742
  %neq306 = icmp ne i64 %234, 0, !dbg !4742
  br i1 %neq306, label %if.then307, label %if.exit350, !dbg !4742

if.then307:                                       ; preds = %end_block305
  store i64 %234, ptr %switch308, align 8
  br label %switch.entry309

switch.entry309:                                  ; preds = %if.then307
  %235 = load i64, ptr %switch308, align 8
  %eq310 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %235, !dbg !4743
  br i1 %eq310, label %switch.case313, label %next_if311, !dbg !4743

next_if311:                                       ; preds = %switch.entry309
  %eq312 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %235, !dbg !4744
  br i1 %eq312, label %switch.case313, label %next_if327, !dbg !4744

switch.case313:                                   ; preds = %next_if311, %switch.entry309
  %236 = load ptr, ptr %f283, align 8
  store ptr %236, ptr %self314, align 8
  %237 = load i64, ptr %err299, align 8
  store i64 %237, ptr %f315, align 8
  %238 = load ptr, ptr %self314, align 8, !dbg !4745
  %ptradd317 = getelementptr inbounds i8, ptr %238, i64 16, !dbg !4745
  %ptradd318 = getelementptr inbounds i8, ptr %ptradd317, i64 24, !dbg !4745
  %239 = load i64, ptr %ptradd318, align 8, !dbg !4745
  %neq319 = icmp ne i64 %239, 0, !dbg !4745
  br i1 %neq319, label %if.then320, label %if.exit323, !dbg !4745

if.then320:                                       ; preds = %switch.case313
  %240 = load ptr, ptr %self314, align 8, !dbg !4749
  %ptradd321 = getelementptr inbounds i8, ptr %240, i64 16, !dbg !4749
  %ptradd322 = getelementptr inbounds i8, ptr %ptradd321, i64 24, !dbg !4749
  %241 = load i64, ptr %ptradd322, align 8, !dbg !4749
  store i64 %241, ptr %blockret316, align 8, !dbg !4749
  br label %expr_block.exit326, !dbg !4749

if.exit323:                                       ; preds = %switch.case313
  %242 = load ptr, ptr %self314, align 8, !dbg !4750
  %ptradd324 = getelementptr inbounds i8, ptr %242, i64 16, !dbg !4750
  %ptradd325 = getelementptr inbounds i8, ptr %ptradd324, i64 24, !dbg !4750
  %243 = load i64, ptr %f315, align 8, !dbg !4751
  store i64 %243, ptr %ptradd325, align 8, !dbg !4751
  %244 = load i64, ptr %f315, align 8, !dbg !4752
  store i64 %244, ptr %blockret316, align 8, !dbg !4752
  br label %expr_block.exit326, !dbg !4752

expr_block.exit326:                               ; preds = %if.exit323, %if.then320
  %245 = load i64, ptr %blockret316, align 8, !dbg !4752
  store i64 %245, ptr %error_var282, align 8, !dbg !4752
  br label %guard_block351, !dbg !4752

next_if327:                                       ; preds = %next_if311
  br label %switch.default328, !dbg !4752

switch.default328:                                ; preds = %next_if327
  %246 = load ptr, ptr %f283, align 8
  store ptr %246, ptr %self329, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f330, align 8
  %247 = load ptr, ptr %self329, align 8, !dbg !4753
  %ptradd332 = getelementptr inbounds i8, ptr %247, i64 16, !dbg !4753
  %ptradd333 = getelementptr inbounds i8, ptr %ptradd332, i64 24, !dbg !4753
  %248 = load i64, ptr %ptradd333, align 8, !dbg !4753
  %neq334 = icmp ne i64 %248, 0, !dbg !4753
  br i1 %neq334, label %if.then335, label %if.exit338, !dbg !4753

if.then335:                                       ; preds = %switch.default328
  %249 = load ptr, ptr %self329, align 8, !dbg !4757
  %ptradd336 = getelementptr inbounds i8, ptr %249, i64 16, !dbg !4757
  %ptradd337 = getelementptr inbounds i8, ptr %ptradd336, i64 24, !dbg !4757
  %250 = load i64, ptr %ptradd337, align 8, !dbg !4757
  store i64 %250, ptr %blockret331, align 8, !dbg !4757
  br label %expr_block.exit341, !dbg !4757

if.exit338:                                       ; preds = %switch.default328
  %251 = load ptr, ptr %self329, align 8, !dbg !4758
  %ptradd339 = getelementptr inbounds i8, ptr %251, i64 16, !dbg !4758
  %ptradd340 = getelementptr inbounds i8, ptr %ptradd339, i64 24, !dbg !4758
  %252 = load i64, ptr %f330, align 8, !dbg !4759
  store i64 %252, ptr %ptradd340, align 8, !dbg !4759
  %253 = load i64, ptr %f330, align 8, !dbg !4760
  store i64 %253, ptr %blockret331, align 8, !dbg !4760
  br label %expr_block.exit341, !dbg !4760

expr_block.exit341:                               ; preds = %if.exit338, %if.then335
  %254 = load i64, ptr %blockret331, align 8, !dbg !4760
  store i64 %254, ptr %err299, align 8, !dbg !4760
  %255 = load ptr, ptr %f283, align 8
  %256 = call i64 @std.io.Formatter.out_substr(ptr %retparam343, ptr %255, ptr @.str.245, i64 9), !dbg !4761
  %not_err344 = icmp eq i64 %256, 0, !dbg !4761
  %257 = call i1 @llvm.expect.i1(i1 %not_err344, i1 true), !dbg !4761
  br i1 %257, label %after_check346, label %assign_optional345, !dbg !4761

assign_optional345:                               ; preds = %expr_block.exit341
  store i64 %256, ptr %error_var342, align 8, !dbg !4761
  br label %guard_block347, !dbg !4761

after_check346:                                   ; preds = %expr_block.exit341
  br label %noerr_block348, !dbg !4761

guard_block347:                                   ; preds = %assign_optional345
  %258 = load i64, ptr %error_var342, align 8, !dbg !4761
  store i64 %258, ptr %error_var282, align 8, !dbg !4761
  br label %guard_block351, !dbg !4761

noerr_block348:                                   ; preds = %after_check346
  %259 = load i64, ptr %err299, align 8, !dbg !4762
  store i64 %259, ptr %error_var282, align 8, !dbg !4762
  br label %guard_block351, !dbg !4762

if.exit350:                                       ; preds = %end_block305
  br label %noerr_block352, !dbg !4763

guard_block351:                                   ; preds = %noerr_block348, %guard_block347, %expr_block.exit326
  %260 = load i64, ptr %error_var282, align 8, !dbg !4763
  ret i64 %260, !dbg !4763

noerr_block352:                                   ; preds = %if.exit350
  %261 = load i64, ptr %len285, align 8, !dbg !4763
  %add353 = add i64 %224, %261, !dbg !4732
  store i64 %add353, ptr %total_len, align 8, !dbg !4732
  br label %loop.inc, !dbg !4764

switch.case354:                                   ; preds = %switch.entry198
  %262 = load ptr, ptr %self, align 8, !dbg !4765
  %ptradd355 = getelementptr inbounds i8, ptr %262, i64 16, !dbg !4765
  %263 = load i32, ptr %ptradd355, align 8, !dbg !4767
  %264 = and i32 %263, -33, !dbg !4767
  %265 = or i32 %264, 32, !dbg !4767
  store i32 %265, ptr %ptradd355, align 8, !dbg !4767
  br label %switch.case356, !dbg !4768

switch.case356:                                   ; preds = %switch.entry198, %switch.case354
  %266 = load i64, ptr %total_len, align 8, !dbg !4769
  %267 = load ptr, ptr %self, align 8
  store ptr %267, ptr %f358, align 8
  call void @llvm.dbg.declare(metadata ptr %len360, metadata !4771, metadata !DIExpression()), !dbg !4773
  %lo363 = load i64, ptr %current, align 8
  %ptradd364 = getelementptr inbounds i8, ptr %current, i64 8
  %hi365 = load ptr, ptr %ptradd364, align 8
  %268 = call i64 @std.io.float_from_any(ptr %retparam362, i64 %lo363, ptr %hi365), !dbg !4775
  %not_err366 = icmp eq i64 %268, 0, !dbg !4775
  %269 = call i1 @llvm.expect.i1(i1 %not_err366, i1 true), !dbg !4775
  br i1 %269, label %after_check368, label %assign_optional367, !dbg !4775

assign_optional367:                               ; preds = %switch.case356
  store i64 %268, ptr %len.f361, align 8, !dbg !4775
  br label %after_assign373, !dbg !4775

after_check368:                                   ; preds = %switch.case356
  %270 = load ptr, ptr %self, align 8
  %271 = load double, ptr %retparam362, align 8
  %272 = call i64 @std.io.Formatter.etoa(ptr %retparam369, ptr %270, double %271), !dbg !4776
  %not_err370 = icmp eq i64 %272, 0, !dbg !4776
  %273 = call i1 @llvm.expect.i1(i1 %not_err370, i1 true), !dbg !4776
  br i1 %273, label %after_check372, label %assign_optional371, !dbg !4776

assign_optional371:                               ; preds = %after_check368
  store i64 %272, ptr %len.f361, align 8, !dbg !4776
  br label %after_assign373, !dbg !4776

after_check372:                                   ; preds = %after_check368
  %274 = load i64, ptr %retparam369, align 8, !dbg !4776
  store i64 %274, ptr %len360, align 8, !dbg !4776
  store i64 0, ptr %len.f361, align 8, !dbg !4776
  br label %after_assign373, !dbg !4776

after_assign373:                                  ; preds = %after_check372, %assign_optional371, %assign_optional367
  call void @llvm.dbg.declare(metadata ptr %err374, metadata !4777, metadata !DIExpression()), !dbg !4778
  br label %testblock375, !dbg !4778

testblock375:                                     ; preds = %after_assign373
  %optval376 = load i64, ptr %len.f361, align 8, !dbg !4779
  %not_err377 = icmp eq i64 %optval376, 0, !dbg !4779
  %275 = call i1 @llvm.expect.i1(i1 %not_err377, i1 true), !dbg !4779
  br i1 %275, label %after_check379, label %assign_optional378, !dbg !4779

assign_optional378:                               ; preds = %testblock375
  store i64 %optval376, ptr %err374, align 8, !dbg !4779
  br label %end_block380, !dbg !4779

after_check379:                                   ; preds = %testblock375
  store i64 0, ptr %err374, align 8, !dbg !4779
  br label %end_block380, !dbg !4779

end_block380:                                     ; preds = %after_check379, %assign_optional378
  %276 = load i64, ptr %err374, align 8, !dbg !4779
  %neq381 = icmp ne i64 %276, 0, !dbg !4779
  br i1 %neq381, label %if.then382, label %if.exit425, !dbg !4779

if.then382:                                       ; preds = %end_block380
  store i64 %276, ptr %switch383, align 8
  br label %switch.entry384

switch.entry384:                                  ; preds = %if.then382
  %277 = load i64, ptr %switch383, align 8
  %eq385 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %277, !dbg !4780
  br i1 %eq385, label %switch.case388, label %next_if386, !dbg !4780

next_if386:                                       ; preds = %switch.entry384
  %eq387 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %277, !dbg !4781
  br i1 %eq387, label %switch.case388, label %next_if402, !dbg !4781

switch.case388:                                   ; preds = %next_if386, %switch.entry384
  %278 = load ptr, ptr %f358, align 8
  store ptr %278, ptr %self389, align 8
  %279 = load i64, ptr %err374, align 8
  store i64 %279, ptr %f390, align 8
  %280 = load ptr, ptr %self389, align 8, !dbg !4782
  %ptradd392 = getelementptr inbounds i8, ptr %280, i64 16, !dbg !4782
  %ptradd393 = getelementptr inbounds i8, ptr %ptradd392, i64 24, !dbg !4782
  %281 = load i64, ptr %ptradd393, align 8, !dbg !4782
  %neq394 = icmp ne i64 %281, 0, !dbg !4782
  br i1 %neq394, label %if.then395, label %if.exit398, !dbg !4782

if.then395:                                       ; preds = %switch.case388
  %282 = load ptr, ptr %self389, align 8, !dbg !4786
  %ptradd396 = getelementptr inbounds i8, ptr %282, i64 16, !dbg !4786
  %ptradd397 = getelementptr inbounds i8, ptr %ptradd396, i64 24, !dbg !4786
  %283 = load i64, ptr %ptradd397, align 8, !dbg !4786
  store i64 %283, ptr %blockret391, align 8, !dbg !4786
  br label %expr_block.exit401, !dbg !4786

if.exit398:                                       ; preds = %switch.case388
  %284 = load ptr, ptr %self389, align 8, !dbg !4787
  %ptradd399 = getelementptr inbounds i8, ptr %284, i64 16, !dbg !4787
  %ptradd400 = getelementptr inbounds i8, ptr %ptradd399, i64 24, !dbg !4787
  %285 = load i64, ptr %f390, align 8, !dbg !4788
  store i64 %285, ptr %ptradd400, align 8, !dbg !4788
  %286 = load i64, ptr %f390, align 8, !dbg !4789
  store i64 %286, ptr %blockret391, align 8, !dbg !4789
  br label %expr_block.exit401, !dbg !4789

expr_block.exit401:                               ; preds = %if.exit398, %if.then395
  %287 = load i64, ptr %blockret391, align 8, !dbg !4789
  store i64 %287, ptr %error_var357, align 8, !dbg !4789
  br label %guard_block426, !dbg !4789

next_if402:                                       ; preds = %next_if386
  br label %switch.default403, !dbg !4789

switch.default403:                                ; preds = %next_if402
  %288 = load ptr, ptr %f358, align 8
  store ptr %288, ptr %self404, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f405, align 8
  %289 = load ptr, ptr %self404, align 8, !dbg !4790
  %ptradd407 = getelementptr inbounds i8, ptr %289, i64 16, !dbg !4790
  %ptradd408 = getelementptr inbounds i8, ptr %ptradd407, i64 24, !dbg !4790
  %290 = load i64, ptr %ptradd408, align 8, !dbg !4790
  %neq409 = icmp ne i64 %290, 0, !dbg !4790
  br i1 %neq409, label %if.then410, label %if.exit413, !dbg !4790

if.then410:                                       ; preds = %switch.default403
  %291 = load ptr, ptr %self404, align 8, !dbg !4794
  %ptradd411 = getelementptr inbounds i8, ptr %291, i64 16, !dbg !4794
  %ptradd412 = getelementptr inbounds i8, ptr %ptradd411, i64 24, !dbg !4794
  %292 = load i64, ptr %ptradd412, align 8, !dbg !4794
  store i64 %292, ptr %blockret406, align 8, !dbg !4794
  br label %expr_block.exit416, !dbg !4794

if.exit413:                                       ; preds = %switch.default403
  %293 = load ptr, ptr %self404, align 8, !dbg !4795
  %ptradd414 = getelementptr inbounds i8, ptr %293, i64 16, !dbg !4795
  %ptradd415 = getelementptr inbounds i8, ptr %ptradd414, i64 24, !dbg !4795
  %294 = load i64, ptr %f405, align 8, !dbg !4796
  store i64 %294, ptr %ptradd415, align 8, !dbg !4796
  %295 = load i64, ptr %f405, align 8, !dbg !4797
  store i64 %295, ptr %blockret406, align 8, !dbg !4797
  br label %expr_block.exit416, !dbg !4797

expr_block.exit416:                               ; preds = %if.exit413, %if.then410
  %296 = load i64, ptr %blockret406, align 8, !dbg !4797
  store i64 %296, ptr %err374, align 8, !dbg !4797
  %297 = load ptr, ptr %f358, align 8
  %298 = call i64 @std.io.Formatter.out_substr(ptr %retparam418, ptr %297, ptr @.str.246, i64 9), !dbg !4798
  %not_err419 = icmp eq i64 %298, 0, !dbg !4798
  %299 = call i1 @llvm.expect.i1(i1 %not_err419, i1 true), !dbg !4798
  br i1 %299, label %after_check421, label %assign_optional420, !dbg !4798

assign_optional420:                               ; preds = %expr_block.exit416
  store i64 %298, ptr %error_var417, align 8, !dbg !4798
  br label %guard_block422, !dbg !4798

after_check421:                                   ; preds = %expr_block.exit416
  br label %noerr_block423, !dbg !4798

guard_block422:                                   ; preds = %assign_optional420
  %300 = load i64, ptr %error_var417, align 8, !dbg !4798
  store i64 %300, ptr %error_var357, align 8, !dbg !4798
  br label %guard_block426, !dbg !4798

noerr_block423:                                   ; preds = %after_check421
  %301 = load i64, ptr %err374, align 8, !dbg !4799
  store i64 %301, ptr %error_var357, align 8, !dbg !4799
  br label %guard_block426, !dbg !4799

if.exit425:                                       ; preds = %end_block380
  br label %noerr_block427, !dbg !4800

guard_block426:                                   ; preds = %noerr_block423, %guard_block422, %expr_block.exit401
  %302 = load i64, ptr %error_var357, align 8, !dbg !4800
  ret i64 %302, !dbg !4800

noerr_block427:                                   ; preds = %if.exit425
  %303 = load i64, ptr %len360, align 8, !dbg !4800
  %add428 = add i64 %266, %303, !dbg !4769
  store i64 %add428, ptr %total_len, align 8, !dbg !4769
  br label %loop.inc, !dbg !4801

switch.case429:                                   ; preds = %switch.entry198
  %304 = load ptr, ptr %self, align 8, !dbg !4802
  %ptradd430 = getelementptr inbounds i8, ptr %304, i64 16, !dbg !4802
  %305 = load i32, ptr %ptradd430, align 8, !dbg !4804
  %306 = and i32 %305, -33, !dbg !4804
  %307 = or i32 %306, 32, !dbg !4804
  store i32 %307, ptr %ptradd430, align 8, !dbg !4804
  br label %switch.case431, !dbg !4805

switch.case431:                                   ; preds = %switch.entry198, %switch.case429
  %308 = load i64, ptr %total_len, align 8, !dbg !4806
  %309 = load ptr, ptr %self, align 8
  store ptr %309, ptr %f433, align 8
  call void @llvm.dbg.declare(metadata ptr %len435, metadata !4808, metadata !DIExpression()), !dbg !4810
  %lo438 = load i64, ptr %current, align 8
  %ptradd439 = getelementptr inbounds i8, ptr %current, i64 8
  %hi440 = load ptr, ptr %ptradd439, align 8
  %310 = call i64 @std.io.float_from_any(ptr %retparam437, i64 %lo438, ptr %hi440), !dbg !4812
  %not_err441 = icmp eq i64 %310, 0, !dbg !4812
  %311 = call i1 @llvm.expect.i1(i1 %not_err441, i1 true), !dbg !4812
  br i1 %311, label %after_check443, label %assign_optional442, !dbg !4812

assign_optional442:                               ; preds = %switch.case431
  store i64 %310, ptr %len.f436, align 8, !dbg !4812
  br label %after_assign448, !dbg !4812

after_check443:                                   ; preds = %switch.case431
  %312 = load ptr, ptr %self, align 8
  %313 = load double, ptr %retparam437, align 8
  %314 = call i64 @std.io.Formatter.gtoa(ptr %retparam444, ptr %312, double %313), !dbg !4813
  %not_err445 = icmp eq i64 %314, 0, !dbg !4813
  %315 = call i1 @llvm.expect.i1(i1 %not_err445, i1 true), !dbg !4813
  br i1 %315, label %after_check447, label %assign_optional446, !dbg !4813

assign_optional446:                               ; preds = %after_check443
  store i64 %314, ptr %len.f436, align 8, !dbg !4813
  br label %after_assign448, !dbg !4813

after_check447:                                   ; preds = %after_check443
  %316 = load i64, ptr %retparam444, align 8, !dbg !4813
  store i64 %316, ptr %len435, align 8, !dbg !4813
  store i64 0, ptr %len.f436, align 8, !dbg !4813
  br label %after_assign448, !dbg !4813

after_assign448:                                  ; preds = %after_check447, %assign_optional446, %assign_optional442
  call void @llvm.dbg.declare(metadata ptr %err449, metadata !4814, metadata !DIExpression()), !dbg !4815
  br label %testblock450, !dbg !4815

testblock450:                                     ; preds = %after_assign448
  %optval451 = load i64, ptr %len.f436, align 8, !dbg !4816
  %not_err452 = icmp eq i64 %optval451, 0, !dbg !4816
  %317 = call i1 @llvm.expect.i1(i1 %not_err452, i1 true), !dbg !4816
  br i1 %317, label %after_check454, label %assign_optional453, !dbg !4816

assign_optional453:                               ; preds = %testblock450
  store i64 %optval451, ptr %err449, align 8, !dbg !4816
  br label %end_block455, !dbg !4816

after_check454:                                   ; preds = %testblock450
  store i64 0, ptr %err449, align 8, !dbg !4816
  br label %end_block455, !dbg !4816

end_block455:                                     ; preds = %after_check454, %assign_optional453
  %318 = load i64, ptr %err449, align 8, !dbg !4816
  %neq456 = icmp ne i64 %318, 0, !dbg !4816
  br i1 %neq456, label %if.then457, label %if.exit500, !dbg !4816

if.then457:                                       ; preds = %end_block455
  store i64 %318, ptr %switch458, align 8
  br label %switch.entry459

switch.entry459:                                  ; preds = %if.then457
  %319 = load i64, ptr %switch458, align 8
  %eq460 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %319, !dbg !4817
  br i1 %eq460, label %switch.case463, label %next_if461, !dbg !4817

next_if461:                                       ; preds = %switch.entry459
  %eq462 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %319, !dbg !4818
  br i1 %eq462, label %switch.case463, label %next_if477, !dbg !4818

switch.case463:                                   ; preds = %next_if461, %switch.entry459
  %320 = load ptr, ptr %f433, align 8
  store ptr %320, ptr %self464, align 8
  %321 = load i64, ptr %err449, align 8
  store i64 %321, ptr %f465, align 8
  %322 = load ptr, ptr %self464, align 8, !dbg !4819
  %ptradd467 = getelementptr inbounds i8, ptr %322, i64 16, !dbg !4819
  %ptradd468 = getelementptr inbounds i8, ptr %ptradd467, i64 24, !dbg !4819
  %323 = load i64, ptr %ptradd468, align 8, !dbg !4819
  %neq469 = icmp ne i64 %323, 0, !dbg !4819
  br i1 %neq469, label %if.then470, label %if.exit473, !dbg !4819

if.then470:                                       ; preds = %switch.case463
  %324 = load ptr, ptr %self464, align 8, !dbg !4823
  %ptradd471 = getelementptr inbounds i8, ptr %324, i64 16, !dbg !4823
  %ptradd472 = getelementptr inbounds i8, ptr %ptradd471, i64 24, !dbg !4823
  %325 = load i64, ptr %ptradd472, align 8, !dbg !4823
  store i64 %325, ptr %blockret466, align 8, !dbg !4823
  br label %expr_block.exit476, !dbg !4823

if.exit473:                                       ; preds = %switch.case463
  %326 = load ptr, ptr %self464, align 8, !dbg !4824
  %ptradd474 = getelementptr inbounds i8, ptr %326, i64 16, !dbg !4824
  %ptradd475 = getelementptr inbounds i8, ptr %ptradd474, i64 24, !dbg !4824
  %327 = load i64, ptr %f465, align 8, !dbg !4825
  store i64 %327, ptr %ptradd475, align 8, !dbg !4825
  %328 = load i64, ptr %f465, align 8, !dbg !4826
  store i64 %328, ptr %blockret466, align 8, !dbg !4826
  br label %expr_block.exit476, !dbg !4826

expr_block.exit476:                               ; preds = %if.exit473, %if.then470
  %329 = load i64, ptr %blockret466, align 8, !dbg !4826
  store i64 %329, ptr %error_var432, align 8, !dbg !4826
  br label %guard_block501, !dbg !4826

next_if477:                                       ; preds = %next_if461
  br label %switch.default478, !dbg !4826

switch.default478:                                ; preds = %next_if477
  %330 = load ptr, ptr %f433, align 8
  store ptr %330, ptr %self479, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f480, align 8
  %331 = load ptr, ptr %self479, align 8, !dbg !4827
  %ptradd482 = getelementptr inbounds i8, ptr %331, i64 16, !dbg !4827
  %ptradd483 = getelementptr inbounds i8, ptr %ptradd482, i64 24, !dbg !4827
  %332 = load i64, ptr %ptradd483, align 8, !dbg !4827
  %neq484 = icmp ne i64 %332, 0, !dbg !4827
  br i1 %neq484, label %if.then485, label %if.exit488, !dbg !4827

if.then485:                                       ; preds = %switch.default478
  %333 = load ptr, ptr %self479, align 8, !dbg !4831
  %ptradd486 = getelementptr inbounds i8, ptr %333, i64 16, !dbg !4831
  %ptradd487 = getelementptr inbounds i8, ptr %ptradd486, i64 24, !dbg !4831
  %334 = load i64, ptr %ptradd487, align 8, !dbg !4831
  store i64 %334, ptr %blockret481, align 8, !dbg !4831
  br label %expr_block.exit491, !dbg !4831

if.exit488:                                       ; preds = %switch.default478
  %335 = load ptr, ptr %self479, align 8, !dbg !4832
  %ptradd489 = getelementptr inbounds i8, ptr %335, i64 16, !dbg !4832
  %ptradd490 = getelementptr inbounds i8, ptr %ptradd489, i64 24, !dbg !4832
  %336 = load i64, ptr %f480, align 8, !dbg !4833
  store i64 %336, ptr %ptradd490, align 8, !dbg !4833
  %337 = load i64, ptr %f480, align 8, !dbg !4834
  store i64 %337, ptr %blockret481, align 8, !dbg !4834
  br label %expr_block.exit491, !dbg !4834

expr_block.exit491:                               ; preds = %if.exit488, %if.then485
  %338 = load i64, ptr %blockret481, align 8, !dbg !4834
  store i64 %338, ptr %err449, align 8, !dbg !4834
  %339 = load ptr, ptr %f433, align 8
  %340 = call i64 @std.io.Formatter.out_substr(ptr %retparam493, ptr %339, ptr @.str.247, i64 9), !dbg !4835
  %not_err494 = icmp eq i64 %340, 0, !dbg !4835
  %341 = call i1 @llvm.expect.i1(i1 %not_err494, i1 true), !dbg !4835
  br i1 %341, label %after_check496, label %assign_optional495, !dbg !4835

assign_optional495:                               ; preds = %expr_block.exit491
  store i64 %340, ptr %error_var492, align 8, !dbg !4835
  br label %guard_block497, !dbg !4835

after_check496:                                   ; preds = %expr_block.exit491
  br label %noerr_block498, !dbg !4835

guard_block497:                                   ; preds = %assign_optional495
  %342 = load i64, ptr %error_var492, align 8, !dbg !4835
  store i64 %342, ptr %error_var432, align 8, !dbg !4835
  br label %guard_block501, !dbg !4835

noerr_block498:                                   ; preds = %after_check496
  %343 = load i64, ptr %err449, align 8, !dbg !4836
  store i64 %343, ptr %error_var432, align 8, !dbg !4836
  br label %guard_block501, !dbg !4836

if.exit500:                                       ; preds = %end_block455
  br label %noerr_block502, !dbg !4837

guard_block501:                                   ; preds = %noerr_block498, %guard_block497, %expr_block.exit476
  %344 = load i64, ptr %error_var432, align 8, !dbg !4837
  ret i64 %344, !dbg !4837

noerr_block502:                                   ; preds = %if.exit500
  %345 = load i64, ptr %len435, align 8, !dbg !4837
  %add503 = add i64 %308, %345, !dbg !4806
  store i64 %add503, ptr %total_len, align 8, !dbg !4806
  br label %loop.inc, !dbg !4838

switch.case504:                                   ; preds = %switch.entry198
  %346 = load i64, ptr %total_len, align 8, !dbg !4839
  %347 = load ptr, ptr %self, align 8
  %lo507 = load i64, ptr %current, align 8
  %ptradd508 = getelementptr inbounds i8, ptr %current, i64 8
  %hi509 = load ptr, ptr %ptradd508, align 8
  %348 = call i64 @std.io.Formatter.out_char(ptr %retparam506, ptr %347, i64 %lo507, ptr %hi509), !dbg !4841
  %not_err510 = icmp eq i64 %348, 0, !dbg !4841
  %349 = call i1 @llvm.expect.i1(i1 %not_err510, i1 true), !dbg !4841
  br i1 %349, label %after_check512, label %assign_optional511, !dbg !4841

assign_optional511:                               ; preds = %switch.case504
  store i64 %348, ptr %error_var505, align 8, !dbg !4841
  br label %guard_block513, !dbg !4841

after_check512:                                   ; preds = %switch.case504
  br label %noerr_block514, !dbg !4841

guard_block513:                                   ; preds = %assign_optional511
  %350 = load i64, ptr %error_var505, align 8, !dbg !4841
  ret i64 %350, !dbg !4841

noerr_block514:                                   ; preds = %after_check512
  %351 = load i64, ptr %retparam506, align 8, !dbg !4841
  %add515 = add i64 %346, %351, !dbg !4839
  store i64 %add515, ptr %total_len, align 8, !dbg !4839
  br label %loop.inc, !dbg !4842

switch.case516:                                   ; preds = %switch.entry198
  %352 = load ptr, ptr %self, align 8, !dbg !4843
  %ptradd517 = getelementptr inbounds i8, ptr %352, i64 16, !dbg !4843
  %353 = load i32, ptr %ptradd517, align 8, !dbg !4843
  %lshrl = lshr i32 %353, 1, !dbg !4843
  %354 = and i32 1, %lshrl, !dbg !4843
  %trunc = trunc i32 %354 to i8, !dbg !4843
  %355 = trunc i8 %trunc to i1, !dbg !4843
  br i1 %355, label %if.then518, label %if.exit541, !dbg !4843

if.then518:                                       ; preds = %switch.case516
  call void @llvm.dbg.declare(metadata ptr %len519, metadata !4845, metadata !DIExpression()), !dbg !4847
  %356 = load ptr, ptr %self, align 8
  %lo522 = load i64, ptr %current, align 8
  %ptradd523 = getelementptr inbounds i8, ptr %current, i64 8
  %hi524 = load ptr, ptr %ptradd523, align 8
  %357 = call i64 @std.io.Formatter.out_str(ptr %retparam521, ptr %356, i64 %lo522, ptr %hi524), !dbg !4848
  %not_err525 = icmp eq i64 %357, 0, !dbg !4848
  %358 = call i1 @llvm.expect.i1(i1 %not_err525, i1 true), !dbg !4848
  br i1 %358, label %after_check527, label %assign_optional526, !dbg !4848

assign_optional526:                               ; preds = %if.then518
  store i64 %357, ptr %error_var520, align 8, !dbg !4848
  br label %guard_block528, !dbg !4848

after_check527:                                   ; preds = %if.then518
  br label %noerr_block529, !dbg !4848

guard_block528:                                   ; preds = %assign_optional526
  %359 = load i64, ptr %error_var520, align 8, !dbg !4848
  ret i64 %359, !dbg !4848

noerr_block529:                                   ; preds = %after_check527
  %360 = load i64, ptr %retparam521, align 8, !dbg !4848
  store i64 %360, ptr %len519, align 8, !dbg !4848
  %361 = load i64, ptr %total_len, align 8, !dbg !4849
  %362 = load i64, ptr %len519, align 8, !dbg !4850
  %add530 = add i64 %361, %362, !dbg !4849
  store i64 %add530, ptr %total_len, align 8, !dbg !4849
  %363 = load i64, ptr %total_len, align 8, !dbg !4851
  %364 = load ptr, ptr %self, align 8, !dbg !4852
  %ptradd532 = getelementptr inbounds i8, ptr %364, i64 16, !dbg !4852
  %ptradd533 = getelementptr inbounds i8, ptr %ptradd532, i64 4, !dbg !4852
  %365 = load i32, ptr %ptradd533, align 4, !dbg !4852
  %zext = zext i32 %365 to i64, !dbg !4852
  %366 = load ptr, ptr %self, align 8
  %367 = load i64, ptr %len519, align 8
  %368 = call i64 @std.io.Formatter.pad(ptr %retparam534, ptr %366, i8 zeroext 32, i64 %zext, i64 %367) #5, !dbg !4853
  %not_err535 = icmp eq i64 %368, 0, !dbg !4853
  %369 = call i1 @llvm.expect.i1(i1 %not_err535, i1 true), !dbg !4853
  br i1 %369, label %after_check537, label %assign_optional536, !dbg !4853

assign_optional536:                               ; preds = %noerr_block529
  store i64 %368, ptr %error_var531, align 8, !dbg !4853
  br label %guard_block538, !dbg !4853

after_check537:                                   ; preds = %noerr_block529
  br label %noerr_block539, !dbg !4853

guard_block538:                                   ; preds = %assign_optional536
  %370 = load i64, ptr %error_var531, align 8, !dbg !4853
  ret i64 %370, !dbg !4853

noerr_block539:                                   ; preds = %after_check537
  %371 = load i64, ptr %retparam534, align 8, !dbg !4853
  %add540 = add i64 %363, %371, !dbg !4851
  store i64 %add540, ptr %total_len, align 8, !dbg !4851
  br label %loop.inc, !dbg !4854

if.exit541:                                       ; preds = %switch.case516
  call void @llvm.dbg.declare(metadata ptr %out_fn, metadata !4855, metadata !DIExpression()), !dbg !4856
  %372 = load ptr, ptr %self, align 8, !dbg !4857
  %ptradd542 = getelementptr inbounds i8, ptr %372, i64 8, !dbg !4857
  %373 = load ptr, ptr %ptradd542, align 8, !dbg !4857
  store ptr %373, ptr %out_fn, align 8, !dbg !4857
  %374 = load ptr, ptr %self, align 8, !dbg !4858
  %ptradd543 = getelementptr inbounds i8, ptr %374, i64 8, !dbg !4858
  store ptr @std.io.out_null_fn, ptr %ptradd543, align 8, !dbg !4859
  call void @llvm.dbg.declare(metadata ptr %len544, metadata !4860, metadata !DIExpression()), !dbg !4861
  %375 = load ptr, ptr %self, align 8
  %lo547 = load i64, ptr %current, align 8
  %ptradd548 = getelementptr inbounds i8, ptr %current, i64 8
  %hi549 = load ptr, ptr %ptradd548, align 8
  %376 = call i64 @std.io.Formatter.out_str(ptr %retparam546, ptr %375, i64 %lo547, ptr %hi549), !dbg !4862
  %not_err550 = icmp eq i64 %376, 0, !dbg !4862
  %377 = call i1 @llvm.expect.i1(i1 %not_err550, i1 true), !dbg !4862
  br i1 %377, label %after_check552, label %assign_optional551, !dbg !4862

assign_optional551:                               ; preds = %if.exit541
  store i64 %376, ptr %error_var545, align 8, !dbg !4862
  br label %guard_block553, !dbg !4862

after_check552:                                   ; preds = %if.exit541
  br label %noerr_block554, !dbg !4862

guard_block553:                                   ; preds = %assign_optional551
  %378 = load i64, ptr %error_var545, align 8, !dbg !4862
  ret i64 %378, !dbg !4862

noerr_block554:                                   ; preds = %after_check552
  %379 = load i64, ptr %retparam546, align 8, !dbg !4862
  store i64 %379, ptr %len544, align 8, !dbg !4862
  %380 = load ptr, ptr %self, align 8, !dbg !4863
  %ptradd555 = getelementptr inbounds i8, ptr %380, i64 8, !dbg !4863
  %381 = load ptr, ptr %out_fn, align 8, !dbg !4864
  store ptr %381, ptr %ptradd555, align 8, !dbg !4864
  %382 = load i64, ptr %total_len, align 8, !dbg !4865
  %383 = load ptr, ptr %self, align 8, !dbg !4866
  %ptradd557 = getelementptr inbounds i8, ptr %383, i64 16, !dbg !4866
  %ptradd558 = getelementptr inbounds i8, ptr %ptradd557, i64 4, !dbg !4866
  %384 = load i32, ptr %ptradd558, align 4, !dbg !4866
  %zext559 = zext i32 %384 to i64, !dbg !4866
  %385 = load ptr, ptr %self, align 8
  %386 = load i64, ptr %len544, align 8
  %387 = call i64 @std.io.Formatter.pad(ptr %retparam560, ptr %385, i8 zeroext 32, i64 %zext559, i64 %386) #5, !dbg !4867
  %not_err561 = icmp eq i64 %387, 0, !dbg !4867
  %388 = call i1 @llvm.expect.i1(i1 %not_err561, i1 true), !dbg !4867
  br i1 %388, label %after_check563, label %assign_optional562, !dbg !4867

assign_optional562:                               ; preds = %noerr_block554
  store i64 %387, ptr %error_var556, align 8, !dbg !4867
  br label %guard_block564, !dbg !4867

after_check563:                                   ; preds = %noerr_block554
  br label %noerr_block565, !dbg !4867

guard_block564:                                   ; preds = %assign_optional562
  %389 = load i64, ptr %error_var556, align 8, !dbg !4867
  ret i64 %389, !dbg !4867

noerr_block565:                                   ; preds = %after_check563
  %390 = load i64, ptr %retparam560, align 8, !dbg !4867
  %add566 = add i64 %382, %390, !dbg !4865
  store i64 %add566, ptr %total_len, align 8, !dbg !4865
  %391 = load i64, ptr %total_len, align 8, !dbg !4868
  %392 = load ptr, ptr %self, align 8
  %lo569 = load i64, ptr %current, align 8
  %ptradd570 = getelementptr inbounds i8, ptr %current, i64 8
  %hi571 = load ptr, ptr %ptradd570, align 8
  %393 = call i64 @std.io.Formatter.out_str(ptr %retparam568, ptr %392, i64 %lo569, ptr %hi571), !dbg !4869
  %not_err572 = icmp eq i64 %393, 0, !dbg !4869
  %394 = call i1 @llvm.expect.i1(i1 %not_err572, i1 true), !dbg !4869
  br i1 %394, label %after_check574, label %assign_optional573, !dbg !4869

assign_optional573:                               ; preds = %noerr_block565
  store i64 %393, ptr %error_var567, align 8, !dbg !4869
  br label %guard_block575, !dbg !4869

after_check574:                                   ; preds = %noerr_block565
  br label %noerr_block576, !dbg !4869

guard_block575:                                   ; preds = %assign_optional573
  %395 = load i64, ptr %error_var567, align 8, !dbg !4869
  ret i64 %395, !dbg !4869

noerr_block576:                                   ; preds = %after_check574
  %396 = load i64, ptr %retparam568, align 8, !dbg !4869
  %add577 = add i64 %391, %396, !dbg !4868
  store i64 %add577, ptr %total_len, align 8, !dbg !4868
  br label %loop.inc, !dbg !4870

switch.case578:                                   ; preds = %switch.entry198
  %397 = load ptr, ptr %self, align 8, !dbg !4871
  %ptradd579 = getelementptr inbounds i8, ptr %397, i64 16, !dbg !4871
  %398 = load i32, ptr %ptradd579, align 8, !dbg !4873
  %399 = and i32 %398, -2, !dbg !4873
  %400 = or i32 %399, 1, !dbg !4873
  store i32 %400, ptr %ptradd579, align 8, !dbg !4873
  %401 = load ptr, ptr %self, align 8, !dbg !4874
  %ptradd580 = getelementptr inbounds i8, ptr %401, i64 16, !dbg !4874
  %402 = load i32, ptr %ptradd580, align 8, !dbg !4875
  %403 = and i32 %402, -17, !dbg !4875
  %404 = or i32 %403, 16, !dbg !4875
  store i32 %404, ptr %ptradd580, align 8, !dbg !4875
  store i32 16, ptr %base, align 4, !dbg !4876
  br label %switch.exit603, !dbg !4876

switch.default581:                                ; preds = %switch.entry198
  %405 = load ptr, ptr %self, align 8
  store ptr %405, ptr %self582, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %f583, align 8
  %406 = load ptr, ptr %self582, align 8, !dbg !4877
  %ptradd585 = getelementptr inbounds i8, ptr %406, i64 16, !dbg !4877
  %ptradd586 = getelementptr inbounds i8, ptr %ptradd585, i64 24, !dbg !4877
  %407 = load i64, ptr %ptradd586, align 8, !dbg !4877
  %neq587 = icmp ne i64 %407, 0, !dbg !4877
  br i1 %neq587, label %if.then588, label %if.exit591, !dbg !4877

if.then588:                                       ; preds = %switch.default581
  %408 = load ptr, ptr %self582, align 8, !dbg !4881
  %ptradd589 = getelementptr inbounds i8, ptr %408, i64 16, !dbg !4881
  %ptradd590 = getelementptr inbounds i8, ptr %ptradd589, i64 24, !dbg !4881
  %409 = load i64, ptr %ptradd590, align 8, !dbg !4881
  store i64 %409, ptr %blockret584, align 8, !dbg !4881
  br label %expr_block.exit594, !dbg !4881

if.exit591:                                       ; preds = %switch.default581
  %410 = load ptr, ptr %self582, align 8, !dbg !4882
  %ptradd592 = getelementptr inbounds i8, ptr %410, i64 16, !dbg !4882
  %ptradd593 = getelementptr inbounds i8, ptr %ptradd592, i64 24, !dbg !4882
  %411 = load i64, ptr %f583, align 8, !dbg !4883
  store i64 %411, ptr %ptradd593, align 8, !dbg !4883
  %412 = load i64, ptr %f583, align 8, !dbg !4884
  store i64 %412, ptr %blockret584, align 8, !dbg !4884
  br label %expr_block.exit594, !dbg !4884

expr_block.exit594:                               ; preds = %if.exit591, %if.then588
  %413 = load i64, ptr %total_len, align 8, !dbg !4885
  %414 = load ptr, ptr %self, align 8
  %415 = call i64 @std.io.Formatter.out_substr(ptr %retparam596, ptr %414, ptr @.str.248, i64 12), !dbg !4886
  %not_err597 = icmp eq i64 %415, 0, !dbg !4886
  %416 = call i1 @llvm.expect.i1(i1 %not_err597, i1 true), !dbg !4886
  br i1 %416, label %after_check599, label %assign_optional598, !dbg !4886

assign_optional598:                               ; preds = %expr_block.exit594
  store i64 %415, ptr %error_var595, align 8, !dbg !4886
  br label %guard_block600, !dbg !4886

after_check599:                                   ; preds = %expr_block.exit594
  br label %noerr_block601, !dbg !4886

guard_block600:                                   ; preds = %assign_optional598
  %417 = load i64, ptr %error_var595, align 8, !dbg !4886
  ret i64 %417, !dbg !4886

noerr_block601:                                   ; preds = %after_check599
  %418 = load i64, ptr %retparam596, align 8, !dbg !4886
  %add602 = add i64 %413, %418, !dbg !4885
  store i64 %add602, ptr %total_len, align 8, !dbg !4885
  br label %loop.inc, !dbg !4887

switch.exit603:                                   ; preds = %switch.case578, %switch.case209, %switch.case206, %switch.case203, %switch.case199
  %419 = load i32, ptr %base, align 4, !dbg !4888
  %neq604 = icmp ne i32 10, %419, !dbg !4888
  br i1 %neq604, label %if.then605, label %if.exit608, !dbg !4888

if.then605:                                       ; preds = %switch.exit603
  %420 = load ptr, ptr %self, align 8, !dbg !4889
  %ptradd606 = getelementptr inbounds i8, ptr %420, i64 16, !dbg !4889
  %421 = load i32, ptr %ptradd606, align 8, !dbg !4891
  %422 = and i32 %421, -5, !dbg !4891
  store i32 %422, ptr %ptradd606, align 8, !dbg !4891
  %423 = load ptr, ptr %self, align 8, !dbg !4892
  %ptradd607 = getelementptr inbounds i8, ptr %423, i64 16, !dbg !4892
  %424 = load i32, ptr %ptradd607, align 8, !dbg !4893
  %425 = and i32 %424, -9, !dbg !4893
  store i32 %425, ptr %ptradd607, align 8, !dbg !4893
  br label %if.exit608, !dbg !4893

if.exit608:                                       ; preds = %if.then605, %switch.exit603
  %426 = load ptr, ptr %self, align 8, !dbg !4894
  %ptradd609 = getelementptr inbounds i8, ptr %426, i64 16, !dbg !4894
  %427 = load i32, ptr %ptradd609, align 8, !dbg !4894
  %lshrl610 = lshr i32 %427, 6, !dbg !4894
  %428 = and i32 1, %lshrl610, !dbg !4894
  %trunc611 = trunc i32 %428 to i8, !dbg !4894
  %429 = trunc i8 %trunc611 to i1, !dbg !4894
  br i1 %429, label %if.then612, label %if.exit614, !dbg !4894

if.then612:                                       ; preds = %if.exit608
  %430 = load ptr, ptr %self, align 8, !dbg !4895
  %ptradd613 = getelementptr inbounds i8, ptr %430, i64 16, !dbg !4895
  %431 = load i32, ptr %ptradd613, align 8, !dbg !4896
  %432 = and i32 %431, -2, !dbg !4896
  store i32 %432, ptr %ptradd613, align 8, !dbg !4896
  br label %if.exit614, !dbg !4896

if.exit614:                                       ; preds = %if.then612, %if.exit608
  call void @llvm.dbg.declare(metadata ptr %is_neg, metadata !4897, metadata !DIExpression()), !dbg !4898
  store i8 0, ptr %is_neg, align 1, !dbg !4898
  %433 = load i64, ptr %total_len, align 8, !dbg !4899
  %434 = load ptr, ptr %self, align 8
  store ptr %434, ptr %f616, align 8
  call void @llvm.dbg.declare(metadata ptr %len618, metadata !4900, metadata !DIExpression()), !dbg !4902
  %lo621 = load i64, ptr %current, align 8
  %ptradd622 = getelementptr inbounds i8, ptr %current, i64 8
  %hi623 = load ptr, ptr %ptradd622, align 8
  %435 = call i64 @std.io.int_from_any(ptr %retparam620, i64 %lo621, ptr %hi623, ptr %is_neg), !dbg !4904
  %not_err624 = icmp eq i64 %435, 0, !dbg !4904
  %436 = call i1 @llvm.expect.i1(i1 %not_err624, i1 true), !dbg !4904
  br i1 %436, label %after_check626, label %assign_optional625, !dbg !4904

assign_optional625:                               ; preds = %if.exit614
  store i64 %435, ptr %len.f619, align 8, !dbg !4904
  br label %after_assign634, !dbg !4904

after_check626:                                   ; preds = %if.exit614
  %437 = load ptr, ptr %self, align 8
  %lo628 = load i64, ptr %retparam620, align 8
  %ptradd629 = getelementptr inbounds i8, ptr %retparam620, i64 8
  %hi630 = load i64, ptr %ptradd629, align 8
  %438 = load i8, ptr %is_neg, align 1
  %439 = load i32, ptr %base, align 4
  %440 = call i64 @std.io.Formatter.ntoa(ptr %retparam627, ptr %437, i64 %lo628, i64 %hi630, i8 zeroext %438, i32 %439), !dbg !4905
  %not_err631 = icmp eq i64 %440, 0, !dbg !4905
  %441 = call i1 @llvm.expect.i1(i1 %not_err631, i1 true), !dbg !4905
  br i1 %441, label %after_check633, label %assign_optional632, !dbg !4905

assign_optional632:                               ; preds = %after_check626
  store i64 %440, ptr %len.f619, align 8, !dbg !4905
  br label %after_assign634, !dbg !4905

after_check633:                                   ; preds = %after_check626
  %442 = load i64, ptr %retparam627, align 8, !dbg !4905
  store i64 %442, ptr %len618, align 8, !dbg !4905
  store i64 0, ptr %len.f619, align 8, !dbg !4905
  br label %after_assign634, !dbg !4905

after_assign634:                                  ; preds = %after_check633, %assign_optional632, %assign_optional625
  call void @llvm.dbg.declare(metadata ptr %err635, metadata !4906, metadata !DIExpression()), !dbg !4907
  br label %testblock636, !dbg !4907

testblock636:                                     ; preds = %after_assign634
  %optval637 = load i64, ptr %len.f619, align 8, !dbg !4908
  %not_err638 = icmp eq i64 %optval637, 0, !dbg !4908
  %443 = call i1 @llvm.expect.i1(i1 %not_err638, i1 true), !dbg !4908
  br i1 %443, label %after_check640, label %assign_optional639, !dbg !4908

assign_optional639:                               ; preds = %testblock636
  store i64 %optval637, ptr %err635, align 8, !dbg !4908
  br label %end_block641, !dbg !4908

after_check640:                                   ; preds = %testblock636
  store i64 0, ptr %err635, align 8, !dbg !4908
  br label %end_block641, !dbg !4908

end_block641:                                     ; preds = %after_check640, %assign_optional639
  %444 = load i64, ptr %err635, align 8, !dbg !4908
  %neq642 = icmp ne i64 %444, 0, !dbg !4908
  br i1 %neq642, label %if.then643, label %if.exit686, !dbg !4908

if.then643:                                       ; preds = %end_block641
  store i64 %444, ptr %switch644, align 8
  br label %switch.entry645

switch.entry645:                                  ; preds = %if.then643
  %445 = load i64, ptr %switch644, align 8
  %eq646 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %445, !dbg !4909
  br i1 %eq646, label %switch.case649, label %next_if647, !dbg !4909

next_if647:                                       ; preds = %switch.entry645
  %eq648 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %445, !dbg !4910
  br i1 %eq648, label %switch.case649, label %next_if663, !dbg !4910

switch.case649:                                   ; preds = %next_if647, %switch.entry645
  %446 = load ptr, ptr %f616, align 8
  store ptr %446, ptr %self650, align 8
  %447 = load i64, ptr %err635, align 8
  store i64 %447, ptr %f651, align 8
  %448 = load ptr, ptr %self650, align 8, !dbg !4911
  %ptradd653 = getelementptr inbounds i8, ptr %448, i64 16, !dbg !4911
  %ptradd654 = getelementptr inbounds i8, ptr %ptradd653, i64 24, !dbg !4911
  %449 = load i64, ptr %ptradd654, align 8, !dbg !4911
  %neq655 = icmp ne i64 %449, 0, !dbg !4911
  br i1 %neq655, label %if.then656, label %if.exit659, !dbg !4911

if.then656:                                       ; preds = %switch.case649
  %450 = load ptr, ptr %self650, align 8, !dbg !4915
  %ptradd657 = getelementptr inbounds i8, ptr %450, i64 16, !dbg !4915
  %ptradd658 = getelementptr inbounds i8, ptr %ptradd657, i64 24, !dbg !4915
  %451 = load i64, ptr %ptradd658, align 8, !dbg !4915
  store i64 %451, ptr %blockret652, align 8, !dbg !4915
  br label %expr_block.exit662, !dbg !4915

if.exit659:                                       ; preds = %switch.case649
  %452 = load ptr, ptr %self650, align 8, !dbg !4916
  %ptradd660 = getelementptr inbounds i8, ptr %452, i64 16, !dbg !4916
  %ptradd661 = getelementptr inbounds i8, ptr %ptradd660, i64 24, !dbg !4916
  %453 = load i64, ptr %f651, align 8, !dbg !4917
  store i64 %453, ptr %ptradd661, align 8, !dbg !4917
  %454 = load i64, ptr %f651, align 8, !dbg !4918
  store i64 %454, ptr %blockret652, align 8, !dbg !4918
  br label %expr_block.exit662, !dbg !4918

expr_block.exit662:                               ; preds = %if.exit659, %if.then656
  %455 = load i64, ptr %blockret652, align 8, !dbg !4918
  store i64 %455, ptr %error_var615, align 8, !dbg !4918
  br label %guard_block687, !dbg !4918

next_if663:                                       ; preds = %next_if647
  br label %switch.default664, !dbg !4918

switch.default664:                                ; preds = %next_if663
  %456 = load ptr, ptr %f616, align 8
  store ptr %456, ptr %self665, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f666, align 8
  %457 = load ptr, ptr %self665, align 8, !dbg !4919
  %ptradd668 = getelementptr inbounds i8, ptr %457, i64 16, !dbg !4919
  %ptradd669 = getelementptr inbounds i8, ptr %ptradd668, i64 24, !dbg !4919
  %458 = load i64, ptr %ptradd669, align 8, !dbg !4919
  %neq670 = icmp ne i64 %458, 0, !dbg !4919
  br i1 %neq670, label %if.then671, label %if.exit674, !dbg !4919

if.then671:                                       ; preds = %switch.default664
  %459 = load ptr, ptr %self665, align 8, !dbg !4923
  %ptradd672 = getelementptr inbounds i8, ptr %459, i64 16, !dbg !4923
  %ptradd673 = getelementptr inbounds i8, ptr %ptradd672, i64 24, !dbg !4923
  %460 = load i64, ptr %ptradd673, align 8, !dbg !4923
  store i64 %460, ptr %blockret667, align 8, !dbg !4923
  br label %expr_block.exit677, !dbg !4923

if.exit674:                                       ; preds = %switch.default664
  %461 = load ptr, ptr %self665, align 8, !dbg !4924
  %ptradd675 = getelementptr inbounds i8, ptr %461, i64 16, !dbg !4924
  %ptradd676 = getelementptr inbounds i8, ptr %ptradd675, i64 24, !dbg !4924
  %462 = load i64, ptr %f666, align 8, !dbg !4925
  store i64 %462, ptr %ptradd676, align 8, !dbg !4925
  %463 = load i64, ptr %f666, align 8, !dbg !4926
  store i64 %463, ptr %blockret667, align 8, !dbg !4926
  br label %expr_block.exit677, !dbg !4926

expr_block.exit677:                               ; preds = %if.exit674, %if.then671
  %464 = load i64, ptr %blockret667, align 8, !dbg !4926
  store i64 %464, ptr %err635, align 8, !dbg !4926
  %465 = load ptr, ptr %f616, align 8
  %466 = call i64 @std.io.Formatter.out_substr(ptr %retparam679, ptr %465, ptr @.str.249, i64 9), !dbg !4927
  %not_err680 = icmp eq i64 %466, 0, !dbg !4927
  %467 = call i1 @llvm.expect.i1(i1 %not_err680, i1 true), !dbg !4927
  br i1 %467, label %after_check682, label %assign_optional681, !dbg !4927

assign_optional681:                               ; preds = %expr_block.exit677
  store i64 %466, ptr %error_var678, align 8, !dbg !4927
  br label %guard_block683, !dbg !4927

after_check682:                                   ; preds = %expr_block.exit677
  br label %noerr_block684, !dbg !4927

guard_block683:                                   ; preds = %assign_optional681
  %468 = load i64, ptr %error_var678, align 8, !dbg !4927
  store i64 %468, ptr %error_var615, align 8, !dbg !4927
  br label %guard_block687, !dbg !4927

noerr_block684:                                   ; preds = %after_check682
  %469 = load i64, ptr %err635, align 8, !dbg !4928
  store i64 %469, ptr %error_var615, align 8, !dbg !4928
  br label %guard_block687, !dbg !4928

if.exit686:                                       ; preds = %end_block641
  br label %noerr_block688, !dbg !4929

guard_block687:                                   ; preds = %noerr_block684, %guard_block683, %expr_block.exit662
  %470 = load i64, ptr %error_var615, align 8, !dbg !4929
  ret i64 %470, !dbg !4929

noerr_block688:                                   ; preds = %if.exit686
  %471 = load i64, ptr %len618, align 8, !dbg !4929
  %add689 = add i64 %433, %471, !dbg !4899
  store i64 %add689, ptr %total_len, align 8, !dbg !4899
  br label %loop.inc, !dbg !4899

loop.inc:                                         ; preds = %noerr_block688, %noerr_block601, %noerr_block576, %noerr_block539, %noerr_block514, %noerr_block502, %noerr_block427, %noerr_block352, %noerr_block277, %noerr_block183, %noerr_block40, %noerr_block
  %472 = load i64, ptr %i, align 8, !dbg !4930
  %add690 = add i64 %472, 1, !dbg !4930
  store i64 %add690, ptr %i, align 8, !dbg !4930
  br label %loop.cond, !dbg !4930

loop.exit691:                                     ; preds = %loop.cond
  %473 = load ptr, ptr %self, align 8, !dbg !4931
  %ptradd692 = getelementptr inbounds i8, ptr %473, i64 16, !dbg !4931
  %ptradd693 = getelementptr inbounds i8, ptr %ptradd692, i64 24, !dbg !4931
  %474 = load i64, ptr %ptradd693, align 8, !dbg !4931
  %neq694 = icmp ne i64 %474, 0, !dbg !4931
  br i1 %neq694, label %if.then695, label %if.exit698, !dbg !4931

if.then695:                                       ; preds = %loop.exit691
  %475 = load ptr, ptr %self, align 8, !dbg !4932
  %ptradd696 = getelementptr inbounds i8, ptr %475, i64 16, !dbg !4932
  %ptradd697 = getelementptr inbounds i8, ptr %ptradd696, i64 24, !dbg !4932
  %476 = load i64, ptr %ptradd697, align 8, !dbg !4932
  ret i64 %476, !dbg !4932

if.exit698:                                       ; preds = %loop.exit691
  %477 = load i64, ptr %total_len, align 8, !dbg !4933
  store i64 %477, ptr %0, align 8, !dbg !4933
  ret i64 0, !dbg !4933

panic:                                            ; preds = %entry
  %478 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4520
  call void %478(ptr @.panic_msg, i64 62, ptr @.file.184, i64 12, ptr @.func.237, i64 7, i32 356), !dbg !4520
  unreachable, !dbg !4520

panic8:                                           ; preds = %loop.body
  store i64 %15, ptr %taddr, align 8
  %479 = insertvalue %any undef, ptr %taddr, 0
  %480 = insertvalue %any %479, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr9, align 8
  %481 = insertvalue %any undef, ptr %taddr9, 0
  %482 = insertvalue %any %481, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %480, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %482, ptr %ptradd10, align 16
  %483 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %483, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.184, i64 12, ptr @.func.237, i64 7, i32 370, ptr byval(%"any[]") align 8 %indirectarg), !dbg !4549
  unreachable, !dbg !4549

panic24:                                          ; preds = %if.exit21
  store i64 %35, ptr %taddr25, align 8
  %484 = insertvalue %any undef, ptr %taddr25, 0
  %485 = insertvalue %any %484, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr26, align 8
  %486 = insertvalue %any undef, ptr %taddr26, 0
  %487 = insertvalue %any %486, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %485, ptr %varargslots27, align 16
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %487, ptr %ptradd28, align 16
  %488 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %488, i64 2, 1
  store %"any[]" %"$$temp29", ptr %indirectarg30, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.184, i64 12, ptr @.func.237, i64 7, i32 379, ptr byval(%"any[]") align 8 %indirectarg30), !dbg !4563
  unreachable, !dbg !4563

panic66:                                          ; preds = %if.exit63
  store i64 %77, ptr %taddr67, align 8
  %489 = insertvalue %any undef, ptr %taddr67, 0
  %490 = insertvalue %any %489, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr68, align 8
  %491 = insertvalue %any undef, ptr %taddr68, 0
  %492 = insertvalue %any %491, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %490, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %492, ptr %ptradd70, align 16
  %493 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %493, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.184, i64 12, ptr @.func.237, i64 7, i32 399, ptr byval(%"any[]") align 8 %indirectarg72), !dbg !4599
  unreachable, !dbg !4599

panic95:                                          ; preds = %if.exit92
  store i64 %95, ptr %taddr96, align 8
  %494 = insertvalue %any undef, ptr %taddr96, 0
  %495 = insertvalue %any %494, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %97, ptr %taddr97, align 8
  %496 = insertvalue %any undef, ptr %taddr97, 0
  %497 = insertvalue %any %496, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %495, ptr %varargslots98, align 16
  %ptradd99 = getelementptr inbounds i8, ptr %varargslots98, i64 16
  store %any %497, ptr %ptradd99, align 16
  %498 = insertvalue %"any[]" undef, ptr %varargslots98, 0
  %"$$temp100" = insertvalue %"any[]" %498, i64 2, 1
  store %"any[]" %"$$temp100", ptr %indirectarg101, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.184, i64 12, ptr @.func.237, i64 7, i32 404, ptr byval(%"any[]") align 8 %indirectarg101), !dbg !4611
  unreachable, !dbg !4611

panic153:                                         ; preds = %cond.phi
  store i64 %136, ptr %taddr154, align 8
  %499 = insertvalue %any undef, ptr %taddr154, 0
  %500 = insertvalue %any %499, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %138, ptr %taddr155, align 8
  %501 = insertvalue %any undef, ptr %taddr155, 0
  %502 = insertvalue %any %501, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %500, ptr %varargslots156, align 16
  %ptradd157 = getelementptr inbounds i8, ptr %varargslots156, i64 16
  store %any %502, ptr %ptradd157, align 16
  %503 = insertvalue %"any[]" undef, ptr %varargslots156, 0
  %"$$temp158" = insertvalue %"any[]" %503, i64 2, 1
  store %"any[]" %"$$temp158", ptr %indirectarg159, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.184, i64 12, ptr @.func.237, i64 7, i32 420, ptr byval(%"any[]") align 8 %indirectarg159), !dbg !4647
  unreachable, !dbg !4647

panic189:                                         ; preds = %if.exit185
  store i64 %157, ptr %taddr190, align 8
  %504 = insertvalue %any undef, ptr %taddr190, 0
  %505 = insertvalue %any %504, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %159, ptr %taddr191, align 8
  %506 = insertvalue %any undef, ptr %taddr191, 0
  %507 = insertvalue %any %506, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %505, ptr %varargslots192, align 16
  %ptradd193 = getelementptr inbounds i8, ptr %varargslots192, i64 16
  store %any %507, ptr %ptradd193, align 16
  %508 = insertvalue %"any[]" undef, ptr %varargslots192, 0
  %"$$temp194" = insertvalue %"any[]" %508, i64 2, 1
  store %"any[]" %"$$temp194", ptr %indirectarg195, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.184, i64 12, ptr @.func.237, i64 7, i32 431, ptr byval(%"any[]") align 8 %indirectarg195), !dbg !4667
  unreachable, !dbg !4667
}

; Function Attrs: nounwind ssp uwtable
define weak i64 @std.io.Formatter.print(ptr %0, ptr %1, ptr %2, i64 %3) #0 comdat !dbg !4934 {
entry:
  %self = alloca ptr, align 8
  %str = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %.anon4 = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !4935
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !4935
  br i1 %5, label %panic, label %checkok, !dbg !4935

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !4936, metadata !DIExpression()), !dbg !4937
  store ptr %2, ptr %str, align 8
  %ptradd = getelementptr inbounds i8, ptr %str, i64 8
  store i64 %3, ptr %ptradd, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4938, metadata !DIExpression()), !dbg !4939
  %6 = load ptr, ptr %self, align 8, !dbg !4940
  %ptradd1 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !4940
  %7 = load ptr, ptr %ptradd1, align 8, !dbg !4940
  %not = icmp eq ptr %7, null, !dbg !4940
  br i1 %not, label %if.then, label %if.exit, !dbg !4940

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !4941
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !4941
  store ptr @std.io.out_null_fn, ptr %ptradd2, align 8, !dbg !4943
  br label %if.exit, !dbg !4943

if.exit:                                          ; preds = %if.then, %checkok
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !4944, metadata !DIExpression()), !dbg !4946
  %ptradd3 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !4946
  %9 = load i64, ptr %ptradd3, align 8, !dbg !4946
  store i64 %9, ptr %.anon, align 8, !dbg !4946
  call void @llvm.dbg.declare(metadata ptr %.anon4, metadata !4944, metadata !DIExpression()), !dbg !4946
  store i64 0, ptr %.anon4, align 8, !dbg !4946
  br label %loop.cond, !dbg !4946

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %10 = load i64, ptr %.anon4, align 8, !dbg !4946
  %11 = load i64, ptr %.anon, align 8, !dbg !4946
  %lt = icmp ult i64 %10, %11, !dbg !4946
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !4946

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !4947, metadata !DIExpression()), !dbg !4949
  %ptradd5 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !4950
  %12 = load i64, ptr %ptradd5, align 8, !dbg !4950
  %13 = load ptr, ptr %str, align 8, !dbg !4950
  %14 = load i64, ptr %.anon4, align 8, !dbg !4950
  %ge = icmp uge i64 %14, %12, !dbg !4950
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4950
  br i1 %15, label %panic6, label %checkok9, !dbg !4950

checkok9:                                         ; preds = %loop.body
  %ptradd10 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !4950
  %16 = load i8, ptr %ptradd10, align 1, !dbg !4950
  store i8 %16, ptr %c, align 1, !dbg !4950
  %17 = load ptr, ptr %self, align 8
  %18 = load i8, ptr %c, align 1
  %19 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %17, i8 zeroext %18), !dbg !4951
  %not_err = icmp eq i64 %19, 0, !dbg !4951
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4951
  br i1 %20, label %after_check, label %assign_optional, !dbg !4951

assign_optional:                                  ; preds = %checkok9
  store i64 %19, ptr %error_var, align 8, !dbg !4951
  br label %guard_block, !dbg !4951

after_check:                                      ; preds = %checkok9
  br label %noerr_block, !dbg !4951

guard_block:                                      ; preds = %assign_optional
  %21 = load i64, ptr %error_var, align 8, !dbg !4951
  ret i64 %21, !dbg !4951

noerr_block:                                      ; preds = %after_check
  %22 = load i64, ptr %.anon4, align 8, !dbg !4946
  %addnuw = add nuw i64 %22, 1, !dbg !4946
  store i64 %addnuw, ptr %.anon4, align 8, !dbg !4946
  br label %loop.cond, !dbg !4946

loop.exit:                                        ; preds = %loop.cond
  %23 = load ptr, ptr %self, align 8, !dbg !4952
  %ptradd11 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !4952
  %ptradd12 = getelementptr inbounds i8, ptr %ptradd11, i64 16, !dbg !4952
  %24 = load i64, ptr %ptradd12, align 8, !dbg !4952
  store i64 %24, ptr %0, align 8, !dbg !4952
  ret i64 0, !dbg !4952

panic:                                            ; preds = %entry
  %25 = load ptr, ptr @std.core.builtin.panic, align 8, !dbg !4937
  call void %25(ptr @.panic_msg, i64 62, ptr @.file.184, i64 12, ptr @.func.250, i64 5, i32 523), !dbg !4937
  unreachable, !dbg !4937

panic6:                                           ; preds = %loop.body
  store i64 %12, ptr %taddr, align 8
  %26 = insertvalue %any undef, ptr %taddr, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr7, align 8
  %28 = insertvalue %any undef, ptr %taddr7, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %27, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd8, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.67, i64 59, ptr @.file.184, i64 12, ptr @.func.250, i64 5, i32 530, ptr byval(%"any[]") align 8 %indirectarg), !dbg !4950
  unreachable, !dbg !4950
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_null_fn(ptr %0, i8 zeroext %1) #0 !dbg !4953 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !4954, metadata !DIExpression()), !dbg !4955
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !4956, metadata !DIExpression()), !dbg !4957
  ret i64 0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #4

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any[]") align 8) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.bswap.i32(i32) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.bswap.i64(i64) #2

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.String.index_of(ptr, ptr, i64, ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare i32 @putchar(i32) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.io.File.flush(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.io.File.write_byte(ptr, i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak ptr @std.io.file.from_handle(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.ascii.char.is_digit(i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak zeroext i8 @std.core.types.TypeKind.is_int(i8 zeroext) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak i64 @std.core.string.conv.utf8_codepoints(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak double @std.math._frexp(double, ptr) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #2

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.OnStackAllocator.init(ptr, ptr, i64, i64, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak void @std.core.mem.allocator.OnStackAllocator.free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.string.ZString.str_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare extern_weak { ptr, i64 } @std.core.dstring.DString.str_view(ptr) #0

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.io.ByteBuffer.write", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.io.ByteBuffer.read", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.io.ByteBuffer.seek", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.io.ByteBuffer.available", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.io.LimitReader.close", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.io.LimitReader.read", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.io.LimitReader.read_byte", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.io.LimitReader.available", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.io.ByteReader.len", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.io.ByteReader.read", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.io.ByteReader.read_byte", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.io.ByteReader.seek", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.io.ByteReader.write_to", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.io.ByteReader.available", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.io.ByteWriter.destroy", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.io.ByteWriter.write", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.io.ByteWriter.write_byte", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.io.ByteWriter.read_from", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.io.Scanner.flush", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.io.Scanner.close", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.io.Scanner.read", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.io.Scanner.read_byte", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.io.ReadBuffer.close", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.io.ReadBuffer.read", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.io.WriteBuffer.close", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.io.WriteBuffer.flush", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.io.WriteBuffer.write", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.ReflectedParam", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.core.ReflectedParam.to_format", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!33, !34, !35, !36, !37, !38}
!llvm.dbg.cu = !{!39}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "file", linkageName: "stdout.file", scope: !2, file: !2, line: 356, type: !3, isLocal: true, isDefinition: true, align: 8)
!2 = !DIFile(filename: "io.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io")
!3 = !DICompositeType(tag: DW_TAG_structure_type, name: "File", scope: !2, file: !2, line: 4, size: 64, align: 64, elements: !4, identifier: "std.io.File")
!4 = !{!5}
!5 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !3, file: !2, line: 6, baseType: !6, size: 64, align: 64)
!6 = !DIDerivedType(tag: DW_TAG_typedef, name: "CFile", scope: !2, file: !2, line: 360, baseType: !7, align: 8)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!8 = !DIGlobalVariableExpression(var: !9, expr: !DIExpression())
!9 = distinct !DIGlobalVariable(name: "file", linkageName: "stderr.file", scope: !2, file: !2, line: 368, type: !3, isLocal: true, isDefinition: true, align: 8)
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "file", linkageName: "stdin.file", scope: !2, file: !2, line: 380, type: !3, isLocal: true, isDefinition: true, align: 8)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "XDIGITS_H", linkageName: "std.io.XDIGITS_H", scope: !14, file: !14, line: 4, type: !15, isLocal: false, isDefinition: true, align: 16)
!14 = !DIFile(filename: "formatter_private.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io")
!15 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 128, align: 8, elements: !17)
!16 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!17 = !{!18}
!18 = !DISubrange(count: 16, lowerBound: 0)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "XDIGITS_L", linkageName: "std.io.XDIGITS_L", scope: !14, file: !14, line: 5, type: !15, isLocal: false, isDefinition: true, align: 16)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "BUF_SIZE", linkageName: "floatformat.BUF_SIZE", scope: !14, file: !14, line: 200, type: !23, isLocal: true, isDefinition: true, align: 4)
!23 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(name: "MAX_VARS", linkageName: "std.io.MAX_VARS", scope: !26, file: !26, line: 187, type: !27, isLocal: true, isDefinition: true, align: 1)
!26 = !DIFile(filename: "stream.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io")
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 72, align: 8, elements: !28)
!28 = !{!29}
!29 = !DISubrange(count: 9, lowerBound: 0)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "PRINTF_NTOA_BUFFER_SIZE", linkageName: "std.io.PRINTF_NTOA_BUFFER_SIZE", scope: !32, file: !32, line: 5, type: !23, isLocal: false, isDefinition: true, align: 4)
!32 = !DIFile(filename: "formatter.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io")
!33 = !{i32 4, !"PIE Level", i32 2}
!34 = !{i32 4, !"PIC Level", i32 2}
!35 = !{i32 2, !"Dwarf Version", i32 4}
!36 = !{i32 2, !"Debug Info Version", i32 3}
!37 = !{i32 2, !"frame-pointer", i32 2}
!38 = !{i32 1, !"uwtable", i32 2}
!39 = distinct !DICompileUnit(language: DW_LANG_C11, file: !40, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !41, globals: !77, splitDebugInlining: false)
!40 = !DIFile(filename: "bits.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io")
!41 = !{!42, !48, !54}
!42 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Seek", scope: !43, file: !43, line: 7, baseType: !23, size: 32, align: 32, elements: !44)
!43 = !DIFile(filename: "bytebuffer.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io/stream")
!44 = !{!45, !46, !47}
!45 = !DIEnumerator(name: "SET", value: 0)
!46 = !DIEnumerator(name: "CURSOR", value: 1)
!47 = !DIEnumerator(name: "END", value: 2)
!48 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "FloatFormatting", scope: !14, file: !14, line: 184, baseType: !23, size: 32, align: 32, elements: !49)
!49 = !{!50, !51, !52, !53}
!50 = !DIEnumerator(name: "FLOAT", value: 0)
!51 = !DIEnumerator(name: "EXPONENTIAL", value: 1)
!52 = !DIEnumerator(name: "ADAPTIVE", value: 2)
!53 = !DIEnumerator(name: "HEX", value: 3)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "TypeKind", scope: !14, file: !14, line: 343, baseType: !16, size: 8, align: 8, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76}
!56 = !DIEnumerator(name: "VOID", value: 0, isUnsigned: true)
!57 = !DIEnumerator(name: "BOOL", value: 1, isUnsigned: true)
!58 = !DIEnumerator(name: "SIGNED_INT", value: 2, isUnsigned: true)
!59 = !DIEnumerator(name: "UNSIGNED_INT", value: 3, isUnsigned: true)
!60 = !DIEnumerator(name: "FLOAT", value: 4, isUnsigned: true)
!61 = !DIEnumerator(name: "TYPEID", value: 5, isUnsigned: true)
!62 = !DIEnumerator(name: "ANYFAULT", value: 6, isUnsigned: true)
!63 = !DIEnumerator(name: "ANY", value: 7, isUnsigned: true)
!64 = !DIEnumerator(name: "ENUM", value: 8, isUnsigned: true)
!65 = !DIEnumerator(name: "FAULT", value: 9, isUnsigned: true)
!66 = !DIEnumerator(name: "STRUCT", value: 10, isUnsigned: true)
!67 = !DIEnumerator(name: "UNION", value: 11, isUnsigned: true)
!68 = !DIEnumerator(name: "BITSTRUCT", value: 12, isUnsigned: true)
!69 = !DIEnumerator(name: "FUNC", value: 13, isUnsigned: true)
!70 = !DIEnumerator(name: "OPTIONAL", value: 14, isUnsigned: true)
!71 = !DIEnumerator(name: "ARRAY", value: 15, isUnsigned: true)
!72 = !DIEnumerator(name: "SLICE", value: 16, isUnsigned: true)
!73 = !DIEnumerator(name: "VECTOR", value: 17, isUnsigned: true)
!74 = !DIEnumerator(name: "DISTINCT", value: 18, isUnsigned: true)
!75 = !DIEnumerator(name: "POINTER", value: 19, isUnsigned: true)
!76 = !DIEnumerator(name: "INTERFACE", value: 20, isUnsigned: true)
!77 = !{!0, !8, !10, !12, !19, !21, !24, !30}
!78 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitReader.init", scope: !40, file: !40, line: 10, type: !79, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!79 = !DISubroutineType(types: !80)
!80 = !{null, !81, !85}
!81 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitReader*", baseType: !82, size: 64, align: 64, dwarfAddressSpace: 0)
!82 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitReader", scope: !40, file: !40, line: 3, size: 192, align: 64, elements: !83, identifier: "std.io.BitReader")
!83 = !{!84, !90, !92}
!84 = !DIDerivedType(tag: DW_TAG_member, name: "reader", scope: !82, file: !40, line: 5, baseType: !85, size: 128, align: 64)
!85 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream", size: 128, align: 64, elements: !86, identifier: "InStream")
!86 = !{!87, !88}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !85, baseType: !7, size: 64, align: 64)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !85, baseType: !89, size: 64, align: 64, offset: 64)
!89 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !82, file: !40, line: 6, baseType: !91, size: 32, align: 32, offset: 128)
!91 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !82, file: !40, line: 7, baseType: !91, size: 32, align: 32, offset: 160)
!93 = !{}
!94 = !DILocation(line: 11, column: 1, scope: !78)
!95 = !DILocalVariable(name: "self", arg: 1, scope: !78, file: !40, line: 10, type: !81)
!96 = !DILocation(line: 10, column: 24, scope: !78)
!97 = !DILocalVariable(name: "byte_reader", arg: 2, scope: !78, file: !40, line: 10, type: !85)
!98 = !DILocation(line: 10, column: 40, scope: !78)
!99 = !DILocation(line: 12, column: 3, scope: !78)
!100 = !DILocation(line: 12, column: 22, scope: !78)
!101 = distinct !DISubprogram(name: "clear", linkageName: "std.io.BitReader.clear", scope: !40, file: !40, line: 15, type: !102, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!102 = !DISubroutineType(types: !103)
!103 = !{null, !81}
!104 = !DILocation(line: 16, column: 1, scope: !101)
!105 = !DILocalVariable(name: "self", arg: 1, scope: !101, file: !40, line: 15, type: !81)
!106 = !DILocation(line: 15, column: 25, scope: !101)
!107 = !DILocation(line: 17, column: 2, scope: !101)
!108 = !DILocation(line: 17, column: 13, scope: !101)
!109 = distinct !DISubprogram(name: "read_bits", linkageName: "std.io.BitReader.read_bits", scope: !40, file: !40, line: 24, type: !110, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!110 = !DISubroutineType(types: !111)
!111 = !{!112, !114, !81, !91}
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "anyfault", baseType: !113)
!113 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!114 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !16, size: 64, align: 64, dwarfAddressSpace: 0)
!115 = !DILocation(line: 25, column: 1, scope: !109)
!116 = !DILocalVariable(name: "self", arg: 1, scope: !109, file: !40, line: 24, type: !81)
!117 = !DILocation(line: 24, column: 30, scope: !109)
!118 = !DILocalVariable(name: "nbits", arg: 2, scope: !109, file: !40, line: 24, type: !91)
!119 = !DILocation(line: 24, column: 42, scope: !109)
!120 = !DILocation(line: 21, column: 11, scope: !121)
!121 = distinct !DILexicalBlock(scope: !109, file: !40, line: 25, column: 1)
!122 = !DILocation(line: 22, column: 11, scope: !121)
!123 = !DILocation(line: 22, column: 22, scope: !121)
!124 = !DILocalVariable(name: "bits", scope: !109, file: !40, line: 26, type: !91, align: 4)
!125 = !DILocation(line: 26, column: 7, scope: !109)
!126 = !DILocation(line: 26, column: 14, scope: !109)
!127 = !DILocation(line: 27, column: 6, scope: !109)
!128 = !DILocation(line: 27, column: 17, scope: !109)
!129 = !DILocalVariable(name: "c", scope: !130, file: !40, line: 30, type: !16, align: 1)
!130 = distinct !DILexicalBlock(scope: !109, file: !40, line: 28, column: 2)
!131 = !DILocation(line: 30, column: 8, scope: !130)
!132 = !DILocation(line: 30, column: 12, scope: !130)
!133 = !DILocation(line: 31, column: 3, scope: !130)
!134 = !DILocation(line: 32, column: 3, scope: !130)
!135 = !DILocation(line: 32, column: 11, scope: !130)
!136 = !DILocation(line: 33, column: 3, scope: !130)
!137 = !DILocation(line: 33, column: 15, scope: !130)
!138 = !DILocation(line: 34, column: 3, scope: !130)
!139 = !DILocation(line: 36, column: 2, scope: !109)
!140 = !DILocation(line: 36, column: 14, scope: !109)
!141 = !DILocalVariable(name: "mask", scope: !109, file: !40, line: 37, type: !91, align: 4)
!142 = !DILocation(line: 37, column: 7, scope: !109)
!143 = !DILocation(line: 37, column: 20, scope: !109)
!144 = !DILocation(line: 37, column: 15, scope: !109)
!145 = !DILocation(line: 38, column: 17, scope: !109)
!146 = !DILocation(line: 38, column: 25, scope: !109)
!147 = !DILocation(line: 38, column: 37, scope: !109)
!148 = !DILocation(line: 38, column: 10, scope: !109)
!149 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitWriter.init", scope: !40, file: !40, line: 48, type: !150, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!150 = !DISubroutineType(types: !151)
!151 = !{null, !152, !156}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitWriter*", baseType: !153, size: 64, align: 64, dwarfAddressSpace: 0)
!153 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitWriter", scope: !40, file: !40, line: 41, size: 192, align: 64, elements: !154, identifier: "std.io.BitWriter")
!154 = !{!155, !160, !161}
!155 = !DIDerivedType(tag: DW_TAG_member, name: "writer", scope: !153, file: !40, line: 43, baseType: !156, size: 128, align: 64)
!156 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream", size: 128, align: 64, elements: !157, identifier: "OutStream")
!157 = !{!158, !159}
!158 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !156, baseType: !7, size: 64, align: 64)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !156, baseType: !89, size: 64, align: 64, offset: 64)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !153, file: !40, line: 44, baseType: !91, size: 32, align: 32, offset: 128)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !153, file: !40, line: 45, baseType: !91, size: 32, align: 32, offset: 160)
!162 = !DILocation(line: 49, column: 1, scope: !149)
!163 = !DILocalVariable(name: "self", arg: 1, scope: !149, file: !40, line: 48, type: !152)
!164 = !DILocation(line: 48, column: 24, scope: !149)
!165 = !DILocalVariable(name: "byte_writer", arg: 2, scope: !149, file: !40, line: 48, type: !156)
!166 = !DILocation(line: 48, column: 41, scope: !149)
!167 = !DILocation(line: 50, column: 3, scope: !149)
!168 = !DILocation(line: 50, column: 22, scope: !149)
!169 = distinct !DISubprogram(name: "flush", linkageName: "std.io.BitWriter.flush", scope: !40, file: !40, line: 53, type: !170, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!170 = !DISubroutineType(types: !171)
!171 = !{!112, !7, !152}
!172 = !DILocation(line: 54, column: 1, scope: !169)
!173 = !DILocalVariable(name: "self", arg: 1, scope: !169, file: !40, line: 53, type: !152)
!174 = !DILocation(line: 53, column: 26, scope: !169)
!175 = !DILocation(line: 55, column: 6, scope: !169)
!176 = !DILocalVariable(name: "bits", scope: !169, file: !40, line: 56, type: !91, align: 4)
!177 = !DILocation(line: 56, column: 7, scope: !169)
!178 = !DILocation(line: 56, column: 14, scope: !169)
!179 = !DILocation(line: 56, column: 33, scope: !169)
!180 = !DILocation(line: 56, column: 28, scope: !169)
!181 = !DILocalVariable(name: "n", scope: !169, file: !40, line: 57, type: !91, align: 4)
!182 = !DILocation(line: 57, column: 7, scope: !169)
!183 = !DILocation(line: 57, column: 12, scope: !169)
!184 = !DILocalVariable(name: "buffer", scope: !169, file: !40, line: 58, type: !185, align: 1)
!185 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 32, align: 8, elements: !186)
!186 = !{!187}
!187 = !DISubrange(count: 4, lowerBound: 0)
!188 = !DILocation(line: 58, column: 10, scope: !169)
!189 = !DILocation(line: 172, column: 11, scope: !190, inlinedAt: !192)
!190 = distinct !DISubprogram(name: "is_arrayptr_or_slice_of_char", linkageName: "is_arrayptr_or_slice_of_char", scope: !191, file: !191, line: 165, scopeLine: 165, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!191 = !DIFile(filename: "bitorder.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!192 = !DILocation(line: 107, column: 11, scope: !193, inlinedAt: !195)
!193 = distinct !DILexicalBlock(scope: !194, file: !191, line: 111, column: 1)
!194 = distinct !DISubprogram(name: "write", linkageName: "write", scope: !191, file: !191, line: 110, scopeLine: 110, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!195 = !DILocation(line: 59, column: 12, scope: !169)
!196 = !DILocalVariable(name: "s", scope: !194, file: !40, line: 112, type: !197, align: 8)
!197 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !198, identifier: "char[]")
!198 = !{!199, !200}
!199 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !197, baseType: !114, size: 64, align: 64)
!200 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !197, baseType: !201, size: 64, align: 64, offset: 64)
!201 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !202)
!202 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!203 = !DILocation(line: 112, column: 9, scope: !194, inlinedAt: !195)
!204 = !DILocation(line: 115, column: 9, scope: !194, inlinedAt: !195)
!205 = !DILocation(line: 119, column: 16, scope: !194, inlinedAt: !195)
!206 = !DILocation(line: 212, column: 20, scope: !207, inlinedAt: !209)
!207 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !208, file: !208, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!208 = !DIFile(filename: "builtin.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!209 = !DILocation(line: 119, column: 24, scope: !194, inlinedAt: !195)
!210 = !DILocation(line: 212, column: 12, scope: !207, inlinedAt: !209)
!211 = !DILocation(line: 60, column: 16, scope: !169)
!212 = !DILocation(line: 60, column: 37, scope: !169)
!213 = !DILocation(line: 60, column: 29, scope: !169)
!214 = !DILocation(line: 101, column: 6, scope: !215, inlinedAt: !216)
!215 = distinct !DISubprogram(name: "write_all", linkageName: "write_all", scope: !26, file: !26, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!216 = !DILocation(line: 60, column: 6, scope: !169)
!217 = !DILocation(line: 101, column: 30, scope: !215, inlinedAt: !216)
!218 = !DILocalVariable(name: "n", scope: !215, file: !40, line: 102, type: !201, align: 8)
!219 = !DILocation(line: 102, column: 6, scope: !215, inlinedAt: !216)
!220 = !DILocation(line: 102, column: 23, scope: !215, inlinedAt: !216)
!221 = !DILocation(line: 102, column: 10, scope: !215, inlinedAt: !216)
!222 = !DILocation(line: 103, column: 6, scope: !215, inlinedAt: !216)
!223 = !DILocation(line: 103, column: 11, scope: !215, inlinedAt: !216)
!224 = !DILocation(line: 103, column: 30, scope: !215, inlinedAt: !216)
!225 = !DILocation(line: 104, column: 9, scope: !215, inlinedAt: !216)
!226 = !DILocation(line: 61, column: 2, scope: !169)
!227 = !DILocation(line: 61, column: 13, scope: !169)
!228 = !DILocation(line: 119, column: 4, scope: !194, inlinedAt: !195)
!229 = distinct !DISubprogram(name: "write_bits", linkageName: "std.io.BitWriter.write_bits", scope: !40, file: !40, line: 67, type: !230, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!230 = !DISubroutineType(types: !231)
!231 = !{!112, !7, !152, !91, !91}
!232 = !DILocation(line: 68, column: 1, scope: !229)
!233 = !DILocalVariable(name: "self", arg: 1, scope: !229, file: !40, line: 67, type: !152)
!234 = !DILocation(line: 67, column: 31, scope: !229)
!235 = !DILocalVariable(name: "bits", arg: 2, scope: !229, file: !40, line: 67, type: !91)
!236 = !DILocation(line: 67, column: 43, scope: !229)
!237 = !DILocalVariable(name: "nbits", arg: 3, scope: !229, file: !40, line: 67, type: !91)
!238 = !DILocation(line: 67, column: 54, scope: !229)
!239 = !DILocation(line: 65, column: 11, scope: !240)
!240 = distinct !DILexicalBlock(scope: !229, file: !40, line: 68, column: 1)
!241 = !DILocation(line: 69, column: 6, scope: !229)
!242 = !DILocalVariable(name: "n", scope: !229, file: !40, line: 70, type: !91, align: 4)
!243 = !DILocation(line: 70, column: 7, scope: !229)
!244 = !DILocation(line: 70, column: 11, scope: !229)
!245 = !DILocation(line: 70, column: 22, scope: !229)
!246 = !DILocalVariable(name: "to_write", scope: !229, file: !40, line: 71, type: !91, align: 4)
!247 = !DILocation(line: 71, column: 7, scope: !229)
!248 = !DILocation(line: 71, column: 18, scope: !229)
!249 = !DILocalVariable(name: "left", scope: !229, file: !40, line: 72, type: !91, align: 4)
!250 = !DILocation(line: 72, column: 7, scope: !229)
!251 = !DILocation(line: 72, column: 14, scope: !229)
!252 = !DILocation(line: 73, column: 6, scope: !229)
!253 = !DILocalVariable(name: "lbits", scope: !254, file: !40, line: 75, type: !202, align: 8)
!254 = distinct !DILexicalBlock(scope: !229, file: !40, line: 74, column: 2)
!255 = !DILocation(line: 75, column: 9, scope: !254)
!256 = !DILocation(line: 76, column: 7, scope: !254)
!257 = !DILocation(line: 76, column: 36, scope: !254)
!258 = !DILocation(line: 76, column: 55, scope: !254)
!259 = !DILocation(line: 76, column: 50, scope: !254)
!260 = !DILocation(line: 76, column: 30, scope: !254)
!261 = !DILocation(line: 77, column: 3, scope: !254)
!262 = !DILocation(line: 77, column: 20, scope: !254)
!263 = !DILocation(line: 77, column: 28, scope: !254)
!264 = !DILocation(line: 77, column: 13, scope: !254)
!265 = !DILocation(line: 77, column: 44, scope: !254)
!266 = !DILocation(line: 77, column: 48, scope: !254)
!267 = !DILocation(line: 77, column: 38, scope: !254)
!268 = !DILocalVariable(name: "buffer", scope: !254, file: !40, line: 78, type: !269, align: 1)
!269 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 64, align: 8, elements: !270)
!270 = !{!271}
!271 = !DISubrange(count: 8, lowerBound: 0)
!272 = !DILocation(line: 78, column: 11, scope: !254)
!273 = !DILocation(line: 172, column: 11, scope: !274, inlinedAt: !275)
!274 = distinct !DISubprogram(name: "is_arrayptr_or_slice_of_char", linkageName: "is_arrayptr_or_slice_of_char", scope: !191, file: !191, line: 165, scopeLine: 165, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!275 = !DILocation(line: 107, column: 11, scope: !276, inlinedAt: !278)
!276 = distinct !DILexicalBlock(scope: !277, file: !191, line: 111, column: 1)
!277 = distinct !DISubprogram(name: "write", linkageName: "write", scope: !191, file: !191, line: 110, scopeLine: 110, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!278 = !DILocation(line: 79, column: 13, scope: !254)
!279 = !DILocalVariable(name: "s", scope: !277, file: !40, line: 112, type: !197, align: 8)
!280 = !DILocation(line: 112, column: 9, scope: !277, inlinedAt: !278)
!281 = !DILocation(line: 115, column: 9, scope: !277, inlinedAt: !278)
!282 = !DILocation(line: 119, column: 16, scope: !277, inlinedAt: !278)
!283 = !DILocation(line: 212, column: 20, scope: !284, inlinedAt: !285)
!284 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !208, file: !208, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!285 = !DILocation(line: 119, column: 24, scope: !277, inlinedAt: !278)
!286 = !DILocation(line: 212, column: 12, scope: !284, inlinedAt: !285)
!287 = !DILocation(line: 80, column: 17, scope: !254)
!288 = !DILocation(line: 80, column: 38, scope: !254)
!289 = !DILocation(line: 80, column: 30, scope: !254)
!290 = !DILocation(line: 101, column: 6, scope: !291, inlinedAt: !292)
!291 = distinct !DISubprogram(name: "write_all", linkageName: "write_all", scope: !26, file: !26, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!292 = !DILocation(line: 80, column: 7, scope: !254)
!293 = !DILocation(line: 101, column: 30, scope: !291, inlinedAt: !292)
!294 = !DILocalVariable(name: "n", scope: !291, file: !40, line: 102, type: !201, align: 8)
!295 = !DILocation(line: 102, column: 6, scope: !291, inlinedAt: !292)
!296 = !DILocation(line: 102, column: 23, scope: !291, inlinedAt: !292)
!297 = !DILocation(line: 102, column: 10, scope: !291, inlinedAt: !292)
!298 = !DILocation(line: 103, column: 6, scope: !291, inlinedAt: !292)
!299 = !DILocation(line: 103, column: 11, scope: !291, inlinedAt: !292)
!300 = !DILocation(line: 103, column: 30, scope: !291, inlinedAt: !292)
!301 = !DILocation(line: 104, column: 9, scope: !291, inlinedAt: !292)
!302 = !DILocation(line: 82, column: 2, scope: !229)
!303 = !DILocation(line: 82, column: 16, scope: !229)
!304 = !DILocation(line: 83, column: 2, scope: !229)
!305 = !DILocation(line: 83, column: 15, scope: !229)
!306 = !DILocation(line: 83, column: 29, scope: !229)
!307 = !DILocation(line: 83, column: 24, scope: !229)
!308 = !DILocation(line: 84, column: 2, scope: !229)
!309 = !DILocation(line: 84, column: 13, scope: !229)
!310 = !DILocation(line: 119, column: 4, scope: !277, inlinedAt: !278)
!311 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.ByteBuffer.new_init", scope: !43, file: !43, line: 19, type: !312, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!312 = !DISubroutineType(types: !313)
!313 = !{!112, !314, !315, !202, !202, !319}
!314 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteBuffer**", baseType: !315, size: 64, align: 64, dwarfAddressSpace: 0)
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteBuffer*", baseType: !316, size: 64, align: 64, dwarfAddressSpace: 0)
!316 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteBuffer", scope: !43, file: !43, line: 4, size: 512, align: 64, elements: !317, identifier: "std.io.ByteBuffer")
!317 = !{!318, !323, !324, !325, !326, !327}
!318 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !316, file: !43, line: 6, baseType: !319, size: 128, align: 64)
!319 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !320, identifier: "Allocator")
!320 = !{!321, !322}
!321 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !319, baseType: !7, size: 64, align: 64)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !319, baseType: !89, size: 64, align: 64, offset: 64)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "max_read", scope: !316, file: !43, line: 7, baseType: !201, size: 64, align: 64, offset: 128)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !316, file: !43, line: 8, baseType: !197, size: 128, align: 64, offset: 192)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !316, file: !43, line: 9, baseType: !201, size: 64, align: 64, offset: 320)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !316, file: !43, line: 10, baseType: !201, size: 64, align: 64, offset: 384)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "has_last", scope: !316, file: !43, line: 11, baseType: !328, size: 8, align: 8, offset: 448)
!328 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!329 = !DILocation(line: 20, column: 1, scope: !311)
!330 = !DILocalVariable(name: "self", arg: 1, scope: !311, file: !43, line: 19, type: !315)
!331 = !DILocation(line: 19, column: 37, scope: !311)
!332 = !DILocalVariable(name: "max_read", arg: 2, scope: !311, file: !43, line: 19, type: !201)
!333 = !DILocation(line: 19, column: 48, scope: !311)
!334 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !311, file: !43, line: 19, type: !201)
!335 = !DILocation(line: 19, column: 62, scope: !311)
!336 = !DILocalVariable(name: "allocator", arg: 4, scope: !311, file: !43, line: 19, type: !319)
!337 = !DILocation(line: 19, column: 95, scope: !311)
!338 = !DILocation(line: 17, column: 11, scope: !339)
!339 = distinct !DILexicalBlock(scope: !311, file: !43, line: 20, column: 1)
!340 = !DILocation(line: 21, column: 3, scope: !311)
!341 = !DILocation(line: 21, column: 25, scope: !311)
!342 = !DILocation(line: 21, column: 48, scope: !311)
!343 = !DILocation(line: 47, column: 10, scope: !344, inlinedAt: !346)
!344 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !345, file: !345, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!345 = !DIFile(filename: "builtin_comparison.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!346 = !DILocation(line: 116, column: 10, scope: !347, inlinedAt: !348)
!347 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !345, file: !345, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!348 = !DILocation(line: 22, column: 21, scope: !311)
!349 = !DILocation(line: 47, column: 14, scope: !344, inlinedAt: !346)
!350 = !DILocation(line: 116, column: 34, scope: !347, inlinedAt: !348)
!351 = !DILocation(line: 116, column: 38, scope: !347, inlinedAt: !348)
!352 = !DILocation(line: 23, column: 12, scope: !311)
!353 = !DILocation(line: 23, column: 2, scope: !311)
!354 = !DILocation(line: 24, column: 9, scope: !311)
!355 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.ByteBuffer.temp_init", scope: !43, file: !43, line: 27, type: !356, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!356 = !DISubroutineType(types: !357)
!357 = !{!112, !314, !315, !202, !202}
!358 = !DILocation(line: 28, column: 1, scope: !355)
!359 = !DILocalVariable(name: "self", arg: 1, scope: !355, file: !43, line: 27, type: !315)
!360 = !DILocation(line: 27, column: 38, scope: !355)
!361 = !DILocalVariable(name: "max_read", arg: 2, scope: !355, file: !43, line: 27, type: !201)
!362 = !DILocation(line: 27, column: 49, scope: !355)
!363 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !355, file: !43, line: 27, type: !201)
!364 = !DILocation(line: 27, column: 63, scope: !355)
!365 = !DILocation(line: 396, column: 7, scope: !366, inlinedAt: !368)
!366 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !367, file: !367, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!367 = !DIFile(filename: "mem_allocator.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!368 = !DILocation(line: 29, column: 62, scope: !355)
!369 = !DILocation(line: 398, column: 3, scope: !370, inlinedAt: !368)
!370 = distinct !DILexicalBlock(scope: !366, file: !367, line: 397, column: 2)
!371 = !DILocation(line: 400, column: 9, scope: !366, inlinedAt: !368)
!372 = !DILocation(line: 29, column: 9, scope: !355)
!373 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteBuffer.init_with_buffer", scope: !43, file: !43, line: 36, type: !374, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!374 = !DISubroutineType(types: !375)
!375 = !{!112, !314, !315, !197}
!376 = !DILocation(line: 37, column: 1, scope: !373)
!377 = !DILocalVariable(name: "self", arg: 1, scope: !373, file: !43, line: 36, type: !315)
!378 = !DILocation(line: 36, column: 45, scope: !373)
!379 = !DILocalVariable(name: "buf", arg: 2, scope: !373, file: !43, line: 36, type: !197)
!380 = !DILocation(line: 36, column: 59, scope: !373)
!381 = !DILocation(line: 33, column: 11, scope: !382)
!382 = distinct !DILexicalBlock(scope: !373, file: !43, line: 37, column: 1)
!383 = !DILocation(line: 34, column: 11, scope: !382)
!384 = !DILocation(line: 38, column: 3, scope: !373)
!385 = !DILocation(line: 38, column: 24, scope: !373)
!386 = !DILocation(line: 38, column: 42, scope: !373)
!387 = !DILocation(line: 39, column: 9, scope: !373)
!388 = distinct !DISubprogram(name: "free", linkageName: "std.io.ByteBuffer.free", scope: !43, file: !43, line: 42, type: !389, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!389 = !DISubroutineType(types: !390)
!390 = !{null, !315}
!391 = !DILocation(line: 43, column: 1, scope: !388)
!392 = !DILocalVariable(name: "self", arg: 1, scope: !388, file: !43, line: 42, type: !315)
!393 = !DILocation(line: 42, column: 25, scope: !388)
!394 = !DILocation(line: 44, column: 6, scope: !388)
!395 = !DILocation(line: 44, column: 38, scope: !388)
!396 = !DILocation(line: 44, column: 54, scope: !388)
!397 = !DILocation(line: 101, column: 7, scope: !398, inlinedAt: !399)
!398 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !367, file: !367, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!399 = !DILocation(line: 44, column: 33, scope: !388)
!400 = !DILocation(line: 101, column: 18, scope: !398, inlinedAt: !399)
!401 = !DILocation(line: 105, column: 25, scope: !398, inlinedAt: !399)
!402 = !DILocation(line: 105, column: 2, scope: !398, inlinedAt: !399)
!403 = !DILocation(line: 45, column: 3, scope: !388)
!404 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteBuffer.write", scope: !43, file: !43, line: 48, type: !405, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!405 = !DISubroutineType(types: !406)
!406 = !{!112, !407, !315, !197}
!407 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !201, size: 64, align: 64, dwarfAddressSpace: 0)
!408 = !DILocation(line: 49, column: 1, scope: !404)
!409 = !DILocalVariable(name: "self", arg: 1, scope: !404, file: !43, line: 48, type: !315)
!410 = !DILocation(line: 48, column: 26, scope: !404)
!411 = !DILocalVariable(name: "bytes", arg: 2, scope: !404, file: !43, line: 48, type: !197)
!412 = !DILocation(line: 48, column: 40, scope: !404)
!413 = !DILocalVariable(name: "cap", scope: !404, file: !43, line: 50, type: !201, align: 8)
!414 = !DILocation(line: 50, column: 6, scope: !404)
!415 = !DILocation(line: 50, column: 12, scope: !404)
!416 = !DILocation(line: 50, column: 29, scope: !404)
!417 = !DILocation(line: 51, column: 6, scope: !404)
!418 = !DILocation(line: 51, column: 12, scope: !404)
!419 = !DILocation(line: 51, column: 33, scope: !404)
!420 = !DILocation(line: 51, column: 23, scope: !404)
!421 = !DILocation(line: 52, column: 41, scope: !404)
!422 = !DILocation(line: 52, column: 47, scope: !404)
!423 = !DILocation(line: 52, column: 2, scope: !404)
!424 = !DILocation(line: 52, column: 13, scope: !404)
!425 = !DILocation(line: 52, column: 28, scope: !404)
!426 = !DILocation(line: 53, column: 2, scope: !404)
!427 = !DILocation(line: 53, column: 20, scope: !404)
!428 = !DILocation(line: 54, column: 9, scope: !404)
!429 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteBuffer.write_byte", scope: !43, file: !43, line: 57, type: !430, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!430 = !DISubroutineType(types: !431)
!431 = !{!112, !7, !315, !16}
!432 = !DILocation(line: 58, column: 1, scope: !429)
!433 = !DILocalVariable(name: "self", arg: 1, scope: !429, file: !43, line: 57, type: !315)
!434 = !DILocation(line: 57, column: 32, scope: !429)
!435 = !DILocalVariable(name: "c", arg: 2, scope: !429, file: !43, line: 57, type: !16)
!436 = !DILocation(line: 57, column: 44, scope: !429)
!437 = !DILocalVariable(name: "cap", scope: !429, file: !43, line: 59, type: !201, align: 8)
!438 = !DILocation(line: 59, column: 6, scope: !429)
!439 = !DILocation(line: 59, column: 12, scope: !429)
!440 = !DILocation(line: 59, column: 29, scope: !429)
!441 = !DILocation(line: 60, column: 6, scope: !429)
!442 = !DILocation(line: 60, column: 26, scope: !429)
!443 = !DILocation(line: 60, column: 16, scope: !429)
!444 = !DILocation(line: 61, column: 2, scope: !429)
!445 = !DILocation(line: 61, column: 13, scope: !429)
!446 = !DILocation(line: 61, column: 31, scope: !429)
!447 = !DILocation(line: 62, column: 2, scope: !429)
!448 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteBuffer.read", scope: !43, file: !43, line: 65, type: !405, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!449 = !DILocation(line: 66, column: 1, scope: !448)
!450 = !DILocalVariable(name: "self", arg: 1, scope: !448, file: !43, line: 65, type: !315)
!451 = !DILocation(line: 65, column: 25, scope: !448)
!452 = !DILocalVariable(name: "bytes", arg: 2, scope: !448, file: !43, line: 65, type: !197)
!453 = !DILocation(line: 65, column: 39, scope: !448)
!454 = !DILocalVariable(name: "readable", scope: !448, file: !43, line: 67, type: !201, align: 8)
!455 = !DILocation(line: 67, column: 6, scope: !448)
!456 = !DILocation(line: 67, column: 17, scope: !448)
!457 = !DILocation(line: 67, column: 34, scope: !448)
!458 = !DILocation(line: 68, column: 6, scope: !448)
!459 = !DILocation(line: 70, column: 3, scope: !460)
!460 = distinct !DILexicalBlock(scope: !448, file: !43, line: 69, column: 2)
!461 = !DILocation(line: 70, column: 19, scope: !460)
!462 = !DILocation(line: 71, column: 10, scope: !460)
!463 = !DILocalVariable(name: "n", scope: !448, file: !43, line: 73, type: !201, align: 8)
!464 = !DILocation(line: 73, column: 6, scope: !448)
!465 = !DILocation(line: 73, column: 24, scope: !448)
!466 = !DILocation(line: 17, column: 10, scope: !467, inlinedAt: !468)
!467 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !345, file: !345, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!468 = !DILocation(line: 100, column: 10, scope: !469, inlinedAt: !470)
!469 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !345, file: !345, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!470 = !DILocation(line: 73, column: 10, scope: !448)
!471 = !DILocation(line: 17, column: 14, scope: !467, inlinedAt: !468)
!472 = !DILocation(line: 100, column: 31, scope: !469, inlinedAt: !470)
!473 = !DILocation(line: 100, column: 35, scope: !469, inlinedAt: !470)
!474 = !DILocation(line: 74, column: 14, scope: !448)
!475 = !DILocation(line: 74, column: 25, scope: !448)
!476 = !DILocation(line: 74, column: 39, scope: !448)
!477 = !DILocation(line: 74, column: 2, scope: !448)
!478 = !DILocation(line: 74, column: 8, scope: !448)
!479 = !DILocation(line: 74, column: 9, scope: !448)
!480 = !DILocation(line: 75, column: 2, scope: !448)
!481 = !DILocation(line: 75, column: 19, scope: !448)
!482 = !DILocation(line: 76, column: 2, scope: !448)
!483 = !DILocation(line: 76, column: 18, scope: !448)
!484 = !DILocation(line: 140, column: 6, scope: !485, inlinedAt: !486)
!485 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !43, file: !43, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!486 = !DILocation(line: 77, column: 2, scope: !448)
!487 = !DILocation(line: 140, column: 23, scope: !485, inlinedAt: !486)
!488 = !DILocalVariable(name: "readable", scope: !489, file: !43, line: 143, type: !201, align: 8)
!489 = distinct !DILexicalBlock(scope: !485, file: !43, line: 141, column: 2)
!490 = !DILocation(line: 143, column: 7, scope: !489, inlinedAt: !486)
!491 = !DILocation(line: 143, column: 18, scope: !489, inlinedAt: !486)
!492 = !DILocation(line: 143, column: 35, scope: !489, inlinedAt: !486)
!493 = !DILocation(line: 144, column: 31, scope: !489, inlinedAt: !486)
!494 = !DILocation(line: 144, column: 42, scope: !489, inlinedAt: !486)
!495 = !DILocation(line: 144, column: 64, scope: !489, inlinedAt: !486)
!496 = !DILocation(line: 144, column: 60, scope: !489, inlinedAt: !486)
!497 = !DILocation(line: 144, column: 3, scope: !489, inlinedAt: !486)
!498 = !DILocation(line: 144, column: 14, scope: !489, inlinedAt: !486)
!499 = !DILocation(line: 144, column: 19, scope: !489, inlinedAt: !486)
!500 = !DILocation(line: 144, column: 15, scope: !489, inlinedAt: !486)
!501 = !DILocation(line: 145, column: 3, scope: !489, inlinedAt: !486)
!502 = !DILocation(line: 145, column: 24, scope: !489, inlinedAt: !486)
!503 = !DILocation(line: 145, column: 20, scope: !489, inlinedAt: !486)
!504 = !DILocation(line: 146, column: 3, scope: !489, inlinedAt: !486)
!505 = !DILocation(line: 146, column: 19, scope: !489, inlinedAt: !486)
!506 = !DILocation(line: 78, column: 9, scope: !448)
!507 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteBuffer.read_byte", scope: !43, file: !43, line: 81, type: !508, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!508 = !DISubroutineType(types: !509)
!509 = !{!112, !114, !315}
!510 = !DILocation(line: 82, column: 1, scope: !507)
!511 = !DILocalVariable(name: "self", arg: 1, scope: !507, file: !43, line: 81, type: !315)
!512 = !DILocation(line: 81, column: 31, scope: !507)
!513 = !DILocalVariable(name: "readable", scope: !507, file: !43, line: 83, type: !201, align: 8)
!514 = !DILocation(line: 83, column: 6, scope: !507)
!515 = !DILocation(line: 83, column: 17, scope: !507)
!516 = !DILocation(line: 83, column: 34, scope: !507)
!517 = !DILocation(line: 84, column: 6, scope: !507)
!518 = !DILocation(line: 86, column: 3, scope: !519)
!519 = distinct !DILexicalBlock(scope: !507, file: !43, line: 85, column: 2)
!520 = !DILocation(line: 86, column: 19, scope: !519)
!521 = !DILocation(line: 87, column: 10, scope: !519)
!522 = !DILocalVariable(name: "c", scope: !507, file: !43, line: 89, type: !16, align: 1)
!523 = !DILocation(line: 89, column: 7, scope: !507)
!524 = !DILocation(line: 89, column: 11, scope: !507)
!525 = !DILocation(line: 89, column: 22, scope: !507)
!526 = !DILocation(line: 90, column: 2, scope: !507)
!527 = !DILocation(line: 91, column: 2, scope: !507)
!528 = !DILocation(line: 91, column: 18, scope: !507)
!529 = !DILocation(line: 140, column: 6, scope: !530, inlinedAt: !531)
!530 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !43, file: !43, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!531 = !DILocation(line: 92, column: 2, scope: !507)
!532 = !DILocation(line: 140, column: 23, scope: !530, inlinedAt: !531)
!533 = !DILocalVariable(name: "readable", scope: !534, file: !43, line: 143, type: !201, align: 8)
!534 = distinct !DILexicalBlock(scope: !530, file: !43, line: 141, column: 2)
!535 = !DILocation(line: 143, column: 7, scope: !534, inlinedAt: !531)
!536 = !DILocation(line: 143, column: 18, scope: !534, inlinedAt: !531)
!537 = !DILocation(line: 143, column: 35, scope: !534, inlinedAt: !531)
!538 = !DILocation(line: 144, column: 31, scope: !534, inlinedAt: !531)
!539 = !DILocation(line: 144, column: 42, scope: !534, inlinedAt: !531)
!540 = !DILocation(line: 144, column: 64, scope: !534, inlinedAt: !531)
!541 = !DILocation(line: 144, column: 60, scope: !534, inlinedAt: !531)
!542 = !DILocation(line: 144, column: 3, scope: !534, inlinedAt: !531)
!543 = !DILocation(line: 144, column: 14, scope: !534, inlinedAt: !531)
!544 = !DILocation(line: 144, column: 19, scope: !534, inlinedAt: !531)
!545 = !DILocation(line: 144, column: 15, scope: !534, inlinedAt: !531)
!546 = !DILocation(line: 145, column: 3, scope: !534, inlinedAt: !531)
!547 = !DILocation(line: 145, column: 24, scope: !534, inlinedAt: !531)
!548 = !DILocation(line: 145, column: 20, scope: !534, inlinedAt: !531)
!549 = !DILocation(line: 146, column: 3, scope: !534, inlinedAt: !531)
!550 = !DILocation(line: 146, column: 19, scope: !534, inlinedAt: !531)
!551 = !DILocation(line: 93, column: 9, scope: !507)
!552 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteBuffer.pushback_byte", scope: !43, file: !43, line: 99, type: !553, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!553 = !DISubroutineType(types: !554)
!554 = !{!112, !7, !315}
!555 = !DILocation(line: 100, column: 1, scope: !552)
!556 = !DILocalVariable(name: "self", arg: 1, scope: !552, file: !43, line: 99, type: !315)
!557 = !DILocation(line: 99, column: 35, scope: !552)
!558 = !DILocation(line: 101, column: 7, scope: !552)
!559 = !DILocation(line: 101, column: 29, scope: !552)
!560 = !DILocation(line: 102, column: 9, scope: !552)
!561 = !DILocation(line: 103, column: 2, scope: !552)
!562 = !DILocation(line: 104, column: 2, scope: !552)
!563 = !DILocation(line: 104, column: 18, scope: !552)
!564 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteBuffer.seek", scope: !43, file: !43, line: 107, type: !565, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!565 = !DISubroutineType(types: !566)
!566 = !{!112, !407, !315, !113, !42}
!567 = !DILocation(line: 108, column: 1, scope: !564)
!568 = !DILocalVariable(name: "self", arg: 1, scope: !564, file: !43, line: 107, type: !315)
!569 = !DILocation(line: 107, column: 25, scope: !564)
!570 = !DILocalVariable(name: "offset", arg: 2, scope: !564, file: !43, line: 107, type: !571)
!571 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !113)
!572 = !DILocation(line: 107, column: 36, scope: !564)
!573 = !DILocalVariable(name: "seek", arg: 3, scope: !564, file: !43, line: 107, type: !42)
!574 = !DILocation(line: 107, column: 49, scope: !564)
!575 = !DILocation(line: 112, column: 8, scope: !576)
!576 = distinct !DILexicalBlock(scope: !577, file: !43, line: 112, column: 4)
!577 = distinct !DILexicalBlock(scope: !564, file: !43, line: 109, column: 2)
!578 = !DILocation(line: 112, column: 22, scope: !576)
!579 = !DILocation(line: 112, column: 31, scope: !576)
!580 = !DILocation(line: 112, column: 54, scope: !576)
!581 = !DILocation(line: 113, column: 4, scope: !576)
!582 = !DILocation(line: 113, column: 20, scope: !576)
!583 = !DILocation(line: 114, column: 11, scope: !576)
!584 = !DILocation(line: 116, column: 9, scope: !585)
!585 = distinct !DILexicalBlock(scope: !577, file: !43, line: 116, column: 4)
!586 = !DILocation(line: 116, column: 23, scope: !585)
!587 = !DILocation(line: 116, column: 40, scope: !585)
!588 = !DILocation(line: 117, column: 6, scope: !585)
!589 = !DILocation(line: 117, column: 20, scope: !585)
!590 = !DILocation(line: 117, column: 36, scope: !585)
!591 = !DILocation(line: 117, column: 45, scope: !585)
!592 = !DILocation(line: 117, column: 69, scope: !585)
!593 = !DILocation(line: 118, column: 4, scope: !585)
!594 = !DILocation(line: 118, column: 21, scope: !585)
!595 = !DILocation(line: 120, column: 8, scope: !596)
!596 = distinct !DILexicalBlock(scope: !577, file: !43, line: 120, column: 4)
!597 = !DILocation(line: 120, column: 22, scope: !596)
!598 = !DILocation(line: 120, column: 31, scope: !596)
!599 = !DILocation(line: 120, column: 54, scope: !596)
!600 = !DILocation(line: 121, column: 4, scope: !596)
!601 = !DILocation(line: 121, column: 20, scope: !596)
!602 = !DILocation(line: 121, column: 37, scope: !596)
!603 = !DILocation(line: 123, column: 9, scope: !564)
!604 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteBuffer.available", scope: !43, file: !43, line: 126, type: !605, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!605 = !DISubroutineType(types: !606)
!606 = !{!112, !407, !315}
!607 = !DILocation(line: 127, column: 1, scope: !604)
!608 = !DILocalVariable(name: "self", arg: 1, scope: !604, file: !43, line: 126, type: !315)
!609 = !DILocation(line: 126, column: 30, scope: !604)
!610 = !DILocation(line: 128, column: 9, scope: !604)
!611 = !DILocation(line: 128, column: 26, scope: !604)
!612 = distinct !DISubprogram(name: "grow", linkageName: "std.io.ByteBuffer.grow", scope: !43, file: !43, line: 131, type: !613, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!613 = !DISubroutineType(types: !614)
!614 = !{!112, !7, !315, !202}
!615 = !DILocation(line: 132, column: 1, scope: !612)
!616 = !DILocalVariable(name: "self", arg: 1, scope: !612, file: !43, line: 131, type: !315)
!617 = !DILocation(line: 131, column: 26, scope: !612)
!618 = !DILocalVariable(name: "n", arg: 2, scope: !612, file: !43, line: 131, type: !201)
!619 = !DILocation(line: 131, column: 37, scope: !612)
!620 = !DILocalVariable(name: "y", scope: !621, file: !43, line: 1004, type: !201, align: 8)
!621 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !622, file: !622, line: 1002, scopeLine: 1002, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!622 = !DIFile(filename: "math.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/math")
!623 = !DILocation(line: 1004, column: 13, scope: !621, inlinedAt: !624)
!624 = !DILocation(line: 133, column: 12, scope: !612)
!625 = !DILocation(line: 1004, column: 17, scope: !621, inlinedAt: !624)
!626 = !DILocation(line: 1005, column: 2, scope: !621, inlinedAt: !624)
!627 = !DILocation(line: 1005, column: 9, scope: !628, inlinedAt: !624)
!628 = distinct !DILexicalBlock(scope: !621, file: !622, line: 1005, column: 2)
!629 = !DILocation(line: 1005, column: 13, scope: !628, inlinedAt: !624)
!630 = !DILocation(line: 1005, column: 16, scope: !628, inlinedAt: !624)
!631 = !DILocation(line: 1005, column: 21, scope: !628, inlinedAt: !624)
!632 = !DILocation(line: 1006, column: 9, scope: !621, inlinedAt: !624)
!633 = !DILocalVariable(name: "p", scope: !612, file: !43, line: 134, type: !114, align: 8)
!634 = !DILocation(line: 134, column: 8, scope: !612)
!635 = !DILocation(line: 134, column: 39, scope: !612)
!636 = !DILocation(line: 134, column: 55, scope: !612)
!637 = !DILocation(line: 128, column: 7, scope: !638, inlinedAt: !639)
!638 = distinct !DISubprogram(name: "realloc_aligned", linkageName: "realloc_aligned", scope: !367, file: !367, line: 126, scopeLine: 126, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!639 = !DILocation(line: 134, column: 23, scope: !612)
!640 = !DILocation(line: 142, column: 7, scope: !641, inlinedAt: !642)
!641 = distinct !DISubprogram(name: "free_aligned", linkageName: "free_aligned", scope: !367, file: !367, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!642 = !DILocation(line: 130, column: 3, scope: !643, inlinedAt: !639)
!643 = distinct !DILexicalBlock(scope: !638, file: !367, line: 129, column: 2)
!644 = !DILocation(line: 142, column: 18, scope: !641, inlinedAt: !642)
!645 = !DILocation(line: 146, column: 34, scope: !641, inlinedAt: !642)
!646 = !DILocation(line: 146, column: 2, scope: !641, inlinedAt: !642)
!647 = !DILocation(line: 131, column: 10, scope: !643, inlinedAt: !639)
!648 = !DILocation(line: 133, column: 7, scope: !638, inlinedAt: !639)
!649 = !DILocation(line: 110, column: 7, scope: !650, inlinedAt: !651)
!650 = distinct !DISubprogram(name: "malloc_aligned", linkageName: "malloc_aligned", scope: !367, file: !367, line: 108, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!651 = !DILocation(line: 135, column: 10, scope: !652, inlinedAt: !639)
!652 = distinct !DILexicalBlock(scope: !638, file: !367, line: 134, column: 2)
!653 = !DILocation(line: 110, column: 20, scope: !650, inlinedAt: !651)
!654 = !DILocation(line: 116, column: 43, scope: !650, inlinedAt: !651)
!655 = !DILocation(line: 116, column: 10, scope: !650, inlinedAt: !651)
!656 = !DILocation(line: 137, column: 41, scope: !638, inlinedAt: !639)
!657 = !DILocation(line: 137, column: 9, scope: !638, inlinedAt: !639)
!658 = !DILocation(line: 135, column: 2, scope: !612)
!659 = !DILocation(line: 135, column: 15, scope: !612)
!660 = !DILocation(line: 135, column: 18, scope: !612)
!661 = distinct !DISubprogram(name: "init", linkageName: "std.io.LimitReader.init", scope: !662, file: !662, line: 13, type: !663, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!662 = !DIFile(filename: "limitreader.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io/stream")
!663 = !DISubroutineType(types: !664)
!664 = !{!665, !665, !85, !202}
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LimitReader*", baseType: !666, size: 64, align: 64, dwarfAddressSpace: 0)
!666 = !DICompositeType(tag: DW_TAG_structure_type, name: "LimitReader", scope: !662, file: !662, line: 3, size: 192, align: 64, elements: !667, identifier: "std.io.LimitReader")
!667 = !{!668, !669}
!668 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !666, file: !662, line: 5, baseType: !85, size: 128, align: 64)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !666, file: !662, line: 6, baseType: !201, size: 64, align: 64, offset: 128)
!670 = !DILocation(line: 14, column: 1, scope: !661)
!671 = !DILocalVariable(name: "self", arg: 1, scope: !661, file: !662, line: 13, type: !665)
!672 = !DILocation(line: 13, column: 34, scope: !661)
!673 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !661, file: !662, line: 13, type: !85)
!674 = !DILocation(line: 13, column: 50, scope: !661)
!675 = !DILocalVariable(name: "limit", arg: 3, scope: !661, file: !662, line: 13, type: !201)
!676 = !DILocation(line: 13, column: 70, scope: !661)
!677 = !DILocation(line: 15, column: 3, scope: !661)
!678 = !DILocation(line: 15, column: 30, scope: !661)
!679 = !DILocation(line: 15, column: 55, scope: !661)
!680 = !DILocation(line: 16, column: 9, scope: !661)
!681 = distinct !DISubprogram(name: "close", linkageName: "std.io.LimitReader.close", scope: !662, file: !662, line: 19, type: !682, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!682 = !DISubroutineType(types: !683)
!683 = !{!112, !7, !665}
!684 = !DILocation(line: 20, column: 1, scope: !681)
!685 = !DILocalVariable(name: "self", arg: 1, scope: !681, file: !662, line: 19, type: !665)
!686 = !DILocation(line: 19, column: 28, scope: !681)
!687 = !DILocation(line: 21, column: 7, scope: !681)
!688 = !DILocation(line: 21, column: 41, scope: !681)
!689 = distinct !DISubprogram(name: "read", linkageName: "std.io.LimitReader.read", scope: !662, file: !662, line: 25, type: !690, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!690 = !DISubroutineType(types: !691)
!691 = !{!112, !407, !665, !197}
!692 = !DILocation(line: 26, column: 1, scope: !689)
!693 = !DILocalVariable(name: "self", arg: 1, scope: !689, file: !662, line: 25, type: !665)
!694 = !DILocation(line: 25, column: 26, scope: !689)
!695 = !DILocalVariable(name: "bytes", arg: 2, scope: !689, file: !662, line: 25, type: !197)
!696 = !DILocation(line: 25, column: 40, scope: !689)
!697 = !DILocation(line: 27, column: 6, scope: !689)
!698 = !DILocation(line: 27, column: 30, scope: !689)
!699 = !DILocalVariable(name: "m", scope: !689, file: !662, line: 28, type: !201, align: 8)
!700 = !DILocation(line: 28, column: 6, scope: !689)
!701 = !DILocation(line: 28, column: 14, scope: !689)
!702 = !DILocation(line: 28, column: 25, scope: !689)
!703 = !DILocation(line: 17, column: 10, scope: !704, inlinedAt: !705)
!704 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !345, file: !345, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!705 = !DILocation(line: 100, column: 10, scope: !706, inlinedAt: !707)
!706 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !345, file: !345, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!707 = !DILocation(line: 28, column: 10, scope: !689)
!708 = !DILocation(line: 17, column: 14, scope: !704, inlinedAt: !705)
!709 = !DILocation(line: 100, column: 31, scope: !706, inlinedAt: !707)
!710 = !DILocation(line: 100, column: 35, scope: !706, inlinedAt: !707)
!711 = !DILocalVariable(name: "n", scope: !689, file: !662, line: 29, type: !201, align: 8)
!712 = !DILocation(line: 29, column: 6, scope: !689)
!713 = !DILocation(line: 29, column: 10, scope: !689)
!714 = !DILocation(line: 29, column: 35, scope: !689)
!715 = !DILocation(line: 29, column: 41, scope: !689)
!716 = !DILocation(line: 29, column: 42, scope: !689)
!717 = !DILocation(line: 30, column: 2, scope: !689)
!718 = !DILocation(line: 30, column: 16, scope: !689)
!719 = !DILocation(line: 31, column: 9, scope: !689)
!720 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.LimitReader.read_byte", scope: !662, file: !662, line: 34, type: !721, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!721 = !DISubroutineType(types: !722)
!722 = !{!112, !114, !665}
!723 = !DILocation(line: 35, column: 1, scope: !720)
!724 = !DILocalVariable(name: "self", arg: 1, scope: !720, file: !662, line: 34, type: !665)
!725 = !DILocation(line: 34, column: 32, scope: !720)
!726 = !DILocation(line: 36, column: 6, scope: !720)
!727 = !DILocation(line: 36, column: 30, scope: !720)
!728 = !DILocation(line: 38, column: 9, scope: !720)
!729 = !DILocation(line: 37, column: 12, scope: !730)
!730 = distinct !DILexicalBlock(scope: !720, file: !662, line: 37, column: 12)
!731 = distinct !DISubprogram(name: "available", linkageName: "std.io.LimitReader.available", scope: !662, file: !662, line: 41, type: !732, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!732 = !DISubroutineType(types: !733)
!733 = !{!112, !407, !665}
!734 = !DILocation(line: 42, column: 1, scope: !731)
!735 = !DILocalVariable(name: "self", arg: 1, scope: !731, file: !662, line: 41, type: !665)
!736 = !DILocation(line: 41, column: 31, scope: !731)
!737 = !DILocation(line: 43, column: 9, scope: !731)
!738 = distinct !DISubprogram(name: "len", linkageName: "std.io.ByteReader.len", scope: !739, file: !739, line: 9, type: !740, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!739 = !DIFile(filename: "bytereader.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io/stream")
!740 = !DISubroutineType(types: !741)
!741 = !{!201, !742}
!742 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteReader*", baseType: !743, size: 64, align: 64, dwarfAddressSpace: 0)
!743 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteReader", scope: !739, file: !739, line: 3, size: 192, align: 64, elements: !744, identifier: "std.io.ByteReader")
!744 = !{!745, !746}
!745 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !743, file: !739, line: 5, baseType: !197, size: 128, align: 64)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !743, file: !739, line: 6, baseType: !201, size: 64, align: 64, offset: 128)
!747 = !DILocation(line: 10, column: 1, scope: !738)
!748 = !DILocalVariable(name: "self", arg: 1, scope: !738, file: !739, line: 9, type: !742)
!749 = !DILocation(line: 9, column: 23, scope: !738)
!750 = !DILocation(line: 11, column: 9, scope: !738)
!751 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteReader.init", scope: !739, file: !739, line: 14, type: !752, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!752 = !DISubroutineType(types: !753)
!753 = !{!742, !742, !197}
!754 = !DILocation(line: 15, column: 1, scope: !751)
!755 = !DILocalVariable(name: "self", arg: 1, scope: !751, file: !739, line: 14, type: !742)
!756 = !DILocation(line: 14, column: 32, scope: !751)
!757 = !DILocalVariable(name: "bytes", arg: 2, scope: !751, file: !739, line: 14, type: !197)
!758 = !DILocation(line: 14, column: 46, scope: !751)
!759 = !DILocation(line: 16, column: 3, scope: !751)
!760 = !DILocation(line: 16, column: 21, scope: !751)
!761 = !DILocation(line: 17, column: 9, scope: !751)
!762 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteReader.read", scope: !739, file: !739, line: 20, type: !763, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!763 = !DISubroutineType(types: !764)
!764 = !{!112, !407, !742, !197}
!765 = !DILocation(line: 21, column: 1, scope: !762)
!766 = !DILocalVariable(name: "self", arg: 1, scope: !762, file: !739, line: 20, type: !742)
!767 = !DILocation(line: 20, column: 25, scope: !762)
!768 = !DILocalVariable(name: "bytes", arg: 2, scope: !762, file: !739, line: 20, type: !197)
!769 = !DILocation(line: 20, column: 39, scope: !762)
!770 = !DILocation(line: 22, column: 6, scope: !762)
!771 = !DILocation(line: 22, column: 20, scope: !762)
!772 = !DILocation(line: 22, column: 43, scope: !762)
!773 = !DILocalVariable(name: "len", scope: !762, file: !739, line: 23, type: !201, align: 8)
!774 = !DILocation(line: 23, column: 6, scope: !762)
!775 = !DILocation(line: 23, column: 16, scope: !762)
!776 = !DILocation(line: 23, column: 33, scope: !762)
!777 = !DILocation(line: 23, column: 45, scope: !762)
!778 = !DILocation(line: 17, column: 10, scope: !779, inlinedAt: !780)
!779 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !345, file: !345, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!780 = !DILocation(line: 100, column: 10, scope: !781, inlinedAt: !782)
!781 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !345, file: !345, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!782 = !DILocation(line: 23, column: 12, scope: !762)
!783 = !DILocation(line: 17, column: 14, scope: !779, inlinedAt: !780)
!784 = !DILocation(line: 100, column: 31, scope: !781, inlinedAt: !782)
!785 = !DILocation(line: 100, column: 35, scope: !781, inlinedAt: !782)
!786 = !DILocation(line: 24, column: 6, scope: !762)
!787 = !DILocation(line: 24, column: 23, scope: !762)
!788 = !DILocation(line: 25, column: 12, scope: !762)
!789 = !DILocation(line: 25, column: 24, scope: !762)
!790 = !DILocation(line: 25, column: 35, scope: !762)
!791 = !DILocation(line: 309, column: 11, scope: !792, inlinedAt: !795)
!792 = distinct !DILexicalBlock(scope: !794, file: !793, line: 312, column: 1)
!793 = !DIFile(filename: "mem.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!794 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !793, file: !793, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!795 = !DILocation(line: 25, column: 7, scope: !762)
!796 = !DILocation(line: 309, column: 23, scope: !792, inlinedAt: !795)
!797 = !DILocation(line: 309, column: 29, scope: !792, inlinedAt: !795)
!798 = !DILocation(line: 309, column: 36, scope: !792, inlinedAt: !795)
!799 = !DILocation(line: 309, column: 43, scope: !792, inlinedAt: !795)
!800 = !DILocation(line: 309, column: 49, scope: !792, inlinedAt: !795)
!801 = !DILocation(line: 309, column: 56, scope: !792, inlinedAt: !795)
!802 = !DILocation(line: 313, column: 11, scope: !794, inlinedAt: !795)
!803 = !DILocation(line: 313, column: 16, scope: !794, inlinedAt: !795)
!804 = !DILocation(line: 313, column: 21, scope: !794, inlinedAt: !795)
!805 = !DILocation(line: 313, column: 26, scope: !794, inlinedAt: !795)
!806 = !DILocation(line: 26, column: 2, scope: !762)
!807 = !DILocation(line: 26, column: 16, scope: !762)
!808 = !DILocation(line: 27, column: 9, scope: !762)
!809 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteReader.read_byte", scope: !739, file: !739, line: 30, type: !810, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!810 = !DISubroutineType(types: !811)
!811 = !{!112, !114, !742}
!812 = !DILocation(line: 31, column: 1, scope: !809)
!813 = !DILocalVariable(name: "self", arg: 1, scope: !809, file: !739, line: 30, type: !742)
!814 = !DILocation(line: 30, column: 31, scope: !809)
!815 = !DILocation(line: 32, column: 6, scope: !809)
!816 = !DILocation(line: 32, column: 20, scope: !809)
!817 = !DILocation(line: 32, column: 43, scope: !809)
!818 = !DILocation(line: 33, column: 9, scope: !809)
!819 = !DILocation(line: 33, column: 20, scope: !809)
!820 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteReader.pushback_byte", scope: !739, file: !739, line: 36, type: !821, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!821 = !DISubroutineType(types: !822)
!822 = !{!112, !7, !742}
!823 = !DILocation(line: 37, column: 1, scope: !820)
!824 = !DILocalVariable(name: "self", arg: 1, scope: !820, file: !739, line: 36, type: !742)
!825 = !DILocation(line: 36, column: 35, scope: !820)
!826 = !DILocation(line: 38, column: 7, scope: !820)
!827 = !DILocation(line: 38, column: 26, scope: !820)
!828 = !DILocation(line: 39, column: 2, scope: !820)
!829 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteReader.seek", scope: !739, file: !739, line: 42, type: !830, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!830 = !DISubroutineType(types: !831)
!831 = !{!112, !407, !742, !113, !42}
!832 = !DILocation(line: 43, column: 1, scope: !829)
!833 = !DILocalVariable(name: "self", arg: 1, scope: !829, file: !739, line: 42, type: !742)
!834 = !DILocation(line: 42, column: 25, scope: !829)
!835 = !DILocalVariable(name: "offset", arg: 2, scope: !829, file: !739, line: 42, type: !571)
!836 = !DILocation(line: 42, column: 36, scope: !829)
!837 = !DILocalVariable(name: "seek", arg: 3, scope: !829, file: !739, line: 42, type: !42)
!838 = !DILocation(line: 42, column: 49, scope: !829)
!839 = !DILocalVariable(name: "new_index", scope: !829, file: !739, line: 44, type: !571, align: 8)
!840 = !DILocation(line: 44, column: 6, scope: !829)
!841 = !DILocation(line: 47, column: 25, scope: !842)
!842 = distinct !DILexicalBlock(scope: !843, file: !739, line: 47, column: 13)
!843 = distinct !DILexicalBlock(scope: !829, file: !739, line: 45, column: 2)
!844 = !DILocation(line: 48, column: 28, scope: !845)
!845 = distinct !DILexicalBlock(scope: !843, file: !739, line: 48, column: 16)
!846 = !DILocation(line: 48, column: 41, scope: !845)
!847 = !DILocation(line: 49, column: 25, scope: !848)
!848 = distinct !DILexicalBlock(scope: !843, file: !739, line: 49, column: 13)
!849 = !DILocation(line: 49, column: 42, scope: !848)
!850 = !DILocation(line: 51, column: 6, scope: !829)
!851 = !DILocation(line: 51, column: 28, scope: !829)
!852 = !DILocation(line: 52, column: 2, scope: !829)
!853 = !DILocation(line: 52, column: 15, scope: !829)
!854 = !DILocation(line: 53, column: 9, scope: !829)
!855 = distinct !DISubprogram(name: "write_to", linkageName: "std.io.ByteReader.write_to", scope: !739, file: !739, line: 56, type: !856, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!856 = !DISubroutineType(types: !857)
!857 = !{!112, !407, !742, !156}
!858 = !DILocation(line: 57, column: 1, scope: !855)
!859 = !DILocalVariable(name: "self", arg: 1, scope: !855, file: !739, line: 56, type: !742)
!860 = !DILocation(line: 56, column: 29, scope: !855)
!861 = !DILocalVariable(name: "writer", arg: 2, scope: !855, file: !739, line: 56, type: !156)
!862 = !DILocation(line: 56, column: 46, scope: !855)
!863 = !DILocation(line: 58, column: 6, scope: !855)
!864 = !DILocation(line: 58, column: 20, scope: !855)
!865 = !DILocation(line: 58, column: 43, scope: !855)
!866 = !DILocalVariable(name: "written", scope: !855, file: !739, line: 59, type: !201, align: 8)
!867 = !DILocation(line: 59, column: 6, scope: !855)
!868 = !DILocation(line: 59, column: 29, scope: !855)
!869 = !DILocation(line: 59, column: 40, scope: !855)
!870 = !DILocation(line: 59, column: 16, scope: !855)
!871 = !DILocation(line: 60, column: 2, scope: !855)
!872 = !DILocation(line: 60, column: 16, scope: !855)
!873 = !DILocation(line: 61, column: 9, scope: !855)
!874 = !DILocation(line: 61, column: 23, scope: !855)
!875 = !DILocation(line: 62, column: 9, scope: !855)
!876 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteReader.available", scope: !739, file: !739, line: 65, type: !877, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!877 = !DISubroutineType(types: !878)
!878 = !{!112, !407, !742}
!879 = !DILocation(line: 66, column: 1, scope: !876)
!880 = !DILocalVariable(name: "self", arg: 1, scope: !876, file: !739, line: 65, type: !742)
!881 = !DILocation(line: 65, column: 30, scope: !876)
!882 = !DILocation(line: 67, column: 16, scope: !876)
!883 = !DILocation(line: 67, column: 33, scope: !876)
!884 = !DILocation(line: 47, column: 10, scope: !885, inlinedAt: !886)
!885 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !345, file: !345, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!886 = !DILocation(line: 116, column: 10, scope: !887, inlinedAt: !888)
!887 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !345, file: !345, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!888 = !DILocation(line: 67, column: 9, scope: !876)
!889 = !DILocation(line: 47, column: 14, scope: !885, inlinedAt: !886)
!890 = !DILocation(line: 116, column: 34, scope: !887, inlinedAt: !888)
!891 = !DILocation(line: 116, column: 38, scope: !887, inlinedAt: !888)
!892 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.ByteWriter.new_init", scope: !893, file: !893, line: 17, type: !894, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!893 = !DIFile(filename: "bytewriter.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io/stream")
!894 = !DISubroutineType(types: !895)
!895 = !{!896, !896, !319}
!896 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteWriter*", baseType: !897, size: 64, align: 64, dwarfAddressSpace: 0)
!897 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteWriter", scope: !893, file: !893, line: 4, size: 320, align: 64, elements: !898, identifier: "std.io.ByteWriter")
!898 = !{!899, !900, !901}
!899 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !897, file: !893, line: 6, baseType: !197, size: 128, align: 64)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !897, file: !893, line: 7, baseType: !201, size: 64, align: 64, offset: 128)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !897, file: !893, line: 8, baseType: !319, size: 128, align: 64, offset: 192)
!902 = !DILocation(line: 18, column: 1, scope: !892)
!903 = !DILocalVariable(name: "self", arg: 1, scope: !892, file: !893, line: 17, type: !896)
!904 = !DILocation(line: 17, column: 36, scope: !892)
!905 = !DILocalVariable(name: "allocator", arg: 2, scope: !892, file: !893, line: 17, type: !319)
!906 = !DILocation(line: 17, column: 53, scope: !892)
!907 = !DILocation(line: 14, column: 11, scope: !908)
!908 = distinct !DILexicalBlock(scope: !892, file: !893, line: 18, column: 1)
!909 = !DILocation(line: 19, column: 3, scope: !892)
!910 = !DILocation(line: 19, column: 21, scope: !892)
!911 = !DILocation(line: 19, column: 38, scope: !892)
!912 = !DILocation(line: 20, column: 9, scope: !892)
!913 = !DILocation(line: 15, column: 11, scope: !892)
!914 = !DILocation(line: 15, column: 27, scope: !892)
!915 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.ByteWriter.temp_init", scope: !893, file: !893, line: 28, type: !916, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!916 = !DISubroutineType(types: !917)
!917 = !{!896, !896}
!918 = !DILocation(line: 29, column: 1, scope: !915)
!919 = !DILocalVariable(name: "self", arg: 1, scope: !915, file: !893, line: 28, type: !896)
!920 = !DILocation(line: 28, column: 37, scope: !915)
!921 = !DILocation(line: 25, column: 11, scope: !922)
!922 = distinct !DILexicalBlock(scope: !915, file: !893, line: 29, column: 1)
!923 = !DILocation(line: 396, column: 7, scope: !924, inlinedAt: !925)
!924 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !367, file: !367, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!925 = !DILocation(line: 30, column: 34, scope: !915)
!926 = !DILocation(line: 398, column: 3, scope: !927, inlinedAt: !925)
!927 = distinct !DILexicalBlock(scope: !924, file: !367, line: 397, column: 2)
!928 = !DILocation(line: 400, column: 9, scope: !924, inlinedAt: !925)
!929 = !DILocation(line: 30, column: 9, scope: !915)
!930 = !DILocation(line: 26, column: 10, scope: !915)
!931 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteWriter.init_with_buffer", scope: !893, file: !893, line: 33, type: !932, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!932 = !DISubroutineType(types: !933)
!933 = !{!896, !896, !197}
!934 = !DILocation(line: 34, column: 1, scope: !931)
!935 = !DILocalVariable(name: "self", arg: 1, scope: !931, file: !893, line: 33, type: !896)
!936 = !DILocation(line: 33, column: 44, scope: !931)
!937 = !DILocalVariable(name: "data", arg: 2, scope: !931, file: !893, line: 33, type: !197)
!938 = !DILocation(line: 33, column: 58, scope: !931)
!939 = !DILocation(line: 35, column: 3, scope: !931)
!940 = !DILocation(line: 35, column: 21, scope: !931)
!941 = !DILocation(line: 35, column: 40, scope: !931)
!942 = !DILocation(line: 36, column: 9, scope: !931)
!943 = distinct !DISubprogram(name: "destroy", linkageName: "std.io.ByteWriter.destroy", scope: !893, file: !893, line: 39, type: !944, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!944 = !DISubroutineType(types: !945)
!945 = !{!112, !7, !896}
!946 = !DILocation(line: 40, column: 1, scope: !943)
!947 = !DILocalVariable(name: "self", arg: 1, scope: !943, file: !893, line: 39, type: !896)
!948 = !DILocation(line: 39, column: 29, scope: !943)
!949 = !DILocation(line: 41, column: 7, scope: !943)
!950 = !DILocalVariable(name: "ptr", scope: !943, file: !893, line: 42, type: !7, align: 8)
!951 = !DILocation(line: 42, column: 12, scope: !943)
!952 = !DILocation(line: 42, column: 18, scope: !943)
!953 = !DILocation(line: 42, column: 50, scope: !943)
!954 = !DILocation(line: 101, column: 7, scope: !955, inlinedAt: !956)
!955 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !367, file: !367, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!956 = !DILocation(line: 42, column: 45, scope: !943)
!957 = !DILocation(line: 101, column: 18, scope: !955, inlinedAt: !956)
!958 = !DILocation(line: 105, column: 25, scope: !955, inlinedAt: !956)
!959 = !DILocation(line: 105, column: 2, scope: !955, inlinedAt: !956)
!960 = !DILocation(line: 43, column: 3, scope: !943)
!961 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ByteWriter.str_view", scope: !893, file: !893, line: 46, type: !962, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!962 = !DISubroutineType(types: !963)
!963 = !{!964, !896}
!964 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !197)
!965 = !DILocation(line: 47, column: 1, scope: !961)
!966 = !DILocalVariable(name: "self", arg: 1, scope: !961, file: !893, line: 46, type: !896)
!967 = !DILocation(line: 46, column: 31, scope: !961)
!968 = !DILocation(line: 48, column: 17, scope: !961)
!969 = !DILocation(line: 48, column: 28, scope: !961)
!970 = !DILocation(line: 48, column: 29, scope: !961)
!971 = !DILocation(line: 48, column: 10, scope: !961)
!972 = distinct !DISubprogram(name: "ensure_capacity", linkageName: "std.io.ByteWriter.ensure_capacity", scope: !893, file: !893, line: 51, type: !973, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!973 = !DISubroutineType(types: !974)
!974 = !{!112, !7, !896, !202}
!975 = !DILocation(line: 52, column: 1, scope: !972)
!976 = !DILocalVariable(name: "self", arg: 1, scope: !972, file: !893, line: 51, type: !896)
!977 = !DILocation(line: 51, column: 37, scope: !972)
!978 = !DILocalVariable(name: "len", arg: 2, scope: !972, file: !893, line: 51, type: !201)
!979 = !DILocation(line: 51, column: 48, scope: !972)
!980 = !DILocation(line: 53, column: 6, scope: !972)
!981 = !DILocation(line: 53, column: 23, scope: !972)
!982 = !DILocation(line: 54, column: 7, scope: !972)
!983 = !DILocation(line: 54, column: 30, scope: !972)
!984 = !DILocation(line: 55, column: 6, scope: !972)
!985 = !DILocation(line: 55, column: 22, scope: !972)
!986 = !DILocalVariable(name: "new_capacity", scope: !972, file: !893, line: 56, type: !201, align: 8)
!987 = !DILocation(line: 56, column: 6, scope: !972)
!988 = !DILocalVariable(name: "y", scope: !989, file: !893, line: 1004, type: !201, align: 8)
!989 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !622, file: !622, line: 1002, scopeLine: 1002, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!990 = !DILocation(line: 1004, column: 13, scope: !989, inlinedAt: !991)
!991 = !DILocation(line: 56, column: 27, scope: !972)
!992 = !DILocation(line: 1004, column: 17, scope: !989, inlinedAt: !991)
!993 = !DILocation(line: 1005, column: 2, scope: !989, inlinedAt: !991)
!994 = !DILocation(line: 1005, column: 9, scope: !995, inlinedAt: !991)
!995 = distinct !DILexicalBlock(scope: !989, file: !622, line: 1005, column: 2)
!996 = !DILocation(line: 1005, column: 13, scope: !995, inlinedAt: !991)
!997 = !DILocation(line: 1005, column: 16, scope: !995, inlinedAt: !991)
!998 = !DILocation(line: 1005, column: 21, scope: !995, inlinedAt: !991)
!999 = !DILocation(line: 1006, column: 9, scope: !989, inlinedAt: !991)
!1000 = !DILocalVariable(name: "new_ptr", scope: !972, file: !893, line: 57, type: !114, align: 8)
!1001 = !DILocation(line: 57, column: 8, scope: !972)
!1002 = !DILocation(line: 57, column: 41, scope: !972)
!1003 = !DILocation(line: 57, column: 57, scope: !972)
!1004 = !DILocation(line: 90, column: 7, scope: !1005, inlinedAt: !1006)
!1005 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !367, file: !367, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1006 = !DILocation(line: 57, column: 29, scope: !972)
!1007 = !DILocation(line: 101, column: 7, scope: !1008, inlinedAt: !1009)
!1008 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !367, file: !367, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1009 = !DILocation(line: 92, column: 3, scope: !1010, inlinedAt: !1006)
!1010 = distinct !DILexicalBlock(scope: !1005, file: !367, line: 91, column: 2)
!1011 = !DILocation(line: 101, column: 18, scope: !1008, inlinedAt: !1009)
!1012 = !DILocation(line: 105, column: 25, scope: !1008, inlinedAt: !1009)
!1013 = !DILocation(line: 105, column: 2, scope: !1008, inlinedAt: !1009)
!1014 = !DILocation(line: 93, column: 10, scope: !1010, inlinedAt: !1006)
!1015 = !DILocation(line: 95, column: 7, scope: !1005, inlinedAt: !1006)
!1016 = !DILocation(line: 28, column: 71, scope: !1017, inlinedAt: !1018)
!1017 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !367, file: !367, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1018 = !DILocation(line: 95, column: 19, scope: !1005, inlinedAt: !1006)
!1019 = !DILocation(line: 35, column: 60, scope: !1020, inlinedAt: !1021)
!1020 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !367, file: !367, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1021 = !DILocation(line: 96, column: 9, scope: !1005, inlinedAt: !1006)
!1022 = !DILocation(line: 58, column: 2, scope: !972)
!1023 = !DILocation(line: 58, column: 15, scope: !972)
!1024 = !DILocation(line: 58, column: 24, scope: !972)
!1025 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteWriter.write", scope: !893, file: !893, line: 61, type: !1026, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1026 = !DISubroutineType(types: !1027)
!1027 = !{!112, !407, !896, !197}
!1028 = !DILocation(line: 62, column: 1, scope: !1025)
!1029 = !DILocalVariable(name: "self", arg: 1, scope: !1025, file: !893, line: 61, type: !896)
!1030 = !DILocation(line: 61, column: 26, scope: !1025)
!1031 = !DILocalVariable(name: "bytes", arg: 2, scope: !1025, file: !893, line: 61, type: !197)
!1032 = !DILocation(line: 61, column: 40, scope: !1025)
!1033 = !DILocation(line: 63, column: 23, scope: !1025)
!1034 = !DILocation(line: 63, column: 36, scope: !1025)
!1035 = !DILocation(line: 63, column: 2, scope: !1025)
!1036 = !DILocation(line: 64, column: 13, scope: !1025)
!1037 = !DILocation(line: 64, column: 24, scope: !1025)
!1038 = !DILocation(line: 64, column: 37, scope: !1025)
!1039 = !DILocation(line: 64, column: 48, scope: !1025)
!1040 = !DILocation(line: 309, column: 11, scope: !1041, inlinedAt: !1043)
!1041 = distinct !DILexicalBlock(scope: !1042, file: !793, line: 312, column: 1)
!1042 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !793, file: !793, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1043 = !DILocation(line: 64, column: 7, scope: !1025)
!1044 = !DILocation(line: 309, column: 23, scope: !1041, inlinedAt: !1043)
!1045 = !DILocation(line: 309, column: 29, scope: !1041, inlinedAt: !1043)
!1046 = !DILocation(line: 309, column: 36, scope: !1041, inlinedAt: !1043)
!1047 = !DILocation(line: 309, column: 43, scope: !1041, inlinedAt: !1043)
!1048 = !DILocation(line: 309, column: 49, scope: !1041, inlinedAt: !1043)
!1049 = !DILocation(line: 309, column: 56, scope: !1041, inlinedAt: !1043)
!1050 = !DILocation(line: 313, column: 11, scope: !1042, inlinedAt: !1043)
!1051 = !DILocation(line: 313, column: 16, scope: !1042, inlinedAt: !1043)
!1052 = !DILocation(line: 313, column: 21, scope: !1042, inlinedAt: !1043)
!1053 = !DILocation(line: 313, column: 26, scope: !1042, inlinedAt: !1043)
!1054 = !DILocation(line: 65, column: 2, scope: !1025)
!1055 = !DILocation(line: 65, column: 16, scope: !1025)
!1056 = !DILocation(line: 66, column: 9, scope: !1025)
!1057 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteWriter.write_byte", scope: !893, file: !893, line: 69, type: !1058, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1058 = !DISubroutineType(types: !1059)
!1059 = !{!112, !7, !896, !16}
!1060 = !DILocation(line: 70, column: 1, scope: !1057)
!1061 = !DILocalVariable(name: "self", arg: 1, scope: !1057, file: !893, line: 69, type: !896)
!1062 = !DILocation(line: 69, column: 32, scope: !1057)
!1063 = !DILocalVariable(name: "c", arg: 2, scope: !1057, file: !893, line: 69, type: !16)
!1064 = !DILocation(line: 69, column: 44, scope: !1057)
!1065 = !DILocation(line: 71, column: 23, scope: !1057)
!1066 = !DILocation(line: 71, column: 2, scope: !1057)
!1067 = !DILocation(line: 72, column: 2, scope: !1057)
!1068 = !DILocation(line: 72, column: 13, scope: !1057)
!1069 = !DILocation(line: 72, column: 29, scope: !1057)
!1070 = distinct !DISubprogram(name: "read_from", linkageName: "std.io.ByteWriter.read_from", scope: !893, file: !893, line: 79, type: !1071, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1071 = !DISubroutineType(types: !1072)
!1072 = !{!112, !407, !896, !85}
!1073 = !DILocation(line: 80, column: 1, scope: !1070)
!1074 = !DILocalVariable(name: "self", arg: 1, scope: !1070, file: !893, line: 79, type: !896)
!1075 = !DILocation(line: 79, column: 30, scope: !1070)
!1076 = !DILocalVariable(name: "reader", arg: 2, scope: !1070, file: !893, line: 79, type: !85)
!1077 = !DILocation(line: 79, column: 46, scope: !1070)
!1078 = !DILocalVariable(name: "start_index", scope: !1070, file: !893, line: 81, type: !201, align: 8)
!1079 = !DILocation(line: 81, column: 6, scope: !1070)
!1080 = !DILocation(line: 81, column: 20, scope: !1070)
!1081 = !DILocation(line: 82, column: 7, scope: !1070)
!1082 = !DILocation(line: 84, column: 3, scope: !1083)
!1083 = distinct !DILexicalBlock(scope: !1070, file: !893, line: 83, column: 2)
!1084 = !DILocalVariable(name: "available", scope: !1085, file: !893, line: 84, type: !201, align: 8)
!1085 = distinct !DILexicalBlock(scope: !1083, file: !893, line: 84, column: 3)
!1086 = !DILocation(line: 84, column: 14, scope: !1085)
!1087 = !DILocation(line: 84, column: 26, scope: !1085)
!1088 = !DILocation(line: 86, column: 25, scope: !1089)
!1089 = distinct !DILexicalBlock(scope: !1085, file: !893, line: 85, column: 3)
!1090 = !DILocation(line: 86, column: 38, scope: !1089)
!1091 = !DILocation(line: 86, column: 4, scope: !1089)
!1092 = !DILocalVariable(name: "read", scope: !1089, file: !893, line: 87, type: !201, align: 8)
!1093 = !DILocation(line: 87, column: 8, scope: !1089)
!1094 = !DILocation(line: 87, column: 27, scope: !1089)
!1095 = !DILocation(line: 87, column: 38, scope: !1089)
!1096 = !DILocation(line: 87, column: 15, scope: !1089)
!1097 = !DILocation(line: 88, column: 4, scope: !1089)
!1098 = !DILocation(line: 88, column: 18, scope: !1089)
!1099 = !DILocation(line: 90, column: 10, scope: !1083)
!1100 = !DILocation(line: 90, column: 23, scope: !1083)
!1101 = !DILocation(line: 92, column: 6, scope: !1070)
!1102 = !DILocation(line: 94, column: 24, scope: !1103)
!1103 = distinct !DILexicalBlock(scope: !1070, file: !893, line: 93, column: 2)
!1104 = !DILocation(line: 94, column: 3, scope: !1103)
!1105 = !DILocation(line: 96, column: 2, scope: !1070)
!1106 = !DILocalVariable(name: "len_to_read", scope: !1107, file: !893, line: 99, type: !201, align: 8)
!1107 = distinct !DILexicalBlock(scope: !1108, file: !893, line: 97, column: 2)
!1108 = distinct !DILexicalBlock(scope: !1070, file: !893, line: 96, column: 2)
!1109 = !DILocation(line: 99, column: 7, scope: !1107)
!1110 = !DILocation(line: 99, column: 21, scope: !1107)
!1111 = !DILocation(line: 99, column: 38, scope: !1107)
!1112 = !DILocation(line: 101, column: 7, scope: !1107)
!1113 = !DILocation(line: 103, column: 25, scope: !1114)
!1114 = distinct !DILexicalBlock(scope: !1107, file: !893, line: 102, column: 3)
!1115 = !DILocation(line: 103, column: 4, scope: !1114)
!1116 = !DILocation(line: 104, column: 18, scope: !1114)
!1117 = !DILocation(line: 104, column: 35, scope: !1114)
!1118 = !DILocalVariable(name: "read", scope: !1107, file: !893, line: 107, type: !201, align: 8)
!1119 = !DILocation(line: 107, column: 7, scope: !1107)
!1120 = !DILocation(line: 107, column: 26, scope: !1107)
!1121 = !DILocation(line: 107, column: 37, scope: !1107)
!1122 = !DILocation(line: 107, column: 14, scope: !1107)
!1123 = !DILocation(line: 108, column: 3, scope: !1107)
!1124 = !DILocation(line: 108, column: 17, scope: !1107)
!1125 = !DILocation(line: 110, column: 7, scope: !1107)
!1126 = !DILocation(line: 110, column: 14, scope: !1107)
!1127 = !DILocation(line: 110, column: 34, scope: !1107)
!1128 = !DILocation(line: 110, column: 47, scope: !1107)
!1129 = distinct !DISubprogram(name: "init", linkageName: "std.io.Scanner.init", scope: !1130, file: !1130, line: 19, type: !1131, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1130 = !DIFile(filename: "scanner.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io/stream")
!1131 = !DISubroutineType(types: !1132)
!1132 = !{null, !1133, !85, !197}
!1133 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Scanner*", baseType: !1134, size: 64, align: 64, dwarfAddressSpace: 0)
!1134 = !DICompositeType(tag: DW_TAG_structure_type, name: "Scanner", scope: !1130, file: !1130, line: 3, size: 384, align: 64, elements: !1135, identifier: "std.io.Scanner")
!1135 = !{!1136, !1137, !1138, !1139}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !1134, file: !1130, line: 5, baseType: !85, size: 128, align: 64)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1134, file: !1130, line: 6, baseType: !197, size: 128, align: 64, offset: 128)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_idx", scope: !1134, file: !1130, line: 7, baseType: !201, size: 64, align: 64, offset: 256)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !1134, file: !1130, line: 8, baseType: !201, size: 64, align: 64, offset: 320)
!1140 = !DILocation(line: 20, column: 1, scope: !1129)
!1141 = !DILocalVariable(name: "self", arg: 1, scope: !1129, file: !1130, line: 19, type: !1133)
!1142 = !DILocation(line: 19, column: 22, scope: !1129)
!1143 = !DILocalVariable(name: "stream", arg: 2, scope: !1129, file: !1130, line: 19, type: !85)
!1144 = !DILocation(line: 19, column: 38, scope: !1129)
!1145 = !DILocalVariable(name: "buffer", arg: 3, scope: !1129, file: !1130, line: 19, type: !197)
!1146 = !DILocation(line: 19, column: 53, scope: !1129)
!1147 = !DILocation(line: 17, column: 11, scope: !1148)
!1148 = distinct !DILexicalBlock(scope: !1129, file: !1130, line: 20, column: 1)
!1149 = !DILocation(line: 21, column: 3, scope: !1129)
!1150 = !DILocation(line: 21, column: 30, scope: !1129)
!1151 = !DILocation(line: 21, column: 45, scope: !1129)
!1152 = distinct !DISubprogram(name: "flush", linkageName: "std.io.Scanner.flush", scope: !1130, file: !1130, line: 28, type: !1153, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1153 = !DISubroutineType(types: !1154)
!1154 = !{!197, !1133}
!1155 = !DILocation(line: 29, column: 1, scope: !1152)
!1156 = !DILocalVariable(name: "self", arg: 1, scope: !1152, file: !1130, line: 28, type: !1133)
!1157 = !DILocation(line: 28, column: 25, scope: !1152)
!1158 = !DILocation(line: 30, column: 9, scope: !1152)
!1159 = !DILocation(line: 30, column: 26, scope: !1152)
!1160 = !DILocalVariable(name: "n", scope: !1152, file: !1130, line: 31, type: !201, align: 8)
!1161 = !DILocation(line: 31, column: 6, scope: !1152)
!1162 = !DILocation(line: 31, column: 10, scope: !1152)
!1163 = !DILocation(line: 31, column: 26, scope: !1152)
!1164 = !DILocalVariable(name: "buf", scope: !1152, file: !1130, line: 32, type: !197, align: 8)
!1165 = !DILocation(line: 32, column: 9, scope: !1152)
!1166 = !DILocation(line: 32, column: 15, scope: !1152)
!1167 = !DILocation(line: 32, column: 24, scope: !1152)
!1168 = !DILocation(line: 32, column: 41, scope: !1152)
!1169 = !DILocation(line: 33, column: 2, scope: !1152)
!1170 = !DILocation(line: 33, column: 21, scope: !1152)
!1171 = !DILocation(line: 34, column: 2, scope: !1152)
!1172 = !DILocation(line: 34, column: 18, scope: !1152)
!1173 = !DILocation(line: 35, column: 9, scope: !1152)
!1174 = distinct !DISubprogram(name: "close", linkageName: "std.io.Scanner.close", scope: !1130, file: !1130, line: 38, type: !1175, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!112, !7, !1133}
!1177 = !DILocation(line: 39, column: 1, scope: !1174)
!1178 = !DILocalVariable(name: "self", arg: 1, scope: !1174, file: !1130, line: 38, type: !1133)
!1179 = !DILocation(line: 38, column: 24, scope: !1174)
!1180 = !DILocation(line: 40, column: 7, scope: !1174)
!1181 = !DILocation(line: 40, column: 41, scope: !1174)
!1182 = distinct !DISubprogram(name: "scan", linkageName: "std.io.Scanner.scan", scope: !1130, file: !1130, line: 48, type: !1183, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1183 = !DISubroutineType(types: !1184)
!1184 = !{!112, !1185, !1133, !964}
!1185 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char[]*", baseType: !197, size: 64, align: 64, dwarfAddressSpace: 0)
!1186 = !DILocation(line: 49, column: 1, scope: !1182)
!1187 = !DILocalVariable(name: "self", arg: 1, scope: !1182, file: !1130, line: 48, type: !1133)
!1188 = !DILocation(line: 48, column: 25, scope: !1182)
!1189 = !DILocalVariable(name: "pattern", arg: 2, scope: !1182, file: !1130, line: 48, type: !964)
!1190 = !DILocation(line: 48, column: 39, scope: !1182)
!1191 = !DILocation(line: 45, column: 11, scope: !1192)
!1192 = distinct !DILexicalBlock(scope: !1182, file: !1130, line: 49, column: 1)
!1193 = !DILocation(line: 46, column: 11, scope: !1192)
!1194 = !DILocation(line: 46, column: 26, scope: !1192)
!1195 = !DILocation(line: 50, column: 6, scope: !1182)
!1196 = !DILocation(line: 53, column: 3, scope: !1197)
!1197 = distinct !DILexicalBlock(scope: !1182, file: !1130, line: 51, column: 2)
!1198 = !DILocation(line: 53, column: 31, scope: !1197)
!1199 = !DILocalVariable(name: "n", scope: !1200, file: !1130, line: 92, type: !202, align: 8)
!1200 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !1130, file: !1130, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1201 = !DILocation(line: 92, column: 7, scope: !1200, inlinedAt: !1202)
!1202 = !DILocation(line: 53, column: 19, scope: !1197)
!1203 = !DILocation(line: 92, column: 11, scope: !1200, inlinedAt: !1202)
!1204 = !DILocation(line: 92, column: 36, scope: !1200, inlinedAt: !1202)
!1205 = !DILocalVariable(name: "err", scope: !1200, file: !1130, line: 93, type: !112, align: 8)
!1206 = !DILocation(line: 93, column: 12, scope: !1200, inlinedAt: !1202)
!1207 = !DILocation(line: 93, column: 18, scope: !1200, inlinedAt: !1202)
!1208 = !DILocation(line: 95, column: 8, scope: !1200, inlinedAt: !1202)
!1209 = !DILocation(line: 96, column: 11, scope: !1210, inlinedAt: !1202)
!1210 = distinct !DILexicalBlock(scope: !1200, file: !1130, line: 96, column: 4)
!1211 = !DILocation(line: 98, column: 11, scope: !1212, inlinedAt: !1202)
!1212 = distinct !DILexicalBlock(scope: !1200, file: !1130, line: 98, column: 4)
!1213 = !DILocation(line: 100, column: 9, scope: !1200, inlinedAt: !1202)
!1214 = !DILocation(line: 54, column: 3, scope: !1197)
!1215 = !DILocation(line: 54, column: 22, scope: !1197)
!1216 = !DILocation(line: 56, column: 9, scope: !1182)
!1217 = !DILocation(line: 56, column: 26, scope: !1182)
!1218 = !DILocalVariable(name: "n", scope: !1182, file: !1130, line: 57, type: !201, align: 8)
!1219 = !DILocation(line: 57, column: 6, scope: !1182)
!1220 = !DILocation(line: 57, column: 10, scope: !1182)
!1221 = !DILocation(line: 57, column: 26, scope: !1182)
!1222 = !DILocalVariable(name: "buf", scope: !1182, file: !1130, line: 58, type: !197, align: 8)
!1223 = !DILocation(line: 58, column: 9, scope: !1182)
!1224 = !DILocation(line: 58, column: 15, scope: !1182)
!1225 = !DILocation(line: 58, column: 24, scope: !1182)
!1226 = !DILocation(line: 58, column: 41, scope: !1182)
!1227 = !DILocalVariable(name: "i", scope: !1182, file: !1130, line: 59, type: !201, align: 8)
!1228 = !DILocation(line: 59, column: 10, scope: !1182)
!1229 = !DILocation(line: 87, column: 11, scope: !1230, inlinedAt: !1231)
!1230 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !1130, file: !1130, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1231 = !DILocation(line: 59, column: 14, scope: !1182)
!1232 = !DILocation(line: 61, column: 3, scope: !1233)
!1233 = distinct !DILexicalBlock(scope: !1182, file: !1130, line: 60, column: 2)
!1234 = !DILocation(line: 61, column: 23, scope: !1233)
!1235 = !DILocation(line: 61, column: 27, scope: !1233)
!1236 = !DILocation(line: 62, column: 10, scope: !1233)
!1237 = !DILocation(line: 62, column: 14, scope: !1233)
!1238 = !DILocation(line: 62, column: 15, scope: !1233)
!1239 = !DILocation(line: 64, column: 6, scope: !1182)
!1240 = !DILocation(line: 64, column: 31, scope: !1182)
!1241 = !DILocation(line: 64, column: 47, scope: !1182)
!1242 = !DILocation(line: 68, column: 10, scope: !1243)
!1243 = distinct !DILexicalBlock(scope: !1182, file: !1130, line: 65, column: 2)
!1244 = !DILocation(line: 71, column: 17, scope: !1182)
!1245 = !DILocation(line: 71, column: 21, scope: !1182)
!1246 = !DILocation(line: 71, column: 2, scope: !1182)
!1247 = !DILocation(line: 71, column: 11, scope: !1182)
!1248 = !DILocation(line: 71, column: 12, scope: !1182)
!1249 = !DILocation(line: 72, column: 2, scope: !1182)
!1250 = !DILocation(line: 72, column: 21, scope: !1182)
!1251 = !DILocation(line: 74, column: 8, scope: !1182)
!1252 = !DILocation(line: 74, column: 17, scope: !1182)
!1253 = !DILocalVariable(name: "p", scope: !1182, file: !1130, line: 75, type: !201, align: 8)
!1254 = !DILocation(line: 75, column: 6, scope: !1182)
!1255 = !DILocalVariable(name: "n", scope: !1256, file: !1130, line: 92, type: !202, align: 8)
!1256 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !1130, file: !1130, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1257 = !DILocation(line: 92, column: 7, scope: !1256, inlinedAt: !1258)
!1258 = !DILocation(line: 75, column: 10, scope: !1182)
!1259 = !DILocation(line: 92, column: 11, scope: !1256, inlinedAt: !1258)
!1260 = !DILocation(line: 92, column: 36, scope: !1256, inlinedAt: !1258)
!1261 = !DILocalVariable(name: "err", scope: !1256, file: !1130, line: 93, type: !112, align: 8)
!1262 = !DILocation(line: 93, column: 12, scope: !1256, inlinedAt: !1258)
!1263 = !DILocation(line: 93, column: 18, scope: !1256, inlinedAt: !1258)
!1264 = !DILocation(line: 95, column: 8, scope: !1256, inlinedAt: !1258)
!1265 = !DILocation(line: 96, column: 11, scope: !1266, inlinedAt: !1258)
!1266 = distinct !DILexicalBlock(scope: !1256, file: !1130, line: 96, column: 4)
!1267 = !DILocation(line: 98, column: 11, scope: !1268, inlinedAt: !1258)
!1268 = distinct !DILexicalBlock(scope: !1256, file: !1130, line: 98, column: 4)
!1269 = !DILocation(line: 100, column: 9, scope: !1256, inlinedAt: !1258)
!1270 = !DILocation(line: 76, column: 2, scope: !1182)
!1271 = !DILocation(line: 76, column: 18, scope: !1182)
!1272 = !DILocation(line: 76, column: 22, scope: !1182)
!1273 = !DILocation(line: 78, column: 8, scope: !1182)
!1274 = !DILocation(line: 78, column: 12, scope: !1182)
!1275 = !DILocation(line: 78, column: 13, scope: !1182)
!1276 = !DILocalVariable(name: "i", scope: !1182, file: !1130, line: 79, type: !201, align: 8)
!1277 = !DILocation(line: 79, column: 6, scope: !1182)
!1278 = !DILocation(line: 87, column: 11, scope: !1279, inlinedAt: !1280)
!1279 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !1130, file: !1130, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1280 = !DILocation(line: 79, column: 10, scope: !1182)
!1281 = !DILocation(line: 80, column: 2, scope: !1182)
!1282 = !DILocation(line: 80, column: 21, scope: !1182)
!1283 = !DILocation(line: 80, column: 25, scope: !1182)
!1284 = !DILocation(line: 80, column: 29, scope: !1182)
!1285 = !DILocation(line: 82, column: 9, scope: !1182)
!1286 = !DILocation(line: 82, column: 18, scope: !1182)
!1287 = !DILocation(line: 82, column: 19, scope: !1182)
!1288 = !DILocation(line: 82, column: 23, scope: !1182)
!1289 = distinct !DISubprogram(name: "read", linkageName: "std.io.Scanner.read", scope: !1130, file: !1130, line: 103, type: !1290, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1290 = !DISubroutineType(types: !1291)
!1291 = !{!112, !407, !1133, !197}
!1292 = !DILocation(line: 104, column: 1, scope: !1289)
!1293 = !DILocalVariable(name: "self", arg: 1, scope: !1289, file: !1130, line: 103, type: !1133)
!1294 = !DILocation(line: 103, column: 22, scope: !1289)
!1295 = !DILocalVariable(name: "bytes", arg: 2, scope: !1289, file: !1130, line: 103, type: !197)
!1296 = !DILocation(line: 103, column: 36, scope: !1289)
!1297 = !DILocalVariable(name: "n", scope: !1289, file: !1130, line: 105, type: !201, align: 8)
!1298 = !DILocation(line: 105, column: 6, scope: !1289)
!1299 = !DILocation(line: 106, column: 6, scope: !1289)
!1300 = !DILocation(line: 106, column: 25, scope: !1289)
!1301 = !DILocation(line: 108, column: 11, scope: !1302)
!1302 = distinct !DILexicalBlock(scope: !1289, file: !1130, line: 107, column: 2)
!1303 = !DILocation(line: 108, column: 22, scope: !1302)
!1304 = !DILocation(line: 108, column: 38, scope: !1302)
!1305 = !DILocation(line: 17, column: 10, scope: !1306, inlinedAt: !1307)
!1306 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !345, file: !345, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1307 = !DILocation(line: 100, column: 10, scope: !1308, inlinedAt: !1309)
!1308 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !345, file: !345, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1309 = !DILocation(line: 108, column: 7, scope: !1302)
!1310 = !DILocation(line: 17, column: 14, scope: !1306, inlinedAt: !1307)
!1311 = !DILocation(line: 100, column: 31, scope: !1308, inlinedAt: !1309)
!1312 = !DILocation(line: 100, column: 35, scope: !1308, inlinedAt: !1309)
!1313 = !DILocation(line: 109, column: 15, scope: !1302)
!1314 = !DILocation(line: 109, column: 24, scope: !1302)
!1315 = !DILocation(line: 109, column: 41, scope: !1302)
!1316 = !DILocation(line: 109, column: 3, scope: !1302)
!1317 = !DILocation(line: 109, column: 9, scope: !1302)
!1318 = !DILocation(line: 109, column: 10, scope: !1302)
!1319 = !DILocation(line: 110, column: 3, scope: !1302)
!1320 = !DILocation(line: 110, column: 23, scope: !1302)
!1321 = !DILocation(line: 111, column: 11, scope: !1302)
!1322 = !DILocation(line: 111, column: 17, scope: !1302)
!1323 = !DILocation(line: 113, column: 2, scope: !1289)
!1324 = !DILocation(line: 113, column: 7, scope: !1289)
!1325 = !DILocation(line: 113, column: 32, scope: !1289)
!1326 = !DILocation(line: 114, column: 9, scope: !1289)
!1327 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.Scanner.read_byte", scope: !1130, file: !1130, line: 117, type: !1328, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1328 = !DISubroutineType(types: !1329)
!1329 = !{!112, !114, !1133}
!1330 = !DILocation(line: 118, column: 1, scope: !1327)
!1331 = !DILocalVariable(name: "self", arg: 1, scope: !1327, file: !1130, line: 117, type: !1133)
!1332 = !DILocation(line: 117, column: 28, scope: !1327)
!1333 = !DILocation(line: 119, column: 6, scope: !1327)
!1334 = !DILocation(line: 119, column: 25, scope: !1327)
!1335 = !DILocation(line: 121, column: 10, scope: !1336)
!1336 = distinct !DILexicalBlock(scope: !1327, file: !1130, line: 120, column: 2)
!1337 = !DILocation(line: 121, column: 19, scope: !1336)
!1338 = !DILocation(line: 123, column: 9, scope: !1327)
!1339 = distinct !DISubprogram(name: "init", linkageName: "std.io.ReadBuffer.init", scope: !1340, file: !1340, line: 17, type: !1341, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1340 = !DIFile(filename: "buffer.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/io/stream")
!1341 = !DISubroutineType(types: !1342)
!1342 = !{!1343, !1343, !85, !197}
!1343 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReadBuffer*", baseType: !1344, size: 64, align: 64, dwarfAddressSpace: 0)
!1344 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReadBuffer", scope: !1340, file: !1340, line: 3, size: 384, align: 64, elements: !1345, identifier: "std.io.ReadBuffer")
!1345 = !{!1346, !1347, !1348, !1349}
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !1344, file: !1340, line: 5, baseType: !85, size: 128, align: 64)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1344, file: !1340, line: 6, baseType: !197, size: 128, align: 64, offset: 128)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !1344, file: !1340, line: 7, baseType: !201, size: 64, align: 64, offset: 256)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !1344, file: !1340, line: 8, baseType: !201, size: 64, align: 64, offset: 320)
!1350 = !DILocation(line: 18, column: 1, scope: !1339)
!1351 = !DILocalVariable(name: "self", arg: 1, scope: !1339, file: !1340, line: 17, type: !1343)
!1352 = !DILocation(line: 17, column: 32, scope: !1339)
!1353 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !1339, file: !1340, line: 17, type: !85)
!1354 = !DILocation(line: 17, column: 48, scope: !1339)
!1355 = !DILocalVariable(name: "bytes", arg: 3, scope: !1339, file: !1340, line: 17, type: !197)
!1356 = !DILocation(line: 17, column: 71, scope: !1339)
!1357 = !DILocation(line: 14, column: 11, scope: !1358)
!1358 = distinct !DILexicalBlock(scope: !1339, file: !1340, line: 18, column: 1)
!1359 = !DILocation(line: 15, column: 11, scope: !1358)
!1360 = !DILocation(line: 19, column: 3, scope: !1339)
!1361 = !DILocation(line: 19, column: 30, scope: !1339)
!1362 = !DILocation(line: 19, column: 55, scope: !1339)
!1363 = !DILocation(line: 20, column: 9, scope: !1339)
!1364 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ReadBuffer.str_view", scope: !1340, file: !1340, line: 22, type: !1365, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1365 = !DISubroutineType(types: !1366)
!1366 = !{!964, !1343}
!1367 = !DILocation(line: 23, column: 1, scope: !1364)
!1368 = !DILocalVariable(name: "self", arg: 1, scope: !1364, file: !1340, line: 22, type: !1343)
!1369 = !DILocation(line: 22, column: 31, scope: !1364)
!1370 = !DILocation(line: 24, column: 17, scope: !1364)
!1371 = !DILocation(line: 24, column: 28, scope: !1364)
!1372 = !DILocation(line: 24, column: 42, scope: !1364)
!1373 = !DILocation(line: 24, column: 59, scope: !1364)
!1374 = !DILocation(line: 24, column: 10, scope: !1364)
!1375 = distinct !DISubprogram(name: "close", linkageName: "std.io.ReadBuffer.close", scope: !1340, file: !1340, line: 27, type: !1376, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1376 = !DISubroutineType(types: !1377)
!1377 = !{!112, !7, !1343}
!1378 = !DILocation(line: 28, column: 1, scope: !1375)
!1379 = !DILocalVariable(name: "self", arg: 1, scope: !1375, file: !1340, line: 27, type: !1343)
!1380 = !DILocation(line: 27, column: 27, scope: !1375)
!1381 = !DILocation(line: 29, column: 7, scope: !1375)
!1382 = !DILocation(line: 29, column: 34, scope: !1375)
!1383 = distinct !DISubprogram(name: "read", linkageName: "std.io.ReadBuffer.read", scope: !1340, file: !1340, line: 32, type: !1384, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1384 = !DISubroutineType(types: !1385)
!1385 = !{!112, !407, !1343, !197}
!1386 = !DILocation(line: 33, column: 1, scope: !1383)
!1387 = !DILocalVariable(name: "self", arg: 1, scope: !1383, file: !1340, line: 32, type: !1343)
!1388 = !DILocation(line: 32, column: 25, scope: !1383)
!1389 = !DILocalVariable(name: "bytes", arg: 2, scope: !1383, file: !1340, line: 32, type: !197)
!1390 = !DILocation(line: 32, column: 39, scope: !1383)
!1391 = !DILocation(line: 34, column: 6, scope: !1383)
!1392 = !DILocation(line: 34, column: 23, scope: !1383)
!1393 = !DILocation(line: 36, column: 7, scope: !1394)
!1394 = distinct !DILexicalBlock(scope: !1383, file: !1340, line: 35, column: 2)
!1395 = !DILocation(line: 36, column: 29, scope: !1394)
!1396 = !DILocation(line: 36, column: 42, scope: !1394)
!1397 = !DILocation(line: 39, column: 11, scope: !1398)
!1398 = distinct !DILexicalBlock(scope: !1394, file: !1340, line: 37, column: 3)
!1399 = !DILocation(line: 39, column: 36, scope: !1398)
!1400 = !DILocation(line: 41, column: 3, scope: !1394)
!1401 = !DILocalVariable(name: "n", scope: !1383, file: !1340, line: 43, type: !201, align: 8)
!1402 = !DILocation(line: 43, column: 6, scope: !1383)
!1403 = !DILocation(line: 43, column: 14, scope: !1383)
!1404 = !DILocation(line: 43, column: 31, scope: !1383)
!1405 = !DILocation(line: 43, column: 46, scope: !1383)
!1406 = !DILocation(line: 17, column: 10, scope: !1407, inlinedAt: !1408)
!1407 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !345, file: !345, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1408 = !DILocation(line: 100, column: 10, scope: !1409, inlinedAt: !1410)
!1409 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !345, file: !345, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1410 = !DILocation(line: 43, column: 10, scope: !1383)
!1411 = !DILocation(line: 17, column: 14, scope: !1407, inlinedAt: !1408)
!1412 = !DILocation(line: 100, column: 31, scope: !1409, inlinedAt: !1410)
!1413 = !DILocation(line: 100, column: 35, scope: !1409, inlinedAt: !1410)
!1414 = !DILocation(line: 44, column: 14, scope: !1383)
!1415 = !DILocation(line: 44, column: 25, scope: !1383)
!1416 = !DILocation(line: 44, column: 39, scope: !1383)
!1417 = !DILocation(line: 44, column: 2, scope: !1383)
!1418 = !DILocation(line: 44, column: 8, scope: !1383)
!1419 = !DILocation(line: 44, column: 9, scope: !1383)
!1420 = !DILocation(line: 45, column: 2, scope: !1383)
!1421 = !DILocation(line: 45, column: 19, scope: !1383)
!1422 = !DILocation(line: 46, column: 9, scope: !1383)
!1423 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ReadBuffer.read_byte", scope: !1340, file: !1340, line: 49, type: !1424, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1424 = !DISubroutineType(types: !1425)
!1425 = !{!112, !114, !1343}
!1426 = !DILocation(line: 50, column: 1, scope: !1423)
!1427 = !DILocalVariable(name: "self", arg: 1, scope: !1423, file: !1340, line: 49, type: !1343)
!1428 = !DILocation(line: 49, column: 31, scope: !1423)
!1429 = !DILocation(line: 51, column: 6, scope: !1423)
!1430 = !DILocation(line: 51, column: 23, scope: !1423)
!1431 = !DILocation(line: 51, column: 39, scope: !1423)
!1432 = !DILocation(line: 52, column: 6, scope: !1423)
!1433 = !DILocation(line: 52, column: 23, scope: !1423)
!1434 = !DILocation(line: 52, column: 46, scope: !1423)
!1435 = !DILocalVariable(name: "c", scope: !1423, file: !1340, line: 53, type: !16, align: 1)
!1436 = !DILocation(line: 53, column: 7, scope: !1423)
!1437 = !DILocation(line: 53, column: 11, scope: !1423)
!1438 = !DILocation(line: 53, column: 22, scope: !1423)
!1439 = !DILocation(line: 54, column: 2, scope: !1423)
!1440 = !DILocation(line: 55, column: 9, scope: !1423)
!1441 = distinct !DISubprogram(name: "refill", linkageName: "std.io.ReadBuffer.refill", scope: !1340, file: !1340, line: 58, type: !1376, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1442 = !DILocation(line: 59, column: 1, scope: !1441)
!1443 = !DILocalVariable(name: "self", arg: 1, scope: !1441, file: !1340, line: 58, type: !1343)
!1444 = !DILocation(line: 58, column: 28, scope: !1441)
!1445 = !DILocation(line: 60, column: 2, scope: !1441)
!1446 = !DILocation(line: 60, column: 18, scope: !1441)
!1447 = !DILocation(line: 61, column: 2, scope: !1441)
!1448 = !DILocation(line: 61, column: 19, scope: !1441)
!1449 = !DILocation(line: 61, column: 44, scope: !1441)
!1450 = distinct !DISubprogram(name: "init", linkageName: "std.io.WriteBuffer.init", scope: !1340, file: !1340, line: 77, type: !1451, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1451 = !DISubroutineType(types: !1452)
!1452 = !{!1453, !1453, !156, !197}
!1453 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WriteBuffer*", baseType: !1454, size: 64, align: 64, dwarfAddressSpace: 0)
!1454 = !DICompositeType(tag: DW_TAG_structure_type, name: "WriteBuffer", scope: !1340, file: !1340, line: 64, size: 320, align: 64, elements: !1455, identifier: "std.io.WriteBuffer")
!1455 = !{!1456, !1457, !1458}
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !1454, file: !1340, line: 66, baseType: !156, size: 128, align: 64)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1454, file: !1340, line: 67, baseType: !197, size: 128, align: 64, offset: 128)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1454, file: !1340, line: 68, baseType: !201, size: 64, align: 64, offset: 256)
!1459 = !DILocation(line: 78, column: 1, scope: !1450)
!1460 = !DILocalVariable(name: "self", arg: 1, scope: !1450, file: !1340, line: 77, type: !1453)
!1461 = !DILocation(line: 77, column: 34, scope: !1450)
!1462 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !1450, file: !1340, line: 77, type: !156)
!1463 = !DILocation(line: 77, column: 51, scope: !1450)
!1464 = !DILocalVariable(name: "bytes", arg: 3, scope: !1450, file: !1340, line: 77, type: !197)
!1465 = !DILocation(line: 77, column: 74, scope: !1450)
!1466 = !DILocation(line: 74, column: 11, scope: !1467)
!1467 = distinct !DILexicalBlock(scope: !1450, file: !1340, line: 78, column: 1)
!1468 = !DILocation(line: 75, column: 11, scope: !1467)
!1469 = !DILocation(line: 79, column: 3, scope: !1450)
!1470 = !DILocation(line: 79, column: 30, scope: !1450)
!1471 = !DILocation(line: 79, column: 55, scope: !1450)
!1472 = !DILocation(line: 80, column: 9, scope: !1450)
!1473 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.WriteBuffer.str_view", scope: !1340, file: !1340, line: 83, type: !1474, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1474 = !DISubroutineType(types: !1475)
!1475 = !{!964, !1453}
!1476 = !DILocation(line: 84, column: 1, scope: !1473)
!1477 = !DILocalVariable(name: "self", arg: 1, scope: !1473, file: !1340, line: 83, type: !1453)
!1478 = !DILocation(line: 83, column: 32, scope: !1473)
!1479 = !DILocation(line: 85, column: 17, scope: !1473)
!1480 = !DILocation(line: 85, column: 28, scope: !1473)
!1481 = !DILocation(line: 85, column: 29, scope: !1473)
!1482 = !DILocation(line: 85, column: 10, scope: !1473)
!1483 = distinct !DISubprogram(name: "close", linkageName: "std.io.WriteBuffer.close", scope: !1340, file: !1340, line: 88, type: !1484, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1484 = !DISubroutineType(types: !1485)
!1485 = !{!112, !7, !1453}
!1486 = !DILocation(line: 89, column: 1, scope: !1483)
!1487 = !DILocalVariable(name: "self", arg: 1, scope: !1483, file: !1340, line: 88, type: !1453)
!1488 = !DILocation(line: 88, column: 28, scope: !1483)
!1489 = !DILocation(line: 90, column: 7, scope: !1483)
!1490 = !DILocation(line: 90, column: 41, scope: !1483)
!1491 = distinct !DISubprogram(name: "flush", linkageName: "std.io.WriteBuffer.flush", scope: !1340, file: !1340, line: 93, type: !1484, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1492 = !DILocation(line: 94, column: 1, scope: !1491)
!1493 = !DILocalVariable(name: "self", arg: 1, scope: !1491, file: !1340, line: 93, type: !1453)
!1494 = !DILocation(line: 93, column: 28, scope: !1491)
!1495 = !DILocation(line: 95, column: 2, scope: !1491)
!1496 = !DILocation(line: 96, column: 7, scope: !1491)
!1497 = !DILocation(line: 96, column: 34, scope: !1491)
!1498 = distinct !DISubprogram(name: "write", linkageName: "std.io.WriteBuffer.write", scope: !1340, file: !1340, line: 99, type: !1499, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1499 = !DISubroutineType(types: !1500)
!1500 = !{!112, !407, !1453, !197}
!1501 = !DILocation(line: 100, column: 1, scope: !1498)
!1502 = !DILocalVariable(name: "self", arg: 1, scope: !1498, file: !1340, line: 99, type: !1453)
!1503 = !DILocation(line: 99, column: 27, scope: !1498)
!1504 = !DILocalVariable(name: "bytes", arg: 2, scope: !1498, file: !1340, line: 99, type: !197)
!1505 = !DILocation(line: 99, column: 41, scope: !1498)
!1506 = !DILocalVariable(name: "n", scope: !1498, file: !1340, line: 101, type: !201, align: 8)
!1507 = !DILocation(line: 101, column: 6, scope: !1498)
!1508 = !DILocation(line: 101, column: 10, scope: !1498)
!1509 = !DILocation(line: 101, column: 27, scope: !1498)
!1510 = !DILocation(line: 102, column: 6, scope: !1498)
!1511 = !DILocation(line: 102, column: 18, scope: !1498)
!1512 = !DILocation(line: 105, column: 38, scope: !1513)
!1513 = distinct !DILexicalBlock(scope: !1498, file: !1340, line: 103, column: 2)
!1514 = !DILocation(line: 105, column: 44, scope: !1513)
!1515 = !DILocation(line: 105, column: 3, scope: !1513)
!1516 = !DILocation(line: 105, column: 14, scope: !1513)
!1517 = !DILocation(line: 105, column: 25, scope: !1513)
!1518 = !DILocation(line: 106, column: 3, scope: !1513)
!1519 = !DILocation(line: 106, column: 17, scope: !1513)
!1520 = !DILocation(line: 107, column: 10, scope: !1513)
!1521 = !DILocation(line: 109, column: 2, scope: !1498)
!1522 = !DILocation(line: 110, column: 6, scope: !1498)
!1523 = !DILocation(line: 110, column: 19, scope: !1498)
!1524 = !DILocation(line: 113, column: 10, scope: !1525)
!1525 = distinct !DILexicalBlock(scope: !1498, file: !1340, line: 111, column: 2)
!1526 = !DILocation(line: 113, column: 36, scope: !1525)
!1527 = !DILocation(line: 116, column: 27, scope: !1498)
!1528 = !DILocation(line: 116, column: 33, scope: !1498)
!1529 = !DILocation(line: 116, column: 2, scope: !1498)
!1530 = !DILocation(line: 116, column: 13, scope: !1498)
!1531 = !DILocation(line: 116, column: 14, scope: !1498)
!1532 = !DILocation(line: 117, column: 2, scope: !1498)
!1533 = !DILocation(line: 117, column: 15, scope: !1498)
!1534 = !DILocation(line: 118, column: 9, scope: !1498)
!1535 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.WriteBuffer.write_byte", scope: !1340, file: !1340, line: 121, type: !1536, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1536 = !DISubroutineType(types: !1537)
!1537 = !{!112, !7, !1453, !16}
!1538 = !DILocation(line: 122, column: 1, scope: !1535)
!1539 = !DILocalVariable(name: "self", arg: 1, scope: !1535, file: !1340, line: 121, type: !1453)
!1540 = !DILocation(line: 121, column: 33, scope: !1535)
!1541 = !DILocalVariable(name: "c", arg: 2, scope: !1535, file: !1340, line: 121, type: !16)
!1542 = !DILocation(line: 121, column: 45, scope: !1535)
!1543 = !DILocalVariable(name: "n", scope: !1535, file: !1340, line: 123, type: !201, align: 8)
!1544 = !DILocation(line: 123, column: 6, scope: !1535)
!1545 = !DILocation(line: 123, column: 10, scope: !1535)
!1546 = !DILocation(line: 123, column: 27, scope: !1535)
!1547 = !DILocation(line: 124, column: 6, scope: !1535)
!1548 = !DILocation(line: 124, column: 14, scope: !1535)
!1549 = !DILocation(line: 125, column: 2, scope: !1535)
!1550 = !DILocation(line: 125, column: 13, scope: !1535)
!1551 = !DILocation(line: 125, column: 18, scope: !1535)
!1552 = !DILocation(line: 126, column: 2, scope: !1535)
!1553 = !DILocation(line: 126, column: 15, scope: !1535)
!1554 = distinct !DISubprogram(name: "write_pending", linkageName: "std.io.WriteBuffer.write_pending", scope: !1340, file: !1340, line: 129, type: !1484, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1555 = !DILocation(line: 130, column: 1, scope: !1554)
!1556 = !DILocalVariable(name: "self", arg: 1, scope: !1554, file: !1340, line: 129, type: !1453)
!1557 = !DILocation(line: 129, column: 36, scope: !1554)
!1558 = !DILocation(line: 131, column: 2, scope: !1554)
!1559 = !DILocation(line: 131, column: 16, scope: !1554)
!1560 = !DILocation(line: 131, column: 42, scope: !1554)
!1561 = !DILocation(line: 131, column: 53, scope: !1554)
!1562 = !DILocation(line: 131, column: 54, scope: !1554)
!1563 = !DILocation(line: 132, column: 6, scope: !1554)
!1564 = !DILocation(line: 132, column: 30, scope: !1554)
!1565 = distinct !DISubprogram(name: "fprintf", linkageName: "std.io.fprintf", scope: !2, file: !2, line: 144, type: !1566, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1566 = !DISubroutineType(types: !1567)
!1567 = !{!112, !407, !156, !964, !1568}
!1568 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !1569, identifier: "any[]")
!1569 = !{!1570, !1576}
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1568, baseType: !1571, size: 64, align: 64)
!1571 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !1572, size: 64, align: 64, dwarfAddressSpace: 0)
!1572 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !1573, identifier: "any")
!1573 = !{!1574, !1575}
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1572, baseType: !7, size: 64, align: 64)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1572, baseType: !89, size: 64, align: 64, offset: 64)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1568, baseType: !201, size: 64, align: 64, offset: 64)
!1577 = !DILocalVariable(name: "out", arg: 1, scope: !1565, file: !2, line: 144, type: !156)
!1578 = !DILocation(line: 144, column: 27, scope: !1565)
!1579 = !DILocalVariable(name: "format", arg: 2, scope: !1565, file: !2, line: 144, type: !964)
!1580 = !DILocation(line: 144, column: 39, scope: !1565)
!1581 = !DILocalVariable(name: "args", arg: 3, scope: !1565, file: !2, line: 144, type: !1568)
!1582 = !DILocation(line: 144, column: 47, scope: !1565)
!1583 = !DILocalVariable(name: "formatter", scope: !1565, file: !2, line: 146, type: !1584, align: 8)
!1584 = !DICompositeType(tag: DW_TAG_structure_type, name: "Formatter", scope: !14, file: !14, line: 70, size: 384, align: 64, elements: !1585, identifier: "std.io.Formatter")
!1585 = !{!1586, !1587, !1592}
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1584, file: !14, line: 72, baseType: !7, size: 64, align: 64)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "out_fn", scope: !1584, file: !14, line: 73, baseType: !1588, size: 64, align: 64, offset: 64)
!1588 = !DIDerivedType(tag: DW_TAG_typedef, name: "OutputFn", scope: !14, file: !14, line: 23, baseType: !1589, align: 8)
!1589 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutputFn", baseType: !1590, size: 64, align: 64, dwarfAddressSpace: 0)
!1590 = !DISubroutineType(types: !1591)
!1591 = !{!112, !7, !7, !16}
!1592 = !DIDerivedType(tag: DW_TAG_member, scope: !1584, file: !14, line: 74, baseType: !1593, size: 256, align: 64, offset: 128)
!1593 = !DICompositeType(tag: DW_TAG_structure_type, name: "$anon", scope: !1584, file: !14, line: 74, size: 256, align: 64, elements: !1594)
!1594 = !{!1595, !1596, !1597, !1598, !1599}
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1593, file: !14, line: 76, baseType: !91, size: 32, align: 32)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1593, file: !14, line: 77, baseType: !91, size: 32, align: 32, offset: 32)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "prec", scope: !1593, file: !14, line: 78, baseType: !91, size: 32, align: 32, offset: 64)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !1593, file: !14, line: 79, baseType: !201, size: 64, align: 64, offset: 128)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "first_fault", scope: !1593, file: !14, line: 80, baseType: !112, size: 64, align: 64, offset: 192)
!1600 = !DILocation(line: 146, column: 12, scope: !1565)
!1601 = !DILocation(line: 147, column: 2, scope: !1565)
!1602 = !DILocation(line: 148, column: 9, scope: !1565)
!1603 = distinct !DISubprogram(name: "fprintfn", linkageName: "std.io.fprintfn", scope: !2, file: !2, line: 159, type: !1566, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1604 = !DILocalVariable(name: "out", arg: 1, scope: !1603, file: !2, line: 159, type: !156)
!1605 = !DILocation(line: 159, column: 28, scope: !1603)
!1606 = !DILocalVariable(name: "format", arg: 2, scope: !1603, file: !2, line: 159, type: !964)
!1607 = !DILocation(line: 159, column: 40, scope: !1603)
!1608 = !DILocalVariable(name: "args", arg: 3, scope: !1603, file: !2, line: 159, type: !1568)
!1609 = !DILocation(line: 159, column: 48, scope: !1603)
!1610 = !DILocalVariable(name: "formatter", scope: !1603, file: !2, line: 161, type: !1584, align: 8)
!1611 = !DILocation(line: 161, column: 12, scope: !1603)
!1612 = !DILocation(line: 162, column: 2, scope: !1603)
!1613 = !DILocalVariable(name: "len", scope: !1603, file: !2, line: 163, type: !201, align: 8)
!1614 = !DILocation(line: 163, column: 6, scope: !1603)
!1615 = !DILocation(line: 163, column: 12, scope: !1603)
!1616 = !DILocation(line: 164, column: 17, scope: !1603)
!1617 = !DILocation(line: 164, column: 2, scope: !1603)
!1618 = !DILocation(line: 165, column: 7, scope: !1603)
!1619 = !DILocation(line: 165, column: 18, scope: !1603)
!1620 = !DILocation(line: 166, column: 9, scope: !1603)
!1621 = distinct !DISubprogram(name: "out_putstream_fn", linkageName: "std.io.out_putstream_fn", scope: !2, file: !2, line: 222, type: !1590, scopeLine: 222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1622 = !DILocalVariable(name: "data", arg: 1, scope: !1621, file: !2, line: 222, type: !7)
!1623 = !DILocation(line: 222, column: 33, scope: !1621)
!1624 = !DILocalVariable(name: "c", arg: 2, scope: !1621, file: !2, line: 222, type: !16)
!1625 = !DILocation(line: 222, column: 44, scope: !1621)
!1626 = !DILocalVariable(name: "stream", scope: !1621, file: !2, line: 224, type: !1627, align: 8)
!1627 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutStream*", baseType: !156, size: 64, align: 64, dwarfAddressSpace: 0)
!1628 = !DILocation(line: 224, column: 13, scope: !1621)
!1629 = !DILocation(line: 224, column: 22, scope: !1621)
!1630 = !DILocation(line: 225, column: 11, scope: !1621)
!1631 = !DILocation(line: 225, column: 30, scope: !1621)
!1632 = !DILocation(line: 225, column: 10, scope: !1621)
!1633 = distinct !DISubprogram(name: "out_putchar_fn", linkageName: "std.io.out_putchar_fn", scope: !2, file: !2, line: 228, type: !1590, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1634 = !DILocalVariable(name: "data", arg: 1, scope: !1633, file: !2, line: 228, type: !7)
!1635 = !DILocation(line: 228, column: 31, scope: !1633)
!1636 = !DILocalVariable(name: "c", arg: 2, scope: !1633, file: !2, line: 228, type: !16)
!1637 = !DILocation(line: 228, column: 50, scope: !1633)
!1638 = !DILocation(line: 230, column: 16, scope: !1633)
!1639 = !DILocation(line: 230, column: 8, scope: !1633)
!1640 = distinct !DISubprogram(name: "printf", linkageName: "std.io.printf", scope: !2, file: !2, line: 247, type: !1641, scopeLine: 247, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1641 = !DISubroutineType(types: !1642)
!1642 = !{!112, !407, !964, !1568}
!1643 = !DILocalVariable(name: "format", arg: 1, scope: !1640, file: !2, line: 247, type: !964)
!1644 = !DILocation(line: 247, column: 23, scope: !1640)
!1645 = !DILocalVariable(name: "args", arg: 2, scope: !1640, file: !2, line: 247, type: !1568)
!1646 = !DILocation(line: 247, column: 31, scope: !1640)
!1647 = !DILocalVariable(name: "formatter", scope: !1640, file: !2, line: 249, type: !1584, align: 8)
!1648 = !DILocation(line: 249, column: 12, scope: !1640)
!1649 = !DILocation(line: 250, column: 2, scope: !1640)
!1650 = !DILocation(line: 251, column: 9, scope: !1640)
!1651 = distinct !DISubprogram(name: "printfn", linkageName: "std.io.printfn", scope: !2, file: !2, line: 261, type: !1641, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1652 = !DILocalVariable(name: "format", arg: 1, scope: !1651, file: !2, line: 261, type: !964)
!1653 = !DILocation(line: 261, column: 24, scope: !1651)
!1654 = !DILocalVariable(name: "args", arg: 2, scope: !1651, file: !2, line: 261, type: !1568)
!1655 = !DILocation(line: 261, column: 32, scope: !1651)
!1656 = !DILocalVariable(name: "formatter", scope: !1651, file: !2, line: 263, type: !1584, align: 8)
!1657 = !DILocation(line: 263, column: 12, scope: !1651)
!1658 = !DILocation(line: 264, column: 2, scope: !1651)
!1659 = !DILocalVariable(name: "len", scope: !1651, file: !2, line: 265, type: !202, align: 8)
!1660 = !DILocation(line: 265, column: 7, scope: !1651)
!1661 = !DILocation(line: 265, column: 13, scope: !1651)
!1662 = !DILocation(line: 266, column: 2, scope: !1651)
!1663 = !DILocation(line: 267, column: 6, scope: !1651)
!1664 = !DILocation(line: 268, column: 9, scope: !1651)
!1665 = distinct !DISubprogram(name: "eprintf", linkageName: "std.io.eprintf", scope: !2, file: !2, line: 278, type: !1641, scopeLine: 278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1666 = !DILocalVariable(name: "format", arg: 1, scope: !1665, file: !2, line: 278, type: !964)
!1667 = !DILocation(line: 278, column: 24, scope: !1665)
!1668 = !DILocalVariable(name: "args", arg: 2, scope: !1665, file: !2, line: 278, type: !1568)
!1669 = !DILocation(line: 278, column: 32, scope: !1665)
!1670 = !DILocalVariable(name: "formatter", scope: !1665, file: !2, line: 280, type: !1584, align: 8)
!1671 = !DILocation(line: 280, column: 12, scope: !1665)
!1672 = !DILocalVariable(name: "stream", scope: !1665, file: !2, line: 281, type: !156, align: 8)
!1673 = !DILocation(line: 281, column: 12, scope: !1665)
!1674 = !DILocation(line: 281, column: 21, scope: !1665)
!1675 = !DILocation(line: 282, column: 2, scope: !1665)
!1676 = !DILocation(line: 283, column: 9, scope: !1665)
!1677 = distinct !DISubprogram(name: "eprintfn", linkageName: "std.io.eprintfn", scope: !2, file: !2, line: 294, type: !1641, scopeLine: 294, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1678 = !DILocalVariable(name: "format", arg: 1, scope: !1677, file: !2, line: 294, type: !964)
!1679 = !DILocation(line: 294, column: 25, scope: !1677)
!1680 = !DILocalVariable(name: "args", arg: 2, scope: !1677, file: !2, line: 294, type: !1568)
!1681 = !DILocation(line: 294, column: 33, scope: !1677)
!1682 = !DILocalVariable(name: "formatter", scope: !1677, file: !2, line: 296, type: !1584, align: 8)
!1683 = !DILocation(line: 296, column: 12, scope: !1677)
!1684 = !DILocalVariable(name: "stream", scope: !1677, file: !2, line: 297, type: !156, align: 8)
!1685 = !DILocation(line: 297, column: 12, scope: !1677)
!1686 = !DILocation(line: 297, column: 21, scope: !1677)
!1687 = !DILocation(line: 298, column: 2, scope: !1677)
!1688 = !DILocalVariable(name: "len", scope: !1677, file: !2, line: 299, type: !202, align: 8)
!1689 = !DILocation(line: 299, column: 7, scope: !1677)
!1690 = !DILocation(line: 299, column: 13, scope: !1677)
!1691 = !DILocation(line: 300, column: 2, scope: !1677)
!1692 = !DILocation(line: 301, column: 2, scope: !1677)
!1693 = !DILocation(line: 302, column: 9, scope: !1677)
!1694 = distinct !DISubprogram(name: "bprintf", linkageName: "std.io.bprintf", scope: !2, file: !2, line: 313, type: !1695, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1695 = !DISubroutineType(types: !1696)
!1696 = !{!112, !1185, !197, !964, !1568}
!1697 = !DILocalVariable(name: "buffer", arg: 1, scope: !1694, file: !2, line: 313, type: !197)
!1698 = !DILocation(line: 313, column: 27, scope: !1694)
!1699 = !DILocalVariable(name: "format", arg: 2, scope: !1694, file: !2, line: 313, type: !964)
!1700 = !DILocation(line: 313, column: 42, scope: !1694)
!1701 = !DILocalVariable(name: "args", arg: 3, scope: !1694, file: !2, line: 313, type: !1568)
!1702 = !DILocation(line: 313, column: 50, scope: !1694)
!1703 = !DILocalVariable(name: "formatter", scope: !1694, file: !2, line: 315, type: !1584, align: 8)
!1704 = !DILocation(line: 315, column: 12, scope: !1694)
!1705 = !DILocalVariable(name: "data", scope: !1694, file: !2, line: 316, type: !1706, align: 8)
!1706 = !DICompositeType(tag: DW_TAG_structure_type, name: "BufferData", scope: !2, file: !2, line: 331, size: 192, align: 64, elements: !1707, identifier: "std.io.BufferData")
!1707 = !{!1708, !1709}
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !1706, file: !2, line: 333, baseType: !197, size: 128, align: 64)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "written", scope: !1706, file: !2, line: 334, baseType: !201, size: 64, align: 64, offset: 128)
!1710 = !DILocation(line: 316, column: 13, scope: !1694)
!1711 = !DILocation(line: 316, column: 32, scope: !1694)
!1712 = !DILocation(line: 317, column: 2, scope: !1694)
!1713 = !DILocalVariable(name: "size", scope: !1694, file: !2, line: 318, type: !201, align: 8)
!1714 = !DILocation(line: 318, column: 6, scope: !1694)
!1715 = !DILocation(line: 318, column: 13, scope: !1694)
!1716 = !DILocation(line: 319, column: 9, scope: !1694)
!1717 = !DILocation(line: 319, column: 16, scope: !1694)
!1718 = !DILocation(line: 319, column: 17, scope: !1694)
!1719 = distinct !DISubprogram(name: "out_buffer_fn", linkageName: "std.io.out_buffer_fn", scope: !2, file: !2, line: 323, type: !1590, scopeLine: 323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1720 = !DILocalVariable(name: "data", arg: 1, scope: !1719, file: !2, line: 323, type: !7)
!1721 = !DILocation(line: 323, column: 30, scope: !1719)
!1722 = !DILocalVariable(name: "c", arg: 2, scope: !1719, file: !2, line: 323, type: !16)
!1723 = !DILocation(line: 323, column: 41, scope: !1719)
!1724 = !DILocalVariable(name: "buffer_data", scope: !1719, file: !2, line: 325, type: !1725, align: 8)
!1725 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BufferData*", baseType: !1706, size: 64, align: 64, dwarfAddressSpace: 0)
!1726 = !DILocation(line: 325, column: 14, scope: !1719)
!1727 = !DILocation(line: 325, column: 28, scope: !1719)
!1728 = !DILocation(line: 326, column: 6, scope: !1719)
!1729 = !DILocation(line: 326, column: 29, scope: !1719)
!1730 = !DILocation(line: 326, column: 60, scope: !1719)
!1731 = !DILocation(line: 327, column: 2, scope: !1719)
!1732 = !DILocation(line: 327, column: 21, scope: !1719)
!1733 = !DILocation(line: 327, column: 46, scope: !1719)
!1734 = distinct !DISubprogram(name: "putchar", linkageName: "std.io.putchar", scope: !2, file: !2, line: 344, type: !1735, scopeLine: 344, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1735 = !DISubroutineType(types: !1736)
!1736 = !{null, !16}
!1737 = !DILocalVariable(name: "c", arg: 1, scope: !1734, file: !2, line: 344, type: !16)
!1738 = !DILocation(line: 344, column: 22, scope: !1734)
!1739 = !DILocation(line: 346, column: 16, scope: !1734)
!1740 = !DILocation(line: 346, column: 8, scope: !1734)
!1741 = distinct !DISubprogram(name: "stdout", linkageName: "std.io.stdout", scope: !2, file: !2, line: 354, type: !1742, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39)
!1742 = !DISubroutineType(types: !1743)
!1743 = !{!1744}
!1744 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "File*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1745 = !DILocation(line: 357, column: 7, scope: !1741)
!1746 = !DILocation(line: 202, column: 25, scope: !1747, inlinedAt: !1749)
!1747 = distinct !DISubprogram(name: "stdout", linkageName: "stdout", scope: !1748, file: !1748, line: 202, scopeLine: 202, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1748 = !DIFile(filename: "libc.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/libc")
!1749 = !DILocation(line: 357, column: 49, scope: !1741)
!1750 = !DILocation(line: 357, column: 31, scope: !1741)
!1751 = !DILocation(line: 358, column: 9, scope: !1741)
!1752 = distinct !DISubprogram(name: "stderr", linkageName: "std.io.stderr", scope: !2, file: !2, line: 366, type: !1742, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39)
!1753 = !DILocation(line: 369, column: 7, scope: !1752)
!1754 = !DILocation(line: 203, column: 25, scope: !1755, inlinedAt: !1756)
!1755 = distinct !DISubprogram(name: "stderr", linkageName: "stderr", scope: !1748, file: !1748, line: 203, scopeLine: 203, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1756 = !DILocation(line: 369, column: 49, scope: !1752)
!1757 = !DILocation(line: 369, column: 31, scope: !1752)
!1758 = !DILocation(line: 370, column: 9, scope: !1752)
!1759 = distinct !DISubprogram(name: "stdin", linkageName: "std.io.stdin", scope: !2, file: !2, line: 378, type: !1742, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39)
!1760 = !DILocation(line: 381, column: 7, scope: !1759)
!1761 = !DILocation(line: 201, column: 24, scope: !1762, inlinedAt: !1763)
!1762 = distinct !DISubprogram(name: "stdin", linkageName: "stdin", scope: !1748, file: !1748, line: 201, scopeLine: 201, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1763 = !DILocation(line: 381, column: 49, scope: !1759)
!1764 = !DILocation(line: 381, column: 31, scope: !1759)
!1765 = !DILocation(line: 382, column: 9, scope: !1759)
!1766 = distinct !DISubprogram(name: "adjust", linkageName: "std.io.Formatter.adjust", scope: !14, file: !14, line: 19, type: !1767, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1767 = !DISubroutineType(types: !1768)
!1768 = !{!112, !407, !1769, !202}
!1769 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Formatter*", baseType: !1584, size: 64, align: 64, dwarfAddressSpace: 0)
!1770 = !DILocation(line: 20, column: 1, scope: !1766)
!1771 = !DILocalVariable(name: "self", arg: 1, scope: !1766, file: !14, line: 19, type: !1769)
!1772 = !DILocation(line: 19, column: 26, scope: !1766)
!1773 = !DILocalVariable(name: "len", arg: 2, scope: !1766, file: !14, line: 19, type: !201)
!1774 = !DILocation(line: 19, column: 37, scope: !1766)
!1775 = !DILocation(line: 21, column: 7, scope: !1766)
!1776 = !DILocation(line: 21, column: 31, scope: !1766)
!1777 = !DILocation(line: 22, column: 23, scope: !1766)
!1778 = !DILocation(line: 22, column: 9, scope: !1766)
!1779 = distinct !DISubprogram(name: "out_substr", linkageName: "std.io.Formatter.out_substr", scope: !14, file: !14, line: 145, type: !1780, scopeLine: 145, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1780 = !DISubroutineType(types: !1781)
!1781 = !{!112, !407, !1769, !964}
!1782 = !DILocation(line: 146, column: 1, scope: !1779)
!1783 = !DILocalVariable(name: "self", arg: 1, scope: !1779, file: !14, line: 145, type: !1769)
!1784 = !DILocation(line: 145, column: 30, scope: !1779)
!1785 = !DILocalVariable(name: "str", arg: 2, scope: !1779, file: !14, line: 145, type: !964)
!1786 = !DILocation(line: 145, column: 44, scope: !1779)
!1787 = !DILocalVariable(name: "l", scope: !1779, file: !14, line: 147, type: !201, align: 8)
!1788 = !DILocation(line: 147, column: 6, scope: !1779)
!1789 = !DILocation(line: 147, column: 32, scope: !1779)
!1790 = !DILocation(line: 147, column: 16, scope: !1779)
!1791 = !DILocalVariable(name: "prec", scope: !1779, file: !14, line: 148, type: !91, align: 4)
!1792 = !DILocation(line: 148, column: 7, scope: !1779)
!1793 = !DILocation(line: 148, column: 14, scope: !1779)
!1794 = !DILocation(line: 149, column: 6, scope: !1779)
!1795 = !DILocation(line: 149, column: 30, scope: !1779)
!1796 = !DILocation(line: 149, column: 34, scope: !1779)
!1797 = !DILocation(line: 149, column: 44, scope: !1779)
!1798 = !DILocalVariable(name: "index", scope: !1779, file: !14, line: 150, type: !201, align: 8)
!1799 = !DILocation(line: 150, column: 6, scope: !1779)
!1800 = !DILocation(line: 150, column: 14, scope: !1779)
!1801 = !DILocalVariable(name: "chars", scope: !1779, file: !14, line: 151, type: !201, align: 8)
!1802 = !DILocation(line: 151, column: 6, scope: !1779)
!1803 = !DILocation(line: 151, column: 14, scope: !1779)
!1804 = !DILocalVariable(name: "ptr", scope: !1779, file: !14, line: 152, type: !114, align: 8)
!1805 = !DILocation(line: 152, column: 8, scope: !1779)
!1806 = !DILocation(line: 152, column: 14, scope: !1779)
!1807 = !DILocation(line: 153, column: 2, scope: !1779)
!1808 = !DILocation(line: 153, column: 9, scope: !1809)
!1809 = distinct !DILexicalBlock(scope: !1779, file: !14, line: 153, column: 2)
!1810 = !DILocation(line: 153, column: 17, scope: !1809)
!1811 = !DILocalVariable(name: "c", scope: !1812, file: !14, line: 155, type: !16, align: 1)
!1812 = distinct !DILexicalBlock(scope: !1809, file: !14, line: 154, column: 2)
!1813 = !DILocation(line: 155, column: 8, scope: !1812)
!1814 = !DILocation(line: 155, column: 12, scope: !1812)
!1815 = !DILocation(line: 155, column: 16, scope: !1812)
!1816 = !DILocation(line: 157, column: 7, scope: !1812)
!1817 = !DILocation(line: 157, column: 27, scope: !1812)
!1818 = !DILocation(line: 157, column: 52, scope: !1812)
!1819 = !DILocation(line: 157, column: 60, scope: !1812)
!1820 = !DILocation(line: 158, column: 3, scope: !1812)
!1821 = !DILocation(line: 159, column: 3, scope: !1812)
!1822 = !DILocation(line: 161, column: 9, scope: !1779)
!1823 = distinct !DISubprogram(name: "pad", linkageName: "std.io.Formatter.pad", scope: !14, file: !14, line: 164, type: !1824, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1824 = !DISubroutineType(types: !1825)
!1825 = !{!112, !407, !1769, !16, !113, !113}
!1826 = !DILocation(line: 165, column: 1, scope: !1823)
!1827 = !DILocalVariable(name: "self", arg: 1, scope: !1823, file: !14, line: 164, type: !1769)
!1828 = !DILocation(line: 164, column: 23, scope: !1823)
!1829 = !DILocalVariable(name: "c", arg: 2, scope: !1823, file: !14, line: 164, type: !16)
!1830 = !DILocation(line: 164, column: 35, scope: !1823)
!1831 = !DILocalVariable(name: "width", arg: 3, scope: !1823, file: !14, line: 164, type: !571)
!1832 = !DILocation(line: 164, column: 42, scope: !1823)
!1833 = !DILocalVariable(name: "len", arg: 4, scope: !1823, file: !14, line: 164, type: !571)
!1834 = !DILocation(line: 164, column: 53, scope: !1823)
!1835 = !DILocalVariable(name: "delta", scope: !1823, file: !14, line: 166, type: !571, align: 8)
!1836 = !DILocation(line: 166, column: 6, scope: !1823)
!1837 = !DILocation(line: 166, column: 14, scope: !1823)
!1838 = !DILocation(line: 166, column: 22, scope: !1823)
!1839 = !DILocalVariable(name: "i", scope: !1840, file: !14, line: 167, type: !571, align: 8)
!1840 = distinct !DILexicalBlock(scope: !1823, file: !14, line: 167, column: 2)
!1841 = !DILocation(line: 167, column: 11, scope: !1840)
!1842 = !DILocation(line: 167, column: 15, scope: !1840)
!1843 = !DILocation(line: 167, column: 18, scope: !1840)
!1844 = !DILocation(line: 167, column: 22, scope: !1840)
!1845 = !DILocation(line: 167, column: 34, scope: !1840)
!1846 = !DILocation(line: 167, column: 29, scope: !1840)
!1847 = !DILocation(line: 47, column: 10, scope: !1848, inlinedAt: !1849)
!1848 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !345, file: !345, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1849 = !DILocation(line: 116, column: 10, scope: !1850, inlinedAt: !1851)
!1850 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !345, file: !345, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1851 = !DILocation(line: 168, column: 9, scope: !1823)
!1852 = !DILocation(line: 47, column: 14, scope: !1848, inlinedAt: !1849)
!1853 = !DILocation(line: 116, column: 34, scope: !1850, inlinedAt: !1851)
!1854 = !DILocation(line: 116, column: 38, scope: !1850, inlinedAt: !1851)
!1855 = distinct !DISubprogram(name: "out_chars", linkageName: "std.io.Formatter.out_chars", scope: !14, file: !14, line: 178, type: !1856, scopeLine: 178, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1856 = !DISubroutineType(types: !1857)
!1857 = !{!112, !407, !1769, !197}
!1858 = !DILocation(line: 179, column: 1, scope: !1855)
!1859 = !DILocalVariable(name: "self", arg: 1, scope: !1855, file: !14, line: 178, type: !1769)
!1860 = !DILocation(line: 178, column: 29, scope: !1855)
!1861 = !DILocalVariable(name: "s", arg: 2, scope: !1855, file: !14, line: 178, type: !197)
!1862 = !DILocation(line: 178, column: 43, scope: !1855)
!1863 = !DILocalVariable(name: ".temp", scope: !1864, file: !14, line: 180, type: !201, align: 8)
!1864 = distinct !DILexicalBlock(scope: !1855, file: !14, line: 180, column: 2)
!1865 = !DILocation(line: 180, column: 15, scope: !1864)
!1866 = !DILocalVariable(name: "c", scope: !1867, file: !14, line: 180, type: !16, align: 1)
!1867 = distinct !DILexicalBlock(scope: !1864, file: !14, line: 180, column: 18)
!1868 = !DILocation(line: 180, column: 11, scope: !1867)
!1869 = !DILocation(line: 180, column: 15, scope: !1867)
!1870 = !DILocation(line: 180, column: 18, scope: !1867)
!1871 = !DILocation(line: 181, column: 9, scope: !1855)
!1872 = distinct !DISubprogram(name: "etoa", linkageName: "std.io.Formatter.etoa", scope: !14, file: !14, line: 192, type: !1873, scopeLine: 192, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1873 = !DISubroutineType(types: !1874)
!1874 = !{!112, !407, !1769, !1875}
!1875 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!1876 = !DILocation(line: 192, column: 44, scope: !1872)
!1877 = !DILocalVariable(name: "self", arg: 1, scope: !1872, file: !14, line: 192, type: !1769)
!1878 = !DILocation(line: 192, column: 24, scope: !1872)
!1879 = !DILocalVariable(name: "y", arg: 2, scope: !1872, file: !14, line: 192, type: !1875)
!1880 = !DILocation(line: 192, column: 38, scope: !1872)
!1881 = distinct !DISubprogram(name: "ftoa", linkageName: "std.io.Formatter.ftoa", scope: !14, file: !14, line: 193, type: !1873, scopeLine: 193, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1882 = !DILocation(line: 193, column: 44, scope: !1881)
!1883 = !DILocalVariable(name: "self", arg: 1, scope: !1881, file: !14, line: 193, type: !1769)
!1884 = !DILocation(line: 193, column: 24, scope: !1881)
!1885 = !DILocalVariable(name: "y", arg: 2, scope: !1881, file: !14, line: 193, type: !1875)
!1886 = !DILocation(line: 193, column: 38, scope: !1881)
!1887 = distinct !DISubprogram(name: "gtoa", linkageName: "std.io.Formatter.gtoa", scope: !14, file: !14, line: 194, type: !1873, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1888 = !DILocation(line: 194, column: 44, scope: !1887)
!1889 = !DILocalVariable(name: "self", arg: 1, scope: !1887, file: !14, line: 194, type: !1769)
!1890 = !DILocation(line: 194, column: 24, scope: !1887)
!1891 = !DILocalVariable(name: "y", arg: 2, scope: !1887, file: !14, line: 194, type: !1875)
!1892 = !DILocation(line: 194, column: 38, scope: !1887)
!1893 = distinct !DISubprogram(name: "atoa", linkageName: "std.io.Formatter.atoa", scope: !14, file: !14, line: 195, type: !1873, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1894 = !DILocation(line: 195, column: 44, scope: !1893)
!1895 = !DILocalVariable(name: "self", arg: 1, scope: !1893, file: !14, line: 195, type: !1769)
!1896 = !DILocation(line: 195, column: 24, scope: !1893)
!1897 = !DILocalVariable(name: "y", arg: 2, scope: !1893, file: !14, line: 195, type: !1875)
!1898 = !DILocation(line: 195, column: 38, scope: !1893)
!1899 = distinct !DISubprogram(name: "floatformat", linkageName: "std.io.Formatter.floatformat", scope: !14, file: !14, line: 197, type: !1900, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!1900 = !DISubroutineType(types: !1901)
!1901 = !{!112, !407, !1769, !48, !1875}
!1902 = !DILocation(line: 198, column: 1, scope: !1899)
!1903 = !DILocalVariable(name: "self", arg: 1, scope: !1899, file: !14, line: 197, type: !1769)
!1904 = !DILocation(line: 197, column: 31, scope: !1899)
!1905 = !DILocalVariable(name: "formatting", arg: 2, scope: !1899, file: !14, line: 197, type: !48)
!1906 = !DILocation(line: 197, column: 54, scope: !1899)
!1907 = !DILocalVariable(name: "y", arg: 3, scope: !1899, file: !14, line: 197, type: !1875)
!1908 = !DILocation(line: 197, column: 73, scope: !1899)
!1909 = !DILocalVariable(name: "big", scope: !1899, file: !14, line: 202, type: !1910, align: 16)
!1910 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 4032, align: 32, elements: !1911)
!1911 = !{!1912}
!1912 = !DISubrange(count: 126, lowerBound: 0)
!1913 = !DILocation(line: 202, column: 17, scope: !1899)
!1914 = !DILocalVariable(name: "is_neg", scope: !1899, file: !14, line: 203, type: !328, align: 1)
!1915 = !DILocation(line: 203, column: 7, scope: !1899)
!1916 = !DILocation(line: 203, column: 16, scope: !1899)
!1917 = !DILocation(line: 212, column: 20, scope: !1918, inlinedAt: !1919)
!1918 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !208, file: !208, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1919 = !DILocation(line: 458, column: 16, scope: !1920, inlinedAt: !1921)
!1920 = distinct !DISubprogram(name: "signbit", linkageName: "signbit", scope: !622, file: !622, line: 451, scopeLine: 451, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1921 = !DILocation(line: 204, column: 12, scope: !1899)
!1922 = !DILocation(line: 212, column: 12, scope: !1918, inlinedAt: !1919)
!1923 = !DILocation(line: 458, column: 11, scope: !1920, inlinedAt: !1921)
!1924 = !DILocation(line: 206, column: 12, scope: !1925)
!1925 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 205, column: 2)
!1926 = !DILocation(line: 207, column: 8, scope: !1925)
!1927 = !DILocalVariable(name: "pl", scope: !1899, file: !14, line: 209, type: !571, align: 8)
!1928 = !DILocation(line: 209, column: 6, scope: !1899)
!1929 = !DILocation(line: 209, column: 11, scope: !1899)
!1930 = !DILocation(line: 209, column: 21, scope: !1899)
!1931 = !DILocation(line: 209, column: 43, scope: !1899)
!1932 = !DILocation(line: 212, column: 20, scope: !1933, inlinedAt: !1934)
!1933 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !208, file: !208, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1934 = !DILocation(line: 543, column: 11, scope: !1935, inlinedAt: !1936)
!1935 = distinct !DISubprogram(name: "is_finite", linkageName: "is_finite", scope: !622, file: !622, line: 536, scopeLine: 536, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1936 = !DILocation(line: 211, column: 13, scope: !1899)
!1937 = !DILocation(line: 212, column: 12, scope: !1933, inlinedAt: !1934)
!1938 = !DILocalVariable(name: "len", scope: !1939, file: !14, line: 213, type: !201, align: 8)
!1939 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 212, column: 2)
!1940 = !DILocation(line: 213, column: 7, scope: !1939)
!1941 = !DILocation(line: 215, column: 8, scope: !1939)
!1942 = !DILocation(line: 215, column: 25, scope: !1939)
!1943 = !DILocation(line: 215, column: 46, scope: !1939)
!1944 = !DILocation(line: 215, column: 62, scope: !1939)
!1945 = !DILocation(line: 215, column: 58, scope: !1939)
!1946 = !DILocation(line: 215, column: 32, scope: !1939)
!1947 = !DILocalVariable(name: "s", scope: !1939, file: !14, line: 216, type: !964, align: 8)
!1948 = !DILocation(line: 216, column: 10, scope: !1939)
!1949 = !DILocation(line: 216, column: 14, scope: !1939)
!1950 = !DILocation(line: 216, column: 45, scope: !1939)
!1951 = !DILocation(line: 217, column: 7, scope: !1939)
!1952 = !DILocation(line: 217, column: 12, scope: !1939)
!1953 = !DILocation(line: 217, column: 19, scope: !1939)
!1954 = !DILocation(line: 217, column: 50, scope: !1939)
!1955 = !DILocation(line: 218, column: 3, scope: !1939)
!1956 = !DILocation(line: 218, column: 10, scope: !1939)
!1957 = !DILocation(line: 219, column: 7, scope: !1939)
!1958 = !DILocation(line: 219, column: 11, scope: !1939)
!1959 = !DILocation(line: 219, column: 27, scope: !1939)
!1960 = !DILocation(line: 219, column: 42, scope: !1939)
!1961 = !DILocation(line: 219, column: 18, scope: !1939)
!1962 = !DILocation(line: 220, column: 3, scope: !1939)
!1963 = !DILocation(line: 220, column: 10, scope: !1939)
!1964 = !DILocation(line: 221, column: 7, scope: !1939)
!1965 = !DILocation(line: 221, column: 24, scope: !1939)
!1966 = !DILocation(line: 221, column: 45, scope: !1939)
!1967 = !DILocation(line: 221, column: 61, scope: !1939)
!1968 = !DILocation(line: 221, column: 57, scope: !1939)
!1969 = !DILocation(line: 221, column: 31, scope: !1939)
!1970 = !DILocation(line: 222, column: 10, scope: !1939)
!1971 = !DILocalVariable(name: "e2", scope: !1899, file: !14, line: 225, type: !23, align: 4)
!1972 = !DILocation(line: 225, column: 6, scope: !1899)
!1973 = !DILocation(line: 444, column: 28, scope: !1974, inlinedAt: !1975)
!1974 = distinct !DISubprogram(name: "frexp", linkageName: "frexp", scope: !622, file: !622, line: 437, scopeLine: 437, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!1975 = !DILocation(line: 227, column: 12, scope: !1899)
!1976 = !DILocation(line: 444, column: 10, scope: !1974, inlinedAt: !1975)
!1977 = !DILocation(line: 228, column: 6, scope: !1899)
!1978 = !DILocation(line: 228, column: 9, scope: !1899)
!1979 = !DILocalVariable(name: "ebuf0", scope: !1899, file: !14, line: 229, type: !1980, align: 1)
!1980 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 96, align: 8, elements: !1981)
!1981 = !{!1982}
!1982 = !DISubrange(count: 12, lowerBound: 0)
!1983 = !DILocation(line: 229, column: 11, scope: !1899)
!1984 = !DILocalVariable(name: "ebuf", scope: !1899, file: !14, line: 230, type: !114, align: 8)
!1985 = !DILocation(line: 230, column: 8, scope: !1899)
!1986 = !DILocation(line: 230, column: 15, scope: !1899)
!1987 = !DILocalVariable(name: "buf_array", scope: !1899, file: !14, line: 231, type: !1988, align: 16)
!1988 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 176, align: 8, elements: !1989)
!1989 = !{!1990}
!1990 = !DISubrange(count: 22, lowerBound: 0)
!1991 = !DILocation(line: 231, column: 38, scope: !1899)
!1992 = !DILocalVariable(name: "buf", scope: !1899, file: !14, line: 232, type: !114, align: 8)
!1993 = !DILocation(line: 232, column: 8, scope: !1899)
!1994 = !DILocation(line: 232, column: 15, scope: !1899)
!1995 = !DILocalVariable(name: "p", scope: !1899, file: !14, line: 233, type: !571, align: 8)
!1996 = !DILocation(line: 233, column: 6, scope: !1899)
!1997 = !DILocation(line: 233, column: 10, scope: !1899)
!1998 = !DILocation(line: 233, column: 33, scope: !1899)
!1999 = !DILocation(line: 233, column: 45, scope: !1899)
!2000 = !DILocation(line: 234, column: 6, scope: !1899)
!2001 = !DILocalVariable(name: "round", scope: !2002, file: !14, line: 236, type: !1875, align: 8)
!2002 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 235, column: 2)
!2003 = !DILocation(line: 236, column: 10, scope: !2002)
!2004 = !DILocation(line: 236, column: 18, scope: !2002)
!2005 = !DILocation(line: 238, column: 3, scope: !2002)
!2006 = !DILocation(line: 239, column: 7, scope: !2002)
!2007 = !DILocation(line: 239, column: 16, scope: !2002)
!2008 = !DILocalVariable(name: "re", scope: !2009, file: !14, line: 241, type: !23, align: 4)
!2009 = distinct !DILexicalBlock(scope: !2002, file: !14, line: 240, column: 3)
!2010 = !DILocation(line: 241, column: 8, scope: !2009)
!2011 = !DILocation(line: 241, column: 46, scope: !2009)
!2012 = !DILocation(line: 241, column: 19, scope: !2009)
!2013 = !DILocation(line: 242, column: 4, scope: !2009)
!2014 = !DILocation(line: 243, column: 4, scope: !2009)
!2015 = !DILocation(line: 243, column: 11, scope: !2016)
!2016 = distinct !DILexicalBlock(scope: !2009, file: !14, line: 243, column: 4)
!2017 = !DILocation(line: 243, column: 17, scope: !2016)
!2018 = !DILocation(line: 244, column: 8, scope: !2009)
!2019 = !DILocation(line: 246, column: 10, scope: !2020)
!2020 = distinct !DILexicalBlock(scope: !2009, file: !14, line: 245, column: 4)
!2021 = !DILocation(line: 247, column: 5, scope: !2020)
!2022 = !DILocation(line: 247, column: 10, scope: !2020)
!2023 = !DILocation(line: 248, column: 5, scope: !2020)
!2024 = !DILocation(line: 248, column: 10, scope: !2020)
!2025 = !DILocation(line: 249, column: 10, scope: !2020)
!2026 = !DILocation(line: 253, column: 5, scope: !2027)
!2027 = distinct !DILexicalBlock(scope: !2009, file: !14, line: 252, column: 4)
!2028 = !DILocation(line: 253, column: 10, scope: !2027)
!2029 = !DILocation(line: 254, column: 5, scope: !2027)
!2030 = !DILocation(line: 254, column: 10, scope: !2027)
!2031 = !DILocalVariable(name: "estr", scope: !2002, file: !14, line: 258, type: !114, align: 8)
!2032 = !DILocation(line: 258, column: 9, scope: !2002)
!2033 = !DILocation(line: 258, column: 22, scope: !2002)
!2034 = !DILocation(line: 258, column: 40, scope: !2002)
!2035 = !DILocation(line: 258, column: 46, scope: !2002)
!2036 = !DILocation(line: 258, column: 16, scope: !2002)
!2037 = !DILocation(line: 259, column: 7, scope: !2002)
!2038 = !DILocation(line: 259, column: 15, scope: !2002)
!2039 = !DILocation(line: 259, column: 24, scope: !2002)
!2040 = !DILocation(line: 259, column: 31, scope: !2002)
!2041 = !DILocation(line: 260, column: 6, scope: !2002)
!2042 = !DILocation(line: 260, column: 14, scope: !2002)
!2043 = !DILocation(line: 260, column: 29, scope: !2002)
!2044 = !DILocation(line: 261, column: 6, scope: !2002)
!2045 = !DILocation(line: 261, column: 13, scope: !2002)
!2046 = !DILocation(line: 261, column: 42, scope: !2002)
!2047 = !DILocalVariable(name: "s", scope: !2002, file: !14, line: 262, type: !114, align: 8)
!2048 = !DILocation(line: 262, column: 9, scope: !2002)
!2049 = !DILocation(line: 262, column: 13, scope: !2002)
!2050 = !DILocalVariable(name: "xdigits", scope: !2002, file: !14, line: 263, type: !114, align: 8)
!2051 = !DILocation(line: 263, column: 9, scope: !2002)
!2052 = !DILocation(line: 263, column: 19, scope: !2002)
!2053 = !DILocation(line: 263, column: 55, scope: !2002)
!2054 = !DILocation(line: 264, column: 3, scope: !2002)
!2055 = !DILocation(line: 270, column: 12, scope: !2056)
!2056 = distinct !DILexicalBlock(scope: !2002, file: !14, line: 264, column: 3)
!2057 = !DILocalVariable(name: "x", scope: !2058, file: !14, line: 266, type: !23, align: 4)
!2058 = distinct !DILexicalBlock(scope: !2056, file: !14, line: 265, column: 3)
!2059 = !DILocation(line: 266, column: 8, scope: !2058)
!2060 = !DILocation(line: 266, column: 13, scope: !2058)
!2061 = !DILocation(line: 267, column: 5, scope: !2058)
!2062 = !DILocation(line: 267, column: 11, scope: !2058)
!2063 = !DILocation(line: 267, column: 19, scope: !2058)
!2064 = !DILocation(line: 268, column: 14, scope: !2058)
!2065 = !DILocation(line: 268, column: 18, scope: !2058)
!2066 = !DILocation(line: 268, column: 8, scope: !2058)
!2067 = !DILocation(line: 269, column: 8, scope: !2058)
!2068 = !DILocation(line: 269, column: 12, scope: !2058)
!2069 = !DILocation(line: 269, column: 25, scope: !2058)
!2070 = !DILocation(line: 269, column: 30, scope: !2058)
!2071 = !DILocation(line: 269, column: 39, scope: !2058)
!2072 = !DILocation(line: 269, column: 58, scope: !2058)
!2073 = !DILocation(line: 269, column: 64, scope: !2058)
!2074 = !DILocalVariable(name: "outlen", scope: !2002, file: !14, line: 271, type: !571, align: 8)
!2075 = !DILocation(line: 271, column: 7, scope: !2002)
!2076 = !DILocation(line: 271, column: 16, scope: !2002)
!2077 = !DILocation(line: 271, column: 20, scope: !2002)
!2078 = !DILocalVariable(name: "explen", scope: !2002, file: !14, line: 272, type: !571, align: 8)
!2079 = !DILocation(line: 272, column: 7, scope: !2002)
!2080 = !DILocation(line: 272, column: 16, scope: !2002)
!2081 = !DILocation(line: 272, column: 23, scope: !2002)
!2082 = !DILocation(line: 273, column: 7, scope: !2002)
!2083 = !DILocation(line: 273, column: 25, scope: !2002)
!2084 = !DILocation(line: 273, column: 11, scope: !2002)
!2085 = !DILocation(line: 273, column: 34, scope: !2002)
!2086 = !DILocation(line: 273, column: 45, scope: !2002)
!2087 = !DILocalVariable(name: "len", scope: !2002, file: !14, line: 274, type: !201, align: 8)
!2088 = !DILocation(line: 274, column: 7, scope: !2002)
!2089 = !DILocalVariable(name: "l", scope: !2002, file: !14, line: 275, type: !201, align: 8)
!2090 = !DILocation(line: 275, column: 7, scope: !2002)
!2091 = !DILocation(line: 275, column: 11, scope: !2002)
!2092 = !DILocation(line: 275, column: 16, scope: !2002)
!2093 = !DILocation(line: 275, column: 29, scope: !2002)
!2094 = !DILocation(line: 276, column: 7, scope: !2002)
!2095 = !DILocation(line: 276, column: 15, scope: !2002)
!2096 = !DILocation(line: 277, column: 7, scope: !2002)
!2097 = !DILocation(line: 277, column: 16, scope: !2002)
!2098 = !DILocation(line: 278, column: 8, scope: !2002)
!2099 = !DILocation(line: 278, column: 28, scope: !2002)
!2100 = !DILocation(line: 278, column: 48, scope: !2002)
!2101 = !DILocation(line: 278, column: 69, scope: !2002)
!2102 = !DILocation(line: 278, column: 81, scope: !2002)
!2103 = !DILocation(line: 278, column: 86, scope: !2002)
!2104 = !DILocation(line: 278, column: 55, scope: !2002)
!2105 = !DILocation(line: 279, column: 7, scope: !2002)
!2106 = !DILocation(line: 279, column: 17, scope: !2002)
!2107 = !DILocation(line: 279, column: 34, scope: !2002)
!2108 = !DILocation(line: 279, column: 50, scope: !2002)
!2109 = !DILocation(line: 279, column: 65, scope: !2002)
!2110 = !DILocation(line: 279, column: 41, scope: !2002)
!2111 = !DILocation(line: 280, column: 3, scope: !2002)
!2112 = !DILocation(line: 280, column: 25, scope: !2002)
!2113 = !DILocation(line: 280, column: 55, scope: !2002)
!2114 = !DILocation(line: 280, column: 10, scope: !2002)
!2115 = !DILocation(line: 281, column: 7, scope: !2002)
!2116 = !DILocation(line: 281, column: 27, scope: !2002)
!2117 = !DILocation(line: 281, column: 48, scope: !2002)
!2118 = !DILocation(line: 281, column: 60, scope: !2002)
!2119 = !DILocation(line: 281, column: 65, scope: !2002)
!2120 = !DILocation(line: 281, column: 34, scope: !2002)
!2121 = !DILocation(line: 282, column: 3, scope: !2002)
!2122 = !DILocation(line: 282, column: 25, scope: !2002)
!2123 = !DILocation(line: 282, column: 30, scope: !2002)
!2124 = !DILocation(line: 282, column: 10, scope: !2002)
!2125 = !DILocation(line: 283, column: 3, scope: !2002)
!2126 = !DILocation(line: 283, column: 24, scope: !2002)
!2127 = !DILocation(line: 283, column: 28, scope: !2002)
!2128 = !DILocation(line: 283, column: 37, scope: !2002)
!2129 = !DILocation(line: 283, column: 10, scope: !2002)
!2130 = !DILocation(line: 284, column: 3, scope: !2002)
!2131 = !DILocation(line: 284, column: 25, scope: !2002)
!2132 = !DILocation(line: 284, column: 31, scope: !2002)
!2133 = !DILocation(line: 284, column: 10, scope: !2002)
!2134 = !DILocation(line: 285, column: 7, scope: !2002)
!2135 = !DILocation(line: 285, column: 24, scope: !2002)
!2136 = !DILocation(line: 285, column: 45, scope: !2002)
!2137 = !DILocation(line: 285, column: 57, scope: !2002)
!2138 = !DILocation(line: 285, column: 62, scope: !2002)
!2139 = !DILocation(line: 285, column: 31, scope: !2002)
!2140 = !DILocation(line: 286, column: 10, scope: !2002)
!2141 = !DILocation(line: 288, column: 6, scope: !1899)
!2142 = !DILocation(line: 288, column: 17, scope: !1899)
!2143 = !DILocation(line: 289, column: 6, scope: !1899)
!2144 = !DILocation(line: 291, column: 3, scope: !2145)
!2145 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 290, column: 2)
!2146 = !DILocation(line: 292, column: 3, scope: !2145)
!2147 = !DILocalVariable(name: "a", scope: !1899, file: !14, line: 295, type: !2148, align: 8)
!2148 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !91, size: 64, align: 64, dwarfAddressSpace: 0)
!2149 = !DILocation(line: 295, column: 8, scope: !1899)
!2150 = !DILocalVariable(name: "z", scope: !1899, file: !14, line: 295, type: !2148, align: 8)
!2151 = !DILocation(line: 295, column: 11, scope: !1899)
!2152 = !DILocalVariable(name: "r", scope: !1899, file: !14, line: 295, type: !2148, align: 8)
!2153 = !DILocation(line: 295, column: 14, scope: !1899)
!2154 = !DILocation(line: 296, column: 6, scope: !1899)
!2155 = !DILocation(line: 298, column: 16, scope: !2156)
!2156 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 297, column: 2)
!2157 = !DILocation(line: 302, column: 16, scope: !2158)
!2158 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 301, column: 2)
!2159 = !DILocation(line: 305, column: 2, scope: !1899)
!2160 = !DILocation(line: 309, column: 11, scope: !2161)
!2161 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 305, column: 2)
!2162 = !DILocalVariable(name: "v", scope: !2163, file: !14, line: 307, type: !91, align: 4)
!2163 = distinct !DILexicalBlock(scope: !2161, file: !14, line: 306, column: 2)
!2164 = !DILocation(line: 307, column: 8, scope: !2163)
!2165 = !DILocation(line: 307, column: 12, scope: !2163)
!2166 = !DILocation(line: 307, column: 22, scope: !2163)
!2167 = !DILocation(line: 308, column: 21, scope: !2163)
!2168 = !DILocation(line: 308, column: 25, scope: !2163)
!2169 = !DILocation(line: 308, column: 7, scope: !2163)
!2170 = !DILocation(line: 311, column: 2, scope: !1899)
!2171 = !DILocation(line: 311, column: 9, scope: !2172)
!2172 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 311, column: 2)
!2173 = !DILocalVariable(name: "carry", scope: !2174, file: !14, line: 313, type: !91, align: 4)
!2174 = distinct !DILexicalBlock(scope: !2172, file: !14, line: 312, column: 2)
!2175 = !DILocation(line: 313, column: 8, scope: !2174)
!2176 = !DILocation(line: 313, column: 16, scope: !2174)
!2177 = !DILocalVariable(name: "sh", scope: !2174, file: !14, line: 314, type: !23, align: 4)
!2178 = !DILocation(line: 314, column: 7, scope: !2174)
!2179 = !DILocation(line: 400, column: 16, scope: !2180, inlinedAt: !2181)
!2180 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !622, file: !622, line: 397, scopeLine: 397, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!2181 = !DILocation(line: 314, column: 18, scope: !2174)
!2182 = !DILocation(line: 400, column: 19, scope: !2180, inlinedAt: !2181)
!2183 = !DILocalVariable(name: "d", scope: !2184, file: !14, line: 315, type: !2148, align: 8)
!2184 = distinct !DILexicalBlock(scope: !2174, file: !14, line: 315, column: 3)
!2185 = !DILocation(line: 315, column: 14, scope: !2184)
!2186 = !DILocation(line: 315, column: 18, scope: !2184)
!2187 = !DILocation(line: 315, column: 22, scope: !2184)
!2188 = !DILocation(line: 315, column: 25, scope: !2184)
!2189 = !DILocation(line: 315, column: 30, scope: !2184)
!2190 = !DILocalVariable(name: "x", scope: !2191, file: !14, line: 317, type: !202, align: 8)
!2191 = distinct !DILexicalBlock(scope: !2184, file: !14, line: 316, column: 3)
!2192 = !DILocation(line: 317, column: 10, scope: !2191)
!2193 = !DILocation(line: 317, column: 22, scope: !2191)
!2194 = !DILocation(line: 317, column: 27, scope: !2191)
!2195 = !DILocation(line: 317, column: 15, scope: !2191)
!2196 = !DILocation(line: 317, column: 32, scope: !2191)
!2197 = !DILocation(line: 318, column: 5, scope: !2191)
!2198 = !DILocation(line: 318, column: 16, scope: !2191)
!2199 = !DILocation(line: 318, column: 10, scope: !2191)
!2200 = !DILocation(line: 319, column: 19, scope: !2191)
!2201 = !DILocation(line: 319, column: 13, scope: !2191)
!2202 = !DILocation(line: 315, column: 33, scope: !2184)
!2203 = !DILocation(line: 321, column: 7, scope: !2174)
!2204 = !DILocation(line: 321, column: 17, scope: !2174)
!2205 = !DILocation(line: 321, column: 21, scope: !2174)
!2206 = !DILocation(line: 322, column: 3, scope: !2174)
!2207 = !DILocation(line: 322, column: 10, scope: !2208)
!2208 = distinct !DILexicalBlock(scope: !2174, file: !14, line: 322, column: 3)
!2209 = !DILocation(line: 322, column: 14, scope: !2208)
!2210 = !DILocation(line: 322, column: 20, scope: !2208)
!2211 = !DILocation(line: 322, column: 22, scope: !2208)
!2212 = !DILocation(line: 322, column: 27, scope: !2208)
!2213 = !DILocation(line: 323, column: 3, scope: !2174)
!2214 = !DILocation(line: 323, column: 9, scope: !2174)
!2215 = !DILocation(line: 326, column: 2, scope: !1899)
!2216 = !DILocation(line: 326, column: 9, scope: !2217)
!2217 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 326, column: 2)
!2218 = !DILocalVariable(name: "carry", scope: !2219, file: !14, line: 328, type: !91, align: 4)
!2219 = distinct !DILexicalBlock(scope: !2217, file: !14, line: 327, column: 2)
!2220 = !DILocation(line: 328, column: 8, scope: !2219)
!2221 = !DILocation(line: 328, column: 16, scope: !2219)
!2222 = !DILocalVariable(name: "b", scope: !2219, file: !14, line: 329, type: !2148, align: 8)
!2223 = !DILocation(line: 329, column: 9, scope: !2219)
!2224 = !DILocalVariable(name: "sh", scope: !2219, file: !14, line: 330, type: !23, align: 4)
!2225 = !DILocation(line: 330, column: 7, scope: !2219)
!2226 = !DILocation(line: 330, column: 26, scope: !2219)
!2227 = !DILocation(line: 400, column: 16, scope: !2228, inlinedAt: !2229)
!2228 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !622, file: !622, line: 397, scopeLine: 397, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!2229 = !DILocation(line: 330, column: 18, scope: !2219)
!2230 = !DILocation(line: 400, column: 19, scope: !2228, inlinedAt: !2229)
!2231 = !DILocalVariable(name: "need", scope: !2219, file: !14, line: 331, type: !23, align: 4)
!2232 = !DILocation(line: 331, column: 7, scope: !2219)
!2233 = !DILocation(line: 331, column: 25, scope: !2219)
!2234 = !DILocation(line: 331, column: 15, scope: !2219)
!2235 = !DILocalVariable(name: "d", scope: !2236, file: !14, line: 332, type: !2148, align: 8)
!2236 = distinct !DILexicalBlock(scope: !2219, file: !14, line: 332, column: 3)
!2237 = !DILocation(line: 332, column: 14, scope: !2236)
!2238 = !DILocation(line: 332, column: 18, scope: !2236)
!2239 = !DILocation(line: 332, column: 21, scope: !2236)
!2240 = !DILocation(line: 332, column: 25, scope: !2236)
!2241 = !DILocalVariable(name: "rm", scope: !2242, file: !14, line: 335, type: !91, align: 4)
!2242 = distinct !DILexicalBlock(scope: !2236, file: !14, line: 333, column: 3)
!2243 = !DILocation(line: 335, column: 9, scope: !2242)
!2244 = !DILocation(line: 335, column: 15, scope: !2242)
!2245 = !DILocation(line: 335, column: 26, scope: !2242)
!2246 = !DILocation(line: 335, column: 21, scope: !2242)
!2247 = !DILocation(line: 335, column: 14, scope: !2242)
!2248 = !DILocation(line: 336, column: 5, scope: !2242)
!2249 = !DILocation(line: 336, column: 11, scope: !2242)
!2250 = !DILocation(line: 336, column: 16, scope: !2242)
!2251 = !DILocation(line: 336, column: 10, scope: !2242)
!2252 = !DILocation(line: 336, column: 22, scope: !2242)
!2253 = !DILocation(line: 337, column: 27, scope: !2242)
!2254 = !DILocation(line: 337, column: 13, scope: !2242)
!2255 = !DILocation(line: 337, column: 33, scope: !2242)
!2256 = !DILocation(line: 332, column: 28, scope: !2236)
!2257 = !DILocation(line: 339, column: 8, scope: !2219)
!2258 = !DILocation(line: 339, column: 10, scope: !2219)
!2259 = !DILocation(line: 339, column: 14, scope: !2219)
!2260 = !DILocation(line: 340, column: 7, scope: !2219)
!2261 = !DILocation(line: 340, column: 14, scope: !2219)
!2262 = !DILocation(line: 340, column: 23, scope: !2219)
!2263 = !DILocation(line: 342, column: 7, scope: !2219)
!2264 = !DILocation(line: 342, column: 29, scope: !2219)
!2265 = !DILocation(line: 342, column: 33, scope: !2219)
!2266 = !DILocation(line: 343, column: 7, scope: !2219)
!2267 = !DILocation(line: 343, column: 11, scope: !2219)
!2268 = !DILocation(line: 343, column: 15, scope: !2219)
!2269 = !DILocation(line: 343, column: 25, scope: !2219)
!2270 = !DILocation(line: 343, column: 29, scope: !2219)
!2271 = !DILocation(line: 344, column: 3, scope: !2219)
!2272 = !DILocation(line: 344, column: 9, scope: !2219)
!2273 = !DILocalVariable(name: "e", scope: !1899, file: !14, line: 347, type: !23, align: 4)
!2274 = !DILocation(line: 347, column: 6, scope: !1899)
!2275 = !DILocation(line: 348, column: 6, scope: !1899)
!2276 = !DILocation(line: 348, column: 10, scope: !1899)
!2277 = !DILocalVariable(name: "i", scope: !2278, file: !14, line: 350, type: !23, align: 4)
!2278 = distinct !DILexicalBlock(scope: !2279, file: !14, line: 350, column: 3)
!2279 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 349, column: 2)
!2280 = !DILocation(line: 350, column: 12, scope: !2278)
!2281 = !DILocation(line: 350, column: 16, scope: !2278)
!2282 = !DILocation(line: 350, column: 35, scope: !2278)
!2283 = !DILocation(line: 350, column: 39, scope: !2278)
!2284 = !DILocation(line: 350, column: 25, scope: !2278)
!2285 = !DILocation(line: 350, column: 45, scope: !2278)
!2286 = !DILocation(line: 350, column: 50, scope: !2278)
!2287 = !DILocation(line: 350, column: 44, scope: !2278)
!2288 = !DILocation(line: 350, column: 53, scope: !2278)
!2289 = !DILocation(line: 350, column: 62, scope: !2278)
!2290 = !DILocalVariable(name: "j", scope: !1899, file: !14, line: 354, type: !23, align: 4)
!2291 = !DILocation(line: 354, column: 6, scope: !1899)
!2292 = !DILocation(line: 354, column: 16, scope: !1899)
!2293 = !DILocation(line: 354, column: 26, scope: !1899)
!2294 = !DILocation(line: 354, column: 48, scope: !1899)
!2295 = !DILocation(line: 354, column: 52, scope: !1899)
!2296 = !DILocation(line: 354, column: 62, scope: !1899)
!2297 = !DILocation(line: 354, column: 88, scope: !1899)
!2298 = !DILocation(line: 354, column: 11, scope: !1899)
!2299 = !DILocation(line: 355, column: 6, scope: !1899)
!2300 = !DILocation(line: 355, column: 15, scope: !1899)
!2301 = !DILocation(line: 355, column: 19, scope: !1899)
!2302 = !DILocation(line: 355, column: 10, scope: !1899)
!2303 = !DILocalVariable(name: "x", scope: !2304, file: !14, line: 357, type: !91, align: 4)
!2304 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 356, column: 2)
!2305 = !DILocation(line: 357, column: 8, scope: !2304)
!2306 = !DILocalVariable(name: "d", scope: !2304, file: !14, line: 359, type: !2148, align: 8)
!2307 = !DILocation(line: 359, column: 9, scope: !2304)
!2308 = !DILocation(line: 359, column: 13, scope: !2304)
!2309 = !DILocation(line: 359, column: 23, scope: !2304)
!2310 = !DILocation(line: 360, column: 3, scope: !2304)
!2311 = !DILocation(line: 361, column: 3, scope: !2304)
!2312 = !DILocalVariable(name: "i", scope: !2304, file: !14, line: 362, type: !23, align: 4)
!2313 = !DILocation(line: 362, column: 7, scope: !2304)
!2314 = !DILocation(line: 363, column: 12, scope: !2315)
!2315 = distinct !DILexicalBlock(scope: !2304, file: !14, line: 363, column: 3)
!2316 = !DILocation(line: 363, column: 16, scope: !2315)
!2317 = !DILocation(line: 363, column: 21, scope: !2315)
!2318 = !DILocation(line: 363, column: 28, scope: !2315)
!2319 = !DILocation(line: 363, column: 37, scope: !2315)
!2320 = !DILocation(line: 364, column: 8, scope: !2304)
!2321 = !DILocation(line: 364, column: 12, scope: !2304)
!2322 = !DILocation(line: 364, column: 7, scope: !2304)
!2323 = !DILocation(line: 366, column: 7, scope: !2304)
!2324 = !DILocation(line: 366, column: 13, scope: !2304)
!2325 = !DILocation(line: 366, column: 17, scope: !2304)
!2326 = !DILocation(line: 366, column: 23, scope: !2304)
!2327 = !DILocalVariable(name: "round", scope: !2328, file: !14, line: 368, type: !1875, align: 8)
!2328 = distinct !DILexicalBlock(scope: !2304, file: !14, line: 367, column: 3)
!2329 = !DILocation(line: 368, column: 11, scope: !2328)
!2330 = !DILocation(line: 368, column: 19, scope: !2328)
!2331 = !DILocalVariable(name: "small", scope: !2328, file: !14, line: 369, type: !1875, align: 8)
!2332 = !DILocation(line: 369, column: 11, scope: !2328)
!2333 = !DILocation(line: 370, column: 11, scope: !2328)
!2334 = !DILocation(line: 370, column: 15, scope: !2328)
!2335 = !DILocation(line: 370, column: 10, scope: !2328)
!2336 = !DILocation(line: 370, column: 27, scope: !2328)
!2337 = !DILocation(line: 370, column: 46, scope: !2328)
!2338 = !DILocation(line: 370, column: 50, scope: !2328)
!2339 = !DILocation(line: 370, column: 56, scope: !2328)
!2340 = !DILocation(line: 370, column: 58, scope: !2328)
!2341 = !DILocation(line: 372, column: 5, scope: !2342)
!2342 = distinct !DILexicalBlock(scope: !2328, file: !14, line: 371, column: 4)
!2343 = !DILocation(line: 376, column: 10, scope: !2344)
!2344 = distinct !DILexicalBlock(scope: !2328, file: !14, line: 374, column: 4)
!2345 = !DILocation(line: 376, column: 14, scope: !2344)
!2346 = !DILocation(line: 377, column: 14, scope: !2347)
!2347 = distinct !DILexicalBlock(scope: !2344, file: !14, line: 377, column: 6)
!2348 = !DILocation(line: 378, column: 10, scope: !2344)
!2349 = !DILocation(line: 378, column: 15, scope: !2344)
!2350 = !DILocation(line: 378, column: 24, scope: !2344)
!2351 = !DILocation(line: 378, column: 28, scope: !2344)
!2352 = !DILocation(line: 378, column: 33, scope: !2344)
!2353 = !DILocation(line: 379, column: 14, scope: !2354)
!2354 = distinct !DILexicalBlock(scope: !2344, file: !14, line: 379, column: 6)
!2355 = !DILocation(line: 381, column: 14, scope: !2356)
!2356 = distinct !DILexicalBlock(scope: !2344, file: !14, line: 381, column: 6)
!2357 = !DILocation(line: 383, column: 8, scope: !2328)
!2358 = !DILocation(line: 383, column: 14, scope: !2328)
!2359 = !DILocation(line: 385, column: 5, scope: !2360)
!2360 = distinct !DILexicalBlock(scope: !2328, file: !14, line: 384, column: 4)
!2361 = !DILocation(line: 386, column: 5, scope: !2360)
!2362 = !DILocation(line: 388, column: 5, scope: !2328)
!2363 = !DILocation(line: 388, column: 10, scope: !2328)
!2364 = !DILocation(line: 388, column: 4, scope: !2328)
!2365 = !DILocation(line: 390, column: 8, scope: !2328)
!2366 = !DILocation(line: 390, column: 16, scope: !2328)
!2367 = !DILocation(line: 390, column: 25, scope: !2328)
!2368 = !DILocation(line: 392, column: 6, scope: !2369)
!2369 = distinct !DILexicalBlock(scope: !2328, file: !14, line: 391, column: 4)
!2370 = !DILocation(line: 392, column: 11, scope: !2369)
!2371 = !DILocation(line: 392, column: 15, scope: !2369)
!2372 = !DILocation(line: 392, column: 10, scope: !2369)
!2373 = !DILocation(line: 393, column: 5, scope: !2369)
!2374 = !DILocation(line: 393, column: 13, scope: !2375)
!2375 = distinct !DILexicalBlock(scope: !2369, file: !14, line: 393, column: 5)
!2376 = !DILocation(line: 393, column: 12, scope: !2375)
!2377 = !DILocation(line: 395, column: 7, scope: !2378)
!2378 = distinct !DILexicalBlock(scope: !2375, file: !14, line: 394, column: 5)
!2379 = !DILocation(line: 395, column: 13, scope: !2378)
!2380 = !DILocation(line: 396, column: 10, scope: !2378)
!2381 = !DILocation(line: 396, column: 14, scope: !2378)
!2382 = !DILocation(line: 396, column: 20, scope: !2378)
!2383 = !DILocation(line: 396, column: 24, scope: !2378)
!2384 = !DILocation(line: 397, column: 8, scope: !2378)
!2385 = !DILocation(line: 397, column: 7, scope: !2378)
!2386 = !DILocation(line: 399, column: 14, scope: !2387)
!2387 = distinct !DILexicalBlock(scope: !2369, file: !14, line: 399, column: 5)
!2388 = !DILocation(line: 399, column: 33, scope: !2387)
!2389 = !DILocation(line: 399, column: 37, scope: !2387)
!2390 = !DILocation(line: 399, column: 23, scope: !2387)
!2391 = !DILocation(line: 399, column: 43, scope: !2387)
!2392 = !DILocation(line: 399, column: 48, scope: !2387)
!2393 = !DILocation(line: 399, column: 42, scope: !2387)
!2394 = !DILocation(line: 399, column: 51, scope: !2387)
!2395 = !DILocation(line: 399, column: 60, scope: !2387)
!2396 = !DILocation(line: 402, column: 7, scope: !2304)
!2397 = !DILocation(line: 402, column: 11, scope: !2304)
!2398 = !DILocation(line: 402, column: 15, scope: !2304)
!2399 = !DILocation(line: 402, column: 22, scope: !2304)
!2400 = !DILocation(line: 402, column: 26, scope: !2304)
!2401 = !DILocation(line: 404, column: 2, scope: !1899)
!2402 = !DILocation(line: 404, column: 9, scope: !2403)
!2403 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 404, column: 2)
!2404 = !DILocation(line: 404, column: 11, scope: !2403)
!2405 = !DILocation(line: 404, column: 17, scope: !2403)
!2406 = !DILocation(line: 404, column: 19, scope: !2403)
!2407 = !DILocation(line: 404, column: 24, scope: !2403)
!2408 = !DILocation(line: 406, column: 6, scope: !1899)
!2409 = !DILocation(line: 408, column: 8, scope: !2410)
!2410 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 407, column: 2)
!2411 = !DILocation(line: 408, column: 11, scope: !2410)
!2412 = !DILocation(line: 409, column: 7, scope: !2410)
!2413 = !DILocation(line: 409, column: 11, scope: !2410)
!2414 = !DILocation(line: 409, column: 16, scope: !2410)
!2415 = !DILocation(line: 411, column: 17, scope: !2416)
!2416 = distinct !DILexicalBlock(scope: !2410, file: !14, line: 410, column: 3)
!2417 = !DILocation(line: 412, column: 4, scope: !2416)
!2418 = !DILocation(line: 412, column: 10, scope: !2416)
!2419 = !DILocation(line: 416, column: 17, scope: !2420)
!2420 = distinct !DILexicalBlock(scope: !2410, file: !14, line: 415, column: 3)
!2421 = !DILocation(line: 417, column: 4, scope: !2420)
!2422 = !DILocation(line: 419, column: 8, scope: !2410)
!2423 = !DILocation(line: 422, column: 8, scope: !2424)
!2424 = distinct !DILexicalBlock(scope: !2410, file: !14, line: 420, column: 3)
!2425 = !DILocation(line: 422, column: 12, scope: !2424)
!2426 = !DILocation(line: 422, column: 17, scope: !2424)
!2427 = !DILocation(line: 422, column: 19, scope: !2424)
!2428 = !DILocalVariable(name: "i", scope: !2429, file: !14, line: 424, type: !23, align: 4)
!2429 = distinct !DILexicalBlock(scope: !2430, file: !14, line: 424, column: 5)
!2430 = distinct !DILexicalBlock(scope: !2424, file: !14, line: 423, column: 4)
!2431 = !DILocation(line: 424, column: 14, scope: !2429)
!2432 = !DILocation(line: 424, column: 18, scope: !2429)
!2433 = !DILocation(line: 424, column: 26, scope: !2429)
!2434 = !DILocation(line: 424, column: 29, scope: !2429)
!2435 = !DILocation(line: 424, column: 31, scope: !2429)
!2436 = !DILocation(line: 424, column: 37, scope: !2429)
!2437 = !DILocation(line: 424, column: 45, scope: !2429)
!2438 = !DILocation(line: 424, column: 54, scope: !2429)
!2439 = !DILocation(line: 428, column: 9, scope: !2440)
!2440 = distinct !DILexicalBlock(scope: !2424, file: !14, line: 427, column: 4)
!2441 = !DILocation(line: 430, column: 8, scope: !2424)
!2442 = !DILocation(line: 432, column: 45, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2424, file: !14, line: 431, column: 4)
!2444 = !DILocation(line: 432, column: 49, scope: !2443)
!2445 = !DILocation(line: 432, column: 40, scope: !2443)
!2446 = !DILocation(line: 432, column: 58, scope: !2443)
!2447 = !DILocation(line: 383, column: 16, scope: !2448, inlinedAt: !2449)
!2448 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !622, file: !622, line: 380, scopeLine: 380, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!2449 = !DILocation(line: 432, column: 28, scope: !2443)
!2450 = !DILocation(line: 383, column: 19, scope: !2448, inlinedAt: !2449)
!2451 = !DILocation(line: 400, column: 16, scope: !2452, inlinedAt: !2453)
!2452 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !622, file: !622, line: 397, scopeLine: 397, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!2453 = !DILocation(line: 432, column: 15, scope: !2443)
!2454 = !DILocation(line: 400, column: 19, scope: !2452, inlinedAt: !2453)
!2455 = !DILocation(line: 436, column: 45, scope: !2456)
!2456 = distinct !DILexicalBlock(scope: !2424, file: !14, line: 435, column: 4)
!2457 = !DILocation(line: 436, column: 49, scope: !2456)
!2458 = !DILocation(line: 436, column: 40, scope: !2456)
!2459 = !DILocation(line: 436, column: 58, scope: !2456)
!2460 = !DILocation(line: 436, column: 62, scope: !2456)
!2461 = !DILocation(line: 383, column: 16, scope: !2462, inlinedAt: !2463)
!2462 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !622, file: !622, line: 380, scopeLine: 380, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!2463 = !DILocation(line: 436, column: 28, scope: !2456)
!2464 = !DILocation(line: 383, column: 19, scope: !2462, inlinedAt: !2463)
!2465 = !DILocation(line: 400, column: 16, scope: !2466, inlinedAt: !2467)
!2466 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !622, file: !622, line: 397, scopeLine: 397, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!2467 = !DILocation(line: 436, column: 15, scope: !2456)
!2468 = !DILocation(line: 400, column: 19, scope: !2466, inlinedAt: !2467)
!2469 = !DILocation(line: 441, column: 6, scope: !1899)
!2470 = !DILocation(line: 441, column: 30, scope: !1899)
!2471 = !DILocation(line: 441, column: 35, scope: !1899)
!2472 = !DILocation(line: 441, column: 10, scope: !1899)
!2473 = !DILocation(line: 441, column: 60, scope: !1899)
!2474 = !DILocalVariable(name: "l", scope: !1899, file: !14, line: 442, type: !23, align: 4)
!2475 = !DILocation(line: 442, column: 6, scope: !1899)
!2476 = !DILocation(line: 442, column: 20, scope: !1899)
!2477 = !DILocation(line: 442, column: 16, scope: !1899)
!2478 = !DILocation(line: 442, column: 30, scope: !1899)
!2479 = !DILocation(line: 442, column: 35, scope: !1899)
!2480 = !DILocation(line: 442, column: 11, scope: !1899)
!2481 = !DILocalVariable(name: "estr", scope: !1899, file: !14, line: 443, type: !114, align: 8)
!2482 = !DILocation(line: 443, column: 8, scope: !1899)
!2483 = !DILocation(line: 444, column: 6, scope: !1899)
!2484 = !DILocation(line: 446, column: 7, scope: !2485)
!2485 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 445, column: 2)
!2486 = !DILocation(line: 446, column: 21, scope: !2485)
!2487 = !DILocation(line: 446, column: 11, scope: !2485)
!2488 = !DILocation(line: 446, column: 31, scope: !2485)
!2489 = !DILocation(line: 447, column: 7, scope: !2485)
!2490 = !DILocation(line: 447, column: 14, scope: !2485)
!2491 = !DILocation(line: 447, column: 19, scope: !2485)
!2492 = !DILocation(line: 451, column: 26, scope: !2493)
!2493 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 450, column: 2)
!2494 = !DILocation(line: 451, column: 35, scope: !2493)
!2495 = !DILocation(line: 451, column: 39, scope: !2493)
!2496 = !DILocation(line: 451, column: 10, scope: !2493)
!2497 = !DILocation(line: 452, column: 3, scope: !2493)
!2498 = !DILocation(line: 452, column: 10, scope: !2499)
!2499 = distinct !DILexicalBlock(scope: !2493, file: !14, line: 452, column: 3)
!2500 = !DILocation(line: 452, column: 17, scope: !2499)
!2501 = !DILocation(line: 452, column: 30, scope: !2499)
!2502 = !DILocation(line: 452, column: 41, scope: !2499)
!2503 = !DILocation(line: 453, column: 6, scope: !2493)
!2504 = !DILocation(line: 453, column: 14, scope: !2493)
!2505 = !DILocation(line: 453, column: 28, scope: !2493)
!2506 = !DILocation(line: 454, column: 6, scope: !2493)
!2507 = !DILocation(line: 454, column: 13, scope: !2493)
!2508 = !DILocation(line: 454, column: 42, scope: !2493)
!2509 = !DILocation(line: 455, column: 7, scope: !2493)
!2510 = !DILocation(line: 455, column: 14, scope: !2493)
!2511 = !DILocation(line: 455, column: 36, scope: !2493)
!2512 = !DILocation(line: 455, column: 22, scope: !2493)
!2513 = !DILocation(line: 455, column: 46, scope: !2493)
!2514 = !DILocation(line: 456, column: 3, scope: !2493)
!2515 = !DILocation(line: 456, column: 14, scope: !2493)
!2516 = !DILocation(line: 456, column: 21, scope: !2493)
!2517 = !DILocation(line: 456, column: 9, scope: !2493)
!2518 = !DILocation(line: 458, column: 6, scope: !1899)
!2519 = !DILocation(line: 458, column: 20, scope: !1899)
!2520 = !DILocation(line: 458, column: 10, scope: !1899)
!2521 = !DILocation(line: 458, column: 31, scope: !1899)
!2522 = !DILocalVariable(name: "len", scope: !1899, file: !14, line: 459, type: !201, align: 8)
!2523 = !DILocation(line: 459, column: 6, scope: !1899)
!2524 = !DILocation(line: 460, column: 7, scope: !1899)
!2525 = !DILocation(line: 460, column: 27, scope: !1899)
!2526 = !DILocation(line: 460, column: 47, scope: !1899)
!2527 = !DILocation(line: 460, column: 68, scope: !1899)
!2528 = !DILocation(line: 460, column: 80, scope: !1899)
!2529 = !DILocation(line: 460, column: 85, scope: !1899)
!2530 = !DILocation(line: 460, column: 54, scope: !1899)
!2531 = !DILocation(line: 461, column: 6, scope: !1899)
!2532 = !DILocation(line: 461, column: 16, scope: !1899)
!2533 = !DILocation(line: 461, column: 33, scope: !1899)
!2534 = !DILocation(line: 461, column: 49, scope: !1899)
!2535 = !DILocation(line: 461, column: 64, scope: !1899)
!2536 = !DILocation(line: 461, column: 40, scope: !1899)
!2537 = !DILocation(line: 462, column: 6, scope: !1899)
!2538 = !DILocation(line: 462, column: 26, scope: !1899)
!2539 = !DILocation(line: 462, column: 47, scope: !1899)
!2540 = !DILocation(line: 462, column: 59, scope: !1899)
!2541 = !DILocation(line: 462, column: 64, scope: !1899)
!2542 = !DILocation(line: 462, column: 33, scope: !1899)
!2543 = !DILocation(line: 463, column: 6, scope: !1899)
!2544 = !DILocation(line: 465, column: 7, scope: !2545)
!2545 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 464, column: 2)
!2546 = !DILocation(line: 465, column: 11, scope: !2545)
!2547 = !DILocation(line: 465, column: 18, scope: !2545)
!2548 = !DILocalVariable(name: "d", scope: !2545, file: !14, line: 466, type: !2148, align: 8)
!2549 = !DILocation(line: 466, column: 9, scope: !2545)
!2550 = !DILocation(line: 466, column: 13, scope: !2545)
!2551 = !DILocation(line: 467, column: 3, scope: !2545)
!2552 = !DILocation(line: 467, column: 10, scope: !2553)
!2553 = distinct !DILexicalBlock(scope: !2545, file: !14, line: 467, column: 3)
!2554 = !DILocation(line: 467, column: 15, scope: !2553)
!2555 = !DILocalVariable(name: "s", scope: !2556, file: !14, line: 469, type: !114, align: 8)
!2556 = distinct !DILexicalBlock(scope: !2553, file: !14, line: 468, column: 3)
!2557 = !DILocation(line: 469, column: 10, scope: !2556)
!2558 = !DILocation(line: 469, column: 21, scope: !2556)
!2559 = !DILocation(line: 469, column: 24, scope: !2556)
!2560 = !DILocation(line: 469, column: 30, scope: !2556)
!2561 = !DILocation(line: 469, column: 14, scope: !2556)
!2562 = !DILocation(line: 472, column: 10, scope: !2563)
!2563 = distinct !DILexicalBlock(scope: !2556, file: !14, line: 470, column: 4)
!2564 = !DILocation(line: 472, column: 15, scope: !2563)
!2565 = !DILocation(line: 473, column: 6, scope: !2566)
!2566 = distinct !DILexicalBlock(scope: !2563, file: !14, line: 473, column: 6)
!2567 = !DILocation(line: 473, column: 13, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2566, file: !14, line: 473, column: 6)
!2569 = !DILocation(line: 473, column: 17, scope: !2568)
!2570 = !DILocation(line: 473, column: 25, scope: !2568)
!2571 = !DILocation(line: 473, column: 33, scope: !2568)
!2572 = !DILocation(line: 474, column: 10, scope: !2563)
!2573 = !DILocation(line: 474, column: 15, scope: !2563)
!2574 = !DILocation(line: 474, column: 21, scope: !2563)
!2575 = !DILocation(line: 475, column: 9, scope: !2576)
!2576 = distinct !DILexicalBlock(scope: !2563, file: !14, line: 475, column: 6)
!2577 = !DILocation(line: 475, column: 13, scope: !2576)
!2578 = !DILocation(line: 477, column: 4, scope: !2556)
!2579 = !DILocation(line: 477, column: 26, scope: !2556)
!2580 = !DILocation(line: 477, column: 29, scope: !2556)
!2581 = !DILocation(line: 477, column: 35, scope: !2556)
!2582 = !DILocation(line: 477, column: 39, scope: !2556)
!2583 = !DILocation(line: 477, column: 11, scope: !2556)
!2584 = !DILocation(line: 467, column: 18, scope: !2553)
!2585 = !DILocation(line: 479, column: 7, scope: !2545)
!2586 = !DILocation(line: 479, column: 12, scope: !2545)
!2587 = !DILocation(line: 479, column: 29, scope: !2545)
!2588 = !DILocation(line: 479, column: 36, scope: !2545)
!2589 = !DILocation(line: 480, column: 3, scope: !2545)
!2590 = !DILocation(line: 480, column: 10, scope: !2591)
!2591 = distinct !DILexicalBlock(scope: !2545, file: !14, line: 480, column: 3)
!2592 = !DILocation(line: 480, column: 14, scope: !2591)
!2593 = !DILocation(line: 480, column: 19, scope: !2591)
!2594 = !DILocalVariable(name: "s", scope: !2595, file: !14, line: 482, type: !114, align: 8)
!2595 = distinct !DILexicalBlock(scope: !2591, file: !14, line: 481, column: 3)
!2596 = !DILocation(line: 482, column: 10, scope: !2595)
!2597 = !DILocation(line: 482, column: 21, scope: !2595)
!2598 = !DILocation(line: 482, column: 24, scope: !2595)
!2599 = !DILocation(line: 482, column: 30, scope: !2595)
!2600 = !DILocation(line: 482, column: 14, scope: !2595)
!2601 = !DILocation(line: 483, column: 4, scope: !2595)
!2602 = !DILocation(line: 483, column: 11, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2595, file: !14, line: 483, column: 4)
!2604 = !DILocation(line: 483, column: 15, scope: !2603)
!2605 = !DILocation(line: 483, column: 23, scope: !2603)
!2606 = !DILocation(line: 483, column: 27, scope: !2603)
!2607 = !DILocation(line: 484, column: 4, scope: !2595)
!2608 = !DILocation(line: 484, column: 26, scope: !2595)
!2609 = !DILocation(line: 400, column: 16, scope: !2610, inlinedAt: !2611)
!2610 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !622, file: !622, line: 397, scopeLine: 397, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!2611 = !DILocation(line: 484, column: 35, scope: !2595)
!2612 = !DILocation(line: 400, column: 19, scope: !2610, inlinedAt: !2611)
!2613 = !DILocation(line: 484, column: 11, scope: !2595)
!2614 = !DILocation(line: 480, column: 26, scope: !2591)
!2615 = !DILocation(line: 480, column: 31, scope: !2591)
!2616 = !DILocation(line: 486, column: 3, scope: !2545)
!2617 = !DILocation(line: 486, column: 24, scope: !2545)
!2618 = !DILocation(line: 486, column: 10, scope: !2545)
!2619 = !DILocation(line: 490, column: 7, scope: !2620)
!2620 = distinct !DILexicalBlock(scope: !1899, file: !14, line: 489, column: 2)
!2621 = !DILocation(line: 490, column: 12, scope: !2620)
!2622 = !DILocation(line: 490, column: 19, scope: !2620)
!2623 = !DILocation(line: 490, column: 23, scope: !2620)
!2624 = !DILocalVariable(name: "d", scope: !2625, file: !14, line: 491, type: !2148, align: 8)
!2625 = distinct !DILexicalBlock(scope: !2620, file: !14, line: 491, column: 3)
!2626 = !DILocation(line: 491, column: 14, scope: !2625)
!2627 = !DILocation(line: 491, column: 18, scope: !2625)
!2628 = !DILocation(line: 491, column: 21, scope: !2625)
!2629 = !DILocation(line: 491, column: 25, scope: !2625)
!2630 = !DILocation(line: 491, column: 30, scope: !2625)
!2631 = !DILocalVariable(name: "s", scope: !2632, file: !14, line: 493, type: !114, align: 8)
!2632 = distinct !DILexicalBlock(scope: !2625, file: !14, line: 492, column: 3)
!2633 = !DILocation(line: 493, column: 10, scope: !2632)
!2634 = !DILocation(line: 493, column: 21, scope: !2632)
!2635 = !DILocation(line: 493, column: 24, scope: !2632)
!2636 = !DILocation(line: 493, column: 30, scope: !2632)
!2637 = !DILocation(line: 493, column: 14, scope: !2632)
!2638 = !DILocation(line: 494, column: 8, scope: !2632)
!2639 = !DILocation(line: 494, column: 13, scope: !2632)
!2640 = !DILocation(line: 494, column: 19, scope: !2632)
!2641 = !DILocation(line: 494, column: 25, scope: !2632)
!2642 = !DILocation(line: 494, column: 33, scope: !2632)
!2643 = !DILocation(line: 495, column: 8, scope: !2632)
!2644 = !DILocation(line: 495, column: 13, scope: !2632)
!2645 = !DILocation(line: 497, column: 5, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2632, file: !14, line: 496, column: 4)
!2647 = !DILocation(line: 497, column: 12, scope: !2648)
!2648 = distinct !DILexicalBlock(scope: !2646, file: !14, line: 497, column: 5)
!2649 = !DILocation(line: 497, column: 16, scope: !2648)
!2650 = !DILocation(line: 497, column: 24, scope: !2648)
!2651 = !DILocation(line: 497, column: 32, scope: !2648)
!2652 = !DILocation(line: 501, column: 5, scope: !2653)
!2653 = distinct !DILexicalBlock(scope: !2632, file: !14, line: 500, column: 4)
!2654 = !DILocation(line: 501, column: 21, scope: !2653)
!2655 = !DILocation(line: 501, column: 12, scope: !2653)
!2656 = !DILocation(line: 502, column: 9, scope: !2653)
!2657 = !DILocation(line: 502, column: 18, scope: !2653)
!2658 = !DILocation(line: 502, column: 35, scope: !2653)
!2659 = !DILocation(line: 502, column: 42, scope: !2653)
!2660 = !DILocation(line: 504, column: 4, scope: !2632)
!2661 = !DILocation(line: 504, column: 26, scope: !2632)
!2662 = !DILocation(line: 504, column: 39, scope: !2632)
!2663 = !DILocation(line: 504, column: 45, scope: !2632)
!2664 = !DILocation(line: 504, column: 49, scope: !2632)
!2665 = !DILocation(line: 400, column: 16, scope: !2666, inlinedAt: !2667)
!2666 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !622, file: !622, line: 397, scopeLine: 397, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!2667 = !DILocation(line: 504, column: 35, scope: !2632)
!2668 = !DILocation(line: 400, column: 19, scope: !2666, inlinedAt: !2667)
!2669 = !DILocation(line: 504, column: 11, scope: !2632)
!2670 = !DILocation(line: 505, column: 4, scope: !2632)
!2671 = !DILocation(line: 505, column: 9, scope: !2632)
!2672 = !DILocation(line: 505, column: 15, scope: !2632)
!2673 = !DILocation(line: 505, column: 19, scope: !2632)
!2674 = !DILocation(line: 491, column: 38, scope: !2625)
!2675 = !DILocation(line: 507, column: 3, scope: !2620)
!2676 = !DILocation(line: 507, column: 24, scope: !2620)
!2677 = !DILocation(line: 507, column: 10, scope: !2620)
!2678 = !DILocation(line: 508, column: 3, scope: !2620)
!2679 = !DILocation(line: 508, column: 25, scope: !2620)
!2680 = !DILocation(line: 508, column: 31, scope: !2620)
!2681 = !DILocation(line: 508, column: 38, scope: !2620)
!2682 = !DILocation(line: 508, column: 10, scope: !2620)
!2683 = !DILocation(line: 511, column: 6, scope: !1899)
!2684 = !DILocation(line: 511, column: 23, scope: !1899)
!2685 = !DILocation(line: 511, column: 44, scope: !1899)
!2686 = !DILocation(line: 511, column: 56, scope: !1899)
!2687 = !DILocation(line: 511, column: 61, scope: !1899)
!2688 = !DILocation(line: 511, column: 30, scope: !1899)
!2689 = !DILocation(line: 513, column: 9, scope: !1899)
!2690 = !DILocation(line: 259, column: 22, scope: !2002)
!2691 = !DILocation(line: 260, column: 4, scope: !2002)
!2692 = !DILocation(line: 261, column: 4, scope: !2002)
!2693 = !DILocation(line: 321, column: 15, scope: !2174)
!2694 = !DILocation(line: 396, column: 18, scope: !2378)
!2695 = !DILocation(line: 453, column: 4, scope: !2493)
!2696 = !DILocation(line: 454, column: 4, scope: !2493)
!2697 = !DILocation(line: 475, column: 7, scope: !2576)
!2698 = !DILocation(line: 483, column: 21, scope: !2603)
!2699 = distinct !DISubprogram(name: "ntoa", linkageName: "std.io.Formatter.ntoa", scope: !14, file: !14, line: 516, type: !2700, scopeLine: 516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!2700 = !DISubroutineType(types: !2701)
!2701 = !{!112, !407, !1769, !2702, !328, !91}
!2702 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!2703 = !DILocation(line: 517, column: 1, scope: !2699)
!2704 = !DILocalVariable(name: "self", arg: 1, scope: !2699, file: !14, line: 516, type: !1769)
!2705 = !DILocation(line: 516, column: 24, scope: !2699)
!2706 = !DILocalVariable(name: "value", arg: 2, scope: !2699, file: !14, line: 516, type: !2702)
!2707 = !DILocation(line: 516, column: 39, scope: !2699)
!2708 = !DILocalVariable(name: "negative", arg: 3, scope: !2699, file: !14, line: 516, type: !328)
!2709 = !DILocation(line: 516, column: 51, scope: !2699)
!2710 = !DILocalVariable(name: "base", arg: 4, scope: !2699, file: !14, line: 516, type: !91)
!2711 = !DILocation(line: 516, column: 66, scope: !2699)
!2712 = !DILocalVariable(name: "buf", scope: !2699, file: !14, line: 518, type: !2713, align: 16)
!2713 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 2048, align: 8, elements: !2714)
!2714 = !{!2715}
!2715 = !DISubrange(count: 256, lowerBound: 0)
!2716 = !DILocation(line: 518, column: 32, scope: !2699)
!2717 = !DILocalVariable(name: "len", scope: !2699, file: !14, line: 519, type: !201, align: 8)
!2718 = !DILocation(line: 519, column: 6, scope: !2699)
!2719 = !DILocation(line: 522, column: 7, scope: !2699)
!2720 = !DILocation(line: 522, column: 14, scope: !2699)
!2721 = !DILocation(line: 522, column: 32, scope: !2699)
!2722 = !DILocation(line: 525, column: 7, scope: !2699)
!2723 = !DILocation(line: 525, column: 31, scope: !2699)
!2724 = !DILocalVariable(name: "past_10", scope: !2725, file: !14, line: 527, type: !16, align: 1)
!2725 = distinct !DILexicalBlock(scope: !2699, file: !14, line: 526, column: 2)
!2726 = !DILocation(line: 527, column: 8, scope: !2725)
!2727 = !DILocation(line: 527, column: 19, scope: !2725)
!2728 = !DILocation(line: 527, column: 48, scope: !2725)
!2729 = !DILocation(line: 528, column: 3, scope: !2725)
!2730 = !DILocation(line: 535, column: 10, scope: !2731)
!2731 = distinct !DILexicalBlock(scope: !2725, file: !14, line: 528, column: 3)
!2732 = !DILocation(line: 530, column: 8, scope: !2733)
!2733 = distinct !DILexicalBlock(scope: !2731, file: !14, line: 529, column: 3)
!2734 = !DILocation(line: 530, column: 47, scope: !2733)
!2735 = !DILocalVariable(name: "digit", scope: !2733, file: !14, line: 531, type: !16, align: 1)
!2736 = !DILocation(line: 531, column: 9, scope: !2733)
!2737 = !DILocation(line: 531, column: 24, scope: !2733)
!2738 = !DILocation(line: 531, column: 32, scope: !2733)
!2739 = !DILocation(line: 531, column: 18, scope: !2733)
!2740 = !DILocation(line: 532, column: 8, scope: !2733)
!2741 = !DILocation(line: 532, column: 17, scope: !2733)
!2742 = !DILocation(line: 532, column: 26, scope: !2733)
!2743 = !DILocation(line: 532, column: 39, scope: !2733)
!2744 = !DILocation(line: 532, column: 45, scope: !2733)
!2745 = !DILocation(line: 533, column: 4, scope: !2733)
!2746 = !DILocation(line: 533, column: 13, scope: !2733)
!2747 = !DILocation(line: 537, column: 34, scope: !2699)
!2748 = !DILocation(line: 537, column: 9, scope: !2699)
!2749 = distinct !DISubprogram(name: "ntoa_format", linkageName: "std.io.Formatter.ntoa_format", scope: !14, file: !14, line: 540, type: !2750, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!2750 = !DISubroutineType(types: !2751)
!2751 = !{!112, !407, !1769, !964, !202, !328, !91}
!2752 = !DILocation(line: 541, column: 1, scope: !2749)
!2753 = !DILocalVariable(name: "self", arg: 1, scope: !2749, file: !14, line: 540, type: !1769)
!2754 = !DILocation(line: 540, column: 31, scope: !2749)
!2755 = !DILocalVariable(name: "buf", arg: 2, scope: !2749, file: !14, line: 540, type: !964)
!2756 = !DILocation(line: 540, column: 45, scope: !2749)
!2757 = !DILocalVariable(name: "len", arg: 3, scope: !2749, file: !14, line: 540, type: !201)
!2758 = !DILocation(line: 540, column: 54, scope: !2749)
!2759 = !DILocalVariable(name: "negative", arg: 4, scope: !2749, file: !14, line: 540, type: !328)
!2760 = !DILocation(line: 540, column: 64, scope: !2749)
!2761 = !DILocalVariable(name: "base", arg: 5, scope: !2749, file: !14, line: 540, type: !91)
!2762 = !DILocation(line: 540, column: 79, scope: !2749)
!2763 = !DILocation(line: 543, column: 7, scope: !2749)
!2764 = !DILocation(line: 545, column: 7, scope: !2765)
!2765 = distinct !DILexicalBlock(scope: !2749, file: !14, line: 544, column: 2)
!2766 = !DILocation(line: 545, column: 21, scope: !2765)
!2767 = !DILocation(line: 545, column: 44, scope: !2765)
!2768 = !DILocation(line: 545, column: 56, scope: !2765)
!2769 = !DILocation(line: 545, column: 75, scope: !2765)
!2770 = !DILocation(line: 545, column: 94, scope: !2765)
!2771 = !DILocation(line: 546, column: 3, scope: !2765)
!2772 = !DILocation(line: 546, column: 10, scope: !2773)
!2773 = distinct !DILexicalBlock(scope: !2765, file: !14, line: 546, column: 3)
!2774 = !DILocation(line: 546, column: 16, scope: !2773)
!2775 = !DILocation(line: 548, column: 8, scope: !2776)
!2776 = distinct !DILexicalBlock(scope: !2773, file: !14, line: 547, column: 3)
!2777 = !DILocation(line: 548, column: 15, scope: !2776)
!2778 = !DILocation(line: 548, column: 31, scope: !2776)
!2779 = !DILocation(line: 549, column: 4, scope: !2776)
!2780 = !DILocation(line: 549, column: 8, scope: !2776)
!2781 = !DILocation(line: 549, column: 17, scope: !2776)
!2782 = !DILocation(line: 551, column: 3, scope: !2765)
!2783 = !DILocation(line: 551, column: 10, scope: !2784)
!2784 = distinct !DILexicalBlock(scope: !2765, file: !14, line: 551, column: 3)
!2785 = !DILocation(line: 551, column: 32, scope: !2784)
!2786 = !DILocation(line: 551, column: 38, scope: !2784)
!2787 = !DILocation(line: 553, column: 8, scope: !2788)
!2788 = distinct !DILexicalBlock(scope: !2784, file: !14, line: 552, column: 3)
!2789 = !DILocation(line: 553, column: 15, scope: !2788)
!2790 = !DILocation(line: 553, column: 31, scope: !2788)
!2791 = !DILocation(line: 554, column: 4, scope: !2788)
!2792 = !DILocation(line: 554, column: 8, scope: !2788)
!2793 = !DILocation(line: 554, column: 17, scope: !2788)
!2794 = !DILocation(line: 559, column: 6, scope: !2749)
!2795 = !DILocation(line: 559, column: 25, scope: !2749)
!2796 = !DILocation(line: 561, column: 8, scope: !2797)
!2797 = distinct !DILexicalBlock(scope: !2749, file: !14, line: 560, column: 2)
!2798 = !DILocation(line: 561, column: 32, scope: !2797)
!2799 = !DILocation(line: 561, column: 39, scope: !2797)
!2800 = !DILocation(line: 561, column: 46, scope: !2797)
!2801 = !DILocation(line: 561, column: 59, scope: !2797)
!2802 = !DILocation(line: 561, column: 66, scope: !2797)
!2803 = !DILocation(line: 563, column: 4, scope: !2804)
!2804 = distinct !DILexicalBlock(scope: !2797, file: !14, line: 562, column: 3)
!2805 = !DILocation(line: 564, column: 8, scope: !2804)
!2806 = !DILocation(line: 564, column: 13, scope: !2804)
!2807 = !DILocation(line: 566, column: 7, scope: !2797)
!2808 = !DILocation(line: 568, column: 8, scope: !2809)
!2809 = distinct !DILexicalBlock(scope: !2797, file: !14, line: 567, column: 3)
!2810 = !DILocation(line: 568, column: 19, scope: !2809)
!2811 = !DILocation(line: 568, column: 35, scope: !2809)
!2812 = !DILocation(line: 572, column: 6, scope: !2813)
!2813 = distinct !DILexicalBlock(scope: !2814, file: !14, line: 572, column: 6)
!2814 = distinct !DILexicalBlock(scope: !2809, file: !14, line: 569, column: 4)
!2815 = !DILocation(line: 572, column: 10, scope: !2813)
!2816 = !DILocation(line: 572, column: 19, scope: !2813)
!2817 = !DILocation(line: 572, column: 48, scope: !2813)
!2818 = !DILocation(line: 574, column: 6, scope: !2819)
!2819 = distinct !DILexicalBlock(scope: !2814, file: !14, line: 574, column: 6)
!2820 = !DILocation(line: 574, column: 10, scope: !2819)
!2821 = !DILocation(line: 574, column: 19, scope: !2819)
!2822 = !DILocation(line: 574, column: 48, scope: !2819)
!2823 = !DILocation(line: 576, column: 6, scope: !2824)
!2824 = distinct !DILexicalBlock(scope: !2814, file: !14, line: 576, column: 6)
!2825 = !DILocation(line: 576, column: 10, scope: !2824)
!2826 = !DILocation(line: 576, column: 19, scope: !2824)
!2827 = !DILocation(line: 576, column: 48, scope: !2824)
!2828 = !DILocation(line: 164, column: 33, scope: !2829, inlinedAt: !2830)
!2829 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !208, file: !208, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!2830 = !DILocation(line: 578, column: 6, scope: !2831)
!2831 = distinct !DILexicalBlock(scope: !2814, file: !14, line: 578, column: 6)
!2832 = !DILocation(line: 164, column: 2, scope: !2829, inlinedAt: !2830)
!2833 = !DILocation(line: 166, column: 2, scope: !2829, inlinedAt: !2830)
!2834 = !DILocation(line: 580, column: 4, scope: !2809)
!2835 = !DILocation(line: 580, column: 8, scope: !2809)
!2836 = !DILocation(line: 580, column: 17, scope: !2809)
!2837 = !DILocation(line: 586, column: 8, scope: !2838)
!2838 = distinct !DILexicalBlock(scope: !2749, file: !14, line: 584, column: 2)
!2839 = !DILocation(line: 587, column: 8, scope: !2840)
!2840 = distinct !DILexicalBlock(scope: !2838, file: !14, line: 587, column: 4)
!2841 = !DILocation(line: 587, column: 15, scope: !2840)
!2842 = !DILocation(line: 587, column: 31, scope: !2840)
!2843 = !DILocation(line: 588, column: 4, scope: !2840)
!2844 = !DILocation(line: 588, column: 8, scope: !2840)
!2845 = !DILocation(line: 588, column: 17, scope: !2840)
!2846 = !DILocation(line: 589, column: 8, scope: !2838)
!2847 = !DILocation(line: 590, column: 8, scope: !2848)
!2848 = distinct !DILexicalBlock(scope: !2838, file: !14, line: 590, column: 4)
!2849 = !DILocation(line: 590, column: 15, scope: !2848)
!2850 = !DILocation(line: 590, column: 31, scope: !2848)
!2851 = !DILocation(line: 591, column: 4, scope: !2848)
!2852 = !DILocation(line: 591, column: 8, scope: !2848)
!2853 = !DILocation(line: 591, column: 17, scope: !2848)
!2854 = !DILocation(line: 592, column: 8, scope: !2838)
!2855 = !DILocation(line: 593, column: 8, scope: !2856)
!2856 = distinct !DILexicalBlock(scope: !2838, file: !14, line: 593, column: 4)
!2857 = !DILocation(line: 593, column: 15, scope: !2856)
!2858 = !DILocation(line: 593, column: 31, scope: !2856)
!2859 = !DILocation(line: 594, column: 4, scope: !2856)
!2860 = !DILocation(line: 594, column: 8, scope: !2856)
!2861 = !DILocation(line: 594, column: 17, scope: !2856)
!2862 = !DILocation(line: 596, column: 6, scope: !2749)
!2863 = !DILocation(line: 596, column: 28, scope: !2749)
!2864 = !DILocation(line: 596, column: 32, scope: !2749)
!2865 = !DILocation(line: 596, column: 33, scope: !2749)
!2866 = !DILocation(line: 596, column: 11, scope: !2749)
!2867 = !DILocation(line: 597, column: 9, scope: !2749)
!2868 = distinct !DISubprogram(name: "ntoa_any", linkageName: "std.io.Formatter.ntoa_any", scope: !14, file: !14, line: 601, type: !2869, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!2869 = !DISubroutineType(types: !2870)
!2870 = !{!112, !407, !1769, !1572, !91}
!2871 = !DILocation(line: 602, column: 1, scope: !2868)
!2872 = !DILocalVariable(name: "self", arg: 1, scope: !2868, file: !14, line: 601, type: !1769)
!2873 = !DILocation(line: 601, column: 28, scope: !2868)
!2874 = !DILocalVariable(name: "arg", arg: 2, scope: !2868, file: !14, line: 601, type: !1572)
!2875 = !DILocation(line: 601, column: 39, scope: !2868)
!2876 = !DILocalVariable(name: "base", arg: 3, scope: !2868, file: !14, line: 601, type: !91)
!2877 = !DILocation(line: 601, column: 49, scope: !2868)
!2878 = !DILocalVariable(name: "is_neg", scope: !2868, file: !14, line: 603, type: !328, align: 1)
!2879 = !DILocation(line: 603, column: 7, scope: !2868)
!2880 = !DILocation(line: 604, column: 19, scope: !2868)
!2881 = !DILocation(line: 604, column: 9, scope: !2868)
!2882 = distinct !DISubprogram(name: "out_char", linkageName: "std.io.Formatter.out_char", scope: !14, file: !14, line: 607, type: !2883, scopeLine: 607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!2883 = !DISubroutineType(types: !2884)
!2884 = !{!112, !407, !1769, !1572}
!2885 = !DILocation(line: 608, column: 1, scope: !2882)
!2886 = !DILocalVariable(name: "self", arg: 1, scope: !2882, file: !14, line: 607, type: !1769)
!2887 = !DILocation(line: 607, column: 28, scope: !2882)
!2888 = !DILocalVariable(name: "arg", arg: 2, scope: !2882, file: !14, line: 607, type: !1572)
!2889 = !DILocation(line: 607, column: 39, scope: !2882)
!2890 = !DILocalVariable(name: "len", scope: !2882, file: !14, line: 609, type: !201, align: 8)
!2891 = !DILocation(line: 609, column: 6, scope: !2882)
!2892 = !DILocation(line: 609, column: 12, scope: !2882)
!2893 = !DILocalVariable(name: "l", scope: !2882, file: !14, line: 610, type: !91, align: 4)
!2894 = !DILocation(line: 610, column: 7, scope: !2882)
!2895 = !DILocation(line: 610, column: 11, scope: !2882)
!2896 = !DILocation(line: 612, column: 2, scope: !2882)
!2897 = !DILocation(line: 612, column: 21, scope: !2882)
!2898 = !DILocation(line: 612, column: 9, scope: !2882)
!2899 = !DILocalVariable(name: "c", scope: !2882, file: !14, line: 614, type: !2900, align: 4)
!2900 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !14, file: !14, line: 8, baseType: !91, align: 4)
!2901 = !DILocation(line: 614, column: 9, scope: !2882)
!2902 = !DILocation(line: 12, column: 11, scope: !2903, inlinedAt: !2906)
!2903 = distinct !DILexicalBlock(scope: !2905, file: !2904, line: 15, column: 1)
!2904 = !DIFile(filename: "types.c3", directory: "/home/ashly/Downloads/c3-linux/c3/lib/std/core")
!2905 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !2904, file: !2904, line: 14, scopeLine: 14, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!2906 = !DILocation(line: 614, column: 20, scope: !2882)
!2907 = !DILocation(line: 12, column: 36, scope: !2903, inlinedAt: !2906)
!2908 = !DILocalVariable(name: "any_type", scope: !2905, file: !14, line: 16, type: !89, align: 8)
!2909 = !DILocation(line: 16, column: 9, scope: !2905, inlinedAt: !2906)
!2910 = !DILocation(line: 16, column: 20, scope: !2905, inlinedAt: !2906)
!2911 = !DILocalVariable(name: "kind", scope: !2905, file: !14, line: 17, type: !54, align: 1)
!2912 = !DILocation(line: 17, column: 11, scope: !2905, inlinedAt: !2906)
!2913 = !DILocation(line: 17, column: 18, scope: !2905, inlinedAt: !2906)
!2914 = !DILocation(line: 18, column: 6, scope: !2905, inlinedAt: !2906)
!2915 = !DILocation(line: 20, column: 14, scope: !2916, inlinedAt: !2906)
!2916 = distinct !DILexicalBlock(scope: !2905, file: !2904, line: 19, column: 2)
!2917 = !DILocation(line: 21, column: 10, scope: !2916, inlinedAt: !2906)
!2918 = !DILocalVariable(name: "is_mixed_signed", scope: !2905, file: !14, line: 23, type: !328, align: 1)
!2919 = !DILocation(line: 23, column: 7, scope: !2905, inlinedAt: !2906)
!2920 = !DILocation(line: 23, column: 41, scope: !2905, inlinedAt: !2906)
!2921 = !DILocation(line: 23, column: 25, scope: !2905, inlinedAt: !2906)
!2922 = !DILocalVariable(name: "max", scope: !2905, file: !14, line: 24, type: !91, align: 4)
!2923 = !DILocation(line: 24, column: 8, scope: !2905, inlinedAt: !2906)
!2924 = !DILocation(line: 24, column: 14, scope: !2905, inlinedAt: !2906)
!2925 = !DILocalVariable(name: "min", scope: !2905, file: !14, line: 25, type: !91, align: 4)
!2926 = !DILocation(line: 25, column: 8, scope: !2905, inlinedAt: !2906)
!2927 = !DILocation(line: 25, column: 14, scope: !2905, inlinedAt: !2906)
!2928 = !DILocation(line: 28, column: 8, scope: !2929, inlinedAt: !2906)
!2929 = distinct !DILexicalBlock(scope: !2905, file: !2904, line: 26, column: 2)
!2930 = !DILocalVariable(name: "c", scope: !2931, file: !14, line: 29, type: !2932, align: 1)
!2931 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 29, column: 4)
!2932 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!2933 = !DILocation(line: 29, column: 10, scope: !2931, inlinedAt: !2906)
!2934 = !DILocation(line: 29, column: 22, scope: !2931, inlinedAt: !2906)
!2935 = !DILocation(line: 29, column: 16, scope: !2931, inlinedAt: !2906)
!2936 = !DILocation(line: 30, column: 8, scope: !2931, inlinedAt: !2906)
!2937 = !DILocation(line: 30, column: 27, scope: !2931, inlinedAt: !2906)
!2938 = !DILocation(line: 30, column: 41, scope: !2931, inlinedAt: !2906)
!2939 = !DILocation(line: 31, column: 12, scope: !2931, inlinedAt: !2906)
!2940 = !DILocation(line: 32, column: 8, scope: !2929, inlinedAt: !2906)
!2941 = !DILocalVariable(name: "s", scope: !2942, file: !14, line: 33, type: !2943, align: 2)
!2942 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 33, column: 4)
!2943 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!2944 = !DILocation(line: 33, column: 10, scope: !2942, inlinedAt: !2906)
!2945 = !DILocation(line: 33, column: 23, scope: !2942, inlinedAt: !2906)
!2946 = !DILocation(line: 33, column: 16, scope: !2942, inlinedAt: !2906)
!2947 = !DILocation(line: 34, column: 8, scope: !2942, inlinedAt: !2906)
!2948 = !DILocation(line: 34, column: 27, scope: !2942, inlinedAt: !2906)
!2949 = !DILocation(line: 34, column: 41, scope: !2942, inlinedAt: !2906)
!2950 = !DILocation(line: 35, column: 8, scope: !2942, inlinedAt: !2906)
!2951 = !DILocation(line: 35, column: 12, scope: !2942, inlinedAt: !2906)
!2952 = !DILocation(line: 35, column: 19, scope: !2942, inlinedAt: !2906)
!2953 = !DILocation(line: 35, column: 23, scope: !2942, inlinedAt: !2906)
!2954 = !DILocation(line: 35, column: 35, scope: !2942, inlinedAt: !2906)
!2955 = !DILocation(line: 36, column: 12, scope: !2942, inlinedAt: !2906)
!2956 = !DILocation(line: 37, column: 8, scope: !2929, inlinedAt: !2906)
!2957 = !DILocalVariable(name: "i", scope: !2958, file: !14, line: 38, type: !23, align: 4)
!2958 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 38, column: 4)
!2959 = !DILocation(line: 38, column: 8, scope: !2958, inlinedAt: !2906)
!2960 = !DILocation(line: 38, column: 19, scope: !2958, inlinedAt: !2906)
!2961 = !DILocation(line: 38, column: 14, scope: !2958, inlinedAt: !2906)
!2962 = !DILocation(line: 39, column: 8, scope: !2958, inlinedAt: !2906)
!2963 = !DILocation(line: 39, column: 27, scope: !2958, inlinedAt: !2906)
!2964 = !DILocation(line: 39, column: 41, scope: !2958, inlinedAt: !2906)
!2965 = !DILocation(line: 40, column: 8, scope: !2958, inlinedAt: !2906)
!2966 = !DILocation(line: 40, column: 12, scope: !2958, inlinedAt: !2906)
!2967 = !DILocation(line: 40, column: 19, scope: !2958, inlinedAt: !2906)
!2968 = !DILocation(line: 40, column: 23, scope: !2958, inlinedAt: !2906)
!2969 = !DILocation(line: 40, column: 35, scope: !2958, inlinedAt: !2906)
!2970 = !DILocation(line: 41, column: 12, scope: !2958, inlinedAt: !2906)
!2971 = !DILocation(line: 42, column: 8, scope: !2929, inlinedAt: !2906)
!2972 = !DILocalVariable(name: "l", scope: !2973, file: !14, line: 43, type: !113, align: 8)
!2973 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 43, column: 4)
!2974 = !DILocation(line: 43, column: 9, scope: !2973, inlinedAt: !2906)
!2975 = !DILocation(line: 43, column: 21, scope: !2973, inlinedAt: !2906)
!2976 = !DILocation(line: 43, column: 15, scope: !2973, inlinedAt: !2906)
!2977 = !DILocation(line: 44, column: 8, scope: !2973, inlinedAt: !2906)
!2978 = !DILocation(line: 44, column: 27, scope: !2973, inlinedAt: !2906)
!2979 = !DILocation(line: 44, column: 41, scope: !2973, inlinedAt: !2906)
!2980 = !DILocation(line: 45, column: 8, scope: !2973, inlinedAt: !2906)
!2981 = !DILocation(line: 45, column: 12, scope: !2973, inlinedAt: !2906)
!2982 = !DILocation(line: 45, column: 19, scope: !2973, inlinedAt: !2906)
!2983 = !DILocation(line: 45, column: 23, scope: !2973, inlinedAt: !2906)
!2984 = !DILocation(line: 45, column: 35, scope: !2973, inlinedAt: !2906)
!2985 = !DILocation(line: 46, column: 12, scope: !2973, inlinedAt: !2906)
!2986 = !DILocation(line: 47, column: 8, scope: !2929, inlinedAt: !2906)
!2987 = !DILocalVariable(name: "i", scope: !2988, file: !14, line: 48, type: !2989, align: 8)
!2988 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 48, column: 4)
!2989 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!2990 = !DILocation(line: 48, column: 11, scope: !2988, inlinedAt: !2906)
!2991 = !DILocation(line: 48, column: 25, scope: !2988, inlinedAt: !2906)
!2992 = !DILocation(line: 48, column: 17, scope: !2988, inlinedAt: !2906)
!2993 = !DILocation(line: 49, column: 8, scope: !2988, inlinedAt: !2906)
!2994 = !DILocation(line: 49, column: 27, scope: !2988, inlinedAt: !2906)
!2995 = !DILocation(line: 49, column: 41, scope: !2988, inlinedAt: !2906)
!2996 = !DILocation(line: 50, column: 8, scope: !2988, inlinedAt: !2906)
!2997 = !DILocation(line: 50, column: 12, scope: !2988, inlinedAt: !2906)
!2998 = !DILocation(line: 50, column: 19, scope: !2988, inlinedAt: !2906)
!2999 = !DILocation(line: 50, column: 23, scope: !2988, inlinedAt: !2906)
!3000 = !DILocation(line: 50, column: 35, scope: !2988, inlinedAt: !2906)
!3001 = !DILocation(line: 51, column: 12, scope: !2988, inlinedAt: !2906)
!3002 = !DILocation(line: 52, column: 8, scope: !2929, inlinedAt: !2906)
!3003 = !DILocalVariable(name: "c", scope: !3004, file: !14, line: 53, type: !16, align: 1)
!3004 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 53, column: 4)
!3005 = !DILocation(line: 53, column: 9, scope: !3004, inlinedAt: !2906)
!3006 = !DILocation(line: 53, column: 21, scope: !3004, inlinedAt: !2906)
!3007 = !DILocation(line: 53, column: 15, scope: !3004, inlinedAt: !2906)
!3008 = !DILocation(line: 54, column: 8, scope: !3004, inlinedAt: !2906)
!3009 = !DILocation(line: 54, column: 12, scope: !3004, inlinedAt: !2906)
!3010 = !DILocation(line: 54, column: 24, scope: !3004, inlinedAt: !2906)
!3011 = !DILocation(line: 55, column: 12, scope: !3004, inlinedAt: !2906)
!3012 = !DILocation(line: 56, column: 8, scope: !2929, inlinedAt: !2906)
!3013 = !DILocalVariable(name: "s", scope: !3014, file: !14, line: 57, type: !3015, align: 2)
!3014 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 57, column: 4)
!3015 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!3016 = !DILocation(line: 57, column: 11, scope: !3014, inlinedAt: !2906)
!3017 = !DILocation(line: 57, column: 25, scope: !3014, inlinedAt: !2906)
!3018 = !DILocation(line: 57, column: 17, scope: !3014, inlinedAt: !2906)
!3019 = !DILocation(line: 58, column: 8, scope: !3014, inlinedAt: !2906)
!3020 = !DILocation(line: 58, column: 12, scope: !3014, inlinedAt: !2906)
!3021 = !DILocation(line: 58, column: 19, scope: !3014, inlinedAt: !2906)
!3022 = !DILocation(line: 58, column: 23, scope: !3014, inlinedAt: !2906)
!3023 = !DILocation(line: 58, column: 35, scope: !3014, inlinedAt: !2906)
!3024 = !DILocation(line: 59, column: 12, scope: !3014, inlinedAt: !2906)
!3025 = !DILocation(line: 60, column: 8, scope: !2929, inlinedAt: !2906)
!3026 = !DILocalVariable(name: "i", scope: !3027, file: !14, line: 61, type: !91, align: 4)
!3027 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 61, column: 4)
!3028 = !DILocation(line: 61, column: 9, scope: !3027, inlinedAt: !2906)
!3029 = !DILocation(line: 61, column: 21, scope: !3027, inlinedAt: !2906)
!3030 = !DILocation(line: 61, column: 15, scope: !3027, inlinedAt: !2906)
!3031 = !DILocation(line: 62, column: 8, scope: !3027, inlinedAt: !2906)
!3032 = !DILocation(line: 62, column: 12, scope: !3027, inlinedAt: !2906)
!3033 = !DILocation(line: 62, column: 19, scope: !3027, inlinedAt: !2906)
!3034 = !DILocation(line: 62, column: 23, scope: !3027, inlinedAt: !2906)
!3035 = !DILocation(line: 62, column: 35, scope: !3027, inlinedAt: !2906)
!3036 = !DILocation(line: 63, column: 12, scope: !3027, inlinedAt: !2906)
!3037 = !DILocation(line: 64, column: 8, scope: !2929, inlinedAt: !2906)
!3038 = !DILocalVariable(name: "l", scope: !3039, file: !14, line: 65, type: !202, align: 8)
!3039 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 65, column: 4)
!3040 = !DILocation(line: 65, column: 10, scope: !3039, inlinedAt: !2906)
!3041 = !DILocation(line: 65, column: 23, scope: !3039, inlinedAt: !2906)
!3042 = !DILocation(line: 65, column: 16, scope: !3039, inlinedAt: !2906)
!3043 = !DILocation(line: 66, column: 8, scope: !3039, inlinedAt: !2906)
!3044 = !DILocation(line: 66, column: 12, scope: !3039, inlinedAt: !2906)
!3045 = !DILocation(line: 66, column: 19, scope: !3039, inlinedAt: !2906)
!3046 = !DILocation(line: 66, column: 23, scope: !3039, inlinedAt: !2906)
!3047 = !DILocation(line: 66, column: 35, scope: !3039, inlinedAt: !2906)
!3048 = !DILocation(line: 67, column: 12, scope: !3039, inlinedAt: !2906)
!3049 = !DILocation(line: 68, column: 8, scope: !2929, inlinedAt: !2906)
!3050 = !DILocalVariable(name: "i", scope: !3051, file: !14, line: 69, type: !2702, align: 8)
!3051 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 69, column: 4)
!3052 = !DILocation(line: 69, column: 12, scope: !3051, inlinedAt: !2906)
!3053 = !DILocation(line: 69, column: 27, scope: !3051, inlinedAt: !2906)
!3054 = !DILocation(line: 69, column: 18, scope: !3051, inlinedAt: !2906)
!3055 = !DILocation(line: 70, column: 8, scope: !3051, inlinedAt: !2906)
!3056 = !DILocation(line: 70, column: 12, scope: !3051, inlinedAt: !2906)
!3057 = !DILocation(line: 70, column: 19, scope: !3051, inlinedAt: !2906)
!3058 = !DILocation(line: 70, column: 23, scope: !3051, inlinedAt: !2906)
!3059 = !DILocation(line: 70, column: 35, scope: !3051, inlinedAt: !2906)
!3060 = !DILocation(line: 71, column: 12, scope: !3051, inlinedAt: !2906)
!3061 = !DILocation(line: 164, column: 33, scope: !3062, inlinedAt: !3063)
!3062 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !208, file: !208, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!3063 = !DILocation(line: 73, column: 4, scope: !3064, inlinedAt: !2906)
!3064 = distinct !DILexicalBlock(scope: !2929, file: !2904, line: 73, column: 4)
!3065 = !DILocation(line: 164, column: 2, scope: !3062, inlinedAt: !3063)
!3066 = !DILocation(line: 166, column: 2, scope: !3062, inlinedAt: !3063)
!3067 = !DILocation(line: 614, column: 45, scope: !2882)
!3068 = !DILocation(line: 617, column: 8, scope: !3069)
!3069 = distinct !DILexicalBlock(scope: !2882, file: !14, line: 615, column: 2)
!3070 = !DILocation(line: 618, column: 14, scope: !3071)
!3071 = distinct !DILexicalBlock(scope: !3069, file: !14, line: 618, column: 4)
!3072 = !DILocation(line: 618, column: 4, scope: !3071)
!3073 = !DILocation(line: 619, column: 8, scope: !3069)
!3074 = !DILocation(line: 620, column: 27, scope: !3075)
!3075 = distinct !DILexicalBlock(scope: !3069, file: !14, line: 620, column: 4)
!3076 = !DILocation(line: 620, column: 14, scope: !3075)
!3077 = !DILocation(line: 620, column: 4, scope: !3075)
!3078 = !DILocation(line: 621, column: 28, scope: !3075)
!3079 = !DILocation(line: 621, column: 14, scope: !3075)
!3080 = !DILocation(line: 621, column: 4, scope: !3075)
!3081 = !DILocation(line: 622, column: 8, scope: !3069)
!3082 = !DILocation(line: 623, column: 27, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !3069, file: !14, line: 623, column: 4)
!3084 = !DILocation(line: 623, column: 14, scope: !3083)
!3085 = !DILocation(line: 623, column: 4, scope: !3083)
!3086 = !DILocation(line: 624, column: 28, scope: !3083)
!3087 = !DILocation(line: 624, column: 14, scope: !3083)
!3088 = !DILocation(line: 624, column: 4, scope: !3083)
!3089 = !DILocation(line: 625, column: 28, scope: !3083)
!3090 = !DILocation(line: 625, column: 14, scope: !3083)
!3091 = !DILocation(line: 625, column: 4, scope: !3083)
!3092 = !DILocation(line: 627, column: 27, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3069, file: !14, line: 627, column: 4)
!3094 = !DILocation(line: 627, column: 14, scope: !3093)
!3095 = !DILocation(line: 627, column: 4, scope: !3093)
!3096 = !DILocation(line: 628, column: 28, scope: !3093)
!3097 = !DILocation(line: 628, column: 14, scope: !3093)
!3098 = !DILocation(line: 628, column: 4, scope: !3093)
!3099 = !DILocation(line: 629, column: 28, scope: !3093)
!3100 = !DILocation(line: 629, column: 14, scope: !3093)
!3101 = !DILocation(line: 629, column: 4, scope: !3093)
!3102 = !DILocation(line: 630, column: 28, scope: !3093)
!3103 = !DILocation(line: 630, column: 14, scope: !3093)
!3104 = !DILocation(line: 630, column: 4, scope: !3093)
!3105 = !DILocation(line: 632, column: 2, scope: !2882)
!3106 = !DILocation(line: 632, column: 21, scope: !2882)
!3107 = !DILocation(line: 632, column: 9, scope: !2882)
!3108 = !DILocation(line: 633, column: 9, scope: !2882)
!3109 = distinct !DISubprogram(name: "out_reverse", linkageName: "std.io.Formatter.out_reverse", scope: !14, file: !14, line: 637, type: !1856, scopeLine: 637, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3110 = !DILocation(line: 638, column: 1, scope: !3109)
!3111 = !DILocalVariable(name: "self", arg: 1, scope: !3109, file: !14, line: 637, type: !1769)
!3112 = !DILocation(line: 637, column: 31, scope: !3109)
!3113 = !DILocalVariable(name: "buf", arg: 2, scope: !3109, file: !14, line: 637, type: !197)
!3114 = !DILocation(line: 637, column: 45, scope: !3109)
!3115 = !DILocalVariable(name: "n", scope: !3109, file: !14, line: 639, type: !201, align: 8)
!3116 = !DILocation(line: 639, column: 6, scope: !3109)
!3117 = !DILocalVariable(name: "buffer_start_idx", scope: !3109, file: !14, line: 640, type: !201, align: 8)
!3118 = !DILocation(line: 640, column: 6, scope: !3109)
!3119 = !DILocation(line: 640, column: 25, scope: !3109)
!3120 = !DILocalVariable(name: "len", scope: !3109, file: !14, line: 641, type: !201, align: 8)
!3121 = !DILocation(line: 641, column: 6, scope: !3109)
!3122 = !DILocation(line: 641, column: 12, scope: !3109)
!3123 = !DILocation(line: 643, column: 7, scope: !3109)
!3124 = !DILocation(line: 643, column: 30, scope: !3109)
!3125 = !DILocation(line: 645, column: 3, scope: !3126)
!3126 = distinct !DILexicalBlock(scope: !3109, file: !14, line: 644, column: 2)
!3127 = !DILocation(line: 645, column: 22, scope: !3126)
!3128 = !DILocation(line: 645, column: 8, scope: !3126)
!3129 = !DILocation(line: 648, column: 2, scope: !3109)
!3130 = !DILocation(line: 648, column: 9, scope: !3131)
!3131 = distinct !DILexicalBlock(scope: !3109, file: !14, line: 648, column: 2)
!3132 = !DILocation(line: 648, column: 14, scope: !3131)
!3133 = !DILocation(line: 648, column: 28, scope: !3131)
!3134 = !DILocation(line: 648, column: 34, scope: !3131)
!3135 = !DILocation(line: 648, column: 32, scope: !3131)
!3136 = !DILocation(line: 648, column: 19, scope: !3131)
!3137 = !DILocation(line: 651, column: 2, scope: !3109)
!3138 = !DILocation(line: 651, column: 7, scope: !3109)
!3139 = !DILocation(line: 652, column: 9, scope: !3109)
!3140 = distinct !DISubprogram(name: "int_from_any", linkageName: "std.io.int_from_any", scope: !14, file: !14, line: 25, type: !3141, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3141 = !DISubroutineType(types: !3142)
!3142 = !{!112, !3143, !1572, !3144}
!3143 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !2702, size: 64, align: 64, dwarfAddressSpace: 0)
!3144 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "bool*", baseType: !328, size: 64, align: 64, dwarfAddressSpace: 0)
!3145 = !DILocalVariable(name: "arg", arg: 1, scope: !3140, file: !14, line: 25, type: !1572)
!3146 = !DILocation(line: 25, column: 30, scope: !3140)
!3147 = !DILocalVariable(name: "is_neg", arg: 2, scope: !3140, file: !14, line: 25, type: !3144)
!3148 = !DILocation(line: 25, column: 41, scope: !3140)
!3149 = !DILocation(line: 27, column: 10, scope: !3150)
!3150 = distinct !DILexicalBlock(scope: !3140, file: !14, line: 27, column: 2)
!3151 = !DILocation(line: 30, column: 5, scope: !3152)
!3152 = distinct !DILexicalBlock(scope: !3150, file: !14, line: 30, column: 4)
!3153 = !DILocation(line: 30, column: 14, scope: !3152)
!3154 = !DILocation(line: 31, column: 35, scope: !3152)
!3155 = !DILocation(line: 31, column: 28, scope: !3152)
!3156 = !DILocation(line: 199, column: 20, scope: !3157, inlinedAt: !3158)
!3157 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !208, file: !208, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!3158 = !DILocation(line: 34, column: 24, scope: !3159)
!3159 = distinct !DILexicalBlock(scope: !3150, file: !14, line: 34, column: 4)
!3160 = !DILocation(line: 199, column: 30, scope: !3157, inlinedAt: !3158)
!3161 = !DILocation(line: 34, column: 11, scope: !3159)
!3162 = !DILocation(line: 36, column: 4, scope: !3163)
!3163 = distinct !DILexicalBlock(scope: !3150, file: !14, line: 36, column: 4)
!3164 = !DILocation(line: 38, column: 3, scope: !3140)
!3165 = !DILocation(line: 38, column: 12, scope: !3140)
!3166 = !DILocation(line: 39, column: 10, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3140, file: !14, line: 39, column: 2)
!3168 = !DILocation(line: 41, column: 8, scope: !3167)
!3169 = !DILocalVariable(name: "arg", scope: !3170, file: !14, line: 25, type: !3144, align: 8)
!3170 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 42, column: 4)
!3171 = !DILocation(line: 25, column: 30, scope: !3170)
!3172 = !DILocation(line: 42, column: 21, scope: !3170)
!3173 = !DILocation(line: 43, column: 8, scope: !3167)
!3174 = !DILocalVariable(name: "arg", scope: !3175, file: !14, line: 25, type: !3176, align: 8)
!3175 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 44, column: 4)
!3176 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !2932, size: 64, align: 64, dwarfAddressSpace: 0)
!3177 = !DILocation(line: 25, column: 30, scope: !3175)
!3178 = !DILocalVariable(name: "val", scope: !3175, file: !14, line: 44, type: !23, align: 4)
!3179 = !DILocation(line: 44, column: 8, scope: !3175)
!3180 = !DILocation(line: 44, column: 15, scope: !3175)
!3181 = !DILocation(line: 45, column: 13, scope: !3175)
!3182 = !DILocation(line: 45, column: 22, scope: !3175)
!3183 = !DILocation(line: 45, column: 36, scope: !3175)
!3184 = !DILocation(line: 45, column: 34, scope: !3175)
!3185 = !DILocation(line: 45, column: 56, scope: !3175)
!3186 = !DILocation(line: 46, column: 8, scope: !3167)
!3187 = !DILocalVariable(name: "arg", scope: !3188, file: !14, line: 25, type: !3189, align: 8)
!3188 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 47, column: 4)
!3189 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !2943, size: 64, align: 64, dwarfAddressSpace: 0)
!3190 = !DILocation(line: 25, column: 30, scope: !3188)
!3191 = !DILocalVariable(name: "val", scope: !3188, file: !14, line: 47, type: !23, align: 4)
!3192 = !DILocation(line: 47, column: 8, scope: !3188)
!3193 = !DILocation(line: 47, column: 15, scope: !3188)
!3194 = !DILocation(line: 48, column: 13, scope: !3188)
!3195 = !DILocation(line: 48, column: 22, scope: !3188)
!3196 = !DILocation(line: 48, column: 36, scope: !3188)
!3197 = !DILocation(line: 48, column: 34, scope: !3188)
!3198 = !DILocation(line: 48, column: 56, scope: !3188)
!3199 = !DILocation(line: 49, column: 8, scope: !3167)
!3200 = !DILocalVariable(name: "arg", scope: !3201, file: !14, line: 25, type: !3202, align: 8)
!3201 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 50, column: 4)
!3202 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !23, size: 64, align: 64, dwarfAddressSpace: 0)
!3203 = !DILocation(line: 25, column: 30, scope: !3201)
!3204 = !DILocalVariable(name: "val", scope: !3201, file: !14, line: 50, type: !23, align: 4)
!3205 = !DILocation(line: 50, column: 8, scope: !3201)
!3206 = !DILocation(line: 50, column: 15, scope: !3201)
!3207 = !DILocation(line: 51, column: 13, scope: !3201)
!3208 = !DILocation(line: 51, column: 22, scope: !3201)
!3209 = !DILocation(line: 51, column: 36, scope: !3201)
!3210 = !DILocation(line: 51, column: 34, scope: !3201)
!3211 = !DILocation(line: 51, column: 56, scope: !3201)
!3212 = !DILocation(line: 52, column: 8, scope: !3167)
!3213 = !DILocalVariable(name: "arg", scope: !3214, file: !14, line: 25, type: !3215, align: 8)
!3214 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 53, column: 4)
!3215 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !113, size: 64, align: 64, dwarfAddressSpace: 0)
!3216 = !DILocation(line: 25, column: 30, scope: !3214)
!3217 = !DILocalVariable(name: "val", scope: !3214, file: !14, line: 53, type: !113, align: 8)
!3218 = !DILocation(line: 53, column: 9, scope: !3214)
!3219 = !DILocation(line: 53, column: 16, scope: !3214)
!3220 = !DILocation(line: 54, column: 13, scope: !3214)
!3221 = !DILocation(line: 54, column: 22, scope: !3214)
!3222 = !DILocation(line: 54, column: 36, scope: !3214)
!3223 = !DILocation(line: 54, column: 34, scope: !3214)
!3224 = !DILocation(line: 54, column: 56, scope: !3214)
!3225 = !DILocation(line: 55, column: 8, scope: !3167)
!3226 = !DILocalVariable(name: "arg", scope: !3227, file: !14, line: 25, type: !3228, align: 8)
!3227 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 56, column: 4)
!3228 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !2989, size: 64, align: 64, dwarfAddressSpace: 0)
!3229 = !DILocation(line: 25, column: 30, scope: !3227)
!3230 = !DILocalVariable(name: "val", scope: !3227, file: !14, line: 56, type: !2989, align: 8)
!3231 = !DILocation(line: 56, column: 11, scope: !3227)
!3232 = !DILocation(line: 56, column: 18, scope: !3227)
!3233 = !DILocation(line: 57, column: 13, scope: !3227)
!3234 = !DILocation(line: 57, column: 22, scope: !3227)
!3235 = !DILocation(line: 57, column: 36, scope: !3227)
!3236 = !DILocation(line: 57, column: 34, scope: !3227)
!3237 = !DILocation(line: 57, column: 56, scope: !3227)
!3238 = !DILocation(line: 58, column: 8, scope: !3167)
!3239 = !DILocalVariable(name: "arg", scope: !3240, file: !14, line: 25, type: !114, align: 8)
!3240 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 59, column: 4)
!3241 = !DILocation(line: 25, column: 30, scope: !3240)
!3242 = !DILocation(line: 59, column: 12, scope: !3240)
!3243 = !DILocation(line: 60, column: 8, scope: !3167)
!3244 = !DILocalVariable(name: "arg", scope: !3245, file: !14, line: 25, type: !3246, align: 8)
!3245 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 61, column: 4)
!3246 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !3015, size: 64, align: 64, dwarfAddressSpace: 0)
!3247 = !DILocation(line: 25, column: 30, scope: !3245)
!3248 = !DILocation(line: 61, column: 12, scope: !3245)
!3249 = !DILocation(line: 62, column: 8, scope: !3167)
!3250 = !DILocalVariable(name: "arg", scope: !3251, file: !14, line: 25, type: !2148, align: 8)
!3251 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 63, column: 4)
!3252 = !DILocation(line: 25, column: 30, scope: !3251)
!3253 = !DILocation(line: 63, column: 12, scope: !3251)
!3254 = !DILocation(line: 64, column: 8, scope: !3167)
!3255 = !DILocalVariable(name: "arg", scope: !3256, file: !14, line: 25, type: !3257, align: 8)
!3256 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 65, column: 4)
!3257 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !202, size: 64, align: 64, dwarfAddressSpace: 0)
!3258 = !DILocation(line: 25, column: 30, scope: !3256)
!3259 = !DILocation(line: 65, column: 12, scope: !3256)
!3260 = !DILocation(line: 66, column: 8, scope: !3167)
!3261 = !DILocalVariable(name: "arg", scope: !3262, file: !14, line: 25, type: !3143, align: 8)
!3262 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 67, column: 4)
!3263 = !DILocation(line: 25, column: 30, scope: !3262)
!3264 = !DILocation(line: 67, column: 12, scope: !3262)
!3265 = !DILocation(line: 68, column: 8, scope: !3167)
!3266 = !DILocalVariable(name: "arg", scope: !3267, file: !14, line: 25, type: !3268, align: 8)
!3267 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 69, column: 4)
!3268 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !3269, size: 64, align: 64, dwarfAddressSpace: 0)
!3269 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!3270 = !DILocation(line: 25, column: 30, scope: !3267)
!3271 = !DILocalVariable(name: "f", scope: !3267, file: !14, line: 69, type: !3269, align: 4)
!3272 = !DILocation(line: 69, column: 10, scope: !3267)
!3273 = !DILocation(line: 69, column: 15, scope: !3267)
!3274 = !DILocation(line: 70, column: 23, scope: !3267)
!3275 = !DILocation(line: 70, column: 32, scope: !3267)
!3276 = !DILocation(line: 70, column: 42, scope: !3267)
!3277 = !DILocation(line: 70, column: 46, scope: !3267)
!3278 = !DILocation(line: 71, column: 8, scope: !3167)
!3279 = !DILocalVariable(name: "arg", scope: !3280, file: !14, line: 25, type: !3281, align: 8)
!3280 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 72, column: 4)
!3281 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !1875, size: 64, align: 64, dwarfAddressSpace: 0)
!3282 = !DILocation(line: 25, column: 30, scope: !3280)
!3283 = !DILocalVariable(name: "d", scope: !3280, file: !14, line: 72, type: !1875, align: 8)
!3284 = !DILocation(line: 72, column: 11, scope: !3280)
!3285 = !DILocation(line: 72, column: 16, scope: !3280)
!3286 = !DILocation(line: 73, column: 23, scope: !3280)
!3287 = !DILocation(line: 73, column: 32, scope: !3280)
!3288 = !DILocation(line: 73, column: 42, scope: !3280)
!3289 = !DILocation(line: 73, column: 46, scope: !3280)
!3290 = !DILocation(line: 75, column: 11, scope: !3291)
!3291 = distinct !DILexicalBlock(scope: !3167, file: !14, line: 75, column: 4)
!3292 = distinct !DISubprogram(name: "float_from_any", linkageName: "std.io.float_from_any", scope: !14, file: !14, line: 79, type: !3293, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3293 = !DISubroutineType(types: !3294)
!3294 = !{!112, !3295, !1572}
!3295 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "FloatType*", baseType: !3296, size: 64, align: 64, dwarfAddressSpace: 0)
!3296 = !DIDerivedType(tag: DW_TAG_typedef, name: "FloatType", scope: !14, file: !14, line: 24, baseType: !1875, align: 8)
!3297 = !DILocalVariable(name: "arg", arg: 1, scope: !3292, file: !14, line: 79, type: !1572)
!3298 = !DILocation(line: 79, column: 34, scope: !3292)
!3299 = !DILocation(line: 84, column: 6, scope: !3292)
!3300 = !DILocation(line: 199, column: 20, scope: !3301, inlinedAt: !3302)
!3301 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !208, file: !208, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!3302 = !DILocation(line: 86, column: 25, scope: !3303)
!3303 = distinct !DILexicalBlock(scope: !3292, file: !14, line: 85, column: 2)
!3304 = !DILocation(line: 199, column: 30, scope: !3301, inlinedAt: !3302)
!3305 = !DILocation(line: 86, column: 10, scope: !3303)
!3306 = !DILocation(line: 88, column: 10, scope: !3307)
!3307 = distinct !DILexicalBlock(scope: !3292, file: !14, line: 88, column: 2)
!3308 = !DILocation(line: 90, column: 8, scope: !3307)
!3309 = !DILocalVariable(name: "arg", scope: !3310, file: !14, line: 79, type: !3144, align: 8)
!3310 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 91, column: 4)
!3311 = !DILocation(line: 79, column: 34, scope: !3310)
!3312 = !DILocation(line: 91, column: 23, scope: !3310)
!3313 = !DILocation(line: 92, column: 8, scope: !3307)
!3314 = !DILocalVariable(name: "arg", scope: !3315, file: !14, line: 79, type: !3176, align: 8)
!3315 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 93, column: 4)
!3316 = !DILocation(line: 79, column: 34, scope: !3315)
!3317 = !DILocation(line: 93, column: 12, scope: !3315)
!3318 = !DILocation(line: 94, column: 8, scope: !3307)
!3319 = !DILocalVariable(name: "arg", scope: !3320, file: !14, line: 79, type: !3189, align: 8)
!3320 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 95, column: 4)
!3321 = !DILocation(line: 79, column: 34, scope: !3320)
!3322 = !DILocation(line: 95, column: 12, scope: !3320)
!3323 = !DILocation(line: 96, column: 8, scope: !3307)
!3324 = !DILocalVariable(name: "arg", scope: !3325, file: !14, line: 79, type: !3202, align: 8)
!3325 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 97, column: 4)
!3326 = !DILocation(line: 79, column: 34, scope: !3325)
!3327 = !DILocation(line: 97, column: 12, scope: !3325)
!3328 = !DILocation(line: 98, column: 8, scope: !3307)
!3329 = !DILocalVariable(name: "arg", scope: !3330, file: !14, line: 79, type: !3215, align: 8)
!3330 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 99, column: 4)
!3331 = !DILocation(line: 79, column: 34, scope: !3330)
!3332 = !DILocation(line: 99, column: 12, scope: !3330)
!3333 = !DILocation(line: 100, column: 8, scope: !3307)
!3334 = !DILocalVariable(name: "arg", scope: !3335, file: !14, line: 79, type: !3228, align: 8)
!3335 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 101, column: 4)
!3336 = !DILocation(line: 79, column: 34, scope: !3335)
!3337 = !DILocation(line: 101, column: 12, scope: !3335)
!3338 = !DILocation(line: 102, column: 8, scope: !3307)
!3339 = !DILocalVariable(name: "arg", scope: !3340, file: !14, line: 79, type: !114, align: 8)
!3340 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 103, column: 4)
!3341 = !DILocation(line: 79, column: 34, scope: !3340)
!3342 = !DILocation(line: 103, column: 12, scope: !3340)
!3343 = !DILocation(line: 104, column: 8, scope: !3307)
!3344 = !DILocalVariable(name: "arg", scope: !3345, file: !14, line: 79, type: !3246, align: 8)
!3345 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 105, column: 4)
!3346 = !DILocation(line: 79, column: 34, scope: !3345)
!3347 = !DILocation(line: 105, column: 12, scope: !3345)
!3348 = !DILocation(line: 106, column: 8, scope: !3307)
!3349 = !DILocalVariable(name: "arg", scope: !3350, file: !14, line: 79, type: !2148, align: 8)
!3350 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 107, column: 4)
!3351 = !DILocation(line: 79, column: 34, scope: !3350)
!3352 = !DILocation(line: 107, column: 12, scope: !3350)
!3353 = !DILocation(line: 108, column: 8, scope: !3307)
!3354 = !DILocalVariable(name: "arg", scope: !3355, file: !14, line: 79, type: !3257, align: 8)
!3355 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 109, column: 4)
!3356 = !DILocation(line: 79, column: 34, scope: !3355)
!3357 = !DILocation(line: 109, column: 12, scope: !3355)
!3358 = !DILocation(line: 110, column: 8, scope: !3307)
!3359 = !DILocalVariable(name: "arg", scope: !3360, file: !14, line: 79, type: !3143, align: 8)
!3360 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 111, column: 4)
!3361 = !DILocation(line: 79, column: 34, scope: !3360)
!3362 = !DILocation(line: 111, column: 12, scope: !3360)
!3363 = !DILocation(line: 112, column: 8, scope: !3307)
!3364 = !DILocalVariable(name: "arg", scope: !3365, file: !14, line: 79, type: !3268, align: 8)
!3365 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 113, column: 4)
!3366 = !DILocation(line: 79, column: 34, scope: !3365)
!3367 = !DILocation(line: 113, column: 23, scope: !3365)
!3368 = !DILocation(line: 114, column: 8, scope: !3307)
!3369 = !DILocalVariable(name: "arg", scope: !3370, file: !14, line: 79, type: !3281, align: 8)
!3370 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 115, column: 4)
!3371 = !DILocation(line: 79, column: 34, scope: !3370)
!3372 = !DILocation(line: 115, column: 23, scope: !3370)
!3373 = !DILocation(line: 117, column: 11, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !3307, file: !14, line: 117, column: 4)
!3375 = distinct !DISubprogram(name: "simple_atoi", linkageName: "std.io.simple_atoi", scope: !14, file: !14, line: 130, type: !3376, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3376 = !DISubroutineType(types: !3377)
!3377 = !{!91, !114, !202, !3257}
!3378 = !DILocalVariable(name: "buf", arg: 1, scope: !3375, file: !14, line: 130, type: !114)
!3379 = !DILocation(line: 130, column: 27, scope: !3375)
!3380 = !DILocalVariable(name: "maxlen", arg: 2, scope: !3375, file: !14, line: 130, type: !201)
!3381 = !DILocation(line: 130, column: 36, scope: !3375)
!3382 = !DILocalVariable(name: "len_ptr", arg: 3, scope: !3375, file: !14, line: 130, type: !407)
!3383 = !DILocation(line: 130, column: 49, scope: !3375)
!3384 = !DILocalVariable(name: "i", scope: !3375, file: !14, line: 132, type: !91, align: 4)
!3385 = !DILocation(line: 132, column: 7, scope: !3375)
!3386 = !DILocation(line: 132, column: 11, scope: !3375)
!3387 = !DILocalVariable(name: "len", scope: !3375, file: !14, line: 133, type: !201, align: 8)
!3388 = !DILocation(line: 133, column: 6, scope: !3375)
!3389 = !DILocation(line: 133, column: 13, scope: !3375)
!3390 = !DILocation(line: 134, column: 2, scope: !3375)
!3391 = !DILocation(line: 134, column: 9, scope: !3392)
!3392 = distinct !DILexicalBlock(scope: !3375, file: !14, line: 134, column: 2)
!3393 = !DILocation(line: 134, column: 15, scope: !3392)
!3394 = !DILocalVariable(name: "c", scope: !3395, file: !14, line: 136, type: !16, align: 1)
!3395 = distinct !DILexicalBlock(scope: !3392, file: !14, line: 135, column: 2)
!3396 = !DILocation(line: 136, column: 8, scope: !3395)
!3397 = !DILocation(line: 136, column: 12, scope: !3395)
!3398 = !DILocation(line: 136, column: 16, scope: !3395)
!3399 = !DILocation(line: 137, column: 8, scope: !3395)
!3400 = !DILocation(line: 137, column: 22, scope: !3395)
!3401 = !DILocation(line: 138, column: 7, scope: !3395)
!3402 = !DILocation(line: 138, column: 16, scope: !3395)
!3403 = !DILocation(line: 139, column: 3, scope: !3395)
!3404 = !DILocation(line: 141, column: 3, scope: !3375)
!3405 = !DILocation(line: 141, column: 13, scope: !3375)
!3406 = !DILocation(line: 142, column: 9, scope: !3375)
!3407 = distinct !DISubprogram(name: "fmt_u", linkageName: "std.io.fmt_u", scope: !14, file: !14, line: 171, type: !3408, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3408 = !DISubroutineType(types: !3409)
!3409 = !{!114, !2702, !114}
!3410 = !DILocalVariable(name: "x", arg: 1, scope: !3407, file: !14, line: 171, type: !2702)
!3411 = !DILocation(line: 171, column: 24, scope: !3407)
!3412 = !DILocalVariable(name: "s", arg: 2, scope: !3407, file: !14, line: 171, type: !114)
!3413 = !DILocation(line: 171, column: 33, scope: !3407)
!3414 = !DILocation(line: 173, column: 2, scope: !3407)
!3415 = !DILocation(line: 173, column: 9, scope: !3416)
!3416 = distinct !DILexicalBlock(scope: !3407, file: !14, line: 173, column: 2)
!3417 = !DILocation(line: 173, column: 36, scope: !3416)
!3418 = !DILocation(line: 173, column: 53, scope: !3416)
!3419 = !DILocation(line: 173, column: 47, scope: !3416)
!3420 = !DILocation(line: 173, column: 40, scope: !3416)
!3421 = !DILocation(line: 173, column: 24, scope: !3416)
!3422 = !DILocalVariable(name: "y", scope: !3423, file: !14, line: 174, type: !202, align: 8)
!3423 = distinct !DILexicalBlock(scope: !3407, file: !14, line: 174, column: 2)
!3424 = !DILocation(line: 174, column: 13, scope: !3423)
!3425 = !DILocation(line: 174, column: 18, scope: !3423)
!3426 = !DILocation(line: 174, column: 27, scope: !3423)
!3427 = !DILocation(line: 174, column: 42, scope: !3423)
!3428 = !DILocation(line: 174, column: 59, scope: !3423)
!3429 = !DILocation(line: 174, column: 53, scope: !3423)
!3430 = !DILocation(line: 174, column: 46, scope: !3423)
!3431 = !DILocation(line: 174, column: 30, scope: !3423)
!3432 = !DILocation(line: 175, column: 9, scope: !3407)
!3433 = !DILocation(line: 173, column: 34, scope: !3416)
!3434 = !DILocation(line: 174, column: 40, scope: !3423)
!3435 = distinct !DISubprogram(name: "printf_parse_format_field", linkageName: "std.io.printf_parse_format_field", scope: !14, file: !14, line: 656, type: !3436, scopeLine: 656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3436 = !DISubroutineType(types: !3437)
!3437 = !{!112, !3202, !1571, !202, !3257, !114, !202, !3257}
!3438 = !DILocalVariable(name: "args_ptr", arg: 1, scope: !3435, file: !14, line: 657, type: !1571)
!3439 = !DILocation(line: 657, column: 7, scope: !3435)
!3440 = !DILocalVariable(name: "args_len", arg: 2, scope: !3435, file: !14, line: 657, type: !201)
!3441 = !DILocation(line: 657, column: 21, scope: !3435)
!3442 = !DILocalVariable(name: "args_index_ptr", arg: 3, scope: !3435, file: !14, line: 657, type: !407)
!3443 = !DILocation(line: 657, column: 36, scope: !3435)
!3444 = !DILocalVariable(name: "format_ptr", arg: 4, scope: !3435, file: !14, line: 658, type: !114)
!3445 = !DILocation(line: 658, column: 8, scope: !3435)
!3446 = !DILocalVariable(name: "format_len", arg: 5, scope: !3435, file: !14, line: 658, type: !201)
!3447 = !DILocation(line: 658, column: 24, scope: !3435)
!3448 = !DILocalVariable(name: "index_ptr", arg: 6, scope: !3435, file: !14, line: 658, type: !407)
!3449 = !DILocation(line: 658, column: 41, scope: !3435)
!3450 = !DILocalVariable(name: "c", scope: !3435, file: !14, line: 660, type: !16, align: 1)
!3451 = !DILocation(line: 660, column: 7, scope: !3435)
!3452 = !DILocation(line: 660, column: 11, scope: !3435)
!3453 = !DILocation(line: 660, column: 23, scope: !3435)
!3454 = !DILocation(line: 661, column: 6, scope: !3435)
!3455 = !DILocation(line: 661, column: 63, scope: !3435)
!3456 = !DILocation(line: 661, column: 27, scope: !3435)
!3457 = !DILocation(line: 662, column: 6, scope: !3435)
!3458 = !DILocation(line: 662, column: 23, scope: !3435)
!3459 = !DILocalVariable(name: "len", scope: !3435, file: !14, line: 663, type: !201, align: 8)
!3460 = !DILocation(line: 663, column: 6, scope: !3435)
!3461 = !DILocation(line: 663, column: 16, scope: !3435)
!3462 = !DILocation(line: 663, column: 15, scope: !3435)
!3463 = !DILocation(line: 664, column: 6, scope: !3435)
!3464 = !DILocation(line: 664, column: 13, scope: !3435)
!3465 = !DILocation(line: 664, column: 32, scope: !3435)
!3466 = !DILocation(line: 665, column: 7, scope: !3435)
!3467 = !DILocation(line: 665, column: 25, scope: !3435)
!3468 = !DILocation(line: 665, column: 6, scope: !3435)
!3469 = !DILocation(line: 665, column: 42, scope: !3435)
!3470 = !DILocalVariable(name: "val", scope: !3435, file: !14, line: 666, type: !1572, align: 8)
!3471 = !DILocation(line: 666, column: 6, scope: !3435)
!3472 = !DILocation(line: 666, column: 12, scope: !3435)
!3473 = !DILocation(line: 666, column: 23, scope: !3435)
!3474 = !DILocation(line: 666, column: 22, scope: !3435)
!3475 = !DILocation(line: 667, column: 7, scope: !3435)
!3476 = !DILocation(line: 667, column: 40, scope: !3435)
!3477 = !DILocalVariable(name: "intval", scope: !3435, file: !14, line: 668, type: !91, align: 4)
!3478 = !DILocation(line: 668, column: 8, scope: !3435)
!3479 = !DILocation(line: 12, column: 11, scope: !3480, inlinedAt: !3482)
!3480 = distinct !DILexicalBlock(scope: !3481, file: !2904, line: 15, column: 1)
!3481 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !2904, file: !2904, line: 14, scopeLine: 14, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3482 = !DILocation(line: 668, column: 24, scope: !3435)
!3483 = !DILocation(line: 12, column: 36, scope: !3480, inlinedAt: !3482)
!3484 = !DILocalVariable(name: "any_type", scope: !3481, file: !14, line: 16, type: !89, align: 8)
!3485 = !DILocation(line: 16, column: 9, scope: !3481, inlinedAt: !3482)
!3486 = !DILocation(line: 16, column: 20, scope: !3481, inlinedAt: !3482)
!3487 = !DILocalVariable(name: "kind", scope: !3481, file: !14, line: 17, type: !54, align: 1)
!3488 = !DILocation(line: 17, column: 11, scope: !3481, inlinedAt: !3482)
!3489 = !DILocation(line: 17, column: 18, scope: !3481, inlinedAt: !3482)
!3490 = !DILocation(line: 18, column: 6, scope: !3481, inlinedAt: !3482)
!3491 = !DILocation(line: 20, column: 14, scope: !3492, inlinedAt: !3482)
!3492 = distinct !DILexicalBlock(scope: !3481, file: !2904, line: 19, column: 2)
!3493 = !DILocation(line: 21, column: 10, scope: !3492, inlinedAt: !3482)
!3494 = !DILocalVariable(name: "is_mixed_signed", scope: !3481, file: !14, line: 23, type: !328, align: 1)
!3495 = !DILocation(line: 23, column: 7, scope: !3481, inlinedAt: !3482)
!3496 = !DILocation(line: 23, column: 41, scope: !3481, inlinedAt: !3482)
!3497 = !DILocation(line: 23, column: 25, scope: !3481, inlinedAt: !3482)
!3498 = !DILocalVariable(name: "max", scope: !3481, file: !14, line: 24, type: !23, align: 4)
!3499 = !DILocation(line: 24, column: 8, scope: !3481, inlinedAt: !3482)
!3500 = !DILocation(line: 24, column: 14, scope: !3481, inlinedAt: !3482)
!3501 = !DILocalVariable(name: "min", scope: !3481, file: !14, line: 25, type: !23, align: 4)
!3502 = !DILocation(line: 25, column: 8, scope: !3481, inlinedAt: !3482)
!3503 = !DILocation(line: 25, column: 14, scope: !3481, inlinedAt: !3482)
!3504 = !DILocation(line: 28, column: 8, scope: !3505, inlinedAt: !3482)
!3505 = distinct !DILexicalBlock(scope: !3481, file: !2904, line: 26, column: 2)
!3506 = !DILocalVariable(name: "c", scope: !3507, file: !14, line: 29, type: !2932, align: 1)
!3507 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 29, column: 4)
!3508 = !DILocation(line: 29, column: 10, scope: !3507, inlinedAt: !3482)
!3509 = !DILocation(line: 29, column: 22, scope: !3507, inlinedAt: !3482)
!3510 = !DILocation(line: 29, column: 16, scope: !3507, inlinedAt: !3482)
!3511 = !DILocation(line: 30, column: 8, scope: !3507, inlinedAt: !3482)
!3512 = !DILocation(line: 30, column: 27, scope: !3507, inlinedAt: !3482)
!3513 = !DILocation(line: 30, column: 41, scope: !3507, inlinedAt: !3482)
!3514 = !DILocation(line: 31, column: 12, scope: !3507, inlinedAt: !3482)
!3515 = !DILocation(line: 32, column: 8, scope: !3505, inlinedAt: !3482)
!3516 = !DILocalVariable(name: "s", scope: !3517, file: !14, line: 33, type: !2943, align: 2)
!3517 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 33, column: 4)
!3518 = !DILocation(line: 33, column: 10, scope: !3517, inlinedAt: !3482)
!3519 = !DILocation(line: 33, column: 23, scope: !3517, inlinedAt: !3482)
!3520 = !DILocation(line: 33, column: 16, scope: !3517, inlinedAt: !3482)
!3521 = !DILocation(line: 34, column: 8, scope: !3517, inlinedAt: !3482)
!3522 = !DILocation(line: 34, column: 27, scope: !3517, inlinedAt: !3482)
!3523 = !DILocation(line: 34, column: 41, scope: !3517, inlinedAt: !3482)
!3524 = !DILocation(line: 35, column: 8, scope: !3517, inlinedAt: !3482)
!3525 = !DILocation(line: 35, column: 12, scope: !3517, inlinedAt: !3482)
!3526 = !DILocation(line: 35, column: 19, scope: !3517, inlinedAt: !3482)
!3527 = !DILocation(line: 35, column: 23, scope: !3517, inlinedAt: !3482)
!3528 = !DILocation(line: 35, column: 35, scope: !3517, inlinedAt: !3482)
!3529 = !DILocation(line: 36, column: 12, scope: !3517, inlinedAt: !3482)
!3530 = !DILocation(line: 37, column: 8, scope: !3505, inlinedAt: !3482)
!3531 = !DILocalVariable(name: "i", scope: !3532, file: !14, line: 38, type: !23, align: 4)
!3532 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 38, column: 4)
!3533 = !DILocation(line: 38, column: 8, scope: !3532, inlinedAt: !3482)
!3534 = !DILocation(line: 38, column: 19, scope: !3532, inlinedAt: !3482)
!3535 = !DILocation(line: 38, column: 14, scope: !3532, inlinedAt: !3482)
!3536 = !DILocation(line: 39, column: 8, scope: !3532, inlinedAt: !3482)
!3537 = !DILocation(line: 39, column: 27, scope: !3532, inlinedAt: !3482)
!3538 = !DILocation(line: 39, column: 41, scope: !3532, inlinedAt: !3482)
!3539 = !DILocation(line: 40, column: 8, scope: !3532, inlinedAt: !3482)
!3540 = !DILocation(line: 40, column: 12, scope: !3532, inlinedAt: !3482)
!3541 = !DILocation(line: 40, column: 19, scope: !3532, inlinedAt: !3482)
!3542 = !DILocation(line: 40, column: 23, scope: !3532, inlinedAt: !3482)
!3543 = !DILocation(line: 40, column: 35, scope: !3532, inlinedAt: !3482)
!3544 = !DILocation(line: 41, column: 12, scope: !3532, inlinedAt: !3482)
!3545 = !DILocation(line: 42, column: 8, scope: !3505, inlinedAt: !3482)
!3546 = !DILocalVariable(name: "l", scope: !3547, file: !14, line: 43, type: !113, align: 8)
!3547 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 43, column: 4)
!3548 = !DILocation(line: 43, column: 9, scope: !3547, inlinedAt: !3482)
!3549 = !DILocation(line: 43, column: 21, scope: !3547, inlinedAt: !3482)
!3550 = !DILocation(line: 43, column: 15, scope: !3547, inlinedAt: !3482)
!3551 = !DILocation(line: 44, column: 8, scope: !3547, inlinedAt: !3482)
!3552 = !DILocation(line: 44, column: 27, scope: !3547, inlinedAt: !3482)
!3553 = !DILocation(line: 44, column: 41, scope: !3547, inlinedAt: !3482)
!3554 = !DILocation(line: 45, column: 8, scope: !3547, inlinedAt: !3482)
!3555 = !DILocation(line: 45, column: 12, scope: !3547, inlinedAt: !3482)
!3556 = !DILocation(line: 45, column: 19, scope: !3547, inlinedAt: !3482)
!3557 = !DILocation(line: 45, column: 23, scope: !3547, inlinedAt: !3482)
!3558 = !DILocation(line: 45, column: 35, scope: !3547, inlinedAt: !3482)
!3559 = !DILocation(line: 46, column: 12, scope: !3547, inlinedAt: !3482)
!3560 = !DILocation(line: 47, column: 8, scope: !3505, inlinedAt: !3482)
!3561 = !DILocalVariable(name: "i", scope: !3562, file: !14, line: 48, type: !2989, align: 8)
!3562 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 48, column: 4)
!3563 = !DILocation(line: 48, column: 11, scope: !3562, inlinedAt: !3482)
!3564 = !DILocation(line: 48, column: 25, scope: !3562, inlinedAt: !3482)
!3565 = !DILocation(line: 48, column: 17, scope: !3562, inlinedAt: !3482)
!3566 = !DILocation(line: 49, column: 8, scope: !3562, inlinedAt: !3482)
!3567 = !DILocation(line: 49, column: 27, scope: !3562, inlinedAt: !3482)
!3568 = !DILocation(line: 49, column: 41, scope: !3562, inlinedAt: !3482)
!3569 = !DILocation(line: 50, column: 8, scope: !3562, inlinedAt: !3482)
!3570 = !DILocation(line: 50, column: 12, scope: !3562, inlinedAt: !3482)
!3571 = !DILocation(line: 50, column: 19, scope: !3562, inlinedAt: !3482)
!3572 = !DILocation(line: 50, column: 23, scope: !3562, inlinedAt: !3482)
!3573 = !DILocation(line: 50, column: 35, scope: !3562, inlinedAt: !3482)
!3574 = !DILocation(line: 51, column: 12, scope: !3562, inlinedAt: !3482)
!3575 = !DILocation(line: 52, column: 8, scope: !3505, inlinedAt: !3482)
!3576 = !DILocalVariable(name: "c", scope: !3577, file: !14, line: 53, type: !16, align: 1)
!3577 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 53, column: 4)
!3578 = !DILocation(line: 53, column: 9, scope: !3577, inlinedAt: !3482)
!3579 = !DILocation(line: 53, column: 21, scope: !3577, inlinedAt: !3482)
!3580 = !DILocation(line: 53, column: 15, scope: !3577, inlinedAt: !3482)
!3581 = !DILocation(line: 54, column: 8, scope: !3577, inlinedAt: !3482)
!3582 = !DILocation(line: 54, column: 12, scope: !3577, inlinedAt: !3482)
!3583 = !DILocation(line: 54, column: 24, scope: !3577, inlinedAt: !3482)
!3584 = !DILocation(line: 55, column: 12, scope: !3577, inlinedAt: !3482)
!3585 = !DILocation(line: 56, column: 8, scope: !3505, inlinedAt: !3482)
!3586 = !DILocalVariable(name: "s", scope: !3587, file: !14, line: 57, type: !3015, align: 2)
!3587 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 57, column: 4)
!3588 = !DILocation(line: 57, column: 11, scope: !3587, inlinedAt: !3482)
!3589 = !DILocation(line: 57, column: 25, scope: !3587, inlinedAt: !3482)
!3590 = !DILocation(line: 57, column: 17, scope: !3587, inlinedAt: !3482)
!3591 = !DILocation(line: 58, column: 8, scope: !3587, inlinedAt: !3482)
!3592 = !DILocation(line: 58, column: 12, scope: !3587, inlinedAt: !3482)
!3593 = !DILocation(line: 58, column: 19, scope: !3587, inlinedAt: !3482)
!3594 = !DILocation(line: 58, column: 23, scope: !3587, inlinedAt: !3482)
!3595 = !DILocation(line: 58, column: 35, scope: !3587, inlinedAt: !3482)
!3596 = !DILocation(line: 59, column: 12, scope: !3587, inlinedAt: !3482)
!3597 = !DILocation(line: 60, column: 8, scope: !3505, inlinedAt: !3482)
!3598 = !DILocalVariable(name: "i", scope: !3599, file: !14, line: 61, type: !91, align: 4)
!3599 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 61, column: 4)
!3600 = !DILocation(line: 61, column: 9, scope: !3599, inlinedAt: !3482)
!3601 = !DILocation(line: 61, column: 21, scope: !3599, inlinedAt: !3482)
!3602 = !DILocation(line: 61, column: 15, scope: !3599, inlinedAt: !3482)
!3603 = !DILocation(line: 62, column: 8, scope: !3599, inlinedAt: !3482)
!3604 = !DILocation(line: 62, column: 12, scope: !3599, inlinedAt: !3482)
!3605 = !DILocation(line: 62, column: 19, scope: !3599, inlinedAt: !3482)
!3606 = !DILocation(line: 62, column: 23, scope: !3599, inlinedAt: !3482)
!3607 = !DILocation(line: 62, column: 35, scope: !3599, inlinedAt: !3482)
!3608 = !DILocation(line: 63, column: 12, scope: !3599, inlinedAt: !3482)
!3609 = !DILocation(line: 64, column: 8, scope: !3505, inlinedAt: !3482)
!3610 = !DILocalVariable(name: "l", scope: !3611, file: !14, line: 65, type: !202, align: 8)
!3611 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 65, column: 4)
!3612 = !DILocation(line: 65, column: 10, scope: !3611, inlinedAt: !3482)
!3613 = !DILocation(line: 65, column: 23, scope: !3611, inlinedAt: !3482)
!3614 = !DILocation(line: 65, column: 16, scope: !3611, inlinedAt: !3482)
!3615 = !DILocation(line: 66, column: 8, scope: !3611, inlinedAt: !3482)
!3616 = !DILocation(line: 66, column: 12, scope: !3611, inlinedAt: !3482)
!3617 = !DILocation(line: 66, column: 19, scope: !3611, inlinedAt: !3482)
!3618 = !DILocation(line: 66, column: 23, scope: !3611, inlinedAt: !3482)
!3619 = !DILocation(line: 66, column: 35, scope: !3611, inlinedAt: !3482)
!3620 = !DILocation(line: 67, column: 12, scope: !3611, inlinedAt: !3482)
!3621 = !DILocation(line: 68, column: 8, scope: !3505, inlinedAt: !3482)
!3622 = !DILocalVariable(name: "i", scope: !3623, file: !14, line: 69, type: !2702, align: 8)
!3623 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 69, column: 4)
!3624 = !DILocation(line: 69, column: 12, scope: !3623, inlinedAt: !3482)
!3625 = !DILocation(line: 69, column: 27, scope: !3623, inlinedAt: !3482)
!3626 = !DILocation(line: 69, column: 18, scope: !3623, inlinedAt: !3482)
!3627 = !DILocation(line: 70, column: 8, scope: !3623, inlinedAt: !3482)
!3628 = !DILocation(line: 70, column: 12, scope: !3623, inlinedAt: !3482)
!3629 = !DILocation(line: 70, column: 19, scope: !3623, inlinedAt: !3482)
!3630 = !DILocation(line: 70, column: 23, scope: !3623, inlinedAt: !3482)
!3631 = !DILocation(line: 70, column: 35, scope: !3623, inlinedAt: !3482)
!3632 = !DILocation(line: 71, column: 12, scope: !3623, inlinedAt: !3482)
!3633 = !DILocation(line: 164, column: 33, scope: !3634, inlinedAt: !3635)
!3634 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !208, file: !208, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!3635 = !DILocation(line: 73, column: 4, scope: !3636, inlinedAt: !3482)
!3636 = distinct !DILexicalBlock(scope: !3505, file: !2904, line: 73, column: 4)
!3637 = !DILocation(line: 164, column: 2, scope: !3634, inlinedAt: !3635)
!3638 = !DILocation(line: 166, column: 2, scope: !3634, inlinedAt: !3635)
!3639 = !DILocation(line: 669, column: 9, scope: !3435)
!3640 = !DILocation(line: 669, column: 19, scope: !3435)
!3641 = distinct !DISubprogram(name: "available", linkageName: "std.io.available", scope: !26, file: !26, line: 27, type: !3642, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3642 = !DISubroutineType(types: !3643)
!3643 = !{!112, !407, !85}
!3644 = !DILocalVariable(name: "s", arg: 1, scope: !3641, file: !26, line: 27, type: !85)
!3645 = !DILocation(line: 27, column: 28, scope: !3641)
!3646 = !DILocation(line: 29, column: 7, scope: !3641)
!3647 = !DILocation(line: 29, column: 27, scope: !3641)
!3648 = !DILocation(line: 30, column: 7, scope: !3641)
!3649 = !DILocalVariable(name: "curr", scope: !3650, file: !26, line: 32, type: !201, align: 8)
!3650 = distinct !DILexicalBlock(scope: !3641, file: !26, line: 31, column: 2)
!3651 = !DILocation(line: 32, column: 7, scope: !3650)
!3652 = !DILocation(line: 32, column: 24, scope: !3650)
!3653 = !DILocation(line: 32, column: 14, scope: !3650)
!3654 = !DILocalVariable(name: "len", scope: !3650, file: !26, line: 33, type: !201, align: 8)
!3655 = !DILocation(line: 33, column: 7, scope: !3650)
!3656 = !DILocation(line: 33, column: 23, scope: !3650)
!3657 = !DILocation(line: 33, column: 13, scope: !3650)
!3658 = !DILocation(line: 34, column: 16, scope: !3650)
!3659 = !DILocation(line: 34, column: 3, scope: !3650)
!3660 = !DILocation(line: 35, column: 10, scope: !3650)
!3661 = !DILocation(line: 35, column: 16, scope: !3650)
!3662 = !DILocation(line: 37, column: 9, scope: !3641)
!3663 = distinct !DISubprogram(name: "copy_to", linkageName: "std.io.copy_to", scope: !26, file: !26, line: 153, type: !3664, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3664 = !DISubroutineType(types: !3665)
!3665 = !{!112, !407, !85, !156, !197}
!3666 = !DILocalVariable(name: "in", arg: 1, scope: !3663, file: !26, line: 153, type: !85)
!3667 = !DILocation(line: 153, column: 26, scope: !3663)
!3668 = !DILocalVariable(name: "dst", arg: 2, scope: !3663, file: !26, line: 153, type: !156)
!3669 = !DILocation(line: 153, column: 40, scope: !3663)
!3670 = !DILocalVariable(name: "buffer", arg: 3, scope: !3663, file: !26, line: 153, type: !197)
!3671 = !DILocation(line: 153, column: 52, scope: !3663)
!3672 = !DILocation(line: 155, column: 6, scope: !3663)
!3673 = !DILocalVariable(name: "total_copied", scope: !3674, file: !26, line: 171, type: !201, align: 8)
!3674 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !26, file: !26, line: 169, scopeLine: 169, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3675 = !DILocation(line: 171, column: 6, scope: !3674, inlinedAt: !3676)
!3676 = !DILocation(line: 155, column: 25, scope: !3663)
!3677 = !DILocation(line: 172, column: 2, scope: !3674, inlinedAt: !3676)
!3678 = !DILocalVariable(name: "len", scope: !3679, file: !26, line: 174, type: !202, align: 8)
!3679 = distinct !DILexicalBlock(scope: !3680, file: !26, line: 173, column: 2)
!3680 = distinct !DILexicalBlock(scope: !3674, file: !26, line: 172, column: 2)
!3681 = !DILocation(line: 174, column: 8, scope: !3679, inlinedAt: !3676)
!3682 = !DILocation(line: 174, column: 22, scope: !3679, inlinedAt: !3676)
!3683 = !DILocation(line: 174, column: 14, scope: !3679, inlinedAt: !3676)
!3684 = !DILocalVariable(name: "err", scope: !3679, file: !26, line: 175, type: !112, align: 8)
!3685 = !DILocation(line: 175, column: 13, scope: !3679, inlinedAt: !3676)
!3686 = !DILocation(line: 175, column: 19, scope: !3679, inlinedAt: !3676)
!3687 = !DILocation(line: 177, column: 9, scope: !3679, inlinedAt: !3676)
!3688 = !DILocation(line: 177, column: 29, scope: !3689, inlinedAt: !3676)
!3689 = distinct !DILexicalBlock(scope: !3679, file: !26, line: 177, column: 22)
!3690 = !DILocation(line: 178, column: 20, scope: !3691, inlinedAt: !3676)
!3691 = distinct !DILexicalBlock(scope: !3679, file: !26, line: 178, column: 13)
!3692 = !DILocation(line: 180, column: 8, scope: !3679, inlinedAt: !3676)
!3693 = !DILocation(line: 180, column: 20, scope: !3679, inlinedAt: !3676)
!3694 = !DILocalVariable(name: "written", scope: !3679, file: !26, line: 181, type: !201, align: 8)
!3695 = !DILocation(line: 181, column: 7, scope: !3679, inlinedAt: !3676)
!3696 = !DILocation(line: 181, column: 27, scope: !3679, inlinedAt: !3676)
!3697 = !DILocation(line: 181, column: 34, scope: !3679, inlinedAt: !3676)
!3698 = !DILocation(line: 181, column: 35, scope: !3679, inlinedAt: !3676)
!3699 = !DILocation(line: 181, column: 17, scope: !3679, inlinedAt: !3676)
!3700 = !DILocation(line: 182, column: 3, scope: !3679, inlinedAt: !3676)
!3701 = !DILocation(line: 182, column: 19, scope: !3679, inlinedAt: !3676)
!3702 = !DILocation(line: 183, column: 7, scope: !3679, inlinedAt: !3676)
!3703 = !DILocation(line: 183, column: 18, scope: !3679, inlinedAt: !3676)
!3704 = !DILocation(line: 183, column: 30, scope: !3679, inlinedAt: !3676)
!3705 = !DILocation(line: 156, column: 7, scope: !3663)
!3706 = !DILocation(line: 156, column: 39, scope: !3663)
!3707 = !DILocation(line: 156, column: 27, scope: !3663)
!3708 = !DILocation(line: 157, column: 7, scope: !3663)
!3709 = !DILocation(line: 157, column: 39, scope: !3663)
!3710 = !DILocation(line: 157, column: 27, scope: !3663)
!3711 = !DILocalVariable(name: "total_copied", scope: !3712, file: !26, line: 171, type: !201, align: 8)
!3712 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !26, file: !26, line: 169, scopeLine: 169, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3713 = !DILocation(line: 171, column: 6, scope: !3712, inlinedAt: !3714)
!3714 = !DILocation(line: 160, column: 11, scope: !3663)
!3715 = !DILocation(line: 172, column: 2, scope: !3712, inlinedAt: !3714)
!3716 = !DILocalVariable(name: "len", scope: !3717, file: !26, line: 174, type: !202, align: 8)
!3717 = distinct !DILexicalBlock(scope: !3718, file: !26, line: 173, column: 2)
!3718 = distinct !DILexicalBlock(scope: !3712, file: !26, line: 172, column: 2)
!3719 = !DILocation(line: 174, column: 8, scope: !3717, inlinedAt: !3714)
!3720 = !DILocation(line: 174, column: 22, scope: !3717, inlinedAt: !3714)
!3721 = !DILocation(line: 174, column: 14, scope: !3717, inlinedAt: !3714)
!3722 = !DILocalVariable(name: "err", scope: !3717, file: !26, line: 175, type: !112, align: 8)
!3723 = !DILocation(line: 175, column: 13, scope: !3717, inlinedAt: !3714)
!3724 = !DILocation(line: 175, column: 19, scope: !3717, inlinedAt: !3714)
!3725 = !DILocation(line: 177, column: 9, scope: !3717, inlinedAt: !3714)
!3726 = !DILocation(line: 177, column: 29, scope: !3727, inlinedAt: !3714)
!3727 = distinct !DILexicalBlock(scope: !3717, file: !26, line: 177, column: 22)
!3728 = !DILocation(line: 178, column: 20, scope: !3729, inlinedAt: !3714)
!3729 = distinct !DILexicalBlock(scope: !3717, file: !26, line: 178, column: 13)
!3730 = !DILocation(line: 180, column: 8, scope: !3717, inlinedAt: !3714)
!3731 = !DILocation(line: 180, column: 20, scope: !3717, inlinedAt: !3714)
!3732 = !DILocalVariable(name: "written", scope: !3717, file: !26, line: 181, type: !201, align: 8)
!3733 = !DILocation(line: 181, column: 7, scope: !3717, inlinedAt: !3714)
!3734 = !DILocation(line: 181, column: 27, scope: !3717, inlinedAt: !3714)
!3735 = !DILocation(line: 181, column: 34, scope: !3717, inlinedAt: !3714)
!3736 = !DILocation(line: 181, column: 35, scope: !3717, inlinedAt: !3714)
!3737 = !DILocation(line: 181, column: 17, scope: !3717, inlinedAt: !3714)
!3738 = !DILocation(line: 182, column: 3, scope: !3717, inlinedAt: !3714)
!3739 = !DILocation(line: 182, column: 19, scope: !3717, inlinedAt: !3714)
!3740 = !DILocation(line: 183, column: 7, scope: !3717, inlinedAt: !3714)
!3741 = !DILocation(line: 183, column: 18, scope: !3717, inlinedAt: !3714)
!3742 = !DILocation(line: 183, column: 30, scope: !3717, inlinedAt: !3714)
!3743 = distinct !DISubprogram(name: "wrap_bytes", linkageName: "std.io.wrap_bytes", scope: !26, file: !26, line: 442, type: !3744, scopeLine: 442, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3744 = !DISubroutineType(types: !3745)
!3745 = !{!743, !197}
!3746 = !DILocalVariable(name: "bytes", arg: 1, scope: !3743, file: !26, line: 442, type: !197)
!3747 = !DILocation(line: 442, column: 33, scope: !3743)
!3748 = !DILocation(line: 444, column: 11, scope: !3743)
!3749 = !DILocation(line: 444, column: 18, scope: !3743)
!3750 = distinct !DISubprogram(name: "to_format", linkageName: "std.core.ReflectedParam.to_format", scope: !32, file: !32, line: 60, type: !3751, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3751 = !DISubroutineType(types: !3752)
!3752 = !{!112, !407, !3753, !1769}
!3753 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReflectedParam*", baseType: !3754, size: 64, align: 64, dwarfAddressSpace: 0)
!3754 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReflectedParam", scope: !32, file: !32, line: 1, size: 192, align: 64, elements: !3755, identifier: "ReflectedParam")
!3755 = !{!3756, !3757}
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3754, file: !32, baseType: !964, size: 128, align: 64)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3754, file: !32, baseType: !89, size: 64, align: 64, offset: 128)
!3758 = !DILocation(line: 61, column: 1, scope: !3750)
!3759 = !DILocalVariable(name: "self", arg: 1, scope: !3750, file: !32, line: 60, type: !3753)
!3760 = !DILocation(line: 60, column: 34, scope: !3750)
!3761 = !DILocalVariable(name: "f", arg: 2, scope: !3750, file: !32, line: 60, type: !1769)
!3762 = !DILocation(line: 60, column: 52, scope: !3750)
!3763 = !DILocation(line: 62, column: 38, scope: !3750)
!3764 = !DILocation(line: 62, column: 9, scope: !3750)
!3765 = distinct !DISubprogram(name: "printf", linkageName: "std.io.Formatter.printf", scope: !32, file: !32, line: 65, type: !3766, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3766 = !DISubroutineType(types: !3767)
!3767 = !{!112, !407, !1769, !964, !1568}
!3768 = !DILocation(line: 66, column: 1, scope: !3765)
!3769 = !DILocalVariable(name: "self", arg: 1, scope: !3765, file: !32, line: 65, type: !1769)
!3770 = !DILocation(line: 65, column: 26, scope: !3765)
!3771 = !DILocalVariable(name: "format", arg: 2, scope: !3765, file: !32, line: 65, type: !964)
!3772 = !DILocation(line: 65, column: 40, scope: !3765)
!3773 = !DILocalVariable(name: "args", arg: 3, scope: !3765, file: !32, line: 65, type: !1568)
!3774 = !DILocation(line: 65, column: 48, scope: !3765)
!3775 = !DILocation(line: 67, column: 9, scope: !3765)
!3776 = distinct !DISubprogram(name: "init", linkageName: "std.io.Formatter.init", scope: !32, file: !32, line: 95, type: !3777, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3777 = !DISubroutineType(types: !3778)
!3778 = !{null, !1769, !1589, !7}
!3779 = !DILocation(line: 96, column: 1, scope: !3776)
!3780 = !DILocalVariable(name: "self", arg: 1, scope: !3776, file: !32, line: 95, type: !1769)
!3781 = !DILocation(line: 95, column: 24, scope: !3776)
!3782 = !DILocalVariable(name: "out_fn", arg: 2, scope: !3776, file: !32, line: 95, type: !1588)
!3783 = !DILocation(line: 95, column: 40, scope: !3776)
!3784 = !DILocalVariable(name: "data", arg: 3, scope: !3776, file: !32, line: 95, type: !7)
!3785 = !DILocation(line: 95, column: 54, scope: !3776)
!3786 = !DILocation(line: 97, column: 3, scope: !3776)
!3787 = !DILocation(line: 97, column: 20, scope: !3776)
!3788 = !DILocation(line: 97, column: 36, scope: !3776)
!3789 = distinct !DISubprogram(name: "out", linkageName: "std.io.Formatter.out", scope: !32, file: !32, line: 100, type: !3790, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3790 = !DISubroutineType(types: !3791)
!3791 = !{!112, !407, !1769, !16}
!3792 = !DILocation(line: 101, column: 1, scope: !3789)
!3793 = !DILocalVariable(name: "self", arg: 1, scope: !3789, file: !32, line: 100, type: !1769)
!3794 = !DILocation(line: 100, column: 23, scope: !3789)
!3795 = !DILocalVariable(name: "c", arg: 2, scope: !3789, file: !32, line: 100, type: !16)
!3796 = !DILocation(line: 100, column: 35, scope: !3789)
!3797 = !DILocalVariable(name: "err", scope: !3789, file: !32, line: 102, type: !112, align: 8)
!3798 = !DILocation(line: 102, column: 12, scope: !3789)
!3799 = !DILocation(line: 102, column: 18, scope: !3789)
!3800 = !DILocation(line: 102, column: 30, scope: !3789)
!3801 = !DILocation(line: 102, column: 41, scope: !3789)
!3802 = !DILocation(line: 104, column: 7, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3789, file: !32, line: 103, column: 2)
!3804 = !DILocation(line: 104, column: 32, scope: !3803)
!3805 = !DILocation(line: 105, column: 3, scope: !3803)
!3806 = !DILocation(line: 105, column: 22, scope: !3803)
!3807 = !DILocation(line: 106, column: 10, scope: !3803)
!3808 = !DILocation(line: 108, column: 9, scope: !3789)
!3809 = distinct !DISubprogram(name: "print_with_function", linkageName: "std.io.Formatter.print_with_function", scope: !32, file: !32, line: 111, type: !3810, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3810 = !DISubroutineType(types: !3811)
!3811 = !{!112, !407, !1769, !3812}
!3812 = !DICompositeType(tag: DW_TAG_structure_type, name: "Printable", size: 128, align: 64, elements: !3813, identifier: "Printable")
!3813 = !{!3814, !3815}
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3812, baseType: !7, size: 64, align: 64)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3812, baseType: !89, size: 64, align: 64, offset: 64)
!3816 = !DILocation(line: 112, column: 1, scope: !3809)
!3817 = !DILocalVariable(name: "self", arg: 1, scope: !3809, file: !32, line: 111, type: !1769)
!3818 = !DILocation(line: 111, column: 39, scope: !3809)
!3819 = !DILocalVariable(name: "arg", arg: 2, scope: !3809, file: !32, line: 111, type: !3812)
!3820 = !DILocation(line: 111, column: 56, scope: !3809)
!3821 = !DILocation(line: 113, column: 7, scope: !3809)
!3822 = !DILocalVariable(name: "old", scope: !3823, file: !32, line: 115, type: !91, align: 4)
!3823 = distinct !DILexicalBlock(scope: !3809, file: !32, line: 114, column: 2)
!3824 = !DILocation(line: 115, column: 14, scope: !3823)
!3825 = !DILocation(line: 115, column: 20, scope: !3823)
!3826 = !DILocalVariable(name: "old_width", scope: !3823, file: !32, line: 116, type: !91, align: 4)
!3827 = !DILocation(line: 116, column: 8, scope: !3823)
!3828 = !DILocation(line: 116, column: 20, scope: !3823)
!3829 = !DILocalVariable(name: "old_prec", scope: !3823, file: !32, line: 117, type: !91, align: 4)
!3830 = !DILocation(line: 117, column: 8, scope: !3823)
!3831 = !DILocation(line: 117, column: 19, scope: !3823)
!3832 = !DILocation(line: 124, column: 8, scope: !3823)
!3833 = !DILocation(line: 124, column: 20, scope: !3823)
!3834 = !DILocation(line: 120, column: 4, scope: !3835)
!3835 = distinct !DILexicalBlock(scope: !3823, file: !32, line: 119, column: 3)
!3836 = !DILocation(line: 120, column: 17, scope: !3835)
!3837 = !DILocation(line: 121, column: 4, scope: !3835)
!3838 = !DILocation(line: 121, column: 17, scope: !3835)
!3839 = !DILocation(line: 122, column: 4, scope: !3835)
!3840 = !DILocation(line: 122, column: 16, scope: !3835)
!3841 = !DILocation(line: 120, column: 4, scope: !3842)
!3842 = distinct !DILexicalBlock(scope: !3823, file: !32, line: 119, column: 3)
!3843 = !DILocation(line: 120, column: 17, scope: !3842)
!3844 = !DILocation(line: 121, column: 4, scope: !3842)
!3845 = !DILocation(line: 121, column: 17, scope: !3842)
!3846 = !DILocation(line: 122, column: 4, scope: !3842)
!3847 = !DILocation(line: 122, column: 16, scope: !3842)
!3848 = !DILocation(line: 125, column: 24, scope: !3823)
!3849 = !DILocation(line: 125, column: 10, scope: !3823)
!3850 = !DILocation(line: 120, column: 4, scope: !3851)
!3851 = distinct !DILexicalBlock(scope: !3823, file: !32, line: 119, column: 3)
!3852 = !DILocation(line: 120, column: 17, scope: !3851)
!3853 = !DILocation(line: 121, column: 4, scope: !3851)
!3854 = !DILocation(line: 121, column: 17, scope: !3851)
!3855 = !DILocation(line: 122, column: 4, scope: !3851)
!3856 = !DILocation(line: 122, column: 16, scope: !3851)
!3857 = !DILocation(line: 120, column: 4, scope: !3858)
!3858 = distinct !DILexicalBlock(scope: !3823, file: !32, line: 119, column: 3)
!3859 = !DILocation(line: 120, column: 17, scope: !3858)
!3860 = !DILocation(line: 121, column: 4, scope: !3858)
!3861 = !DILocation(line: 121, column: 17, scope: !3858)
!3862 = !DILocation(line: 122, column: 4, scope: !3858)
!3863 = !DILocation(line: 122, column: 16, scope: !3858)
!3864 = !DILocation(line: 127, column: 7, scope: !3809)
!3865 = !DILocalVariable(name: "old", scope: !3866, file: !32, line: 129, type: !91, align: 4)
!3866 = distinct !DILexicalBlock(scope: !3809, file: !32, line: 128, column: 2)
!3867 = !DILocation(line: 129, column: 14, scope: !3866)
!3868 = !DILocation(line: 129, column: 20, scope: !3866)
!3869 = !DILocalVariable(name: "old_width", scope: !3866, file: !32, line: 130, type: !91, align: 4)
!3870 = !DILocation(line: 130, column: 8, scope: !3866)
!3871 = !DILocation(line: 130, column: 20, scope: !3866)
!3872 = !DILocalVariable(name: "old_prec", scope: !3866, file: !32, line: 131, type: !91, align: 4)
!3873 = !DILocation(line: 131, column: 8, scope: !3866)
!3874 = !DILocation(line: 131, column: 19, scope: !3866)
!3875 = !DILocation(line: 138, column: 8, scope: !3866)
!3876 = !DILocation(line: 138, column: 20, scope: !3866)
!3877 = !DILocation(line: 134, column: 4, scope: !3878)
!3878 = distinct !DILexicalBlock(scope: !3866, file: !32, line: 133, column: 3)
!3879 = !DILocation(line: 134, column: 17, scope: !3878)
!3880 = !DILocation(line: 135, column: 4, scope: !3878)
!3881 = !DILocation(line: 135, column: 17, scope: !3878)
!3882 = !DILocation(line: 136, column: 4, scope: !3878)
!3883 = !DILocation(line: 136, column: 16, scope: !3878)
!3884 = !DILocation(line: 134, column: 4, scope: !3885)
!3885 = distinct !DILexicalBlock(scope: !3866, file: !32, line: 133, column: 3)
!3886 = !DILocation(line: 134, column: 17, scope: !3885)
!3887 = !DILocation(line: 135, column: 4, scope: !3885)
!3888 = !DILocation(line: 135, column: 17, scope: !3885)
!3889 = !DILocation(line: 136, column: 4, scope: !3885)
!3890 = !DILocation(line: 136, column: 16, scope: !3885)
!3891 = !DILocalVariable(name: "buffer", scope: !3892, file: !32, line: 484, type: !3893, align: 16)
!3892 = distinct !DISubprogram(name: "@stack_mem", linkageName: "@stack_mem", scope: !793, file: !793, line: 482, scopeLine: 482, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3893 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 8192, align: 8, elements: !3894)
!3894 = !{!3895}
!3895 = !DISubrange(count: 1024, lowerBound: 0)
!3896 = !DILocation(line: 484, column: 14, scope: !3892, inlinedAt: !3897)
!3897 = !DILocation(line: 139, column: 3, scope: !3866)
!3898 = !DILocalVariable(name: "allocator", scope: !3892, file: !32, line: 485, type: !3899, align: 8)
!3899 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocator", scope: !32, file: !32, line: 3, size: 384, align: 64, elements: !3900, identifier: "std.core.mem.allocator.OnStackAllocator")
!3900 = !{!3901, !3902, !3903, !3904}
!3901 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !3899, file: !32, line: 5, baseType: !319, size: 128, align: 64)
!3902 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3899, file: !32, line: 6, baseType: !197, size: 128, align: 64, offset: 128)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3899, file: !32, line: 7, baseType: !201, size: 64, align: 64, offset: 256)
!3904 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !3899, file: !32, line: 8, baseType: !3905, size: 64, align: 64, offset: 320)
!3905 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorExtraChunk*", baseType: !3906, size: 64, align: 64, dwarfAddressSpace: 0)
!3906 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocatorExtraChunk", scope: !32, file: !32, line: 12, size: 192, align: 64, elements: !3907, identifier: "std.core.mem.allocator.OnStackAllocatorExtraChunk")
!3907 = !{!3908, !3909, !3910}
!3908 = !DIDerivedType(tag: DW_TAG_member, name: "is_aligned", scope: !3906, file: !32, line: 14, baseType: !328, size: 8, align: 8)
!3909 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3906, file: !32, line: 15, baseType: !3905, size: 64, align: 64, offset: 64)
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3906, file: !32, line: 16, baseType: !7, size: 64, align: 64, offset: 128)
!3911 = !DILocation(line: 485, column: 19, scope: !3892, inlinedAt: !3897)
!3912 = !DILocation(line: 486, column: 18, scope: !3892, inlinedAt: !3897)
!3913 = !DILocation(line: 392, column: 27, scope: !3914, inlinedAt: !3915)
!3914 = distinct !DISubprogram(name: "heap", linkageName: "heap", scope: !367, file: !367, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!3915 = !DILocation(line: 486, column: 37, scope: !3892, inlinedAt: !3897)
!3916 = !DILocation(line: 486, column: 2, scope: !3892, inlinedAt: !3897)
!3917 = !DILocalVariable(name: "mem", scope: !3866, file: !32, line: 139, type: !319, align: 8)
!3918 = !DILocation(line: 139, column: 30, scope: !3866)
!3919 = !DILocation(line: 488, column: 9, scope: !3920, inlinedAt: !3897)
!3920 = distinct !DILexicalBlock(scope: !3892, file: !793, line: 488, column: 2)
!3921 = !DILocation(line: 141, column: 41, scope: !3922)
!3922 = distinct !DILexicalBlock(scope: !3866, file: !32, line: 140, column: 3)
!3923 = !DILocation(line: 141, column: 27, scope: !3922)
!3924 = !DILocation(line: 141, column: 11, scope: !3922)
!3925 = !DILocation(line: 487, column: 8, scope: !3926, inlinedAt: !3897)
!3926 = distinct !DILexicalBlock(scope: !3892, file: !793, line: 487, column: 8)
!3927 = !DILocation(line: 134, column: 4, scope: !3928)
!3928 = distinct !DILexicalBlock(scope: !3866, file: !32, line: 133, column: 3)
!3929 = !DILocation(line: 134, column: 17, scope: !3928)
!3930 = !DILocation(line: 135, column: 4, scope: !3928)
!3931 = !DILocation(line: 135, column: 17, scope: !3928)
!3932 = !DILocation(line: 136, column: 4, scope: !3928)
!3933 = !DILocation(line: 136, column: 16, scope: !3928)
!3934 = !DILocation(line: 487, column: 8, scope: !3935, inlinedAt: !3897)
!3935 = distinct !DILexicalBlock(scope: !3892, file: !793, line: 487, column: 8)
!3936 = !DILocation(line: 134, column: 4, scope: !3937)
!3937 = distinct !DILexicalBlock(scope: !3866, file: !32, line: 133, column: 3)
!3938 = !DILocation(line: 134, column: 17, scope: !3937)
!3939 = !DILocation(line: 135, column: 4, scope: !3937)
!3940 = !DILocation(line: 135, column: 17, scope: !3937)
!3941 = !DILocation(line: 136, column: 4, scope: !3937)
!3942 = !DILocation(line: 136, column: 16, scope: !3937)
!3943 = !DILocation(line: 144, column: 9, scope: !3809)
!3944 = distinct !DISubprogram(name: "out_str", linkageName: "std.io.Formatter.out_str", scope: !32, file: !32, line: 148, type: !2883, scopeLine: 148, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!3945 = !DILocation(line: 149, column: 1, scope: !3944)
!3946 = !DILocalVariable(name: "self", arg: 1, scope: !3944, file: !32, line: 148, type: !1769)
!3947 = !DILocation(line: 148, column: 27, scope: !3944)
!3948 = !DILocalVariable(name: "arg", arg: 2, scope: !3944, file: !32, line: 148, type: !1572)
!3949 = !DILocation(line: 148, column: 38, scope: !3944)
!3950 = !DILocation(line: 150, column: 10, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3944, file: !32, line: 150, column: 2)
!3952 = !DILocation(line: 153, column: 11, scope: !3953)
!3953 = distinct !DILexicalBlock(scope: !3951, file: !32, line: 153, column: 4)
!3954 = !DILocation(line: 155, column: 11, scope: !3955)
!3955 = distinct !DILexicalBlock(scope: !3951, file: !32, line: 155, column: 4)
!3956 = !DILocation(line: 158, column: 40, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !3951, file: !32, line: 158, column: 4)
!3958 = !DILocation(line: 158, column: 30, scope: !3957)
!3959 = !DILocation(line: 158, column: 11, scope: !3957)
!3960 = !DILocation(line: 161, column: 26, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3951, file: !32, line: 161, column: 4)
!3962 = !DILocation(line: 161, column: 11, scope: !3961)
!3963 = !DILocation(line: 164, column: 33, scope: !3964, inlinedAt: !3965)
!3964 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !208, file: !208, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!3965 = !DILocation(line: 163, column: 4, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3951, file: !32, line: 163, column: 4)
!3967 = !DILocation(line: 164, column: 2, scope: !3964, inlinedAt: !3965)
!3968 = !DILocation(line: 166, column: 2, scope: !3964, inlinedAt: !3965)
!3969 = !DILocalVariable(name: "flags", scope: !3970, file: !32, line: 166, type: !91, align: 4)
!3970 = distinct !DILexicalBlock(scope: !3951, file: !32, line: 166, column: 4)
!3971 = !DILocation(line: 166, column: 15, scope: !3970)
!3972 = !DILocation(line: 166, column: 23, scope: !3970)
!3973 = !DILocalVariable(name: "width", scope: !3970, file: !32, line: 167, type: !91, align: 4)
!3974 = !DILocation(line: 167, column: 9, scope: !3970)
!3975 = !DILocation(line: 167, column: 17, scope: !3970)
!3976 = !DILocation(line: 173, column: 4, scope: !3970)
!3977 = !DILocation(line: 174, column: 4, scope: !3970)
!3978 = !DILocation(line: 174, column: 17, scope: !3970)
!3979 = !DILocation(line: 175, column: 11, scope: !3970)
!3980 = !DILocation(line: 175, column: 37, scope: !3970)
!3981 = !DILocation(line: 170, column: 5, scope: !3982)
!3982 = distinct !DILexicalBlock(scope: !3970, file: !32, line: 169, column: 4)
!3983 = !DILocation(line: 170, column: 18, scope: !3982)
!3984 = !DILocation(line: 171, column: 5, scope: !3982)
!3985 = !DILocation(line: 171, column: 18, scope: !3982)
!3986 = !DILocation(line: 170, column: 5, scope: !3987)
!3987 = distinct !DILexicalBlock(scope: !3970, file: !32, line: 169, column: 4)
!3988 = !DILocation(line: 170, column: 18, scope: !3987)
!3989 = !DILocation(line: 171, column: 5, scope: !3987)
!3990 = !DILocation(line: 171, column: 18, scope: !3987)
!3991 = !DILocalVariable(name: "flags", scope: !3992, file: !32, line: 177, type: !91, align: 4)
!3992 = distinct !DILexicalBlock(scope: !3951, file: !32, line: 177, column: 4)
!3993 = !DILocation(line: 177, column: 15, scope: !3992)
!3994 = !DILocation(line: 177, column: 23, scope: !3992)
!3995 = !DILocalVariable(name: "width", scope: !3992, file: !32, line: 178, type: !91, align: 4)
!3996 = !DILocation(line: 178, column: 9, scope: !3992)
!3997 = !DILocation(line: 178, column: 17, scope: !3992)
!3998 = !DILocation(line: 184, column: 4, scope: !3992)
!3999 = !DILocation(line: 185, column: 4, scope: !3992)
!4000 = !DILocation(line: 185, column: 17, scope: !3992)
!4001 = !DILocation(line: 186, column: 21, scope: !3992)
!4002 = !DILocation(line: 186, column: 11, scope: !3992)
!4003 = !DILocation(line: 186, column: 45, scope: !3992)
!4004 = !DILocation(line: 181, column: 5, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !3992, file: !32, line: 180, column: 4)
!4006 = !DILocation(line: 181, column: 18, scope: !4005)
!4007 = !DILocation(line: 182, column: 5, scope: !4005)
!4008 = !DILocation(line: 182, column: 18, scope: !4005)
!4009 = !DILocation(line: 181, column: 5, scope: !4010)
!4010 = distinct !DILexicalBlock(scope: !3992, file: !32, line: 180, column: 4)
!4011 = !DILocation(line: 181, column: 18, scope: !4010)
!4012 = !DILocation(line: 182, column: 5, scope: !4010)
!4013 = !DILocation(line: 182, column: 18, scope: !4010)
!4014 = !DILocation(line: 188, column: 35, scope: !4015)
!4015 = distinct !DILexicalBlock(scope: !3951, file: !32, line: 188, column: 4)
!4016 = !DILocation(line: 188, column: 29, scope: !4015)
!4017 = !DILocation(line: 188, column: 54, scope: !4015)
!4018 = !DILocation(line: 188, column: 11, scope: !4015)
!4019 = !DILocalVariable(name: "n", scope: !3944, file: !32, line: 191, type: !202, align: 8)
!4020 = !DILocation(line: 191, column: 7, scope: !3944)
!4021 = !DILocation(line: 191, column: 37, scope: !3944)
!4022 = !DILocation(line: 191, column: 11, scope: !3944)
!4023 = !DILocation(line: 192, column: 6, scope: !3944)
!4024 = !DILocation(line: 192, column: 20, scope: !3944)
!4025 = !DILocalVariable(name: "f", scope: !4026, file: !32, line: 330, type: !112, align: 8)
!4026 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !208, file: !208, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4027 = !DILocation(line: 330, column: 12, scope: !4026, inlinedAt: !4028)
!4028 = !DILocation(line: 193, column: 6, scope: !3944)
!4029 = !DILocation(line: 330, column: 16, scope: !4026, inlinedAt: !4028)
!4030 = !DILocation(line: 330, column: 30, scope: !4026, inlinedAt: !4028)
!4031 = !DILocation(line: 331, column: 9, scope: !4026, inlinedAt: !4028)
!4032 = !DILocation(line: 193, column: 41, scope: !3944)
!4033 = !DILocation(line: 194, column: 10, scope: !4034)
!4034 = distinct !DILexicalBlock(scope: !3944, file: !32, line: 194, column: 2)
!4035 = !DILocalVariable(name: "i", scope: !4036, file: !32, line: 197, type: !201, align: 8)
!4036 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 197, column: 4)
!4037 = !DILocation(line: 197, column: 8, scope: !4036)
!4038 = !DILocation(line: 12, column: 11, scope: !4039, inlinedAt: !4041)
!4039 = distinct !DILexicalBlock(scope: !4040, file: !2904, line: 15, column: 1)
!4040 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !2904, file: !2904, line: 14, scopeLine: 14, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4041 = !DILocation(line: 197, column: 19, scope: !4036)
!4042 = !DILocation(line: 12, column: 36, scope: !4039, inlinedAt: !4041)
!4043 = !DILocalVariable(name: "any_type", scope: !4040, file: !32, line: 16, type: !89, align: 8)
!4044 = !DILocation(line: 16, column: 9, scope: !4040, inlinedAt: !4041)
!4045 = !DILocation(line: 16, column: 20, scope: !4040, inlinedAt: !4041)
!4046 = !DILocalVariable(name: "kind", scope: !4040, file: !32, line: 17, type: !54, align: 1)
!4047 = !DILocation(line: 17, column: 11, scope: !4040, inlinedAt: !4041)
!4048 = !DILocation(line: 17, column: 18, scope: !4040, inlinedAt: !4041)
!4049 = !DILocation(line: 18, column: 6, scope: !4040, inlinedAt: !4041)
!4050 = !DILocation(line: 20, column: 14, scope: !4051, inlinedAt: !4041)
!4051 = distinct !DILexicalBlock(scope: !4040, file: !2904, line: 19, column: 2)
!4052 = !DILocation(line: 21, column: 10, scope: !4051, inlinedAt: !4041)
!4053 = !DILocalVariable(name: "is_mixed_signed", scope: !4040, file: !32, line: 23, type: !328, align: 1)
!4054 = !DILocation(line: 23, column: 7, scope: !4040, inlinedAt: !4041)
!4055 = !DILocation(line: 23, column: 41, scope: !4040, inlinedAt: !4041)
!4056 = !DILocation(line: 23, column: 25, scope: !4040, inlinedAt: !4041)
!4057 = !DILocalVariable(name: "max", scope: !4040, file: !32, line: 24, type: !201, align: 8)
!4058 = !DILocation(line: 24, column: 8, scope: !4040, inlinedAt: !4041)
!4059 = !DILocation(line: 24, column: 14, scope: !4040, inlinedAt: !4041)
!4060 = !DILocalVariable(name: "min", scope: !4040, file: !32, line: 25, type: !201, align: 8)
!4061 = !DILocation(line: 25, column: 8, scope: !4040, inlinedAt: !4041)
!4062 = !DILocation(line: 25, column: 14, scope: !4040, inlinedAt: !4041)
!4063 = !DILocation(line: 28, column: 8, scope: !4064, inlinedAt: !4041)
!4064 = distinct !DILexicalBlock(scope: !4040, file: !2904, line: 26, column: 2)
!4065 = !DILocalVariable(name: "c", scope: !4066, file: !32, line: 29, type: !2932, align: 1)
!4066 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 29, column: 4)
!4067 = !DILocation(line: 29, column: 10, scope: !4066, inlinedAt: !4041)
!4068 = !DILocation(line: 29, column: 22, scope: !4066, inlinedAt: !4041)
!4069 = !DILocation(line: 29, column: 16, scope: !4066, inlinedAt: !4041)
!4070 = !DILocation(line: 30, column: 8, scope: !4066, inlinedAt: !4041)
!4071 = !DILocation(line: 30, column: 27, scope: !4066, inlinedAt: !4041)
!4072 = !DILocation(line: 30, column: 41, scope: !4066, inlinedAt: !4041)
!4073 = !DILocation(line: 31, column: 12, scope: !4066, inlinedAt: !4041)
!4074 = !DILocation(line: 32, column: 8, scope: !4064, inlinedAt: !4041)
!4075 = !DILocalVariable(name: "s", scope: !4076, file: !32, line: 33, type: !2943, align: 2)
!4076 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 33, column: 4)
!4077 = !DILocation(line: 33, column: 10, scope: !4076, inlinedAt: !4041)
!4078 = !DILocation(line: 33, column: 23, scope: !4076, inlinedAt: !4041)
!4079 = !DILocation(line: 33, column: 16, scope: !4076, inlinedAt: !4041)
!4080 = !DILocation(line: 34, column: 8, scope: !4076, inlinedAt: !4041)
!4081 = !DILocation(line: 34, column: 27, scope: !4076, inlinedAt: !4041)
!4082 = !DILocation(line: 34, column: 41, scope: !4076, inlinedAt: !4041)
!4083 = !DILocation(line: 35, column: 8, scope: !4076, inlinedAt: !4041)
!4084 = !DILocation(line: 35, column: 12, scope: !4076, inlinedAt: !4041)
!4085 = !DILocation(line: 35, column: 19, scope: !4076, inlinedAt: !4041)
!4086 = !DILocation(line: 35, column: 23, scope: !4076, inlinedAt: !4041)
!4087 = !DILocation(line: 35, column: 35, scope: !4076, inlinedAt: !4041)
!4088 = !DILocation(line: 36, column: 12, scope: !4076, inlinedAt: !4041)
!4089 = !DILocation(line: 37, column: 8, scope: !4064, inlinedAt: !4041)
!4090 = !DILocalVariable(name: "i", scope: !4091, file: !32, line: 38, type: !23, align: 4)
!4091 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 38, column: 4)
!4092 = !DILocation(line: 38, column: 8, scope: !4091, inlinedAt: !4041)
!4093 = !DILocation(line: 38, column: 19, scope: !4091, inlinedAt: !4041)
!4094 = !DILocation(line: 38, column: 14, scope: !4091, inlinedAt: !4041)
!4095 = !DILocation(line: 39, column: 8, scope: !4091, inlinedAt: !4041)
!4096 = !DILocation(line: 39, column: 27, scope: !4091, inlinedAt: !4041)
!4097 = !DILocation(line: 39, column: 41, scope: !4091, inlinedAt: !4041)
!4098 = !DILocation(line: 40, column: 8, scope: !4091, inlinedAt: !4041)
!4099 = !DILocation(line: 40, column: 12, scope: !4091, inlinedAt: !4041)
!4100 = !DILocation(line: 40, column: 19, scope: !4091, inlinedAt: !4041)
!4101 = !DILocation(line: 40, column: 23, scope: !4091, inlinedAt: !4041)
!4102 = !DILocation(line: 40, column: 35, scope: !4091, inlinedAt: !4041)
!4103 = !DILocation(line: 41, column: 12, scope: !4091, inlinedAt: !4041)
!4104 = !DILocation(line: 42, column: 8, scope: !4064, inlinedAt: !4041)
!4105 = !DILocalVariable(name: "l", scope: !4106, file: !32, line: 43, type: !113, align: 8)
!4106 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 43, column: 4)
!4107 = !DILocation(line: 43, column: 9, scope: !4106, inlinedAt: !4041)
!4108 = !DILocation(line: 43, column: 21, scope: !4106, inlinedAt: !4041)
!4109 = !DILocation(line: 43, column: 15, scope: !4106, inlinedAt: !4041)
!4110 = !DILocation(line: 44, column: 8, scope: !4106, inlinedAt: !4041)
!4111 = !DILocation(line: 44, column: 27, scope: !4106, inlinedAt: !4041)
!4112 = !DILocation(line: 44, column: 41, scope: !4106, inlinedAt: !4041)
!4113 = !DILocation(line: 45, column: 8, scope: !4106, inlinedAt: !4041)
!4114 = !DILocation(line: 45, column: 12, scope: !4106, inlinedAt: !4041)
!4115 = !DILocation(line: 45, column: 19, scope: !4106, inlinedAt: !4041)
!4116 = !DILocation(line: 45, column: 23, scope: !4106, inlinedAt: !4041)
!4117 = !DILocation(line: 45, column: 35, scope: !4106, inlinedAt: !4041)
!4118 = !DILocation(line: 46, column: 12, scope: !4106, inlinedAt: !4041)
!4119 = !DILocation(line: 47, column: 8, scope: !4064, inlinedAt: !4041)
!4120 = !DILocalVariable(name: "i", scope: !4121, file: !32, line: 48, type: !2989, align: 8)
!4121 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 48, column: 4)
!4122 = !DILocation(line: 48, column: 11, scope: !4121, inlinedAt: !4041)
!4123 = !DILocation(line: 48, column: 25, scope: !4121, inlinedAt: !4041)
!4124 = !DILocation(line: 48, column: 17, scope: !4121, inlinedAt: !4041)
!4125 = !DILocation(line: 49, column: 8, scope: !4121, inlinedAt: !4041)
!4126 = !DILocation(line: 49, column: 27, scope: !4121, inlinedAt: !4041)
!4127 = !DILocation(line: 49, column: 41, scope: !4121, inlinedAt: !4041)
!4128 = !DILocation(line: 50, column: 8, scope: !4121, inlinedAt: !4041)
!4129 = !DILocation(line: 50, column: 12, scope: !4121, inlinedAt: !4041)
!4130 = !DILocation(line: 50, column: 19, scope: !4121, inlinedAt: !4041)
!4131 = !DILocation(line: 50, column: 23, scope: !4121, inlinedAt: !4041)
!4132 = !DILocation(line: 50, column: 35, scope: !4121, inlinedAt: !4041)
!4133 = !DILocation(line: 51, column: 12, scope: !4121, inlinedAt: !4041)
!4134 = !DILocation(line: 52, column: 8, scope: !4064, inlinedAt: !4041)
!4135 = !DILocalVariable(name: "c", scope: !4136, file: !32, line: 53, type: !16, align: 1)
!4136 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 53, column: 4)
!4137 = !DILocation(line: 53, column: 9, scope: !4136, inlinedAt: !4041)
!4138 = !DILocation(line: 53, column: 21, scope: !4136, inlinedAt: !4041)
!4139 = !DILocation(line: 53, column: 15, scope: !4136, inlinedAt: !4041)
!4140 = !DILocation(line: 54, column: 8, scope: !4136, inlinedAt: !4041)
!4141 = !DILocation(line: 54, column: 12, scope: !4136, inlinedAt: !4041)
!4142 = !DILocation(line: 54, column: 24, scope: !4136, inlinedAt: !4041)
!4143 = !DILocation(line: 55, column: 12, scope: !4136, inlinedAt: !4041)
!4144 = !DILocation(line: 56, column: 8, scope: !4064, inlinedAt: !4041)
!4145 = !DILocalVariable(name: "s", scope: !4146, file: !32, line: 57, type: !3015, align: 2)
!4146 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 57, column: 4)
!4147 = !DILocation(line: 57, column: 11, scope: !4146, inlinedAt: !4041)
!4148 = !DILocation(line: 57, column: 25, scope: !4146, inlinedAt: !4041)
!4149 = !DILocation(line: 57, column: 17, scope: !4146, inlinedAt: !4041)
!4150 = !DILocation(line: 58, column: 8, scope: !4146, inlinedAt: !4041)
!4151 = !DILocation(line: 58, column: 12, scope: !4146, inlinedAt: !4041)
!4152 = !DILocation(line: 58, column: 19, scope: !4146, inlinedAt: !4041)
!4153 = !DILocation(line: 58, column: 23, scope: !4146, inlinedAt: !4041)
!4154 = !DILocation(line: 58, column: 35, scope: !4146, inlinedAt: !4041)
!4155 = !DILocation(line: 59, column: 12, scope: !4146, inlinedAt: !4041)
!4156 = !DILocation(line: 60, column: 8, scope: !4064, inlinedAt: !4041)
!4157 = !DILocalVariable(name: "i", scope: !4158, file: !32, line: 61, type: !91, align: 4)
!4158 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 61, column: 4)
!4159 = !DILocation(line: 61, column: 9, scope: !4158, inlinedAt: !4041)
!4160 = !DILocation(line: 61, column: 21, scope: !4158, inlinedAt: !4041)
!4161 = !DILocation(line: 61, column: 15, scope: !4158, inlinedAt: !4041)
!4162 = !DILocation(line: 62, column: 8, scope: !4158, inlinedAt: !4041)
!4163 = !DILocation(line: 62, column: 12, scope: !4158, inlinedAt: !4041)
!4164 = !DILocation(line: 62, column: 19, scope: !4158, inlinedAt: !4041)
!4165 = !DILocation(line: 62, column: 23, scope: !4158, inlinedAt: !4041)
!4166 = !DILocation(line: 62, column: 35, scope: !4158, inlinedAt: !4041)
!4167 = !DILocation(line: 63, column: 12, scope: !4158, inlinedAt: !4041)
!4168 = !DILocation(line: 64, column: 8, scope: !4064, inlinedAt: !4041)
!4169 = !DILocalVariable(name: "l", scope: !4170, file: !32, line: 65, type: !202, align: 8)
!4170 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 65, column: 4)
!4171 = !DILocation(line: 65, column: 10, scope: !4170, inlinedAt: !4041)
!4172 = !DILocation(line: 65, column: 23, scope: !4170, inlinedAt: !4041)
!4173 = !DILocation(line: 65, column: 16, scope: !4170, inlinedAt: !4041)
!4174 = !DILocation(line: 66, column: 8, scope: !4170, inlinedAt: !4041)
!4175 = !DILocation(line: 66, column: 12, scope: !4170, inlinedAt: !4041)
!4176 = !DILocation(line: 66, column: 19, scope: !4170, inlinedAt: !4041)
!4177 = !DILocation(line: 66, column: 23, scope: !4170, inlinedAt: !4041)
!4178 = !DILocation(line: 66, column: 35, scope: !4170, inlinedAt: !4041)
!4179 = !DILocation(line: 67, column: 12, scope: !4170, inlinedAt: !4041)
!4180 = !DILocation(line: 68, column: 8, scope: !4064, inlinedAt: !4041)
!4181 = !DILocalVariable(name: "i", scope: !4182, file: !32, line: 69, type: !2702, align: 8)
!4182 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 69, column: 4)
!4183 = !DILocation(line: 69, column: 12, scope: !4182, inlinedAt: !4041)
!4184 = !DILocation(line: 69, column: 27, scope: !4182, inlinedAt: !4041)
!4185 = !DILocation(line: 69, column: 18, scope: !4182, inlinedAt: !4041)
!4186 = !DILocation(line: 70, column: 8, scope: !4182, inlinedAt: !4041)
!4187 = !DILocation(line: 70, column: 12, scope: !4182, inlinedAt: !4041)
!4188 = !DILocation(line: 70, column: 19, scope: !4182, inlinedAt: !4041)
!4189 = !DILocation(line: 70, column: 23, scope: !4182, inlinedAt: !4041)
!4190 = !DILocation(line: 70, column: 35, scope: !4182, inlinedAt: !4041)
!4191 = !DILocation(line: 71, column: 12, scope: !4182, inlinedAt: !4041)
!4192 = !DILocation(line: 164, column: 33, scope: !4193, inlinedAt: !4194)
!4193 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !208, file: !208, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4194 = !DILocation(line: 73, column: 4, scope: !4195, inlinedAt: !4041)
!4195 = distinct !DILexicalBlock(scope: !4064, file: !2904, line: 73, column: 4)
!4196 = !DILocation(line: 164, column: 2, scope: !4193, inlinedAt: !4194)
!4197 = !DILocation(line: 166, column: 2, scope: !4193, inlinedAt: !4194)
!4198 = !DILocation(line: 198, column: 11, scope: !4036)
!4199 = !DILocation(line: 198, column: 15, scope: !4036)
!4200 = !DILocation(line: 198, column: 88, scope: !4036)
!4201 = !DILocation(line: 199, column: 27, scope: !4036)
!4202 = !DILocation(line: 199, column: 42, scope: !4036)
!4203 = !DILocation(line: 199, column: 11, scope: !4036)
!4204 = !DILocation(line: 201, column: 11, scope: !4205)
!4205 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 201, column: 4)
!4206 = !DILocation(line: 203, column: 11, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 203, column: 4)
!4208 = !DILocation(line: 205, column: 11, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 205, column: 4)
!4210 = !DILocation(line: 207, column: 11, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 207, column: 4)
!4212 = !DILocation(line: 209, column: 8, scope: !4213)
!4213 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 209, column: 4)
!4214 = !DILocation(line: 211, column: 30, scope: !4215)
!4215 = distinct !DILexicalBlock(scope: !4213, file: !32, line: 210, column: 4)
!4216 = !DILocation(line: 211, column: 12, scope: !4215)
!4217 = !DILocation(line: 213, column: 8, scope: !4213)
!4218 = !DILocation(line: 215, column: 30, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4213, file: !32, line: 214, column: 4)
!4220 = !DILocation(line: 215, column: 47, scope: !4219)
!4221 = !DILocation(line: 215, column: 74, scope: !4219)
!4222 = !DILocation(line: 215, column: 12, scope: !4219)
!4223 = !DILocation(line: 217, column: 8, scope: !4213)
!4224 = !DILocation(line: 219, column: 30, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4213, file: !32, line: 218, column: 4)
!4226 = !DILocation(line: 219, column: 47, scope: !4225)
!4227 = !DILocation(line: 219, column: 74, scope: !4225)
!4228 = !DILocation(line: 219, column: 12, scope: !4225)
!4229 = !DILocation(line: 199, column: 20, scope: !4230, inlinedAt: !4231)
!4230 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !208, file: !208, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4231 = !DILocation(line: 221, column: 24, scope: !4213)
!4232 = !DILocation(line: 199, column: 30, scope: !4230, inlinedAt: !4231)
!4233 = !DILocation(line: 221, column: 11, scope: !4213)
!4234 = !DILocalVariable(name: "inner", scope: !4235, file: !32, line: 223, type: !89, align: 8)
!4235 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 223, column: 4)
!4236 = !DILocation(line: 223, column: 11, scope: !4235)
!4237 = !DILocation(line: 223, column: 19, scope: !4235)
!4238 = !DILocalVariable(name: "pointer", scope: !4235, file: !32, line: 224, type: !4239, align: 8)
!4239 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void**", baseType: !7, size: 64, align: 64, dwarfAddressSpace: 0)
!4240 = !DILocation(line: 224, column: 11, scope: !4235)
!4241 = !DILocation(line: 224, column: 21, scope: !4235)
!4242 = !DILocation(line: 225, column: 8, scope: !4235)
!4243 = !DILocalVariable(name: "deref", scope: !4244, file: !32, line: 227, type: !1572, align: 8)
!4244 = distinct !DILexicalBlock(scope: !4235, file: !32, line: 226, column: 4)
!4245 = !DILocation(line: 227, column: 9, scope: !4244)
!4246 = !DILocation(line: 227, column: 27, scope: !4244)
!4247 = !DILocation(line: 189, column: 20, scope: !4248, inlinedAt: !4249)
!4248 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !208, file: !208, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4249 = !DILocation(line: 227, column: 17, scope: !4244)
!4250 = !DILocation(line: 189, column: 25, scope: !4248, inlinedAt: !4249)
!4251 = !DILocation(line: 228, column: 35, scope: !4244)
!4252 = !DILocation(line: 228, column: 9, scope: !4244)
!4253 = !DILocation(line: 229, column: 9, scope: !4244)
!4254 = !DILocation(line: 229, column: 23, scope: !4244)
!4255 = !DILocalVariable(name: "f", scope: !4256, file: !32, line: 330, type: !112, align: 8)
!4256 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !208, file: !208, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4257 = !DILocation(line: 330, column: 12, scope: !4256, inlinedAt: !4258)
!4258 = !DILocation(line: 230, column: 9, scope: !4244)
!4259 = !DILocation(line: 330, column: 16, scope: !4256, inlinedAt: !4258)
!4260 = !DILocation(line: 330, column: 30, scope: !4256, inlinedAt: !4258)
!4261 = !DILocation(line: 331, column: 9, scope: !4256, inlinedAt: !4258)
!4262 = !DILocation(line: 230, column: 44, scope: !4244)
!4263 = !DILocalVariable(name: "flags", scope: !4235, file: !32, line: 232, type: !91, align: 4)
!4264 = !DILocation(line: 232, column: 15, scope: !4235)
!4265 = !DILocation(line: 232, column: 23, scope: !4235)
!4266 = !DILocalVariable(name: "width", scope: !4235, file: !32, line: 233, type: !91, align: 4)
!4267 = !DILocation(line: 233, column: 9, scope: !4235)
!4268 = !DILocation(line: 233, column: 17, scope: !4235)
!4269 = !DILocation(line: 239, column: 4, scope: !4235)
!4270 = !DILocation(line: 239, column: 17, scope: !4235)
!4271 = !DILocation(line: 240, column: 4, scope: !4235)
!4272 = !DILocation(line: 236, column: 5, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4235, file: !32, line: 235, column: 4)
!4274 = !DILocation(line: 236, column: 18, scope: !4273)
!4275 = !DILocation(line: 237, column: 5, scope: !4273)
!4276 = !DILocation(line: 237, column: 18, scope: !4273)
!4277 = !DILocation(line: 241, column: 11, scope: !4235)
!4278 = !DILocation(line: 236, column: 5, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4235, file: !32, line: 235, column: 4)
!4280 = !DILocation(line: 236, column: 18, scope: !4279)
!4281 = !DILocation(line: 237, column: 5, scope: !4279)
!4282 = !DILocation(line: 237, column: 18, scope: !4279)
!4283 = !DILocation(line: 236, column: 5, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4235, file: !32, line: 235, column: 4)
!4285 = !DILocation(line: 236, column: 18, scope: !4284)
!4286 = !DILocation(line: 237, column: 5, scope: !4284)
!4287 = !DILocation(line: 237, column: 18, scope: !4284)
!4288 = !DILocalVariable(name: "flags", scope: !4289, file: !32, line: 244, type: !91, align: 4)
!4289 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 244, column: 4)
!4290 = !DILocation(line: 244, column: 15, scope: !4289)
!4291 = !DILocation(line: 244, column: 23, scope: !4289)
!4292 = !DILocalVariable(name: "width", scope: !4289, file: !32, line: 245, type: !91, align: 4)
!4293 = !DILocation(line: 245, column: 9, scope: !4289)
!4294 = !DILocation(line: 245, column: 17, scope: !4289)
!4295 = !DILocation(line: 251, column: 4, scope: !4289)
!4296 = !DILocation(line: 252, column: 4, scope: !4289)
!4297 = !DILocation(line: 252, column: 17, scope: !4289)
!4298 = !DILocalVariable(name: "inner", scope: !4289, file: !32, line: 253, type: !89, align: 8)
!4299 = !DILocation(line: 253, column: 11, scope: !4289)
!4300 = !DILocation(line: 253, column: 19, scope: !4289)
!4301 = !DILocalVariable(name: "size", scope: !4289, file: !32, line: 254, type: !201, align: 8)
!4302 = !DILocation(line: 254, column: 8, scope: !4289)
!4303 = !DILocation(line: 254, column: 15, scope: !4289)
!4304 = !DILocalVariable(name: "alen", scope: !4289, file: !32, line: 255, type: !201, align: 8)
!4305 = !DILocation(line: 255, column: 8, scope: !4289)
!4306 = !DILocation(line: 255, column: 15, scope: !4289)
!4307 = !DILocalVariable(name: "ptr", scope: !4289, file: !32, line: 257, type: !7, align: 8)
!4308 = !DILocation(line: 257, column: 10, scope: !4289)
!4309 = !DILocation(line: 257, column: 23, scope: !4289)
!4310 = !DILocalVariable(name: "len", scope: !4289, file: !32, line: 258, type: !201, align: 8)
!4311 = !DILocation(line: 258, column: 8, scope: !4289)
!4312 = !DILocation(line: 258, column: 14, scope: !4289)
!4313 = !DILocation(line: 248, column: 5, scope: !4314)
!4314 = distinct !DILexicalBlock(scope: !4289, file: !32, line: 247, column: 4)
!4315 = !DILocation(line: 248, column: 18, scope: !4314)
!4316 = !DILocation(line: 249, column: 5, scope: !4314)
!4317 = !DILocation(line: 249, column: 18, scope: !4314)
!4318 = !DILocalVariable(name: "i", scope: !4319, file: !32, line: 259, type: !201, align: 8)
!4319 = distinct !DILexicalBlock(scope: !4289, file: !32, line: 259, column: 4)
!4320 = !DILocation(line: 259, column: 13, scope: !4319)
!4321 = !DILocation(line: 259, column: 17, scope: !4319)
!4322 = !DILocation(line: 259, column: 20, scope: !4319)
!4323 = !DILocation(line: 259, column: 24, scope: !4319)
!4324 = !DILocation(line: 261, column: 9, scope: !4325)
!4325 = distinct !DILexicalBlock(scope: !4319, file: !32, line: 260, column: 4)
!4326 = !DILocation(line: 261, column: 17, scope: !4325)
!4327 = !DILocation(line: 261, column: 24, scope: !4325)
!4328 = !DILocation(line: 248, column: 5, scope: !4329)
!4329 = distinct !DILexicalBlock(scope: !4289, file: !32, line: 247, column: 4)
!4330 = !DILocation(line: 248, column: 18, scope: !4329)
!4331 = !DILocation(line: 249, column: 5, scope: !4329)
!4332 = !DILocation(line: 249, column: 18, scope: !4329)
!4333 = !DILocation(line: 262, column: 5, scope: !4325)
!4334 = !DILocation(line: 189, column: 20, scope: !4335, inlinedAt: !4336)
!4335 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !208, file: !208, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4336 = !DILocation(line: 262, column: 25, scope: !4325)
!4337 = !DILocation(line: 189, column: 25, scope: !4335, inlinedAt: !4336)
!4338 = !DILocation(line: 262, column: 12, scope: !4325)
!4339 = !DILocation(line: 248, column: 5, scope: !4340)
!4340 = distinct !DILexicalBlock(scope: !4289, file: !32, line: 247, column: 4)
!4341 = !DILocation(line: 248, column: 18, scope: !4340)
!4342 = !DILocation(line: 249, column: 5, scope: !4340)
!4343 = !DILocation(line: 249, column: 18, scope: !4340)
!4344 = !DILocation(line: 263, column: 5, scope: !4325)
!4345 = !DILocation(line: 263, column: 12, scope: !4325)
!4346 = !DILocation(line: 259, column: 30, scope: !4319)
!4347 = !DILocation(line: 265, column: 4, scope: !4289)
!4348 = !DILocation(line: 265, column: 11, scope: !4289)
!4349 = !DILocation(line: 248, column: 5, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4289, file: !32, line: 247, column: 4)
!4351 = !DILocation(line: 248, column: 18, scope: !4350)
!4352 = !DILocation(line: 249, column: 5, scope: !4350)
!4353 = !DILocation(line: 249, column: 18, scope: !4350)
!4354 = !DILocation(line: 266, column: 11, scope: !4289)
!4355 = !DILocation(line: 248, column: 5, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4289, file: !32, line: 247, column: 4)
!4357 = !DILocation(line: 248, column: 18, scope: !4356)
!4358 = !DILocation(line: 249, column: 5, scope: !4356)
!4359 = !DILocation(line: 249, column: 18, scope: !4356)
!4360 = !DILocalVariable(name: "flags", scope: !4361, file: !32, line: 268, type: !91, align: 4)
!4361 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 268, column: 4)
!4362 = !DILocation(line: 268, column: 15, scope: !4361)
!4363 = !DILocation(line: 268, column: 23, scope: !4361)
!4364 = !DILocalVariable(name: "width", scope: !4361, file: !32, line: 269, type: !91, align: 4)
!4365 = !DILocation(line: 269, column: 9, scope: !4361)
!4366 = !DILocation(line: 269, column: 17, scope: !4361)
!4367 = !DILocation(line: 275, column: 4, scope: !4361)
!4368 = !DILocation(line: 276, column: 4, scope: !4361)
!4369 = !DILocation(line: 276, column: 17, scope: !4361)
!4370 = !DILocalVariable(name: "inner", scope: !4361, file: !32, line: 278, type: !89, align: 8)
!4371 = !DILocation(line: 278, column: 11, scope: !4361)
!4372 = !DILocation(line: 278, column: 19, scope: !4361)
!4373 = !DILocalVariable(name: "size", scope: !4361, file: !32, line: 279, type: !201, align: 8)
!4374 = !DILocation(line: 279, column: 8, scope: !4361)
!4375 = !DILocation(line: 279, column: 15, scope: !4361)
!4376 = !DILocalVariable(name: "vlen", scope: !4361, file: !32, line: 280, type: !201, align: 8)
!4377 = !DILocation(line: 280, column: 8, scope: !4361)
!4378 = !DILocation(line: 280, column: 15, scope: !4361)
!4379 = !DILocalVariable(name: "ptr", scope: !4361, file: !32, line: 282, type: !7, align: 8)
!4380 = !DILocation(line: 282, column: 10, scope: !4361)
!4381 = !DILocation(line: 282, column: 23, scope: !4361)
!4382 = !DILocalVariable(name: "len", scope: !4361, file: !32, line: 283, type: !201, align: 8)
!4383 = !DILocation(line: 283, column: 8, scope: !4361)
!4384 = !DILocation(line: 283, column: 14, scope: !4361)
!4385 = !DILocation(line: 272, column: 5, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4361, file: !32, line: 271, column: 4)
!4387 = !DILocation(line: 272, column: 18, scope: !4386)
!4388 = !DILocation(line: 273, column: 5, scope: !4386)
!4389 = !DILocation(line: 273, column: 18, scope: !4386)
!4390 = !DILocalVariable(name: "i", scope: !4391, file: !32, line: 284, type: !201, align: 8)
!4391 = distinct !DILexicalBlock(scope: !4361, file: !32, line: 284, column: 4)
!4392 = !DILocation(line: 284, column: 13, scope: !4391)
!4393 = !DILocation(line: 284, column: 17, scope: !4391)
!4394 = !DILocation(line: 284, column: 20, scope: !4391)
!4395 = !DILocation(line: 284, column: 24, scope: !4391)
!4396 = !DILocation(line: 286, column: 9, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4391, file: !32, line: 285, column: 4)
!4398 = !DILocation(line: 286, column: 17, scope: !4397)
!4399 = !DILocation(line: 286, column: 24, scope: !4397)
!4400 = !DILocation(line: 272, column: 5, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !4361, file: !32, line: 271, column: 4)
!4402 = !DILocation(line: 272, column: 18, scope: !4401)
!4403 = !DILocation(line: 273, column: 5, scope: !4401)
!4404 = !DILocation(line: 273, column: 18, scope: !4401)
!4405 = !DILocation(line: 287, column: 5, scope: !4397)
!4406 = !DILocation(line: 189, column: 20, scope: !4407, inlinedAt: !4408)
!4407 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !208, file: !208, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4408 = !DILocation(line: 287, column: 25, scope: !4397)
!4409 = !DILocation(line: 189, column: 25, scope: !4407, inlinedAt: !4408)
!4410 = !DILocation(line: 287, column: 12, scope: !4397)
!4411 = !DILocation(line: 272, column: 5, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4361, file: !32, line: 271, column: 4)
!4413 = !DILocation(line: 272, column: 18, scope: !4412)
!4414 = !DILocation(line: 273, column: 5, scope: !4412)
!4415 = !DILocation(line: 273, column: 18, scope: !4412)
!4416 = !DILocation(line: 288, column: 5, scope: !4397)
!4417 = !DILocation(line: 288, column: 12, scope: !4397)
!4418 = !DILocation(line: 284, column: 30, scope: !4391)
!4419 = !DILocation(line: 290, column: 4, scope: !4361)
!4420 = !DILocation(line: 290, column: 11, scope: !4361)
!4421 = !DILocation(line: 272, column: 5, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !4361, file: !32, line: 271, column: 4)
!4423 = !DILocation(line: 272, column: 18, scope: !4422)
!4424 = !DILocation(line: 273, column: 5, scope: !4422)
!4425 = !DILocation(line: 273, column: 18, scope: !4422)
!4426 = !DILocation(line: 291, column: 11, scope: !4361)
!4427 = !DILocation(line: 272, column: 5, scope: !4428)
!4428 = distinct !DILexicalBlock(scope: !4361, file: !32, line: 271, column: 4)
!4429 = !DILocation(line: 272, column: 18, scope: !4428)
!4430 = !DILocation(line: 273, column: 5, scope: !4428)
!4431 = !DILocation(line: 273, column: 18, scope: !4428)
!4432 = !DILocalVariable(name: "inner", scope: !4433, file: !32, line: 294, type: !89, align: 8)
!4433 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 294, column: 4)
!4434 = !DILocation(line: 294, column: 11, scope: !4433)
!4435 = !DILocation(line: 294, column: 19, scope: !4433)
!4436 = !DILocation(line: 295, column: 8, scope: !4433)
!4437 = !DILocation(line: 295, column: 38, scope: !4433)
!4438 = !DILocalVariable(name: "flags", scope: !4433, file: !32, line: 296, type: !91, align: 4)
!4439 = !DILocation(line: 296, column: 15, scope: !4433)
!4440 = !DILocation(line: 296, column: 23, scope: !4433)
!4441 = !DILocalVariable(name: "width", scope: !4433, file: !32, line: 297, type: !91, align: 4)
!4442 = !DILocation(line: 297, column: 9, scope: !4433)
!4443 = !DILocation(line: 297, column: 17, scope: !4433)
!4444 = !DILocation(line: 303, column: 4, scope: !4433)
!4445 = !DILocation(line: 304, column: 4, scope: !4433)
!4446 = !DILocation(line: 304, column: 17, scope: !4433)
!4447 = !DILocalVariable(name: "size", scope: !4433, file: !32, line: 305, type: !201, align: 8)
!4448 = !DILocation(line: 305, column: 8, scope: !4433)
!4449 = !DILocation(line: 305, column: 15, scope: !4433)
!4450 = !DILocalVariable(name: "temp", scope: !4433, file: !32, line: 307, type: !4451, align: 8)
!4451 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !964, size: 64, align: 64, dwarfAddressSpace: 0)
!4452 = !DILocation(line: 307, column: 12, scope: !4433)
!4453 = !DILocation(line: 307, column: 26, scope: !4433)
!4454 = !DILocalVariable(name: "ptr", scope: !4433, file: !32, line: 308, type: !7, align: 8)
!4455 = !DILocation(line: 308, column: 10, scope: !4433)
!4456 = !DILocation(line: 308, column: 23, scope: !4433)
!4457 = !DILocalVariable(name: "slen", scope: !4433, file: !32, line: 309, type: !201, align: 8)
!4458 = !DILocation(line: 309, column: 8, scope: !4433)
!4459 = !DILocation(line: 309, column: 15, scope: !4433)
!4460 = !DILocalVariable(name: "len", scope: !4433, file: !32, line: 310, type: !201, align: 8)
!4461 = !DILocation(line: 310, column: 8, scope: !4433)
!4462 = !DILocation(line: 310, column: 14, scope: !4433)
!4463 = !DILocation(line: 300, column: 5, scope: !4464)
!4464 = distinct !DILexicalBlock(scope: !4433, file: !32, line: 299, column: 4)
!4465 = !DILocation(line: 300, column: 18, scope: !4464)
!4466 = !DILocation(line: 301, column: 5, scope: !4464)
!4467 = !DILocation(line: 301, column: 18, scope: !4464)
!4468 = !DILocalVariable(name: "i", scope: !4469, file: !32, line: 311, type: !201, align: 8)
!4469 = distinct !DILexicalBlock(scope: !4433, file: !32, line: 311, column: 4)
!4470 = !DILocation(line: 311, column: 13, scope: !4469)
!4471 = !DILocation(line: 311, column: 17, scope: !4469)
!4472 = !DILocation(line: 311, column: 20, scope: !4469)
!4473 = !DILocation(line: 311, column: 24, scope: !4469)
!4474 = !DILocation(line: 313, column: 9, scope: !4475)
!4475 = distinct !DILexicalBlock(scope: !4469, file: !32, line: 312, column: 4)
!4476 = !DILocation(line: 313, column: 17, scope: !4475)
!4477 = !DILocation(line: 313, column: 24, scope: !4475)
!4478 = !DILocation(line: 300, column: 5, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4433, file: !32, line: 299, column: 4)
!4480 = !DILocation(line: 300, column: 18, scope: !4479)
!4481 = !DILocation(line: 301, column: 5, scope: !4479)
!4482 = !DILocation(line: 301, column: 18, scope: !4479)
!4483 = !DILocation(line: 314, column: 5, scope: !4475)
!4484 = !DILocation(line: 189, column: 20, scope: !4485, inlinedAt: !4486)
!4485 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !208, file: !208, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4486 = !DILocation(line: 314, column: 25, scope: !4475)
!4487 = !DILocation(line: 189, column: 25, scope: !4485, inlinedAt: !4486)
!4488 = !DILocation(line: 314, column: 12, scope: !4475)
!4489 = !DILocation(line: 300, column: 5, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4433, file: !32, line: 299, column: 4)
!4491 = !DILocation(line: 300, column: 18, scope: !4490)
!4492 = !DILocation(line: 301, column: 5, scope: !4490)
!4493 = !DILocation(line: 301, column: 18, scope: !4490)
!4494 = !DILocation(line: 315, column: 5, scope: !4475)
!4495 = !DILocation(line: 315, column: 12, scope: !4475)
!4496 = !DILocation(line: 311, column: 30, scope: !4469)
!4497 = !DILocation(line: 317, column: 4, scope: !4433)
!4498 = !DILocation(line: 317, column: 11, scope: !4433)
!4499 = !DILocation(line: 300, column: 5, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4433, file: !32, line: 299, column: 4)
!4501 = !DILocation(line: 300, column: 18, scope: !4500)
!4502 = !DILocation(line: 301, column: 5, scope: !4500)
!4503 = !DILocation(line: 301, column: 18, scope: !4500)
!4504 = !DILocation(line: 318, column: 11, scope: !4433)
!4505 = !DILocation(line: 300, column: 5, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4433, file: !32, line: 299, column: 4)
!4507 = !DILocation(line: 300, column: 18, scope: !4506)
!4508 = !DILocation(line: 301, column: 5, scope: !4506)
!4509 = !DILocation(line: 301, column: 18, scope: !4506)
!4510 = !DILocation(line: 164, column: 33, scope: !4511, inlinedAt: !4512)
!4511 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !208, file: !208, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4512 = !DILocation(line: 321, column: 4, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4034, file: !32, line: 321, column: 4)
!4514 = !DILocation(line: 164, column: 2, scope: !4511, inlinedAt: !4512)
!4515 = !DILocation(line: 166, column: 2, scope: !4511, inlinedAt: !4512)
!4516 = !DILocation(line: 324, column: 9, scope: !3944)
!4517 = distinct !DISubprogram(name: "vprintf", linkageName: "std.io.Formatter.vprintf", scope: !32, file: !32, line: 356, type: !3766, scopeLine: 356, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4518 = !DILocation(line: 357, column: 1, scope: !4517)
!4519 = !DILocalVariable(name: "self", arg: 1, scope: !4517, file: !32, line: 356, type: !1769)
!4520 = !DILocation(line: 356, column: 27, scope: !4517)
!4521 = !DILocalVariable(name: "format", arg: 2, scope: !4517, file: !32, line: 356, type: !964)
!4522 = !DILocation(line: 356, column: 41, scope: !4517)
!4523 = !DILocalVariable(name: "anys", arg: 3, scope: !4517, file: !32, line: 356, type: !1568)
!4524 = !DILocation(line: 356, column: 55, scope: !4517)
!4525 = !DILocation(line: 358, column: 2, scope: !4517)
!4526 = !DILocation(line: 358, column: 21, scope: !4517)
!4527 = !DILocation(line: 359, column: 7, scope: !4517)
!4528 = !DILocation(line: 362, column: 3, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4517, file: !32, line: 360, column: 2)
!4530 = !DILocation(line: 362, column: 18, scope: !4529)
!4531 = !DILocalVariable(name: "total_len", scope: !4517, file: !32, line: 364, type: !201, align: 8)
!4532 = !DILocation(line: 364, column: 6, scope: !4517)
!4533 = !DILocalVariable(name: "format_len", scope: !4517, file: !32, line: 365, type: !201, align: 8)
!4534 = !DILocation(line: 365, column: 6, scope: !4517)
!4535 = !DILocation(line: 365, column: 19, scope: !4517)
!4536 = !DILocalVariable(name: "variant_index", scope: !4517, file: !32, line: 366, type: !201, align: 8)
!4537 = !DILocation(line: 366, column: 6, scope: !4517)
!4538 = !DILocation(line: 366, column: 22, scope: !4517)
!4539 = !DILocalVariable(name: "i", scope: !4540, file: !32, line: 367, type: !201, align: 8)
!4540 = distinct !DILexicalBlock(scope: !4517, file: !32, line: 367, column: 2)
!4541 = !DILocation(line: 367, column: 11, scope: !4540)
!4542 = !DILocation(line: 367, column: 15, scope: !4540)
!4543 = !DILocation(line: 367, column: 18, scope: !4540)
!4544 = !DILocation(line: 367, column: 22, scope: !4540)
!4545 = !DILocalVariable(name: "c", scope: !4546, file: !32, line: 370, type: !16, align: 1)
!4546 = distinct !DILexicalBlock(scope: !4540, file: !32, line: 368, column: 2)
!4547 = !DILocation(line: 370, column: 8, scope: !4546)
!4548 = !DILocation(line: 370, column: 12, scope: !4546)
!4549 = !DILocation(line: 370, column: 19, scope: !4546)
!4550 = !DILocation(line: 371, column: 7, scope: !4546)
!4551 = !DILocation(line: 374, column: 4, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4546, file: !32, line: 372, column: 3)
!4553 = !DILocation(line: 374, column: 17, scope: !4552)
!4554 = !DILocation(line: 375, column: 4, scope: !4552)
!4555 = !DILocation(line: 377, column: 3, scope: !4546)
!4556 = !DILocation(line: 378, column: 7, scope: !4546)
!4557 = !DILocation(line: 378, column: 12, scope: !4546)
!4558 = !DILocation(line: 336, column: 3, scope: !4559, inlinedAt: !4560)
!4559 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4560 = !DILocation(line: 378, column: 31, scope: !4546)
!4561 = !DILocation(line: 337, column: 9, scope: !4559, inlinedAt: !4560)
!4562 = !DILocation(line: 379, column: 7, scope: !4546)
!4563 = !DILocation(line: 379, column: 14, scope: !4546)
!4564 = !DILocation(line: 380, column: 7, scope: !4546)
!4565 = !DILocation(line: 382, column: 4, scope: !4566)
!4566 = distinct !DILexicalBlock(scope: !4546, file: !32, line: 381, column: 3)
!4567 = !DILocation(line: 382, column: 17, scope: !4566)
!4568 = !DILocation(line: 383, column: 4, scope: !4566)
!4569 = !DILocation(line: 386, column: 3, scope: !4546)
!4570 = !DILocation(line: 387, column: 3, scope: !4546)
!4571 = !DILocation(line: 391, column: 15, scope: !4572)
!4572 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 391, column: 15)
!4573 = distinct !DILexicalBlock(scope: !4574, file: !32, line: 389, column: 4)
!4574 = distinct !DILexicalBlock(scope: !4575, file: !32, line: 388, column: 3)
!4575 = distinct !DILexicalBlock(scope: !4546, file: !32, line: 387, column: 3)
!4576 = !DILocation(line: 391, column: 36, scope: !4572)
!4577 = !DILocation(line: 392, column: 15, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 392, column: 15)
!4579 = !DILocation(line: 392, column: 33, scope: !4578)
!4580 = !DILocation(line: 393, column: 15, scope: !4581)
!4581 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 393, column: 15)
!4582 = !DILocation(line: 393, column: 33, scope: !4581)
!4583 = !DILocation(line: 394, column: 15, scope: !4584)
!4584 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 394, column: 15)
!4585 = !DILocation(line: 394, column: 34, scope: !4584)
!4586 = !DILocation(line: 395, column: 15, scope: !4587)
!4587 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 395, column: 15)
!4588 = !DILocation(line: 395, column: 33, scope: !4587)
!4589 = !DILocation(line: 396, column: 14, scope: !4590)
!4590 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 396, column: 14)
!4591 = !DILocation(line: 398, column: 10, scope: !4574)
!4592 = !DILocation(line: 398, column: 15, scope: !4574)
!4593 = !DILocation(line: 398, column: 8, scope: !4574)
!4594 = !DILocation(line: 336, column: 3, scope: !4595, inlinedAt: !4596)
!4595 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4596 = !DILocation(line: 398, column: 34, scope: !4574)
!4597 = !DILocation(line: 337, column: 9, scope: !4595, inlinedAt: !4596)
!4598 = !DILocation(line: 399, column: 8, scope: !4574)
!4599 = !DILocation(line: 399, column: 15, scope: !4574)
!4600 = !DILocalVariable(name: "w", scope: !4546, file: !32, line: 402, type: !23, align: 4)
!4601 = !DILocation(line: 402, column: 8, scope: !4546)
!4602 = !DILocation(line: 402, column: 48, scope: !4546)
!4603 = !DILocation(line: 402, column: 86, scope: !4546)
!4604 = !DILocation(line: 402, column: 12, scope: !4546)
!4605 = !DILocation(line: 403, column: 13, scope: !4546)
!4606 = !DILocation(line: 336, column: 3, scope: !4607, inlinedAt: !4608)
!4607 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4608 = !DILocation(line: 403, column: 23, scope: !4546)
!4609 = !DILocation(line: 337, column: 9, scope: !4607, inlinedAt: !4608)
!4610 = !DILocation(line: 404, column: 7, scope: !4546)
!4611 = !DILocation(line: 404, column: 14, scope: !4546)
!4612 = !DILocation(line: 405, column: 7, scope: !4546)
!4613 = !DILocation(line: 407, column: 4, scope: !4614)
!4614 = distinct !DILexicalBlock(scope: !4546, file: !32, line: 406, column: 3)
!4615 = !DILocation(line: 407, column: 22, scope: !4614)
!4616 = !DILocation(line: 408, column: 9, scope: !4614)
!4617 = !DILocation(line: 410, column: 3, scope: !4546)
!4618 = !DILocation(line: 410, column: 16, scope: !4546)
!4619 = !DILocation(line: 412, column: 3, scope: !4546)
!4620 = !DILocation(line: 412, column: 15, scope: !4546)
!4621 = !DILocation(line: 413, column: 7, scope: !4546)
!4622 = !DILocation(line: 415, column: 4, scope: !4623)
!4623 = distinct !DILexicalBlock(scope: !4546, file: !32, line: 414, column: 3)
!4624 = !DILocation(line: 415, column: 27, scope: !4623)
!4625 = !DILocation(line: 416, column: 10, scope: !4623)
!4626 = !DILocation(line: 416, column: 15, scope: !4623)
!4627 = !DILocation(line: 416, column: 8, scope: !4623)
!4628 = !DILocation(line: 336, column: 3, scope: !4629, inlinedAt: !4630)
!4629 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4630 = !DILocation(line: 416, column: 34, scope: !4623)
!4631 = !DILocation(line: 337, column: 9, scope: !4629, inlinedAt: !4630)
!4632 = !DILocalVariable(name: "prec", scope: !4623, file: !32, line: 417, type: !23, align: 4)
!4633 = !DILocation(line: 417, column: 9, scope: !4623)
!4634 = !DILocation(line: 417, column: 52, scope: !4623)
!4635 = !DILocation(line: 417, column: 90, scope: !4623)
!4636 = !DILocation(line: 417, column: 16, scope: !4623)
!4637 = !DILocation(line: 418, column: 14, scope: !4623)
!4638 = !DILocation(line: 336, column: 3, scope: !4639, inlinedAt: !4640)
!4639 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4640 = !DILocation(line: 418, column: 27, scope: !4623)
!4641 = !DILocation(line: 337, column: 9, scope: !4639, inlinedAt: !4640)
!4642 = !DILocation(line: 419, column: 4, scope: !4623)
!4643 = !DILocation(line: 419, column: 16, scope: !4623)
!4644 = !DILocation(line: 419, column: 27, scope: !4623)
!4645 = !DILocation(line: 419, column: 31, scope: !4623)
!4646 = !DILocation(line: 420, column: 8, scope: !4623)
!4647 = !DILocation(line: 420, column: 15, scope: !4623)
!4648 = !DILocalVariable(name: "base", scope: !4546, file: !32, line: 424, type: !91, align: 4)
!4649 = !DILocation(line: 424, column: 8, scope: !4546)
!4650 = !DILocation(line: 424, column: 15, scope: !4546)
!4651 = !DILocation(line: 425, column: 7, scope: !4546)
!4652 = !DILocation(line: 425, column: 24, scope: !4546)
!4653 = !DILocation(line: 14, column: 6, scope: !4654, inlinedAt: !4655)
!4654 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4655 = !DILocation(line: 427, column: 4, scope: !4656)
!4656 = distinct !DILexicalBlock(scope: !4546, file: !32, line: 426, column: 3)
!4657 = !DILocation(line: 14, column: 31, scope: !4654, inlinedAt: !4655)
!4658 = !DILocation(line: 15, column: 2, scope: !4654, inlinedAt: !4655)
!4659 = !DILocation(line: 15, column: 21, scope: !4654, inlinedAt: !4655)
!4660 = !DILocation(line: 16, column: 9, scope: !4654, inlinedAt: !4655)
!4661 = !DILocation(line: 428, column: 4, scope: !4656)
!4662 = !DILocation(line: 428, column: 17, scope: !4656)
!4663 = !DILocation(line: 429, column: 4, scope: !4656)
!4664 = !DILocalVariable(name: "current", scope: !4546, file: !32, line: 431, type: !1572, align: 8)
!4665 = !DILocation(line: 431, column: 7, scope: !4546)
!4666 = !DILocation(line: 431, column: 17, scope: !4546)
!4667 = !DILocation(line: 431, column: 22, scope: !4546)
!4668 = !DILocation(line: 435, column: 12, scope: !4669)
!4669 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 435, column: 5)
!4670 = distinct !DILexicalBlock(scope: !4546, file: !32, line: 432, column: 3)
!4671 = !DILocation(line: 436, column: 5, scope: !4669)
!4672 = !DILocation(line: 436, column: 23, scope: !4669)
!4673 = !DILocation(line: 438, column: 5, scope: !4674)
!4674 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 438, column: 5)
!4675 = !DILocation(line: 438, column: 28, scope: !4674)
!4676 = !DILocation(line: 439, column: 5, scope: !4674)
!4677 = !DILocation(line: 441, column: 12, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 441, column: 5)
!4679 = !DILocation(line: 443, column: 5, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 443, column: 5)
!4681 = !DILocation(line: 443, column: 28, scope: !4680)
!4682 = !DILocation(line: 444, column: 5, scope: !4680)
!4683 = !DILocation(line: 446, column: 12, scope: !4684)
!4684 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 446, column: 5)
!4685 = !DILocation(line: 448, column: 5, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 448, column: 5)
!4687 = !DILocation(line: 448, column: 28, scope: !4686)
!4688 = !DILocation(line: 449, column: 5, scope: !4686)
!4689 = !DILocation(line: 451, column: 12, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 451, column: 5)
!4691 = !DILocation(line: 453, column: 5, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 453, column: 5)
!4693 = !DILocation(line: 453, column: 28, scope: !4692)
!4694 = !DILocation(line: 454, column: 5, scope: !4692)
!4695 = !DILocation(line: 456, column: 5, scope: !4696)
!4696 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 456, column: 5)
!4697 = !DILocalVariable(name: "len", scope: !4698, file: !32, line: 342, type: !202, align: 8)
!4698 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4699 = !DILocation(line: 342, column: 7, scope: !4698, inlinedAt: !4700)
!4700 = !DILocation(line: 456, column: 18, scope: !4696)
!4701 = !DILocation(line: 456, column: 44, scope: !4698, inlinedAt: !4700)
!4702 = !DILocation(line: 342, column: 13, scope: !4698, inlinedAt: !4700)
!4703 = !DILocalVariable(name: "err", scope: !4698, file: !32, line: 343, type: !112, align: 8)
!4704 = !DILocation(line: 343, column: 12, scope: !4698, inlinedAt: !4700)
!4705 = !DILocation(line: 343, column: 18, scope: !4698, inlinedAt: !4700)
!4706 = !DILocation(line: 345, column: 8, scope: !4698, inlinedAt: !4700)
!4707 = !DILocation(line: 346, column: 8, scope: !4698, inlinedAt: !4700)
!4708 = !DILocation(line: 14, column: 6, scope: !4709, inlinedAt: !4710)
!4709 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4710 = !DILocation(line: 347, column: 11, scope: !4711, inlinedAt: !4700)
!4711 = distinct !DILexicalBlock(scope: !4698, file: !32, line: 347, column: 4)
!4712 = !DILocation(line: 14, column: 31, scope: !4709, inlinedAt: !4710)
!4713 = !DILocation(line: 15, column: 2, scope: !4709, inlinedAt: !4710)
!4714 = !DILocation(line: 15, column: 21, scope: !4709, inlinedAt: !4710)
!4715 = !DILocation(line: 16, column: 9, scope: !4709, inlinedAt: !4710)
!4716 = !DILocation(line: 14, column: 6, scope: !4717, inlinedAt: !4718)
!4717 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4718 = !DILocation(line: 349, column: 10, scope: !4719, inlinedAt: !4700)
!4719 = distinct !DILexicalBlock(scope: !4698, file: !32, line: 349, column: 4)
!4720 = !DILocation(line: 14, column: 31, scope: !4717, inlinedAt: !4718)
!4721 = !DILocation(line: 15, column: 2, scope: !4717, inlinedAt: !4718)
!4722 = !DILocation(line: 15, column: 21, scope: !4717, inlinedAt: !4718)
!4723 = !DILocation(line: 16, column: 9, scope: !4717, inlinedAt: !4718)
!4724 = !DILocation(line: 350, column: 4, scope: !4719, inlinedAt: !4700)
!4725 = !DILocation(line: 351, column: 11, scope: !4719, inlinedAt: !4700)
!4726 = !DILocation(line: 353, column: 9, scope: !4698, inlinedAt: !4700)
!4727 = !DILocation(line: 457, column: 5, scope: !4696)
!4728 = !DILocation(line: 459, column: 5, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 459, column: 5)
!4730 = !DILocation(line: 459, column: 28, scope: !4729)
!4731 = !DILocation(line: 460, column: 5, scope: !4729)
!4732 = !DILocation(line: 462, column: 5, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 462, column: 5)
!4734 = !DILocalVariable(name: "len", scope: !4735, file: !32, line: 342, type: !202, align: 8)
!4735 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4736 = !DILocation(line: 342, column: 7, scope: !4735, inlinedAt: !4737)
!4737 = !DILocation(line: 462, column: 18, scope: !4733)
!4738 = !DILocation(line: 462, column: 44, scope: !4735, inlinedAt: !4737)
!4739 = !DILocation(line: 342, column: 13, scope: !4735, inlinedAt: !4737)
!4740 = !DILocalVariable(name: "err", scope: !4735, file: !32, line: 343, type: !112, align: 8)
!4741 = !DILocation(line: 343, column: 12, scope: !4735, inlinedAt: !4737)
!4742 = !DILocation(line: 343, column: 18, scope: !4735, inlinedAt: !4737)
!4743 = !DILocation(line: 345, column: 8, scope: !4735, inlinedAt: !4737)
!4744 = !DILocation(line: 346, column: 8, scope: !4735, inlinedAt: !4737)
!4745 = !DILocation(line: 14, column: 6, scope: !4746, inlinedAt: !4747)
!4746 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4747 = !DILocation(line: 347, column: 11, scope: !4748, inlinedAt: !4737)
!4748 = distinct !DILexicalBlock(scope: !4735, file: !32, line: 347, column: 4)
!4749 = !DILocation(line: 14, column: 31, scope: !4746, inlinedAt: !4747)
!4750 = !DILocation(line: 15, column: 2, scope: !4746, inlinedAt: !4747)
!4751 = !DILocation(line: 15, column: 21, scope: !4746, inlinedAt: !4747)
!4752 = !DILocation(line: 16, column: 9, scope: !4746, inlinedAt: !4747)
!4753 = !DILocation(line: 14, column: 6, scope: !4754, inlinedAt: !4755)
!4754 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4755 = !DILocation(line: 349, column: 10, scope: !4756, inlinedAt: !4737)
!4756 = distinct !DILexicalBlock(scope: !4735, file: !32, line: 349, column: 4)
!4757 = !DILocation(line: 14, column: 31, scope: !4754, inlinedAt: !4755)
!4758 = !DILocation(line: 15, column: 2, scope: !4754, inlinedAt: !4755)
!4759 = !DILocation(line: 15, column: 21, scope: !4754, inlinedAt: !4755)
!4760 = !DILocation(line: 16, column: 9, scope: !4754, inlinedAt: !4755)
!4761 = !DILocation(line: 350, column: 4, scope: !4756, inlinedAt: !4737)
!4762 = !DILocation(line: 351, column: 11, scope: !4756, inlinedAt: !4737)
!4763 = !DILocation(line: 353, column: 9, scope: !4735, inlinedAt: !4737)
!4764 = !DILocation(line: 463, column: 5, scope: !4733)
!4765 = !DILocation(line: 465, column: 5, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 465, column: 5)
!4767 = !DILocation(line: 465, column: 28, scope: !4766)
!4768 = !DILocation(line: 466, column: 5, scope: !4766)
!4769 = !DILocation(line: 468, column: 5, scope: !4770)
!4770 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 468, column: 5)
!4771 = !DILocalVariable(name: "len", scope: !4772, file: !32, line: 342, type: !202, align: 8)
!4772 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4773 = !DILocation(line: 342, column: 7, scope: !4772, inlinedAt: !4774)
!4774 = !DILocation(line: 468, column: 18, scope: !4770)
!4775 = !DILocation(line: 468, column: 44, scope: !4772, inlinedAt: !4774)
!4776 = !DILocation(line: 342, column: 13, scope: !4772, inlinedAt: !4774)
!4777 = !DILocalVariable(name: "err", scope: !4772, file: !32, line: 343, type: !112, align: 8)
!4778 = !DILocation(line: 343, column: 12, scope: !4772, inlinedAt: !4774)
!4779 = !DILocation(line: 343, column: 18, scope: !4772, inlinedAt: !4774)
!4780 = !DILocation(line: 345, column: 8, scope: !4772, inlinedAt: !4774)
!4781 = !DILocation(line: 346, column: 8, scope: !4772, inlinedAt: !4774)
!4782 = !DILocation(line: 14, column: 6, scope: !4783, inlinedAt: !4784)
!4783 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4784 = !DILocation(line: 347, column: 11, scope: !4785, inlinedAt: !4774)
!4785 = distinct !DILexicalBlock(scope: !4772, file: !32, line: 347, column: 4)
!4786 = !DILocation(line: 14, column: 31, scope: !4783, inlinedAt: !4784)
!4787 = !DILocation(line: 15, column: 2, scope: !4783, inlinedAt: !4784)
!4788 = !DILocation(line: 15, column: 21, scope: !4783, inlinedAt: !4784)
!4789 = !DILocation(line: 16, column: 9, scope: !4783, inlinedAt: !4784)
!4790 = !DILocation(line: 14, column: 6, scope: !4791, inlinedAt: !4792)
!4791 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4792 = !DILocation(line: 349, column: 10, scope: !4793, inlinedAt: !4774)
!4793 = distinct !DILexicalBlock(scope: !4772, file: !32, line: 349, column: 4)
!4794 = !DILocation(line: 14, column: 31, scope: !4791, inlinedAt: !4792)
!4795 = !DILocation(line: 15, column: 2, scope: !4791, inlinedAt: !4792)
!4796 = !DILocation(line: 15, column: 21, scope: !4791, inlinedAt: !4792)
!4797 = !DILocation(line: 16, column: 9, scope: !4791, inlinedAt: !4792)
!4798 = !DILocation(line: 350, column: 4, scope: !4793, inlinedAt: !4774)
!4799 = !DILocation(line: 351, column: 11, scope: !4793, inlinedAt: !4774)
!4800 = !DILocation(line: 353, column: 9, scope: !4772, inlinedAt: !4774)
!4801 = !DILocation(line: 469, column: 5, scope: !4770)
!4802 = !DILocation(line: 471, column: 5, scope: !4803)
!4803 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 471, column: 5)
!4804 = !DILocation(line: 471, column: 28, scope: !4803)
!4805 = !DILocation(line: 472, column: 5, scope: !4803)
!4806 = !DILocation(line: 474, column: 5, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 474, column: 5)
!4808 = !DILocalVariable(name: "len", scope: !4809, file: !32, line: 342, type: !202, align: 8)
!4809 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4810 = !DILocation(line: 342, column: 7, scope: !4809, inlinedAt: !4811)
!4811 = !DILocation(line: 474, column: 18, scope: !4807)
!4812 = !DILocation(line: 474, column: 44, scope: !4809, inlinedAt: !4811)
!4813 = !DILocation(line: 342, column: 13, scope: !4809, inlinedAt: !4811)
!4814 = !DILocalVariable(name: "err", scope: !4809, file: !32, line: 343, type: !112, align: 8)
!4815 = !DILocation(line: 343, column: 12, scope: !4809, inlinedAt: !4811)
!4816 = !DILocation(line: 343, column: 18, scope: !4809, inlinedAt: !4811)
!4817 = !DILocation(line: 345, column: 8, scope: !4809, inlinedAt: !4811)
!4818 = !DILocation(line: 346, column: 8, scope: !4809, inlinedAt: !4811)
!4819 = !DILocation(line: 14, column: 6, scope: !4820, inlinedAt: !4821)
!4820 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4821 = !DILocation(line: 347, column: 11, scope: !4822, inlinedAt: !4811)
!4822 = distinct !DILexicalBlock(scope: !4809, file: !32, line: 347, column: 4)
!4823 = !DILocation(line: 14, column: 31, scope: !4820, inlinedAt: !4821)
!4824 = !DILocation(line: 15, column: 2, scope: !4820, inlinedAt: !4821)
!4825 = !DILocation(line: 15, column: 21, scope: !4820, inlinedAt: !4821)
!4826 = !DILocation(line: 16, column: 9, scope: !4820, inlinedAt: !4821)
!4827 = !DILocation(line: 14, column: 6, scope: !4828, inlinedAt: !4829)
!4828 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4829 = !DILocation(line: 349, column: 10, scope: !4830, inlinedAt: !4811)
!4830 = distinct !DILexicalBlock(scope: !4809, file: !32, line: 349, column: 4)
!4831 = !DILocation(line: 14, column: 31, scope: !4828, inlinedAt: !4829)
!4832 = !DILocation(line: 15, column: 2, scope: !4828, inlinedAt: !4829)
!4833 = !DILocation(line: 15, column: 21, scope: !4828, inlinedAt: !4829)
!4834 = !DILocation(line: 16, column: 9, scope: !4828, inlinedAt: !4829)
!4835 = !DILocation(line: 350, column: 4, scope: !4830, inlinedAt: !4811)
!4836 = !DILocation(line: 351, column: 11, scope: !4830, inlinedAt: !4811)
!4837 = !DILocation(line: 353, column: 9, scope: !4809, inlinedAt: !4811)
!4838 = !DILocation(line: 475, column: 5, scope: !4807)
!4839 = !DILocation(line: 477, column: 5, scope: !4840)
!4840 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 477, column: 5)
!4841 = !DILocation(line: 477, column: 18, scope: !4840)
!4842 = !DILocation(line: 478, column: 5, scope: !4840)
!4843 = !DILocation(line: 480, column: 9, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 480, column: 5)
!4845 = !DILocalVariable(name: "len", scope: !4846, file: !32, line: 482, type: !201, align: 8)
!4846 = distinct !DILexicalBlock(scope: !4844, file: !32, line: 481, column: 5)
!4847 = !DILocation(line: 482, column: 10, scope: !4846)
!4848 = !DILocation(line: 482, column: 16, scope: !4846)
!4849 = !DILocation(line: 483, column: 6, scope: !4846)
!4850 = !DILocation(line: 483, column: 19, scope: !4846)
!4851 = !DILocation(line: 484, column: 6, scope: !4846)
!4852 = !DILocation(line: 484, column: 33, scope: !4846)
!4853 = !DILocation(line: 484, column: 19, scope: !4846)
!4854 = !DILocation(line: 485, column: 6, scope: !4846)
!4855 = !DILocalVariable(name: "out_fn", scope: !4844, file: !32, line: 487, type: !1588, align: 8)
!4856 = !DILocation(line: 487, column: 14, scope: !4844)
!4857 = !DILocation(line: 487, column: 23, scope: !4844)
!4858 = !DILocation(line: 488, column: 5, scope: !4844)
!4859 = !DILocation(line: 488, column: 30, scope: !4844)
!4860 = !DILocalVariable(name: "len", scope: !4844, file: !32, line: 489, type: !201, align: 8)
!4861 = !DILocation(line: 489, column: 9, scope: !4844)
!4862 = !DILocation(line: 489, column: 15, scope: !4844)
!4863 = !DILocation(line: 490, column: 5, scope: !4844)
!4864 = !DILocation(line: 490, column: 19, scope: !4844)
!4865 = !DILocation(line: 491, column: 5, scope: !4844)
!4866 = !DILocation(line: 491, column: 32, scope: !4844)
!4867 = !DILocation(line: 491, column: 18, scope: !4844)
!4868 = !DILocation(line: 492, column: 5, scope: !4844)
!4869 = !DILocation(line: 492, column: 18, scope: !4844)
!4870 = !DILocation(line: 493, column: 5, scope: !4844)
!4871 = !DILocation(line: 495, column: 5, scope: !4872)
!4872 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 495, column: 5)
!4873 = !DILocation(line: 495, column: 26, scope: !4872)
!4874 = !DILocation(line: 496, column: 5, scope: !4872)
!4875 = !DILocation(line: 496, column: 23, scope: !4872)
!4876 = !DILocation(line: 497, column: 12, scope: !4872)
!4877 = !DILocation(line: 14, column: 6, scope: !4878, inlinedAt: !4879)
!4878 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4879 = !DILocation(line: 499, column: 5, scope: !4880)
!4880 = distinct !DILexicalBlock(scope: !4670, file: !32, line: 499, column: 5)
!4881 = !DILocation(line: 14, column: 31, scope: !4878, inlinedAt: !4879)
!4882 = !DILocation(line: 15, column: 2, scope: !4878, inlinedAt: !4879)
!4883 = !DILocation(line: 15, column: 21, scope: !4878, inlinedAt: !4879)
!4884 = !DILocation(line: 16, column: 9, scope: !4878, inlinedAt: !4879)
!4885 = !DILocation(line: 500, column: 5, scope: !4880)
!4886 = !DILocation(line: 500, column: 18, scope: !4880)
!4887 = !DILocation(line: 501, column: 5, scope: !4880)
!4888 = !DILocation(line: 503, column: 7, scope: !4546)
!4889 = !DILocation(line: 505, column: 4, scope: !4890)
!4890 = distinct !DILexicalBlock(scope: !4546, file: !32, line: 504, column: 3)
!4891 = !DILocation(line: 505, column: 22, scope: !4890)
!4892 = !DILocation(line: 506, column: 4, scope: !4890)
!4893 = !DILocation(line: 506, column: 23, scope: !4890)
!4894 = !DILocation(line: 509, column: 7, scope: !4546)
!4895 = !DILocation(line: 509, column: 29, scope: !4546)
!4896 = !DILocation(line: 509, column: 50, scope: !4546)
!4897 = !DILocalVariable(name: "is_neg", scope: !4546, file: !32, line: 511, type: !328, align: 1)
!4898 = !DILocation(line: 511, column: 8, scope: !4546)
!4899 = !DILocation(line: 512, column: 3, scope: !4546)
!4900 = !DILocalVariable(name: "len", scope: !4901, file: !32, line: 342, type: !202, align: 8)
!4901 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4902 = !DILocation(line: 342, column: 7, scope: !4901, inlinedAt: !4903)
!4903 = !DILocation(line: 512, column: 16, scope: !4546)
!4904 = !DILocation(line: 512, column: 42, scope: !4901, inlinedAt: !4903)
!4905 = !DILocation(line: 342, column: 13, scope: !4901, inlinedAt: !4903)
!4906 = !DILocalVariable(name: "err", scope: !4901, file: !32, line: 343, type: !112, align: 8)
!4907 = !DILocation(line: 343, column: 12, scope: !4901, inlinedAt: !4903)
!4908 = !DILocation(line: 343, column: 18, scope: !4901, inlinedAt: !4903)
!4909 = !DILocation(line: 345, column: 8, scope: !4901, inlinedAt: !4903)
!4910 = !DILocation(line: 346, column: 8, scope: !4901, inlinedAt: !4903)
!4911 = !DILocation(line: 14, column: 6, scope: !4912, inlinedAt: !4913)
!4912 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4913 = !DILocation(line: 347, column: 11, scope: !4914, inlinedAt: !4903)
!4914 = distinct !DILexicalBlock(scope: !4901, file: !32, line: 347, column: 4)
!4915 = !DILocation(line: 14, column: 31, scope: !4912, inlinedAt: !4913)
!4916 = !DILocation(line: 15, column: 2, scope: !4912, inlinedAt: !4913)
!4917 = !DILocation(line: 15, column: 21, scope: !4912, inlinedAt: !4913)
!4918 = !DILocation(line: 16, column: 9, scope: !4912, inlinedAt: !4913)
!4919 = !DILocation(line: 14, column: 6, scope: !4920, inlinedAt: !4921)
!4920 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !14, file: !14, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39)
!4921 = !DILocation(line: 349, column: 10, scope: !4922, inlinedAt: !4903)
!4922 = distinct !DILexicalBlock(scope: !4901, file: !32, line: 349, column: 4)
!4923 = !DILocation(line: 14, column: 31, scope: !4920, inlinedAt: !4921)
!4924 = !DILocation(line: 15, column: 2, scope: !4920, inlinedAt: !4921)
!4925 = !DILocation(line: 15, column: 21, scope: !4920, inlinedAt: !4921)
!4926 = !DILocation(line: 16, column: 9, scope: !4920, inlinedAt: !4921)
!4927 = !DILocation(line: 350, column: 4, scope: !4922, inlinedAt: !4903)
!4928 = !DILocation(line: 351, column: 11, scope: !4922, inlinedAt: !4903)
!4929 = !DILocation(line: 353, column: 9, scope: !4901, inlinedAt: !4903)
!4930 = !DILocation(line: 367, column: 34, scope: !4540)
!4931 = !DILocation(line: 518, column: 6, scope: !4517)
!4932 = !DILocation(line: 518, column: 31, scope: !4517)
!4933 = !DILocation(line: 519, column: 9, scope: !4517)
!4934 = distinct !DISubprogram(name: "print", linkageName: "std.io.Formatter.print", scope: !32, file: !32, line: 523, type: !1780, scopeLine: 523, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4935 = !DILocation(line: 524, column: 1, scope: !4934)
!4936 = !DILocalVariable(name: "self", arg: 1, scope: !4934, file: !32, line: 523, type: !1769)
!4937 = !DILocation(line: 523, column: 25, scope: !4934)
!4938 = !DILocalVariable(name: "str", arg: 2, scope: !4934, file: !32, line: 523, type: !964)
!4939 = !DILocation(line: 523, column: 39, scope: !4934)
!4940 = !DILocation(line: 525, column: 7, scope: !4934)
!4941 = !DILocation(line: 528, column: 3, scope: !4942)
!4942 = distinct !DILexicalBlock(scope: !4934, file: !32, line: 526, column: 2)
!4943 = !DILocation(line: 528, column: 18, scope: !4942)
!4944 = !DILocalVariable(name: ".temp", scope: !4945, file: !32, line: 530, type: !201, align: 8)
!4945 = distinct !DILexicalBlock(scope: !4934, file: !32, line: 530, column: 2)
!4946 = !DILocation(line: 530, column: 15, scope: !4945)
!4947 = !DILocalVariable(name: "c", scope: !4948, file: !32, line: 530, type: !16, align: 1)
!4948 = distinct !DILexicalBlock(scope: !4945, file: !32, line: 530, column: 20)
!4949 = !DILocation(line: 530, column: 11, scope: !4948)
!4950 = !DILocation(line: 530, column: 15, scope: !4948)
!4951 = !DILocation(line: 530, column: 20, scope: !4948)
!4952 = !DILocation(line: 531, column: 9, scope: !4934)
!4953 = distinct !DISubprogram(name: "out_null_fn", linkageName: "std.io.out_null_fn", scope: !32, file: !32, line: 330, type: !1590, scopeLine: 330, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !39, retainedNodes: !93)
!4954 = !DILocalVariable(name: "data", arg: 1, scope: !4953, file: !32, line: 330, type: !7)
!4955 = !DILocation(line: 330, column: 28, scope: !4953)
!4956 = !DILocalVariable(name: "c", arg: 2, scope: !4953, file: !32, line: 330, type: !16)
!4957 = !DILocation(line: 330, column: 47, scope: !4953)
